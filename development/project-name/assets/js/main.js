/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _Common = __webpack_require__(1);
	
	var _Common2 = _interopRequireDefault(_Common);
	
	var _Main = __webpack_require__(28);
	
	var _Main2 = _interopRequireDefault(_Main);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * fileOverview:
	 * Project:
	 * File: Top
	 * Date:
	 * Author:
	 */
	
	(function () {
	
	  // globalオブジェクト
	  if (window.gb === undefined) window.gb = {};
	  window.gb.in = {}; //instance
	
	  gb.in.common = new _Common2.default();
	  gb.in.main = new _Main2.default();
	})();

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
	fileOverview:
	roject:
	ile: Common
	ate:
	uthor:
	
	
	// import Pjax from '../Func/Pjax.js';
	
	
	// import Menu from '../Display/UI/_compornents/Menu.js';
	// import Nav from '../Display/UI/Nav.js';
	// import Alert from '../Display/UI/Alert.js';
	// import SideR from '../Display/UI/SideR.js';
	// import Time from '../Func/Time.js';
	
	// import PageTop from '../Display/UI/_parts/PageTop.js';
	// import Sec01Video from '../Display/UI/Sec01Video.js';
	
	// import SliderTop from '../Display/UI/SliderTop.js';
	
	
	var _Conf = __webpack_require__(2);
	
	var _Conf2 = _interopRequireDefault(_Conf);
	
	var _Util = __webpack_require__(4);
	
	var _Util2 = _interopRequireDefault(_Util);
	
	var _Func = __webpack_require__(5);
	
	var _Func2 = _interopRequireDefault(_Func);
	
	var _ReadyMgr = __webpack_require__(6);
	
	var _ReadyMgr2 = _interopRequireDefault(_ReadyMgr);
	
	var _UpdateMgr = __webpack_require__(8);
	
	var _UpdateMgr2 = _interopRequireDefault(_UpdateMgr);
	
	var _ResizeMgr = __webpack_require__(9);
	
	var _ResizeMgr2 = _interopRequireDefault(_ResizeMgr);
	
	var _ScrollMgr = __webpack_require__(10);
	
	var _ScrollMgr2 = _interopRequireDefault(_ScrollMgr);
	
	var _MouseMgr = __webpack_require__(11);
	
	var _MouseMgr2 = _interopRequireDefault(_MouseMgr);
	
	var _LoadMgr = __webpack_require__(12);
	
	var _LoadMgr2 = _interopRequireDefault(_LoadMgr);
	
	var _JudgeEnvironment = __webpack_require__(18);
	
	var _JudgeEnvironment2 = _interopRequireDefault(_JudgeEnvironment);
	
	var _ResponsiveSwitchImg = __webpack_require__(19);
	
	var _ResponsiveSwitchImg2 = _interopRequireDefault(_ResponsiveSwitchImg);
	
	var _SwipeTransition = __webpack_require__(20);
	
	var _SwipeTransition2 = _interopRequireDefault(_SwipeTransition);
	
	var _ScrollTransition = __webpack_require__(21);
	
	var _ScrollTransition2 = _interopRequireDefault(_ScrollTransition);
	
	var _Sns = __webpack_require__(22);
	
	var _Sns2 = _interopRequireDefault(_Sns);
	
	var _Layout = __webpack_require__(24);
	
	var _Layout2 = _interopRequireDefault(_Layout);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	'use strict';
	
	var Common = function () {
	  function Common() {
	    _classCallCheck(this, Common);
	
	    this.onImmediate();
	    this.setEvents();
	  }
	
	  _createClass(Common, [{
	    key: 'onImmediate',
	    value: function onImmediate() {
	
	      // ------------------------------------------------------------
	      //  初期値の設定・データの配置
	      //  util関数の初期化
	      //  イベントマネージャーの設置
	      // ------------------------------------------------------------
	      gb.in.conf = new _Conf2.default();
	      gb.in.u = new _Util2.default();
	      gb.in.f = new _Func2.default();
	      // gb.in.up = new UpdateMgr();
	      // gb.in.r = new ResizeMgr();
	      // gb.in.s = new ScrollMgr();
	      // gb.in.m = new MouseMgr();
	      // gb.in.rm = new ReadyMgr();
	      // gb.in.loadMgr = new LoadMgr();
	      // gb.in.sct = new ScrollTransition();
	
	      // ------------------------------------------------------------
	      //
	      //  その他
	      //
	      // ------------------------------------------------------------
	      // pjaxの設定
	      // gb.in.pjax = new Pjax();
	
	      // ------------------------------------------------------------
	      //  Layout
	      // ------------------------------------------------------------
	      // gb.in.Layout = new Layout();
	
	
	      // 準備完了後の処理
	      // gb.in.rm.onCompletedFunc = ()=>{new DisplayOpening();}
	    }
	  }, {
	    key: 'onReady',
	    value: function onReady() {
	
	      // ------------------------------------------------------------
	      //  デバイス・ブラウザ判定
	      //  スマホの向き判定
	      //  ページ情報取得
	      // ------------------------------------------------------------
	      // gb.in.je = new JudgeEnvironment();
	      // gb.in.resImg = new ResponsiveSwitchImg();
	      // gb.in.sns = new Sns($('.fbShare'),$('.twShare'),$('.lineShare'),$('.onMail'))
	      // gb.in.swt = new SwipeTransition();
	
	      // gb.in.f.checkCssBlend();
	
	      // ------------------------------------------------------------
	      //  UI
	      // ------------------------------------------------------------
	      // gb.in.menu = new Menu();
	      // gb.in.nav = new Nav();
	      // gb.in.sideR = new SideR();
	      // gb.in.alert = new Alert();
	      // gb.in.pagetop = new PageTop();
	
	      // bg
	      // gb.in.sliderTop = new SliderTop($('#bgWrap .sec01'));
	
	      // ------------------------------------------------------------
	      //  Effects
	      // ------------------------------------------------------------
	      // gb.in.pageTransitionEffect = new PageTransitionEffect($('#pageTransitionLayer'));
	      // gb.in.sec01Video = new Sec01Video();
	      // gb.in.Sec02Bg = new Section02Bg();
	
	      // gb.in.he01 = new HoverEffectSVG($('.SVGHover'),'#fff','#000');
	      // gb.in.he02 = new HoverEffectSVG($('.SVGHoverW'),'#81d8d0','#fff');
	      // gb.in.he03 = new HoverEffectSVG($('.SVGHoverW02'),'#81d8d0','#000');
	      // gb.in.he04 = new HoverEffectSVGLogo($('#header .logo, #header .subTit'));
	      // gb.in.he05 = new HoverEffectMenuItem($('#menu .menuList .item'));
	      // gb.in.he06 = new HoverEffectSVGArrowSideR($('#sideR .next'));
	      // gb.in.he07 = new HoverEffectMenuBtn($('.menuBtn01'));
	      // gb.in.he08 = new HoverEffectSNSPCFooter($('#sideL .sns.sp'));
	
	      // logo 出す
	      // TweenMax.to($('#header .logo'), 2.2, {opacity: 1, ease: Power2.easeInOut})
	
	      // gb.in.loadMgr.start();
	
	    }
	  }, {
	    key: 'onLoad',
	    value: function onLoad() {
	
	      // ------------------------------------------------------------
	      //
	      //  Func
	      //
	      // ------------------------------------------------------------
	
	
	      // ------------------------------------------------------------
	      //
	      //  Layout
	      //
	      // ------------------------------------------------------------
	
	      // ------------------------------------------------------------
	      //
	      //  Dispaly
	      //
	      // ------------------------------------------------------------
	
	      // ------------------------------------------------------------
	      //
	      //  Motion
	      //
	      // ------------------------------------------------------------
	
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	
	      $(document).on('ready', this.onReady.bind(this));
	      $(window).on('load', this.onLoad.bind(this));
	    }
	  }]);
	
	  return Common;
	}();
	
	exports.default = Common;

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
	fileOverview:
	roject:
	ile: Conf
	ate:
	uthor:
	
	
	var _Sound = __webpack_require__(3);
	
	var _Sound2 = _interopRequireDefault(_Sound);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Conf = function () {
	  function Conf() {
	    _classCallCheck(this, Conf);
	
	    // ------------------------------------------------------------
	    //  本番フラグ
	    // ------------------------------------------------------------    
	    this.RELEASE = true;
	    // this.RELEASE = false;
	
	    // ------------------------------------------------------------
	    //  フラグ関連
	    // ------------------------------------------------------------
	    this.FLG = {
	      LOG: true, // ログ出力
	      PARAM: true, // パラメータチェック
	      STATS: true // Stats表示
	    };
	    if (!this.RELEASE) {
	      this.FLG = {
	        LOG: false,
	        PARAM: false,
	        STATS: false
	      };
	    }
	
	    // ------------------------------------------------------------
	    //  基本 width height
	    // ------------------------------------------------------------
	    this.defW = 1300;
	    this.defH = 850;
	
	    this.W = 1200;
	    this.H = 750;
	
	    this.spW = 375;
	    this.spH = 667;
	
	    // ------------------------------------------------------------
	    //  ブレイクポイント
	    // ------------------------------------------------------------
	    this.bp = 768;
	
	    // ------------------------------------------------------------
	    //  mode
	    // ------------------------------------------------------------
	    this.mode = null;
	    this.keys = [{
	      'key': 'movie',
	      'value': ['morning', 'afternoon', 'night']
	    }, {
	      'key': 'data',
	      'value': ['data01', 'data02', 'data03']
	    }, {
	      'key': 'product',
	      'value': ['01']
	    }];
	    this.switchMode();
	
	    // ------------------------------------------------------------
	    //  sound data
	    // ------------------------------------------------------------
	    this.soundData = new _Sound2.default();
	
	    // ------------------------------------------------------------
	    //  sec02 bg Img Num
	    // ------------------------------------------------------------
	    this.sec02ImgNum = 396;
	
	    // ------------------------------------------------------------
	    //  youtube ID
	    // ------------------------------------------------------------
	    this.youtubeID01 = 'xW2oNpNrKd0';
	    this.youtubeID02 = 't2WeRRdAFeI';
	
	    // ------------------------------------------------------------
	    //  web font loaded
	    // ------------------------------------------------------------
	    this.webFontLoaded = false;
	  }
	
	  _createClass(Conf, [{
	    key: 'switchMode',
	    value: function switchMode() {
	
	      var i, key, len, param, ref, ref1, value;
	
	      ref = location.search.replace('?', '').split('&');
	
	      for (i = 0, len = ref.length; i < len; i++) {
	        param = ref[i];
	        ref1 = param.split('='), key = ref1[0], value = ref1[1];
	
	        for (var j = 0; j < this.keys.length; j++) {
	
	          var obj = this.keys[j];
	
	          // パラメータがキーと一緒だったら
	          if (obj.key === key) {
	
	            // 各値と比較
	            for (var k = 0; k < obj.value.length; k++) {
	
	              var val = obj.value[k];
	
	              // キーをthis.keysのkeyに、valueを比較して同値だったものに
	              if (val === value) this[obj.key] = val;
	            };
	          };
	        };
	      }
	    }
	  }]);
	
	  return Conf;
	}();
	
	exports.default = Conf;

/***/ },
/* 3 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	// ------------------------------------------------------------
	//
	//  Data
	//
	// ------------------------------------------------------------
	
	var SoundData = function SoundData() {
	
	  // this.ATARI01 = '/project-name/assets/sound/atari/Atari_04.wav';
	  // this.ATARI02 = '/project-name/assets/sound/atari/Atari_05.wav';
	
	  // this.BAN01 = '/project-name/assets/sound/don/Ba-n_01.wav';
	  // this.BAN02 = '/project-name/assets/sound/don/Ba-n_02.wav';
	  // this.BAN03 = '/project-name/assets/sound/don/Ba-n_03.wav';
	  // this.BAN04 = '/project-name/assets/sound/don/Ba-n_04.wav';
	
	  // this.DON01 = '/project-name/assets/sound/don/Big_Don_01.wav';
	  // this.DON02 = '/project-name/assets/sound/don/Big_Don_02.wav';
	  // this.DON03 = '/project-name/assets/sound/don/Big_Don_03.wav';
	  // this.DON04 = '/project-name/assets/sound/don/Don_04.wav';
	
	  // this.DODN01 = '/project-name/assets/sound/don/Dodon_01.wav';
	  // this.DODN02 = '/project-name/assets/sound/don/Dodon_02.wav';
	
	  // this.Gogogo01 = '/project-name/assets/sound/don/Gogogo_01.wav';
	  // this.Gogogo02 = '/project-name/assets/sound/don/Gogogo_02.wav';
	
	  // this.IKARI = '/project-name/assets/sound/ikari/Ikari_01.wav';
	
	  // this.ROULETTE01 = '/project-name/assets/sound/roulette/Roulette_01.wav';
	  // this.ROULETTE02 = '/project-name/assets/sound/roulette/Roulette_02.wav';
	  // this.ROULETTE03 = '/project-name/assets/sound/roulette/Roulette_03.wav';
	
	  // this.SEA = '/project-name/assets/sound/sea/Sea&kamome_01.wav';
	
	  _classCallCheck(this, SoundData);
	};
	
	exports.default = SoundData;

/***/ },
/* 4 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * fileOverview:
	 * Project:
	 * File: Util
	 * Date:
	 * Author:
	 */
	
	var Util = function () {
	  function Util() {
	    _classCallCheck(this, Util);
	
	    this.ua = window.navigator.userAgent.toLowerCase(); //useragent
	    this.appV = window.navigator.appVersion.toLowerCase(); //appVersion
	    this.isResSP = null; // responsive sp
	    this.isResPC = null; // responsive pc
	
	    this.isPC = null;
	    this.isSP = null;
	    this.isTAB = null;
	    this.isMB = null;
	
	    this.isIE = null;
	
	    this.isSetSPSize = false;
	
	    this.startTime = null;
	    this.elapsedTime = null;
	    this.now = new Date();
	  }
	
	  // ------------------------------------------------------------
	  //
	  //  Math
	  //
	  // ------------------------------------------------------------
	
	
	  // ランダムな整数を取得
	  // -----------------------------------
	  // @min : 最小値(int)
	  // @max : 最大値(int)
	  // return : minからmaxまでのランダムな整数(int)
	  // -----------------------------------
	
	
	  _createClass(Util, [{
	    key: "random",
	    value: function random(min, max) {
	
	      return Math.floor(Math.random() * (max + 1 - min) + min);
	    }
	
	    // ランダムな整数を2つの範囲から取得
	    // -----------------------------------
	    // @min1 : 最小値1(int)
	    // @max1 : 最大値1(int)
	    // @min2 : 最小値2(int)
	    // @max2 : 最大値2(int)
	    // return : minからmaxまでのランダムな整数(int)
	    // -----------------------------------
	
	  }, {
	    key: "random2",
	    value: function random2(min1, max1, min2, max2) {
	
	      if (this.hit(2)) {
	        return this.random(min1, max1);
	      } else {
	        return this.random(min2, max2);
	      }
	    }
	
	    // 1/@rangeの確率でtrueを取得
	    // -----------------------------------
	    // @range : 母数(int)
	    // return : true or false(boolean)
	    // -----------------------------------
	
	  }, {
	    key: "hit",
	    value: function hit(range) {
	
	      return this.random(0, range - 1) === 0;
	    }
	
	    // 0から範囲内でランダムな整数を取得
	    // -----------------------------------
	    // @val : 範囲(int)
	    // return : ランダムな整数(int)
	    // -----------------------------------
	
	  }, {
	    key: "range",
	    value: function range(val) {
	
	      return this.random(-val, val);
	    }
	
	    // 値をマッピング
	    // -----------------------------------
	    // @num : マッピングする値(Number)
	    // @resMin : 結果となる値の最小値(Number)
	    // @resMax : 結果となる値の最大値(Number)
	    // @baseMin : 元となる値の最小値(Number)
	    // @baseMax : 元となる値の最大値(Number)
	    // return : マッピングされた値(Number)
	    // -----------------------------------
	
	  }, {
	    key: "map",
	    value: function map(num, resMin, resMax, baseMin, baseMax) {
	
	      var p;
	      if (num < baseMin) {
	        return resMin;
	      }
	      if (num > baseMax) {
	        return resMax;
	      }
	      p = (resMax - resMin) / (baseMax - baseMin);
	
	      return (num - baseMin) * p + resMin;
	    }
	
	    // 数値に小数点第@n位までをつけた文字列を返す
	    // -----------------------------------
	    // @num : 値(Number)
	    // @n : 小数点の位(int)
	    // return : 変換された値(String)
	    // -----------------------------------
	
	  }, {
	    key: "decimal",
	    value: function decimal(num, n) {
	      var i, pos;
	      num = String(num);
	      pos = num.indexOf(".");
	      if (n === 0) {
	        return num.split(".")[0];
	      }
	      if (pos === -1) {
	        num += ".";
	        i = 0;
	        while (i < n) {
	          num += "0";
	          i++;
	        }
	        return num;
	      }
	      num = num.substr(0, pos) + num.substr(pos, n + 1);
	      return num;
	    }
	  }, {
	    key: "clamp",
	    value: function clamp(numerator, denominator, val) {
	
	      return val * (numerator / denominator);
	    }
	  }, {
	    key: "degree",
	    value: function degree(radians) {
	
	      return radians * 180 / Math.PI; //1ラジアンが何度か
	    }
	
	    // to radians
	
	  }, {
	    key: "radian",
	    value: function radian(angle) {
	
	      return angle * Math.PI / 180; //1度何ラジアンか
	    }
	  }, {
	    key: "dist",
	    value: function dist(p1, p2) {
	
	      return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));
	    }
	  }, {
	    key: "ascend",
	    value: function ascend(arr) {
	
	      arr.sort(function (a, b) {
	        if (a > b) return -1;
	        if (a < b) return 1;
	        return 0;
	      });
	      // var a = [5,3,9,1,10]
	      // 結果:10,9,5,3,1
	    }
	  }, {
	    key: "descend",
	    value: function descend(arr) {
	
	      arr.sort(function (a, b) {
	        if (a < b) return -1;
	        if (a > b) return 1;
	        return 0;
	      });
	
	      // var a = [5,3,9,1,10]
	      // 結果:1,3,5,9,10
	    }
	
	    // map(value, min01, max01, min02, max02) {
	
	    //   var dis01 = max01 - min01;
	    //   var dis02 = max02 - min02
	
	    //   var rate = dis02 / dis01;
	
	    //   value = value * rate;
	
	    //   return value;
	    // }
	
	  }, {
	    key: "constrain",
	    value: function constrain(value, min, max) {
	
	      return Math.min(max, Math.max(value, min));
	
	      // if (value <= low) value = low;
	      // if (value >= high) value = high;     
	      // return value;
	    }
	
	    // ------------------------------------------------------------
	    //
	    //  Array
	    //
	    // ------------------------------------------------------------
	
	    // 配列内のランダムな値をひとつ取得
	    // -----------------------------------
	    // @arr : 配列
	    // return : 配列内の値
	    // -----------------------------------
	
	  }, {
	    key: "arrRand",
	    value: function arrRand(arr) {
	
	      return arr[this.random(0, arr.length - 1)];
	    }
	
	    // 配列をランダムに並べ替え
	    // -----------------------------------
	    // @arr : 配列(Array)
	    // -----------------------------------
	
	  }, {
	    key: "shuffle",
	    value: function shuffle(ary) {
	
	      var arr = [];
	      arr = ary.slice();
	      var i = arr.length;
	      while (i) {
	        var j = Math.floor(Math.random() * i);
	        var t = arr[--i];
	        arr[i] = arr[j];
	        arr[j] = t;
	      }
	      return arr;
	    }
	
	    // ランダムな数値を作る
	
	  }, {
	    key: "randomArr",
	    value: function randomArr(len) {
	
	      var arr = new Array();
	
	      for (var i = 0; i < len; i++) {
	        arr.push(i);
	      }arr = this.shuffleAry(arr);
	
	      return arr;
	    }
	
	    // nullを削除した配列を返す
	    // -----------------------------------
	    // @arr : 配列(Array)
	    // return : null削除した配列(Array)
	    // -----------------------------------
	
	  }, {
	    key: "sliceNull",
	    value: function sliceNull(arr) {
	
	      var i, l, len1, newArr, val;
	      newArr = [];
	      for (i = l = 0, len1 = arr.length; l < len1; i = ++l) {
	        val = arr[i];
	        if (val !== null) {
	          newArr.push(val);
	        }
	      }
	      return newArr;
	    }
	
	    // 配列内のパラメータを比較してソート
	    // -----------------------------------
	    // @arr : 配列(Array)
	    // @para : パラメーター名
	    // @desc : 降順かどうか(boolean) デフォルトは昇順
	    // -----------------------------------
	
	  }, {
	    key: "sort",
	    value: function sort(arr, para, desc) {
	      if (desc === void 0) {
	        desc = false;
	      }
	      if (desc) {
	        return arr.sort(function (a, b) {
	          return b[para] - a[para];
	        });
	      } else {
	        return arr.sort(function (a, b) {
	          return a[para] - b[para];
	        });
	      }
	    }
	  }, {
	    key: "getKey",
	    value: function getKey(list, value) {
	      var returnKey = [];
	      for (var key in list) {
	        if (list[key] == value) {
	          returnKey.push(key);
	        }
	      }
	      return returnKey;
	    }
	
	    // ユニークIDを取得
	    // -----------------------------------
	
	  }, {
	    key: "unique",
	    value: function unique() {
	
	      return new Date().getTime();
	    }
	
	    // **jquary使用
	    // ボタンモード変更
	    // trueならカーソルがポインターの形に
	    // falseならデフォルトのカーソルに
	    // -----------------------------------
	    // @flg : 適用するかどうか(boolean)
	    // -----------------------------------
	
	  }, {
	    key: "buttonMode",
	    value: function buttonMode(flg) {
	
	      if (flg) {
	        return $("body").css("cursor", "pointer");
	      } else {
	        return $("body").css("cursor", "default");
	      }
	    }
	
	    // ------------------------------------------------------------
	    //
	    //  device
	    //
	    // ------------------------------------------------------------
	
	  }, {
	    key: "isDeviceSP",
	    value: function isDeviceSP() {
	
	      var media = ["iphone", "ipod", "ipad", "android", "dream", "cupcake", "blackberry9500", "blackberry9530", "blackberry9520", "blackberry9550", "blackberry9800", "webos", "incognito", "webmate"];
	      var pattern = new RegExp(media.join("|"), "i");
	
	      var b = pattern.test(this.ua);
	      if (b) $('body').addClass('isDeviceSP');
	
	      this.isSP = b;
	    }
	  }, {
	    key: "isDeviceTAB",
	    value: function isDeviceTAB() {
	
	      var b = this.ua.indexOf("windows") != -1 && this.ua.indexOf("touch") != -1 || this.ua.indexOf("ipad") != -1 || this.ua.indexOf("android") != -1 && this.ua.indexOf("mobile") == -1 || this.ua.indexOf("firefox") != -1 && this.ua.indexOf("tablet") != -1 || this.ua.indexOf("kindle") != -1 || this.ua.indexOf("silk") != -1 || this.ua.indexOf("playbook") != -1;
	      if (b) $('body').addClass('isDeviceTAB');
	
	      this.isTAB = b;
	    }
	  }, {
	    key: "isDeviceMB",
	    value: function isDeviceMB() {
	
	      var b = this.ua.indexOf("windows") != -1 && this.ua.indexOf("phone") != -1 || this.ua.indexOf("iphone") != -1 || this.ua.indexOf("ipod") != -1 || this.ua.indexOf("android") != -1 && this.ua.indexOf("mobile") != -1 || this.ua.indexOf("firefox") != -1 && this.ua.indexOf("mobile") != -1 || this.ua.indexOf("blackberry") != -1;
	      if (b) $('body').addClass('isDeviceMB');
	
	      this.isMB = b;
	    }
	  }, {
	    key: "isDevicePC",
	    value: function isDevicePC() {
	
	      if (!(this.isSP || this.isTAB || this.isMB)) {
	
	        $('body').addClass('isDevicePC');
	        this.isPC = true;
	        return;
	      }
	
	      this.isPC = false;
	    }
	
	    // スマフォ判定
	    // -----------------------------------
	    // return : true or false(boolean)
	    // -----------------------------------
	
	  }, {
	    key: "isSmt",
	    value: function isSmt() {
	
	      return navigator.userAgent.indexOf('iPad') > 0 || navigator.userAgent.indexOf('iPhone') > 0 || navigator.userAgent.indexOf('iPod') > 0 || navigator.userAgent.indexOf('Android') > 0;
	    }
	
	    // タブレット端末かどうか
	    // -----------------------------------
	    // return : true or false(boolean)
	    // -----------------------------------
	
	  }, {
	    key: "isTablet",
	    value: function isTablet() {
	
	      return this.isIpad() || this.isAndroid() && navigator.userAgent.indexOf('Mobile') === -1;
	    }
	
	    // iPad判定
	    // -----------------------------------
	    // return : true or false(boolean)
	    // -----------------------------------
	
	  }, {
	    key: "isIpad",
	    value: function isIpad() {
	
	      return navigator.userAgent.indexOf('iPad') > 0;
	    }
	
	    // ------------------------------------------------------------
	    //
	    //  OS
	    //
	    // ------------------------------------------------------------
	
	    // Android判定
	    // -----------------------------------
	    // return : true or false(boolean)
	    // -----------------------------------
	
	  }, {
	    key: "isAndroid",
	    value: function isAndroid() {
	
	      var u;
	      u = navigator.userAgent;
	      return u.indexOf('BlackBerry') > 0 || u.indexOf('Android') > 0 || u.indexOf('Windows Phone') > 0;
	    }
	  }, {
	    key: "isiPhone",
	    value: function isiPhone() {
	      var pattern = new RegExp("iphone", "i");
	      return pattern.test(this.ua);
	    }
	
	    // iOS判定
	    // -----------------------------------
	    // return : true or false(boolean)
	    // -----------------------------------
	
	  }, {
	    key: "isIos",
	    value: function isIos() {
	
	      return navigator.userAgent.indexOf('iPad') > 0 || navigator.userAgent.indexOf('iPhone') > 0 || navigator.userAgent.indexOf('iPod') > 0;
	    }
	
	    // PS3判定
	    // -----------------------------------
	    // return : true or false(boolean)
	    // -----------------------------------
	
	  }, {
	    key: "isPs3",
	    value: function isPs3() {
	
	      var u;
	      u = navigator.userAgent;
	      return u.indexOf('PLAYSTATION 3') > 0;
	    }
	
	    // VITA判定
	    // -----------------------------------
	    // return : true or false(boolean)
	    // -----------------------------------
	
	  }, {
	    key: "isVita",
	    value: function isVita() {
	
	      var u;
	      u = navigator.userAgent;
	      return u.indexOf('PlayStation Vita') > 0;
	    }
	
	    // ------------------------------------------------------------
	    //
	    //  browser
	    //
	    // ------------------------------------------------------------
	    // IEかどうか
	    // -----------------------------------
	    // return : true or false(boolean)
	    // -----------------------------------
	
	  }, {
	    key: "isIe",
	    value: function isIe() {
	
	      var ua;
	      ua = window.navigator.userAgent.toLowerCase();
	      return ua.indexOf('msie') !== -1 || ua.indexOf('trident/7') !== -1;
	    }
	
	    // WINかどうか
	    // -----------------------------------
	    // return : true or false(boolean)
	    // -----------------------------------
	
	  }, {
	    key: "isWin",
	    value: function isWin() {
	
	      return navigator.platform.indexOf("Win") !== -1;
	    }
	
	    // googleChromeかどうか
	    // -----------------------------------
	    // return : true or false(boolean)
	    // -----------------------------------
	
	  }, {
	    key: "isChrome",
	    value: function isChrome() {
	
	      return navigator.userAgent.indexOf('Chrome') > 0;
	    }
	
	    // FireFoxかどうか
	    // -----------------------------------
	    // return : true or false(boolean)
	    // -----------------------------------
	
	  }, {
	    key: "isFF",
	    value: function isFF() {
	
	      return window.navigator.userAgent.toLowerCase().indexOf('firefox') !== -1;
	    }
	  }, {
	    key: "isSafari",
	    value: function isSafari() {
	
	      if (this.ua.indexOf("chrome") != -1) return false;
	      if (this.ua.indexOf("lunascape") != -1) return false;
	      var pattern = new RegExp("safari", "i");
	      return pattern.test(this.ua);
	    }
	  }, {
	    key: "isOpera",
	    value: function isOpera() {
	
	      var pattern = new RegExp("opera", "i");
	      return pattern.test(this.ua);
	    }
	
	    // iOSのsafari以外かどうか
	    // -----------------------------------
	    // return : true or false(boolean)
	    // -----------------------------------
	
	  }, {
	    key: "isIOSUiView",
	    value: function isIOSUiView() {
	
	      var a;
	      a = window.navigator.userAgent.toLowerCase();
	      return this.isIos() && a.indexOf('safari') === -1 || this.isIos() && a.indexOf('crios') > 0 || this.isIos() && a.indexOf('gsa') > 0;
	    }
	
	    // ------------------------------------------------------------
	    //
	    //  version
	    //
	    // ------------------------------------------------------------
	    // IE8以下かどうか
	    // -----------------------------------
	    // return : true or false(boolean)
	    // -----------------------------------
	
	  }, {
	    key: "isIe8Under",
	    value: function isIe8Under() {
	
	      var msie;
	      msie = navigator.appVersion.toLowerCase();
	      msie = msie.indexOf('msie') > -1 ? parseInt(msie.replace(/.*msie[ ]/, '').match(/^[0-9]+/)) : 0;
	      return msie <= 8 && msie !== 0;
	    }
	
	    // IE9以下かどうか
	    // -----------------------------------
	    // return : true or false(boolean)
	    // -----------------------------------
	
	  }, {
	    key: "isIe9Under",
	    value: function isIe9Under() {
	
	      var msie;
	      msie = navigator.appVersion.toLowerCase();
	      msie = msie.indexOf('msie') > -1 ? parseInt(msie.replace(/.*msie[ ]/, '').match(/^[0-9]+/)) : 0;
	      return msie <= 9 && msie !== 0;
	    }
	
	    // IE10以下かどうか
	    // -----------------------------------
	    // return : true or false(boolean)
	    // -----------------------------------
	
	  }, {
	    key: "isIe10Under",
	    value: function isIe10Under() {
	
	      var msie;
	      msie = navigator.appVersion.toLowerCase();
	      msie = msie.indexOf('msie') > -1 ? parseInt(msie.replace(/.*msie[ ]/, '').match(/^[0-9]+/)) : 0;
	      return msie <= 10 && msie !== 0;
	    }
	
	    // IE11以下かどうか
	    // -----------------------------------
	    // return : true or false(boolean)
	    // -----------------------------------
	
	  }, {
	    key: "isIe11Under",
	    value: function isIe11Under() {
	
	      var b = this.isIe10Under() || this.ua.indexOf("trident") != -1;
	      return b;
	      // return true;
	    }
	
	    // edgeかどうか
	    // -----------------------------------
	    // return : true or false(boolean)
	    // -----------------------------------
	
	  }, {
	    key: "isEdge",
	    value: function isEdge() {
	
	      log(this.ua.indexOf("AppleWebkit"), this.ua.indexOf("Edge"), this.ua, this.appV);
	      var b = this.ua.indexOf("applewebkit") >= 0 && this.ua.indexOf("edge") != -1;
	      return b;
	      // return true;
	    }
	  }, {
	    key: "isIEVersion",
	    value: function isIEVersion() {
	
	      $('body').addClass('ie');
	      this.isIE = true;
	
	      if (this.appV.indexOf("msie 10.") != -1) {
	        $('body').addClass('ie10');
	        return 'ie10';
	      } else if (this.appV.indexOf("msie 9.") != -1) {
	        $('body').addClass('ie9');
	        return 'ie9';
	      } else if (this.appV.indexOf("msie 8.") != -1) {
	        $('body').addClass('ie8');
	        return 'ie8';
	      } else if (this.appV.indexOf("msie 7.") != -1) {
	        $('body').addClass('ie7');
	        return 'ie7';
	      } else if (this.appV.indexOf("msie 6.") != -1) {
	        $('body').addClass('ie6');
	        return 'ie6';
	      } else if (this.appV.indexOf("trident") != -1) {
	        $('body').addClass('ie11');
	        this.isIE11 = true;
	        return 'ie11';
	      } else if (this.ua.indexOf("applewebkit") >= 0 && this.ua.indexOf("edge") != -1) {
	        $('body').addClass('isEdge');
	        return 'edge';
	      }
	
	      $('body').removeClass('ie');
	      this.isIE = false;
	    }
	  }, {
	    key: "isAndroidVersion",
	    value: function isAndroidVersion() {
	
	      if (this.ua.indexOf("android") > 0) {
	
	        var version = parseFloat(this.ua.slice(this.ua.indexOf("android") + 8));
	        return version;
	      }
	    }
	  }, {
	    key: "isiphoneVersion",
	    value: function isiphoneVersion() {
	
	      if (this.ua.indexOf("iPhone OS") > 0) {
	
	        var version = parseFloat(this.ua.slice(this.ua.indexOf("iPhone OS") + 10));
	        return version;
	      }
	    }
	
	    // ------------------------------------------------------------
	    //
	    //  portrait / landscape
	    //
	    // ------------------------------------------------------------
	
	  }, {
	    key: "isDirection",
	    value: function isDirection() {
	
	      var W = window.innerWidth,
	          H = window.innerHeight;
	
	      if (H > W) {
	        $("body").addClass("portrait");
	        $("body").removeClass("landscape");
	      } else {
	        $("body").addClass("landscape");
	        $("body").removeClass("portrait");
	      }
	    }
	
	    // ------------------------------------------------------------
	    //
	    //  responsive 横幅を見る
	    //
	    // ------------------------------------------------------------
	
	  }, {
	    key: "isResponsive",
	    value: function isResponsive(bp) {
	
	      if (bp == undefined) bp = 375;
	
	      var W = window.innerWidth,
	          H = window.innerHeight;
	
	      if (W > bp) {
	        this.isResSP = false;
	        this.isResPC = true;
	        $('body').removeClass('isResponsiveSP');
	        $('body').addClass('isResponsivePC');
	      } else {
	        this.isResSP = true;
	        this.isResPC = false;
	        $('body').addClass('isResponsiveSP');
	        $('body').removeClass('isResponsivePC');
	      }
	    }
	
	    // ------------------------------------------------------------
	    //
	    //  URL
	    //
	    // ------------------------------------------------------------
	
	    // クエリ抜き出し
	    // -----------------------------------
	    // @key : 抜き出すパラメータ名(String)
	    // -----------------------------------
	    // getQuery(key) {
	
	    //   var qs, regex;
	    //   key = key.replace(/[€[]/, "€€€[").replace(/[€]]/, "€€€]");
	    //   regex = new RegExp("[€€?&]" + key + "=([^&#]*)");
	    //   qs = regex.exec(window.location.href);
	    //   if (qs === null) {
	    //     return "";
	    //   } else {
	    //     return qs[1];
	    //   }
	
	    // }
	
	  }, {
	    key: "getParam",
	    value: function getParam() {
	
	      var url = location.href;
	      var param = url.split('?')[1];
	      if (param == undefined) return undefined;
	      var paramItems = param.split('&');
	      var list = {};
	
	      for (var i = 0; i < paramItems.length; i++) {
	
	        paramItem = paramItems[i].split('=');
	        list[paramItem[0]] = paramItem[1];
	      }
	
	      return list;
	    }
	
	    // ハッシュ取得
	    // -----------------------------------
	    // return : location.hashの#を削除したやつ
	    // -----------------------------------
	
	  }, {
	    key: "hash",
	    value: function hash() {
	
	      return location.hash.replace("#", "");
	    }
	
	    // cookie取得
	    // -----------------------------------
	    // @key : パラメータ名
	    // -----------------------------------
	
	  }, {
	    key: "getCookie",
	    value: function getCookie(key) {
	
	      var a, arr, i, l, len1, val;
	      if (document.cookie === void 0 || document.cookie === null) {
	        return null;
	      }
	      arr = document.cookie.split("; ");
	      for (i = l = 0, len1 = arr.length; l < len1; i = ++l) {
	        val = arr[i];
	        a = val.split("=");
	        if (a[0] === key) {
	          return a[1];
	        }
	      }
	      return null;
	    }
	
	    // cookie設定
	    // -----------------------------------
	    // @key : パラメータ名
	    // @val : 値
	    // -----------------------------------
	
	  }, {
	    key: "setCookie",
	    value: function setCookie(key, val) {
	
	      return document.cookie = key + "=" + val;
	    }
	  }, {
	    key: "isPCSP",
	    value: function isPCSP() {
	
	      var url = location.href;
	
	      if (!this.isPC && !this.isTAB && url.indexOf('pc') != -1) {
	
	        location.href = '/op_golden';
	      }
	
	      if (this.isPC && url.indexOf('pc') == -1) {
	
	        location.href = '/op_golden/pc/';
	      }
	
	      if (this.isTAB && url.indexOf('pc') == -1) {
	
	        location.href = '/op_golden/pc/';
	      }
	
	      if (this.isContain(url, 'roulette')) location.href = '/op_golden';
	      if (this.isContain(url, 'topics')) location.href = '/op_golden';
	    }
	
	    // ------------------------------------------------------------
	    //
	    //  Color
	    //
	    // ------------------------------------------------------------
	
	    // rgbからHEXカラー取得
	    // -----------------------------------
	    // @r : 0~255
	    // @g : 0~255
	    // @b : 0~255
	    // return : ex "#FFFFFF"
	    // -----------------------------------
	
	  }, {
	    key: "getHexColor",
	    value: function getHexColor(r, g, b) {
	      var str;
	      str = (r << 16 | g << 8 | b).toString(16);
	      return "#" + new Array(7 - str.length).join("0") + str;
	    }
	
	    // ------------------------------------------------------------
	    //
	    //  String
	    //
	    // ------------------------------------------------------------
	
	  }, {
	    key: "isContain",
	    value: function isContain(str, contain) {
	
	      // strの中に,containが存在したら
	      if (str.indexOf(contain) != -1) {
	        return true;
	      }
	
	      return false;
	    }
	
	    // 0埋めで2桁にする関数
	
	  }, {
	    key: "add0",
	    value: function add0(str) {
	      var num = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -2;
	
	
	      return ("000000000000" + str).substr(num);
	    }
	  }, {
	    key: "floatFormat",
	    value: function floatFormat(number, n) {
	
	      var _pow = Math.pow(10, n);
	      return Math.round(number * _pow) / _pow;
	    }
	
	    // 値段表記
	    // -----------------------------------
	
	  }, {
	    key: "price",
	    value: function price(num) {
	
	      return String(num).replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1,');
	    }
	
	    // 文字列を反転
	    // -----------------------------------
	    // @str : 文字列(String)
	    // return : 文字列(String)
	    // -----------------------------------
	
	  }, {
	    key: "strReverse",
	    value: function strReverse(str) {
	
	      var i, len, res;
	      res = "";
	      len = str.length;
	      i = 1;
	      while (i <= len) {
	        res += str.substr(-i, 1);
	        i++;
	      }
	      return res;
	    }
	
	    // 文字列の全置換
	    // -----------------------------------
	    // @val  : 文字列
	    // @oeg  : 置換前の文字列
	    // @dest : 置換後の文字列
	    // -----------------------------------
	
	  }, {
	    key: "replaceAll",
	    value: function replaceAll(val, org, dest) {
	
	      return val.split(org).join(dest);
	    }
	  }, {
	    key: "strReplace",
	    value: function strReplace(str, before, after) {
	
	      var r = new RegExp(before, 'g');
	
	      return str.replace(r, after);
	    }
	
	    // ------------------------------------------------------------
	    //
	    //  Date
	    //
	    // ------------------------------------------------------------
	
	  }, {
	    key: "getNow",
	    value: function getNow() {
	
	      this.now = new Date();
	    }
	  }, {
	    key: "start",
	    value: function start() {
	
	      this.startTime = this.now.getTime();
	    }
	  }, {
	    key: "elapsed",
	    value: function elapsed() {
	
	      this.elapsedTime = this.now.getTime() - this.startTime;
	    }
	  }, {
	    key: "m",
	    value: function m() {
	
	      return Math.floor(this.elapsedTime + 100 / 60);
	    }
	  }, {
	    key: "s",
	    value: function s() {
	
	      return Math.floor(this.elapsedTime / 1000);
	    }
	  }, {
	    key: "ms",
	    value: function ms() {
	
	      return this.elapsedTime;
	    }
	  }, {
	    key: "time",
	    value: function time() {
	
	      this.getNow();
	
	      this.hour = this.now.getHours(); // 時
	      this.minute = this.now.getMinutes(); // 分
	      this.second = this.now.getSeconds();
	      this.millSecond = this.now.getMilliseconds();
	    }
	  }, {
	    key: "date",
	    value: function date() {
	
	      return this.now.getDate();
	    }
	  }, {
	    key: "months",
	    value: function months() {
	
	      var monthdays = new Array(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);
	
	      return this.now.getMonth() + 1;
	    }
	  }, {
	    key: "year",
	    value: function year() {
	
	      return this.now.getFullYear();
	    }
	  }, {
	    key: "day",
	    value: function day() {
	
	      // 曜日 (日本語)
	      var weekDayJP = ["日", "月", "火", "水", "木", "金", "土"];
	      var wDJ = weekDayJP[this.now.getDay()];
	
	      // 曜日 (英語)
	      var weekDayEN = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
	      var wDE = weekDayEN[this.now.getDay()];
	    }
	
	    // 数日後のDateオブジェクト取得
	    // -----------------------------------
	
	  }, {
	    key: "afterDay",
	    value: function afterDay(date, num) {
	
	      return new Date(date.getTime() + Number(num) * 24 * 60 * 60 * 1000);
	    }
	
	    // ------------------------------------------------------------
	    //
	    //  Data type check
	    //
	    // ------------------------------------------------------------
	
	  }, {
	    key: "isObject",
	    value: function isObject(value, ignoreArray) {
	      return (typeof value === "undefined" ? "undefined" : _typeof(value)) === 'object' && value !== null;
	    }
	  }, {
	    key: "isNumber",
	    value: function isNumber(value) {
	      return typeof value === 'number';
	    }
	  }, {
	    key: "isString",
	    value: function isString(value) {
	      return typeof value === 'string';
	    }
	  }, {
	    key: "isFunction",
	    value: function isFunction(value) {
	      return typeof value === 'function';
	    }
	  }, {
	    key: "isArray",
	    value: function isArray(value) {
	      return Object.prototype.toString.call(value) === '[object Array]';
	    }
	  }, {
	    key: "isNull",
	    value: function isNull(value) {
	      return value === null;
	    }
	  }, {
	    key: "isUndefined",
	    value: function isUndefined(value) {
	      return typeof value === 'undefined';
	    }
	
	    // ------------------------------------------------------------
	    //
	    //  other
	    //
	    // ------------------------------------------------------------
	
	  }, {
	    key: "setImgSPSize",
	    value: function setImgSPSize($target) {
	
	      // responsive spのとき処理
	      if (!this.isResSP) return;
	      // 一度だけ処理
	      // if (this.isSetSPSize) return;
	      // this.isSetSPSize = true;
	
	      var $img = $target,
	          len = $img.length;
	
	      $img.each(function (i) {
	
	        var w = Math.floor($(this).width() / 2),
	            h = Math.floor($(this).height() / 2);
	
	        $(this).attr({
	          'width': w,
	          'height': h
	        });
	
	        if (len == i + 1) $(window).trigger('setSpZieEnd');
	      });
	    }
	
	    // ------------------------------------------------------------
	    //  スマホ操作無効
	    // ------------------------------------------------------------
	
	  }, {
	    key: "setPrevent",
	    value: function setPrevent() {
	
	      var self = this;
	
	      $(window).on('touchmove.noControl', function (e) {
	        e.preventDefault();
	      });
	    }
	  }, {
	    key: "removePrevent",
	    value: function removePrevent() {
	
	      $(window).off('touchmove.noControl');
	    }
	
	    // ------------------------------------------------------------
	    //  host,protcol
	    // ------------------------------------------------------------
	
	  }, {
	    key: "protocol",
	    value: function protocol() {
	
	      return location.protocol;
	    }
	  }, {
	    key: "host",
	    value: function host() {
	
	      return location.hostname;
	      // return location.host
	    }
	  }, {
	    key: "port",
	    value: function port() {
	
	      return location.port;
	    }
	  }, {
	    key: "path",
	    value: function path() {
	
	      return location.pathname;
	    }
	  }, {
	    key: "preventDefault",
	    value: function preventDefault(e) {
	
	      e = e || window.event;
	      if (e.preventDefault) e.preventDefault();
	      e.returnValue = false;
	    }
	  }, {
	    key: "preventDefaultForScrollKeys",
	    value: function preventDefaultForScrollKeys(e) {
	
	      if (keys[e.keyCode]) {
	        preventDefault(e);
	        return false;
	      }
	    }
	  }, {
	    key: "disableScroll",
	    value: function disableScroll() {
	
	      if (window.addEventListener) // older FF
	        window.addEventListener('DOMMouseScroll', this.preventDefault, false);
	      window.onwheel = this.preventDefault; // modern standard
	      window.onmousewheel = document.onmousewheel = this.preventDefault; // older browsers, IE
	      window.ontouchmove = this.preventDefault; // mobile
	      document.onkeydown = this.preventDefaultForScrollKeys;
	    }
	  }, {
	    key: "enableScroll",
	    value: function enableScroll() {
	
	      if (window.removeEventListener) window.removeEventListener('DOMMouseScroll', this.preventDefault, false);
	      window.onmousewheel = document.onmousewheel = null;
	      window.onwheel = null;
	      window.ontouchmove = null;
	      document.onkeydown = null;
	    }
	  }]);
	
	  return Util;
	}();
	
	exports.default = Util;

/***/ },
/* 5 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * fileOverview:
	 * Project:
	 * File: Func
	 * Date:
	 * Author:
	 */
	
	var Func = function () {
	  function Func() {
	    _classCallCheck(this, Func);
	
	    this.blank();
	    this.debugger();
	    this.requestAnimationFrame();
	    this.expandjQuery();
	  }
	
	  _createClass(Func, [{
	    key: 'blank',
	    value: function blank() {
	
	      $(function () {
	        $('.blank').attr('target', '_blank');
	      });
	    }
	  }, {
	    key: 'debugger',
	    value: function _debugger() {
	
	      // デバッグモード切替
	      var RELEASE = gb.in.conf.RELEASE;
	
	      // 置換対象のメソッドを配列として保持する
	      var methods = ['log', 'debug', 'info', 'warn', 'error', 'dir', 'trace', 'assert', 'dirxml', 'group', 'groupEnd', 'time', 'timeEnd', 'count', 'profile', 'profileEnd'];
	
	      // consoleが使えない場合は空のオブジェクトを設定しておく
	      if (typeof window.console === "undefined") {
	        window.console = {};
	      }
	
	      // 各メソッドをwindowへ直接追加して行く
	      for (var i in methods) {
	        (function (m) {
	
	          // consoleにある？デバッグモードは有効？consoleのものは関数？
	          if (console[m] && !RELEASE && typeof console[m] === "function") {
	            window[m] = console[m].bind(console);
	          } else {
	            // debugModeがfalse,もしくは該当メソッドが存在しない場合は、空のメソッドを用意する
	            window[m] = function () {};
	          }
	        })(methods[i]);
	      }
	    }
	  }, {
	    key: 'prepend',
	    value: function prepend(param) {
	
	      $('body').prepend(param);
	    }
	  }, {
	    key: 'requestAnimationFrame',
	    value: function requestAnimationFrame() {
	
	      var FPS = 1000 / 60;
	
	      window.requestAnimationFrame = window.requestAnimationFrame || // chromeや最新の
	      window.mozRequestAnimationFrame || // 古いfirefox用
	      window.webkitRequestAnimationFrame || // safari6以前、iOS6 safari用
	      function (callback) {
	        window.setTimeout(callback, FPS);
	      };
	
	      window.cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || function (timer) {
	        window.clearTimeout(timer);
	      };
	    }
	  }, {
	    key: 'expandjQuery',
	    value: function expandjQuery() {
	
	      jQuery.fn.extend({
	        w: 0,
	        h: 0,
	        adjust: function adjust() {
	          var w = $(this).innerWidth();
	          var h = $(this).innerHeight();
	          $(this).css({
	            'position': 'absolute',
	            'left': '50%',
	            'top': '50%',
	            'margin-left': '-' + w / 2 + 'px',
	            'margin-top': '-' + h / 2 + 'px'
	          });
	        },
	        adjustW: function adjustW() {
	          var w = $(this).innerWidth();
	          var h = $(this).innerHeight();
	          $(this).css({
	            'position': 'absolute',
	            'left': '50%',
	            'margin-left': '-' + w / 2 + 'px'
	          });
	        },
	        adjustH: function adjustH() {
	          var w = $(this).innerWidth();
	          var h = $(this).innerHeight();
	          $(this).css({
	            'position': 'absolute',
	            'top': '50%',
	            'margin-top': '-' + h / 2 + 'px'
	          });
	        }
	      });
	    }
	  }, {
	    key: 'checkCssBlend',
	    value: function checkCssBlend() {
	
	      if ('CSS' in window && 'supports' in window.CSS) {
	        if (!window.CSS.supports('mix-blend-mode', 'soft-light')) {
	          document.documentElement.classList.add('not-mix-blend-mode');
	        }
	      }
	
	      log(gb.in.u.isIE);
	
	      if (gb.in.u.isIE) {
	
	        document.documentElement.classList.add('not-mix-blend-mode');
	      };
	    }
	  }, {
	    key: 'notSaveImg',
	    value: function notSaveImg() {
	
	      // ------------------------------------------------------------
	      //
	      //  pc
	      //
	      // ------------------------------------------------------------
	
	      if (gb.in.u.isPC) {
	
	        $(function () {
	          $("img").on("contextmenu", function () {
	            return false;
	          });
	        });
	      }
	
	      // ------------------------------------------------------------
	      //
	      //  sp android
	      //
	      // ------------------------------------------------------------
	      var v = gb.in.u.isAndroidVersion();
	
	      if (v == undefined) return;
	      if (v < 5) {
	
	        var timer;
	        $("img").on("touchstart", function () {
	          timer = setTimeout(function () {
	            alert("画像は保存できません");
	          }, 500);
	          return false;
	        });
	        $("img").on("touchend", function () {
	          clearTimeout(timer);
	          return false;
	        });
	      }
	    }
	  }]);
	
	  return Func;
	}();
	
	exports.default = Func;

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); //--------------------------------------------------
	//
	//  ReadyMgr
	//
	//--------------------------------------------------
	
	var _ReadyPercent = __webpack_require__(7);
	
	var _ReadyPercent2 = _interopRequireDefault(_ReadyPercent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var ReadyMgr = function () {
	  function ReadyMgr() {
	    _classCallCheck(this, ReadyMgr);
	
	    this.completed = 0;
	    this.total = 0;
	    this.current = 0;
	
	    this.onCompletedFunc = function () {};
	
	    this.setEvents();
	  }
	
	  _createClass(ReadyMgr, [{
	    key: 'setup',
	    value: function setup() {
	
	      this.readyPercent = new _ReadyPercent2.default();
	    }
	  }, {
	    key: 'onComplete',
	    value: function onComplete() {
	
	      // update処理をやめる
	      gb.in.up.remove('readyPercent', this.readyPercent.update.bind(this));
	
	      // 準備完了後の処理
	      this.onCompletedFunc();
	    }
	  }, {
	    key: 'onReady',
	    value: function onReady() {
	
	      this.setup();
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	
	      $(document).on('ready', this.onReady.bind(this));
	    }
	  }]);
	
	  return ReadyMgr;
	}();
	
	exports.default = ReadyMgr;

/***/ },
/* 7 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//--------------------------------------------------
	//
	//  ReadyPercent
	//
	//--------------------------------------------------
	
	var ReadyPercent = function () {
	  function ReadyPercent() {
	    _classCallCheck(this, ReadyPercent);
	
	    this.$loading = $('#loading');
	    this.$bar = $('.loadingBar');
	    this.$percent = $('.loadingPercent');
	
	    this.isLock = false;
	    this.setTimeoutLock = false;
	
	    this.setEvents();
	  }
	
	  _createClass(ReadyPercent, [{
	    key: 'update',
	    value: function update() {
	
	      if (!gb.in.conf.webFontLoaded) return;
	
	      var target = gb.in.rm.completed / gb.in.rm.total * 100;
	
	      gb.in.rm.current += (target - gb.in.rm.current) * 0.1;
	      // this.$bar.css({ width: gb.in.rm.current + '%' }); //percent 伸ばす
	      this.$percent.text(Math.floor(gb.in.rm.current) + '%');
	
	      // 終了処理
	      if (gb.in.rm.current >= 100 && !this.isLock) {
	        this.isLock = true;
	        gb.in.rm.onComplete();
	      }
	
	      // current が 99.9 より大きければ 100 と見なして終了処理へ
	      if (gb.in.rm.current > 99.9) {
	        gb.in.rm.current = 100;
	      }
	
	      // ie11は,99になって、5秒経っても100でなければ、強制的に、表示
	      // その際、completeして無ければ背景は静止画に
	      // if (gb.in.u.isIE11) {
	
	      if (gb.in.rm.current > 99 && !this.setTimeoutLock) {
	        this.setTimeoutLock = true;
	
	        log('99!!!!');
	        // gb.in.rm.current = 99;
	
	        setTimeout(function () {
	
	          log('5!!!');
	
	          if (gb.in.rm.current !== 100) {
	
	            gb.in.rm.completed++;
	            $('.bgOverlayImg').addClass('isActive');
	
	            log('対応！！');
	          };
	        }, 5000);
	      };
	
	      // };
	    }
	  }, {
	    key: 'remove',
	    value: function remove() {
	      var _this = this;
	
	      TweenMax.to(this.$loading, 2.8, {
	        scale: 1.2,
	        opacity: 0,
	        ease: Power3.easeInOut,
	        onComplete: function onComplete() {
	          _this.$loading.remove();
	        }
	      });
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	
	      gb.in.up.add('readyPercent', this.update.bind(this));
	    }
	  }]);
	
	  return ReadyPercent;
	}();
	
	exports.default = ReadyPercent;

/***/ },
/* 8 */
/***/ function(module, exports) {

	/**
	 * fileOverview: 画面更新クラス
	 * Project:
	 * File: UpdateMgr
	 * Date:
	 * Author:
	 */
	
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var UpdateMgr = function () {
	  function UpdateMgr() {
	    _classCallCheck(this, UpdateMgr);
	
	    //更新回数
	    this.cnt = 0;
	
	    //毎フレーム実行させる関数を保持
	    this.updateList = [];
	
	    this.len = 0;
	    this.Timer = null;
	    this.isStop = false;
	  }
	
	  /**
	   *  実行したい関数を登録
	   *  func : 関数
	   */
	
	
	  _createClass(UpdateMgr, [{
	    key: 'add',
	    value: function add(name, func) {
	
	      var obj = { name: name, func: func };
	
	      this.updateList.push(obj);
	    }
	
	    /**
	     *  実行したい関数を削除
	     *  func : 関数
	     */
	
	  }, {
	    key: 'remove',
	    value: function remove(name) {
	
	      var target = { name: name, func: function func() {} };
	
	      UpdateMgr.arrRemove(this.updateList, target);
	    }
	
	    /**
	     *  更新(登録された関数の総数分実行する)
	     */
	
	  }, {
	    key: 'update',
	    value: function update() {
	
	      for (var i in this.updateList) {
	        this.updateList[i].func();
	      }
	    }
	
	    /**
	     *　更新の実行関数の内容
	     */
	
	  }, {
	    key: 'loop',
	    value: function loop() {
	
	      this.update();
	      this.cnt++;
	
	      this.Timer = requestAnimationFrame(this.loop.bind(this));
	      if (this.isStop) cancelAnimationFrame(this.Timer);
	    }
	
	    /**
	     *　更新停止
	     */
	
	  }, {
	    key: 'stop',
	    value: function stop() {
	
	      this.isStop = true;
	    }
	
	    /**
	     *　更新再開
	     */
	
	  }, {
	    key: 'resume',
	    value: function resume() {
	
	      this.isStop = false;
	      this.loop();
	    }
	
	    /**
	     *　静的メンバ関数
	     */
	
	  }], [{
	    key: 'arrRemove',
	    value: function arrRemove(arr, target) {
	
	      var len = arr.length;
	      var check;
	      for (var i = 0; i < len; i++) {
	        check = arr[i];
	
	        if (check.name == target.name) {
	          arr.splice(i, 1);
	          i--;
	          len--;
	        }
	      }
	
	      return arr;
	    }
	  }]);
	
	  return UpdateMgr;
	}();
	
	exports.default = UpdateMgr;

/***/ },
/* 9 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//--------------------------------------------------
	//
	//  ResizeMgr
	//
	//--------------------------------------------------
	
	var ResizeMgr = function () {
	  function ResizeMgr() {
	    _classCallCheck(this, ResizeMgr);
	
	    this.resizeList = [];
	    this.ws = { w: 0, h: 0, oldW: -1, oldH: -1 };
	
	    this.setup();
	  }
	
	  _createClass(ResizeMgr, [{
	    key: 'setup',
	    value: function setup() {
	
	      var self = this;
	
	      $(window).on('resize', function (e) {
	        self.onResize.call(self, e);
	      });
	      this.getWindowSize();
	    }
	  }, {
	    key: 'onResize',
	    value: function onResize(e) {
	
	      this.getWindowSize();
	
	      for (var i in this.resizeList) {
	        this.resizeList[i].func();
	      }
	    }
	  }, {
	    key: 'W',
	    value: function W() {
	
	      return this.ws.w;
	    }
	  }, {
	    key: 'H',
	    value: function H() {
	
	      return this.ws.h;
	    }
	  }, {
	    key: 'getWindowSize',
	    value: function getWindowSize() {
	
	      var w = window.innerWidth,
	          h = window.innerHeight;
	
	      this.ws.oldW = this.ws.w;
	      this.ws.oldH = this.ws.h;
	      this.ws.w = w;
	      this.ws.h = h;
	    }
	  }, {
	    key: 'add',
	    value: function add(name, func) {
	
	      var obj = { name: name, func: func };
	
	      this.resizeList.push(obj);
	    }
	  }, {
	    key: 'remove',
	    value: function remove(name) {
	
	      ResizeMgr.arrRemove(this.resizeList, name);
	    }
	
	    // ------------------------------------------------------------
	    //
	    //  静的メンバ
	    //
	    // ------------------------------------------------------------
	
	  }], [{
	    key: 'arrRemove',
	    value: function arrRemove(arr, name) {
	
	      var len = arr.length;
	      var check;
	      for (var i = 0; i < len; i++) {
	        check = arr[i];
	
	        if (check.name == name) {
	          arr.splice(i, 1);
	          i--;
	          len--;
	        }
	      }
	
	      return arr;
	    }
	  }]);
	
	  return ResizeMgr;
	}();
	
	exports.default = ResizeMgr;

/***/ },
/* 10 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//--------------------------------------------------
	//
	//  ScrollMgr
	//
	//--------------------------------------------------
	
	var ScrollMgr = function () {
	  function ScrollMgr() {
	    _classCallCheck(this, ScrollMgr);
	
	    this.scrollList = [];
	    this.scrollEndList = [];
	    this.w = 0;this.h = 0;
	    this.st = 0; // 現在のscroll top
	    this.sb = 0; // 現在のscroll bottom
	    this.sv = 0; // 現在のスクロール量
	
	    this.STAmount = 0;
	    this.offset = 0;
	
	    this.isStart = true;
	
	    this.setEvents();
	  }
	
	  _createClass(ScrollMgr, [{
	    key: 'setup',
	    value: function setup() {
	
	      var self = this;
	
	      this.getWindowSize();
	      this.add('end', this.end.bind(this));
	    }
	  }, {
	    key: 'add',
	    value: function add(name, func) {
	
	      var obj = { name: name, func: func };
	
	      this.scrollList.push(obj);
	    }
	  }, {
	    key: 'remove',
	    value: function remove(name) {
	
	      ScrollMgr.arrRemove(this.scrollList, name);
	    }
	  }, {
	    key: 'remove',
	    value: function remove(target) {
	
	      ScrollMgr.arrRemove(this.scrollList, target);
	    }
	  }, {
	    key: 'onResize',
	    value: function onResize(e) {
	
	      this.getWindowSize();
	    }
	  }, {
	    key: 'onScroll',
	    value: function onScroll(e) {
	
	      if (this.isStart) {
	        this.isStart = false;
	        // log('resizeStart');
	        // 最初だけの処理
	      };
	
	      this.st = $(window).scrollTop();
	      this.sb = this.st + this.h;
	
	      for (var i in this.scrollList) {
	        this.scrollList[i].func();
	      }
	    }
	  }, {
	    key: 'onMouseWheel',
	    value: function onMouseWheel(e, delta, deltaX, deltaY) {
	
	      this.STAmount = deltaY;
	      if (gb.in.u.isWin()) this.STAmount *= 60;
	      if (gb.in.u.isFF() && !gb.in.u.isWin()) this.STAmount *= 60;
	      // if (Math.abs(this.STAmount) > 10) this.STAmount *= 0.4;
	      this.offset += this.STAmount;
	
	      for (var i in this.scrollList) {
	        this.scrollList[i].func();
	      }
	    }
	  }, {
	    key: 'getWindowSize',
	    value: function getWindowSize() {
	
	      this.w = window.innerWidth;
	      this.h = window.innerHeight;
	    }
	  }, {
	    key: 'end',
	    value: function end(e) {
	
	      var self = this;
	
	      if (this.Timer) clearTimeout(this.Timer);
	      this.Timer = setTimeout(function () {
	        self.isStart = true;
	        // log('resizeEnd');
	
	        for (var i in self.scrollEndList) {
	          self.scrollEndList[i]();
	        }
	      }, 200);
	    }
	  }, {
	    key: 'addFixedObjectScroll',
	    value: function addFixedObjectScroll($target) {
	
	      this.scrollList.push(function () {
	
	        $target.css("left", -$(window).scrollLeft());
	      });
	    }
	  }, {
	    key: 'onReady',
	    value: function onReady() {
	      var _this = this;
	
	      this.setup();
	
	      $(window).on('resize', function (e) {
	        _this.onResize(e);
	      });
	      $(window).on('scroll', function (e) {
	        _this.onScroll(e);
	      });
	      $(document).on('mousewheel', function (e, delta, deltaX, deltaY) {
	        _this.onMouseWheel(e, delta, deltaX, deltaY);
	      });
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	
	      $(document).on('ready', this.onReady.bind(this));
	    }
	
	    // ------------------------------------------------------------
	    //
	    //  静的メンバ
	    //
	    // ------------------------------------------------------------
	
	  }], [{
	    key: 'arrRemove',
	    value: function arrRemove(arr, name) {
	
	      var len = arr.length;
	      var check;
	      for (var i = 0; i < len; i++) {
	        check = arr[i];
	
	        if (check.name == name) {
	          arr.splice(i, 1);
	          i--;
	          len--;
	        }
	      }
	
	      return arr;
	    }
	  }]);
	
	  return ScrollMgr;
	}();
	
	exports.default = ScrollMgr;

/***/ },
/* 11 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//--------------------------------------------------
	//
	//  MouseMgr
	//
	//--------------------------------------------------
	
	var MouseMgr = function () {
	  function MouseMgr() {
	    var $target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : $(document);
	
	    _classCallCheck(this, MouseMgr);
	
	    this.$target = $target;
	
	    this.x = 0;
	    this.y = 0;
	
	    this.cx = 0;
	    this.cy = 0;
	
	    this.mouseMoveList = [{ name: 'def', func: function func() {} }];
	    this.mouseMoveStartList = [{ name: 'def', func: function func() {} }];
	    this.mouseMoveEndList = [{ name: 'def', func: function func() {} }];
	
	    this.isStart = true;
	    this.Timer = null;
	    this.endTime = 10;
	
	    this.setup();
	    this.setEvents();
	  }
	
	  _createClass(MouseMgr, [{
	    key: 'setup',
	    value: function setup() {
	
	      this.add('onEnd', this.onEnd.bind(this));
	    }
	  }, {
	    key: 'onTouchmove',
	    value: function onTouchmove(e) {
	
	      // e.preventDefault();
	
	      this.x = e.originalEvent.changedTouches[0].pageX;
	      this.y = e.originalEvent.changedTouches[0].pageY;
	    }
	  }, {
	    key: 'onMousemove',
	    value: function onMousemove(e) {
	
	      // log(this.mouseMoveList);
	
	      if (this.isStart) {
	        this.isStart = false;
	
	        // 最初だけの処理
	        // log('moveStart');
	
	        for (var i in this.mouseMoveStartList) {
	          this.mouseMoveStartList[i].func();
	        }
	      };
	
	      if (e.offsetX == undefined) {
	        // this works for Firefox
	        this.x = e.pageX - this.$target.offset().left;
	        this.y = e.pageY - this.$target.offset().top;
	      } else {
	        // works in Google Chrome
	        this.x = e.pageX - $(window).scrollLeft();
	        this.y = e.pageY - $(window).scrollTop();
	      }
	
	      this.cx = e.clientX - gb.in.r.W() / 2;
	      this.cy = e.clientY - gb.in.r.H() / 2;
	
	      for (var i in this.mouseMoveList) {
	        this.mouseMoveList[i].func();
	      }
	    }
	  }, {
	    key: 'onEnd',
	    value: function onEnd(e) {
	      var _this = this;
	
	      if (this.Timer) clearTimeout(this.Timer);
	      this.Timer = setTimeout(function () {
	        _this.isStart = true;
	
	        // log('moveEnd');
	
	        for (var i in _this.mouseMoveEndList) {
	          _this.mouseMoveEndList[i].func();
	        }
	      }, this.endTime);
	    }
	  }, {
	    key: 'add',
	    value: function add(name, func) {
	
	      var obj = { name: name, func: func };
	
	      this.mouseMoveList.push(obj);
	    }
	  }, {
	    key: 'addStart',
	    value: function addStart(name, func) {
	
	      var obj = { name: name, func: func };
	
	      this.mouseMoveStartList.push(obj);
	    }
	  }, {
	    key: 'addEnd',
	    value: function addEnd(name, func) {
	
	      var obj = { name: name, func: func };
	
	      this.mouseMoveEndList.push(obj);
	    }
	  }, {
	    key: 'remove',
	    value: function remove(name) {
	
	      MouseMgr.arrRemove(this.mouseMoveList, name);
	    }
	
	    // ------------------------------------------------------------
	    //
	    //  静的メンバ
	    //
	    // ------------------------------------------------------------
	
	  }, {
	    key: 'removeEvents',
	    value: function removeEvents() {
	
	      this.$target.off("touchmove.MouseMgr");
	      this.$target.off("mousemove.MouseMgr");
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	      var _this2 = this;
	
	      this.$target.on("touchmove.MouseMgr", function (e) {
	        _this2.onTouchmove(e);
	      });
	      this.$target.on("mousemove.MouseMgr", function (e) {
	        _this2.onMousemove(e);
	      });
	    }
	  }], [{
	    key: 'arrRemove',
	    value: function arrRemove(arr, name) {
	
	      var len = arr.length;
	      var check;
	      for (var i = 0; i < len; i++) {
	        check = arr[i];
	
	        if (check.name == name) {
	          arr.splice(i, 1);
	          i--;
	          len--;
	        }
	      }
	
	      return arr;
	    }
	  }]);
	
	  return MouseMgr;
	}();
	
	exports.default = MouseMgr;

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
	fileOverview:
	roject:
	ile: LoadMgr
	ate:
	uthor:
	
	
	var _Loader = __webpack_require__(13);
	
	var _Loader2 = _interopRequireDefault(_Loader);
	
	var _Sec01Video = __webpack_require__(14);
	
	var _Sec01Video2 = _interopRequireDefault(_Sec01Video);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var LoadMgr = function () {
	  function LoadMgr() {
	    _classCallCheck(this, LoadMgr);
	  }
	
	  _createClass(LoadMgr, [{
	    key: 'start',
	    value: function start() {
	
	      // その他
	      // ソーシャルスクリプトなど
	      // this.snsScript();
	
	      // this.loadYoutubeScript();
	
	      // section02で使う大量の画像をロード // web workerなども使って
	      // this.sec02Img();
	
	      // this.webFont();
	
	    }
	  }, {
	    key: 'loadYoutubeScript',
	    value: function loadYoutubeScript() {
	
	      var loader = new _Loader2.default();
	
	      var len = 1;
	      gb.in.rm.total += len; // load数のtotalを計算
	      if (gb.in.u.isSP) gb.in.rm.completed++;
	
	      var cb = function cb() {
	
	        gb.in.rm.completed++;
	      };
	
	      loader.youtubeIframeScript(cb);
	    }
	  }, {
	    key: 'sec02Img',
	    value: function sec02Img() {
	
	      // bgVideoTile用の連番画像の読み込み
	      gb.in.loadSec02Img = this.loader = new _Loader2.default();
	
	      if (gb.in.u.isPC) {
	        var len = gb.in.conf.sec02ImgNum;
	        gb.in.rm.total += len; // load数のtotalを計算
	        var path = '/project-name/assets/resource/img/movie/bgImg/';
	      } else {
	        var len = 19;
	        gb.in.rm.total += len; // load数のtotalを計算
	        var path = '/project-name/assets/resource/img/movie/bgImgSP/';
	      }
	
	      var cb = function cb() {
	        // gb.in.Sec02Bg.create();
	      };
	      var cb02 = function cb02() {
	        gb.in.rm.completed++;
	      };
	
	      // this.loader.imgSerialLoad(len,path,'tfny_',cb,cb02);
	      this.loader.img(len + 1, path, 'tfny_', cb, cb02);
	    }
	  }, {
	    key: 'section04ProductShader',
	    value: function section04ProductShader() {
	      var _this = this;
	
	      var shaders = [];
	      var shaderLoadList = [
	      // gb.Clock,
	      // gb.Color,
	      // gb.Plasma,
	      // gb.Sepia,
	      // gb.Mosaic,
	      gb.ZoomBlur, gb.ZoomBlur, gb.Transition02];
	
	      var len = shaderLoadList.length;
	      gb.in.rm.total += len; // load数のtotalを計算
	
	      var shaderSerialLoad = function shaderSerialLoad(len, cb) {
	
	        var shader,
	            cnt = 0;
	
	        var load = function load(i) {
	          shader = new shaderLoadList[i](comp);
	          shaders.push(shader);
	        };
	
	        var comp = function comp() {
	          cnt++;
	          gb.in.rm.completed++;
	          if (cnt == len) cb(shaders);else load(cnt);
	        };
	
	        load(cnt);
	      };
	
	      shaderSerialLoad(shaderLoadList.length, function (shaders) {
	
	        _this.shaders = shaders;
	        _this.section04ProductImg();
	      });
	    }
	  }, {
	    key: 'section04ProductImg',
	    value: function section04ProductImg() {
	      var _this2 = this;
	
	      var textureList = ['/project-name/assets/resource/img/product/tiffany_hand1.jpg', '/project-name/assets/resource/img/product/brown.png', '/project-name/assets/resource/img/product/blue.png', '/project-name/assets/resource/img/product/white.png', '/project-name/assets/resource/img/product/tiffanyblue.png', '/project-name/assets/resource/img/product/pink.png'];
	      this.textures = [];
	
	      var len = textureList.length;
	      gb.in.rm.total += len; // load数のtotalを計算
	
	      var textureSerialLoad = function textureSerialLoad(len, cb) {
	
	        var texture,
	            cnt = 0;
	
	        var load = function load(i) {
	          texture = THREE.ImageUtils.loadTexture(textureList[i], null, comp);
	          _this2.textures.push(texture);
	        };
	
	        var comp = function comp() {
	          cnt++;
	          gb.in.rm.completed++;
	          if (cnt == len) cb();else load(cnt);
	        };
	
	        load(cnt);
	      };
	
	      textureSerialLoad(textureList.length, function () {
	        $(window).trigger('onSection04ProductImg');
	      });
	    }
	  }, {
	    key: 'webFont',
	    value: function webFont() {
	
	      // web font loader用param
	      var config = {
	        custom: {
	          families: ['Cormorant', 'Roboto Condensed'
	          // 'Noto Sans Japanese',
	          // 'Roboto',
	          // 'Alegreya Sans',
	          // 'Alegreya Sans SC'
	          ],
	          urls: ['https://fonts.googleapis.com/css?family=Cormorant:500,500i|Roboto+Condensed'
	          // '/project-name/assets/css/font.css',
	          // 'https://fonts.googleapis.com/css?family=Roboto:400,500,300',
	          // 'https://fonts.googleapis.com/css?family=Alegreya+Sans:400,100',
	          // 'https://fonts.googleapis.com/css?family=Alegreya+Sans+SC:400,300,100'
	          ]
	        },
	        active: function active() {
	
	          log('webFont!!!!');
	          gb.in.conf.webFontLoaded = true;
	        }
	      };
	
	      var loader = new _Loader2.default();
	      loader.webFont(config);
	    }
	  }, {
	    key: 'onEnd',
	    value: function onEnd() {}
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {}
	  }]);
	
	  return LoadMgr;
	}();
	
	exports.default = LoadMgr;

/***/ },
/* 13 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * fileOverview:
	 * Project:
	 * File: Loader
	 * Date:
	 * Author:
	 */
	
	var Loader = function () {
	  function Loader() {
	    _classCallCheck(this, Loader);
	
	    this.list = [];
	    this.cnt = 0;
	  }
	
	  _createClass(Loader, [{
	    key: "json",
	    value: function json(src, cb) {
	
	      $.getJSON(src, function (data) {
	
	        cb(data);
	      });
	    }
	  }, {
	    key: "img",
	    value: function img(len, path, name) {
	      var cb = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {};
	      var cb02 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : function () {};
	
	
	      var i,
	          img,
	          nth,
	          cnt = 1,
	          list = [];
	
	      for (i = 1; i < len; i++) {
	        img = new Image();
	        nth = gb.in.u.add0(i, -5);
	        this.list.push(img);
	        img.onload = function () {
	          cb02();
	          cnt++;
	          if (cnt == len) cb();
	        };
	        img.src = path + name + nth + ".jpg";
	      }
	    }
	
	    // cb02 load完了時 都度都度用コールバック関数
	
	  }, {
	    key: "imgSerialLoad",
	    value: function imgSerialLoad(len, path, name) {
	      var _this = this;
	
	      var cb = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {};
	      var cb02 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : function () {};
	
	
	      var i,
	          img,
	          nth,
	          cnt = 0,
	          list = [];
	
	      var load = function load(i) {
	        img = new Image();
	        nth = gb.in.u.add0(i, -5);
	        _this.list.push(img);
	        img.onload = function () {
	          cb02();
	          comp();
	        };
	        img.src = path + name + nth + ".jpg";
	      };
	
	      var comp = function comp() {
	        cnt++;
	        if (cnt == len) {
	          cb();
	        } else {
	          load(cnt);
	        }
	      };
	
	      load(cnt);
	    }
	  }, {
	    key: "ajaxImgLoad",
	    value: function ajaxImgLoad(cb) {
	
	      var imgNum = $('img').length;
	      var cnt = 0;
	
	      $('img').each(function (i, elm) {
	
	        var img = new Image();
	        img.onload = function () {
	          cnt++;
	          if (cnt == imgNum - 1) {
	            cb();
	          };
	        };
	        img.src = elm.src;
	      });
	    }
	  }, {
	    key: "video",
	    value: function video(src) {
	      var _this2 = this;
	
	      var cb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};
	
	
	      var isLoad = false;
	      this.video = document.createElement('video');
	
	      var type = this.supportVideoExt(this.video);
	      if (type == "") {
	        return;
	      }
	
	      this.video.addEventListener("canplay", function () {
	
	        if (!_this2.isLoad) {
	          _this2.isLoad = true;
	          _this2.video.loop = true;
	          _this2.video.play();
	          cb();
	        }
	      }, false);
	
	      // ロード
	      this.video.src = src;
	    }
	  }, {
	    key: "youtubeIframeScript",
	    value: function youtubeIframeScript(cb) {
	
	      // IFrame Player API の読み込み
	      var tag = document.createElement('script');
	      tag.onload = function () {
	
	        cb();
	      };
	
	      // tag.src = "https://www.youtube.com/iframe_api";
	      tag.src = "http://www.youtube.com/iframe_api";
	      var firstScriptTag = document.getElementsByTagName('script')[0];
	      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
	
	      // YouTube動画
	      window.onYouTubeIframeReady = function () {
	
	        window.console.log('youtubeready');
	      };
	    }
	  }, {
	    key: "supportVideoExt",
	    value: function supportVideoExt() {
	
	      var ext = "";
	      if (this.video.canPlayType("video/webm") == "probably" || this.video.canPlayType("video/webm") == "maybe") {
	        ext = "webm";
	      } else if (this.video.canPlayType("video/mp4") == "probably" || this.video.canPlayType("video/mp4") == "maybe") {
	        ext = "mp4";
	      } else if (this.video.canPlayType("video/ogg") == "probably" || this.video.canPlayType("video/ogg") == "maybe") {
	        ext = "ogg";
	      }
	
	      return ext;
	    }
	
	    //WebFontのローダー管理
	
	  }, {
	    key: "webFont",
	    value: function webFont(config) {
	
	      // web font loader用jsのappend
	      var wf = document.createElement('script');
	      wf.src = ('https:' == document.location.protocol ? 'https' : 'http') + '://ajax.googleapis.com/ajax/libs/webfont/1/webfont.js';
	      wf.type = 'text/javascript';
	      wf.async = 'true';
	      var s = document.getElementsByTagName('script')[0];
	      s.parentNode.insertBefore(wf, s);
	
	      var again = function again() {
	
	        // yt.playerがloadされていない場合を考慮して
	        if (typeof WebFont !== "undefined" && WebFont) {
	
	          WebFont.load(config);
	        } else {
	
	          setTimeout(again, 100);
	        }
	      };
	
	      again();
	    }
	  }, {
	    key: "onLoaded",
	    value: function onLoaded() {
	
	      $('html').css('opacity', '1');
	    }
	  }, {
	    key: "setEvents",
	    value: function setEvents(len) {
	
	      var self = this;
	
	      $(window).on('loaded', function (event) {
	
	        self.cnt++;
	        if (self.cnt == len) onLoaded();
	      });
	    }
	  }]);
	
	  return Loader;
	}();
	
	exports.default = Loader;

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); //--------------------------------------------------
	//
	//  Sec01Video
	//
	//--------------------------------------------------
	
	
	var _YoutubeForSec = __webpack_require__(15);
	
	var _YoutubeForSec2 = _interopRequireDefault(_YoutubeForSec);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Sec01Video = function () {
	  function Sec01Video(param) {
	    _classCallCheck(this, Sec01Video);
	
	    // sec01video用
	    gb.in.rm.total++;
	    if (gb.in.u.isSP) gb.in.rm.completed++;
	
	    if (gb.in.u.isPC) this.setup();
	    this.setEvents();
	  }
	
	  _createClass(Sec01Video, [{
	    key: 'setup',
	    value: function setup() {
	
	      // create
	      this.video = new _YoutubeForSec2.default('sec01Video', gb.in.conf.youtubeID01, null);
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {}
	  }]);
	
	  return Sec01Video;
	}();
	
	exports.default = Sec01Video;

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); //--------------------------------------------------
	//
	//  YoutubeForSec01
	//
	//--------------------------------------------------
	
	var _FullSize = __webpack_require__(16);
	
	var _FullSize2 = _interopRequireDefault(_FullSize);
	
	var _TopTime = __webpack_require__(17);
	
	var _TopTime2 = _interopRequireDefault(_TopTime);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var YoutubeForSec01 = function () {
	  function YoutubeForSec01(id, videoID, videoList) {
	    _classCallCheck(this, YoutubeForSec01);
	
	    this.player = null;
	
	    this.isFirst = true;
	    this.isSeekLock = false;
	    this.isSeekLock02 = false;
	
	    this.setup(id, videoID, videoList);
	  }
	
	  _createClass(YoutubeForSec01, [{
	    key: 'setup',
	    value: function setup(id, videoID, videoList) {
	
	      // yt.player��load����Ƥ��ʤ����Ϥ򿼑]����
	      if (typeof YT !== "undefined" && YT && YT.Player) {
	
	        // create
	        this.player = new YT.Player(id, {
	          width: '100%', // �ץ�`��`�η�
	          height: '100%', // �ץ�`��`�θߤ�
	          videoId: videoID, // YouTube��ID
	          events: {
	            'onReady': this.onReady.bind(this), // �ץ�`��`�Μʂ䤬�Ǥ����Ȥ��ˌg��
	            'onStateChange': this.onPlayerStateChange.bind(this)
	          },
	          playerVars: {
	            autoplay: 1,
	            controls: 0,
	            showinfo: 0,
	            autohide: 1,
	            rel: 0,
	            enablejsapi: 1,
	            iv_load_policy: 3,
	            disablekb: 1,
	            modestbranding: 1,
	            start: 2,
	            loop: 1
	          }
	        });
	
	        // layout
	        var l = new _FullSize2.default($('#bgWrap'), $('#sec01Video'), 0, 'FullSizeSec01Video');
	        l.targetDefW = 1920;
	        l.targetDefH = 1080;
	        l.run();
	      } else {
	
	        setTimeout(this.setup.bind(this, id, videoID, videoList), 100);
	      }
	    }
	  }, {
	    key: 'onReady',
	    value: function onReady(e) {
	
	      // �߽���Ȥ�
	      e.target.setPlaybackQuality('highres');
	
	      // this.player.playVideo();
	      this.setEvents();
	
	      // play
	      gb.in.time = new _TopTime2.default();
	      gb.in.sec01Video.video.playByNYTime();
	    }
	  }, {
	    key: 'onPlayerStateChange',
	    value: function onPlayerStateChange(e) {
	
	      var status = e.data;
	
	      // �����K�ˤ����Ȥ� 0
	      if (status == window.YT.PlayerState.ENDED) {
	
	        // �ӻ�����
	        this.player.playVideo();
	      }
	
	      // // �����ФΤȤ� 1
	      if (status == window.YT.PlayerState.PLAYING) {
	
	        if (this.isFirst) {
	          this.isFirst = false;
	          gb.in.rm.completed++;
	        }
	
	        // e.target.pauseVideo();
	      }
	
	      // // ֹͣ�ФΤȤ� 2
	      // if (status == window.YT.PlayerState.PAUSED) {
	      //     console.log('ֹͣ��');
	      // }
	
	      // // �Хåե�����ФΤȤ� 3
	      // if (status == window.YT.PlayerState.BUFFERING) {
	      //     console.log('�Хåե������');
	      // }
	
	      // // �^�����g�ߤΤȤ� 5 5��ֹ�ޤ�Ȥ����뤫�顢�����Ǥ�play
	      if (status == window.YT.PlayerState.CUED) {
	
	        this.playByNYTime();
	      }
	
	      // for safari �ե����륵�����ؤ���
	      if (gb.in.u.isSafari() && status == window.YT.PlayerState.BUFFERING) this.player.seekTo(this.player.getCurrentTime() + 0.1);
	    }
	  }, {
	    key: 'playByNYTime',
	    value: function playByNYTime() {
	
	      var h = gb.in.time.nyH;
	
	      if (h >= 5 && h < 13) {
	
	        this.player.seekTo(0);
	      } else if (h >= 13 && h < 18) {
	
	        this.player.seekTo(36);
	      } else {
	
	        this.player.seekTo(66);
	      }
	
	      this.player.playVideo();
	    }
	  }, {
	    key: 'onSeek',
	    value: function onSeek() {
	
	      var now = this.player.getCurrentTime();
	
	      if (now < 1.0) {
	        this.isSeekLock = false;
	        this.isSeekLock02 = false;
	      };
	
	      if (now > 90 && !this.isSeekLock) {
	        this.isSeekLock = true;
	
	        TweenMax.to($('.bgOverlayImg'), 3.0, {
	          opacity: 1,
	          ease: Power3.easeInOut
	        });
	      }
	
	      if (now > 1.0 && !this.isSeekLock02) {
	        this.isSeekLock02 = true;
	
	        TweenMax.to($('.bgOverlayImg'), 3.0, {
	          opacity: 0,
	          ease: Power3.easeInOut
	        });
	      }
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	
	      gb.in.up.add('YoutubeForSec01', this.onSeek.bind(this));
	    }
	  }, {
	    key: 'removeEvents',
	    value: function removeEvents() {
	
	      gb.in.up.remove('YoutubeForSec01');
	    }
	  }]);
	
	  return YoutubeForSec01;
	}();
	
	exports.default = YoutubeForSec01;

/***/ },
/* 16 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//--------------------------------------------------
	//
	//  FullSize
	//
	//--------------------------------------------------
	
	var FullSize = function () {
	  function FullSize($Wrap, $Target, mode, name) {
	    _classCallCheck(this, FullSize);
	
	    this.$wrap = $Wrap;
	    this.$target = $Target;
	
	    this.W = this.$wrap.width();
	    this.H = this.$wrap.height();
	    this.targetW;
	    this.targetH;
	    this.targetDefW;
	    this.targetDefH;
	    this.ratioW;
	    this.ratio;
	    this.ml;
	    this.mt;
	
	    this.mode = mode || 0;
	    this.name = name || 'fullsize';
	
	    // this.init();
	    // this.run();
	    this.setEvents();
	  }
	
	  _createClass(FullSize, [{
	    key: 'setStyle',
	    value: function setStyle() {
	
	      this.$wrap.css({
	        'overflow': 'hidden'
	      });
	      this.$target.css('position', 'absolute');
	    }
	  }, {
	    key: 'getDef',
	    value: function getDef() {
	
	      this.targetDefW = this.$target.get(0).clientWidth || this.$target.get(0).width || this.$target.width(), this.targetDefH = this.$target.get(0).clientHeight || this.$target.get(0).height || this.$target.height();
	    }
	  }, {
	    key: 'getSize',
	    value: function getSize() {
	
	      this.W = this.$wrap.width();
	      this.H = this.$wrap.height();
	
	      this.ratioW = this.H / this.W;
	      this.ratio = this.targetDefH / this.targetDefW, this.ml = -(this.targetDefW * (this.H / this.targetDefH)) / 2;
	      this.mt = -(this.targetDefH * (this.W / this.targetDefW)) / 2;
	    }
	  }, {
	    key: 'setPos',
	    value: function setPos() {
	
	      if (this.mode == 'cover' || this.mode == 0) {
	
	        //--------------------------------------------------
	        //  枠にピッタリになるように background-size cover
	        //--------------------------------------------------
	
	        if (this.ratioW > this.ratio) {
	
	          var w = this.H / this.targetDefH * this.targetDefW;
	
	          this.$target.css({ 'height': this.H }).css({ 'margin-top': 0, 'margin-left': this.ml, 'top': 0, 'left': '50%', 'width': w });
	        } else if (this.ratioW <= this.ratio) {
	
	          var h = this.W / this.targetDefW * this.targetDefH;
	
	          this.$target.css({ 'width': this.W }).css({ 'margin-top': this.mt, 'margin-left': 0, 'top': '50%', 'left': 0, 'height': h });
	        }
	      } else if (this.mode == 'contain' || this.mode == 1) {
	
	        //--------------------------------------------------
	        //  枠内にピッタリ収まるように background-size contain
	        //--------------------------------------------------
	
	        if (this.ratioW < this.ratio) {
	
	          this.$target.css({ 'height': this.H }).css({ 'margin-top': 0, 'margin-left': this.ml, 'top': 0, 'left': '50%', 'width': 'auto' });
	        } else if (this.ratioW >= this.ratio) {
	
	          this.$target.css({ 'width': this.W }).css({ 'margin-top': this.mt, 'margin-left': 0, 'top': '50%', 'left': 0, 'height': 'auto' });
	        }
	      }
	    }
	  }, {
	    key: 'init',
	    value: function init() {
	
	      this.getDef();
	    }
	  }, {
	    key: 'run',
	    value: function run() {
	
	      this.setStyle();
	      this.getSize();
	      this.setPos();
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	
	      gb.in.r.add(this.name, this.run.bind(this));
	    }
	  }]);
	
	  return FullSize;
	}();
	
	exports.default = FullSize;

/***/ },
/* 17 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//--------------------------------------------------
	//
	//  TopTime
	//
	//--------------------------------------------------
	
	// 500px以下になったら表示
	//   時計count
	//   canvas表示
	
	var TopTime = function () {
	  function TopTime() {
	    _classCallCheck(this, TopTime);
	
	    this.$target = $('.timeWrap');
	    this.$h01 = this.$target.find('.h01');
	    this.$h02 = this.$target.find('.h02');
	    this.$m01 = this.$target.find('.m01');
	    this.$m02 = this.$target.find('.m02');
	
	    this.nyH = 0;
	
	    this.isAlert = gb.in.r.ws.h < 500 ? true : false;
	
	    this.dis = 14; //時差
	
	    this.setup();
	    this.run();
	    this.setEvents();
	  }
	
	  _createClass(TopTime, [{
	    key: 'setup',
	    value: function setup() {
	
	      gb.in.u.time();
	      var h = gb.in.u.hour - this.dis;
	      if (h < 0) h = 24 + h;
	      this.nyH = h;
	    }
	  }, {
	    key: 'update',
	    value: function update() {
	
	      // 間引き
	      if (gb.in.up.cnt % 60 !== 0) return;
	
	      gb.in.u.time();
	
	      var h = gb.in.u.hour - this.dis;
	      if (h < 0) h = 24 + h;
	
	      this.nyH = h;
	
	      h = gb.in.u.add0(h).split('');
	      var m = gb.in.u.add0(gb.in.u.minute).split('');
	      var s = gb.in.u.add0(gb.in.u.second).split('');
	
	      this.$h01.text(h[0]);
	      this.$h02.text(h[1]);
	      this.$m01.text(m[0]);
	      this.$m02.text(m[1]);
	
	      // this.$h01.text(s[0])
	      // this.$h02.text(s[1])
	      // this.$m01.text(s[0]);
	      // this.$m02.text(s[1]);
	    }
	  }, {
	    key: 'run',
	    value: function run() {
	
	      gb.in.up.add('TopTime', this.update.bind(this));
	
	      // コンマの表示非表示
	      var tl = new TimelineMax({ repeat: -1 });
	
	      tl.set(this.$target.find('.colon'), { opacity: 0 }).to(this.$target.find('.colon'), 0.5, { opacity: 1, ease: Power2.easeInOut }).to(this.$target.find('.colon'), 0.5, { opacity: 0, ease: Power2.easeInOut });
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {}
	  }, {
	    key: 'removeEvents',
	    value: function removeEvents() {
	
	      gb.in.up.remove('TopTime');
	    }
	  }]);
	
	  return TopTime;
	}();
	
	exports.default = TopTime;

/***/ },
/* 18 */
/***/ function(module, exports) {

	/**
	 * fileOverview: 環境判定クラス(デバイス、ブラウザ)、各判定メソッド詳細はDevice.jsを参照
	 * Project:
	 * File: JudgeEnvironment
	 * Date:
	 * Author:
	 */
	
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var JudgeEnvironment = function () {
	  function JudgeEnvironment() {
	    _classCallCheck(this, JudgeEnvironment);
	
	    this.setup();
	    this.setEvents();
	  }
	
	  _createClass(JudgeEnvironment, [{
	    key: 'setup',
	    value: function setup() {
	
	      // デバイス判定
	      gb.in.u.isDeviceSP();
	      gb.in.u.isDeviceTAB();
	      gb.in.u.isDeviceMB();
	      gb.in.u.isDevicePC();
	
	      // ブラウザバージョン判定
	      gb.in.u.isIEVersion();
	
	      // responsive / portrait / landscape
	      gb.in.u.isDirection();
	      gb.in.u.isResponsive(gb.in.conf.bp);
	      gb.in.r.add('isDirection', gb.in.u.isDirection.bind(gb.in.u));
	      gb.in.r.add('isResponsive', gb.in.u.isResponsive.bind(gb.in.u, gb.in.conf.bp));
	    }
	  }, {
	    key: 'onReady',
	    value: function onReady() {
	
	      this.setup();
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {}
	  }]);
	
	  return JudgeEnvironment;
	}();
	
	exports.default = JudgeEnvironment;

/***/ },
/* 19 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//--------------------------------------------------
	//
	//  ResponsiveSwitchImg
	//
	//--------------------------------------------------
	
	var ResponsiveSwitchImg = function () {
	  function ResponsiveSwitchImg() {
	    _classCallCheck(this, ResponsiveSwitchImg);
	
	    this.setup();
	    this.run();
	    this.setEvents();
	  }
	
	  _createClass(ResponsiveSwitchImg, [{
	    key: 'setup',
	    value: function setup() {
	
	      this.isPCLock = gb.in.u.isResPC ? false : true;
	      this.isSPLock = gb.in.u.isResSP ? false : true;
	
	      this.$target = $('.responsiveImg');
	    }
	  }, {
	    key: 'run',
	    value: function run() {
	
	      // ------------------------------------------------------------
	      //  ブレイクポイントよりもsp側
	      // ------------------------------------------------------------
	      if (gb.in.u.isResSP && !this.isSPLock) {
	        this.isPCLock = false;
	        this.isSPLock = true;
	
	        log(11);
	
	        this.$target.each(function (index, el) {
	          var _this = this;
	
	          var src = $(this).attr('src');
	          src = gb.in.u.strReplace(src, '_pc', '_sp');
	          $(this).off('load');
	          $(this).on('load', function (event) {
	
	            if ($(_this).hasClass('spSize')) gb.in.u.setImgSPSize($(_this));
	          });
	          $(this).attr('src', src);
	
	          // $(this).attr('src',src);
	          // if ($(this).hasClass('spSize')) gb.in.u.setImgSPSize($(this));
	        });
	
	        // responsiveimgがついてないもので、spSizeがついてるものは1/2
	        gb.in.u.setImgSPSize($('.spSize').not('.responsiveImg'));
	      }
	
	      // ------------------------------------------------------------
	      //  ブレイクポイントよりもpc側
	      // ------------------------------------------------------------
	      if (gb.in.u.isResPC && !this.isPCLock) {
	        this.isPCLock = true;
	        this.isSPLock = false;
	
	        log(22);
	
	        this.$target.each(function (index, el) {
	
	          var src = $(this).attr('src');
	          src = gb.in.u.strReplace(src, '_sp', '_pc');
	
	          $(this).attr({ width: 'auto', height: 'auto' });
	          $(this).attr('src', src);
	        });
	
	        // responsiveimgがついてないもので、spSizeがついてるものはautoに
	        $('.spSize').not('.responsiveImg').attr({ width: 'auto', height: 'auto' });
	
	        // spはなぜかloadイベントが呼ばれないので、こっちで処理
	        // if (gb.in.u.isSP) $('.responsiveImg').attr({width: 'auto',height: 'auto'});
	      }
	    }
	  }, {
	    key: 'resume',
	    value: function resume() {
	
	      // log('resume');
	
	      this.setup();
	      this.run();
	
	      gb.in.r.remove('responsiveSwitchImg');
	      gb.in.r.add('responsiveSwitchImg', this.run.bind(this));
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	
	      gb.in.r.add('responsiveSwitchImg', this.run.bind(this));
	    }
	  }]);
	
	  return ResponsiveSwitchImg;
	}();
	
	exports.default = ResponsiveSwitchImg;

/***/ },
/* 20 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	// ------------------------------------------------------------
	//
	//  SwipeTransition sss
	//
	// ------------------------------------------------------------
	
	var SwipeTransition = function () {
	  function SwipeTransition() {
	    _classCallCheck(this, SwipeTransition);
	
	    // ---------------
	    //  dom
	    // ---------------
	    // this.$startWrap = $('.section01, .section02 .next, .section03 .box05');
	    // this.$startWrap = $('.section02');
	    this.$startWrap = $(window);
	    this.$endWrap = $(window);
	
	    this.pageList = {
	      'top': 0,
	      'movie': 1,
	      'interview': 2,
	      'history': 3
	    };
	
	    // variable
	    this.current = 0;
	    this.old = null;
	    this.next = 1;
	    this.prev = null;
	    this.len = 4;
	
	    this.isLock = false;
	
	    // ---------------
	    //  variable
	    // ---------------
	
	    // position
	    this.sX = 0;this.mX = 0;this.eX = 0; //startX,moveX,endX
	    this.dis = 0;this.minDis = 15;
	
	    // time
	    this.sT = 0;this.eT = 0;this.minT = 300; //startTime,ellapsedTime,
	
	    this.W = gb.in.r.W();
	
	    this.onTouchLong = function () {};
	    this.onTouchStartCB = function () {};
	    this.onTouchEndCB = function () {};
	
	    this.setup();
	    this.setEvents();
	  }
	
	  _createClass(SwipeTransition, [{
	    key: 'setup',
	    value: function setup() {}
	  }, {
	    key: 'onTouchStart',
	    value: function onTouchStart(e) {
	
	      // targetX
	      var y = e.originalEvent.changedTouches[0].pageY;
	      this.sY = y;
	
	      this.st = gb.in.s.st;
	      this.sb = gb.in.s.sb;
	      log('sy', y);
	    }
	  }, {
	    key: 'onTouchMove',
	    value: function onTouchMove(e) {
	
	      // targetX
	      var y = e.originalEvent.changedTouches[0].pageY;
	      this.mY = y;
	    }
	  }, {
	    key: 'onTouchEnd',
	    value: function onTouchEnd(e) {
	      var _this = this;
	
	      if (this.isLock) return;
	
	      var y = e.originalEvent.changedTouches[0].pageY;
	      this.eY = y;
	
	      var dis = this.sY - this.eY;
	      var absDis = Math.abs(dis);
	
	      // 最小距離より長かったら、処理
	      if (this.minDis < absDis) {
	
	        // ページ番号を取得
	        this.current = this.pageList[gb.in.pjax.id];
	
	        if (dis > 0) {
	
	          var h = $('.section').height() * gb.in.Layout.size.scale.rate;
	          log(this.sb, h - 10, this.sb < h - 10);
	
	          if (this.current !== 0 && this.sb < h - 10) return;
	          // historyページの場合は処理しない
	          if (this.current == 3) return;
	
	          this.calculateOrder('next');
	
	          // したへ
	          var pageName = Object.keys(this.pageList).filter(function (key) {
	            return _this.pageList[key] === _this.current;
	          })[0];
	          $('.pjaxTo_' + pageName).trigger('click');
	        } else {
	
	          log(this.st, this.st !== 0);
	
	          if (this.st !== 0) return;
	
	          // 上へ
	          this.calculateOrder('prev');
	
	          var pageName = Object.keys(this.pageList).filter(function (key) {
	            return _this.pageList[key] === _this.current;
	          })[0];
	          $('.pjaxTo_' + pageName).trigger('click');
	        }
	      }
	
	      // ----------------
	      //  blur解除
	      // ----------------
	      this.isNotTouch = true;
	
	      // コールバック
	      this.onTouchEndCB();
	    }
	  }, {
	    key: 'calculateOrder',
	    value: function calculateOrder(dir) {
	
	      this.old = this.current;
	
	      if (dir == 'next') {
	
	        this.current++;
	        if (this.current > this.len - 1) this.current = this.len - 1;
	        this.next = this.current + 1;
	        this.prev = this.current - 1;
	      } else {
	
	        this.current--;
	        if (this.current < 0) this.current = 0;
	        this.next = this.current + 1;
	        this.prev = this.current - 1;
	      }
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	      var _this2 = this;
	
	      var self = this;
	
	      this.$startWrap.on('touchstart.SwipeTransition', function (e) {
	        _this2.onTouchStart(e);
	      });
	      // this.$wrap.on('touchmove.SwipeTransition', (e)=>{this.onTouchMove(e);});
	      this.$endWrap.on('touchend.SwipeTransition', function (e) {
	        _this2.onTouchEnd(e);
	      });
	    }
	  }, {
	    key: 'removeEvents',
	    value: function removeEvents() {
	
	      var self = this;
	
	      this.$startWrap.off('touchstart.SwipeTransition');
	      // this.$wrap.off('touchmove.SwipeTransition');
	      this.$endWrap.off('touchend.SwipeTransition');
	    }
	  }]);
	
	  return SwipeTransition;
	}();
	
	exports.default = SwipeTransition;

/***/ },
/* 21 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//--------------------------------------------------
	//
	//  ScrollTransition
	//
	//--------------------------------------------------
	
	var ScrollTransition = function () {
	  function ScrollTransition($target) {
	    _classCallCheck(this, ScrollTransition);
	
	    this.pageList = {
	      'top': 0,
	      'movie': 1,
	      'interview': 2,
	      'history': 3
	    };
	
	    // variable
	    this.current = 0;
	    this.old = null;
	    this.next = 1;
	    this.prev = null;
	    this.len = 4;
	
	    this.isSwitch = true;
	
	    this.setup();
	    this.setEvents();
	  }
	
	  _createClass(ScrollTransition, [{
	    key: 'setup',
	    value: function setup() {}
	  }, {
	    key: 'switch',
	    value: function _switch() {
	      var _this = this;
	
	      if (!gb.in.u.isIE) var val = 30;else var val = 0;
	
	      // log(gb.in.pjax.isPjaxLock,this.STAmount,this.current,this.isSwitch);
	
	      // pjaxlock時は処理しない
	      if (gb.in.pjax.isPjaxLock) return;
	
	      // ページ番号を取得
	      this.current = this.pageList[gb.in.pjax.id];
	
	      //ホイールが0以上 かつ currentが一番最初でない かつ switch可能状態であれば
	      if (this.STAmount > val && this.current > 0 && this.isSwitch) {
	
	        // historyページのときは上スクロールしてもinterview indexに飛ばさない
	        if (gb.in.pjax.id == 'history') return;
	
	        this.isSwitch = false;
	
	        this.calculateOrder('prev');
	
	        var pageName = Object.keys(this.pageList).filter(function (key) {
	          return _this.pageList[key] === _this.current;
	        })[0];
	
	        $('.pjaxTo_' + pageName).trigger('click');
	
	        //ホイールが0以下 かつ currentが一番最後でない かつ switch可能状態であれば
	      } else if (this.STAmount < -val && this.current < this.len - 1 && this.isSwitch) {
	
	        this.isSwitch = false;
	
	        this.calculateOrder('next');
	
	        var pageName = Object.keys(this.pageList).filter(function (key) {
	          return _this.pageList[key] === _this.current;
	        })[0];
	
	        $('.pjaxTo_' + pageName).trigger('click');
	      };
	    }
	  }, {
	    key: 'calculateOrder',
	    value: function calculateOrder(dir) {
	
	      this.old = this.current;
	
	      if (dir == 'next') {
	
	        this.current++;
	        if (this.current > this.len - 1) this.current = this.len - 1;
	        this.next = this.current + 1;
	        this.prev = this.current - 1;
	      } else {
	
	        this.current--;
	        if (this.current < 0) this.current = 0;
	        this.next = this.current + 1;
	        this.prev = this.current - 1;
	      }
	    }
	  }, {
	    key: 'onMouseWheel',
	    value: function onMouseWheel(e, delta, deltaX, deltaY) {
	
	      // menuが開いているときはスクロール遷移させない
	      if (gb.in.menu.isOpen) return;
	      // res spのときは処理しない
	      if (gb.in.u.isResSP) return;
	
	      this.STAmount = gb.in.s.STAmount;
	
	      this.switch();
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	
	      gb.in.s.add('ScrollTransition', this.onMouseWheel.bind(this));
	    }
	  }]);
	
	  return ScrollTransition;
	}();
	
	exports.default = ScrollTransition;

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // ------------------------------------------------------------
	//
	//  Sns
	//
	// ------------------------------------------------------------
	
	var _metaData = __webpack_require__(23);
	
	var _metaData2 = _interopRequireDefault(_metaData);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Sns = function () {
	  function Sns($fb, $tw, $line, $mail) {
	    _classCallCheck(this, Sns);
	
	    this.$fb = $fb;
	    this.$tw = $tw;
	    this.$line = $line;
	    this.$mail = $mail;
	
	    this.fb = {
	      $target: $fb,
	      tit: encodeURIComponent($('title').html()),
	      des: encodeURIComponent($('.fbDes').attr('content')), // desctiption
	      url: location.href
	    };
	
	    this.tw = {
	      $target: $tw,
	      tit: encodeURIComponent($('title').html()),
	      des: encodeURIComponent($('.fbDes').attr('content')), // desctiption
	      url: location.href,
	      hash: 'hash'
	    };
	
	    this.line = {
	      $target: $line,
	      tit: encodeURIComponent($('title').html()),
	      des: encodeURIComponent($('.fbDes').attr('content')), // desctiption
	      url: location.href
	    };
	
	    this.setEvents();
	  }
	
	  _createClass(Sns, [{
	    key: 'switchMeta',
	    value: function switchMeta() {
	
	      var p = gb.in.pjax.id;
	      if (p == 'interview_detail') {
	
	        log($('.section').hasClass('section03_detail01'));
	        if ($('.section').hasClass('section03_detail01')) p = 'interviewDetail01';else if ($('.section').hasClass('section03_detail02')) p = 'interviewDetail02';else if ($('.section').hasClass('section03_detail03')) p = 'interviewDetail03';
	      }
	
	      // var d = gb.in.conf.meta[p];
	      var d = _metaData2.default[p];
	
	      $('title').text();
	      $('.metaDes').attr({ 'content': d.description });
	      $('.metaKey').attr({ 'content': d.keyword });
	
	      $('.fbTit').attr({ 'content': d.fb.tit });
	      $('.fbDes').attr({ 'content': d.fb.des });
	      $('.fbImg').attr({ 'content': d.fb.img });
	      $('.fbUrl').attr({ 'content': d.fb.url });
	
	      $('.twTit').attr({ 'content': d.tw.tit });
	      $('.twDes').attr({ 'content': d.tw.des });
	      $('.twImg').attr({ 'content': d.tw.img });
	      $('.twUrl').attr({ 'content': d.tw.url });
	    }
	  }, {
	    key: 'setting',
	    value: function setting() {
	
	      this.fb = {
	        $target: this.$fb,
	        tit: encodeURIComponent($('title').html()),
	        des: encodeURIComponent($('.fbDes').attr('content')), // desctiption
	        url: location.href
	      };
	
	      this.tw = {
	        $target: this.$tw,
	        tit: encodeURIComponent($('title').html()),
	        des: encodeURIComponent($('.fbDes').attr('content')), // desctiption
	        url: location.href,
	        hash: 'hash'
	      };
	
	      this.line = {
	        $target: this.$line,
	        tit: encodeURIComponent($('title').html()),
	        des: encodeURIComponent($('.fbDes').attr('content')), // desctiption
	        url: location.href
	      };
	    }
	  }, {
	    key: 'setOgImg',
	    value: function setOgImg() {
	
	      // $('.ogImg_fb').attr('content', this.fb.img);
	      // $('.ogImg_tw').attr('content', this.tw.img);
	
	    }
	  }, {
	    key: 'jumpFB',
	    value: function jumpFB(e) {
	
	      this.openWindow('https://www.facebook.com/sharer/sharer.php?u=' + this.fb.url);
	
	      return false;
	    }
	  }, {
	    key: 'jumpTW',
	    value: function jumpTW(e) {
	
	      this.openWindow('http://twitter.com/intent/tweet?url=' + this.tw.url + '&text=' + this.tw.des);
	      // this.openWindow('http://twitter.com/intent/tweet?url=' + this.tw.url + '&text=' + this.tw.text + '&hashtags=' + this.tw.hash);
	
	      return false;
	    }
	  }, {
	    key: 'jumpLINE',
	    value: function jumpLINE() {
	
	      this.openWindow('http://line.me/R/msg/text/?' + this.line.tit + '%0A' + this.line.url);
	
	      return false;
	    }
	  }, {
	    key: 'onSendMail',
	    value: function onSendMail() {
	
	      var address = '';
	      var sub = '';
	      var body = encodeURIComponent($('title').html() + '\n' + location.href);
	
	      location.href = 'mailto:' + address + '?subject=' + sub + '&body=' + body;
	
	      return false;
	    }
	  }, {
	    key: 'openWindow',
	    value: function openWindow(url, w, h) {
	
	      if (w === undefined) w = 600;
	      if (h === undefined) h = 600;
	
	      var l = Number((window.screen.width - w) / 2);
	      var t = Number((window.screen.height - h) / 2);
	
	      window.open(url, 'new_window', 'menubar=no,' + 'toolbar=no,' + 'resizable=yes,' + 'scrollbars=yes,' + 'height=' + h + ',' + 'width=' + w + ',' + 'left=' + l + ',' + 'top=' + t);
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	      var _this = this;
	
	      this.fb.$target.on('click', this.jumpFB.bind(this));
	      this.tw.$target.on('click', this.jumpTW.bind(this));
	      this.line.$target.on('click', this.jumpLINE.bind(this));
	      if (this.$mail) this.$mail.on('click', function () {
	        _this.onSendMail();return false;
	      });
	    }
	  }, {
	    key: 'removeEvents',
	    value: function removeEvents() {
	
	      this.fb.$target.off('click');
	      this.tw.$target.off('click');
	      this.line.$target.off('click');
	      if (this.$mail) this.$mail.off('click');
	    }
	  }]);
	
	  return Sns;
	}();
	
	exports.default = Sns;

/***/ },
/* 23 */
/***/ function(module, exports) {

	module.exports = {
		"description": "desctiption",
		"keyword": "ダミーダミーダミーダミーダミーダミーダミー",
		"ogpImgPath": "",
		"top": {
			"description": "ダミーダミーダミーダミーダミーダミーダミー",
			"fb": {
				"des": "ダミーダミーダミーダミーダミーダミーダミー",
				"img": "",
				"siteName": "",
				"tit": "ダミーダミーダミーダミーダミーダミーダミー",
				"type": "website",
				"url": ""
			},
			"keyword": "ダミーダミーダミーダミーダミーダミーダミー",
			"line": {
				"des": "ダミーダミーダミーダミーダミーダミーダミー",
				"img": "",
				"tit": "ダミーダミーダミーダミーダミーダミーダミー",
				"url": ""
			},
			"title": "",
			"tw": {
				"card": "summary_large_image",
				"creator": "",
				"des": "ダミーダミーダミーダミーダミーダミーダミー",
				"img": "",
				"siteName": "",
				"tit": "",
				"url": "ダミーダミーダミーダミーダミーダミーダミー"
			}
		},
		"movie": {
			"description": "ダミーダミーダミーダミーダミーダミーダミー",
			"fb": {
				"des": "ダミーダミーダミーダミーダミーダミーダミー",
				"img": "",
				"siteName": "",
				"tit": "ダミーダミーダミーダミーダミーダミーダミー",
				"type": "website",
				"url": ""
			},
			"keyword": "ダミーダミーダミーダミーダミーダミーダミー",
			"line": {
				"des": "ダミーダミーダミーダミーダミーダミーダミー",
				"img": "",
				"tit": "ダミーダミーダミーダミーダミーダミーダミー",
				"url": ""
			},
			"title": "",
			"tw": {
				"card": "summary_large_image",
				"creator": "",
				"des": "ダミーダミーダミーダミーダミーダミーダミー",
				"img": "",
				"siteName": "",
				"tit": "",
				"url": "ダミーダミーダミーダミーダミーダミーダミー"
			}
		},
		"interview": {
			"description": "ダミーダミーダミーダミーダミーダミーダミー",
			"fb": {
				"des": "ダミーダミーダミーダミーダミーダミーダミー",
				"img": "",
				"siteName": "",
				"tit": "ダミーダミーダミーダミーダミーダミーダミー",
				"type": "website",
				"url": ""
			},
			"keyword": "ダミーダミーダミーダミーダミーダミーダミー",
			"line": {
				"des": "ダミーダミーダミーダミーダミーダミーダミー",
				"img": "",
				"tit": "ダミーダミーダミーダミーダミーダミーダミー",
				"url": ""
			},
			"title": "",
			"tw": {
				"card": "summary_large_image",
				"creator": "",
				"des": "ダミーダミーダミーダミーダミーダミーダミー",
				"img": "",
				"siteName": "",
				"tit": "",
				"url": "ダミーダミーダミーダミーダミーダミーダミー"
			}
		},
		"interviewDetail01": {
			"description": "ダミーダミーダミーダミーダミーダミーダミー",
			"fb": {
				"des": "ダミーダミーダミーダミーダミーダミーダミー",
				"img": "",
				"siteName": "",
				"tit": "ダミーダミーダミーダミーダミーダミーダミー",
				"type": "website",
				"url": ""
			},
			"keyword": "ダミーダミーダミーダミーダミーダミーダミー",
			"line": {
				"des": "ダミーダミーダミーダミーダミーダミーダミー",
				"img": "",
				"tit": "ダミーダミーダミーダミーダミーダミーダミー",
				"url": ""
			},
			"title": "",
			"tw": {
				"card": "summary_large_image",
				"creator": "",
				"des": "ダミーダミーダミーダミーダミーダミーダミー",
				"img": "",
				"siteName": "",
				"tit": "",
				"url": "ダミーダミーダミーダミーダミーダミーダミー"
			}
		},
		"interviewDetail02": {
			"description": "ダミーダミーダミーダミーダミーダミーダミー",
			"fb": {
				"des": "ダミーダミーダミーダミーダミーダミーダミー",
				"img": "",
				"siteName": "",
				"tit": "ダミーダミーダミーダミーダミーダミーダミー",
				"type": "website",
				"url": ""
			},
			"keyword": "ダミーダミーダミーダミーダミーダミーダミー",
			"line": {
				"des": "ダミーダミーダミーダミーダミーダミーダミー",
				"img": "",
				"tit": "ダミーダミーダミーダミーダミーダミーダミー",
				"url": ""
			},
			"title": "",
			"tw": {
				"card": "summary_large_image",
				"creator": "",
				"des": "ダミーダミーダミーダミーダミーダミーダミー",
				"img": "",
				"siteName": "",
				"tit": "",
				"url": "ダミーダミーダミーダミーダミーダミーダミー"
			}
		},
		"interviewDetail03": {
			"description": "ダミーダミーダミーダミーダミーダミーダミー",
			"fb": {
				"des": "ダミーダミーダミーダミーダミーダミーダミー",
				"img": "",
				"siteName": "",
				"tit": "ダミーダミーダミーダミーダミーダミーダミー",
				"type": "website",
				"url": ""
			},
			"keyword": "ダミーダミーダミーダミーダミーダミーダミー",
			"line": {
				"des": "ダミーダミーダミーダミーダミーダミーダミー",
				"img": "",
				"tit": "ダミーダミーダミーダミーダミーダミーダミー",
				"url": ""
			},
			"title": "",
			"tw": {
				"card": "summary_large_image",
				"creator": "",
				"des": "ダミーダミーダミーダミーダミーダミーダミー",
				"img": "",
				"siteName": "",
				"tit": "",
				"url": "ダミーダミーダミーダミーダミーダミーダミー"
			}
		},
		"history": {
			"description": "ダミーダミーダミーダミーダミーダミーダミー",
			"fb": {
				"des": "ダミーダミーダミーダミーダミーダミーダミー",
				"img": "",
				"siteName": "",
				"tit": "ダミーダミーダミーダミーダミーダミーダミー",
				"type": "website",
				"url": ""
			},
			"keyword": "ダミーダミーダミーダミーダミーダミーダミー",
			"line": {
				"des": "ダミーダミーダミーダミーダミーダミーダミー",
				"img": "",
				"tit": "ダミーダミーダミーダミーダミーダミーダミー",
				"url": ""
			},
			"title": "",
			"tw": {
				"card": "summary_large_image",
				"creator": "",
				"des": "ダミーダミーダミーダミーダミーダミーダミー",
				"img": "",
				"siteName": "",
				"tit": "",
				"url": "ダミーダミーダミーダミーダミーダミーダミー"
			}
		}
	};

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); //--------------------------------------------------
	//
	//  Layout
	//
	//--------------------------------------------------
	
	var _Size = __webpack_require__(25);
	
	var _Size2 = _interopRequireDefault(_Size);
	
	var _Position = __webpack_require__(27);
	
	var _Position2 = _interopRequireDefault(_Position);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Layout = function () {
	  function Layout() {
	    _classCallCheck(this, Layout);
	
	    this.setEvents();
	  }
	
	  _createClass(Layout, [{
	    key: 'setup',
	    value: function setup() {
	
	      this.size = new _Size2.default(); // adjust size
	
	      this.position = new _Position2.default(); // adjust position
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {}
	  }, {
	    key: 'onLoad',
	    value: function onLoad() {
	
	      this.setup();
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	
	      $(window).on('load', this.onLoad.bind(this));
	    }
	  }], [{
	    key: 'reset',
	    value: function reset() {
	
	      // scaleで大きくしている関係上、高さを100%にしてはいけない
	      if (gb.in.pjax.id == 'history' || gb.in.pjax.id == 'interview_detail') {
	
	        TweenMax.set($('#inner'), {
	          width: '100%',
	          height: 'auto',
	          scale: 1,
	          'transform-origin': '0 0',
	          '-webkit-transform-origin': '0 0'
	        });
	        TweenMax.set($('#bgWrap'), {
	          width: '100%',
	          height: '100%',
	          scale: 1,
	          'transform-origin': '0 0',
	          '-webkit-transform-origin': '0 0'
	        });
	
	        TweenMax.set($('#wrapper'), {
	          'overflow': 'visible',
	          height: '100%'
	        });
	      } else {
	
	        TweenMax.set($('#inner, #bgWrap'), {
	          width: '100%',
	          height: '100%',
	          scale: 1,
	          'transform-origin': '0 0',
	          '-webkit-transform-origin': '0 0'
	        });
	
	        TweenMax.set($('#wrapper'), {
	          'overflow': 'visible',
	          height: '100%'
	        });
	      }
	    }
	  }]);
	
	  return Layout;
	}();
	
	exports.default = Layout;

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); //--------------------------------------------------
	//
	//  Size
	//
	//--------------------------------------------------
	
	var _Scale = __webpack_require__(26);
	
	var _Scale2 = _interopRequireDefault(_Scale);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Size = function () {
	  function Size() {
	    _classCallCheck(this, Size);
	
	    this.setup();
	    this.setEvents();
	  }
	
	  _createClass(Size, [{
	    key: 'setup',
	    value: function setup() {
	
	      // gb.in.u.setImgSPSize($('img')); // for sp img
	
	      // new gb.ResponsiveFontSize($('.fontResponsive')); //レスポンシブ時フォントサイズの変更
	
	      this.scale = new _Scale2.default(); // resize
	
	    }
	  }, {
	    key: 'onResize',
	    value: function onResize() {
	
	      // gb.in.u.setImgSPSize($('img')); // for sp img
	
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	
	      // gb.in.r.add(this.onResize.bind(this));
	
	    }
	  }]);
	
	  return Size;
	}();
	
	exports.default = Size;

/***/ },
/* 26 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//--------------------------------------------------
	//
	//  Layout
	//
	//--------------------------------------------------
	var Scale = function () {
	  function Scale() {
	    _classCallCheck(this, Scale);
	
	    this.SPBaseW = 375;
	    this.PCBaseW = 1300;
	
	    this.rate = 1;
	    this.W = window.innerWidth;
	
	    this.$targetList = [{
	      '$target': $('.menuInner'),
	      'scale': 'spOnly' // spOnly pcOnly both
	    }];
	
	    this.run();
	    this.setup();
	    this.setEvents();
	  }
	
	  _createClass(Scale, [{
	    key: 'setup',
	    value: function setup() {}
	  }, {
	    key: 'run',
	    value: function run() {
	
	      this.W = $(window).width();
	      this.iW = window.innerWidth;
	
	      this.scale();
	      this.wrap();
	    }
	
	    // 拡大
	
	  }, {
	    key: 'scale',
	    value: function scale() {
	      var _this = this;
	
	      // bpの場合のscale
	      if (this.iW <= gb.in.conf.bp) {
	
	        // widthからrateを計算
	        // this.rate = gb.in.u.floatFormat(this.W / this.SPBaseW , 2);
	        this.rate = this.W / this.SPBaseW;
	
	        // scaleするリストをループ
	        $.each(this.$targetList, function (index, val) {
	
	          if (val.scale == 'both' || val.scale == 'spOnly') {
	
	            TweenMax.set(val.$target, {
	              width: _this.SPBaseW,
	              scale: _this.rate,
	              'transform-origin': '0 0',
	              '-webkit-transform-origin': '0 0'
	            });
	          };
	        });
	      } else {
	
	        // widthからrateを計算
	        // this.rate = gb.in.u.floatFormat(this.W / this.PCBaseW , 2);
	        if (this.W > 1300) this.W = 1300;
	        this.rate = this.W / this.PCBaseW;
	
	        // scaleするリストをループ
	        $.each(this.$targetList, function (index, val) {
	
	          if (val.scale == 'both' || val.scale == 'pcOnly') {
	
	            TweenMax.set(val.$target, {
	              width: _this.PCBaseW,
	              scale: _this.rate,
	              'transform-origin': '0 0',
	              '-webkit-transform-origin': '0 0'
	            });
	          };
	
	          // こちらの場合は、scaleを戻す
	          if (val.scale == 'spOnly') {
	
	            TweenMax.set(val.$target, {
	              width: 'auto',
	              scale: 1,
	              'transform-origin': '0 0',
	              '-webkit-transform-origin': '0 0'
	            });
	          };
	        });
	      }
	    }
	
	    // scaleしたら、元の大きさ分余白ができるのでoverflow hiddenで消す
	
	  }, {
	    key: 'wrap',
	    value: function wrap() {}
	  }, {
	    key: 'onResize',
	    value: function onResize() {
	
	      this.run();
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	
	      gb.in.r.add('scale', this.onResize.bind(this));
	    }
	  }]);
	
	  return Scale;
	}();
	
	exports.default = Scale;

/***/ },
/* 27 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//--------------------------------------------------
	//
	//  Position
	//
	//--------------------------------------------------
	
	var Position = function () {
	  function Position() {
	    _classCallCheck(this, Position);
	
	    this.setup();
	    this.setEvents();
	  }
	
	  _createClass(Position, [{
	    key: 'setup',
	    value: function setup() {
	
	      // 上下中央寄せ
	      this.setCenter();
	    }
	  }, {
	    key: 'setCenter',
	    value: function setCenter() {
	
	      $('.posCenter').each(function (index, el) {
	
	        $(this).adjust();
	      });
	      $('.posCenterW').each(function (index, el) {
	
	        $(this).adjustW();
	      });
	      $('.posCenterH').each(function (index, el) {
	
	        $(this).adjustH();
	      });
	    }
	  }, {
	    key: 'onResize',
	    value: function onResize() {
	
	      this.setCenter();
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	
	      gb.in.r.add('setCenter', this.onResize.bind(this));
	    }
	  }]);
	
	  return Position;
	}();
	
	exports.default = Position;

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
	fileOverview:
	roject:
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * File: Main
	ate:
	uthor:
	
	
	var _DisplayTop = __webpack_require__(29);
	
	var _DisplayTop2 = _interopRequireDefault(_DisplayTop);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	// import DisplayMovie from '../Display/DisplayMovie.js';
	// import DisplayInterview from '../Display/DisplayInterview.js';
	// import DisplayInterviewDetail from '../Display/DisplayInterviewDetail.js';
	// import DisplayHistory from '../Display/DisplayHistory.js';
	
	'use strict';
	
	var Main = function () {
	  function Main() {
	    _classCallCheck(this, Main);
	
	    this.onImmediate();
	    this.setEvents();
	  }
	
	  _createClass(Main, [{
	    key: 'onImmediate',
	    value: function onImmediate() {}
	  }, {
	    key: 'onReady',
	    value: function onReady() {
	
	      //pageページ別のIDを取得
	      var page = $('body').data('id');
	
	      //pageのIDごとに発火するクラスの振り分け
	      switch (page) {
	
	        case 'top':
	
	          new _DisplayTop2.default();
	
	          break;
	
	        // case 'movie':
	        //
	        //   new DisplayMovie();
	        //
	        //   break;
	        //
	        // case 'interview':
	        //
	        //   new DisplayInterview();
	        //
	        //   break;
	        //
	        // case 'interview_detail':
	        //
	        //   new DisplayInterviewDetail();
	        //
	        //   break;
	        //
	        // case 'history':
	        //
	        //   new DisplayHistory();
	        //
	        //   break;
	
	      }
	    }
	  }, {
	    key: 'onLoad',
	    value: function onLoad() {}
	  }, {
	    key: 'onRender',
	    value: function onRender() {}
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	
	      $(document).on('ready', this.onReady.bind(this));
	      $(window).on('load', this.onLoad.bind(this));
	    }
	  }]);
	
	  return Main;
	}();
	
	exports.default = Main;

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); //--------------------------------------------------
	//
	//  Display
	//
	//--------------------------------------------------
	
	
	// import WebGLinit from './WebGLinit.js';
	// import Canvas from '../Visual/Canvas.js';
	
	
	var _Effects = __webpack_require__(30);
	
	var _Effects2 = _interopRequireDefault(_Effects);
	
	var _ScaleTop = __webpack_require__(44);
	
	var _ScaleTop2 = _interopRequireDefault(_ScaleTop);
	
	var _HoverEffectSNSSPFooter = __webpack_require__(45);
	
	var _HoverEffectSNSSPFooter2 = _interopRequireDefault(_HoverEffectSNSSPFooter);
	
	var _HoverEffectSVGArrowTop = __webpack_require__(46);
	
	var _HoverEffectSVGArrowTop2 = _interopRequireDefault(_HoverEffectSVGArrowTop);
	
	var _TopTime = __webpack_require__(17);
	
	var _TopTime2 = _interopRequireDefault(_TopTime);
	
	var _Position = __webpack_require__(27);
	
	var _Position2 = _interopRequireDefault(_Position);
	
	var _Canvas = __webpack_require__(47);
	
	var _Canvas2 = _interopRequireDefault(_Canvas);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	// import vs from './test.frag';
	
	
	'use strict';
	
	var DisplayTop = function () {
	  function DisplayTop() {
	    _classCallCheck(this, DisplayTop);
	
	    this.onImmediate();
	    this.setEvents();
	  }
	
	  _createClass(DisplayTop, [{
	    key: 'onImmediate',
	    value: function onImmediate() {
	
	      // アニメーションループスタート
	      // gb.in.up.loop();
	
	    }
	  }, {
	    key: 'onLoad',
	    value: function onLoad() {
	
	      // gb.in.canvas = new Canvas();
	      // gb.in.canvas.init();
	
	      gb.in.canvas = new _Canvas2.default({
	        output: document.getElementById('webgl-output')
	      });
	
	      gb.in.canvas.init();
	
	      // ------------------------------------------------------------
	      //  UI / Layout
	      // ------------------------------------------------------------
	      // sp
	      // gb.in.scaleTop = new ScaleTop();
	      // gb.in.pos = new Position();
	
	      // ------------------------------------------------------------
	      //  Effects
	      // ------------------------------------------------------------
	
	      // sp
	      // gb.in.sliderTop.setEvents();
	      // gb.in.snsSPHoverEf = new HoverEffectSNSSPFooter($('#sideL'));
	
	      // pc
	      // new HoverEffectSVGArrowTop($('.section01 .next')); // → TopOpeningへ
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	
	      $(window).on('load', this.onLoad.bind(this));
	    }
	  }], [{
	    key: 'run',
	    value: function run() {
	
	      // window.console.log('static_Run');
	
	      // ------------------------------------------------------------
	      //  UI / Layout
	      // ------------------------------------------------------------
	      // sp
	      // gb.in.scaleTop = new ScaleTop();
	      // gb.in.pos = new Position();
	
	      // ------------------------------------------------------------
	      //  Effects
	      // ------------------------------------------------------------
	
	      // sp
	      // gb.in.sliderTop.setEvents();
	      // gb.in.snsSPHoverEf = new HoverEffectSNSSPFooter($('#sideL'));
	
	      // pc
	
	    }
	  }]);
	
	  return DisplayTop;
	}();
	
	exports.default = DisplayTop;

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); //--------------------------------------------------
	//
	//  Effects
	//
	//--------------------------------------------------
	
	
	var _CVContents = __webpack_require__(31);
	
	var _CVContents2 = _interopRequireDefault(_CVContents);
	
	var _GlContents = __webpack_require__(37);
	
	var _GlContents2 = _interopRequireDefault(_GlContents);
	
	var _Profiler = __webpack_require__(43);
	
	var _Profiler2 = _interopRequireDefault(_Profiler);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Effects = function () {
	  function Effects() {
	    _classCallCheck(this, Effects);
	
	    this.gl = null;
	    this.dom = null;
	    this.state = '';
	
	    this.setup();
	    this.debug();
	    this.setEvents();
	  }
	
	  _createClass(Effects, [{
	    key: 'setup',
	    value: function setup() {
	
	      // bg
	      // gb.in.Section02Bg = new Section02Bg();
	
	      // product
	      // gb.in.Section04Product = new Section04Product($('.section03'));
	
	    }
	  }, {
	    key: 'debug',
	    value: function debug() {
	
	      // profiler設定
	      // new Profiler();
	
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {}
	  }]);
	
	  return Effects;
	}();
	
	exports.default = Effects;

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); //--------------------------------------------------
	//
	//  CVContents
	//
	//--------------------------------------------------
	
	
	var _CVContentsLoop = __webpack_require__(32);
	
	var _CVContentsLoop2 = _interopRequireDefault(_CVContentsLoop);
	
	var _CVContentsTimeline = __webpack_require__(33);
	
	var _CVContentsTimeline2 = _interopRequireDefault(_CVContentsTimeline);
	
	var _CreateCanvas = __webpack_require__(34);
	
	var _CreateCanvas2 = _interopRequireDefault(_CreateCanvas);
	
	var _FullSize = __webpack_require__(16);
	
	var _FullSize2 = _interopRequireDefault(_FullSize);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var CVContents = function () {
	  function CVContents() {
	    _classCallCheck(this, CVContents);
	
	    this.setup();
	    // this.create();
	    this.setEvents();
	    // loop
	    this.loop = new _CVContentsLoop2.default();
	    // timeline
	    this.timeline = new _CVContentsTimeline2.default();
	  }
	
	  _createClass(CVContents, [{
	    key: 'setup',
	    value: function setup() {
	
	      // リソースのロード
	      // gb.in.loadMgr.sec02Img();
	
	
	    }
	  }, {
	    key: 'create',
	    value: function create() {
	
	      // gb.in.rm.total += 1;
	      // canvasの生成
	      // レティーナ用に2倍
	      gb.in.canvas = new _CreateCanvas2.default($('#bgWrap .sec02BgCanvas'), gb.in.conf.defW, gb.in.conf.defH, function () {
	
	        var l = new _FullSize2.default($('#bgWrap'), $('.sec02BgCanvas'), 0, 'FullSizeSec02BgCanvas');
	        l.targetDefW = gb.in.conf.defW;
	        l.targetDefH = gb.in.conf.defH;
	        l.run();
	      });
	
	      // ui追加(コントローラー、profilerなど)
	      // this.addUI();
	
	    }
	  }, {
	    key: 'addUI',
	    value: function addUI() {
	
	      // paramrter調整
	      // gb.in.param = new gb.Param();
	
	    }
	  }, {
	    key: 'play',
	    value: function play() {
	
	      this.loop.start();
	      this.timeline.tlMain.play();
	    }
	  }, {
	    key: 'pause',
	    value: function pause() {
	
	      this.loop.pause();
	      this.timeline.tlMain.pause();
	    }
	  }, {
	    key: 'onResize',
	    value: function onResize() {}
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	
	      // gb.in.r.add('cvContents', this.onResize.bind(this));
	      // gb.in.hash.onChangeFuncList.push(this.onSection02.bind(this));
	
	    }
	  }]);
	
	  return CVContents;
	}();
	
	exports.default = CVContents;

/***/ },
/* 32 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//--------------------------------------------------
	//
	//  CVContentsLoop
	//
	//--------------------------------------------------
	
	var CVContentsLoop = function () {
	  function CVContentsLoop() {
	    _classCallCheck(this, CVContentsLoop);
	
	    this.isAlways = true;
	    this.isRunStatus = true;
	    this.isAdjustParam = true;
	    this.state = 'initial';
	    this.sometimesState = 'initial';
	
	    this.loopList = [];
	
	    this.loopStart = false;
	
	    this.setEvents();
	  }
	
	  _createClass(CVContentsLoop, [{
	    key: 'update',
	    value: function update() {
	
	      if (this.isAlways) this.runAlways();
	      if (this.isRunStatus) this.runStatus();
	      if (this.isAdjustParam) this.runAdjustParam();
	    }
	
	    // ------------------------------------------------------------
	    // 常に行う処理
	    // ------------------------------------------------------------    
	
	  }, {
	    key: 'runAlways',
	    value: function runAlways() {
	
	      for (var i in this.loopList) {
	        this.loopList[i]();
	      }
	    }
	
	    // ------------------------------------------------------------
	    // 各状態の処理
	    // ------------------------------------------------------------
	
	  }, {
	    key: 'runStatus',
	    value: function runStatus() {
	
	      if (this.state == 'initial') {} else if (this.state == 'start') {} else if (this.state == 'step01') {} else if (this.state == 'step02') {} else if (this.state == 'step03') {} else if (this.state == 'standby') {} else if (this.state == 'sometimes') {
	
	        if (this.sometimesState == 'lineShadow') {} else if (this.sometimesState == 'sphere') {} else if (this.sometimesState == 'satellite') {}
	      }
	    }
	
	    // ------------------------------------------------------------
	    // パラメータ調整用処理
	    // ------------------------------------------------------------
	
	  }, {
	    key: 'runAdjustParam',
	    value: function runAdjustParam() {}
	  }, {
	    key: 'draw',
	    value: function draw() {}
	  }, {
	    key: 'loop',
	    value: function loop() {
	
	      if (this.loopStart) {
	
	        this.update();
	        this.draw();
	
	        // log('section02')
	      }
	    }
	  }, {
	    key: 'start',
	    value: function start() {
	
	      this.loopStart = true;
	    }
	  }, {
	    key: 'pause',
	    value: function pause() {
	
	      this.loopStart = false;
	    }
	  }, {
	    key: 'add',
	    value: function add(func) {
	
	      this.loopList.push(func);
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	
	      var self = this;
	
	      gb.in.up.add('section02Bg', this.loop.bind(this));
	    }
	  }]);
	
	  return CVContentsLoop;
	}();
	
	exports.default = CVContentsLoop;

/***/ },
/* 33 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//--------------------------------------------------
	//
	//  CVContentsTimeline
	//
	//--------------------------------------------------
	
	var CVContentsTimeline = function () {
	  function CVContentsTimeline() {
	    _classCallCheck(this, CVContentsTimeline);
	
	    this.tlMain = new TimelineMax();
	    this.setup();
	    this.setEvents();
	  }
	
	  _createClass(CVContentsTimeline, [{
	    key: 'setup',
	    value: function setup() {
	
	      // タイムラインを止めておく
	      this.tlMain.pause();
	
	      this.beginning();
	      this.step01();
	      this.step02();
	      this.step03();
	      this.standBy();
	      this.sometimes();
	    }
	  }, {
	    key: 'beginning',
	    value: function beginning() {}
	  }, {
	    key: 'step01',
	    value: function step01() {}
	  }, {
	    key: 'step02',
	    value: function step02() {}
	  }, {
	    key: 'step03',
	    value: function step03() {}
	  }, {
	    key: 'standBy',
	    value: function standBy() {}
	
	    // 時々
	
	  }, {
	    key: 'sometimes',
	    value: function sometimes() {
	
	      var self = this;
	
	      this.tlMain.add(function () {}, '+=0.0');
	    }
	  }, {
	    key: 'onResizse',
	    value: function onResizse() {}
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	
	      // gb.in.r.add('cvTimeline', this.onResizse.bind(this));
	
	    }
	  }]);
	
	  return CVContentsTimeline;
	}();
	
	exports.default = CVContentsTimeline;

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // ------------------------------------------------------------
	//
	//  CreateCanvas
	//
	// ------------------------------------------------------------
	
	
	var _Canvas = __webpack_require__(35);
	
	var _Canvas2 = _interopRequireDefault(_Canvas);
	
	var _Plane = __webpack_require__(36);
	
	var _Plane2 = _interopRequireDefault(_Plane);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var CreateCanvas = function () {
	  function CreateCanvas($wrap, w, h) {
	    var cb = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {};
	
	    _classCallCheck(this, CreateCanvas);
	
	    this.c = null;
	    this.cw = 0;
	    this.ch = 0;
	
	    this.fillStyle = '0,0,0';
	    this.$wrap = $wrap;
	
	    this.loopList = [];
	
	    // 最初オブジェクト生成するためにboolean あえて逆に
	    this.isResize = gb.in.u.isResPC ? false : true;
	
	    this.cb = cb;
	
	    this.w = 260;
	    this.h = 146;
	
	    this.setup();
	    this.setEvents();
	    this.setCanvasSize(w, h);
	    this.timeline();
	  }
	
	  _createClass(CreateCanvas, [{
	    key: 'setup',
	    value: function setup() {
	      //canvas finger point
	
	      this.c = new _Canvas2.default();
	
	      // this.addObjects();
	      this.onResize();
	
	      this.$wrap.append(this.c.canvas);
	
	      this.cb();
	    }
	  }, {
	    key: 'addObjects',
	    value: function addObjects(vx) {
	      //canvas finger point
	
	      this.loopList = [];
	
	      var offset = 0;
	      var offsetFrame = 0;
	      var offsetVx = 0;
	
	      this.xNum = 8;
	      this.yNum = 6;
	      this.len = this.xNum * this.yNum;
	
	      this.tileList = [];
	
	      if (gb.in.u.isPC) {
	        var total = gb.in.conf.sec02ImgNum;
	      } else {
	        var total = 19;
	      }
	
	      for (var i = 0; i < this.len; i++) {
	
	        this.tile = new _Plane2.default(this.c.ctx, this.fillStyle);
	
	        var nth = i % this.xNum;
	        if (nth == 0) offset = -500 + Math.floor(Math.random() * 500) - 250;
	        if (nth == 0) offsetFrame = Math.floor(total * Math.random());
	        if (nth == 0) offsetVx = vx + Math.floor(vx * 2 * Math.random());
	
	        var x = nth * this.w + offset;
	        var y = Math.floor(i / this.xNum) * this.h;
	
	        this.tile.setup(x, y, this.w, this.h, offsetFrame + nth * 3, offsetVx, offset);
	        this.tileList.push(this.tile);
	        this.add(this.tile.loop.bind(this.tile));
	      };
	    }
	  }, {
	    key: 'setCanvasSize',
	    value: function setCanvasSize(w, h) {
	
	      this.cw = this.c.canvas.width = w;
	      this.ch = this.c.canvas.height = h;
	    }
	  }, {
	    key: 'loop',
	    value: function loop() {
	
	      // this.c.ctx.clearRect(0,0,this.cw,this.ch);
	      // this.c.ctx.fillStyle = 'rgba(255,255,255,0.08)';
	
	      this.c.ctx.fillStyle = 'rgba(255,255,255,0.6)';
	      this.c.ctx.fillRect(0, 0, this.cw, this.ch);
	
	      for (var i in this.loopList) {
	        this.loopList[i]();
	      }
	    }
	  }, {
	    key: 'timeline',
	    value: function timeline() {}
	  }, {
	    key: 'add',
	    value: function add(func) {
	
	      this.loopList.push(func);
	    }
	  }, {
	    key: 'onResize',
	    value: function onResize() {
	
	      log(gb.in.u.isResSP, gb.in.u.isResPC);
	
	      if (gb.in.u.isResSP && this.isResize) {
	        this.isResize = false;
	
	        this.addObjects(0.5);
	
	        for (var i = 0; i < this.tileList.length; i++) {
	
	          this.tileList[i].cntStop = true;
	        };
	
	        log(1111);
	      } else if (gb.in.u.isResPC && !this.isResize) {
	        this.isResize = true;
	
	        this.addObjects(0.5);
	
	        // スマホだったら、広い表示でもフレームの動きを止める
	        if (gb.in.u.isSP) {
	
	          for (var i = 0; i < this.tileList.length; i++) {
	
	            this.tileList[i].cntStop = true;
	          };
	
	          return;
	        }
	
	        for (var i = 0; i < this.tileList.length; i++) {
	
	          this.tileList[i].cntStop = false;
	        };
	
	        log(2222);
	      }
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	
	      gb.in.Sec02Bg.loop.add(this.loop.bind(this));
	      gb.in.r.add('CreateCanvas', this.onResize.bind(this));
	    }
	  }]);
	
	  return CreateCanvas;
	}();
	
	exports.default = CreateCanvas;

/***/ },
/* 35 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	// ------------------------------------------------------------
	//
	//  Canvas
	//
	// ------------------------------------------------------------
	
	var Canvas = function () {
	  function Canvas() {
	    _classCallCheck(this, Canvas);
	
	    this.canvas = null;
	    this.ctx = null;
	    this.w = $(window).width();
	    this.h = $(window).height();
	
	    this.setup();
	  }
	
	  _createClass(Canvas, [{
	    key: 'setup',
	    value: function setup() {
	
	      this.canvas = document.createElement('canvas');
	      this.ctx = this.canvas.getContext('2d');
	      this.canvas.width = this.w;
	      this.canvas.height = this.h;
	    }
	  }, {
	    key: 'update',
	    value: function update() {}
	  }, {
	    key: 'draw',
	    value: function draw() {}
	  }]);
	
	  return Canvas;
	}();
	
	exports.default = Canvas;

/***/ },
/* 36 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	// ------------------------------------------------------------
	//
	//  Plane
	//
	// ------------------------------------------------------------
	
	var Plane = function () {
	  function Plane(ctx, strokeStyle) {
	    _classCallCheck(this, Plane);
	
	    this.ctx = ctx;
	
	    this.strokeStyle = strokeStyle;
	    this.op = { val: 1 };
	
	    this.cnt = 0;
	
	    this.cntStop = false;
	
	    // this.setup();
	    this.create();
	  }
	
	  _createClass(Plane, [{
	    key: "setup",
	    value: function setup(x, y, w, h, frameStart, vx, offset) {
	
	      this.imgList = gb.in.loadSec02Img.list;
	
	      this.x = x;
	      this.y = y;
	      this.w = w;
	      this.h = h;
	
	      this.vx = vx;
	
	      this.offset = offset;
	
	      this.cnt = frameStart;
	    }
	  }, {
	    key: "create",
	    value: function create() {}
	
	    // 頂点で描く
	
	  }, {
	    key: "update",
	    value: function update() {
	
	      this.x -= this.vx;
	      if (this.x < -this.w) this.x = gb.in.canvas.cw - 10;
	    }
	  }, {
	    key: "draw",
	    value: function draw() {
	
	      if (!this.cntStop) {
	
	        // 間引き
	        if (gb.in.up.cnt % 3 == 0) this.cnt++;else ;
	      };
	      // this.cnt++;
	
	      if (gb.in.u.isPC) {
	        var total = gb.in.conf.sec02ImgNum;
	      } else {
	        var total = 19;
	      }
	
	      var img = this.imgList[this.cnt % total];
	      this.ctx.drawImage(img, this.x, this.y, this.w, this.h);
	    }
	  }, {
	    key: "loop",
	    value: function loop() {
	
	      this.update();
	      this.draw();
	    }
	  }]);
	
	  return Plane;
	}();
	
	exports.default = Plane;

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); //--------------------------------------------------
	//
	//  GlContents
	//
	//--------------------------------------------------
	
	
	var _GlContentsLoop = __webpack_require__(38);
	
	var _GlContentsLoop2 = _interopRequireDefault(_GlContentsLoop);
	
	var _GlContentsTimeline = __webpack_require__(39);
	
	var _GlContentsTimeline2 = _interopRequireDefault(_GlContentsTimeline);
	
	var _Plane = __webpack_require__(41);
	
	var _Plane2 = _interopRequireDefault(_Plane);
	
	var _Param = __webpack_require__(42);
	
	var _Param2 = _interopRequireDefault(_Param);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var GlContents = function () {
	  function GlContents() {
	    var $wrap = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : $('body');
	
	    _classCallCheck(this, GlContents);
	
	    this.renderer;
	    this.camera;
	    this.scene;
	    this.light;
	
	    this.state = 'initial';
	    this.adjustParam = true;
	    this.stateLineRotate = false;
	    this.sometimesState = 'initial';
	
	    this.isControl = false;
	    this.controls;
	
	    this.setup();
	    this.create($wrap);
	    this.setEvents();
	    // loop
	    this.loop = new _GlContentsLoop2.default();
	    // timeline
	    this.timeline = new _GlContentsTimeline2.default();
	  }
	
	  _createClass(GlContents, [{
	    key: 'setup',
	    value: function setup() {}
	  }, {
	    key: 'create',
	    value: function create($wrap) {
	
	      // render
	      gb.in.renderer = this.renderer = new THREE.WebGLRenderer({ antialias: true });
	      this.renderer.setSize(gb.in.r.W(), gb.in.r.H());
	      this.renderer.setClearColor(0xffffff, 0.0);
	      $wrap.append(this.renderer.domElement);
	      // document.body.appendChild(  );
	      $(this.renderer.domElement).css({
	        position: 'absolute',
	        top: 0, left: 0,
	        'z-index': 1
	      });
	
	      // scene
	      gb.in.scene = new gb.Scene();
	      this.scene = gb.in.scene.scene;
	
	      // camera
	      gb.in.camera = new gb.Camera();
	      this.camera = gb.in.camera.camera;
	
	      // light
	      this.light = new THREE.DirectionalLight(0xffffff, 3);
	      this.light.position.z = 3;
	      this.scene.add(this.light);
	
	      // オブジェクト追加
	      this.addObjects();
	
	      // ui追加(コントローラー、profilerなど)
	      // this.addUI();
	
	      // リソースのロード
	      gb.in.loadMgr.section04ProductShader();
	    }
	  }, {
	    key: 'addObjects',
	    value: function addObjects() {
	
	      this.plane = new _Plane2.default();
	    }
	  }, {
	    key: 'addUI',
	    value: function addUI() {
	
	      // controls
	
	      if (this.isControl) {
	
	        gb.in.controls = this.controls = new THREE.TrackballControls(this.camera);
	        this.controls.zoomSpeed = 0.8;
	        this.controls.rotateSpeed = 3;
	      };
	
	      // profiler設定
	      new gb.Profiler();
	      // paramrter調整
	      gb.in.param = new _Param2.default();
	    }
	  }, {
	    key: 'onResize',
	    value: function onResize() {
	
	      var w = window.innerWidth;
	      var h = window.innerHeight;
	
	      this.renderer.setSize(w, h);
	      this.camera.aspect = w / h;
	      this.camera.updateProjectionMatrix();
	    }
	  }, {
	    key: 'onSection04',
	    value: function onSection04(cur, prev) {
	
	      if (cur == 'product') {
	
	        this.loop.start();
	        this.timeline.tlMain.play();
	      } else {
	
	        this.loop.pause();
	        this.timeline.tlMain.pause();
	      }
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	      var _this = this;
	
	      gb.in.r.add(this.onResize.bind(this));
	      gb.in.hash.onChangeFuncList.push(this.onSection04.bind(this));
	      $(window).on('onSection04ProductImg', function () {
	        _this.timeline.setup();
	      });
	    }
	  }]);
	
	  return GlContents;
	}();
	
	exports.default = GlContents;

/***/ },
/* 38 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//--------------------------------------------------
	//
	//  GlContentsLoop
	//
	//--------------------------------------------------
	
	var GlContentsLoop = function () {
	  function GlContentsLoop() {
	    _classCallCheck(this, GlContentsLoop);
	
	    this.isAlways = true;
	    this.isRunStatus = true;
	    this.isAdjustParam = true;
	    this.state = 'initial';
	    this.sometimesState = 'initial';
	
	    this.loopStart = false;
	
	    this.loopList = [];
	
	    this.setEvents();
	  }
	
	  _createClass(GlContentsLoop, [{
	    key: 'update',
	    value: function update() {
	
	      if (this.isAlways) this.runAlways();
	      if (this.isRunStatus) this.runStatus();
	      if (this.isAdjustParam) this.runAdjustParam();
	    }
	
	    // ------------------------------------------------------------
	    // 常に行う処理
	    // ------------------------------------------------------------    
	
	  }, {
	    key: 'runAlways',
	    value: function runAlways() {
	
	      if (gb.in.Section04Product.isControl) gb.in.controls.update();
	
	      // camera
	      gb.in.camera.updateControll();
	    }
	
	    // ------------------------------------------------------------
	    // 各状態の処理
	    // ------------------------------------------------------------
	
	  }, {
	    key: 'runStatus',
	    value: function runStatus() {
	
	      if (this.state == 'initial') {} else if (this.state == 'start') {} else if (this.state == 'step01') {} else if (this.state == 'step02') {} else if (this.state == 'step03') {} else if (this.state == 'standby') {} else if (this.state == 'sometimes') {
	
	        if (this.sometimesState == 'lineShadow') {} else if (this.sometimesState == 'sphere') {} else if (this.sometimesState == 'satellite') {}
	      }
	    }
	
	    // ------------------------------------------------------------
	    // パラメータ調整用処理
	    // ------------------------------------------------------------
	
	  }, {
	    key: 'runAdjustParam',
	    value: function runAdjustParam() {}
	  }, {
	    key: 'draw',
	    value: function draw() {
	
	      gb.in.renderer.render(gb.in.scene.scene, gb.in.camera.camera);
	      // gb.in.postprocess.composer.render(0.1);
	    }
	  }, {
	    key: 'loop',
	    value: function loop() {
	
	      if (this.loopStart) {
	
	        this.update();
	        this.draw();
	
	        log('section04');
	      }
	    }
	  }, {
	    key: 'start',
	    value: function start() {
	
	      this.loopStart = true;
	    }
	  }, {
	    key: 'pause',
	    value: function pause() {
	
	      this.loopStart = false;
	    }
	  }, {
	    key: 'add',
	    value: function add(func) {
	
	      this.loopList.push(func);
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	
	      var self = this;
	
	      gb.in.up.add('section04Product', this.loop.bind(this));
	    }
	  }]);
	
	  return GlContentsLoop;
	}();
	
	exports.default = GlContentsLoop;

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); //--------------------------------------------------
	//
	//  GlContentsTimeline
	//
	//--------------------------------------------------
	
	var _SometimesMgr = __webpack_require__(40);
	
	var _SometimesMgr2 = _interopRequireDefault(_SometimesMgr);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var GlContentsTimeline = function () {
	  function GlContentsTimeline() {
	    _classCallCheck(this, GlContentsTimeline);
	
	    this.tlMain = new TimelineMax();
	    // this.setup();
	    this.setEvents();
	  }
	
	  _createClass(GlContentsTimeline, [{
	    key: 'setup',
	    value: function setup() {
	
	      // タイムラインを止めておく
	      this.tlMain.pause();
	
	      this.beginning();
	      // this.step01();
	      // this.step02();
	      // this.step03();
	      // this.standBy();
	      this.sometimes();
	    }
	  }, {
	    key: 'beginning',
	    value: function beginning() {
	
	      this.tlMain
	      // zoom in
	      .to(gb.in.loadMgr.shaders[0].uniforms.strength, 1.3, {
	        value: 500,
	        ease: Expo.easeInOut,
	        onStart: function onStart() {
	
	          TweenMax.set(gb.in.loadMgr.shaders[1].uniforms.strength, { value: 500 });
	        }
	      })
	
	      // camera移動
	      .to(gb.in.camera.camera.position, 1.5, {
	        z: 200,
	        ease: Expo.easeInOut
	      }, '-=1.3')
	
	      // plane移動
	      .to(gb.in.Section04Product.plane.plane.position, 1.5, {
	        x: -100,
	        y: 200,
	        ease: Expo.easeInOut
	      }, '-=1.5')
	
	      // zoom out
	      .to(gb.in.loadMgr.shaders[0].uniforms.strength, 1, {
	        value: 0,
	        ease: Expo.easeIn
	      }, '-=0.4')
	
	      // plane01がopacityで消える
	      .to(gb.in.loadMgr.shaders[0].uniforms.opacity, 1, {
	        value: 0,
	        ease: Power3.easeInOut
	      }, '-=0.7')
	
	      // plane02のblur out
	      .to(gb.in.loadMgr.shaders[1].uniforms.strength, 1, {
	        value: 0,
	        ease: Expo.easeInOut
	      }, '-=1.0')
	
	      // plane02が出て来る
	      .to(gb.in.loadMgr.shaders[1].uniforms.opacity, 1, {
	        value: 1,
	        ease: Expo.easeInOut
	      }, '-=1.0').to(gb.in.camera.camera.position, 1.5, {
	        z: 400,
	        ease: Expo.easeOut,
	        onComplete: function onComplete() {
	
	          // materialの変更
	
	          gb.in.loadMgr.shaders[2].uniforms.from.value = gb.in.Section04Product.plane.textures[1];
	          gb.in.loadMgr.shaders[2].uniforms.to.value = gb.in.Section04Product.plane.textures[2];
	
	          gb.in.Section04Product.plane.plane02.material = new THREE.ShaderMaterial({
	            uniforms: gb.in.loadMgr.shaders[2].uniforms,
	            vertexShader: gb.in.loadMgr.shaders[2].vs,
	            fragmentShader: gb.in.loadMgr.shaders[2].fs,
	            transparent: true
	          });
	
	          gb.in.Section04Product.plane.plane02.scale.x = gb.in.Section04Product.plane.plane02.scale.y = 1200.0;
	        }
	      }, '-=1.0');
	    }
	  }, {
	    key: 'step01',
	    value: function step01() {}
	  }, {
	    key: 'step02',
	    value: function step02() {}
	  }, {
	    key: 'step03',
	    value: function step03() {}
	  }, {
	    key: 'standBy',
	    value: function standBy() {}
	
	    // 時々
	
	  }, {
	    key: 'sometimes',
	    value: function sometimes() {
	
	      var self = this;
	
	      this.tlMain.add(function () {
	
	        var s = new _SometimesMgr2.default();
	
	        s.add(function () {
	
	          TweenMax.to(gb.in.loadMgr.shaders[2].uniforms.progress, 1.3, {
	            value: 1,
	            ease: Expo.easeInOut,
	            onComplete: function onComplete() {
	
	              gb.in.loadMgr.shaders[2].uniforms.from.value = gb.in.Section04Product.plane.textures[3];
	            }
	
	          });
	        }, 2.0, 2.0);
	
	        s.add(function () {
	
	          TweenMax.to(gb.in.loadMgr.shaders[2].uniforms.progress, 1.3, {
	            value: 0,
	            ease: Expo.easeInOut,
	            onComplete: function onComplete() {
	
	              gb.in.loadMgr.shaders[2].uniforms.to.value = gb.in.Section04Product.plane.textures[4];
	            }
	
	          });
	        }, 2.0, 2.0);
	
	        s.add(function () {
	
	          TweenMax.to(gb.in.loadMgr.shaders[2].uniforms.progress, 1.3, {
	            value: 1,
	            ease: Expo.easeInOut,
	            onComplete: function onComplete() {
	
	              gb.in.loadMgr.shaders[2].uniforms.from.value = gb.in.Section04Product.plane.textures[5];
	            }
	
	          });
	        }, 2.0, 2.0);
	
	        s.add(function () {
	
	          TweenMax.to(gb.in.loadMgr.shaders[2].uniforms.progress, 1.3, {
	            value: 0,
	            ease: Expo.easeInOut,
	            onComplete: function onComplete() {
	
	              gb.in.loadMgr.shaders[2].uniforms.to.value = gb.in.Section04Product.plane.textures[1];
	            }
	
	          });
	        }, 2.0, 2.0);
	
	        s.add(function () {
	
	          TweenMax.to(gb.in.loadMgr.shaders[2].uniforms.progress, 1.3, {
	            value: 1,
	            ease: Expo.easeInOut,
	            onComplete: function onComplete() {
	
	              gb.in.loadMgr.shaders[2].uniforms.from.value = gb.in.Section04Product.plane.textures[2];
	            }
	
	          });
	        }, 2.0, 2.0);
	
	        s.start();
	      }, '+=0.0');
	    }
	  }, {
	    key: 'onResizse',
	    value: function onResizse() {}
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	
	      gb.in.r.add(this.onResizse.bind(this));
	
	      $(window).on('click', function () {
	
	        // this.start();
	
	      });
	    }
	  }]);
	
	  return GlContentsTimeline;
	}();
	
	exports.default = GlContentsTimeline;

/***/ },
/* 40 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//--------------------------------------------------
	//
	//  SomeTimes
	//
	//--------------------------------------------------
	
	var SomeTimes = function () {
	  function SomeTimes() {
	    _classCallCheck(this, SomeTimes);
	
	    this.SomeTimes;
	    this.Timer = null;
	    this.cbList = [];
	    this.len = 0;
	    this.order = 0;
	
	    this.min = [];
	    this.max = [];
	
	    this.setup();
	  }
	
	  _createClass(SomeTimes, [{
	    key: "setup",
	    value: function setup() {}
	  }, {
	    key: "start",
	    value: function start() {
	      var min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
	      var max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	
	
	      this.later = gb.in.u.random(min, max) * 1000;
	      this.Timer = setTimeout(this.run.bind(this), this.later);
	    }
	  }, {
	    key: "run",
	    value: function run() {
	
	      this.order = this.order % this.len;
	
	      this.later = gb.in.u.random(this.min[this.order], this.max[this.order]) * 1000;
	
	      this.cbList[this.order]();
	
	      this.order++;
	      this.Timer = setTimeout(this.run.bind(this), this.later);
	    }
	  }, {
	    key: "stop",
	    value: function stop() {
	
	      log(this.Timer);
	      clearTimeout(this.Timer);
	    }
	  }, {
	    key: "add",
	    value: function add(func) {
	      var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;
	      var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 12;
	
	
	      this.min.push(min);
	      this.max.push(max);
	
	      this.cbList.push(func);
	      this.len = this.cbList.length;
	    }
	  }, {
	    key: "setEvents",
	    value: function setEvents() {}
	  }]);
	
	  return SomeTimes;
	}();
	
	exports.default = SomeTimes;

/***/ },
/* 41 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//--------------------------------------------------
	//
	//  Plane
	//
	//--------------------------------------------------
	
	var Plane = function () {
	  function Plane() {
	    _classCallCheck(this, Plane);
	
	    this.geometry = null;
	    this.material = null;
	
	    this.video = null;
	    this.plane = null;
	
	    this.defWW = 1920;
	    this.defHH = 1080;
	    this.defW = 305;
	    this.rate = 0;
	    this.rateW = 0;
	
	    this.lb = null; //layout background
	
	    this.setup();
	    this.setEvents();
	  }
	
	  _createClass(Plane, [{
	    key: 'setup',
	    value: function setup() {}
	  }, {
	    key: 'create',
	    value: function create(cb) {
	
	      var textures = this.textures = gb.in.loadMgr.textures;
	
	      var w = textures[0].image.width / textures[0].image.width;
	      var h = textures[0].image.height / textures[0].image.width;
	
	      // plane01
	
	      var geometry = new THREE.PlaneGeometry(w, h, 1, 1);
	      var material = new THREE.ShaderMaterial({
	        uniforms: gb.in.loadMgr.shaders[0].uniforms,
	        vertexShader: gb.in.loadMgr.shaders[0].vs,
	        fragmentShader: gb.in.loadMgr.shaders[0].fs,
	        transparent: true
	      });
	
	      this.plane = new THREE.Mesh(geometry, material);
	      this.plane.scale.x = this.plane.scale.y = 2000.0;
	
	      // plane02
	
	      var w = textures[1].image.width / textures[1].image.width;
	      var h = textures[1].image.height / textures[1].image.width;
	
	      var geometry = new THREE.PlaneGeometry(w, h, 1, 1);
	      var material = new THREE.ShaderMaterial({
	        uniforms: gb.in.loadMgr.shaders[1].uniforms,
	        vertexShader: gb.in.loadMgr.shaders[1].vs,
	        fragmentShader: gb.in.loadMgr.shaders[1].fs,
	        transparent: true
	      });
	
	      this.plane02 = new THREE.Mesh(geometry, material);
	      this.plane02.scale.x = this.plane02.scale.y = 600.0;
	
	      gb.in.loadMgr.shaders[0].uniforms.opacity.value = 1;
	      gb.in.loadMgr.shaders[1].uniforms.opacity.value = 0;
	
	      this.plane02.position.z = -1;
	
	      gb.in.scene.scene.add(this.plane);
	      gb.in.scene.scene.add(this.plane02);
	
	      // this.onResize();
	      // this.setEvents();
	
	      // テクスチャをuniform変数に追加
	      gb.in.loadMgr.shaders[0].uniforms.texture.value = textures[0];
	      gb.in.loadMgr.shaders[0].uniforms.texture01.value = textures[1];
	
	      gb.in.loadMgr.shaders[1].uniforms.texture.value = textures[1];
	      gb.in.loadMgr.shaders[1].uniforms.texture01.value = textures[1];
	
	      cb();
	    }
	  }, {
	    key: 'setVideoSize',
	    value: function setVideoSize() {
	
	      // videoのセットサイズ          
	      // this.lb = new gb.LayoutBackground($('body'),$(this.video.video));
	      // this.setEvents();
	
	    }
	  }, {
	    key: 'setTransparent',
	    value: function setTransparent(val) {
	
	      // this.plane.material.opacity = val;
	
	    }
	  }, {
	    key: 'tweenTransparent',
	    value: function tweenTransparent(time, val) {
	
	      // var t = time || 1.0;
	      // var v = val.target || 1.0;
	      // var e = val.ease || Power2.easeOut;
	
	      // TweenMax.to(this.plane.material, t, {
	      //   opacity: v,
	      //   ease : e,
	      // });
	
	    }
	  }, {
	    key: 'update',
	    value: function update() {}
	  }, {
	    key: 'onResize',
	    value: function onResize() {
	
	      // var w = window.innerWidth;
	      // var h = window.innerHeight;
	
	      // var rateW = window.innerHeight / window.innerWidth;
	      // var r = w/h;
	
	      // if (rateW < this.rate) {
	
	      //   this.plane.scale.set(r*0.58,r*0.58,r*0.58)
	
	      // } else {
	
	      //   // log(2,scaleY);
	
	      //   this.plane.scale.set(1,1,1);
	
	      // }
	
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	
	      // gb.in.rm.total += 1; // load数のtotalを計算
	      $(window).on('onSection04ProductImg', this.create.bind(this, function () {
	        //gb.in.rm.completed++;
	      }));
	    }
	  }]);
	
	  return Plane;
	}();
	
	exports.default = Plane;

/***/ },
/* 42 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//--------------------------------------------------
	//
	//  Param
	//
	//--------------------------------------------------
	
	var Param = function () {
	  function Param() {
	    _classCallCheck(this, Param);
	
	    this.gui;
	    this.json = {};
	    // this.appName = "plusMV";
	
	    var isFlag = true;
	
	    this.clock = {
	      progress: 0.5
	    };
	
	    this.zoomblur = {
	      strength: 46.0,
	      size: 89.0
	    };
	
	    this.transition = {
	      progress: 0.0,
	      size: 0.04,
	      zoom: 30,
	      colorSeparation: 0.3,
	      strength: 0.6,
	      tween: function tween() {
	
	        var val;
	        if (isFlag) val = 1.0;else val = 0.0;
	
	        isFlag = !isFlag;
	
	        TweenMax.to(gb.in.plane02.shader.uniforms.progress, 2.5, {
	          value: val,
	          ease: Power4.easeOut
	        });
	      }
	    };
	
	    this.setupData();
	    this.setup();
	  }
	
	  _createClass(Param, [{
	    key: 'setupData',
	    value: function setupData() {}
	  }, {
	    key: 'setup',
	    value: function setup() {
	
	      // if (gb.in.conf.PARAM) {
	
	      this.gui = new dat.GUI();
	      // this.gui = new dat.GUI({load: this.json});
	      this.gui.remember(this);
	      $(".dg").css({ zIndex: 99999 });
	
	      var f1 = this.gui.addFolder('zoomblur');
	      f1.add(this.zoomblur, 'strength', 0.0, 2.0).step(0.01).listen().onChange(function (val) {
	
	        gb.in.plane.shaders[2].uniforms.strength.value = val;
	        log(val);
	      });
	      f1.add(this.zoomblur, 'size', 0.0, 100.0).step(0.1).listen().onChange(function (val) {
	
	        gb.in.plane.shader.uniforms.nFrag.value = 1 / val;
	      });
	      f1.open();
	
	      // this.gui.close();
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {}
	  }]);
	
	  return Param;
	}();
	
	exports.default = Param;

/***/ },
/* 43 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//--------------------------------------------------
	//
	//  Profiler
	//
	//--------------------------------------------------
	
	var Profiler = function () {
	  function Profiler() {
	    _classCallCheck(this, Profiler);
	
	    this.Stats;
	    this.setup();
	    this.setEvents();
	  }
	
	  _createClass(Profiler, [{
	    key: "setup",
	    value: function setup() {
	
	      // if (gb.in.conf.STATS) {
	
	      this.Stats = new Stats();
	      this.Stats.domElement.style.position = "fixed";
	      this.Stats.domElement.style.left = "0px";
	      this.Stats.domElement.style.top = "0px";
	      document.body.appendChild(this.Stats.domElement);
	
	      // };
	    }
	  }, {
	    key: "update",
	    value: function update() {
	
	      if (this.Stats) {
	        this.Stats.update();
	      }
	    }
	  }, {
	    key: "setEvents",
	    value: function setEvents() {
	
	      gb.in.up.add('profiler', this.update.bind(this));
	    }
	  }]);
	
	  return Profiler;
	}();
	
	exports.default = Profiler;

/***/ },
/* 44 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//--------------------------------------------------
	//
	//  Layout
	//
	//--------------------------------------------------
	var Scale = function () {
	  function Scale() {
	    _classCallCheck(this, Scale);
	
	    this.SPBaseW = 375;
	    this.PCBaseW = 1300;
	
	    this.rate = 1;
	    this.W = window.innerWidth;
	
	    this.$targetList = [{
	      '$target': $('#sideL, #sideR, #nav'),
	      'scale': 'spOnly' // spOnly pcOnly both
	    }];
	
	    this.run();
	    this.setup();
	    this.setEvents();
	  }
	
	  _createClass(Scale, [{
	    key: 'setup',
	    value: function setup() {}
	  }, {
	    key: 'run',
	    value: function run() {
	
	      this.W = $(window).width();
	      this.iW = window.innerWidth;
	
	      this.scale();
	      this.wrap();
	    }
	
	    // 拡大
	
	  }, {
	    key: 'scale',
	    value: function scale() {
	      var _this = this;
	
	      // bpの場合のscale
	      if (this.iW <= gb.in.conf.bp) {
	
	        // widthからrateを計算
	        // this.rate = gb.in.u.floatFormat(this.W / this.SPBaseW , 2);
	        if (this.W > 375) this.W = 375;
	        if (this.W < 320) this.W = 320;
	        log(this.W);
	        this.rate = this.W / this.SPBaseW;
	
	        // scaleするリストをループ
	        $.each(this.$targetList, function (index, val) {
	
	          if (val.scale == 'both' || val.scale == 'spOnly') {
	
	            TweenMax.set(val.$target, {
	              scale: _this.rate
	            });
	          };
	        });
	      } else {
	
	        // widthからrateを計算
	        // this.rate = gb.in.u.floatFormat(this.W / this.PCBaseW , 2);
	        if (this.W > 1300) this.W = 1300;
	        this.rate = this.W / this.PCBaseW;
	
	        // scaleするリストをループ
	        $.each(this.$targetList, function (index, val) {
	
	          if (val.scale == 'both' || val.scale == 'pcOnly') {
	
	            TweenMax.set(val.$target, {
	              scale: _this.rate
	            });
	          };
	
	          // こちらの場合は、scaleを戻す
	          if (val.scale == 'spOnly') {
	
	            TweenMax.set(val.$target, {
	              scale: 1
	            });
	          };
	        });
	      }
	    }
	
	    // scaleしたら、元の大きさ分余白ができるのでoverflow hiddenで消す
	
	  }, {
	    key: 'wrap',
	    value: function wrap() {}
	  }, {
	    key: 'reset',
	    value: function reset() {
	
	      $.each(this.$targetList, function (index, val) {
	
	        TweenMax.set(val.$target, {
	          scale: 1,
	          'transform-origin': '0 0',
	          '-webkit-transform-origin': '0 0'
	        });
	      });
	
	      // イベント解除
	      gb.in.r.remove('scaleTop');
	    }
	  }, {
	    key: 'onResize',
	    value: function onResize() {
	
	      this.run();
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	
	      gb.in.r.add('scaleTop', this.onResize.bind(this));
	    }
	  }]);
	
	  return Scale;
	}();
	
	exports.default = Scale;

/***/ },
/* 45 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//--------------------------------------------------
	//
	//  HoverEffectSNSSPFooter
	//
	//--------------------------------------------------
	
	var HoverEffectSNSSPFooter = function () {
	  function HoverEffectSNSSPFooter($wrap, $target) {
	    _classCallCheck(this, HoverEffectSNSSPFooter);
	
	    this.$wrap = $wrap;
	    this.$inner = this.$wrap.find('.inner');
	    this.$target = this.$wrap.find('.sns.sp .iconShare');
	    this.$bar = this.$wrap.find('.sns.sp .bar');
	    this.$list = this.$wrap.find('.sns.sp .list');
	    this.$item = this.$wrap.find('.sns.sp .list .item');
	
	    // motion
	    this.tl = new TimelineMax();
	
	    this.setEvents();
	  }
	
	  _createClass(HoverEffectSNSSPFooter, [{
	    key: 'setup',
	    value: function setup() {}
	  }, {
	    key: 'ready',
	    value: function ready() {
	
	      // ox
	      TweenMax.set(this.$wrap, { width: 0 });
	
	      // bar
	      TweenMax.set(this.$bar, { width: 0 });
	
	      // sns
	      TweenMax.set(this.$item, { x: -40, opacity: 0 });
	
	      this.$bar.show();
	      this.$list.show();
	    }
	  }, {
	    key: 'toggle',
	    value: function toggle() {
	
	      if (this.$target.hasClass('on')) {
	        this.isOpen = false;
	
	        this.close();
	      } else {
	        this.isOpen = true;
	
	        this.open();
	      };
	
	      this.$target.toggleClass('on');
	    }
	  }, {
	    key: 'open',
	    value: function open(that) {
	
	      TweenMax.killTweensOf(this.$box);
	      TweenMax.killTweensOf(this.$bar);
	      TweenMax.killTweensOf(this.$item);
	
	      this.ready();
	
	      // barが伸びる
	
	      var tl = new TimelineMax();
	
	      tl
	      // boxが伸びる
	      .to(this.$wrap, 0.4, {
	        width: 330,
	        ease: Power3.easeOut
	      }).to(this.$bar, 0.3, {
	        width: 30,
	        ease: Power3.easeOut
	      }, '-=0.2').to(this.$item.eq(0), 0.3, {
	        x: 0,
	        opacity: 1,
	        ease: Power4.easeOut
	      }, '-=0.2').to(this.$item.eq(1), 0.3, {
	        x: 0,
	        opacity: 1,
	        ease: Power4.easeOut
	      }, '-=0.25').to(this.$item.eq(2), 0.3, {
	        x: 0,
	        opacity: 1,
	        ease: Power4.easeOut
	      }, '-=0.25').to(this.$item.eq(3), 0.3, {
	        x: 0,
	        opacity: 1,
	        ease: Power4.easeOut
	      }, '-=0.25');
	    }
	  }, {
	    key: 'close',
	    value: function close(that) {
	      var _this = this;
	
	      TweenMax.killTweensOf(this.$box);
	      TweenMax.killTweensOf(this.$bar);
	      TweenMax.killTweensOf(this.$item);
	
	      // bar
	      var tl = new TimelineMax();
	
	      tl.to(this.$item.eq(3), 0.3, {
	        x: -40,
	        opacity: 0,
	        ease: Power4.easeOut
	      }).to(this.$item.eq(2), 0.3, {
	        x: -40,
	        opacity: 0,
	        ease: Power4.easeOut
	      }, '-=0.25').to(this.$item.eq(1), 0.3, {
	        x: -40,
	        opacity: 0,
	        ease: Power4.easeOut
	      }, '-=0.25').to(this.$item.eq(0), 0.3, {
	        x: -40,
	        opacity: 0,
	        ease: Power4.easeOut,
	        onComplete: function onComplete() {
	          _this.$list.hide();
	        }
	      }, '-=0.25').to(this.$bar, 0.2, {
	        width: 0,
	        ease: Power2.easeOut,
	        onComplete: function onComplete() {
	          _this.$bar.hide();
	        }
	      }, '-=0.3').to(this.$wrap, 0.3, {
	        width: 0,
	        ease: Power3.easeOut
	      }, '-=0.3');
	    }
	  }, {
	    key: 'reset',
	    value: function reset() {
	
	      this.close();
	      this.$target.off('click');
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	
	      var self = this;
	
	      this.$target.on('click', this.toggle.bind(this));
	    }
	  }]);
	
	  return HoverEffectSNSSPFooter;
	}();
	
	exports.default = HoverEffectSNSSPFooter;

/***/ },
/* 46 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//--------------------------------------------------
	//
	//  HoverEffectSVGArrowTop
	//
	//--------------------------------------------------
	
	var HoverEffectSVGArrowTop = function () {
	  function HoverEffectSVGArrowTop($target) {
	    _classCallCheck(this, HoverEffectSVGArrowTop);
	
	    this.$target = $target;
	
	    // motion
	    this.tl = new TimelineMax();
	
	    this.setup();
	
	    this.isHover = false;
	
	    // スマホのときは処理しない
	    if (gb.in.u.isPC) this.setEvents();
	  }
	
	  _createClass(HoverEffectSVGArrowTop, [{
	    key: 'setup',
	    value: function setup() {}
	  }, {
	    key: 'run',
	    value: function run() {}
	  }, {
	    key: 'onEnter',
	    value: function onEnter(that) {
	
	      if (this.autoTL) {
	        this.autoTL.kill();
	        this.autoTL = null;
	      }
	      if (this.tl02) this.tl02.kill();
	      this.tl01 = new TimelineMax();
	
	      this.tl01
	      // 矢印を下に下げる
	      .to($(that).find('.arrow.pc'), 0.4, {
	        scaleY: 0.65,
	        y: 8,
	        opacity: 1,
	        z: 1,
	        'transform-origin': '50% 100%',
	        ease: Power4.easeOut
	      })
	      // 文字を下に下げる
	      .to($(that).find('.text'), 0.4, {
	        y: 30,
	        opacity: 1,
	        z: 1,
	        ease: Power4.easeOut
	      }, '-=0.37');
	    }
	  }, {
	    key: 'onLeave',
	    value: function onLeave(that) {
	      var _this = this;
	
	      if (this.tl01) this.tl01.kill();
	      this.tl02 = new TimelineMax();
	
	      this.tl02
	      // 文字を下に下げる
	      .to($(that).find('.text'), 0.5, {
	        y: 0,
	        z: 1,
	        ease: Power2.easeInOut
	      })
	      // 矢印を下に下げる
	      .to($(that).find('.arrow.pc'), 0.5, {
	        scaleY: 1,
	        y: 0,
	        z: 1,
	        'transform-origin': '50% 100%',
	        ease: Power2.easeInOut,
	        onComplete: function onComplete() {
	
	          if (_this.autoTL == null) _this.autoArrow();
	        }
	      }, '-=0.45');
	    }
	  }, {
	    key: 'autoArrow',
	    value: function autoArrow() {
	
	      this.autoTL = new TimelineMax({ repeat: -1 });
	
	      this.autoTL.to(this.$target.find('.arrow.pc'), 0.6, {
	        y: 60,
	        opacity: 0,
	        delay: 5.0,
	        scaleY: 0.3,
	        'transform-origin': '50% 100%',
	        ease: Power4.easeOut
	      }).set(this.$target.find('.arrow.pc'), { scaleY: 1, y: -60 }).to(this.$target.find('.arrow.pc'), 0.5, {
	        scaleY: 1,
	        y: 0,
	        opacity: 1,
	        delay: 0.3,
	        'transform-origin': '50% 100%',
	        ease: Power4.easeOut
	      });
	    }
	  }, {
	    key: 'setupFirst',
	    value: function setupFirst() {
	
	      TweenMax.set($('.section01 .next .text'), { y: -60, opacity: 0, z: 1 });
	      TweenMax.set($('.section01 .next svg'), { y: -30, opacity: 0, z: 1 });
	    }
	  }, {
	    key: 'runFirst',
	    value: function runFirst() {
	
	      var tl = new TimelineMax();
	
	      // 文字を下に下げる
	      tl.to($('.section01 .next .text'), 1.5, {
	        y: 0,
	        opacity: 1,
	        z: 1,
	        ease: Power2.easeOut
	      }).to($('.section01 .next svg'), 1.0, {
	        y: 0,
	        opacity: 1,
	        z: 1,
	        ease: Power2.easeOut
	      }, '-=0.82');
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	
	      var self = this;
	
	      this.$target.each(function (index, el) {
	
	        $(this).on('mouseenter', function (e) {
	          self.onEnter.call(self, this);
	        });
	        $(this).on('mouseleave', function (e) {
	          self.onLeave.call(self, this);
	        });
	      });
	    }
	  }]);
	
	  return HoverEffectSVGArrowTop;
	}();
	
	exports.default = HoverEffectSVGArrowTop;

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _Entry2 = __webpack_require__(48);
	
	var _Entry3 = _interopRequireDefault(_Entry2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * fileOverview:
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Project:
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * File: Canvas
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Date:
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Author:
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
	
	// import Camera from './Utils/Camera.js';
	
	'use strict';
	
	var Canvas = function (_Entry) {
	  _inherits(Canvas, _Entry);
	
	  function Canvas() {
	    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	    _classCallCheck(this, Canvas);
	
	    var _this = _possibleConstructorReturn(this, (Canvas.__proto__ || Object.getPrototypeOf(Canvas)).call(this));
	
	    _this.width = window.innerWidth;
	    _this.height = window.innerHeight;
	    _this.output = opts.output || document.createElement('div');
	
	    _this.camera = null;
	    _this.renderer = null;
	    _this.scene = null;
	    _this.cube = null;
	
	    _this.createCamera = _this._createCamera.bind(_this);
	    _this.createRenderer = _this._createRenderer.bind(_this);
	    _this.createScene = _this._createScene.bind(_this);
	    _this.createObject = _this._createObject.bind(_this);
	
	    _this.onResize = _this._onResize.bind(_this);
	
	    _this.Update = _this._Update.bind(_this);
	
	    return _this;
	  }
	
	  /**
	   * 初期化
	   */
	
	
	  _createClass(Canvas, [{
	    key: 'init',
	    value: function init() {
	      var _this2 = this;
	
	      this.createCamera();
	      this.createRenderer();
	      this.createScene();
	
	      this.createObject();
	
	      this.Update();
	
	      window.addEventListener('resize', function () {
	        _this2.onResize();
	      }, false);
	    }
	
	    /**
	     * カメラ作成
	     */
	
	  }, {
	    key: '_createCamera',
	    value: function _createCamera() {
	
	      // gb.in.camera = this.camera = new Camera(45, 1, 1, 20000);
	      // this.camera = new THREE.PerspectiveCamera(45, 1, 1, 20000);
	
	      this.camera = new THREE.PerspectiveCamera(35, this.width / this.height, 10, 1000);
	      this.camera.position.set(0, 0, 300);
	      // this.camera.lookAt( this.scene.position );
	    }
	
	    /**
	     * レンダラー作成
	     */
	
	  }, {
	    key: '_createRenderer',
	    value: function _createRenderer() {
	
	      this.renderer = new THREE.WebGLRenderer({
	        alpha: false,
	        antialias: false,
	        stencil: false,
	        depth: true,
	        premultipliedAlpha: false
	      });
	
	      this.renderer.setClearColor(0xffffff);
	      this.renderer.setPixelRatio(window.devicePixelRatio || 1);
	      this.renderer.setSize(this.width, this.height);
	      this.output.appendChild(this.renderer.domElement);
	    }
	
	    /**
	     *　シーン作成
	     */
	
	  }, {
	    key: '_createScene',
	    value: function _createScene() {
	
	      this.scene = new THREE.Scene();
	    }
	
	    /**
	     *　Object作成
	     */
	
	  }, {
	    key: '_createObject',
	    value: function _createObject() {
	
	      var cubeGeometry = new THREE.BoxGeometry(50, 50, 50);
	      var cubeMaterial = new THREE.MeshBasicMaterial({
	        color: 0x000000,
	        wireframe: false
	      });
	
	      this.cube = new THREE.Mesh(cubeGeometry, cubeMaterial);
	      this.cube.position.x = -4;
	      this.cube.position.y = 3;
	      this.cube.position.z = 0;
	
	      this.scene.add(this.cube);
	    }
	
	    /**
	     *　更新
	     */
	
	  }, {
	    key: '_Update',
	    value: function _Update() {
	      var _this3 = this;
	
	      requestAnimationFrame(function () {
	        _this3.Update();
	      });
	      // this.controls.update();
	      this.renderer.render(this.scene, this.camera);
	    }
	
	    /**
	     *　画面リサイズ
	     */
	
	  }, {
	    key: '_onResize',
	    value: function _onResize() {
	      this.camera.aspect = window.innerWidth / window.innerHeight;
	      this.camera.updateProjectionMatrix();
	      this.renderer.setSize(window.innerWidth, window.innerHeight);
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	
	      $(window).on('load', this.onLoad.bind(this));
	    }
	  }]);
	
	  return Canvas;
	}(_Entry3.default);
	
	exports.default = Canvas;

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * fileOverview:
	 * Project:
	 * File: Entry
	 * Date:
	 * Author:
	 */
	
	window.THREE = __webpack_require__(49);
	
	'use strict';
	
	var Entry = function () {
		function Entry() {
			_classCallCheck(this, Entry);
		}
	
		/**
	  * 初期化
	  */
	
	
		_createClass(Entry, [{
			key: 'init',
			value: function init() {}
		}]);
	
		return Entry;
	}();
	
	exports.default = Entry;

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;// threejs.org/license
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var THREE = { REVISION: "73" }; true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (THREE), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : "undefined" !== typeof exports && "undefined" !== typeof module && (module.exports = THREE);
	void 0 !== self.requestAnimationFrame && void 0 !== self.cancelAnimationFrame || function () {
	  for (var a = 0, b = ["ms", "moz", "webkit", "o"], c = 0; c < b.length && !self.requestAnimationFrame; ++c) {
	    self.requestAnimationFrame = self[b[c] + "RequestAnimationFrame"], self.cancelAnimationFrame = self[b[c] + "CancelAnimationFrame"] || self[b[c] + "CancelRequestAnimationFrame"];
	  }void 0 === self.requestAnimationFrame && void 0 !== self.setTimeout && (self.requestAnimationFrame = function (b) {
	    var c = Date.now(),
	        g = Math.max(0, 16 - (c - a)),
	        f = self.setTimeout(function () {
	      b(c + g);
	    }, g);a = c + g;return f;
	  });void 0 === self.cancelAnimationFrame && void 0 !== self.clearTimeout && (self.cancelAnimationFrame = function (a) {
	    self.clearTimeout(a);
	  });
	}();void 0 === self.performance && (self.performance = {});void 0 === self.performance.now && function () {
	  var a = Date.now();self.performance.now = function () {
	    return Date.now() - a;
	  };
	}();void 0 === Number.EPSILON && (Number.EPSILON = Math.pow(2, -52));void 0 === Math.sign && (Math.sign = function (a) {
	  return 0 > a ? -1 : 0 < a ? 1 : +a;
	});
	void 0 === Function.prototype.name && void 0 !== Object.defineProperty && Object.defineProperty(Function.prototype, "name", { get: function get() {
	    return this.toString().match(/^\s*function\s*(\S*)\s*\(/)[1];
	  } });THREE.MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };THREE.CullFaceNone = 0;THREE.CullFaceBack = 1;THREE.CullFaceFront = 2;THREE.CullFaceFrontBack = 3;THREE.FrontFaceDirectionCW = 0;THREE.FrontFaceDirectionCCW = 1;THREE.BasicShadowMap = 0;THREE.PCFShadowMap = 1;THREE.PCFSoftShadowMap = 2;THREE.FrontSide = 0;THREE.BackSide = 1;
	THREE.DoubleSide = 2;THREE.FlatShading = 1;THREE.SmoothShading = 2;THREE.NoColors = 0;THREE.FaceColors = 1;THREE.VertexColors = 2;THREE.NoBlending = 0;THREE.NormalBlending = 1;THREE.AdditiveBlending = 2;THREE.SubtractiveBlending = 3;THREE.MultiplyBlending = 4;THREE.CustomBlending = 5;THREE.AddEquation = 100;THREE.SubtractEquation = 101;THREE.ReverseSubtractEquation = 102;THREE.MinEquation = 103;THREE.MaxEquation = 104;THREE.ZeroFactor = 200;THREE.OneFactor = 201;THREE.SrcColorFactor = 202;THREE.OneMinusSrcColorFactor = 203;
	THREE.SrcAlphaFactor = 204;THREE.OneMinusSrcAlphaFactor = 205;THREE.DstAlphaFactor = 206;THREE.OneMinusDstAlphaFactor = 207;THREE.DstColorFactor = 208;THREE.OneMinusDstColorFactor = 209;THREE.SrcAlphaSaturateFactor = 210;THREE.NeverDepth = 0;THREE.AlwaysDepth = 1;THREE.LessDepth = 2;THREE.LessEqualDepth = 3;THREE.EqualDepth = 4;THREE.GreaterEqualDepth = 5;THREE.GreaterDepth = 6;THREE.NotEqualDepth = 7;THREE.MultiplyOperation = 0;THREE.MixOperation = 1;THREE.AddOperation = 2;THREE.UVMapping = 300;THREE.CubeReflectionMapping = 301;
	THREE.CubeRefractionMapping = 302;THREE.EquirectangularReflectionMapping = 303;THREE.EquirectangularRefractionMapping = 304;THREE.SphericalReflectionMapping = 305;THREE.RepeatWrapping = 1E3;THREE.ClampToEdgeWrapping = 1001;THREE.MirroredRepeatWrapping = 1002;THREE.NearestFilter = 1003;THREE.NearestMipMapNearestFilter = 1004;THREE.NearestMipMapLinearFilter = 1005;THREE.LinearFilter = 1006;THREE.LinearMipMapNearestFilter = 1007;THREE.LinearMipMapLinearFilter = 1008;THREE.UnsignedByteType = 1009;THREE.ByteType = 1010;
	THREE.ShortType = 1011;THREE.UnsignedShortType = 1012;THREE.IntType = 1013;THREE.UnsignedIntType = 1014;THREE.FloatType = 1015;THREE.HalfFloatType = 1025;THREE.UnsignedShort4444Type = 1016;THREE.UnsignedShort5551Type = 1017;THREE.UnsignedShort565Type = 1018;THREE.AlphaFormat = 1019;THREE.RGBFormat = 1020;THREE.RGBAFormat = 1021;THREE.LuminanceFormat = 1022;THREE.LuminanceAlphaFormat = 1023;THREE.RGBEFormat = THREE.RGBAFormat;THREE.RGB_S3TC_DXT1_Format = 2001;THREE.RGBA_S3TC_DXT1_Format = 2002;THREE.RGBA_S3TC_DXT3_Format = 2003;
	THREE.RGBA_S3TC_DXT5_Format = 2004;THREE.RGB_PVRTC_4BPPV1_Format = 2100;THREE.RGB_PVRTC_2BPPV1_Format = 2101;THREE.RGBA_PVRTC_4BPPV1_Format = 2102;THREE.RGBA_PVRTC_2BPPV1_Format = 2103;THREE.LoopOnce = 2200;THREE.LoopRepeat = 2201;THREE.LoopPingPong = 2202;
	THREE.Projector = function () {
	  console.error("THREE.Projector has been moved to /examples/js/renderers/Projector.js.");this.projectVector = function (a, b) {
	    console.warn("THREE.Projector: .projectVector() is now vector.project().");a.project(b);
	  };this.unprojectVector = function (a, b) {
	    console.warn("THREE.Projector: .unprojectVector() is now vector.unproject().");a.unproject(b);
	  };this.pickingRay = function (a, b) {
	    console.error("THREE.Projector: .pickingRay() is now raycaster.setFromCamera().");
	  };
	};
	THREE.CanvasRenderer = function () {
	  console.error("THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js");this.domElement = document.createElement("canvas");this.clear = function () {};this.render = function () {};this.setClearColor = function () {};this.setSize = function () {};
	};THREE.Color = function (a) {
	  return 3 === arguments.length ? this.fromArray(arguments) : this.set(a);
	};
	THREE.Color.prototype = { constructor: THREE.Color, r: 1, g: 1, b: 1, set: function set(a) {
	    a instanceof THREE.Color ? this.copy(a) : "number" === typeof a ? this.setHex(a) : "string" === typeof a && this.setStyle(a);return this;
	  }, setHex: function setHex(a) {
	    a = Math.floor(a);this.r = (a >> 16 & 255) / 255;this.g = (a >> 8 & 255) / 255;this.b = (a & 255) / 255;return this;
	  }, setRGB: function setRGB(a, b, c) {
	    this.r = a;this.g = b;this.b = c;return this;
	  }, setHSL: function () {
	    function a(a, c, d) {
	      0 > d && (d += 1);1 < d && (d -= 1);return d < 1 / 6 ? a + 6 * (c - a) * d : .5 > d ? c : d < 2 / 3 ? a + 6 * (c - a) * (2 / 3 - d) : a;
	    }return function (b, c, d) {
	      b = THREE.Math.euclideanModulo(b, 1);c = THREE.Math.clamp(c, 0, 1);d = THREE.Math.clamp(d, 0, 1);0 === c ? this.r = this.g = this.b = d : (c = .5 >= d ? d * (1 + c) : d + c - d * c, d = 2 * d - c, this.r = a(d, c, b + 1 / 3), this.g = a(d, c, b), this.b = a(d, c, b - 1 / 3));return this;
	    };
	  }(), setStyle: function setStyle(a) {
	    function b(b) {
	      void 0 !== b && 1 > parseFloat(b) && console.warn("THREE.Color: Alpha component of " + a + " will be ignored.");
	    }var c;if (c = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(a)) {
	      var d = c[2];switch (c[1]) {case "rgb":case "rgba":
	          if (c = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(d)) return this.r = Math.min(255, parseInt(c[1], 10)) / 255, this.g = Math.min(255, parseInt(c[2], 10)) / 255, this.b = Math.min(255, parseInt(c[3], 10)) / 255, b(c[5]), this;if (c = /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(d)) return this.r = Math.min(100, parseInt(c[1], 10)) / 100, this.g = Math.min(100, parseInt(c[2], 10)) / 100, this.b = Math.min(100, parseInt(c[3], 10)) / 100, b(c[5]), this;break;case "hsl":case "hsla":
	          if (c = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(d)) {
	            var d = parseFloat(c[1]) / 360,
	                e = parseInt(c[2], 10) / 100,
	                g = parseInt(c[3], 10) / 100;b(c[5]);return this.setHSL(d, e, g);
	          }}
	    } else if (c = /^\#([A-Fa-f0-9]+)$/.exec(a)) {
	      c = c[1];d = c.length;if (3 === d) return this.r = parseInt(c.charAt(0) + c.charAt(0), 16) / 255, this.g = parseInt(c.charAt(1) + c.charAt(1), 16) / 255, this.b = parseInt(c.charAt(2) + c.charAt(2), 16) / 255, this;if (6 === d) return this.r = parseInt(c.charAt(0) + c.charAt(1), 16) / 255, this.g = parseInt(c.charAt(2) + c.charAt(3), 16) / 255, this.b = parseInt(c.charAt(4) + c.charAt(5), 16) / 255, this;
	    }a && 0 < a.length && (c = THREE.ColorKeywords[a], void 0 !== c ? this.setHex(c) : console.warn("THREE.Color: Unknown color " + a));return this;
	  }, clone: function clone() {
	    return new this.constructor(this.r, this.g, this.b);
	  }, copy: function copy(a) {
	    this.r = a.r;this.g = a.g;this.b = a.b;return this;
	  }, copyGammaToLinear: function copyGammaToLinear(a, b) {
	    void 0 === b && (b = 2);this.r = Math.pow(a.r, b);this.g = Math.pow(a.g, b);this.b = Math.pow(a.b, b);return this;
	  }, copyLinearToGamma: function copyLinearToGamma(a, b) {
	    void 0 === b && (b = 2);var c = 0 < b ? 1 / b : 1;this.r = Math.pow(a.r, c);this.g = Math.pow(a.g, c);this.b = Math.pow(a.b, c);return this;
	  }, convertGammaToLinear: function convertGammaToLinear() {
	    var a = this.r,
	        b = this.g,
	        c = this.b;this.r = a * a;this.g = b * b;this.b = c * c;return this;
	  }, convertLinearToGamma: function convertLinearToGamma() {
	    this.r = Math.sqrt(this.r);this.g = Math.sqrt(this.g);this.b = Math.sqrt(this.b);return this;
	  }, getHex: function getHex() {
	    return 255 * this.r << 16 ^ 255 * this.g << 8 ^ 255 * this.b << 0;
	  }, getHexString: function getHexString() {
	    return ("000000" + this.getHex().toString(16)).slice(-6);
	  }, getHSL: function getHSL(a) {
	    a = a || { h: 0, s: 0, l: 0 };var b = this.r,
	        c = this.g,
	        d = this.b,
	        e = Math.max(b, c, d),
	        g = Math.min(b, c, d),
	        f,
	        h = (g + e) / 2;if (g === e) g = f = 0;else {
	      var l = e - g,
	          g = .5 >= h ? l / (e + g) : l / (2 - e - g);switch (e) {case b:
	          f = (c - d) / l + (c < d ? 6 : 0);break;case c:
	          f = (d - b) / l + 2;break;case d:
	          f = (b - c) / l + 4;}f /= 6;
	    }a.h = f;a.s = g;a.l = h;return a;
	  }, getStyle: function getStyle() {
	    return "rgb(" + (255 * this.r | 0) + "," + (255 * this.g | 0) + "," + (255 * this.b | 0) + ")";
	  }, offsetHSL: function offsetHSL(a, b, c) {
	    var d = this.getHSL();d.h += a;d.s += b;d.l += c;this.setHSL(d.h, d.s, d.l);return this;
	  }, add: function add(a) {
	    this.r += a.r;this.g += a.g;this.b += a.b;return this;
	  }, addColors: function addColors(a, b) {
	    this.r = a.r + b.r;this.g = a.g + b.g;this.b = a.b + b.b;return this;
	  }, addScalar: function addScalar(a) {
	    this.r += a;this.g += a;this.b += a;return this;
	  }, multiply: function multiply(a) {
	    this.r *= a.r;this.g *= a.g;this.b *= a.b;return this;
	  }, multiplyScalar: function multiplyScalar(a) {
	    this.r *= a;this.g *= a;this.b *= a;return this;
	  }, lerp: function lerp(a, b) {
	    this.r += (a.r - this.r) * b;this.g += (a.g - this.g) * b;this.b += (a.b - this.b) * b;return this;
	  }, equals: function equals(a) {
	    return a.r === this.r && a.g === this.g && a.b === this.b;
	  }, fromArray: function fromArray(a, b) {
	    void 0 === b && (b = 0);this.r = a[b];this.g = a[b + 1];this.b = a[b + 2];return this;
	  }, toArray: function toArray(a, b) {
	    void 0 === a && (a = []);void 0 === b && (b = 0);a[b] = this.r;a[b + 1] = this.g;a[b + 2] = this.b;return a;
	  } };
	THREE.ColorKeywords = { aliceblue: 15792383, antiquewhite: 16444375, aqua: 65535, aquamarine: 8388564, azure: 15794175, beige: 16119260, bisque: 16770244, black: 0, blanchedalmond: 16772045, blue: 255, blueviolet: 9055202, brown: 10824234, burlywood: 14596231, cadetblue: 6266528, chartreuse: 8388352, chocolate: 13789470, coral: 16744272, cornflowerblue: 6591981, cornsilk: 16775388, crimson: 14423100, cyan: 65535, darkblue: 139, darkcyan: 35723, darkgoldenrod: 12092939, darkgray: 11119017, darkgreen: 25600, darkgrey: 11119017, darkkhaki: 12433259, darkmagenta: 9109643,
	  darkolivegreen: 5597999, darkorange: 16747520, darkorchid: 10040012, darkred: 9109504, darksalmon: 15308410, darkseagreen: 9419919, darkslateblue: 4734347, darkslategray: 3100495, darkslategrey: 3100495, darkturquoise: 52945, darkviolet: 9699539, deeppink: 16716947, deepskyblue: 49151, dimgray: 6908265, dimgrey: 6908265, dodgerblue: 2003199, firebrick: 11674146, floralwhite: 16775920, forestgreen: 2263842, fuchsia: 16711935, gainsboro: 14474460, ghostwhite: 16316671, gold: 16766720, goldenrod: 14329120, gray: 8421504, green: 32768, greenyellow: 11403055,
	  grey: 8421504, honeydew: 15794160, hotpink: 16738740, indianred: 13458524, indigo: 4915330, ivory: 16777200, khaki: 15787660, lavender: 15132410, lavenderblush: 16773365, lawngreen: 8190976, lemonchiffon: 16775885, lightblue: 11393254, lightcoral: 15761536, lightcyan: 14745599, lightgoldenrodyellow: 16448210, lightgray: 13882323, lightgreen: 9498256, lightgrey: 13882323, lightpink: 16758465, lightsalmon: 16752762, lightseagreen: 2142890, lightskyblue: 8900346, lightslategray: 7833753, lightslategrey: 7833753, lightsteelblue: 11584734, lightyellow: 16777184,
	  lime: 65280, limegreen: 3329330, linen: 16445670, magenta: 16711935, maroon: 8388608, mediumaquamarine: 6737322, mediumblue: 205, mediumorchid: 12211667, mediumpurple: 9662683, mediumseagreen: 3978097, mediumslateblue: 8087790, mediumspringgreen: 64154, mediumturquoise: 4772300, mediumvioletred: 13047173, midnightblue: 1644912, mintcream: 16121850, mistyrose: 16770273, moccasin: 16770229, navajowhite: 16768685, navy: 128, oldlace: 16643558, olive: 8421376, olivedrab: 7048739, orange: 16753920, orangered: 16729344, orchid: 14315734, palegoldenrod: 15657130,
	  palegreen: 10025880, paleturquoise: 11529966, palevioletred: 14381203, papayawhip: 16773077, peachpuff: 16767673, peru: 13468991, pink: 16761035, plum: 14524637, powderblue: 11591910, purple: 8388736, red: 16711680, rosybrown: 12357519, royalblue: 4286945, saddlebrown: 9127187, salmon: 16416882, sandybrown: 16032864, seagreen: 3050327, seashell: 16774638, sienna: 10506797, silver: 12632256, skyblue: 8900331, slateblue: 6970061, slategray: 7372944, slategrey: 7372944, snow: 16775930, springgreen: 65407, steelblue: 4620980, tan: 13808780, teal: 32896, thistle: 14204888,
	  tomato: 16737095, turquoise: 4251856, violet: 15631086, wheat: 16113331, white: 16777215, whitesmoke: 16119285, yellow: 16776960, yellowgreen: 10145074 };THREE.Quaternion = function (a, b, c, d) {
	  this._x = a || 0;this._y = b || 0;this._z = c || 0;this._w = void 0 !== d ? d : 1;
	};
	THREE.Quaternion.prototype = { constructor: THREE.Quaternion, get x() {
	    return this._x;
	  }, set x(a) {
	    this._x = a;this.onChangeCallback();
	  }, get y() {
	    return this._y;
	  }, set y(a) {
	    this._y = a;this.onChangeCallback();
	  }, get z() {
	    return this._z;
	  }, set z(a) {
	    this._z = a;this.onChangeCallback();
	  }, get w() {
	    return this._w;
	  }, set w(a) {
	    this._w = a;this.onChangeCallback();
	  }, set: function set(a, b, c, d) {
	    this._x = a;this._y = b;this._z = c;this._w = d;this.onChangeCallback();return this;
	  }, clone: function clone() {
	    return new this.constructor(this._x, this._y, this._z, this._w);
	  },
	  copy: function copy(a) {
	    this._x = a.x;this._y = a.y;this._z = a.z;this._w = a.w;this.onChangeCallback();return this;
	  }, setFromEuler: function setFromEuler(a, b) {
	    if (!1 === a instanceof THREE.Euler) throw Error("THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.");var c = Math.cos(a._x / 2),
	        d = Math.cos(a._y / 2),
	        e = Math.cos(a._z / 2),
	        g = Math.sin(a._x / 2),
	        f = Math.sin(a._y / 2),
	        h = Math.sin(a._z / 2),
	        l = a.order;"XYZ" === l ? (this._x = g * d * e + c * f * h, this._y = c * f * e - g * d * h, this._z = c * d * h + g * f * e, this._w = c * d * e - g * f * h) : "YXZ" === l ? (this._x = g * d * e + c * f * h, this._y = c * f * e - g * d * h, this._z = c * d * h - g * f * e, this._w = c * d * e + g * f * h) : "ZXY" === l ? (this._x = g * d * e - c * f * h, this._y = c * f * e + g * d * h, this._z = c * d * h + g * f * e, this._w = c * d * e - g * f * h) : "ZYX" === l ? (this._x = g * d * e - c * f * h, this._y = c * f * e + g * d * h, this._z = c * d * h - g * f * e, this._w = c * d * e + g * f * h) : "YZX" === l ? (this._x = g * d * e + c * f * h, this._y = c * f * e + g * d * h, this._z = c * d * h - g * f * e, this._w = c * d * e - g * f * h) : "XZY" === l && (this._x = g * d * e - c * f * h, this._y = c * f * e - g * d * h, this._z = c * d * h + g * f * e, this._w = c * d * e + g * f * h);if (!1 !== b) this.onChangeCallback();return this;
	  }, setFromAxisAngle: function setFromAxisAngle(a, b) {
	    var c = b / 2,
	        d = Math.sin(c);this._x = a.x * d;this._y = a.y * d;this._z = a.z * d;this._w = Math.cos(c);this.onChangeCallback();return this;
	  }, setFromRotationMatrix: function setFromRotationMatrix(a) {
	    var b = a.elements,
	        c = b[0];a = b[4];var d = b[8],
	        e = b[1],
	        g = b[5],
	        f = b[9],
	        h = b[2],
	        l = b[6],
	        b = b[10],
	        k = c + g + b;0 < k ? (c = .5 / Math.sqrt(k + 1), this._w = .25 / c, this._x = (l - f) * c, this._y = (d - h) * c, this._z = (e - a) * c) : c > g && c > b ? (c = 2 * Math.sqrt(1 + c - g - b), this._w = (l - f) / c, this._x = .25 * c, this._y = (a + e) / c, this._z = (d + h) / c) : g > b ? (c = 2 * Math.sqrt(1 + g - c - b), this._w = (d - h) / c, this._x = (a + e) / c, this._y = .25 * c, this._z = (f + l) / c) : (c = 2 * Math.sqrt(1 + b - c - g), this._w = (e - a) / c, this._x = (d + h) / c, this._y = (f + l) / c, this._z = .25 * c);this.onChangeCallback();return this;
	  }, setFromUnitVectors: function () {
	    var a, b;return function (c, d) {
	      void 0 === a && (a = new THREE.Vector3());b = c.dot(d) + 1;1E-6 > b ? (b = 0, Math.abs(c.x) > Math.abs(c.z) ? a.set(-c.y, c.x, 0) : a.set(0, -c.z, c.y)) : a.crossVectors(c, d);this._x = a.x;this._y = a.y;this._z = a.z;this._w = b;this.normalize();return this;
	    };
	  }(), inverse: function inverse() {
	    this.conjugate().normalize();return this;
	  }, conjugate: function conjugate() {
	    this._x *= -1;this._y *= -1;this._z *= -1;this.onChangeCallback();return this;
	  }, dot: function dot(a) {
	    return this._x * a._x + this._y * a._y + this._z * a._z + this._w * a._w;
	  }, lengthSq: function lengthSq() {
	    return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
	  }, length: function length() {
	    return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
	  }, normalize: function normalize() {
	    var a = this.length();0 === a ? (this._z = this._y = this._x = 0, this._w = 1) : (a = 1 / a, this._x *= a, this._y *= a, this._z *= a, this._w *= a);this.onChangeCallback();return this;
	  },
	  multiply: function multiply(a, b) {
	    return void 0 !== b ? (console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."), this.multiplyQuaternions(a, b)) : this.multiplyQuaternions(this, a);
	  }, multiplyQuaternions: function multiplyQuaternions(a, b) {
	    var c = a._x,
	        d = a._y,
	        e = a._z,
	        g = a._w,
	        f = b._x,
	        h = b._y,
	        l = b._z,
	        k = b._w;this._x = c * k + g * f + d * l - e * h;this._y = d * k + g * h + e * f - c * l;this._z = e * k + g * l + c * h - d * f;this._w = g * k - c * f - d * h - e * l;this.onChangeCallback();return this;
	  }, multiplyVector3: function multiplyVector3(a) {
	    console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.");
	    return a.applyQuaternion(this);
	  }, slerp: function slerp(a, b) {
	    if (0 === b) return this;if (1 === b) return this.copy(a);var c = this._x,
	        d = this._y,
	        e = this._z,
	        g = this._w,
	        f = g * a._w + c * a._x + d * a._y + e * a._z;0 > f ? (this._w = -a._w, this._x = -a._x, this._y = -a._y, this._z = -a._z, f = -f) : this.copy(a);if (1 <= f) return this._w = g, this._x = c, this._y = d, this._z = e, this;var h = Math.acos(f),
	        l = Math.sqrt(1 - f * f);if (.001 > Math.abs(l)) return this._w = .5 * (g + this._w), this._x = .5 * (c + this._x), this._y = .5 * (d + this._y), this._z = .5 * (e + this._z), this;f = Math.sin((1 - b) * h) / l;h = Math.sin(b * h) / l;this._w = g * f + this._w * h;this._x = c * f + this._x * h;this._y = d * f + this._y * h;this._z = e * f + this._z * h;this.onChangeCallback();return this;
	  }, equals: function equals(a) {
	    return a._x === this._x && a._y === this._y && a._z === this._z && a._w === this._w;
	  }, fromArray: function fromArray(a, b) {
	    void 0 === b && (b = 0);this._x = a[b];this._y = a[b + 1];this._z = a[b + 2];this._w = a[b + 3];this.onChangeCallback();return this;
	  }, toArray: function toArray(a, b) {
	    void 0 === a && (a = []);void 0 === b && (b = 0);a[b] = this._x;a[b + 1] = this._y;a[b + 2] = this._z;a[b + 3] = this._w;return a;
	  }, onChange: function onChange(a) {
	    this.onChangeCallback = a;return this;
	  }, onChangeCallback: function onChangeCallback() {} };THREE.Quaternion.slerp = function (a, b, c, d) {
	  return c.copy(a).slerp(b, d);
	};THREE.Vector2 = function (a, b) {
	  this.x = a || 0;this.y = b || 0;
	};
	THREE.Vector2.prototype = { constructor: THREE.Vector2, get width() {
	    return this.x;
	  }, set width(a) {
	    this.x = a;
	  }, get height() {
	    return this.y;
	  }, set height(a) {
	    this.y = a;
	  }, set: function set(a, b) {
	    this.x = a;this.y = b;return this;
	  }, setX: function setX(a) {
	    this.x = a;return this;
	  }, setY: function setY(a) {
	    this.y = a;return this;
	  }, setComponent: function setComponent(a, b) {
	    switch (a) {case 0:
	        this.x = b;break;case 1:
	        this.y = b;break;default:
	        throw Error("index is out of range: " + a);}
	  }, getComponent: function getComponent(a) {
	    switch (a) {case 0:
	        return this.x;case 1:
	        return this.y;default:
	        throw Error("index is out of range: " + a);}
	  }, clone: function clone() {
	    return new this.constructor(this.x, this.y);
	  }, copy: function copy(a) {
	    this.x = a.x;this.y = a.y;return this;
	  }, add: function add(a, b) {
	    if (void 0 !== b) return console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(a, b);this.x += a.x;this.y += a.y;return this;
	  }, addScalar: function addScalar(a) {
	    this.x += a;this.y += a;return this;
	  }, addVectors: function addVectors(a, b) {
	    this.x = a.x + b.x;this.y = a.y + b.y;return this;
	  }, addScaledVector: function addScaledVector(a, b) {
	    this.x += a.x * b;this.y += a.y * b;return this;
	  },
	  sub: function sub(a, b) {
	    if (void 0 !== b) return console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(a, b);this.x -= a.x;this.y -= a.y;return this;
	  }, subScalar: function subScalar(a) {
	    this.x -= a;this.y -= a;return this;
	  }, subVectors: function subVectors(a, b) {
	    this.x = a.x - b.x;this.y = a.y - b.y;return this;
	  }, multiply: function multiply(a) {
	    this.x *= a.x;this.y *= a.y;return this;
	  }, multiplyScalar: function multiplyScalar(a) {
	    isFinite(a) ? (this.x *= a, this.y *= a) : this.y = this.x = 0;return this;
	  }, divide: function divide(a) {
	    this.x /= a.x;
	    this.y /= a.y;return this;
	  }, divideScalar: function divideScalar(a) {
	    return this.multiplyScalar(1 / a);
	  }, min: function min(a) {
	    this.x = Math.min(this.x, a.x);this.y = Math.min(this.y, a.y);return this;
	  }, max: function max(a) {
	    this.x = Math.max(this.x, a.x);this.y = Math.max(this.y, a.y);return this;
	  }, clamp: function clamp(a, b) {
	    this.x = Math.max(a.x, Math.min(b.x, this.x));this.y = Math.max(a.y, Math.min(b.y, this.y));return this;
	  }, clampScalar: function () {
	    var a, b;return function (c, d) {
	      void 0 === a && (a = new THREE.Vector2(), b = new THREE.Vector2());a.set(c, c);b.set(d, d);return this.clamp(a, b);
	    };
	  }(), clampLength: function clampLength(a, b) {
	    var c = this.length();this.multiplyScalar(Math.max(a, Math.min(b, c)) / c);return this;
	  }, floor: function floor() {
	    this.x = Math.floor(this.x);this.y = Math.floor(this.y);return this;
	  }, ceil: function ceil() {
	    this.x = Math.ceil(this.x);this.y = Math.ceil(this.y);return this;
	  }, round: function round() {
	    this.x = Math.round(this.x);this.y = Math.round(this.y);return this;
	  }, roundToZero: function roundToZero() {
	    this.x = 0 > this.x ? Math.ceil(this.x) : Math.floor(this.x);this.y = 0 > this.y ? Math.ceil(this.y) : Math.floor(this.y);return this;
	  }, negate: function negate() {
	    this.x = -this.x;this.y = -this.y;return this;
	  }, dot: function dot(a) {
	    return this.x * a.x + this.y * a.y;
	  }, lengthSq: function lengthSq() {
	    return this.x * this.x + this.y * this.y;
	  }, length: function length() {
	    return Math.sqrt(this.x * this.x + this.y * this.y);
	  }, lengthManhattan: function lengthManhattan() {
	    return Math.abs(this.x) + Math.abs(this.y);
	  }, normalize: function normalize() {
	    return this.divideScalar(this.length());
	  }, distanceTo: function distanceTo(a) {
	    return Math.sqrt(this.distanceToSquared(a));
	  }, distanceToSquared: function distanceToSquared(a) {
	    var b = this.x - a.x;a = this.y - a.y;return b * b + a * a;
	  }, setLength: function setLength(a) {
	    return this.multiplyScalar(a / this.length());
	  }, lerp: function lerp(a, b) {
	    this.x += (a.x - this.x) * b;this.y += (a.y - this.y) * b;return this;
	  }, lerpVectors: function lerpVectors(a, b, c) {
	    this.subVectors(b, a).multiplyScalar(c).add(a);return this;
	  }, equals: function equals(a) {
	    return a.x === this.x && a.y === this.y;
	  }, fromArray: function fromArray(a, b) {
	    void 0 === b && (b = 0);this.x = a[b];this.y = a[b + 1];return this;
	  }, toArray: function toArray(a, b) {
	    void 0 === a && (a = []);void 0 === b && (b = 0);a[b] = this.x;a[b + 1] = this.y;return a;
	  }, fromAttribute: function fromAttribute(a, b, c) {
	    void 0 === c && (c = 0);b = b * a.itemSize + c;this.x = a.array[b];this.y = a.array[b + 1];return this;
	  }, rotateAround: function rotateAround(a, b) {
	    var c = Math.cos(b),
	        d = Math.sin(b),
	        e = this.x - a.x,
	        g = this.y - a.y;this.x = e * c - g * d + a.x;this.y = e * d + g * c + a.y;return this;
	  } };THREE.Vector3 = function (a, b, c) {
	  this.x = a || 0;this.y = b || 0;this.z = c || 0;
	};
	THREE.Vector3.prototype = { constructor: THREE.Vector3, set: function set(a, b, c) {
	    this.x = a;this.y = b;this.z = c;return this;
	  }, setX: function setX(a) {
	    this.x = a;return this;
	  }, setY: function setY(a) {
	    this.y = a;return this;
	  }, setZ: function setZ(a) {
	    this.z = a;return this;
	  }, setComponent: function setComponent(a, b) {
	    switch (a) {case 0:
	        this.x = b;break;case 1:
	        this.y = b;break;case 2:
	        this.z = b;break;default:
	        throw Error("index is out of range: " + a);}
	  }, getComponent: function getComponent(a) {
	    switch (a) {case 0:
	        return this.x;case 1:
	        return this.y;case 2:
	        return this.z;default:
	        throw Error("index is out of range: " + a);}
	  }, clone: function clone() {
	    return new this.constructor(this.x, this.y, this.z);
	  }, copy: function copy(a) {
	    this.x = a.x;this.y = a.y;this.z = a.z;return this;
	  }, add: function add(a, b) {
	    if (void 0 !== b) return console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(a, b);this.x += a.x;this.y += a.y;this.z += a.z;return this;
	  }, addScalar: function addScalar(a) {
	    this.x += a;this.y += a;this.z += a;return this;
	  }, addVectors: function addVectors(a, b) {
	    this.x = a.x + b.x;this.y = a.y + b.y;this.z = a.z + b.z;return this;
	  }, addScaledVector: function addScaledVector(a, b) {
	    this.x += a.x * b;this.y += a.y * b;this.z += a.z * b;return this;
	  }, sub: function sub(a, b) {
	    if (void 0 !== b) return console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(a, b);this.x -= a.x;this.y -= a.y;this.z -= a.z;return this;
	  }, subScalar: function subScalar(a) {
	    this.x -= a;this.y -= a;this.z -= a;return this;
	  }, subVectors: function subVectors(a, b) {
	    this.x = a.x - b.x;this.y = a.y - b.y;this.z = a.z - b.z;return this;
	  }, multiply: function multiply(a, b) {
	    if (void 0 !== b) return console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."), this.multiplyVectors(a, b);this.x *= a.x;this.y *= a.y;this.z *= a.z;return this;
	  }, multiplyScalar: function multiplyScalar(a) {
	    isFinite(a) ? (this.x *= a, this.y *= a, this.z *= a) : this.z = this.y = this.x = 0;return this;
	  }, multiplyVectors: function multiplyVectors(a, b) {
	    this.x = a.x * b.x;this.y = a.y * b.y;this.z = a.z * b.z;return this;
	  }, applyEuler: function () {
	    var a;return function (b) {
	      !1 === b instanceof THREE.Euler && console.error("THREE.Vector3: .applyEuler() now expects a Euler rotation rather than a Vector3 and order.");void 0 === a && (a = new THREE.Quaternion());this.applyQuaternion(a.setFromEuler(b));
	      return this;
	    };
	  }(), applyAxisAngle: function () {
	    var a;return function (b, c) {
	      void 0 === a && (a = new THREE.Quaternion());this.applyQuaternion(a.setFromAxisAngle(b, c));return this;
	    };
	  }(), applyMatrix3: function applyMatrix3(a) {
	    var b = this.x,
	        c = this.y,
	        d = this.z;a = a.elements;this.x = a[0] * b + a[3] * c + a[6] * d;this.y = a[1] * b + a[4] * c + a[7] * d;this.z = a[2] * b + a[5] * c + a[8] * d;return this;
	  }, applyMatrix4: function applyMatrix4(a) {
	    var b = this.x,
	        c = this.y,
	        d = this.z;a = a.elements;this.x = a[0] * b + a[4] * c + a[8] * d + a[12];this.y = a[1] * b + a[5] * c + a[9] * d + a[13];this.z = a[2] * b + a[6] * c + a[10] * d + a[14];
	    return this;
	  }, applyProjection: function applyProjection(a) {
	    var b = this.x,
	        c = this.y,
	        d = this.z;a = a.elements;var e = 1 / (a[3] * b + a[7] * c + a[11] * d + a[15]);this.x = (a[0] * b + a[4] * c + a[8] * d + a[12]) * e;this.y = (a[1] * b + a[5] * c + a[9] * d + a[13]) * e;this.z = (a[2] * b + a[6] * c + a[10] * d + a[14]) * e;return this;
	  }, applyQuaternion: function applyQuaternion(a) {
	    var b = this.x,
	        c = this.y,
	        d = this.z,
	        e = a.x,
	        g = a.y,
	        f = a.z;a = a.w;var h = a * b + g * d - f * c,
	        l = a * c + f * b - e * d,
	        k = a * d + e * c - g * b,
	        b = -e * b - g * c - f * d;this.x = h * a + b * -e + l * -f - k * -g;this.y = l * a + b * -g + k * -e - h * -f;this.z = k * a + b * -f + h * -g - l * -e;return this;
	  }, project: function () {
	    var a;
	    return function (b) {
	      void 0 === a && (a = new THREE.Matrix4());a.multiplyMatrices(b.projectionMatrix, a.getInverse(b.matrixWorld));return this.applyProjection(a);
	    };
	  }(), unproject: function () {
	    var a;return function (b) {
	      void 0 === a && (a = new THREE.Matrix4());a.multiplyMatrices(b.matrixWorld, a.getInverse(b.projectionMatrix));return this.applyProjection(a);
	    };
	  }(), transformDirection: function transformDirection(a) {
	    var b = this.x,
	        c = this.y,
	        d = this.z;a = a.elements;this.x = a[0] * b + a[4] * c + a[8] * d;this.y = a[1] * b + a[5] * c + a[9] * d;this.z = a[2] * b + a[6] * c + a[10] * d;this.normalize();
	    return this;
	  }, divide: function divide(a) {
	    this.x /= a.x;this.y /= a.y;this.z /= a.z;return this;
	  }, divideScalar: function divideScalar(a) {
	    return this.multiplyScalar(1 / a);
	  }, min: function min(a) {
	    this.x = Math.min(this.x, a.x);this.y = Math.min(this.y, a.y);this.z = Math.min(this.z, a.z);return this;
	  }, max: function max(a) {
	    this.x = Math.max(this.x, a.x);this.y = Math.max(this.y, a.y);this.z = Math.max(this.z, a.z);return this;
	  }, clamp: function clamp(a, b) {
	    this.x = Math.max(a.x, Math.min(b.x, this.x));this.y = Math.max(a.y, Math.min(b.y, this.y));this.z = Math.max(a.z, Math.min(b.z, this.z));return this;
	  }, clampScalar: function () {
	    var a, b;return function (c, d) {
	      void 0 === a && (a = new THREE.Vector3(), b = new THREE.Vector3());a.set(c, c, c);b.set(d, d, d);return this.clamp(a, b);
	    };
	  }(), clampLength: function clampLength(a, b) {
	    var c = this.length();this.multiplyScalar(Math.max(a, Math.min(b, c)) / c);return this;
	  }, floor: function floor() {
	    this.x = Math.floor(this.x);this.y = Math.floor(this.y);this.z = Math.floor(this.z);return this;
	  }, ceil: function ceil() {
	    this.x = Math.ceil(this.x);this.y = Math.ceil(this.y);this.z = Math.ceil(this.z);return this;
	  },
	  round: function round() {
	    this.x = Math.round(this.x);this.y = Math.round(this.y);this.z = Math.round(this.z);return this;
	  }, roundToZero: function roundToZero() {
	    this.x = 0 > this.x ? Math.ceil(this.x) : Math.floor(this.x);this.y = 0 > this.y ? Math.ceil(this.y) : Math.floor(this.y);this.z = 0 > this.z ? Math.ceil(this.z) : Math.floor(this.z);return this;
	  }, negate: function negate() {
	    this.x = -this.x;this.y = -this.y;this.z = -this.z;return this;
	  }, dot: function dot(a) {
	    return this.x * a.x + this.y * a.y + this.z * a.z;
	  }, lengthSq: function lengthSq() {
	    return this.x * this.x + this.y * this.y + this.z * this.z;
	  },
	  length: function length() {
	    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	  }, lengthManhattan: function lengthManhattan() {
	    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
	  }, normalize: function normalize() {
	    return this.divideScalar(this.length());
	  }, setLength: function setLength(a) {
	    return this.multiplyScalar(a / this.length());
	  }, lerp: function lerp(a, b) {
	    this.x += (a.x - this.x) * b;this.y += (a.y - this.y) * b;this.z += (a.z - this.z) * b;return this;
	  }, lerpVectors: function lerpVectors(a, b, c) {
	    this.subVectors(b, a).multiplyScalar(c).add(a);return this;
	  }, cross: function cross(a, b) {
	    if (void 0 !== b) return console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."), this.crossVectors(a, b);var c = this.x,
	        d = this.y,
	        e = this.z;this.x = d * a.z - e * a.y;this.y = e * a.x - c * a.z;this.z = c * a.y - d * a.x;return this;
	  }, crossVectors: function crossVectors(a, b) {
	    var c = a.x,
	        d = a.y,
	        e = a.z,
	        g = b.x,
	        f = b.y,
	        h = b.z;this.x = d * h - e * f;this.y = e * g - c * h;this.z = c * f - d * g;return this;
	  }, projectOnVector: function () {
	    var a, b;return function (c) {
	      void 0 === a && (a = new THREE.Vector3());a.copy(c).normalize();b = this.dot(a);return this.copy(a).multiplyScalar(b);
	    };
	  }(),
	  projectOnPlane: function () {
	    var a;return function (b) {
	      void 0 === a && (a = new THREE.Vector3());a.copy(this).projectOnVector(b);return this.sub(a);
	    };
	  }(), reflect: function () {
	    var a;return function (b) {
	      void 0 === a && (a = new THREE.Vector3());return this.sub(a.copy(b).multiplyScalar(2 * this.dot(b)));
	    };
	  }(), angleTo: function angleTo(a) {
	    a = this.dot(a) / (this.length() * a.length());return Math.acos(THREE.Math.clamp(a, -1, 1));
	  }, distanceTo: function distanceTo(a) {
	    return Math.sqrt(this.distanceToSquared(a));
	  }, distanceToSquared: function distanceToSquared(a) {
	    var b = this.x - a.x,
	        c = this.y - a.y;a = this.z - a.z;return b * b + c * c + a * a;
	  }, setEulerFromRotationMatrix: function setEulerFromRotationMatrix(a, b) {
	    console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.");
	  }, setEulerFromQuaternion: function setEulerFromQuaternion(a, b) {
	    console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.");
	  }, getPositionFromMatrix: function getPositionFromMatrix(a) {
	    console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().");return this.setFromMatrixPosition(a);
	  },
	  getScaleFromMatrix: function getScaleFromMatrix(a) {
	    console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().");return this.setFromMatrixScale(a);
	  }, getColumnFromMatrix: function getColumnFromMatrix(a, b) {
	    console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().");return this.setFromMatrixColumn(a, b);
	  }, setFromMatrixPosition: function setFromMatrixPosition(a) {
	    this.x = a.elements[12];this.y = a.elements[13];this.z = a.elements[14];return this;
	  }, setFromMatrixScale: function setFromMatrixScale(a) {
	    var b = this.set(a.elements[0], a.elements[1], a.elements[2]).length(),
	        c = this.set(a.elements[4], a.elements[5], a.elements[6]).length();a = this.set(a.elements[8], a.elements[9], a.elements[10]).length();this.x = b;this.y = c;this.z = a;return this;
	  }, setFromMatrixColumn: function setFromMatrixColumn(a, b) {
	    var c = 4 * a,
	        d = b.elements;this.x = d[c];this.y = d[c + 1];this.z = d[c + 2];return this;
	  }, equals: function equals(a) {
	    return a.x === this.x && a.y === this.y && a.z === this.z;
	  }, fromArray: function fromArray(a, b) {
	    void 0 === b && (b = 0);this.x = a[b];this.y = a[b + 1];this.z = a[b + 2];return this;
	  }, toArray: function toArray(a, b) {
	    void 0 === a && (a = []);void 0 === b && (b = 0);a[b] = this.x;a[b + 1] = this.y;a[b + 2] = this.z;return a;
	  }, fromAttribute: function fromAttribute(a, b, c) {
	    void 0 === c && (c = 0);b = b * a.itemSize + c;this.x = a.array[b];this.y = a.array[b + 1];this.z = a.array[b + 2];return this;
	  } };THREE.Vector4 = function (a, b, c, d) {
	  this.x = a || 0;this.y = b || 0;this.z = c || 0;this.w = void 0 !== d ? d : 1;
	};
	THREE.Vector4.prototype = { constructor: THREE.Vector4, set: function set(a, b, c, d) {
	    this.x = a;this.y = b;this.z = c;this.w = d;return this;
	  }, setX: function setX(a) {
	    this.x = a;return this;
	  }, setY: function setY(a) {
	    this.y = a;return this;
	  }, setZ: function setZ(a) {
	    this.z = a;return this;
	  }, setW: function setW(a) {
	    this.w = a;return this;
	  }, setComponent: function setComponent(a, b) {
	    switch (a) {case 0:
	        this.x = b;break;case 1:
	        this.y = b;break;case 2:
	        this.z = b;break;case 3:
	        this.w = b;break;default:
	        throw Error("index is out of range: " + a);}
	  }, getComponent: function getComponent(a) {
	    switch (a) {case 0:
	        return this.x;
	      case 1:
	        return this.y;case 2:
	        return this.z;case 3:
	        return this.w;default:
	        throw Error("index is out of range: " + a);}
	  }, clone: function clone() {
	    return new this.constructor(this.x, this.y, this.z, this.w);
	  }, copy: function copy(a) {
	    this.x = a.x;this.y = a.y;this.z = a.z;this.w = void 0 !== a.w ? a.w : 1;return this;
	  }, add: function add(a, b) {
	    if (void 0 !== b) return console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(a, b);this.x += a.x;this.y += a.y;this.z += a.z;this.w += a.w;return this;
	  },
	  addScalar: function addScalar(a) {
	    this.x += a;this.y += a;this.z += a;this.w += a;return this;
	  }, addVectors: function addVectors(a, b) {
	    this.x = a.x + b.x;this.y = a.y + b.y;this.z = a.z + b.z;this.w = a.w + b.w;return this;
	  }, addScaledVector: function addScaledVector(a, b) {
	    this.x += a.x * b;this.y += a.y * b;this.z += a.z * b;this.w += a.w * b;return this;
	  }, sub: function sub(a, b) {
	    if (void 0 !== b) return console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(a, b);this.x -= a.x;this.y -= a.y;this.z -= a.z;this.w -= a.w;return this;
	  }, subScalar: function subScalar(a) {
	    this.x -= a;this.y -= a;this.z -= a;this.w -= a;return this;
	  }, subVectors: function subVectors(a, b) {
	    this.x = a.x - b.x;this.y = a.y - b.y;this.z = a.z - b.z;this.w = a.w - b.w;return this;
	  }, multiplyScalar: function multiplyScalar(a) {
	    isFinite(a) ? (this.x *= a, this.y *= a, this.z *= a, this.w *= a) : this.w = this.z = this.y = this.x = 0;return this;
	  }, applyMatrix4: function applyMatrix4(a) {
	    var b = this.x,
	        c = this.y,
	        d = this.z,
	        e = this.w;a = a.elements;this.x = a[0] * b + a[4] * c + a[8] * d + a[12] * e;this.y = a[1] * b + a[5] * c + a[9] * d + a[13] * e;this.z = a[2] * b + a[6] * c + a[10] * d + a[14] * e;this.w = a[3] * b + a[7] * c + a[11] * d + a[15] * e;return this;
	  },
	  divideScalar: function divideScalar(a) {
	    return this.multiplyScalar(1 / a);
	  }, setAxisAngleFromQuaternion: function setAxisAngleFromQuaternion(a) {
	    this.w = 2 * Math.acos(a.w);var b = Math.sqrt(1 - a.w * a.w);1E-4 > b ? (this.x = 1, this.z = this.y = 0) : (this.x = a.x / b, this.y = a.y / b, this.z = a.z / b);return this;
	  }, setAxisAngleFromRotationMatrix: function setAxisAngleFromRotationMatrix(a) {
	    var b, c, d;a = a.elements;var e = a[0];d = a[4];var g = a[8],
	        f = a[1],
	        h = a[5],
	        l = a[9];c = a[2];b = a[6];var k = a[10];if (.01 > Math.abs(d - f) && .01 > Math.abs(g - c) && .01 > Math.abs(l - b)) {
	      if (.1 > Math.abs(d + f) && .1 > Math.abs(g + c) && .1 > Math.abs(l + b) && .1 > Math.abs(e + h + k - 3)) return this.set(1, 0, 0, 0), this;a = Math.PI;e = (e + 1) / 2;h = (h + 1) / 2;k = (k + 1) / 2;d = (d + f) / 4;g = (g + c) / 4;l = (l + b) / 4;e > h && e > k ? .01 > e ? (b = 0, d = c = .707106781) : (b = Math.sqrt(e), c = d / b, d = g / b) : h > k ? .01 > h ? (b = .707106781, c = 0, d = .707106781) : (c = Math.sqrt(h), b = d / c, d = l / c) : .01 > k ? (c = b = .707106781, d = 0) : (d = Math.sqrt(k), b = g / d, c = l / d);this.set(b, c, d, a);return this;
	    }a = Math.sqrt((b - l) * (b - l) + (g - c) * (g - c) + (f - d) * (f - d));.001 > Math.abs(a) && (a = 1);this.x = (b - l) / a;this.y = (g - c) / a;this.z = (f - d) / a;this.w = Math.acos((e + h + k - 1) / 2);return this;
	  }, min: function min(a) {
	    this.x = Math.min(this.x, a.x);this.y = Math.min(this.y, a.y);this.z = Math.min(this.z, a.z);this.w = Math.min(this.w, a.w);return this;
	  }, max: function max(a) {
	    this.x = Math.max(this.x, a.x);this.y = Math.max(this.y, a.y);this.z = Math.max(this.z, a.z);this.w = Math.max(this.w, a.w);return this;
	  }, clamp: function clamp(a, b) {
	    this.x = Math.max(a.x, Math.min(b.x, this.x));this.y = Math.max(a.y, Math.min(b.y, this.y));this.z = Math.max(a.z, Math.min(b.z, this.z));this.w = Math.max(a.w, Math.min(b.w, this.w));return this;
	  }, clampScalar: function () {
	    var a, b;return function (c, d) {
	      void 0 === a && (a = new THREE.Vector4(), b = new THREE.Vector4());a.set(c, c, c, c);b.set(d, d, d, d);return this.clamp(a, b);
	    };
	  }(), floor: function floor() {
	    this.x = Math.floor(this.x);this.y = Math.floor(this.y);this.z = Math.floor(this.z);this.w = Math.floor(this.w);return this;
	  }, ceil: function ceil() {
	    this.x = Math.ceil(this.x);this.y = Math.ceil(this.y);this.z = Math.ceil(this.z);this.w = Math.ceil(this.w);return this;
	  }, round: function round() {
	    this.x = Math.round(this.x);this.y = Math.round(this.y);this.z = Math.round(this.z);this.w = Math.round(this.w);return this;
	  },
	  roundToZero: function roundToZero() {
	    this.x = 0 > this.x ? Math.ceil(this.x) : Math.floor(this.x);this.y = 0 > this.y ? Math.ceil(this.y) : Math.floor(this.y);this.z = 0 > this.z ? Math.ceil(this.z) : Math.floor(this.z);this.w = 0 > this.w ? Math.ceil(this.w) : Math.floor(this.w);return this;
	  }, negate: function negate() {
	    this.x = -this.x;this.y = -this.y;this.z = -this.z;this.w = -this.w;return this;
	  }, dot: function dot(a) {
	    return this.x * a.x + this.y * a.y + this.z * a.z + this.w * a.w;
	  }, lengthSq: function lengthSq() {
	    return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
	  }, length: function length() {
	    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
	  }, lengthManhattan: function lengthManhattan() {
	    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
	  }, normalize: function normalize() {
	    return this.divideScalar(this.length());
	  }, setLength: function setLength(a) {
	    return this.multiplyScalar(a / this.length());
	  }, lerp: function lerp(a, b) {
	    this.x += (a.x - this.x) * b;this.y += (a.y - this.y) * b;this.z += (a.z - this.z) * b;this.w += (a.w - this.w) * b;return this;
	  }, lerpVectors: function lerpVectors(a, b, c) {
	    this.subVectors(b, a).multiplyScalar(c).add(a);return this;
	  }, equals: function equals(a) {
	    return a.x === this.x && a.y === this.y && a.z === this.z && a.w === this.w;
	  }, fromArray: function fromArray(a, b) {
	    void 0 === b && (b = 0);this.x = a[b];this.y = a[b + 1];this.z = a[b + 2];this.w = a[b + 3];return this;
	  }, toArray: function toArray(a, b) {
	    void 0 === a && (a = []);void 0 === b && (b = 0);a[b] = this.x;a[b + 1] = this.y;a[b + 2] = this.z;a[b + 3] = this.w;return a;
	  }, fromAttribute: function fromAttribute(a, b, c) {
	    void 0 === c && (c = 0);b = b * a.itemSize + c;this.x = a.array[b];this.y = a.array[b + 1];this.z = a.array[b + 2];this.w = a.array[b + 3];return this;
	  } };
	THREE.Euler = function (a, b, c, d) {
	  this._x = a || 0;this._y = b || 0;this._z = c || 0;this._order = d || THREE.Euler.DefaultOrder;
	};THREE.Euler.RotationOrders = "XYZ YZX ZXY XZY YXZ ZYX".split(" ");THREE.Euler.DefaultOrder = "XYZ";
	THREE.Euler.prototype = { constructor: THREE.Euler, get x() {
	    return this._x;
	  }, set x(a) {
	    this._x = a;this.onChangeCallback();
	  }, get y() {
	    return this._y;
	  }, set y(a) {
	    this._y = a;this.onChangeCallback();
	  }, get z() {
	    return this._z;
	  }, set z(a) {
	    this._z = a;this.onChangeCallback();
	  }, get order() {
	    return this._order;
	  }, set order(a) {
	    this._order = a;this.onChangeCallback();
	  }, set: function set(a, b, c, d) {
	    this._x = a;this._y = b;this._z = c;this._order = d || this._order;this.onChangeCallback();return this;
	  }, clone: function clone() {
	    return new this.constructor(this._x, this._y, this._z, this._order);
	  }, copy: function copy(a) {
	    this._x = a._x;this._y = a._y;this._z = a._z;this._order = a._order;this.onChangeCallback();return this;
	  }, setFromRotationMatrix: function setFromRotationMatrix(a, b, c) {
	    var d = THREE.Math.clamp,
	        e = a.elements;a = e[0];var g = e[4],
	        f = e[8],
	        h = e[1],
	        l = e[5],
	        k = e[9],
	        m = e[2],
	        p = e[6],
	        e = e[10];b = b || this._order;"XYZ" === b ? (this._y = Math.asin(d(f, -1, 1)), .99999 > Math.abs(f) ? (this._x = Math.atan2(-k, e), this._z = Math.atan2(-g, a)) : (this._x = Math.atan2(p, l), this._z = 0)) : "YXZ" === b ? (this._x = Math.asin(-d(k, -1, 1)), .99999 > Math.abs(k) ? (this._y = Math.atan2(f, e), this._z = Math.atan2(h, l)) : (this._y = Math.atan2(-m, a), this._z = 0)) : "ZXY" === b ? (this._x = Math.asin(d(p, -1, 1)), .99999 > Math.abs(p) ? (this._y = Math.atan2(-m, e), this._z = Math.atan2(-g, l)) : (this._y = 0, this._z = Math.atan2(h, a))) : "ZYX" === b ? (this._y = Math.asin(-d(m, -1, 1)), .99999 > Math.abs(m) ? (this._x = Math.atan2(p, e), this._z = Math.atan2(h, a)) : (this._x = 0, this._z = Math.atan2(-g, l))) : "YZX" === b ? (this._z = Math.asin(d(h, -1, 1)), .99999 > Math.abs(h) ? (this._x = Math.atan2(-k, l), this._y = Math.atan2(-m, a)) : (this._x = 0, this._y = Math.atan2(f, e))) : "XZY" === b ? (this._z = Math.asin(-d(g, -1, 1)), .99999 > Math.abs(g) ? (this._x = Math.atan2(p, l), this._y = Math.atan2(f, a)) : (this._x = Math.atan2(-k, e), this._y = 0)) : console.warn("THREE.Euler: .setFromRotationMatrix() given unsupported order: " + b);this._order = b;if (!1 !== c) this.onChangeCallback();return this;
	  }, setFromQuaternion: function () {
	    var a;return function (b, c, d) {
	      void 0 === a && (a = new THREE.Matrix4());a.makeRotationFromQuaternion(b);this.setFromRotationMatrix(a, c, d);return this;
	    };
	  }(), setFromVector3: function setFromVector3(a, b) {
	    return this.set(a.x, a.y, a.z, b || this._order);
	  }, reorder: function () {
	    var a = new THREE.Quaternion();return function (b) {
	      a.setFromEuler(this);this.setFromQuaternion(a, b);
	    };
	  }(), equals: function equals(a) {
	    return a._x === this._x && a._y === this._y && a._z === this._z && a._order === this._order;
	  }, fromArray: function fromArray(a) {
	    this._x = a[0];this._y = a[1];this._z = a[2];void 0 !== a[3] && (this._order = a[3]);this.onChangeCallback();return this;
	  }, toArray: function toArray(a, b) {
	    void 0 === a && (a = []);void 0 === b && (b = 0);a[b] = this._x;a[b + 1] = this._y;a[b + 2] = this._z;a[b + 3] = this._order;return a;
	  }, toVector3: function toVector3(a) {
	    return a ? a.set(this._x, this._y, this._z) : new THREE.Vector3(this._x, this._y, this._z);
	  }, onChange: function onChange(a) {
	    this.onChangeCallback = a;return this;
	  }, onChangeCallback: function onChangeCallback() {} };THREE.Line3 = function (a, b) {
	  this.start = void 0 !== a ? a : new THREE.Vector3();this.end = void 0 !== b ? b : new THREE.Vector3();
	};
	THREE.Line3.prototype = { constructor: THREE.Line3, set: function set(a, b) {
	    this.start.copy(a);this.end.copy(b);return this;
	  }, clone: function clone() {
	    return new this.constructor().copy(this);
	  }, copy: function copy(a) {
	    this.start.copy(a.start);this.end.copy(a.end);return this;
	  }, center: function center(a) {
	    return (a || new THREE.Vector3()).addVectors(this.start, this.end).multiplyScalar(.5);
	  }, delta: function delta(a) {
	    return (a || new THREE.Vector3()).subVectors(this.end, this.start);
	  }, distanceSq: function distanceSq() {
	    return this.start.distanceToSquared(this.end);
	  }, distance: function distance() {
	    return this.start.distanceTo(this.end);
	  },
	  at: function at(a, b) {
	    var c = b || new THREE.Vector3();return this.delta(c).multiplyScalar(a).add(this.start);
	  }, closestPointToPointParameter: function () {
	    var a = new THREE.Vector3(),
	        b = new THREE.Vector3();return function (c, d) {
	      a.subVectors(c, this.start);b.subVectors(this.end, this.start);var e = b.dot(b),
	          e = b.dot(a) / e;d && (e = THREE.Math.clamp(e, 0, 1));return e;
	    };
	  }(), closestPointToPoint: function closestPointToPoint(a, b, c) {
	    a = this.closestPointToPointParameter(a, b);c = c || new THREE.Vector3();return this.delta(c).multiplyScalar(a).add(this.start);
	  }, applyMatrix4: function applyMatrix4(a) {
	    this.start.applyMatrix4(a);
	    this.end.applyMatrix4(a);return this;
	  }, equals: function equals(a) {
	    return a.start.equals(this.start) && a.end.equals(this.end);
	  } };THREE.Box2 = function (a, b) {
	  this.min = void 0 !== a ? a : new THREE.Vector2(Infinity, Infinity);this.max = void 0 !== b ? b : new THREE.Vector2(-Infinity, -Infinity);
	};
	THREE.Box2.prototype = { constructor: THREE.Box2, set: function set(a, b) {
	    this.min.copy(a);this.max.copy(b);return this;
	  }, setFromPoints: function setFromPoints(a) {
	    this.makeEmpty();for (var b = 0, c = a.length; b < c; b++) {
	      this.expandByPoint(a[b]);
	    }return this;
	  }, setFromCenterAndSize: function () {
	    var a = new THREE.Vector2();return function (b, c) {
	      var d = a.copy(c).multiplyScalar(.5);this.min.copy(b).sub(d);this.max.copy(b).add(d);return this;
	    };
	  }(), clone: function clone() {
	    return new this.constructor().copy(this);
	  }, copy: function copy(a) {
	    this.min.copy(a.min);this.max.copy(a.max);
	    return this;
	  }, makeEmpty: function makeEmpty() {
	    this.min.x = this.min.y = Infinity;this.max.x = this.max.y = -Infinity;return this;
	  }, empty: function empty() {
	    return this.max.x < this.min.x || this.max.y < this.min.y;
	  }, center: function center(a) {
	    return (a || new THREE.Vector2()).addVectors(this.min, this.max).multiplyScalar(.5);
	  }, size: function size(a) {
	    return (a || new THREE.Vector2()).subVectors(this.max, this.min);
	  }, expandByPoint: function expandByPoint(a) {
	    this.min.min(a);this.max.max(a);return this;
	  }, expandByVector: function expandByVector(a) {
	    this.min.sub(a);this.max.add(a);return this;
	  }, expandByScalar: function expandByScalar(a) {
	    this.min.addScalar(-a);
	    this.max.addScalar(a);return this;
	  }, containsPoint: function containsPoint(a) {
	    return a.x < this.min.x || a.x > this.max.x || a.y < this.min.y || a.y > this.max.y ? !1 : !0;
	  }, containsBox: function containsBox(a) {
	    return this.min.x <= a.min.x && a.max.x <= this.max.x && this.min.y <= a.min.y && a.max.y <= this.max.y ? !0 : !1;
	  }, getParameter: function getParameter(a, b) {
	    return (b || new THREE.Vector2()).set((a.x - this.min.x) / (this.max.x - this.min.x), (a.y - this.min.y) / (this.max.y - this.min.y));
	  }, isIntersectionBox: function isIntersectionBox(a) {
	    return a.max.x < this.min.x || a.min.x > this.max.x || a.max.y < this.min.y || a.min.y > this.max.y ? !1 : !0;
	  }, clampPoint: function clampPoint(a, b) {
	    return (b || new THREE.Vector2()).copy(a).clamp(this.min, this.max);
	  }, distanceToPoint: function () {
	    var a = new THREE.Vector2();return function (b) {
	      return a.copy(b).clamp(this.min, this.max).sub(b).length();
	    };
	  }(), intersect: function intersect(a) {
	    this.min.max(a.min);this.max.min(a.max);return this;
	  }, union: function union(a) {
	    this.min.min(a.min);this.max.max(a.max);return this;
	  }, translate: function translate(a) {
	    this.min.add(a);this.max.add(a);return this;
	  }, equals: function equals(a) {
	    return a.min.equals(this.min) && a.max.equals(this.max);
	  } };THREE.Box3 = function (a, b) {
	  this.min = void 0 !== a ? a : new THREE.Vector3(Infinity, Infinity, Infinity);this.max = void 0 !== b ? b : new THREE.Vector3(-Infinity, -Infinity, -Infinity);
	};
	THREE.Box3.prototype = { constructor: THREE.Box3, set: function set(a, b) {
	    this.min.copy(a);this.max.copy(b);return this;
	  }, setFromPoints: function setFromPoints(a) {
	    this.makeEmpty();for (var b = 0, c = a.length; b < c; b++) {
	      this.expandByPoint(a[b]);
	    }return this;
	  }, setFromCenterAndSize: function () {
	    var a = new THREE.Vector3();return function (b, c) {
	      var d = a.copy(c).multiplyScalar(.5);this.min.copy(b).sub(d);this.max.copy(b).add(d);return this;
	    };
	  }(), setFromObject: function () {
	    var a = new THREE.Vector3();return function (b) {
	      var c = this;b.updateMatrixWorld(!0);
	      this.makeEmpty();b.traverse(function (b) {
	        var e = b.geometry;if (void 0 !== e) if (e instanceof THREE.Geometry) for (var g = e.vertices, e = 0, f = g.length; e < f; e++) {
	          a.copy(g[e]), a.applyMatrix4(b.matrixWorld), c.expandByPoint(a);
	        } else if (e instanceof THREE.BufferGeometry && void 0 !== e.attributes.position) for (g = e.attributes.position.array, e = 0, f = g.length; e < f; e += 3) {
	          a.set(g[e], g[e + 1], g[e + 2]), a.applyMatrix4(b.matrixWorld), c.expandByPoint(a);
	        }
	      });return this;
	    };
	  }(), clone: function clone() {
	    return new this.constructor().copy(this);
	  }, copy: function copy(a) {
	    this.min.copy(a.min);
	    this.max.copy(a.max);return this;
	  }, makeEmpty: function makeEmpty() {
	    this.min.x = this.min.y = this.min.z = Infinity;this.max.x = this.max.y = this.max.z = -Infinity;return this;
	  }, empty: function empty() {
	    return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
	  }, center: function center(a) {
	    return (a || new THREE.Vector3()).addVectors(this.min, this.max).multiplyScalar(.5);
	  }, size: function size(a) {
	    return (a || new THREE.Vector3()).subVectors(this.max, this.min);
	  }, expandByPoint: function expandByPoint(a) {
	    this.min.min(a);this.max.max(a);return this;
	  }, expandByVector: function expandByVector(a) {
	    this.min.sub(a);
	    this.max.add(a);return this;
	  }, expandByScalar: function expandByScalar(a) {
	    this.min.addScalar(-a);this.max.addScalar(a);return this;
	  }, containsPoint: function containsPoint(a) {
	    return a.x < this.min.x || a.x > this.max.x || a.y < this.min.y || a.y > this.max.y || a.z < this.min.z || a.z > this.max.z ? !1 : !0;
	  }, containsBox: function containsBox(a) {
	    return this.min.x <= a.min.x && a.max.x <= this.max.x && this.min.y <= a.min.y && a.max.y <= this.max.y && this.min.z <= a.min.z && a.max.z <= this.max.z ? !0 : !1;
	  }, getParameter: function getParameter(a, b) {
	    return (b || new THREE.Vector3()).set((a.x - this.min.x) / (this.max.x - this.min.x), (a.y - this.min.y) / (this.max.y - this.min.y), (a.z - this.min.z) / (this.max.z - this.min.z));
	  }, isIntersectionBox: function isIntersectionBox(a) {
	    return a.max.x < this.min.x || a.min.x > this.max.x || a.max.y < this.min.y || a.min.y > this.max.y || a.max.z < this.min.z || a.min.z > this.max.z ? !1 : !0;
	  }, clampPoint: function clampPoint(a, b) {
	    return (b || new THREE.Vector3()).copy(a).clamp(this.min, this.max);
	  }, distanceToPoint: function () {
	    var a = new THREE.Vector3();return function (b) {
	      return a.copy(b).clamp(this.min, this.max).sub(b).length();
	    };
	  }(), getBoundingSphere: function () {
	    var a = new THREE.Vector3();return function (b) {
	      b = b || new THREE.Sphere();b.center = this.center();b.radius = .5 * this.size(a).length();return b;
	    };
	  }(), intersect: function intersect(a) {
	    this.min.max(a.min);this.max.min(a.max);return this;
	  }, union: function union(a) {
	    this.min.min(a.min);this.max.max(a.max);return this;
	  }, applyMatrix4: function () {
	    var a = [new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3()];return function (b) {
	      a[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(b);a[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(b);a[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(b);a[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(b);a[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(b);a[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(b);a[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(b);a[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(b);this.makeEmpty();this.setFromPoints(a);return this;
	    };
	  }(), translate: function translate(a) {
	    this.min.add(a);
	    this.max.add(a);return this;
	  }, equals: function equals(a) {
	    return a.min.equals(this.min) && a.max.equals(this.max);
	  } };THREE.Matrix3 = function () {
	  this.elements = new Float32Array([1, 0, 0, 0, 1, 0, 0, 0, 1]);0 < arguments.length && console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.");
	};
	THREE.Matrix3.prototype = { constructor: THREE.Matrix3, set: function set(a, b, c, d, e, g, f, h, l) {
	    var k = this.elements;k[0] = a;k[3] = b;k[6] = c;k[1] = d;k[4] = e;k[7] = g;k[2] = f;k[5] = h;k[8] = l;return this;
	  }, identity: function identity() {
	    this.set(1, 0, 0, 0, 1, 0, 0, 0, 1);return this;
	  }, clone: function clone() {
	    return new this.constructor().fromArray(this.elements);
	  }, copy: function copy(a) {
	    a = a.elements;this.set(a[0], a[3], a[6], a[1], a[4], a[7], a[2], a[5], a[8]);return this;
	  }, multiplyVector3: function multiplyVector3(a) {
	    console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.");
	    return a.applyMatrix3(this);
	  }, multiplyVector3Array: function multiplyVector3Array(a) {
	    console.warn("THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.");return this.applyToVector3Array(a);
	  }, applyToVector3Array: function () {
	    var a;return function (b, c, d) {
	      void 0 === a && (a = new THREE.Vector3());void 0 === c && (c = 0);void 0 === d && (d = b.length);for (var e = 0; e < d; e += 3, c += 3) {
	        a.fromArray(b, c), a.applyMatrix3(this), a.toArray(b, c);
	      }return b;
	    };
	  }(), applyToBuffer: function () {
	    var a;return function (b, c, d) {
	      void 0 === a && (a = new THREE.Vector3());void 0 === c && (c = 0);void 0 === d && (d = b.length / b.itemSize);for (var e = 0; e < d; e++, c++) {
	        a.x = b.getX(c), a.y = b.getY(c), a.z = b.getZ(c), a.applyMatrix3(this), b.setXYZ(a.x, a.y, a.z);
	      }return b;
	    };
	  }(), multiplyScalar: function multiplyScalar(a) {
	    var b = this.elements;b[0] *= a;b[3] *= a;b[6] *= a;b[1] *= a;b[4] *= a;b[7] *= a;b[2] *= a;b[5] *= a;b[8] *= a;return this;
	  }, determinant: function determinant() {
	    var a = this.elements,
	        b = a[0],
	        c = a[1],
	        d = a[2],
	        e = a[3],
	        g = a[4],
	        f = a[5],
	        h = a[6],
	        l = a[7],
	        a = a[8];return b * g * a - b * f * l - c * e * a + c * f * h + d * e * l - d * g * h;
	  }, getInverse: function getInverse(a, b) {
	    var c = a.elements,
	        d = this.elements;d[0] = c[10] * c[5] - c[6] * c[9];d[1] = -c[10] * c[1] + c[2] * c[9];d[2] = c[6] * c[1] - c[2] * c[5];d[3] = -c[10] * c[4] + c[6] * c[8];d[4] = c[10] * c[0] - c[2] * c[8];d[5] = -c[6] * c[0] + c[2] * c[4];d[6] = c[9] * c[4] - c[5] * c[8];d[7] = -c[9] * c[0] + c[1] * c[8];d[8] = c[5] * c[0] - c[1] * c[4];c = c[0] * d[0] + c[1] * d[3] + c[2] * d[6];if (0 === c) {
	      if (b) throw Error("Matrix3.getInverse(): can't invert matrix, determinant is 0");console.warn("Matrix3.getInverse(): can't invert matrix, determinant is 0");this.identity();return this;
	    }this.multiplyScalar(1 / c);return this;
	  }, transpose: function transpose() {
	    var a,
	        b = this.elements;a = b[1];b[1] = b[3];b[3] = a;a = b[2];b[2] = b[6];b[6] = a;a = b[5];b[5] = b[7];b[7] = a;return this;
	  }, flattenToArrayOffset: function flattenToArrayOffset(a, b) {
	    var c = this.elements;a[b] = c[0];a[b + 1] = c[1];a[b + 2] = c[2];a[b + 3] = c[3];a[b + 4] = c[4];a[b + 5] = c[5];a[b + 6] = c[6];a[b + 7] = c[7];a[b + 8] = c[8];return a;
	  }, getNormalMatrix: function getNormalMatrix(a) {
	    this.getInverse(a).transpose();return this;
	  }, transposeIntoArray: function transposeIntoArray(a) {
	    var b = this.elements;a[0] = b[0];a[1] = b[3];a[2] = b[6];a[3] = b[1];a[4] = b[4];a[5] = b[7];a[6] = b[2];a[7] = b[5];a[8] = b[8];return this;
	  }, fromArray: function fromArray(a) {
	    this.elements.set(a);return this;
	  }, toArray: function toArray() {
	    var a = this.elements;return [a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]];
	  } };THREE.Matrix4 = function () {
	  this.elements = new Float32Array([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);0 < arguments.length && console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.");
	};
	THREE.Matrix4.prototype = { constructor: THREE.Matrix4, set: function set(a, b, c, d, e, g, f, h, l, k, m, p, n, q, s, t) {
	    var v = this.elements;v[0] = a;v[4] = b;v[8] = c;v[12] = d;v[1] = e;v[5] = g;v[9] = f;v[13] = h;v[2] = l;v[6] = k;v[10] = m;v[14] = p;v[3] = n;v[7] = q;v[11] = s;v[15] = t;return this;
	  }, identity: function identity() {
	    this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);return this;
	  }, clone: function clone() {
	    return new THREE.Matrix4().fromArray(this.elements);
	  }, copy: function copy(a) {
	    this.elements.set(a.elements);return this;
	  }, extractPosition: function extractPosition(a) {
	    console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().");
	    return this.copyPosition(a);
	  }, copyPosition: function copyPosition(a) {
	    var b = this.elements;a = a.elements;b[12] = a[12];b[13] = a[13];b[14] = a[14];return this;
	  }, extractBasis: function extractBasis(a, b, c) {
	    var d = this.elements;a.set(d[0], d[1], d[2]);b.set(d[4], d[5], d[6]);c.set(d[8], d[9], d[10]);return this;
	  }, makeBasis: function makeBasis(a, b, c) {
	    this.set(a.x, b.x, c.x, 0, a.y, b.y, c.y, 0, a.z, b.z, c.z, 0, 0, 0, 0, 1);return this;
	  }, extractRotation: function () {
	    var a;return function (b) {
	      void 0 === a && (a = new THREE.Vector3());var c = this.elements;b = b.elements;var d = 1 / a.set(b[0], b[1], b[2]).length(),
	          e = 1 / a.set(b[4], b[5], b[6]).length(),
	          g = 1 / a.set(b[8], b[9], b[10]).length();c[0] = b[0] * d;c[1] = b[1] * d;c[2] = b[2] * d;c[4] = b[4] * e;c[5] = b[5] * e;c[6] = b[6] * e;c[8] = b[8] * g;c[9] = b[9] * g;c[10] = b[10] * g;return this;
	    };
	  }(), makeRotationFromEuler: function makeRotationFromEuler(a) {
	    !1 === a instanceof THREE.Euler && console.error("THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");var b = this.elements,
	        c = a.x,
	        d = a.y,
	        e = a.z,
	        g = Math.cos(c),
	        c = Math.sin(c),
	        f = Math.cos(d),
	        d = Math.sin(d),
	        h = Math.cos(e),
	        e = Math.sin(e);if ("XYZ" === a.order) {
	      a = g * h;var l = g * e,
	          k = c * h,
	          m = c * e;b[0] = f * h;b[4] = -f * e;b[8] = d;b[1] = l + k * d;b[5] = a - m * d;b[9] = -c * f;b[2] = m - a * d;b[6] = k + l * d;b[10] = g * f;
	    } else "YXZ" === a.order ? (a = f * h, l = f * e, k = d * h, m = d * e, b[0] = a + m * c, b[4] = k * c - l, b[8] = g * d, b[1] = g * e, b[5] = g * h, b[9] = -c, b[2] = l * c - k, b[6] = m + a * c, b[10] = g * f) : "ZXY" === a.order ? (a = f * h, l = f * e, k = d * h, m = d * e, b[0] = a - m * c, b[4] = -g * e, b[8] = k + l * c, b[1] = l + k * c, b[5] = g * h, b[9] = m - a * c, b[2] = -g * d, b[6] = c, b[10] = g * f) : "ZYX" === a.order ? (a = g * h, l = g * e, k = c * h, m = c * e, b[0] = f * h, b[4] = k * d - l, b[8] = a * d + m, b[1] = f * e, b[5] = m * d + a, b[9] = l * d - k, b[2] = -d, b[6] = c * f, b[10] = g * f) : "YZX" === a.order ? (a = g * f, l = g * d, k = c * f, m = c * d, b[0] = f * h, b[4] = m - a * e, b[8] = k * e + l, b[1] = e, b[5] = g * h, b[9] = -c * h, b[2] = -d * h, b[6] = l * e + k, b[10] = a - m * e) : "XZY" === a.order && (a = g * f, l = g * d, k = c * f, m = c * d, b[0] = f * h, b[4] = -e, b[8] = d * h, b[1] = a * e + m, b[5] = g * h, b[9] = l * e - k, b[2] = k * e - l, b[6] = c * h, b[10] = m * e + a);b[3] = 0;b[7] = 0;b[11] = 0;b[12] = 0;b[13] = 0;b[14] = 0;b[15] = 1;return this;
	  }, setRotationFromQuaternion: function setRotationFromQuaternion(a) {
	    console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().");
	    return this.makeRotationFromQuaternion(a);
	  }, makeRotationFromQuaternion: function makeRotationFromQuaternion(a) {
	    var b = this.elements,
	        c = a.x,
	        d = a.y,
	        e = a.z,
	        g = a.w,
	        f = c + c,
	        h = d + d,
	        l = e + e;a = c * f;var k = c * h,
	        c = c * l,
	        m = d * h,
	        d = d * l,
	        e = e * l,
	        f = g * f,
	        h = g * h,
	        g = g * l;b[0] = 1 - (m + e);b[4] = k - g;b[8] = c + h;b[1] = k + g;b[5] = 1 - (a + e);b[9] = d - f;b[2] = c - h;b[6] = d + f;b[10] = 1 - (a + m);b[3] = 0;b[7] = 0;b[11] = 0;b[12] = 0;b[13] = 0;b[14] = 0;b[15] = 1;return this;
	  }, lookAt: function () {
	    var a, b, c;return function (d, e, g) {
	      void 0 === a && (a = new THREE.Vector3());void 0 === b && (b = new THREE.Vector3());void 0 === c && (c = new THREE.Vector3());
	      var f = this.elements;c.subVectors(d, e).normalize();0 === c.lengthSq() && (c.z = 1);a.crossVectors(g, c).normalize();0 === a.lengthSq() && (c.x += 1E-4, a.crossVectors(g, c).normalize());b.crossVectors(c, a);f[0] = a.x;f[4] = b.x;f[8] = c.x;f[1] = a.y;f[5] = b.y;f[9] = c.y;f[2] = a.z;f[6] = b.z;f[10] = c.z;return this;
	    };
	  }(), multiply: function multiply(a, b) {
	    return void 0 !== b ? (console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."), this.multiplyMatrices(a, b)) : this.multiplyMatrices(this, a);
	  },
	  multiplyMatrices: function multiplyMatrices(a, b) {
	    var c = a.elements,
	        d = b.elements,
	        e = this.elements,
	        g = c[0],
	        f = c[4],
	        h = c[8],
	        l = c[12],
	        k = c[1],
	        m = c[5],
	        p = c[9],
	        n = c[13],
	        q = c[2],
	        s = c[6],
	        t = c[10],
	        v = c[14],
	        u = c[3],
	        w = c[7],
	        D = c[11],
	        c = c[15],
	        x = d[0],
	        B = d[4],
	        y = d[8],
	        z = d[12],
	        A = d[1],
	        J = d[5],
	        F = d[9],
	        C = d[13],
	        N = d[2],
	        L = d[6],
	        Q = d[10],
	        M = d[14],
	        K = d[3],
	        E = d[7],
	        O = d[11],
	        d = d[15];e[0] = g * x + f * A + h * N + l * K;e[4] = g * B + f * J + h * L + l * E;e[8] = g * y + f * F + h * Q + l * O;e[12] = g * z + f * C + h * M + l * d;e[1] = k * x + m * A + p * N + n * K;e[5] = k * B + m * J + p * L + n * E;e[9] = k * y + m * F + p * Q + n * O;e[13] = k * z + m * C + p * M + n * d;e[2] = q * x + s * A + t * N + v * K;e[6] = q * B + s * J + t * L + v * E;e[10] = q * y + s * F + t * Q + v * O;e[14] = q * z + s * C + t * M + v * d;e[3] = u * x + w * A + D * N + c * K;e[7] = u * B + w * J + D * L + c * E;e[11] = u * y + w * F + D * Q + c * O;e[15] = u * z + w * C + D * M + c * d;return this;
	  }, multiplyToArray: function multiplyToArray(a, b, c) {
	    var d = this.elements;this.multiplyMatrices(a, b);c[0] = d[0];c[1] = d[1];c[2] = d[2];c[3] = d[3];c[4] = d[4];c[5] = d[5];c[6] = d[6];c[7] = d[7];c[8] = d[8];c[9] = d[9];c[10] = d[10];c[11] = d[11];c[12] = d[12];c[13] = d[13];c[14] = d[14];c[15] = d[15];return this;
	  }, multiplyScalar: function multiplyScalar(a) {
	    var b = this.elements;b[0] *= a;b[4] *= a;b[8] *= a;
	    b[12] *= a;b[1] *= a;b[5] *= a;b[9] *= a;b[13] *= a;b[2] *= a;b[6] *= a;b[10] *= a;b[14] *= a;b[3] *= a;b[7] *= a;b[11] *= a;b[15] *= a;return this;
	  }, multiplyVector3: function multiplyVector3(a) {
	    console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.");return a.applyProjection(this);
	  }, multiplyVector4: function multiplyVector4(a) {
	    console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.");return a.applyMatrix4(this);
	  }, multiplyVector3Array: function multiplyVector3Array(a) {
	    console.warn("THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.");
	    return this.applyToVector3Array(a);
	  }, applyToVector3Array: function () {
	    var a;return function (b, c, d) {
	      void 0 === a && (a = new THREE.Vector3());void 0 === c && (c = 0);void 0 === d && (d = b.length);for (var e = 0; e < d; e += 3, c += 3) {
	        a.fromArray(b, c), a.applyMatrix4(this), a.toArray(b, c);
	      }return b;
	    };
	  }(), applyToBuffer: function () {
	    var a;return function (b, c, d) {
	      void 0 === a && (a = new THREE.Vector3());void 0 === c && (c = 0);void 0 === d && (d = b.length / b.itemSize);for (var e = 0; e < d; e++, c++) {
	        a.x = b.getX(c), a.y = b.getY(c), a.z = b.getZ(c), a.applyMatrix4(this), b.setXYZ(a.x, a.y, a.z);
	      }return b;
	    };
	  }(), rotateAxis: function rotateAxis(a) {
	    console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.");a.transformDirection(this);
	  }, crossVector: function crossVector(a) {
	    console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.");return a.applyMatrix4(this);
	  }, determinant: function determinant() {
	    var a = this.elements,
	        b = a[0],
	        c = a[4],
	        d = a[8],
	        e = a[12],
	        g = a[1],
	        f = a[5],
	        h = a[9],
	        l = a[13],
	        k = a[2],
	        m = a[6],
	        p = a[10],
	        n = a[14];return a[3] * (+e * h * m - d * l * m - e * f * p + c * l * p + d * f * n - c * h * n) + a[7] * (+b * h * n - b * l * p + e * g * p - d * g * n + d * l * k - e * h * k) + a[11] * (+b * l * m - b * f * n - e * g * m + c * g * n + e * f * k - c * l * k) + a[15] * (-d * f * k - b * h * m + b * f * p + d * g * m - c * g * p + c * h * k);
	  }, transpose: function transpose() {
	    var a = this.elements,
	        b;b = a[1];a[1] = a[4];a[4] = b;b = a[2];a[2] = a[8];a[8] = b;b = a[6];a[6] = a[9];a[9] = b;b = a[3];a[3] = a[12];a[12] = b;b = a[7];a[7] = a[13];a[13] = b;b = a[11];a[11] = a[14];a[14] = b;return this;
	  }, flattenToArrayOffset: function flattenToArrayOffset(a, b) {
	    var c = this.elements;a[b] = c[0];a[b + 1] = c[1];a[b + 2] = c[2];a[b + 3] = c[3];a[b + 4] = c[4];a[b + 5] = c[5];a[b + 6] = c[6];a[b + 7] = c[7];a[b + 8] = c[8];a[b + 9] = c[9];a[b + 10] = c[10];a[b + 11] = c[11];a[b + 12] = c[12];a[b + 13] = c[13];a[b + 14] = c[14];a[b + 15] = c[15];return a;
	  }, getPosition: function () {
	    var a;return function () {
	      void 0 === a && (a = new THREE.Vector3());console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.");var b = this.elements;return a.set(b[12], b[13], b[14]);
	    };
	  }(), setPosition: function setPosition(a) {
	    var b = this.elements;b[12] = a.x;b[13] = a.y;b[14] = a.z;return this;
	  }, getInverse: function getInverse(a, b) {
	    var c = this.elements,
	        d = a.elements,
	        e = d[0],
	        g = d[4],
	        f = d[8],
	        h = d[12],
	        l = d[1],
	        k = d[5],
	        m = d[9],
	        p = d[13],
	        n = d[2],
	        q = d[6],
	        s = d[10],
	        t = d[14],
	        v = d[3],
	        u = d[7],
	        w = d[11],
	        d = d[15];c[0] = m * t * u - p * s * u + p * q * w - k * t * w - m * q * d + k * s * d;c[4] = h * s * u - f * t * u - h * q * w + g * t * w + f * q * d - g * s * d;c[8] = f * p * u - h * m * u + h * k * w - g * p * w - f * k * d + g * m * d;c[12] = h * m * q - f * p * q - h * k * s + g * p * s + f * k * t - g * m * t;c[1] = p * s * v - m * t * v - p * n * w + l * t * w + m * n * d - l * s * d;c[5] = f * t * v - h * s * v + h * n * w - e * t * w - f * n * d + e * s * d;c[9] = h * m * v - f * p * v - h * l * w + e * p * w + f * l * d - e * m * d;c[13] = f * p * n - h * m * n + h * l * s - e * p * s - f * l * t + e * m * t;c[2] = k * t * v - p * q * v + p * n * u - l * t * u - k * n * d + l * q * d;c[6] = h * q * v - g * t * v - h * n * u + e * t * u + g * n * d - e * q * d;c[10] = g * p * v - h * k * v + h * l * u - e * p * u - g * l * d + e * k * d;c[14] = h * k * n - g * p * n - h * l * q + e * p * q + g * l * t - e * k * t;c[3] = m * q * v - k * s * v - m * n * u + l * s * u + k * n * w - l * q * w;c[7] = g * s * v - f * q * v + f * n * u - e * s * u - g * n * w + e * q * w;c[11] = f * k * v - g * m * v - f * l * u + e * m * u + g * l * w - e * k * w;c[15] = g * m * n - f * k * n + f * l * q - e * m * q - g * l * s + e * k * s;c = e * c[0] + l * c[4] + n * c[8] + v * c[12];if (0 === c) {
	      if (b) throw Error("THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0");console.warn("THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0");
	      this.identity();return this;
	    }this.multiplyScalar(1 / c);return this;
	  }, translate: function translate(a) {
	    console.error("THREE.Matrix4: .translate() has been removed.");
	  }, rotateX: function rotateX(a) {
	    console.error("THREE.Matrix4: .rotateX() has been removed.");
	  }, rotateY: function rotateY(a) {
	    console.error("THREE.Matrix4: .rotateY() has been removed.");
	  }, rotateZ: function rotateZ(a) {
	    console.error("THREE.Matrix4: .rotateZ() has been removed.");
	  }, rotateByAxis: function rotateByAxis(a, b) {
	    console.error("THREE.Matrix4: .rotateByAxis() has been removed.");
	  }, scale: function scale(a) {
	    var b = this.elements,
	        c = a.x,
	        d = a.y;a = a.z;b[0] *= c;b[4] *= d;b[8] *= a;b[1] *= c;b[5] *= d;b[9] *= a;b[2] *= c;b[6] *= d;b[10] *= a;b[3] *= c;b[7] *= d;b[11] *= a;return this;
	  }, getMaxScaleOnAxis: function getMaxScaleOnAxis() {
	    var a = this.elements;return Math.sqrt(Math.max(a[0] * a[0] + a[1] * a[1] + a[2] * a[2], a[4] * a[4] + a[5] * a[5] + a[6] * a[6], a[8] * a[8] + a[9] * a[9] + a[10] * a[10]));
	  }, makeTranslation: function makeTranslation(a, b, c) {
	    this.set(1, 0, 0, a, 0, 1, 0, b, 0, 0, 1, c, 0, 0, 0, 1);return this;
	  }, makeRotationX: function makeRotationX(a) {
	    var b = Math.cos(a);a = Math.sin(a);this.set(1, 0, 0, 0, 0, b, -a, 0, 0, a, b, 0, 0, 0, 0, 1);
	    return this;
	  }, makeRotationY: function makeRotationY(a) {
	    var b = Math.cos(a);a = Math.sin(a);this.set(b, 0, a, 0, 0, 1, 0, 0, -a, 0, b, 0, 0, 0, 0, 1);return this;
	  }, makeRotationZ: function makeRotationZ(a) {
	    var b = Math.cos(a);a = Math.sin(a);this.set(b, -a, 0, 0, a, b, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);return this;
	  }, makeRotationAxis: function makeRotationAxis(a, b) {
	    var c = Math.cos(b),
	        d = Math.sin(b),
	        e = 1 - c,
	        g = a.x,
	        f = a.y,
	        h = a.z,
	        l = e * g,
	        k = e * f;this.set(l * g + c, l * f - d * h, l * h + d * f, 0, l * f + d * h, k * f + c, k * h - d * g, 0, l * h - d * f, k * h + d * g, e * h * h + c, 0, 0, 0, 0, 1);return this;
	  }, makeScale: function makeScale(a, b, c) {
	    this.set(a, 0, 0, 0, 0, b, 0, 0, 0, 0, c, 0, 0, 0, 0, 1);return this;
	  }, compose: function compose(a, b, c) {
	    this.makeRotationFromQuaternion(b);this.scale(c);this.setPosition(a);return this;
	  }, decompose: function () {
	    var a, b;return function (c, d, e) {
	      void 0 === a && (a = new THREE.Vector3());void 0 === b && (b = new THREE.Matrix4());var g = this.elements,
	          f = a.set(g[0], g[1], g[2]).length(),
	          h = a.set(g[4], g[5], g[6]).length(),
	          l = a.set(g[8], g[9], g[10]).length();0 > this.determinant() && (f = -f);c.x = g[12];c.y = g[13];c.z = g[14];b.elements.set(this.elements);c = 1 / f;var g = 1 / h,
	          k = 1 / l;b.elements[0] *= c;b.elements[1] *= c;b.elements[2] *= c;b.elements[4] *= g;b.elements[5] *= g;b.elements[6] *= g;b.elements[8] *= k;b.elements[9] *= k;b.elements[10] *= k;d.setFromRotationMatrix(b);e.x = f;e.y = h;e.z = l;return this;
	    };
	  }(), makeFrustum: function makeFrustum(a, b, c, d, e, g) {
	    var f = this.elements;f[0] = 2 * e / (b - a);f[4] = 0;f[8] = (b + a) / (b - a);f[12] = 0;f[1] = 0;f[5] = 2 * e / (d - c);f[9] = (d + c) / (d - c);f[13] = 0;f[2] = 0;f[6] = 0;f[10] = -(g + e) / (g - e);f[14] = -2 * g * e / (g - e);f[3] = 0;f[7] = 0;f[11] = -1;f[15] = 0;return this;
	  }, makePerspective: function makePerspective(a, b, c, d) {
	    a = c * Math.tan(THREE.Math.degToRad(.5 * a));
	    var e = -a;return this.makeFrustum(e * b, a * b, e, a, c, d);
	  }, makeOrthographic: function makeOrthographic(a, b, c, d, e, g) {
	    var f = this.elements,
	        h = b - a,
	        l = c - d,
	        k = g - e;f[0] = 2 / h;f[4] = 0;f[8] = 0;f[12] = -((b + a) / h);f[1] = 0;f[5] = 2 / l;f[9] = 0;f[13] = -((c + d) / l);f[2] = 0;f[6] = 0;f[10] = -2 / k;f[14] = -((g + e) / k);f[3] = 0;f[7] = 0;f[11] = 0;f[15] = 1;return this;
	  }, equals: function equals(a) {
	    var b = this.elements;a = a.elements;for (var c = 0; 16 > c; c++) {
	      if (b[c] !== a[c]) return !1;
	    }return !0;
	  }, fromArray: function fromArray(a) {
	    this.elements.set(a);return this;
	  }, toArray: function toArray() {
	    var a = this.elements;return [a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]];
	  } };THREE.Ray = function (a, b) {
	  this.origin = void 0 !== a ? a : new THREE.Vector3();this.direction = void 0 !== b ? b : new THREE.Vector3();
	};
	THREE.Ray.prototype = { constructor: THREE.Ray, set: function set(a, b) {
	    this.origin.copy(a);this.direction.copy(b);return this;
	  }, clone: function clone() {
	    return new this.constructor().copy(this);
	  }, copy: function copy(a) {
	    this.origin.copy(a.origin);this.direction.copy(a.direction);return this;
	  }, at: function at(a, b) {
	    return (b || new THREE.Vector3()).copy(this.direction).multiplyScalar(a).add(this.origin);
	  }, recast: function () {
	    var a = new THREE.Vector3();return function (b) {
	      this.origin.copy(this.at(b, a));return this;
	    };
	  }(), closestPointToPoint: function closestPointToPoint(a, b) {
	    var c = b || new THREE.Vector3();c.subVectors(a, this.origin);var d = c.dot(this.direction);return 0 > d ? c.copy(this.origin) : c.copy(this.direction).multiplyScalar(d).add(this.origin);
	  }, distanceToPoint: function distanceToPoint(a) {
	    return Math.sqrt(this.distanceSqToPoint(a));
	  }, distanceSqToPoint: function () {
	    var a = new THREE.Vector3();return function (b) {
	      var c = a.subVectors(b, this.origin).dot(this.direction);if (0 > c) return this.origin.distanceToSquared(b);a.copy(this.direction).multiplyScalar(c).add(this.origin);return a.distanceToSquared(b);
	    };
	  }(),
	  distanceSqToSegment: function () {
	    var a = new THREE.Vector3(),
	        b = new THREE.Vector3(),
	        c = new THREE.Vector3();return function (d, e, g, f) {
	      a.copy(d).add(e).multiplyScalar(.5);b.copy(e).sub(d).normalize();c.copy(this.origin).sub(a);var h = .5 * d.distanceTo(e),
	          l = -this.direction.dot(b),
	          k = c.dot(this.direction),
	          m = -c.dot(b),
	          p = c.lengthSq(),
	          n = Math.abs(1 - l * l),
	          q;0 < n ? (d = l * m - k, e = l * k - m, q = h * n, 0 <= d ? e >= -q ? e <= q ? (h = 1 / n, d *= h, e *= h, l = d * (d + l * e + 2 * k) + e * (l * d + e + 2 * m) + p) : (e = h, d = Math.max(0, -(l * e + k)), l = -d * d + e * (e + 2 * m) + p) : (e = -h, d = Math.max(0, -(l * e + k)), l = -d * d + e * (e + 2 * m) + p) : e <= -q ? (d = Math.max(0, -(-l * h + k)), e = 0 < d ? -h : Math.min(Math.max(-h, -m), h), l = -d * d + e * (e + 2 * m) + p) : e <= q ? (d = 0, e = Math.min(Math.max(-h, -m), h), l = e * (e + 2 * m) + p) : (d = Math.max(0, -(l * h + k)), e = 0 < d ? h : Math.min(Math.max(-h, -m), h), l = -d * d + e * (e + 2 * m) + p)) : (e = 0 < l ? -h : h, d = Math.max(0, -(l * e + k)), l = -d * d + e * (e + 2 * m) + p);g && g.copy(this.direction).multiplyScalar(d).add(this.origin);f && f.copy(b).multiplyScalar(e).add(a);return l;
	    };
	  }(), isIntersectionSphere: function isIntersectionSphere(a) {
	    return this.distanceToPoint(a.center) <= a.radius;
	  }, intersectSphere: function () {
	    var a = new THREE.Vector3();return function (b, c) {
	      a.subVectors(b.center, this.origin);var d = a.dot(this.direction),
	          e = a.dot(a) - d * d,
	          g = b.radius * b.radius;if (e > g) return null;g = Math.sqrt(g - e);e = d - g;d += g;return 0 > e && 0 > d ? null : 0 > e ? this.at(d, c) : this.at(e, c);
	    };
	  }(), isIntersectionPlane: function isIntersectionPlane(a) {
	    var b = a.distanceToPoint(this.origin);return 0 === b || 0 > a.normal.dot(this.direction) * b ? !0 : !1;
	  }, distanceToPlane: function distanceToPlane(a) {
	    var b = a.normal.dot(this.direction);if (0 === b) return 0 === a.distanceToPoint(this.origin) ? 0 : null;a = -(this.origin.dot(a.normal) + a.constant) / b;return 0 <= a ? a : null;
	  }, intersectPlane: function intersectPlane(a, b) {
	    var c = this.distanceToPlane(a);return null === c ? null : this.at(c, b);
	  }, isIntersectionBox: function () {
	    var a = new THREE.Vector3();return function (b) {
	      return null !== this.intersectBox(b, a);
	    };
	  }(), intersectBox: function intersectBox(a, b) {
	    var c, d, e, g, f;d = 1 / this.direction.x;g = 1 / this.direction.y;f = 1 / this.direction.z;var h = this.origin;0 <= d ? (c = (a.min.x - h.x) * d, d *= a.max.x - h.x) : (c = (a.max.x - h.x) * d, d *= a.min.x - h.x);0 <= g ? (e = (a.min.y - h.y) * g, g *= a.max.y - h.y) : (e = (a.max.y - h.y) * g, g *= a.min.y - h.y);if (c > g || e > d) return null;if (e > c || c !== c) c = e;if (g < d || d !== d) d = g;0 <= f ? (e = (a.min.z - h.z) * f, f *= a.max.z - h.z) : (e = (a.max.z - h.z) * f, f *= a.min.z - h.z);if (c > f || e > d) return null;if (e > c || c !== c) c = e;if (f < d || d !== d) d = f;return 0 > d ? null : this.at(0 <= c ? c : d, b);
	  }, intersectTriangle: function () {
	    var a = new THREE.Vector3(),
	        b = new THREE.Vector3(),
	        c = new THREE.Vector3(),
	        d = new THREE.Vector3();return function (e, g, f, h, l) {
	      b.subVectors(g, e);c.subVectors(f, e);d.crossVectors(b, c);g = this.direction.dot(d);if (0 < g) {
	        if (h) return null;h = 1;
	      } else if (0 > g) h = -1, g = -g;else return null;a.subVectors(this.origin, e);e = h * this.direction.dot(c.crossVectors(a, c));if (0 > e) return null;f = h * this.direction.dot(b.cross(a));if (0 > f || e + f > g) return null;e = -h * a.dot(d);return 0 > e ? null : this.at(e / g, l);
	    };
	  }(), applyMatrix4: function applyMatrix4(a) {
	    this.direction.add(this.origin).applyMatrix4(a);this.origin.applyMatrix4(a);this.direction.sub(this.origin);this.direction.normalize();return this;
	  }, equals: function equals(a) {
	    return a.origin.equals(this.origin) && a.direction.equals(this.direction);
	  } };
	THREE.Sphere = function (a, b) {
	  this.center = void 0 !== a ? a : new THREE.Vector3();this.radius = void 0 !== b ? b : 0;
	};
	THREE.Sphere.prototype = { constructor: THREE.Sphere, set: function set(a, b) {
	    this.center.copy(a);this.radius = b;return this;
	  }, setFromPoints: function () {
	    var a = new THREE.Box3();return function (b, c) {
	      var d = this.center;void 0 !== c ? d.copy(c) : a.setFromPoints(b).center(d);for (var e = 0, g = 0, f = b.length; g < f; g++) {
	        e = Math.max(e, d.distanceToSquared(b[g]));
	      }this.radius = Math.sqrt(e);return this;
	    };
	  }(), clone: function clone() {
	    return new this.constructor().copy(this);
	  }, copy: function copy(a) {
	    this.center.copy(a.center);this.radius = a.radius;return this;
	  },
	  empty: function empty() {
	    return 0 >= this.radius;
	  }, containsPoint: function containsPoint(a) {
	    return a.distanceToSquared(this.center) <= this.radius * this.radius;
	  }, distanceToPoint: function distanceToPoint(a) {
	    return a.distanceTo(this.center) - this.radius;
	  }, intersectsSphere: function intersectsSphere(a) {
	    var b = this.radius + a.radius;return a.center.distanceToSquared(this.center) <= b * b;
	  }, clampPoint: function clampPoint(a, b) {
	    var c = this.center.distanceToSquared(a),
	        d = b || new THREE.Vector3();d.copy(a);c > this.radius * this.radius && (d.sub(this.center).normalize(), d.multiplyScalar(this.radius).add(this.center));
	    return d;
	  }, getBoundingBox: function getBoundingBox(a) {
	    a = a || new THREE.Box3();a.set(this.center, this.center);a.expandByScalar(this.radius);return a;
	  }, applyMatrix4: function applyMatrix4(a) {
	    this.center.applyMatrix4(a);this.radius *= a.getMaxScaleOnAxis();return this;
	  }, translate: function translate(a) {
	    this.center.add(a);return this;
	  }, equals: function equals(a) {
	    return a.center.equals(this.center) && a.radius === this.radius;
	  } };
	THREE.Frustum = function (a, b, c, d, e, g) {
	  this.planes = [void 0 !== a ? a : new THREE.Plane(), void 0 !== b ? b : new THREE.Plane(), void 0 !== c ? c : new THREE.Plane(), void 0 !== d ? d : new THREE.Plane(), void 0 !== e ? e : new THREE.Plane(), void 0 !== g ? g : new THREE.Plane()];
	};
	THREE.Frustum.prototype = { constructor: THREE.Frustum, set: function set(a, b, c, d, e, g) {
	    var f = this.planes;f[0].copy(a);f[1].copy(b);f[2].copy(c);f[3].copy(d);f[4].copy(e);f[5].copy(g);return this;
	  }, clone: function clone() {
	    return new this.constructor().copy(this);
	  }, copy: function copy(a) {
	    for (var b = this.planes, c = 0; 6 > c; c++) {
	      b[c].copy(a.planes[c]);
	    }return this;
	  }, setFromMatrix: function setFromMatrix(a) {
	    var b = this.planes,
	        c = a.elements;a = c[0];var d = c[1],
	        e = c[2],
	        g = c[3],
	        f = c[4],
	        h = c[5],
	        l = c[6],
	        k = c[7],
	        m = c[8],
	        p = c[9],
	        n = c[10],
	        q = c[11],
	        s = c[12],
	        t = c[13],
	        v = c[14],
	        c = c[15];b[0].setComponents(g - a, k - f, q - m, c - s).normalize();b[1].setComponents(g + a, k + f, q + m, c + s).normalize();b[2].setComponents(g + d, k + h, q + p, c + t).normalize();b[3].setComponents(g - d, k - h, q - p, c - t).normalize();b[4].setComponents(g - e, k - l, q - n, c - v).normalize();b[5].setComponents(g + e, k + l, q + n, c + v).normalize();return this;
	  }, intersectsObject: function () {
	    var a = new THREE.Sphere();return function (b) {
	      var c = b.geometry;null === c.boundingSphere && c.computeBoundingSphere();a.copy(c.boundingSphere);a.applyMatrix4(b.matrixWorld);
	      return this.intersectsSphere(a);
	    };
	  }(), intersectsSphere: function intersectsSphere(a) {
	    var b = this.planes,
	        c = a.center;a = -a.radius;for (var d = 0; 6 > d; d++) {
	      if (b[d].distanceToPoint(c) < a) return !1;
	    }return !0;
	  }, intersectsBox: function () {
	    var a = new THREE.Vector3(),
	        b = new THREE.Vector3();return function (c) {
	      for (var d = this.planes, e = 0; 6 > e; e++) {
	        var g = d[e];a.x = 0 < g.normal.x ? c.min.x : c.max.x;b.x = 0 < g.normal.x ? c.max.x : c.min.x;a.y = 0 < g.normal.y ? c.min.y : c.max.y;b.y = 0 < g.normal.y ? c.max.y : c.min.y;a.z = 0 < g.normal.z ? c.min.z : c.max.z;b.z = 0 < g.normal.z ? c.max.z : c.min.z;
	        var f = g.distanceToPoint(a),
	            g = g.distanceToPoint(b);if (0 > f && 0 > g) return !1;
	      }return !0;
	    };
	  }(), containsPoint: function containsPoint(a) {
	    for (var b = this.planes, c = 0; 6 > c; c++) {
	      if (0 > b[c].distanceToPoint(a)) return !1;
	    }return !0;
	  } };THREE.Plane = function (a, b) {
	  this.normal = void 0 !== a ? a : new THREE.Vector3(1, 0, 0);this.constant = void 0 !== b ? b : 0;
	};
	THREE.Plane.prototype = { constructor: THREE.Plane, set: function set(a, b) {
	    this.normal.copy(a);this.constant = b;return this;
	  }, setComponents: function setComponents(a, b, c, d) {
	    this.normal.set(a, b, c);this.constant = d;return this;
	  }, setFromNormalAndCoplanarPoint: function setFromNormalAndCoplanarPoint(a, b) {
	    this.normal.copy(a);this.constant = -b.dot(this.normal);return this;
	  }, setFromCoplanarPoints: function () {
	    var a = new THREE.Vector3(),
	        b = new THREE.Vector3();return function (c, d, e) {
	      d = a.subVectors(e, d).cross(b.subVectors(c, d)).normalize();this.setFromNormalAndCoplanarPoint(d, c);return this;
	    };
	  }(), clone: function clone() {
	    return new this.constructor().copy(this);
	  }, copy: function copy(a) {
	    this.normal.copy(a.normal);this.constant = a.constant;return this;
	  }, normalize: function normalize() {
	    var a = 1 / this.normal.length();this.normal.multiplyScalar(a);this.constant *= a;return this;
	  }, negate: function negate() {
	    this.constant *= -1;this.normal.negate();return this;
	  }, distanceToPoint: function distanceToPoint(a) {
	    return this.normal.dot(a) + this.constant;
	  }, distanceToSphere: function distanceToSphere(a) {
	    return this.distanceToPoint(a.center) - a.radius;
	  }, projectPoint: function projectPoint(a, b) {
	    return this.orthoPoint(a, b).sub(a).negate();
	  }, orthoPoint: function orthoPoint(a, b) {
	    var c = this.distanceToPoint(a);return (b || new THREE.Vector3()).copy(this.normal).multiplyScalar(c);
	  }, isIntersectionLine: function isIntersectionLine(a) {
	    var b = this.distanceToPoint(a.start);a = this.distanceToPoint(a.end);return 0 > b && 0 < a || 0 > a && 0 < b;
	  }, intersectLine: function () {
	    var a = new THREE.Vector3();return function (b, c) {
	      var d = c || new THREE.Vector3(),
	          e = b.delta(a),
	          g = this.normal.dot(e);if (0 === g) {
	        if (0 === this.distanceToPoint(b.start)) return d.copy(b.start);
	      } else return g = -(b.start.dot(this.normal) + this.constant) / g, 0 > g || 1 < g ? void 0 : d.copy(e).multiplyScalar(g).add(b.start);
	    };
	  }(), coplanarPoint: function coplanarPoint(a) {
	    return (a || new THREE.Vector3()).copy(this.normal).multiplyScalar(-this.constant);
	  }, applyMatrix4: function () {
	    var a = new THREE.Vector3(),
	        b = new THREE.Vector3(),
	        c = new THREE.Matrix3();return function (d, e) {
	      var g = e || c.getNormalMatrix(d),
	          g = a.copy(this.normal).applyMatrix3(g),
	          f = this.coplanarPoint(b);f.applyMatrix4(d);this.setFromNormalAndCoplanarPoint(g, f);return this;
	    };
	  }(), translate: function translate(a) {
	    this.constant -= a.dot(this.normal);return this;
	  }, equals: function equals(a) {
	    return a.normal.equals(this.normal) && a.constant === this.constant;
	  } };
	THREE.Math = { generateUUID: function () {
	    var a = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),
	        b = Array(36),
	        c = 0,
	        d;return function () {
	      for (var e = 0; 36 > e; e++) {
	        8 === e || 13 === e || 18 === e || 23 === e ? b[e] = "-" : 14 === e ? b[e] = "4" : (2 >= c && (c = 33554432 + 16777216 * Math.random() | 0), d = c & 15, c >>= 4, b[e] = a[19 === e ? d & 3 | 8 : d]);
	      }return b.join("");
	    };
	  }(), clamp: function clamp(a, b, c) {
	    return Math.max(b, Math.min(c, a));
	  }, euclideanModulo: function euclideanModulo(a, b) {
	    return (a % b + b) % b;
	  }, mapLinear: function mapLinear(a, b, c, d, e) {
	    return d + (a - b) * (e - d) / (c - b);
	  }, smoothstep: function smoothstep(a, b, c) {
	    if (a <= b) return 0;if (a >= c) return 1;a = (a - b) / (c - b);return a * a * (3 - 2 * a);
	  }, smootherstep: function smootherstep(a, b, c) {
	    if (a <= b) return 0;if (a >= c) return 1;a = (a - b) / (c - b);return a * a * a * (a * (6 * a - 15) + 10);
	  }, random16: function random16() {
	    return (65280 * Math.random() + 255 * Math.random()) / 65535;
	  }, randInt: function randInt(a, b) {
	    return a + Math.floor(Math.random() * (b - a + 1));
	  }, randFloat: function randFloat(a, b) {
	    return a + Math.random() * (b - a);
	  }, randFloatSpread: function randFloatSpread(a) {
	    return a * (.5 - Math.random());
	  }, degToRad: function () {
	    var a = Math.PI / 180;return function (b) {
	      return b * a;
	    };
	  }(),
	  radToDeg: function () {
	    var a = 180 / Math.PI;return function (b) {
	      return b * a;
	    };
	  }(), isPowerOfTwo: function isPowerOfTwo(a) {
	    return 0 === (a & a - 1) && 0 !== a;
	  }, nearestPowerOfTwo: function nearestPowerOfTwo(a) {
	    return Math.pow(2, Math.round(Math.log(a) / Math.LN2));
	  }, nextPowerOfTwo: function nextPowerOfTwo(a) {
	    a--;a |= a >> 1;a |= a >> 2;a |= a >> 4;a |= a >> 8;a |= a >> 16;a++;return a;
	  } };
	THREE.Spline = function (a) {
	  function b(a, b, c, d, e, g, f) {
	    a = .5 * (c - a);d = .5 * (d - b);return (2 * (b - c) + a + d) * f + (-3 * (b - c) - 2 * a - d) * g + a * e + b;
	  }this.points = a;var c = [],
	      d = { x: 0, y: 0, z: 0 },
	      e,
	      g,
	      f,
	      h,
	      l,
	      k,
	      m,
	      p,
	      n;this.initFromArray = function (a) {
	    this.points = [];for (var b = 0; b < a.length; b++) {
	      this.points[b] = { x: a[b][0], y: a[b][1], z: a[b][2] };
	    }
	  };this.getPoint = function (a) {
	    e = (this.points.length - 1) * a;g = Math.floor(e);f = e - g;c[0] = 0 === g ? g : g - 1;c[1] = g;c[2] = g > this.points.length - 2 ? this.points.length - 1 : g + 1;c[3] = g > this.points.length - 3 ? this.points.length - 1 : g + 2;k = this.points[c[0]];m = this.points[c[1]];p = this.points[c[2]];n = this.points[c[3]];h = f * f;l = f * h;d.x = b(k.x, m.x, p.x, n.x, f, h, l);d.y = b(k.y, m.y, p.y, n.y, f, h, l);d.z = b(k.z, m.z, p.z, n.z, f, h, l);return d;
	  };this.getControlPointsArray = function () {
	    var a,
	        b,
	        c = this.points.length,
	        d = [];for (a = 0; a < c; a++) {
	      b = this.points[a], d[a] = [b.x, b.y, b.z];
	    }return d;
	  };this.getLength = function (a) {
	    var b,
	        c,
	        d,
	        e = b = b = 0,
	        g = new THREE.Vector3(),
	        f = new THREE.Vector3(),
	        h = [],
	        l = 0;h[0] = 0;a || (a = 100);c = this.points.length * a;g.copy(this.points[0]);for (a = 1; a < c; a++) {
	      b = a / c, d = this.getPoint(b), f.copy(d), l += f.distanceTo(g), g.copy(d), b *= this.points.length - 1, b = Math.floor(b), b !== e && (h[b] = l, e = b);
	    }h[h.length] = l;return { chunks: h, total: l };
	  };this.reparametrizeByArcLength = function (a) {
	    var b,
	        c,
	        d,
	        e,
	        g,
	        f,
	        h = [],
	        l = new THREE.Vector3(),
	        k = this.getLength();h.push(l.copy(this.points[0]).clone());for (b = 1; b < this.points.length; b++) {
	      c = k.chunks[b] - k.chunks[b - 1];f = Math.ceil(a * c / k.total);e = (b - 1) / (this.points.length - 1);g = b / (this.points.length - 1);for (c = 1; c < f - 1; c++) {
	        d = e + 1 / f * c * (g - e), d = this.getPoint(d), h.push(l.copy(d).clone());
	      }h.push(l.copy(this.points[b]).clone());
	    }this.points = h;
	  };
	};THREE.Triangle = function (a, b, c) {
	  this.a = void 0 !== a ? a : new THREE.Vector3();this.b = void 0 !== b ? b : new THREE.Vector3();this.c = void 0 !== c ? c : new THREE.Vector3();
	};THREE.Triangle.normal = function () {
	  var a = new THREE.Vector3();return function (b, c, d, e) {
	    e = e || new THREE.Vector3();e.subVectors(d, c);a.subVectors(b, c);e.cross(a);b = e.lengthSq();return 0 < b ? e.multiplyScalar(1 / Math.sqrt(b)) : e.set(0, 0, 0);
	  };
	}();
	THREE.Triangle.barycoordFromPoint = function () {
	  var a = new THREE.Vector3(),
	      b = new THREE.Vector3(),
	      c = new THREE.Vector3();return function (d, e, g, f, h) {
	    a.subVectors(f, e);b.subVectors(g, e);c.subVectors(d, e);d = a.dot(a);e = a.dot(b);g = a.dot(c);var l = b.dot(b);f = b.dot(c);var k = d * l - e * e;h = h || new THREE.Vector3();if (0 === k) return h.set(-2, -1, -1);k = 1 / k;l = (l * g - e * f) * k;d = (d * f - e * g) * k;return h.set(1 - l - d, d, l);
	  };
	}();
	THREE.Triangle.containsPoint = function () {
	  var a = new THREE.Vector3();return function (b, c, d, e) {
	    b = THREE.Triangle.barycoordFromPoint(b, c, d, e, a);return 0 <= b.x && 0 <= b.y && 1 >= b.x + b.y;
	  };
	}();
	THREE.Triangle.prototype = { constructor: THREE.Triangle, set: function set(a, b, c) {
	    this.a.copy(a);this.b.copy(b);this.c.copy(c);return this;
	  }, setFromPointsAndIndices: function setFromPointsAndIndices(a, b, c, d) {
	    this.a.copy(a[b]);this.b.copy(a[c]);this.c.copy(a[d]);return this;
	  }, clone: function clone() {
	    return new this.constructor().copy(this);
	  }, copy: function copy(a) {
	    this.a.copy(a.a);this.b.copy(a.b);this.c.copy(a.c);return this;
	  }, area: function () {
	    var a = new THREE.Vector3(),
	        b = new THREE.Vector3();return function () {
	      a.subVectors(this.c, this.b);b.subVectors(this.a, this.b);return .5 * a.cross(b).length();
	    };
	  }(), midpoint: function midpoint(a) {
	    return (a || new THREE.Vector3()).addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
	  }, normal: function normal(a) {
	    return THREE.Triangle.normal(this.a, this.b, this.c, a);
	  }, plane: function plane(a) {
	    return (a || new THREE.Plane()).setFromCoplanarPoints(this.a, this.b, this.c);
	  }, barycoordFromPoint: function barycoordFromPoint(a, b) {
	    return THREE.Triangle.barycoordFromPoint(a, this.a, this.b, this.c, b);
	  }, containsPoint: function containsPoint(a) {
	    return THREE.Triangle.containsPoint(a, this.a, this.b, this.c);
	  },
	  equals: function equals(a) {
	    return a.a.equals(this.a) && a.b.equals(this.b) && a.c.equals(this.c);
	  } };THREE.Channels = function () {
	  this.mask = 1;
	};THREE.Channels.prototype = { constructor: THREE.Channels, set: function set(a) {
	    this.mask = 1 << a;
	  }, enable: function enable(a) {
	    this.mask |= 1 << a;
	  }, toggle: function toggle(a) {
	    this.mask ^= 1 << a;
	  }, disable: function disable(a) {
	    this.mask &= ~(1 << a);
	  } };THREE.Clock = function (a) {
	  this.autoStart = void 0 !== a ? a : !0;this.elapsedTime = this.oldTime = this.startTime = 0;this.running = !1;
	};
	THREE.Clock.prototype = { constructor: THREE.Clock, start: function start() {
	    this.oldTime = this.startTime = self.performance.now();this.running = !0;
	  }, stop: function stop() {
	    this.getElapsedTime();this.running = !1;
	  }, getElapsedTime: function getElapsedTime() {
	    this.getDelta();return this.elapsedTime;
	  }, getDelta: function getDelta() {
	    var a = 0;this.autoStart && !this.running && this.start();if (this.running) {
	      var b = self.performance.now(),
	          a = .001 * (b - this.oldTime);this.oldTime = b;this.elapsedTime += a;
	    }return a;
	  } };THREE.EventDispatcher = function () {};
	THREE.EventDispatcher.prototype = { constructor: THREE.EventDispatcher, apply: function apply(a) {
	    a.addEventListener = THREE.EventDispatcher.prototype.addEventListener;a.hasEventListener = THREE.EventDispatcher.prototype.hasEventListener;a.removeEventListener = THREE.EventDispatcher.prototype.removeEventListener;a.dispatchEvent = THREE.EventDispatcher.prototype.dispatchEvent;
	  }, addEventListener: function addEventListener(a, b) {
	    void 0 === this._listeners && (this._listeners = {});var c = this._listeners;void 0 === c[a] && (c[a] = []);-1 === c[a].indexOf(b) && c[a].push(b);
	  }, hasEventListener: function hasEventListener(a, b) {
	    if (void 0 === this._listeners) return !1;var c = this._listeners;return void 0 !== c[a] && -1 !== c[a].indexOf(b) ? !0 : !1;
	  }, removeEventListener: function removeEventListener(a, b) {
	    if (void 0 !== this._listeners) {
	      var c = this._listeners[a];if (void 0 !== c) {
	        var d = c.indexOf(b);-1 !== d && c.splice(d, 1);
	      }
	    }
	  }, dispatchEvent: function dispatchEvent(a) {
	    if (void 0 !== this._listeners) {
	      var b = this._listeners[a.type];if (void 0 !== b) {
	        a.target = this;for (var c = [], d = b.length, e = 0; e < d; e++) {
	          c[e] = b[e];
	        }for (e = 0; e < d; e++) {
	          c[e].call(this, a);
	        }
	      }
	    }
	  } };
	(function (a) {
	  function b(a, b) {
	    return a.distance - b.distance;
	  }function c(a, b, g, f) {
	    if (!1 !== a.visible && (a.raycast(b, g), !0 === f)) {
	      a = a.children;f = 0;for (var h = a.length; f < h; f++) {
	        c(a[f], b, g, !0);
	      }
	    }
	  }a.Raycaster = function (b, c, g, f) {
	    this.ray = new a.Ray(b, c);this.near = g || 0;this.far = f || Infinity;this.params = { Mesh: {}, Line: {}, LOD: {}, Points: { threshold: 1 }, Sprite: {} };Object.defineProperties(this.params, { PointCloud: { get: function get() {
	          console.warn("THREE.Raycaster: params.PointCloud has been renamed to params.Points.");return this.Points;
	        } } });
	  };
	  a.Raycaster.prototype = { constructor: a.Raycaster, linePrecision: 1, set: function set(a, b) {
	      this.ray.set(a, b);
	    }, setFromCamera: function setFromCamera(b, c) {
	      c instanceof a.PerspectiveCamera ? (this.ray.origin.setFromMatrixPosition(c.matrixWorld), this.ray.direction.set(b.x, b.y, .5).unproject(c).sub(this.ray.origin).normalize()) : c instanceof a.OrthographicCamera ? (this.ray.origin.set(b.x, b.y, -1).unproject(c), this.ray.direction.set(0, 0, -1).transformDirection(c.matrixWorld)) : console.error("THREE.Raycaster: Unsupported camera type.");
	    },
	    intersectObject: function intersectObject(a, e) {
	      var g = [];c(a, this, g, e);g.sort(b);return g;
	    }, intersectObjects: function intersectObjects(a, e) {
	      var g = [];if (!1 === Array.isArray(a)) return console.warn("THREE.Raycaster.intersectObjects: objects is not an Array."), g;for (var f = 0, h = a.length; f < h; f++) {
	        c(a[f], this, g, e);
	      }g.sort(b);return g;
	    } };
	})(THREE);
	THREE.Object3D = function () {
	  Object.defineProperty(this, "id", { value: THREE.Object3DIdCount++ });this.uuid = THREE.Math.generateUUID();this.name = "";this.type = "Object3D";this.parent = null;this.channels = new THREE.Channels();this.children = [];this.up = THREE.Object3D.DefaultUp.clone();var a = new THREE.Vector3(),
	      b = new THREE.Euler(),
	      c = new THREE.Quaternion(),
	      d = new THREE.Vector3(1, 1, 1);b.onChange(function () {
	    c.setFromEuler(b, !1);
	  });c.onChange(function () {
	    b.setFromQuaternion(c, void 0, !1);
	  });Object.defineProperties(this, { position: { enumerable: !0,
	      value: a }, rotation: { enumerable: !0, value: b }, quaternion: { enumerable: !0, value: c }, scale: { enumerable: !0, value: d }, modelViewMatrix: { value: new THREE.Matrix4() }, normalMatrix: { value: new THREE.Matrix3() } });this.rotationAutoUpdate = !0;this.matrix = new THREE.Matrix4();this.matrixWorld = new THREE.Matrix4();this.matrixAutoUpdate = THREE.Object3D.DefaultMatrixAutoUpdate;this.matrixWorldNeedsUpdate = !1;this.visible = !0;this.receiveShadow = this.castShadow = !1;this.frustumCulled = !0;this.renderOrder = 0;this.userData = {};
	};
	THREE.Object3D.DefaultUp = new THREE.Vector3(0, 1, 0);THREE.Object3D.DefaultMatrixAutoUpdate = !0;
	THREE.Object3D.prototype = { constructor: THREE.Object3D, get eulerOrder() {
	    console.warn("THREE.Object3D: .eulerOrder is now .rotation.order.");return this.rotation.order;
	  }, set eulerOrder(a) {
	    console.warn("THREE.Object3D: .eulerOrder is now .rotation.order.");this.rotation.order = a;
	  }, get useQuaternion() {
	    console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.");
	  }, set useQuaternion(a) {
	    console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.");
	  }, set renderDepth(a) {
	    console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.");
	  },
	  applyMatrix: function applyMatrix(a) {
	    this.matrix.multiplyMatrices(a, this.matrix);this.matrix.decompose(this.position, this.quaternion, this.scale);
	  }, setRotationFromAxisAngle: function setRotationFromAxisAngle(a, b) {
	    this.quaternion.setFromAxisAngle(a, b);
	  }, setRotationFromEuler: function setRotationFromEuler(a) {
	    this.quaternion.setFromEuler(a, !0);
	  }, setRotationFromMatrix: function setRotationFromMatrix(a) {
	    this.quaternion.setFromRotationMatrix(a);
	  }, setRotationFromQuaternion: function setRotationFromQuaternion(a) {
	    this.quaternion.copy(a);
	  }, rotateOnAxis: function () {
	    var a = new THREE.Quaternion();return function (b, c) {
	      a.setFromAxisAngle(b, c);this.quaternion.multiply(a);return this;
	    };
	  }(), rotateX: function () {
	    var a = new THREE.Vector3(1, 0, 0);return function (b) {
	      return this.rotateOnAxis(a, b);
	    };
	  }(), rotateY: function () {
	    var a = new THREE.Vector3(0, 1, 0);return function (b) {
	      return this.rotateOnAxis(a, b);
	    };
	  }(), rotateZ: function () {
	    var a = new THREE.Vector3(0, 0, 1);return function (b) {
	      return this.rotateOnAxis(a, b);
	    };
	  }(), translateOnAxis: function () {
	    var a = new THREE.Vector3();return function (b, c) {
	      a.copy(b).applyQuaternion(this.quaternion);this.position.add(a.multiplyScalar(c));
	      return this;
	    };
	  }(), translate: function translate(a, b) {
	    console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.");return this.translateOnAxis(b, a);
	  }, translateX: function () {
	    var a = new THREE.Vector3(1, 0, 0);return function (b) {
	      return this.translateOnAxis(a, b);
	    };
	  }(), translateY: function () {
	    var a = new THREE.Vector3(0, 1, 0);return function (b) {
	      return this.translateOnAxis(a, b);
	    };
	  }(), translateZ: function () {
	    var a = new THREE.Vector3(0, 0, 1);return function (b) {
	      return this.translateOnAxis(a, b);
	    };
	  }(), localToWorld: function localToWorld(a) {
	    return a.applyMatrix4(this.matrixWorld);
	  }, worldToLocal: function () {
	    var a = new THREE.Matrix4();return function (b) {
	      return b.applyMatrix4(a.getInverse(this.matrixWorld));
	    };
	  }(), lookAt: function () {
	    var a = new THREE.Matrix4();return function (b) {
	      a.lookAt(b, this.position, this.up);this.quaternion.setFromRotationMatrix(a);
	    };
	  }(), add: function add(a) {
	    if (1 < arguments.length) {
	      for (var b = 0; b < arguments.length; b++) {
	        this.add(arguments[b]);
	      }return this;
	    }if (a === this) return console.error("THREE.Object3D.add: object can't be added as a child of itself.", a), this;a instanceof THREE.Object3D ? (null !== a.parent && a.parent.remove(a), a.parent = this, a.dispatchEvent({ type: "added" }), this.children.push(a)) : console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", a);return this;
	  }, remove: function remove(a) {
	    if (1 < arguments.length) for (var b = 0; b < arguments.length; b++) {
	      this.remove(arguments[b]);
	    }b = this.children.indexOf(a);-1 !== b && (a.parent = null, a.dispatchEvent({ type: "removed" }), this.children.splice(b, 1));
	  }, getChildByName: function getChildByName(a) {
	    console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().");
	    return this.getObjectByName(a);
	  }, getObjectById: function getObjectById(a) {
	    return this.getObjectByProperty("id", a);
	  }, getObjectByName: function getObjectByName(a) {
	    return this.getObjectByProperty("name", a);
	  }, getObjectByProperty: function getObjectByProperty(a, b) {
	    if (this[a] === b) return this;for (var c = 0, d = this.children.length; c < d; c++) {
	      var e = this.children[c].getObjectByProperty(a, b);if (void 0 !== e) return e;
	    }
	  }, getWorldPosition: function getWorldPosition(a) {
	    a = a || new THREE.Vector3();this.updateMatrixWorld(!0);return a.setFromMatrixPosition(this.matrixWorld);
	  }, getWorldQuaternion: function () {
	    var a = new THREE.Vector3(),
	        b = new THREE.Vector3();return function (c) {
	      c = c || new THREE.Quaternion();this.updateMatrixWorld(!0);this.matrixWorld.decompose(a, c, b);return c;
	    };
	  }(), getWorldRotation: function () {
	    var a = new THREE.Quaternion();return function (b) {
	      b = b || new THREE.Euler();this.getWorldQuaternion(a);return b.setFromQuaternion(a, this.rotation.order, !1);
	    };
	  }(), getWorldScale: function () {
	    var a = new THREE.Vector3(),
	        b = new THREE.Quaternion();return function (c) {
	      c = c || new THREE.Vector3();this.updateMatrixWorld(!0);this.matrixWorld.decompose(a, b, c);return c;
	    };
	  }(), getWorldDirection: function () {
	    var a = new THREE.Quaternion();return function (b) {
	      b = b || new THREE.Vector3();this.getWorldQuaternion(a);return b.set(0, 0, 1).applyQuaternion(a);
	    };
	  }(), raycast: function raycast() {}, traverse: function traverse(a) {
	    a(this);for (var b = this.children, c = 0, d = b.length; c < d; c++) {
	      b[c].traverse(a);
	    }
	  }, traverseVisible: function traverseVisible(a) {
	    if (!1 !== this.visible) {
	      a(this);for (var b = this.children, c = 0, d = b.length; c < d; c++) {
	        b[c].traverseVisible(a);
	      }
	    }
	  }, traverseAncestors: function traverseAncestors(a) {
	    var b = this.parent;null !== b && (a(b), b.traverseAncestors(a));
	  },
	  updateMatrix: function updateMatrix() {
	    this.matrix.compose(this.position, this.quaternion, this.scale);this.matrixWorldNeedsUpdate = !0;
	  }, updateMatrixWorld: function updateMatrixWorld(a) {
	    !0 === this.matrixAutoUpdate && this.updateMatrix();if (!0 === this.matrixWorldNeedsUpdate || !0 === a) null === this.parent ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), this.matrixWorldNeedsUpdate = !1, a = !0;for (var b = 0, c = this.children.length; b < c; b++) {
	      this.children[b].updateMatrixWorld(a);
	    }
	  }, toJSON: function toJSON(a) {
	    function b(a) {
	      var b = [],
	          c;for (c in a) {
	        var d = a[c];delete d.metadata;b.push(d);
	      }return b;
	    }var c = void 0 === a,
	        d = {};c && (a = { geometries: {}, materials: {}, textures: {}, images: {} }, d.metadata = { version: 4.4, type: "Object", generator: "Object3D.toJSON" });var e = {};e.uuid = this.uuid;e.type = this.type;"" !== this.name && (e.name = this.name);"{}" !== JSON.stringify(this.userData) && (e.userData = this.userData);!0 === this.castShadow && (e.castShadow = !0);!0 === this.receiveShadow && (e.receiveShadow = !0);!1 === this.visible && (e.visible = !1);e.matrix = this.matrix.toArray();
	    void 0 !== this.geometry && (void 0 === a.geometries[this.geometry.uuid] && (a.geometries[this.geometry.uuid] = this.geometry.toJSON(a)), e.geometry = this.geometry.uuid);void 0 !== this.material && (void 0 === a.materials[this.material.uuid] && (a.materials[this.material.uuid] = this.material.toJSON(a)), e.material = this.material.uuid);if (0 < this.children.length) {
	      e.children = [];for (var g = 0; g < this.children.length; g++) {
	        e.children.push(this.children[g].toJSON(a).object);
	      }
	    }if (c) {
	      var c = b(a.geometries),
	          g = b(a.materials),
	          f = b(a.textures);
	      a = b(a.images);0 < c.length && (d.geometries = c);0 < g.length && (d.materials = g);0 < f.length && (d.textures = f);0 < a.length && (d.images = a);
	    }d.object = e;return d;
	  }, clone: function clone(a) {
	    return new this.constructor().copy(this, a);
	  }, copy: function copy(a, b) {
	    void 0 === b && (b = !0);this.name = a.name;this.up.copy(a.up);this.position.copy(a.position);this.quaternion.copy(a.quaternion);this.scale.copy(a.scale);this.rotationAutoUpdate = a.rotationAutoUpdate;this.matrix.copy(a.matrix);this.matrixWorld.copy(a.matrixWorld);this.matrixAutoUpdate = a.matrixAutoUpdate;this.matrixWorldNeedsUpdate = a.matrixWorldNeedsUpdate;this.visible = a.visible;this.castShadow = a.castShadow;this.receiveShadow = a.receiveShadow;this.frustumCulled = a.frustumCulled;this.renderOrder = a.renderOrder;this.userData = JSON.parse(JSON.stringify(a.userData));if (!0 === b) for (var c = 0; c < a.children.length; c++) {
	      this.add(a.children[c].clone());
	    }return this;
	  } };THREE.EventDispatcher.prototype.apply(THREE.Object3D.prototype);THREE.Object3DIdCount = 0;
	THREE.Face3 = function (a, b, c, d, e, g) {
	  this.a = a;this.b = b;this.c = c;this.normal = d instanceof THREE.Vector3 ? d : new THREE.Vector3();this.vertexNormals = Array.isArray(d) ? d : [];this.color = e instanceof THREE.Color ? e : new THREE.Color();this.vertexColors = Array.isArray(e) ? e : [];this.materialIndex = void 0 !== g ? g : 0;
	};
	THREE.Face3.prototype = { constructor: THREE.Face3, clone: function clone() {
	    return new this.constructor().copy(this);
	  }, copy: function copy(a) {
	    this.a = a.a;this.b = a.b;this.c = a.c;this.normal.copy(a.normal);this.color.copy(a.color);this.materialIndex = a.materialIndex;for (var b = 0, c = a.vertexNormals.length; b < c; b++) {
	      this.vertexNormals[b] = a.vertexNormals[b].clone();
	    }b = 0;for (c = a.vertexColors.length; b < c; b++) {
	      this.vertexColors[b] = a.vertexColors[b].clone();
	    }return this;
	  } };
	THREE.Face4 = function (a, b, c, d, e, g, f) {
	  console.warn("THREE.Face4 has been removed. A THREE.Face3 will be created instead.");return new THREE.Face3(a, b, c, e, g, f);
	};THREE.BufferAttribute = function (a, b) {
	  this.uuid = THREE.Math.generateUUID();this.array = a;this.itemSize = b;this.dynamic = !1;this.updateRange = { offset: 0, count: -1 };this.version = 0;
	};
	THREE.BufferAttribute.prototype = { constructor: THREE.BufferAttribute, get length() {
	    console.warn("THREE.BufferAttribute: .length has been deprecated. Please use .count.");return this.array.length;
	  }, get count() {
	    return this.array.length / this.itemSize;
	  }, set needsUpdate(a) {
	    !0 === a && this.version++;
	  }, setDynamic: function setDynamic(a) {
	    this.dynamic = a;return this;
	  }, copy: function copy(a) {
	    this.array = new a.array.constructor(a.array);this.itemSize = a.itemSize;this.dynamic = a.dynamic;return this;
	  }, copyAt: function copyAt(a, b, c) {
	    a *= this.itemSize;
	    c *= b.itemSize;for (var d = 0, e = this.itemSize; d < e; d++) {
	      this.array[a + d] = b.array[c + d];
	    }return this;
	  }, copyArray: function copyArray(a) {
	    this.array.set(a);return this;
	  }, copyColorsArray: function copyColorsArray(a) {
	    for (var b = this.array, c = 0, d = 0, e = a.length; d < e; d++) {
	      var g = a[d];void 0 === g && (console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined", d), g = new THREE.Color());b[c++] = g.r;b[c++] = g.g;b[c++] = g.b;
	    }return this;
	  }, copyIndicesArray: function copyIndicesArray(a) {
	    for (var b = this.array, c = 0, d = 0, e = a.length; d < e; d++) {
	      var g = a[d];b[c++] = g.a;b[c++] = g.b;b[c++] = g.c;
	    }return this;
	  }, copyVector2sArray: function copyVector2sArray(a) {
	    for (var b = this.array, c = 0, d = 0, e = a.length; d < e; d++) {
	      var g = a[d];void 0 === g && (console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined", d), g = new THREE.Vector2());b[c++] = g.x;b[c++] = g.y;
	    }return this;
	  }, copyVector3sArray: function copyVector3sArray(a) {
	    for (var b = this.array, c = 0, d = 0, e = a.length; d < e; d++) {
	      var g = a[d];void 0 === g && (console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined", d), g = new THREE.Vector3());b[c++] = g.x;b[c++] = g.y;b[c++] = g.z;
	    }return this;
	  },
	  copyVector4sArray: function copyVector4sArray(a) {
	    for (var b = this.array, c = 0, d = 0, e = a.length; d < e; d++) {
	      var g = a[d];void 0 === g && (console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined", d), g = new THREE.Vector4());b[c++] = g.x;b[c++] = g.y;b[c++] = g.z;b[c++] = g.w;
	    }return this;
	  }, set: function set(a, b) {
	    void 0 === b && (b = 0);this.array.set(a, b);return this;
	  }, getX: function getX(a) {
	    return this.array[a * this.itemSize];
	  }, setX: function setX(a, b) {
	    this.array[a * this.itemSize] = b;return this;
	  }, getY: function getY(a) {
	    return this.array[a * this.itemSize + 1];
	  },
	  setY: function setY(a, b) {
	    this.array[a * this.itemSize + 1] = b;return this;
	  }, getZ: function getZ(a) {
	    return this.array[a * this.itemSize + 2];
	  }, setZ: function setZ(a, b) {
	    this.array[a * this.itemSize + 2] = b;return this;
	  }, getW: function getW(a) {
	    return this.array[a * this.itemSize + 3];
	  }, setW: function setW(a, b) {
	    this.array[a * this.itemSize + 3] = b;return this;
	  }, setXY: function setXY(a, b, c) {
	    a *= this.itemSize;this.array[a + 0] = b;this.array[a + 1] = c;return this;
	  }, setXYZ: function setXYZ(a, b, c, d) {
	    a *= this.itemSize;this.array[a + 0] = b;this.array[a + 1] = c;this.array[a + 2] = d;return this;
	  }, setXYZW: function setXYZW(a, b, c, d, e) {
	    a *= this.itemSize;this.array[a + 0] = b;this.array[a + 1] = c;this.array[a + 2] = d;this.array[a + 3] = e;return this;
	  }, clone: function clone() {
	    return new this.constructor().copy(this);
	  } };THREE.Int8Attribute = function (a, b) {
	  return new THREE.BufferAttribute(new Int8Array(a), b);
	};THREE.Uint8Attribute = function (a, b) {
	  return new THREE.BufferAttribute(new Uint8Array(a), b);
	};THREE.Uint8ClampedAttribute = function (a, b) {
	  return new THREE.BufferAttribute(new Uint8ClampedArray(a), b);
	};
	THREE.Int16Attribute = function (a, b) {
	  return new THREE.BufferAttribute(new Int16Array(a), b);
	};THREE.Uint16Attribute = function (a, b) {
	  return new THREE.BufferAttribute(new Uint16Array(a), b);
	};THREE.Int32Attribute = function (a, b) {
	  return new THREE.BufferAttribute(new Int32Array(a), b);
	};THREE.Uint32Attribute = function (a, b) {
	  return new THREE.BufferAttribute(new Uint32Array(a), b);
	};THREE.Float32Attribute = function (a, b) {
	  return new THREE.BufferAttribute(new Float32Array(a), b);
	};
	THREE.Float64Attribute = function (a, b) {
	  return new THREE.BufferAttribute(new Float64Array(a), b);
	};THREE.DynamicBufferAttribute = function (a, b) {
	  console.warn("THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.");return new THREE.BufferAttribute(a, b).setDynamic(!0);
	};THREE.InstancedBufferAttribute = function (a, b, c) {
	  THREE.BufferAttribute.call(this, a, b);this.meshPerAttribute = c || 1;
	};THREE.InstancedBufferAttribute.prototype = Object.create(THREE.BufferAttribute.prototype);
	THREE.InstancedBufferAttribute.prototype.constructor = THREE.InstancedBufferAttribute;THREE.InstancedBufferAttribute.prototype.copy = function (a) {
	  THREE.BufferAttribute.prototype.copy.call(this, a);this.meshPerAttribute = a.meshPerAttribute;return this;
	};THREE.InterleavedBuffer = function (a, b) {
	  this.uuid = THREE.Math.generateUUID();this.array = a;this.stride = b;this.dynamic = !1;this.updateRange = { offset: 0, count: -1 };this.version = 0;
	};
	THREE.InterleavedBuffer.prototype = { constructor: THREE.InterleavedBuffer, get length() {
	    return this.array.length;
	  }, get count() {
	    return this.array.length / this.stride;
	  }, set needsUpdate(a) {
	    !0 === a && this.version++;
	  }, setDynamic: function setDynamic(a) {
	    this.dynamic = a;return this;
	  }, copy: function copy(a) {
	    this.array = new a.array.constructor(a.array);this.stride = a.stride;this.dynamic = a.dynamic;
	  }, copyAt: function copyAt(a, b, c) {
	    a *= this.stride;c *= b.stride;for (var d = 0, e = this.stride; d < e; d++) {
	      this.array[a + d] = b.array[c + d];
	    }return this;
	  }, set: function set(a, b) {
	    void 0 === b && (b = 0);this.array.set(a, b);return this;
	  }, clone: function clone() {
	    return new this.constructor().copy(this);
	  } };THREE.InstancedInterleavedBuffer = function (a, b, c) {
	  THREE.InterleavedBuffer.call(this, a, b);this.meshPerAttribute = c || 1;
	};THREE.InstancedInterleavedBuffer.prototype = Object.create(THREE.InterleavedBuffer.prototype);THREE.InstancedInterleavedBuffer.prototype.constructor = THREE.InstancedInterleavedBuffer;
	THREE.InstancedInterleavedBuffer.prototype.copy = function (a) {
	  THREE.InterleavedBuffer.prototype.copy.call(this, a);this.meshPerAttribute = a.meshPerAttribute;return this;
	};THREE.InterleavedBufferAttribute = function (a, b, c) {
	  this.uuid = THREE.Math.generateUUID();this.data = a;this.itemSize = b;this.offset = c;
	};
	THREE.InterleavedBufferAttribute.prototype = { constructor: THREE.InterleavedBufferAttribute, get length() {
	    console.warn("THREE.BufferAttribute: .length has been deprecated. Please use .count.");return this.array.length;
	  }, get count() {
	    return this.data.array.length / this.data.stride;
	  }, setX: function setX(a, b) {
	    this.data.array[a * this.data.stride + this.offset] = b;return this;
	  }, setY: function setY(a, b) {
	    this.data.array[a * this.data.stride + this.offset + 1] = b;return this;
	  }, setZ: function setZ(a, b) {
	    this.data.array[a * this.data.stride + this.offset + 2] = b;return this;
	  }, setW: function setW(a, b) {
	    this.data.array[a * this.data.stride + this.offset + 3] = b;return this;
	  }, getX: function getX(a) {
	    return this.data.array[a * this.data.stride + this.offset];
	  }, getY: function getY(a) {
	    return this.data.array[a * this.data.stride + this.offset + 1];
	  }, getZ: function getZ(a) {
	    return this.data.array[a * this.data.stride + this.offset + 2];
	  }, getW: function getW(a) {
	    return this.data.array[a * this.data.stride + this.offset + 3];
	  }, setXY: function setXY(a, b, c) {
	    a = a * this.data.stride + this.offset;this.data.array[a + 0] = b;this.data.array[a + 1] = c;
	    return this;
	  }, setXYZ: function setXYZ(a, b, c, d) {
	    a = a * this.data.stride + this.offset;this.data.array[a + 0] = b;this.data.array[a + 1] = c;this.data.array[a + 2] = d;return this;
	  }, setXYZW: function setXYZW(a, b, c, d, e) {
	    a = a * this.data.stride + this.offset;this.data.array[a + 0] = b;this.data.array[a + 1] = c;this.data.array[a + 2] = d;this.data.array[a + 3] = e;return this;
	  } };
	THREE.Geometry = function () {
	  Object.defineProperty(this, "id", { value: THREE.GeometryIdCount++ });this.uuid = THREE.Math.generateUUID();this.name = "";this.type = "Geometry";this.vertices = [];this.colors = [];this.faces = [];this.faceVertexUvs = [[]];this.morphTargets = [];this.morphNormals = [];this.skinWeights = [];this.skinIndices = [];this.lineDistances = [];this.boundingSphere = this.boundingBox = null;this.groupsNeedUpdate = this.lineDistancesNeedUpdate = this.colorsNeedUpdate = this.normalsNeedUpdate = this.uvsNeedUpdate = this.elementsNeedUpdate = this.verticesNeedUpdate = !1;
	};
	THREE.Geometry.prototype = { constructor: THREE.Geometry, applyMatrix: function applyMatrix(a) {
	    for (var b = new THREE.Matrix3().getNormalMatrix(a), c = 0, d = this.vertices.length; c < d; c++) {
	      this.vertices[c].applyMatrix4(a);
	    }c = 0;for (d = this.faces.length; c < d; c++) {
	      a = this.faces[c];a.normal.applyMatrix3(b).normalize();for (var e = 0, g = a.vertexNormals.length; e < g; e++) {
	        a.vertexNormals[e].applyMatrix3(b).normalize();
	      }
	    }null !== this.boundingBox && this.computeBoundingBox();null !== this.boundingSphere && this.computeBoundingSphere();this.normalsNeedUpdate = this.verticesNeedUpdate = !0;
	  }, rotateX: function () {
	    var a;return function (b) {
	      void 0 === a && (a = new THREE.Matrix4());a.makeRotationX(b);this.applyMatrix(a);return this;
	    };
	  }(), rotateY: function () {
	    var a;return function (b) {
	      void 0 === a && (a = new THREE.Matrix4());a.makeRotationY(b);this.applyMatrix(a);return this;
	    };
	  }(), rotateZ: function () {
	    var a;return function (b) {
	      void 0 === a && (a = new THREE.Matrix4());a.makeRotationZ(b);this.applyMatrix(a);return this;
	    };
	  }(), translate: function () {
	    var a;return function (b, c, d) {
	      void 0 === a && (a = new THREE.Matrix4());
	      a.makeTranslation(b, c, d);this.applyMatrix(a);return this;
	    };
	  }(), scale: function () {
	    var a;return function (b, c, d) {
	      void 0 === a && (a = new THREE.Matrix4());a.makeScale(b, c, d);this.applyMatrix(a);return this;
	    };
	  }(), lookAt: function () {
	    var a;return function (b) {
	      void 0 === a && (a = new THREE.Object3D());a.lookAt(b);a.updateMatrix();this.applyMatrix(a.matrix);
	    };
	  }(), fromBufferGeometry: function fromBufferGeometry(a) {
	    function b(a, b, d) {
	      var e = void 0 !== f ? [m[a].clone(), m[b].clone(), m[d].clone()] : [],
	          g = void 0 !== h ? [c.colors[a].clone(), c.colors[b].clone(), c.colors[d].clone()] : [],
	          e = new THREE.Face3(a, b, d, e, g);c.faces.push(e);void 0 !== l && c.faceVertexUvs[0].push([p[a].clone(), p[b].clone(), p[d].clone()]);void 0 !== k && c.faceVertexUvs[1].push([n[a].clone(), n[b].clone(), n[d].clone()]);
	    }var c = this,
	        d = null !== a.index ? a.index.array : void 0,
	        e = a.attributes,
	        g = e.position.array,
	        f = void 0 !== e.normal ? e.normal.array : void 0,
	        h = void 0 !== e.color ? e.color.array : void 0,
	        l = void 0 !== e.uv ? e.uv.array : void 0,
	        k = void 0 !== e.uv2 ? e.uv2.array : void 0;void 0 !== k && (this.faceVertexUvs[1] = []);for (var m = [], p = [], n = [], q = e = 0; e < g.length; e += 3, q += 2) {
	      c.vertices.push(new THREE.Vector3(g[e], g[e + 1], g[e + 2])), void 0 !== f && m.push(new THREE.Vector3(f[e], f[e + 1], f[e + 2])), void 0 !== h && c.colors.push(new THREE.Color(h[e], h[e + 1], h[e + 2])), void 0 !== l && p.push(new THREE.Vector2(l[q], l[q + 1])), void 0 !== k && n.push(new THREE.Vector2(k[q], k[q + 1]));
	    }if (void 0 !== d) {
	      if (g = a.groups, 0 < g.length) for (e = 0; e < g.length; e++) {
	        for (var q = g[e], s = q.start, t = q.count, q = s, s = s + t; q < s; q += 3) {
	          b(d[q], d[q + 1], d[q + 2]);
	        }
	      } else for (e = 0; e < d.length; e += 3) {
	        b(d[e], d[e + 1], d[e + 2]);
	      }
	    } else for (e = 0; e < g.length / 3; e += 3) {
	      b(e, e + 1, e + 2);
	    }this.computeFaceNormals();null !== a.boundingBox && (this.boundingBox = a.boundingBox.clone());null !== a.boundingSphere && (this.boundingSphere = a.boundingSphere.clone());return this;
	  }, center: function center() {
	    this.computeBoundingBox();var a = this.boundingBox.center().negate();this.translate(a.x, a.y, a.z);return a;
	  }, normalize: function normalize() {
	    this.computeBoundingSphere();var a = this.boundingSphere.center,
	        b = this.boundingSphere.radius,
	        b = 0 === b ? 1 : 1 / b,
	        c = new THREE.Matrix4();c.set(b, 0, 0, -b * a.x, 0, b, 0, -b * a.y, 0, 0, b, -b * a.z, 0, 0, 0, 1);this.applyMatrix(c);return this;
	  }, computeFaceNormals: function computeFaceNormals() {
	    for (var a = new THREE.Vector3(), b = new THREE.Vector3(), c = 0, d = this.faces.length; c < d; c++) {
	      var e = this.faces[c],
	          g = this.vertices[e.a],
	          f = this.vertices[e.b];a.subVectors(this.vertices[e.c], f);b.subVectors(g, f);a.cross(b);a.normalize();e.normal.copy(a);
	    }
	  }, computeVertexNormals: function computeVertexNormals(a) {
	    var b, c, d;d = Array(this.vertices.length);b = 0;for (c = this.vertices.length; b < c; b++) {
	      d[b] = new THREE.Vector3();
	    }if (a) {
	      var e,
	          g,
	          f,
	          h = new THREE.Vector3(),
	          l = new THREE.Vector3();a = 0;for (b = this.faces.length; a < b; a++) {
	        c = this.faces[a], e = this.vertices[c.a], g = this.vertices[c.b], f = this.vertices[c.c], h.subVectors(f, g), l.subVectors(e, g), h.cross(l), d[c.a].add(h), d[c.b].add(h), d[c.c].add(h);
	      }
	    } else for (a = 0, b = this.faces.length; a < b; a++) {
	      c = this.faces[a], d[c.a].add(c.normal), d[c.b].add(c.normal), d[c.c].add(c.normal);
	    }b = 0;for (c = this.vertices.length; b < c; b++) {
	      d[b].normalize();
	    }a = 0;for (b = this.faces.length; a < b; a++) {
	      c = this.faces[a], e = c.vertexNormals, 3 === e.length ? (e[0].copy(d[c.a]), e[1].copy(d[c.b]), e[2].copy(d[c.c])) : (e[0] = d[c.a].clone(), e[1] = d[c.b].clone(), e[2] = d[c.c].clone());
	    }
	  }, computeMorphNormals: function computeMorphNormals() {
	    var a, b, c, d, e;c = 0;for (d = this.faces.length; c < d; c++) {
	      for (e = this.faces[c], e.__originalFaceNormal ? e.__originalFaceNormal.copy(e.normal) : e.__originalFaceNormal = e.normal.clone(), e.__originalVertexNormals || (e.__originalVertexNormals = []), a = 0, b = e.vertexNormals.length; a < b; a++) {
	        e.__originalVertexNormals[a] ? e.__originalVertexNormals[a].copy(e.vertexNormals[a]) : e.__originalVertexNormals[a] = e.vertexNormals[a].clone();
	      }
	    }var g = new THREE.Geometry();g.faces = this.faces;a = 0;for (b = this.morphTargets.length; a < b; a++) {
	      if (!this.morphNormals[a]) {
	        this.morphNormals[a] = {};this.morphNormals[a].faceNormals = [];this.morphNormals[a].vertexNormals = [];e = this.morphNormals[a].faceNormals;var f = this.morphNormals[a].vertexNormals,
	            h,
	            l;c = 0;for (d = this.faces.length; c < d; c++) {
	          h = new THREE.Vector3(), l = { a: new THREE.Vector3(), b: new THREE.Vector3(), c: new THREE.Vector3() }, e.push(h), f.push(l);
	        }
	      }f = this.morphNormals[a];g.vertices = this.morphTargets[a].vertices;
	      g.computeFaceNormals();g.computeVertexNormals();c = 0;for (d = this.faces.length; c < d; c++) {
	        e = this.faces[c], h = f.faceNormals[c], l = f.vertexNormals[c], h.copy(e.normal), l.a.copy(e.vertexNormals[0]), l.b.copy(e.vertexNormals[1]), l.c.copy(e.vertexNormals[2]);
	      }
	    }c = 0;for (d = this.faces.length; c < d; c++) {
	      e = this.faces[c], e.normal = e.__originalFaceNormal, e.vertexNormals = e.__originalVertexNormals;
	    }
	  }, computeTangents: function computeTangents() {
	    console.warn("THREE.Geometry: .computeTangents() has been removed.");
	  }, computeLineDistances: function computeLineDistances() {
	    for (var a = 0, b = this.vertices, c = 0, d = b.length; c < d; c++) {
	      0 < c && (a += b[c].distanceTo(b[c - 1])), this.lineDistances[c] = a;
	    }
	  }, computeBoundingBox: function computeBoundingBox() {
	    null === this.boundingBox && (this.boundingBox = new THREE.Box3());this.boundingBox.setFromPoints(this.vertices);
	  }, computeBoundingSphere: function computeBoundingSphere() {
	    null === this.boundingSphere && (this.boundingSphere = new THREE.Sphere());this.boundingSphere.setFromPoints(this.vertices);
	  }, merge: function merge(a, b, c) {
	    if (!1 === a instanceof THREE.Geometry) console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.", a);else {
	      var d,
	          e = this.vertices.length,
	          g = this.vertices,
	          f = a.vertices,
	          h = this.faces,
	          l = a.faces,
	          k = this.faceVertexUvs[0];a = a.faceVertexUvs[0];void 0 === c && (c = 0);void 0 !== b && (d = new THREE.Matrix3().getNormalMatrix(b));for (var m = 0, p = f.length; m < p; m++) {
	        var n = f[m].clone();void 0 !== b && n.applyMatrix4(b);g.push(n);
	      }m = 0;for (p = l.length; m < p; m++) {
	        var f = l[m],
	            q,
	            s = f.vertexNormals,
	            t = f.vertexColors,
	            n = new THREE.Face3(f.a + e, f.b + e, f.c + e);n.normal.copy(f.normal);void 0 !== d && n.normal.applyMatrix3(d).normalize();b = 0;for (g = s.length; b < g; b++) {
	          q = s[b].clone(), void 0 !== d && q.applyMatrix3(d).normalize(), n.vertexNormals.push(q);
	        }n.color.copy(f.color);b = 0;for (g = t.length; b < g; b++) {
	          q = t[b], n.vertexColors.push(q.clone());
	        }n.materialIndex = f.materialIndex + c;h.push(n);
	      }m = 0;for (p = a.length; m < p; m++) {
	        if (c = a[m], d = [], void 0 !== c) {
	          b = 0;for (g = c.length; b < g; b++) {
	            d.push(c[b].clone());
	          }k.push(d);
	        }
	      }
	    }
	  }, mergeMesh: function mergeMesh(a) {
	    !1 === a instanceof THREE.Mesh ? console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.", a) : (a.matrixAutoUpdate && a.updateMatrix(), this.merge(a.geometry, a.matrix));
	  }, mergeVertices: function mergeVertices() {
	    var a = {},
	        b = [],
	        c = [],
	        d,
	        e = Math.pow(10, 4),
	        g,
	        f;g = 0;for (f = this.vertices.length; g < f; g++) {
	      d = this.vertices[g], d = Math.round(d.x * e) + "_" + Math.round(d.y * e) + "_" + Math.round(d.z * e), void 0 === a[d] ? (a[d] = g, b.push(this.vertices[g]), c[g] = b.length - 1) : c[g] = c[a[d]];
	    }a = [];g = 0;for (f = this.faces.length; g < f; g++) {
	      for (e = this.faces[g], e.a = c[e.a], e.b = c[e.b], e.c = c[e.c], e = [e.a, e.b, e.c], d = 0; 3 > d; d++) {
	        if (e[d] === e[(d + 1) % 3]) {
	          a.push(g);break;
	        }
	      }
	    }for (g = a.length - 1; 0 <= g; g--) {
	      for (e = a[g], this.faces.splice(e, 1), c = 0, f = this.faceVertexUvs.length; c < f; c++) {
	        this.faceVertexUvs[c].splice(e, 1);
	      }
	    }g = this.vertices.length - b.length;this.vertices = b;return g;
	  }, sortFacesByMaterialIndex: function sortFacesByMaterialIndex() {
	    for (var a = this.faces, b = a.length, c = 0; c < b; c++) {
	      a[c]._id = c;
	    }a.sort(function (a, b) {
	      return a.materialIndex - b.materialIndex;
	    });var d = this.faceVertexUvs[0],
	        e = this.faceVertexUvs[1],
	        g,
	        f;d && d.length === b && (g = []);e && e.length === b && (f = []);for (c = 0; c < b; c++) {
	      var h = a[c]._id;g && g.push(d[h]);f && f.push(e[h]);
	    }g && (this.faceVertexUvs[0] = g);f && (this.faceVertexUvs[1] = f);
	  }, toJSON: function toJSON() {
	    function a(a, b, c) {
	      return c ? a | 1 << b : a & ~(1 << b);
	    }function b(a) {
	      var b = a.x.toString() + a.y.toString() + a.z.toString();if (void 0 !== k[b]) return k[b];k[b] = l.length / 3;l.push(a.x, a.y, a.z);return k[b];
	    }function c(a) {
	      var b = a.r.toString() + a.g.toString() + a.b.toString();if (void 0 !== p[b]) return p[b];p[b] = m.length;m.push(a.getHex());return p[b];
	    }function d(a) {
	      var b = a.x.toString() + a.y.toString();if (void 0 !== q[b]) return q[b];q[b] = n.length / 2;n.push(a.x, a.y);return q[b];
	    }var e = { metadata: { version: 4.4, type: "Geometry",
	        generator: "Geometry.toJSON" } };e.uuid = this.uuid;e.type = this.type;"" !== this.name && (e.name = this.name);if (void 0 !== this.parameters) {
	      var g = this.parameters,
	          f;for (f in g) {
	        void 0 !== g[f] && (e[f] = g[f]);
	      }return e;
	    }g = [];for (f = 0; f < this.vertices.length; f++) {
	      var h = this.vertices[f];g.push(h.x, h.y, h.z);
	    }var h = [],
	        l = [],
	        k = {},
	        m = [],
	        p = {},
	        n = [],
	        q = {};for (f = 0; f < this.faces.length; f++) {
	      var s = this.faces[f],
	          t = void 0 !== this.faceVertexUvs[0][f],
	          v = 0 < s.normal.length(),
	          u = 0 < s.vertexNormals.length,
	          w = 1 !== s.color.r || 1 !== s.color.g || 1 !== s.color.b,
	          D = 0 < s.vertexColors.length,
	          x = 0,
	          x = a(x, 0, 0),
	          x = a(x, 1, !1),
	          x = a(x, 2, !1),
	          x = a(x, 3, t),
	          x = a(x, 4, v),
	          x = a(x, 5, u),
	          x = a(x, 6, w),
	          x = a(x, 7, D);h.push(x);h.push(s.a, s.b, s.c);t && (t = this.faceVertexUvs[0][f], h.push(d(t[0]), d(t[1]), d(t[2])));v && h.push(b(s.normal));u && (v = s.vertexNormals, h.push(b(v[0]), b(v[1]), b(v[2])));w && h.push(c(s.color));D && (s = s.vertexColors, h.push(c(s[0]), c(s[1]), c(s[2])));
	    }e.data = {};e.data.vertices = g;e.data.normals = l;0 < m.length && (e.data.colors = m);0 < n.length && (e.data.uvs = [n]);e.data.faces = h;return e;
	  }, clone: function clone() {
	    return new this.constructor().copy(this);
	  },
	  copy: function copy(a) {
	    this.vertices = [];this.faces = [];this.faceVertexUvs = [[]];for (var b = a.vertices, c = 0, d = b.length; c < d; c++) {
	      this.vertices.push(b[c].clone());
	    }b = a.faces;c = 0;for (d = b.length; c < d; c++) {
	      this.faces.push(b[c].clone());
	    }c = 0;for (d = a.faceVertexUvs.length; c < d; c++) {
	      b = a.faceVertexUvs[c];void 0 === this.faceVertexUvs[c] && (this.faceVertexUvs[c] = []);for (var e = 0, g = b.length; e < g; e++) {
	        for (var f = b[e], h = [], l = 0, k = f.length; l < k; l++) {
	          h.push(f[l].clone());
	        }this.faceVertexUvs[c].push(h);
	      }
	    }return this;
	  }, dispose: function dispose() {
	    this.dispatchEvent({ type: "dispose" });
	  } };
	THREE.EventDispatcher.prototype.apply(THREE.Geometry.prototype);THREE.GeometryIdCount = 0;
	THREE.DirectGeometry = function () {
	  Object.defineProperty(this, "id", { value: THREE.GeometryIdCount++ });this.uuid = THREE.Math.generateUUID();this.name = "";this.type = "DirectGeometry";this.indices = [];this.vertices = [];this.normals = [];this.colors = [];this.uvs = [];this.uvs2 = [];this.groups = [];this.morphTargets = {};this.skinWeights = [];this.skinIndices = [];this.boundingSphere = this.boundingBox = null;this.groupsNeedUpdate = this.uvsNeedUpdate = this.colorsNeedUpdate = this.normalsNeedUpdate = this.verticesNeedUpdate = !1;
	};
	THREE.DirectGeometry.prototype = { constructor: THREE.DirectGeometry, computeBoundingBox: THREE.Geometry.prototype.computeBoundingBox, computeBoundingSphere: THREE.Geometry.prototype.computeBoundingSphere, computeFaceNormals: function computeFaceNormals() {
	    console.warn("THREE.DirectGeometry: computeFaceNormals() is not a method of this type of geometry.");
	  }, computeVertexNormals: function computeVertexNormals() {
	    console.warn("THREE.DirectGeometry: computeVertexNormals() is not a method of this type of geometry.");
	  }, computeGroups: function computeGroups(a) {
	    var b,
	        c = [],
	        d;a = a.faces;for (var e = 0; e < a.length; e++) {
	      var g = a[e];g.materialIndex !== d && (d = g.materialIndex, void 0 !== b && (b.count = 3 * e - b.start, c.push(b)), b = { start: 3 * e, materialIndex: d });
	    }void 0 !== b && (b.count = 3 * e - b.start, c.push(b));this.groups = c;
	  }, fromGeometry: function fromGeometry(a) {
	    var b = a.faces,
	        c = a.vertices,
	        d = a.faceVertexUvs,
	        e = d[0] && 0 < d[0].length,
	        g = d[1] && 0 < d[1].length,
	        f = a.morphTargets,
	        h = f.length;if (0 < h) {
	      for (var l = [], k = 0; k < h; k++) {
	        l[k] = [];
	      }this.morphTargets.position = l;
	    }var m = a.morphNormals,
	        p = m.length;if (0 < p) {
	      for (var n = [], k = 0; k < p; k++) {
	        n[k] = [];
	      }this.morphTargets.normal = n;
	    }for (var q = a.skinIndices, s = a.skinWeights, t = q.length === c.length, v = s.length === c.length, k = 0; k < b.length; k++) {
	      var u = b[k];this.vertices.push(c[u.a], c[u.b], c[u.c]);var w = u.vertexNormals;3 === w.length ? this.normals.push(w[0], w[1], w[2]) : (w = u.normal, this.normals.push(w, w, w));w = u.vertexColors;3 === w.length ? this.colors.push(w[0], w[1], w[2]) : (w = u.color, this.colors.push(w, w, w));!0 === e && (w = d[0][k], void 0 !== w ? this.uvs.push(w[0], w[1], w[2]) : (console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ", k), this.uvs.push(new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2())));!0 === g && (w = d[1][k], void 0 !== w ? this.uvs2.push(w[0], w[1], w[2]) : (console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ", k), this.uvs2.push(new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2())));for (w = 0; w < h; w++) {
	        var D = f[w].vertices;l[w].push(D[u.a], D[u.b], D[u.c]);
	      }for (w = 0; w < p; w++) {
	        D = m[w].vertexNormals[k], n[w].push(D.a, D.b, D.c);
	      }t && this.skinIndices.push(q[u.a], q[u.b], q[u.c]);v && this.skinWeights.push(s[u.a], s[u.b], s[u.c]);
	    }this.computeGroups(a);this.verticesNeedUpdate = a.verticesNeedUpdate;this.normalsNeedUpdate = a.normalsNeedUpdate;this.colorsNeedUpdate = a.colorsNeedUpdate;this.uvsNeedUpdate = a.uvsNeedUpdate;this.groupsNeedUpdate = a.groupsNeedUpdate;return this;
	  }, dispose: function dispose() {
	    this.dispatchEvent({ type: "dispose" });
	  } };THREE.EventDispatcher.prototype.apply(THREE.DirectGeometry.prototype);
	THREE.BufferGeometry = function () {
	  Object.defineProperty(this, "id", { value: THREE.GeometryIdCount++ });this.uuid = THREE.Math.generateUUID();this.name = "";this.type = "BufferGeometry";this.index = null;this.attributes = {};this.morphAttributes = {};this.groups = [];this.boundingSphere = this.boundingBox = null;this.drawRange = { start: 0, count: Infinity };
	};
	THREE.BufferGeometry.prototype = { constructor: THREE.BufferGeometry, addIndex: function addIndex(a) {
	    console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().");this.setIndex(a);
	  }, getIndex: function getIndex() {
	    return this.index;
	  }, setIndex: function setIndex(a) {
	    this.index = a;
	  }, addAttribute: function addAttribute(a, b, c) {
	    !1 === b instanceof THREE.BufferAttribute && !1 === b instanceof THREE.InterleavedBufferAttribute ? (console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."), this.addAttribute(a, new THREE.BufferAttribute(b, c))) : "index" === a ? (console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."), this.setIndex(b)) : this.attributes[a] = b;
	  }, getAttribute: function getAttribute(a) {
	    return this.attributes[a];
	  }, removeAttribute: function removeAttribute(a) {
	    delete this.attributes[a];
	  }, get drawcalls() {
	    console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups.");return this.groups;
	  }, get offsets() {
	    console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups.");return this.groups;
	  }, addDrawCall: function addDrawCall(a, b, c) {
	    void 0 !== c && console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.");console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup().");this.addGroup(a, b);
	  }, clearDrawCalls: function clearDrawCalls() {
	    console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().");this.clearGroups();
	  }, addGroup: function addGroup(a, b, c) {
	    this.groups.push({ start: a, count: b, materialIndex: void 0 !== c ? c : 0 });
	  }, clearGroups: function clearGroups() {
	    this.groups = [];
	  }, setDrawRange: function setDrawRange(a, b) {
	    this.drawRange.start = a;this.drawRange.count = b;
	  }, applyMatrix: function applyMatrix(a) {
	    var b = this.attributes.position;void 0 !== b && (a.applyToVector3Array(b.array), b.needsUpdate = !0);b = this.attributes.normal;void 0 !== b && (new THREE.Matrix3().getNormalMatrix(a).applyToVector3Array(b.array), b.needsUpdate = !0);null !== this.boundingBox && this.computeBoundingBox();null !== this.boundingSphere && this.computeBoundingSphere();
	  }, rotateX: function () {
	    var a;return function (b) {
	      void 0 === a && (a = new THREE.Matrix4());a.makeRotationX(b);this.applyMatrix(a);return this;
	    };
	  }(), rotateY: function () {
	    var a;
	    return function (b) {
	      void 0 === a && (a = new THREE.Matrix4());a.makeRotationY(b);this.applyMatrix(a);return this;
	    };
	  }(), rotateZ: function () {
	    var a;return function (b) {
	      void 0 === a && (a = new THREE.Matrix4());a.makeRotationZ(b);this.applyMatrix(a);return this;
	    };
	  }(), translate: function () {
	    var a;return function (b, c, d) {
	      void 0 === a && (a = new THREE.Matrix4());a.makeTranslation(b, c, d);this.applyMatrix(a);return this;
	    };
	  }(), scale: function () {
	    var a;return function (b, c, d) {
	      void 0 === a && (a = new THREE.Matrix4());a.makeScale(b, c, d);this.applyMatrix(a);
	      return this;
	    };
	  }(), lookAt: function () {
	    var a;return function (b) {
	      void 0 === a && (a = new THREE.Object3D());a.lookAt(b);a.updateMatrix();this.applyMatrix(a.matrix);
	    };
	  }(), center: function center() {
	    this.computeBoundingBox();var a = this.boundingBox.center().negate();this.translate(a.x, a.y, a.z);return a;
	  }, setFromObject: function setFromObject(a) {
	    var b = a.geometry;if (a instanceof THREE.Points || a instanceof THREE.Line) {
	      a = new THREE.Float32Attribute(3 * b.vertices.length, 3);var c = new THREE.Float32Attribute(3 * b.colors.length, 3);this.addAttribute("position", a.copyVector3sArray(b.vertices));this.addAttribute("color", c.copyColorsArray(b.colors));b.lineDistances && b.lineDistances.length === b.vertices.length && (a = new THREE.Float32Attribute(b.lineDistances.length, 1), this.addAttribute("lineDistance", a.copyArray(b.lineDistances)));null !== b.boundingSphere && (this.boundingSphere = b.boundingSphere.clone());null !== b.boundingBox && (this.boundingBox = b.boundingBox.clone());
	    } else a instanceof THREE.Mesh && b instanceof THREE.Geometry && this.fromGeometry(b);return this;
	  }, updateFromObject: function updateFromObject(a) {
	    var b = a.geometry;if (a instanceof THREE.Mesh) {
	      var c = b.__directGeometry;if (void 0 === c) return this.fromGeometry(b);c.verticesNeedUpdate = b.verticesNeedUpdate;c.normalsNeedUpdate = b.normalsNeedUpdate;c.colorsNeedUpdate = b.colorsNeedUpdate;c.uvsNeedUpdate = b.uvsNeedUpdate;c.groupsNeedUpdate = b.groupsNeedUpdate;b.verticesNeedUpdate = !1;b.normalsNeedUpdate = !1;b.colorsNeedUpdate = !1;b.uvsNeedUpdate = !1;b.groupsNeedUpdate = !1;b = c;
	    }!0 === b.verticesNeedUpdate && (c = this.attributes.position, void 0 !== c && (c.copyVector3sArray(b.vertices), c.needsUpdate = !0), b.verticesNeedUpdate = !1);!0 === b.normalsNeedUpdate && (c = this.attributes.normal, void 0 !== c && (c.copyVector3sArray(b.normals), c.needsUpdate = !0), b.normalsNeedUpdate = !1);!0 === b.colorsNeedUpdate && (c = this.attributes.color, void 0 !== c && (c.copyColorsArray(b.colors), c.needsUpdate = !0), b.colorsNeedUpdate = !1);b.uvsNeedUpdate && (c = this.attributes.uv, void 0 !== c && (c.copyVector2sArray(b.uvs), c.needsUpdate = !0), b.uvsNeedUpdate = !1);b.lineDistancesNeedUpdate && (c = this.attributes.lineDistance, void 0 !== c && (c.copyArray(b.lineDistances), c.needsUpdate = !0), b.lineDistancesNeedUpdate = !1);b.groupsNeedUpdate && (b.computeGroups(a.geometry), this.groups = b.groups, b.groupsNeedUpdate = !1);return this;
	  }, fromGeometry: function fromGeometry(a) {
	    a.__directGeometry = new THREE.DirectGeometry().fromGeometry(a);return this.fromDirectGeometry(a.__directGeometry);
	  }, fromDirectGeometry: function fromDirectGeometry(a) {
	    var b = new Float32Array(3 * a.vertices.length);this.addAttribute("position", new THREE.BufferAttribute(b, 3).copyVector3sArray(a.vertices));0 < a.normals.length && (b = new Float32Array(3 * a.normals.length), this.addAttribute("normal", new THREE.BufferAttribute(b, 3).copyVector3sArray(a.normals)));0 < a.colors.length && (b = new Float32Array(3 * a.colors.length), this.addAttribute("color", new THREE.BufferAttribute(b, 3).copyColorsArray(a.colors)));0 < a.uvs.length && (b = new Float32Array(2 * a.uvs.length), this.addAttribute("uv", new THREE.BufferAttribute(b, 2).copyVector2sArray(a.uvs)));0 < a.uvs2.length && (b = new Float32Array(2 * a.uvs2.length), this.addAttribute("uv2", new THREE.BufferAttribute(b, 2).copyVector2sArray(a.uvs2)));0 < a.indices.length && (b = new (65535 < a.vertices.length ? Uint32Array : Uint16Array)(3 * a.indices.length), this.setIndex(new THREE.BufferAttribute(b, 1).copyIndicesArray(a.indices)));this.groups = a.groups;for (var c in a.morphTargets) {
	      for (var b = [], d = a.morphTargets[c], e = 0, g = d.length; e < g; e++) {
	        var f = d[e],
	            h = new THREE.Float32Attribute(3 * f.length, 3);b.push(h.copyVector3sArray(f));
	      }this.morphAttributes[c] = b;
	    }0 < a.skinIndices.length && (c = new THREE.Float32Attribute(4 * a.skinIndices.length, 4), this.addAttribute("skinIndex", c.copyVector4sArray(a.skinIndices)));0 < a.skinWeights.length && (c = new THREE.Float32Attribute(4 * a.skinWeights.length, 4), this.addAttribute("skinWeight", c.copyVector4sArray(a.skinWeights)));null !== a.boundingSphere && (this.boundingSphere = a.boundingSphere.clone());null !== a.boundingBox && (this.boundingBox = a.boundingBox.clone());return this;
	  }, computeBoundingBox: function () {
	    var a = new THREE.Vector3();return function () {
	      null === this.boundingBox && (this.boundingBox = new THREE.Box3());var b = this.attributes.position.array;if (b) {
	        var c = this.boundingBox;c.makeEmpty();for (var d = 0, e = b.length; d < e; d += 3) {
	          a.fromArray(b, d), c.expandByPoint(a);
	        }
	      }if (void 0 === b || 0 === b.length) this.boundingBox.min.set(0, 0, 0), this.boundingBox.max.set(0, 0, 0);(isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) && console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
	    };
	  }(), computeBoundingSphere: function () {
	    var a = new THREE.Box3(),
	        b = new THREE.Vector3();return function () {
	      null === this.boundingSphere && (this.boundingSphere = new THREE.Sphere());var c = this.attributes.position.array;if (c) {
	        a.makeEmpty();for (var d = this.boundingSphere.center, e = 0, g = c.length; e < g; e += 3) {
	          b.fromArray(c, e), a.expandByPoint(b);
	        }a.center(d);for (var f = 0, e = 0, g = c.length; e < g; e += 3) {
	          b.fromArray(c, e), f = Math.max(f, d.distanceToSquared(b));
	        }this.boundingSphere.radius = Math.sqrt(f);isNaN(this.boundingSphere.radius) && console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
	      }
	    };
	  }(), computeFaceNormals: function computeFaceNormals() {}, computeVertexNormals: function computeVertexNormals() {
	    var a = this.index,
	        b = this.attributes,
	        c = this.groups;if (b.position) {
	      var d = b.position.array;if (void 0 === b.normal) this.addAttribute("normal", new THREE.BufferAttribute(new Float32Array(d.length), 3));else for (var e = b.normal.array, g = 0, f = e.length; g < f; g++) {
	        e[g] = 0;
	      }var e = b.normal.array,
	          h,
	          l,
	          k,
	          m = new THREE.Vector3(),
	          p = new THREE.Vector3(),
	          n = new THREE.Vector3(),
	          q = new THREE.Vector3(),
	          s = new THREE.Vector3();if (a) {
	        a = a.array;0 === c.length && this.addGroup(0, a.length);
	        for (var t = 0, v = c.length; t < v; ++t) {
	          for (g = c[t], f = g.start, h = g.count, g = f, f += h; g < f; g += 3) {
	            h = 3 * a[g + 0], l = 3 * a[g + 1], k = 3 * a[g + 2], m.fromArray(d, h), p.fromArray(d, l), n.fromArray(d, k), q.subVectors(n, p), s.subVectors(m, p), q.cross(s), e[h] += q.x, e[h + 1] += q.y, e[h + 2] += q.z, e[l] += q.x, e[l + 1] += q.y, e[l + 2] += q.z, e[k] += q.x, e[k + 1] += q.y, e[k + 2] += q.z;
	          }
	        }
	      } else for (g = 0, f = d.length; g < f; g += 9) {
	        m.fromArray(d, g), p.fromArray(d, g + 3), n.fromArray(d, g + 6), q.subVectors(n, p), s.subVectors(m, p), q.cross(s), e[g] = q.x, e[g + 1] = q.y, e[g + 2] = q.z, e[g + 3] = q.x, e[g + 4] = q.y, e[g + 5] = q.z, e[g + 6] = q.x, e[g + 7] = q.y, e[g + 8] = q.z;
	      }this.normalizeNormals();b.normal.needsUpdate = !0;
	    }
	  }, computeTangents: function computeTangents() {
	    console.warn("THREE.BufferGeometry: .computeTangents() has been removed.");
	  }, computeOffsets: function computeOffsets(a) {
	    console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.");
	  }, merge: function merge(a, b) {
	    if (!1 === a instanceof THREE.BufferGeometry) console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.", a);else {
	      void 0 === b && (b = 0);var c = this.attributes,
	          d;for (d in c) {
	        if (void 0 !== a.attributes[d]) for (var e = c[d].array, g = a.attributes[d], f = g.array, h = 0, g = g.itemSize * b; h < f.length; h++, g++) {
	          e[g] = f[h];
	        }
	      }return this;
	    }
	  }, normalizeNormals: function normalizeNormals() {
	    for (var a = this.attributes.normal.array, b, c, d, e = 0, g = a.length; e < g; e += 3) {
	      b = a[e], c = a[e + 1], d = a[e + 2], b = 1 / Math.sqrt(b * b + c * c + d * d), a[e] *= b, a[e + 1] *= b, a[e + 2] *= b;
	    }
	  }, toJSON: function toJSON() {
	    var a = { metadata: { version: 4.4, type: "BufferGeometry", generator: "BufferGeometry.toJSON" } };a.uuid = this.uuid;a.type = this.type;"" !== this.name && (a.name = this.name);
	    if (void 0 !== this.parameters) {
	      var b = this.parameters,
	          c;for (c in b) {
	        void 0 !== b[c] && (a[c] = b[c]);
	      }return a;
	    }a.data = { attributes: {} };var d = this.index;null !== d && (b = Array.prototype.slice.call(d.array), a.data.index = { type: d.array.constructor.name, array: b });d = this.attributes;for (c in d) {
	      var e = d[c],
	          b = Array.prototype.slice.call(e.array);a.data.attributes[c] = { itemSize: e.itemSize, type: e.array.constructor.name, array: b };
	    }c = this.groups;0 < c.length && (a.data.groups = JSON.parse(JSON.stringify(c)));c = this.boundingSphere;null !== c && (a.data.boundingSphere = { center: c.center.toArray(), radius: c.radius });return a;
	  }, clone: function clone() {
	    return new this.constructor().copy(this);
	  }, copy: function copy(a) {
	    var b = a.index;null !== b && this.setIndex(b.clone());var b = a.attributes,
	        c;for (c in b) {
	      this.addAttribute(c, b[c].clone());
	    }a = a.groups;c = 0;for (b = a.length; c < b; c++) {
	      var d = a[c];this.addGroup(d.start, d.count);
	    }return this;
	  }, dispose: function dispose() {
	    this.dispatchEvent({ type: "dispose" });
	  } };THREE.EventDispatcher.prototype.apply(THREE.BufferGeometry.prototype);
	THREE.BufferGeometry.MaxIndex = 65535;THREE.InstancedBufferGeometry = function () {
	  THREE.BufferGeometry.call(this);this.type = "InstancedBufferGeometry";this.maxInstancedCount = void 0;
	};THREE.InstancedBufferGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);THREE.InstancedBufferGeometry.prototype.constructor = THREE.InstancedBufferGeometry;THREE.InstancedBufferGeometry.prototype.addGroup = function (a, b, c) {
	  this.groups.push({ start: a, count: b, instances: c });
	};
	THREE.InstancedBufferGeometry.prototype.copy = function (a) {
	  var b = a.index;null !== b && this.setIndex(b.clone());var b = a.attributes,
	      c;for (c in b) {
	    this.addAttribute(c, b[c].clone());
	  }a = a.groups;c = 0;for (b = a.length; c < b; c++) {
	    var d = a[c];this.addGroup(d.start, d.count, d.instances);
	  }return this;
	};THREE.EventDispatcher.prototype.apply(THREE.InstancedBufferGeometry.prototype);
	THREE.AnimationAction = function (a, b, c, d, e) {
	  if (void 0 === a) throw Error("clip is null");this.clip = a;this.localRoot = null;this.startTime = b || 0;this.timeScale = c || 1;this.weight = d || 1;this.loop = e || THREE.LoopRepeat;this.loopCount = 0;this.enabled = !0;this.actionTime = -this.startTime;this.clipTime = 0;this.propertyBindings = [];
	};
	THREE.AnimationAction.prototype = { constructor: THREE.AnimationAction, setLocalRoot: function setLocalRoot(a) {
	    this.localRoot = a;return this;
	  }, updateTime: function updateTime(a) {
	    var b = this.clipTime,
	        c = this.loopCount,
	        d = this.clip.duration;this.actionTime += a;if (this.loop === THREE.LoopOnce) return this.loopCount = 0, this.clipTime = Math.min(Math.max(this.actionTime, 0), d), this.clipTime !== b && (this.clipTime === d ? this.mixer.dispatchEvent({ type: "finished", action: this, direction: 1 }) : 0 === this.clipTime && this.mixer.dispatchEvent({ type: "finished", action: this,
	      direction: -1 })), this.clipTime;this.loopCount = Math.floor(this.actionTime / d);a = this.actionTime - this.loopCount * d;a %= d;this.loop == THREE.LoopPingPong && 1 === Math.abs(this.loopCount % 2) && (a = d - a);this.clipTime = a;this.loopCount !== c && this.mixer.dispatchEvent({ type: "loop", action: this, loopDelta: this.loopCount - this.loopCount });return this.clipTime;
	  }, syncWith: function syncWith(a) {
	    this.actionTime = a.actionTime;this.timeScale = a.timeScale;return this;
	  }, warpToDuration: function warpToDuration(a) {
	    this.timeScale = this.clip.duration / a;return this;
	  },
	  init: function init(a) {
	    this.clipTime = a - this.startTime;return this;
	  }, update: function update(a) {
	    this.updateTime(a);return this.clip.getAt(this.clipTime);
	  }, getTimeScaleAt: function getTimeScaleAt(a) {
	    return this.timeScale.getAt ? this.timeScale.getAt(a) : this.timeScale;
	  }, getWeightAt: function getWeightAt(a) {
	    return this.weight.getAt ? this.weight.getAt(a) : this.weight;
	  } };
	THREE.AnimationClip = function (a, b, c) {
	  this.name = a;this.tracks = c;this.duration = void 0 !== b ? b : -1;if (0 > this.duration) for (a = 0; a < this.tracks.length; a++) {
	    b = this.tracks[a], this.duration = Math.max(b.keys[b.keys.length - 1].time);
	  }this.trim();this.optimize();this.results = [];
	};
	THREE.AnimationClip.prototype = { constructor: THREE.AnimationClip, getAt: function getAt(a) {
	    a = Math.max(0, Math.min(a, this.duration));for (var b = 0; b < this.tracks.length; b++) {
	      this.results[b] = this.tracks[b].getAt(a);
	    }return this.results;
	  }, trim: function trim() {
	    for (var a = 0; a < this.tracks.length; a++) {
	      this.tracks[a].trim(0, this.duration);
	    }return this;
	  }, optimize: function optimize() {
	    for (var a = 0; a < this.tracks.length; a++) {
	      this.tracks[a].optimize();
	    }return this;
	  } };
	THREE.AnimationClip.CreateFromMorphTargetSequence = function (a, b, c) {
	  for (var d = b.length, e = [], g = 0; g < d; g++) {
	    var f = [];f.push({ time: (g + d - 1) % d, value: 0 });f.push({ time: g, value: 1 });f.push({ time: (g + 1) % d, value: 0 });f.sort(THREE.KeyframeTrack.keyComparer);0 === f[0].time && f.push({ time: d, value: f[0].value });e.push(new THREE.NumberKeyframeTrack(".morphTargetInfluences[" + b[g].name + "]", f).scale(1 / c));
	  }return new THREE.AnimationClip(a, -1, e);
	};
	THREE.AnimationClip.findByName = function (a, b) {
	  for (var c = 0; c < a.length; c++) {
	    if (a[c].name === b) return a[c];
	  }return null;
	};THREE.AnimationClip.CreateClipsFromMorphTargetSequences = function (a, b) {
	  for (var c = {}, d = /^([\w-]*?)([\d]+)$/, e = 0, g = a.length; e < g; e++) {
	    var f = a[e],
	        h = f.name.match(d);if (h && 1 < h.length) {
	      var l = h[1];(h = c[l]) || (c[l] = h = []);h.push(f);
	    }
	  }d = [];for (l in c) {
	    d.push(THREE.AnimationClip.CreateFromMorphTargetSequence(l, c[l], b));
	  }return d;
	};
	THREE.AnimationClip.parse = function (a) {
	  for (var b = [], c = 0; c < a.tracks.length; c++) {
	    b.push(THREE.KeyframeTrack.parse(a.tracks[c]).scale(1 / a.fps));
	  }return new THREE.AnimationClip(a.name, a.duration, b);
	};
	THREE.AnimationClip.parseAnimation = function (a, b, c) {
	  if (!a) return console.error("  no animation in JSONLoader data"), null;var d = function d(a, b, c, _d, e) {
	    for (var g = [], f = 0; f < b.length; f++) {
	      var h = b[f];void 0 !== h[c] && g.push({ time: h.time, value: e(h) });
	    }return 0 < g.length ? new _d(a, g) : null;
	  },
	      e = [],
	      g = a.name || "default",
	      f = a.length || -1,
	      h = a.fps || 30;a = a.hierarchy || [];for (var l = 0; l < a.length; l++) {
	    var k = a[l].keys;if (k && 0 != k.length) if (k[0].morphTargets) {
	      for (var f = {}, m = 0; m < k.length; m++) {
	        if (k[m].morphTargets) for (var p = 0; p < k[m].morphTargets.length; p++) {
	          f[k[m].morphTargets[p]] = -1;
	        }
	      }for (var n in f) {
	        for (var q = [], p = 0; p < k[m].morphTargets.length; p++) {
	          var s = k[m];q.push({ time: s.time, value: s.morphTarget === n ? 1 : 0 });
	        }e.push(new THREE.NumberKeyframeTrack(c + ".morphTargetInfluence[" + n + "]", q));
	      }f = f.length * (h || 1);
	    } else m = c + ".bones[" + b[l].name + "]", (p = d(m + ".position", k, "pos", THREE.VectorKeyframeTrack, function (a) {
	      return new THREE.Vector3().fromArray(a.pos);
	    })) && e.push(p), (p = d(m + ".quaternion", k, "rot", THREE.QuaternionKeyframeTrack, function (a) {
	      return a.rot.slerp ? a.rot.clone() : new THREE.Quaternion().fromArray(a.rot);
	    })) && e.push(p), (k = d(m + ".scale", k, "scl", THREE.VectorKeyframeTrack, function (a) {
	      return new THREE.Vector3().fromArray(a.scl);
	    })) && e.push(k);
	  }return 0 === e.length ? null : new THREE.AnimationClip(g, f, e);
	};THREE.AnimationMixer = function (a) {
	  this.root = a;this.time = 0;this.timeScale = 1;this.actions = [];this.propertyBindingMap = {};
	};
	THREE.AnimationMixer.prototype = { constructor: THREE.AnimationMixer, addAction: function addAction(a) {
	    this.actions.push(a);a.init(this.time);a.mixer = this;for (var b = a.clip.tracks, c = a.localRoot || this.root, d = 0; d < b.length; d++) {
	      var e = b[d],
	          g = c.uuid + "-" + e.name,
	          f = this.propertyBindingMap[g];void 0 === f && (f = new THREE.PropertyBinding(c, e.name), this.propertyBindingMap[g] = f);a.propertyBindings.push(f);f.referenceCount += 1;
	    }
	  }, removeAllActions: function removeAllActions() {
	    for (var a = 0; a < this.actions.length; a++) {
	      this.actions[a].mixer = null;
	    }for (var b in this.propertyBindingMap) {
	      this.propertyBindingMap[b].unbind();
	    }this.actions = [];this.propertyBindingMap = {};return this;
	  }, removeAction: function removeAction(a) {
	    var b = this.actions.indexOf(a);-1 !== b && (this.actions.splice(b, 1), a.mixer = null);b = a.localRoot || this.root;a = a.clip.tracks;for (var c = 0; c < a.length; c++) {
	      var d = b.uuid + "-" + a[c].name,
	          e = this.propertyBindingMap[d];e.referenceCount -= 1;0 >= e.referenceCount && (e.unbind(), delete this.propertyBindingMap[d]);
	    }return this;
	  }, findActionByName: function findActionByName(a) {
	    for (var b = 0; b < this.actions.length; b++) {
	      if (this.actions[b].name === a) return this.actions[b];
	    }return null;
	  }, play: function play(a, b) {
	    a.startTime = this.time;this.addAction(a);return this;
	  }, fadeOut: function fadeOut(a, b) {
	    var c = [];c.push({ time: this.time, value: 1 });c.push({ time: this.time + b, value: 0 });a.weight = new THREE.NumberKeyframeTrack("weight", c);return this;
	  }, fadeIn: function fadeIn(a, b) {
	    var c = [];c.push({ time: this.time, value: 0 });c.push({ time: this.time + b, value: 1 });a.weight = new THREE.NumberKeyframeTrack("weight", c);return this;
	  }, warp: function warp(a, b, c, d) {
	    var e = [];e.push({ time: this.time, value: b });e.push({ time: this.time + d, value: c });
	    a.timeScale = new THREE.NumberKeyframeTrack("timeScale", e);return this;
	  }, crossFade: function crossFade(a, b, c, d) {
	    this.fadeOut(a, c);this.fadeIn(b, c);if (d) {
	      d = a.clip.duration / b.clip.duration;var e = 1 / d;this.warp(a, 1, d, c);this.warp(b, e, 1, c);
	    }return this;
	  }, update: function update(a) {
	    a *= this.timeScale;this.time += a;for (var b = 0; b < this.actions.length; b++) {
	      var c = this.actions[b],
	          d = c.getWeightAt(this.time),
	          e = c.getTimeScaleAt(this.time),
	          e = c.update(a * e);if (!(0 >= c.weight) && c.enabled) for (var g = 0; g < e.length; g++) {
	        c.propertyBindings[g].accumulate(e[g], d);
	      }
	    }for (var f in this.propertyBindingMap) {
	      this.propertyBindingMap[f].apply();
	    }return this;
	  } };THREE.EventDispatcher.prototype.apply(THREE.AnimationMixer.prototype);
	THREE.AnimationUtils = { getEqualsFunc: function getEqualsFunc(a) {
	    return a.equals ? function (a, c) {
	      return a.equals(c);
	    } : function (a, c) {
	      return a === c;
	    };
	  }, clone: function clone(a) {
	    if ("object" === (typeof a === "undefined" ? "undefined" : _typeof(a))) {
	      if (a.clone) return a.clone();console.error("can not figure out how to copy exemplarValue", a);
	    }return a;
	  }, lerp: function lerp(a, b, c, d) {
	    return THREE.AnimationUtils.getLerpFunc(a, d)(a, b, c);
	  }, lerp_object: function lerp_object(a, b, c) {
	    return a.lerp(b, c);
	  }, slerp_object: function slerp_object(a, b, c) {
	    return a.slerp(b, c);
	  }, lerp_number: function lerp_number(a, b, c) {
	    return a * (1 - c) + b * c;
	  }, lerp_boolean: function lerp_boolean(a, b, c) {
	    return .5 > c ? a : b;
	  }, lerp_boolean_immediate: function lerp_boolean_immediate(a, b, c) {
	    return a;
	  }, lerp_string: function lerp_string(a, b, c) {
	    return .5 > c ? a : b;
	  }, lerp_string_immediate: function lerp_string_immediate(a, b, c) {
	    return a;
	  }, getLerpFunc: function getLerpFunc(a, b) {
	    if (void 0 === a || null === a) throw Error("examplarValue is null");switch (typeof a === "undefined" ? "undefined" : _typeof(a)) {case "object":
	        if (a.lerp) return THREE.AnimationUtils.lerp_object;if (a.slerp) return THREE.AnimationUtils.slerp_object;break;case "number":
	        return THREE.AnimationUtils.lerp_number;case "boolean":
	        return b ? THREE.AnimationUtils.lerp_boolean : THREE.AnimationUtils.lerp_boolean_immediate;
	      case "string":
	        return b ? THREE.AnimationUtils.lerp_string : THREE.AnimationUtils.lerp_string_immediate;}
	  } };THREE.KeyframeTrack = function (a, b) {
	  if (void 0 === a) throw Error("track name is undefined");if (void 0 === b || 0 === b.length) throw Error("no keys in track named " + a);this.name = a;this.keys = b;this.lastIndex = 0;this.validate();this.optimize();
	};
	THREE.KeyframeTrack.prototype = { constructor: THREE.KeyframeTrack, getAt: function getAt(a) {
	    for (; this.lastIndex < this.keys.length && a >= this.keys[this.lastIndex].time;) {
	      this.lastIndex++;
	    }for (; 0 < this.lastIndex && a < this.keys[this.lastIndex - 1].time;) {
	      this.lastIndex--;
	    }if (this.lastIndex >= this.keys.length) return this.setResult(this.keys[this.keys.length - 1].value), this.result;if (0 === this.lastIndex) return this.setResult(this.keys[0].value), this.result;var b = this.keys[this.lastIndex - 1];this.setResult(b.value);if (b.constantToNext) return this.result;
	    var c = this.keys[this.lastIndex];return this.result = this.lerpValues(this.result, c.value, (a - b.time) / (c.time - b.time));
	  }, shift: function shift(a) {
	    if (0 !== a) for (var b = 0; b < this.keys.length; b++) {
	      this.keys[b].time += a;
	    }return this;
	  }, scale: function scale(a) {
	    if (1 !== a) for (var b = 0; b < this.keys.length; b++) {
	      this.keys[b].time *= a;
	    }return this;
	  }, trim: function trim(a, b) {
	    for (var c = 0, d = 1; d < this.keys.length; d++) {
	      this.keys[d] <= a && c++;
	    }for (var e = 0, d = this.keys.length - 2; 0 < d; d++) {
	      if (this.keys[d] >= b) e++;else break;
	    }0 < c + e && (this.keys = this.keys.splice(c, this.keys.length - e - c));return this;
	  }, validate: function validate() {
	    var a = null;if (0 === this.keys.length) console.error("  track is empty, no keys", this);else {
	      for (var b = 0; b < this.keys.length; b++) {
	        var c = this.keys[b];if (!c) {
	          console.error("  key is null in track", this, b);return;
	        }if ("number" !== typeof c.time || isNaN(c.time)) {
	          console.error("  key.time is not a valid number", this, b, c);return;
	        }if (void 0 === c.value || null === c.value) {
	          console.error("  key.value is null in track", this, b, c);return;
	        }if (a && a.time > c.time) {
	          console.error("  key.time is less than previous key time, out of order keys", this, b, c, a);return;
	        }a = c;
	      }return this;
	    }
	  }, optimize: function optimize() {
	    var a = [],
	        b = this.keys[0];a.push(b);THREE.AnimationUtils.getEqualsFunc(b.value);for (var c = 1; c < this.keys.length - 1; c++) {
	      var d = this.keys[c],
	          e = this.keys[c + 1];b.time === d.time || this.compareValues(b.value, d.value) && this.compareValues(d.value, e.value) || (b.constantToNext = this.compareValues(b.value, d.value), a.push(d), b = d);
	    }a.push(this.keys[this.keys.length - 1]);this.keys = a;return this;
	  } };THREE.KeyframeTrack.keyComparer = function (a, b) {
	  return a.time - b.time;
	};
	THREE.KeyframeTrack.parse = function (a) {
	  if (void 0 === a.type) throw Error("track type undefined, can not parse");return THREE.KeyframeTrack.GetTrackTypeForTypeName(a.type).parse(a);
	};
	THREE.KeyframeTrack.GetTrackTypeForTypeName = function (a) {
	  switch (a.toLowerCase()) {case "vector":case "vector2":case "vector3":case "vector4":
	      return THREE.VectorKeyframeTrack;case "quaternion":
	      return THREE.QuaternionKeyframeTrack;case "integer":case "scalar":case "double":case "float":case "number":
	      return THREE.NumberKeyframeTrack;case "bool":case "boolean":
	      return THREE.BooleanKeyframeTrack;case "string":
	      return THREE.StringKeyframeTrack;}throw Error("Unsupported typeName: " + a);
	};
	THREE.PropertyBinding = function (a, b) {
	  this.rootNode = a;this.trackName = b;this.referenceCount = 0;this.originalValue = null;var c = THREE.PropertyBinding.parseTrackName(b);this.directoryName = c.directoryName;this.nodeName = c.nodeName;this.objectName = c.objectName;this.objectIndex = c.objectIndex;this.propertyName = c.propertyName;this.propertyIndex = c.propertyIndex;this.node = THREE.PropertyBinding.findNode(a, this.nodeName) || a;this.cumulativeValue = null;this.cumulativeWeight = 0;
	};
	THREE.PropertyBinding.prototype = { constructor: THREE.PropertyBinding, reset: function reset() {
	    this.cumulativeValue = null;this.cumulativeWeight = 0;
	  }, accumulate: function accumulate(a, b) {
	    this.isBound || this.bind();0 === this.cumulativeWeight ? 0 < b && (null === this.cumulativeValue && (this.cumulativeValue = THREE.AnimationUtils.clone(a)), this.cumulativeWeight = b) : (this.cumulativeValue = this.lerpValue(this.cumulativeValue, a, b / (this.cumulativeWeight + b)), this.cumulativeWeight += b);
	  }, unbind: function unbind() {
	    this.isBound && (this.setValue(this.originalValue), this.triggerDirty = this.equalsValue = this.lerpValue = this.getValue = this.setValue = null, this.isBound = !1);
	  }, bind: function bind() {
	    if (!this.isBound) {
	      var a = this.node;if (a) {
	        if (this.objectName) {
	          if ("materials" === this.objectName) {
	            if (!a.material) {
	              console.error("  can not bind to material as node does not have a material", this);return;
	            }if (!a.material.materials) {
	              console.error("  can not bind to material.materials as node.material does not have a materials array", this);return;
	            }a = a.material.materials;
	          } else if ("bones" === this.objectName) {
	            if (!a.skeleton) {
	              console.error("  can not bind to bones as node does not have a skeleton", this);return;
	            }for (var a = a.skeleton.bones, b = 0; b < a.length; b++) {
	              if (a[b].name === this.objectIndex) {
	                this.objectIndex = b;break;
	              }
	            }
	          } else {
	            if (void 0 === a[this.objectName]) {
	              console.error("  can not bind to objectName of node, undefined", this);return;
	            }a = a[this.objectName];
	          }if (void 0 !== this.objectIndex) {
	            if (void 0 === a[this.objectIndex]) {
	              console.error("  trying to bind to objectIndex of objectName, but is undefined:", this, a);return;
	            }a = a[this.objectIndex];
	          }
	        }var c = a[this.propertyName];if (c) {
	          if (void 0 !== this.propertyIndex) {
	            if ("morphTargetInfluences" === this.propertyName) for (a.geometry || console.error("  can not bind to morphTargetInfluences becasuse node does not have a geometry", this), a.geometry.morphTargets || console.error("  can not bind to morphTargetInfluences becasuse node does not have a geometry.morphTargets", this), b = 0; b < this.node.geometry.morphTargets.length; b++) {
	              if (a.geometry.morphTargets[b].name === this.propertyIndex) {
	                this.propertyIndex = b;break;
	              }
	            }this.setValue = function (a) {
	              return this.equalsValue(c[this.propertyIndex], a) ? !1 : (c[this.propertyIndex] = a, !0);
	            };this.getValue = function () {
	              return c[this.propertyIndex];
	            };
	          } else c.copy ? (this.setValue = function (a) {
	            return this.equalsValue(c, a) ? !1 : (c.copy(a), !0);
	          }, this.getValue = function () {
	            return c;
	          }) : (this.setValue = function (b) {
	            return this.equalsValue(a[this.propertyName], b) ? !1 : (a[this.propertyName] = b, !0);
	          }, this.getValue = function () {
	            return a[this.propertyName];
	          });void 0 !== a.needsUpdate ? this.triggerDirty = function () {
	            this.node.needsUpdate = !0;
	          } : void 0 !== a.matrixWorldNeedsUpdate && (this.triggerDirty = function () {
	            a.matrixWorldNeedsUpdate = !0;
	          });this.originalValue = this.getValue();this.equalsValue = THREE.AnimationUtils.getEqualsFunc(this.originalValue);this.lerpValue = THREE.AnimationUtils.getLerpFunc(this.originalValue, !0);this.isBound = !0;
	        } else console.error("  trying to update property for track: " + this.nodeName + "." + this.propertyName + " but it wasn't found.", a);
	      } else console.error("  trying to update node for track: " + this.trackName + " but it wasn't found.");
	    }
	  }, apply: function apply() {
	    this.isBound || this.bind();if (0 < this.cumulativeWeight) {
	      if (1 > this.cumulativeWeight) {
	        var a = 1 - this.cumulativeWeight;this.cumulativeValue = this.lerpValue(this.cumulativeValue, this.originalValue, a / (this.cumulativeWeight + a));
	      }this.setValue(this.cumulativeValue) && this.triggerDirty && this.triggerDirty();this.cumulativeValue = null;this.cumulativeWeight = 0;
	    }
	  } };
	THREE.PropertyBinding.parseTrackName = function (a) {
	  var b = /^(([\w]+\/)*)([\w-\d]+)?(\.([\w]+)(\[([\w\d\[\]\_. ]+)\])?)?(\.([\w.]+)(\[([\w\d\[\]\_. ]+)\])?)$/,
	      c = b.exec(a);if (!c) throw Error("cannot parse trackName at all: " + a);c.index === b.lastIndex && b.lastIndex++;b = { directoryName: c[1], nodeName: c[3], objectName: c[5], objectIndex: c[7], propertyName: c[9], propertyIndex: c[11] };if (null === b.propertyName || 0 === b.propertyName.length) throw Error("can not parse propertyName from trackName: " + a);return b;
	};
	THREE.PropertyBinding.findNode = function (a, b) {
	  function c(a) {
	    for (var c = 0; c < a.bones.length; c++) {
	      var d = a.bones[c];if (d.name === b) return d;
	    }return null;
	  }function d(a) {
	    for (var c = 0; c < a.length; c++) {
	      var e = a[c];if (e.name === b || e.uuid === b || (e = d(e.children))) return e;
	    }return null;
	  }if (!b || "" === b || "root" === b || "." === b || -1 === b || b === a.name || b === a.uuid) return a;if (a.skeleton) {
	    var e = c(a.skeleton);if (e) return e;
	  }return a.children && (e = d(a.children)) ? e : null;
	};
	THREE.VectorKeyframeTrack = function (a, b) {
	  THREE.KeyframeTrack.call(this, a, b);this.result = this.keys[0].value.clone();
	};THREE.VectorKeyframeTrack.prototype = Object.create(THREE.KeyframeTrack.prototype);THREE.VectorKeyframeTrack.prototype.constructor = THREE.VectorKeyframeTrack;THREE.VectorKeyframeTrack.prototype.setResult = function (a) {
	  this.result.copy(a);
	};THREE.VectorKeyframeTrack.prototype.lerpValues = function (a, b, c) {
	  return a.lerp(b, c);
	};THREE.VectorKeyframeTrack.prototype.compareValues = function (a, b) {
	  return a.equals(b);
	};
	THREE.VectorKeyframeTrack.prototype.clone = function () {
	  for (var a = [], b = 0; b < this.keys.length; b++) {
	    var c = this.keys[b];a.push({ time: c.time, value: c.value.clone() });
	  }return new THREE.VectorKeyframeTrack(this.name, a);
	};THREE.VectorKeyframeTrack.parse = function (a) {
	  for (var b = THREE["Vector" + a.keys[0].value.length], c = [], d = 0; d < a.keys.length; d++) {
	    var e = a.keys[d];c.push({ value: new b().fromArray(e.value), time: e.time });
	  }return new THREE.VectorKeyframeTrack(a.name, c);
	};
	THREE.QuaternionKeyframeTrack = function (a, b) {
	  THREE.KeyframeTrack.call(this, a, b);this.result = this.keys[0].value.clone();
	};THREE.QuaternionKeyframeTrack.prototype = Object.create(THREE.KeyframeTrack.prototype);THREE.QuaternionKeyframeTrack.prototype.constructor = THREE.QuaternionKeyframeTrack;THREE.QuaternionKeyframeTrack.prototype.setResult = function (a) {
	  this.result.copy(a);
	};THREE.QuaternionKeyframeTrack.prototype.lerpValues = function (a, b, c) {
	  return a.slerp(b, c);
	};
	THREE.QuaternionKeyframeTrack.prototype.compareValues = function (a, b) {
	  return a.equals(b);
	};THREE.QuaternionKeyframeTrack.prototype.multiply = function (a) {
	  for (var b = 0; b < this.keys.length; b++) {
	    this.keys[b].value.multiply(a);
	  }return this;
	};THREE.QuaternionKeyframeTrack.prototype.clone = function () {
	  for (var a = [], b = 0; b < this.keys.length; b++) {
	    var c = this.keys[b];a.push({ time: c.time, value: c.value.clone() });
	  }return new THREE.QuaternionKeyframeTrack(this.name, a);
	};
	THREE.QuaternionKeyframeTrack.parse = function (a) {
	  for (var b = [], c = 0; c < a.keys.length; c++) {
	    var d = a.keys[c];b.push({ value: new THREE.Quaternion().fromArray(d.value), time: d.time });
	  }return new THREE.QuaternionKeyframeTrack(a.name, b);
	};THREE.StringKeyframeTrack = function (a, b) {
	  THREE.KeyframeTrack.call(this, a, b);this.result = this.keys[0].value;
	};THREE.StringKeyframeTrack.prototype = Object.create(THREE.KeyframeTrack.prototype);THREE.StringKeyframeTrack.prototype.constructor = THREE.StringKeyframeTrack;
	THREE.StringKeyframeTrack.prototype.setResult = function (a) {
	  this.result = a;
	};THREE.StringKeyframeTrack.prototype.lerpValues = function (a, b, c) {
	  return 1 > c ? a : b;
	};THREE.StringKeyframeTrack.prototype.compareValues = function (a, b) {
	  return a === b;
	};THREE.StringKeyframeTrack.prototype.clone = function () {
	  for (var a = [], b = 0; b < this.keys.length; b++) {
	    var c = this.keys[b];a.push({ time: c.time, value: c.value });
	  }return new THREE.StringKeyframeTrack(this.name, a);
	};
	THREE.StringKeyframeTrack.parse = function (a) {
	  return new THREE.StringKeyframeTrack(a.name, a.keys);
	};THREE.BooleanKeyframeTrack = function (a, b) {
	  THREE.KeyframeTrack.call(this, a, b);this.result = this.keys[0].value;
	};THREE.BooleanKeyframeTrack.prototype = Object.create(THREE.KeyframeTrack.prototype);THREE.BooleanKeyframeTrack.prototype.constructor = THREE.BooleanKeyframeTrack;THREE.BooleanKeyframeTrack.prototype.setResult = function (a) {
	  this.result = a;
	};
	THREE.BooleanKeyframeTrack.prototype.lerpValues = function (a, b, c) {
	  return 1 > c ? a : b;
	};THREE.BooleanKeyframeTrack.prototype.compareValues = function (a, b) {
	  return a === b;
	};THREE.BooleanKeyframeTrack.prototype.clone = function () {
	  for (var a = [], b = 0; b < this.keys.length; b++) {
	    var c = this.keys[b];a.push({ time: c.time, value: c.value });
	  }return new THREE.BooleanKeyframeTrack(this.name, a);
	};THREE.BooleanKeyframeTrack.parse = function (a) {
	  return new THREE.BooleanKeyframeTrack(a.name, a.keys);
	};
	THREE.NumberKeyframeTrack = function (a, b) {
	  THREE.KeyframeTrack.call(this, a, b);this.result = this.keys[0].value;
	};THREE.NumberKeyframeTrack.prototype = Object.create(THREE.KeyframeTrack.prototype);THREE.NumberKeyframeTrack.prototype.constructor = THREE.NumberKeyframeTrack;THREE.NumberKeyframeTrack.prototype.setResult = function (a) {
	  this.result = a;
	};THREE.NumberKeyframeTrack.prototype.lerpValues = function (a, b, c) {
	  return a * (1 - c) + b * c;
	};THREE.NumberKeyframeTrack.prototype.compareValues = function (a, b) {
	  return a === b;
	};
	THREE.NumberKeyframeTrack.prototype.clone = function () {
	  for (var a = [], b = 0; b < this.keys.length; b++) {
	    var c = this.keys[b];a.push({ time: c.time, value: c.value });
	  }return new THREE.NumberKeyframeTrack(this.name, a);
	};THREE.NumberKeyframeTrack.parse = function (a) {
	  return new THREE.NumberKeyframeTrack(a.name, a.keys);
	};THREE.Camera = function () {
	  THREE.Object3D.call(this);this.type = "Camera";this.matrixWorldInverse = new THREE.Matrix4();this.projectionMatrix = new THREE.Matrix4();
	};THREE.Camera.prototype = Object.create(THREE.Object3D.prototype);
	THREE.Camera.prototype.constructor = THREE.Camera;THREE.Camera.prototype.getWorldDirection = function () {
	  var a = new THREE.Quaternion();return function (b) {
	    b = b || new THREE.Vector3();this.getWorldQuaternion(a);return b.set(0, 0, -1).applyQuaternion(a);
	  };
	}();THREE.Camera.prototype.lookAt = function () {
	  var a = new THREE.Matrix4();return function (b) {
	    a.lookAt(this.position, b, this.up);this.quaternion.setFromRotationMatrix(a);
	  };
	}();THREE.Camera.prototype.clone = function () {
	  return new this.constructor().copy(this);
	};
	THREE.Camera.prototype.copy = function (a) {
	  THREE.Object3D.prototype.copy.call(this, a);this.matrixWorldInverse.copy(a.matrixWorldInverse);this.projectionMatrix.copy(a.projectionMatrix);return this;
	};
	THREE.CubeCamera = function (a, b, c) {
	  THREE.Object3D.call(this);this.type = "CubeCamera";var d = new THREE.PerspectiveCamera(90, 1, a, b);d.up.set(0, -1, 0);d.lookAt(new THREE.Vector3(1, 0, 0));this.add(d);var e = new THREE.PerspectiveCamera(90, 1, a, b);e.up.set(0, -1, 0);e.lookAt(new THREE.Vector3(-1, 0, 0));this.add(e);var g = new THREE.PerspectiveCamera(90, 1, a, b);g.up.set(0, 0, 1);g.lookAt(new THREE.Vector3(0, 1, 0));this.add(g);var f = new THREE.PerspectiveCamera(90, 1, a, b);f.up.set(0, 0, -1);f.lookAt(new THREE.Vector3(0, -1, 0));
	  this.add(f);var h = new THREE.PerspectiveCamera(90, 1, a, b);h.up.set(0, -1, 0);h.lookAt(new THREE.Vector3(0, 0, 1));this.add(h);var l = new THREE.PerspectiveCamera(90, 1, a, b);l.up.set(0, -1, 0);l.lookAt(new THREE.Vector3(0, 0, -1));this.add(l);this.renderTarget = new THREE.WebGLRenderTargetCube(c, c, { format: THREE.RGBFormat, magFilter: THREE.LinearFilter, minFilter: THREE.LinearFilter });this.updateCubeMap = function (a, b) {
	    null === this.parent && this.updateMatrixWorld();var c = this.renderTarget,
	        n = c.texture.generateMipmaps;c.texture.generateMipmaps = !1;c.activeCubeFace = 0;a.render(b, d, c);c.activeCubeFace = 1;a.render(b, e, c);c.activeCubeFace = 2;a.render(b, g, c);c.activeCubeFace = 3;a.render(b, f, c);c.activeCubeFace = 4;a.render(b, h, c);c.texture.generateMipmaps = n;c.activeCubeFace = 5;a.render(b, l, c);a.setRenderTarget(null);
	  };
	};THREE.CubeCamera.prototype = Object.create(THREE.Object3D.prototype);THREE.CubeCamera.prototype.constructor = THREE.CubeCamera;
	THREE.OrthographicCamera = function (a, b, c, d, e, g) {
	  THREE.Camera.call(this);this.type = "OrthographicCamera";this.zoom = 1;this.left = a;this.right = b;this.top = c;this.bottom = d;this.near = void 0 !== e ? e : .1;this.far = void 0 !== g ? g : 2E3;this.updateProjectionMatrix();
	};THREE.OrthographicCamera.prototype = Object.create(THREE.Camera.prototype);THREE.OrthographicCamera.prototype.constructor = THREE.OrthographicCamera;
	THREE.OrthographicCamera.prototype.updateProjectionMatrix = function () {
	  var a = (this.right - this.left) / (2 * this.zoom),
	      b = (this.top - this.bottom) / (2 * this.zoom),
	      c = (this.right + this.left) / 2,
	      d = (this.top + this.bottom) / 2;this.projectionMatrix.makeOrthographic(c - a, c + a, d + b, d - b, this.near, this.far);
	};THREE.OrthographicCamera.prototype.copy = function (a) {
	  THREE.Camera.prototype.copy.call(this, a);this.left = a.left;this.right = a.right;this.top = a.top;this.bottom = a.bottom;this.near = a.near;this.far = a.far;this.zoom = a.zoom;return this;
	};
	THREE.OrthographicCamera.prototype.toJSON = function (a) {
	  a = THREE.Object3D.prototype.toJSON.call(this, a);a.object.zoom = this.zoom;a.object.left = this.left;a.object.right = this.right;a.object.top = this.top;a.object.bottom = this.bottom;a.object.near = this.near;a.object.far = this.far;return a;
	};THREE.PerspectiveCamera = function (a, b, c, d) {
	  THREE.Camera.call(this);this.type = "PerspectiveCamera";this.zoom = 1;this.fov = void 0 !== a ? a : 50;this.aspect = void 0 !== b ? b : 1;this.near = void 0 !== c ? c : .1;this.far = void 0 !== d ? d : 2E3;this.updateProjectionMatrix();
	};
	THREE.PerspectiveCamera.prototype = Object.create(THREE.Camera.prototype);THREE.PerspectiveCamera.prototype.constructor = THREE.PerspectiveCamera;THREE.PerspectiveCamera.prototype.setLens = function (a, b) {
	  void 0 === b && (b = 24);this.fov = 2 * THREE.Math.radToDeg(Math.atan(b / (2 * a)));this.updateProjectionMatrix();
	};THREE.PerspectiveCamera.prototype.setViewOffset = function (a, b, c, d, e, g) {
	  this.fullWidth = a;this.fullHeight = b;this.x = c;this.y = d;this.width = e;this.height = g;this.updateProjectionMatrix();
	};
	THREE.PerspectiveCamera.prototype.updateProjectionMatrix = function () {
	  var a = THREE.Math.radToDeg(2 * Math.atan(Math.tan(.5 * THREE.Math.degToRad(this.fov)) / this.zoom));if (this.fullWidth) {
	    var b = this.fullWidth / this.fullHeight,
	        a = Math.tan(THREE.Math.degToRad(.5 * a)) * this.near,
	        c = -a,
	        d = b * c,
	        b = Math.abs(b * a - d),
	        c = Math.abs(a - c);this.projectionMatrix.makeFrustum(d + this.x * b / this.fullWidth, d + (this.x + this.width) * b / this.fullWidth, a - (this.y + this.height) * c / this.fullHeight, a - this.y * c / this.fullHeight, this.near, this.far);
	  } else this.projectionMatrix.makePerspective(a, this.aspect, this.near, this.far);
	};THREE.PerspectiveCamera.prototype.copy = function (a) {
	  THREE.Camera.prototype.copy.call(this, a);this.fov = a.fov;this.aspect = a.aspect;this.near = a.near;this.far = a.far;this.zoom = a.zoom;return this;
	};THREE.PerspectiveCamera.prototype.toJSON = function (a) {
	  a = THREE.Object3D.prototype.toJSON.call(this, a);a.object.zoom = this.zoom;a.object.fov = this.fov;a.object.aspect = this.aspect;a.object.near = this.near;a.object.far = this.far;return a;
	};
	THREE.Light = function (a) {
	  THREE.Object3D.call(this);this.type = "Light";this.color = new THREE.Color(a);this.receiveShadow = void 0;
	};THREE.Light.prototype = Object.create(THREE.Object3D.prototype);THREE.Light.prototype.constructor = THREE.Light;
	Object.defineProperties(THREE.Light.prototype, { onlyShadow: { set: function set(a) {
	      console.warn("THREE.Light: .onlyShadow has been removed.");
	    } }, shadowCameraFov: { set: function set(a) {
	      this.shadow.camera.fov = a;
	    } }, shadowCameraLeft: { set: function set(a) {
	      this.shadow.camera.left = a;
	    } }, shadowCameraRight: { set: function set(a) {
	      this.shadow.camera.right = a;
	    } }, shadowCameraTop: { set: function set(a) {
	      this.shadow.camera.top = a;
	    } }, shadowCameraBottom: { set: function set(a) {
	      this.shadow.camera.bottom = a;
	    } }, shadowCameraNear: { set: function set(a) {
	      this.shadow.camera.near = a;
	    } }, shadowCameraFar: { set: function set(a) {
	      this.shadow.camera.far = a;
	    } }, shadowCameraVisible: { set: function set(a) {
	      console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow ) instead.");
	    } }, shadowBias: { set: function set(a) {
	      this.shadow.bias = a;
	    } }, shadowDarkness: { set: function set(a) {
	      this.shadow.darkness = a;
	    } }, shadowMapWidth: { set: function set(a) {
	      this.shadow.mapSize.width = a;
	    } }, shadowMapHeight: { set: function set(a) {
	      this.shadow.mapSize.height = a;
	    } } });
	THREE.Light.prototype.copy = function (a) {
	  THREE.Object3D.prototype.copy.call(this, a);this.color.copy(a.color);return this;
	};
	THREE.Light.prototype.toJSON = function (a) {
	  a = THREE.Object3D.prototype.toJSON.call(this, a);a.object.color = this.color.getHex();void 0 !== this.groundColor && (a.object.groundColor = this.groundColor.getHex());void 0 !== this.intensity && (a.object.intensity = this.intensity);void 0 !== this.distance && (a.object.distance = this.distance);void 0 !== this.angle && (a.object.angle = this.angle);void 0 !== this.decay && (a.object.decay = this.decay);void 0 !== this.exponent && (a.object.exponent = this.exponent);return a;
	};
	THREE.LightShadow = function (a) {
	  this.camera = a;this.bias = 0;this.darkness = 1;this.mapSize = new THREE.Vector2(512, 512);this.matrix = this.map = null;
	};THREE.LightShadow.prototype = { constructor: THREE.LightShadow, copy: function copy(a) {
	    this.camera = a.camera.clone();this.bias = a.bias;this.darkness = a.darkness;this.mapSize.copy(a.mapSize);
	  }, clone: function clone() {
	    return new this.constructor().copy(this);
	  } };THREE.AmbientLight = function (a) {
	  THREE.Light.call(this, a);this.type = "AmbientLight";this.castShadow = void 0;
	};
	THREE.AmbientLight.prototype = Object.create(THREE.Light.prototype);THREE.AmbientLight.prototype.constructor = THREE.AmbientLight;THREE.DirectionalLight = function (a, b) {
	  THREE.Light.call(this, a);this.type = "DirectionalLight";this.position.set(0, 1, 0);this.updateMatrix();this.target = new THREE.Object3D();this.intensity = void 0 !== b ? b : 1;this.shadow = new THREE.LightShadow(new THREE.OrthographicCamera(-500, 500, 500, -500, 50, 5E3));
	};THREE.DirectionalLight.prototype = Object.create(THREE.Light.prototype);
	THREE.DirectionalLight.prototype.constructor = THREE.DirectionalLight;THREE.DirectionalLight.prototype.copy = function (a) {
	  THREE.Light.prototype.copy.call(this, a);this.intensity = a.intensity;this.target = a.target.clone();this.shadow = a.shadow.clone();return this;
	};THREE.HemisphereLight = function (a, b, c) {
	  THREE.Light.call(this, a);this.type = "HemisphereLight";this.castShadow = void 0;this.position.set(0, 1, 0);this.updateMatrix();this.groundColor = new THREE.Color(b);this.intensity = void 0 !== c ? c : 1;
	};
	THREE.HemisphereLight.prototype = Object.create(THREE.Light.prototype);THREE.HemisphereLight.prototype.constructor = THREE.HemisphereLight;THREE.HemisphereLight.prototype.copy = function (a) {
	  THREE.Light.prototype.copy.call(this, a);this.groundColor.copy(a.groundColor);this.intensity = a.intensity;return this;
	};
	THREE.PointLight = function (a, b, c, d) {
	  THREE.Light.call(this, a);this.type = "PointLight";this.intensity = void 0 !== b ? b : 1;this.distance = void 0 !== c ? c : 0;this.decay = void 0 !== d ? d : 1;this.shadow = new THREE.LightShadow(new THREE.PerspectiveCamera(90, 1, 1, 500));
	};THREE.PointLight.prototype = Object.create(THREE.Light.prototype);THREE.PointLight.prototype.constructor = THREE.PointLight;
	THREE.PointLight.prototype.copy = function (a) {
	  THREE.Light.prototype.copy.call(this, a);this.intensity = a.intensity;this.distance = a.distance;this.decay = a.decay;this.shadow = a.shadow.clone();return this;
	};
	THREE.SpotLight = function (a, b, c, d, e, g) {
	  THREE.Light.call(this, a);this.type = "SpotLight";this.position.set(0, 1, 0);this.updateMatrix();this.target = new THREE.Object3D();this.intensity = void 0 !== b ? b : 1;this.distance = void 0 !== c ? c : 0;this.angle = void 0 !== d ? d : Math.PI / 3;this.exponent = void 0 !== e ? e : 10;this.decay = void 0 !== g ? g : 1;this.shadow = new THREE.LightShadow(new THREE.PerspectiveCamera(50, 1, 50, 5E3));
	};THREE.SpotLight.prototype = Object.create(THREE.Light.prototype);THREE.SpotLight.prototype.constructor = THREE.SpotLight;
	THREE.SpotLight.prototype.copy = function (a) {
	  THREE.Light.prototype.copy.call(this, a);this.intensity = a.intensity;this.distance = a.distance;this.angle = a.angle;this.exponent = a.exponent;this.decay = a.decay;this.target = a.target.clone();this.shadow = a.shadow.clone();return this;
	};THREE.Cache = { enabled: !1, files: {}, add: function add(a, b) {
	    !1 !== this.enabled && (this.files[a] = b);
	  }, get: function get(a) {
	    if (!1 !== this.enabled) return this.files[a];
	  }, remove: function remove(a) {
	    delete this.files[a];
	  }, clear: function clear() {
	    this.files = {};
	  } };
	THREE.Loader = function () {
	  this.onLoadStart = function () {};this.onLoadProgress = function () {};this.onLoadComplete = function () {};
	};
	THREE.Loader.prototype = { constructor: THREE.Loader, crossOrigin: void 0, extractUrlBase: function extractUrlBase(a) {
	    a = a.split("/");if (1 === a.length) return "./";a.pop();return a.join("/") + "/";
	  }, initMaterials: function initMaterials(a, b, c) {
	    for (var d = [], e = 0; e < a.length; ++e) {
	      d[e] = this.createMaterial(a[e], b, c);
	    }return d;
	  }, createMaterial: function () {
	    var a, b, c;return function (d, e, g) {
	      function f(a, c, d, f, l) {
	        a = e + a;var k = THREE.Loader.Handlers.get(a);null !== k ? a = k.load(a) : (b.setCrossOrigin(g), a = b.load(a));void 0 !== c && (a.repeat.fromArray(c), 1 !== c[0] && (a.wrapS = THREE.RepeatWrapping), 1 !== c[1] && (a.wrapT = THREE.RepeatWrapping));void 0 !== d && a.offset.fromArray(d);void 0 !== f && ("repeat" === f[0] && (a.wrapS = THREE.RepeatWrapping), "mirror" === f[0] && (a.wrapS = THREE.MirroredRepeatWrapping), "repeat" === f[1] && (a.wrapT = THREE.RepeatWrapping), "mirror" === f[1] && (a.wrapT = THREE.MirroredRepeatWrapping));void 0 !== l && (a.anisotropy = l);c = THREE.Math.generateUUID();h[c] = a;return c;
	      }void 0 === a && (a = new THREE.Color());void 0 === b && (b = new THREE.TextureLoader());void 0 === c && (c = new THREE.MaterialLoader());
	      var h = {},
	          l = { uuid: THREE.Math.generateUUID(), type: "MeshLambertMaterial" },
	          k;for (k in d) {
	        var m = d[k];switch (k) {case "DbgColor":
	            l.color = m;break;case "DbgIndex":case "opticalDensity":case "illumination":
	            break;case "DbgName":
	            l.name = m;break;case "blending":
	            l.blending = THREE[m];break;case "colorDiffuse":
	            l.color = a.fromArray(m).getHex();break;case "colorSpecular":
	            l.specular = a.fromArray(m).getHex();break;case "colorEmissive":
	            l.emissive = a.fromArray(m).getHex();break;case "specularCoef":
	            l.shininess = m;break;case "shading":
	            "basic" === m.toLowerCase() && (l.type = "MeshBasicMaterial");"phong" === m.toLowerCase() && (l.type = "MeshPhongMaterial");break;case "mapDiffuse":
	            l.map = f(m, d.mapDiffuseRepeat, d.mapDiffuseOffset, d.mapDiffuseWrap, d.mapDiffuseAnisotropy);break;case "mapDiffuseRepeat":case "mapDiffuseOffset":case "mapDiffuseWrap":case "mapDiffuseAnisotropy":
	            break;case "mapLight":
	            l.lightMap = f(m, d.mapLightRepeat, d.mapLightOffset, d.mapLightWrap, d.mapLightAnisotropy);break;case "mapLightRepeat":case "mapLightOffset":case "mapLightWrap":case "mapLightAnisotropy":
	            break;
	          case "mapAO":
	            l.aoMap = f(m, d.mapAORepeat, d.mapAOOffset, d.mapAOWrap, d.mapAOAnisotropy);break;case "mapAORepeat":case "mapAOOffset":case "mapAOWrap":case "mapAOAnisotropy":
	            break;case "mapBump":
	            l.bumpMap = f(m, d.mapBumpRepeat, d.mapBumpOffset, d.mapBumpWrap, d.mapBumpAnisotropy);break;case "mapBumpScale":
	            l.bumpScale = m;break;case "mapBumpRepeat":case "mapBumpOffset":case "mapBumpWrap":case "mapBumpAnisotropy":
	            break;case "mapNormal":
	            l.normalMap = f(m, d.mapNormalRepeat, d.mapNormalOffset, d.mapNormalWrap, d.mapNormalAnisotropy);
	            break;case "mapNormalFactor":
	            l.normalScale = [m, m];break;case "mapNormalRepeat":case "mapNormalOffset":case "mapNormalWrap":case "mapNormalAnisotropy":
	            break;case "mapSpecular":
	            l.specularMap = f(m, d.mapSpecularRepeat, d.mapSpecularOffset, d.mapSpecularWrap, d.mapSpecularAnisotropy);break;case "mapSpecularRepeat":case "mapSpecularOffset":case "mapSpecularWrap":case "mapSpecularAnisotropy":
	            break;case "mapAlpha":
	            l.alphaMap = f(m, d.mapAlphaRepeat, d.mapAlphaOffset, d.mapAlphaWrap, d.mapAlphaAnisotropy);break;case "mapAlphaRepeat":case "mapAlphaOffset":case "mapAlphaWrap":case "mapAlphaAnisotropy":
	            break;
	          case "flipSided":
	            l.side = THREE.BackSide;break;case "doubleSided":
	            l.side = THREE.DoubleSide;break;case "transparency":
	            console.warn("THREE.Loader: transparency has been renamed to opacity");l.opacity = m;break;case "opacity":case "transparent":case "depthTest":case "depthWrite":case "transparent":case "visible":case "wireframe":
	            l[k] = m;break;case "vertexColors":
	            !0 === m && (l.vertexColors = THREE.VertexColors);"face" === m && (l.vertexColors = THREE.FaceColors);break;default:
	            console.error("Loader.createMaterial: Unsupported", k, m);}
	      }"MeshPhongMaterial" !== l.type && delete l.specular;1 > l.opacity && (l.transparent = !0);c.setTextures(h);return c.parse(l);
	    };
	  }() };THREE.Loader.Handlers = { handlers: [], add: function add(a, b) {
	    this.handlers.push(a, b);
	  }, get: function get(a) {
	    for (var b = this.handlers, c = 0, d = b.length; c < d; c += 2) {
	      var e = b[c + 1];if (b[c].test(a)) return e;
	    }return null;
	  } };THREE.XHRLoader = function (a) {
	  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
	};
	THREE.XHRLoader.prototype = { constructor: THREE.XHRLoader, load: function load(a, b, c, d) {
	    var e = this,
	        g = THREE.Cache.get(a);if (void 0 !== g) return b && setTimeout(function () {
	      b(g);
	    }, 0), g;var f = new XMLHttpRequest();f.open("GET", a, !0);f.addEventListener("load", function (c) {
	      c = c.target.response;THREE.Cache.add(a, c);b && b(c);e.manager.itemEnd(a);
	    }, !1);void 0 !== c && f.addEventListener("progress", function (a) {
	      c(a);
	    }, !1);f.addEventListener("error", function (b) {
	      d && d(b);e.manager.itemError(a);
	    }, !1);void 0 !== this.crossOrigin && (f.crossOrigin = this.crossOrigin);void 0 !== this.responseType && (f.responseType = this.responseType);void 0 !== this.withCredentials && (f.withCredentials = this.withCredentials);f.send(null);e.manager.itemStart(a);return f;
	  }, setResponseType: function setResponseType(a) {
	    this.responseType = a;
	  }, setCrossOrigin: function setCrossOrigin(a) {
	    this.crossOrigin = a;
	  }, setWithCredentials: function setWithCredentials(a) {
	    this.withCredentials = a;
	  } };THREE.ImageLoader = function (a) {
	  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
	};
	THREE.ImageLoader.prototype = { constructor: THREE.ImageLoader, load: function load(a, b, c, d) {
	    var e = this,
	        g = THREE.Cache.get(a);if (void 0 !== g) return e.manager.itemStart(a), b ? setTimeout(function () {
	      b(g);e.manager.itemEnd(a);
	    }, 0) : e.manager.itemEnd(a), g;var f = document.createElement("img");f.addEventListener("load", function (c) {
	      THREE.Cache.add(a, this);b && b(this);e.manager.itemEnd(a);
	    }, !1);void 0 !== c && f.addEventListener("progress", function (a) {
	      c(a);
	    }, !1);f.addEventListener("error", function (b) {
	      d && d(b);e.manager.itemError(a);
	    }, !1);void 0 !== this.crossOrigin && (f.crossOrigin = this.crossOrigin);e.manager.itemStart(a);f.src = a;return f;
	  }, setCrossOrigin: function setCrossOrigin(a) {
	    this.crossOrigin = a;
	  } };THREE.JSONLoader = function (a) {
	  "boolean" === typeof a && (console.warn("THREE.JSONLoader: showStatus parameter has been removed from constructor."), a = void 0);this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;this.withCredentials = !1;
	};
	THREE.JSONLoader.prototype = { constructor: THREE.JSONLoader, get statusDomElement() {
	    void 0 === this._statusDomElement && (this._statusDomElement = document.createElement("div"));console.warn("THREE.JSONLoader: .statusDomElement has been removed.");return this._statusDomElement;
	  }, load: function load(a, b, c, d) {
	    var e = this,
	        g = this.texturePath && "string" === typeof this.texturePath ? this.texturePath : THREE.Loader.prototype.extractUrlBase(a);c = new THREE.XHRLoader(this.manager);c.setCrossOrigin(this.crossOrigin);c.setWithCredentials(this.withCredentials);
	    c.load(a, function (c) {
	      c = JSON.parse(c);var d = c.metadata;if (void 0 !== d) {
	        if ("object" === d.type) {
	          console.error("THREE.JSONLoader: " + a + " should be loaded with THREE.ObjectLoader instead.");return;
	        }if ("scene" === d.type) {
	          console.error("THREE.JSONLoader: " + a + " should be loaded with THREE.SceneLoader instead.");return;
	        }
	      }c = e.parse(c, g);b(c.geometry, c.materials);
	    });
	  }, setCrossOrigin: function setCrossOrigin(a) {
	    this.crossOrigin = a;
	  }, setTexturePath: function setTexturePath(a) {
	    this.texturePath = a;
	  }, parse: function parse(a, b) {
	    var c = new THREE.Geometry(),
	        d = void 0 !== a.scale ? 1 / a.scale : 1;(function (b) {
	      var d,
	          f,
	          h,
	          l,
	          k,
	          m,
	          p,
	          n,
	          q,
	          s,
	          t,
	          v,
	          u,
	          w = a.faces;m = a.vertices;var D = a.normals,
	          x = a.colors,
	          B = 0;if (void 0 !== a.uvs) {
	        for (d = 0; d < a.uvs.length; d++) {
	          a.uvs[d].length && B++;
	        }for (d = 0; d < B; d++) {
	          c.faceVertexUvs[d] = [];
	        }
	      }l = 0;for (k = m.length; l < k;) {
	        d = new THREE.Vector3(), d.x = m[l++] * b, d.y = m[l++] * b, d.z = m[l++] * b, c.vertices.push(d);
	      }l = 0;for (k = w.length; l < k;) {
	        if (b = w[l++], q = b & 1, h = b & 2, d = b & 8, p = b & 16, s = b & 32, m = b & 64, b &= 128, q) {
	          q = new THREE.Face3();q.a = w[l];q.b = w[l + 1];q.c = w[l + 3];t = new THREE.Face3();t.a = w[l + 1];t.b = w[l + 2];t.c = w[l + 3];l += 4;h && (h = w[l++], q.materialIndex = h, t.materialIndex = h);h = c.faces.length;if (d) for (d = 0; d < B; d++) {
	            for (v = a.uvs[d], c.faceVertexUvs[d][h] = [], c.faceVertexUvs[d][h + 1] = [], f = 0; 4 > f; f++) {
	              n = w[l++], u = v[2 * n], n = v[2 * n + 1], u = new THREE.Vector2(u, n), 2 !== f && c.faceVertexUvs[d][h].push(u), 0 !== f && c.faceVertexUvs[d][h + 1].push(u);
	            }
	          }p && (p = 3 * w[l++], q.normal.set(D[p++], D[p++], D[p]), t.normal.copy(q.normal));if (s) for (d = 0; 4 > d; d++) {
	            p = 3 * w[l++], s = new THREE.Vector3(D[p++], D[p++], D[p]), 2 !== d && q.vertexNormals.push(s), 0 !== d && t.vertexNormals.push(s);
	          }m && (m = w[l++], m = x[m], q.color.setHex(m), t.color.setHex(m));if (b) for (d = 0; 4 > d; d++) {
	            m = w[l++], m = x[m], 2 !== d && q.vertexColors.push(new THREE.Color(m)), 0 !== d && t.vertexColors.push(new THREE.Color(m));
	          }c.faces.push(q);c.faces.push(t);
	        } else {
	          q = new THREE.Face3();q.a = w[l++];q.b = w[l++];q.c = w[l++];h && (h = w[l++], q.materialIndex = h);h = c.faces.length;if (d) for (d = 0; d < B; d++) {
	            for (v = a.uvs[d], c.faceVertexUvs[d][h] = [], f = 0; 3 > f; f++) {
	              n = w[l++], u = v[2 * n], n = v[2 * n + 1], u = new THREE.Vector2(u, n), c.faceVertexUvs[d][h].push(u);
	            }
	          }p && (p = 3 * w[l++], q.normal.set(D[p++], D[p++], D[p]));if (s) for (d = 0; 3 > d; d++) {
	            p = 3 * w[l++], s = new THREE.Vector3(D[p++], D[p++], D[p]), q.vertexNormals.push(s);
	          }m && (m = w[l++], q.color.setHex(x[m]));if (b) for (d = 0; 3 > d; d++) {
	            m = w[l++], q.vertexColors.push(new THREE.Color(x[m]));
	          }c.faces.push(q);
	        }
	      }
	    })(d);(function () {
	      var b = void 0 !== a.influencesPerVertex ? a.influencesPerVertex : 2;if (a.skinWeights) for (var d = 0, f = a.skinWeights.length; d < f; d += b) {
	        c.skinWeights.push(new THREE.Vector4(a.skinWeights[d], 1 < b ? a.skinWeights[d + 1] : 0, 2 < b ? a.skinWeights[d + 2] : 0, 3 < b ? a.skinWeights[d + 3] : 0));
	      }if (a.skinIndices) for (d = 0, f = a.skinIndices.length; d < f; d += b) {
	        c.skinIndices.push(new THREE.Vector4(a.skinIndices[d], 1 < b ? a.skinIndices[d + 1] : 0, 2 < b ? a.skinIndices[d + 2] : 0, 3 < b ? a.skinIndices[d + 3] : 0));
	      }c.bones = a.bones;c.bones && 0 < c.bones.length && (c.skinWeights.length !== c.skinIndices.length || c.skinIndices.length !== c.vertices.length) && console.warn("When skinning, number of vertices (" + c.vertices.length + "), skinIndices (" + c.skinIndices.length + "), and skinWeights (" + c.skinWeights.length + ") should match.");
	    })();(function (b) {
	      if (void 0 !== a.morphTargets) for (var d = 0, f = a.morphTargets.length; d < f; d++) {
	        c.morphTargets[d] = {};c.morphTargets[d].name = a.morphTargets[d].name;c.morphTargets[d].vertices = [];for (var h = c.morphTargets[d].vertices, l = a.morphTargets[d].vertices, k = 0, m = l.length; k < m; k += 3) {
	          var p = new THREE.Vector3();p.x = l[k] * b;p.y = l[k + 1] * b;p.z = l[k + 2] * b;h.push(p);
	        }
	      }if (void 0 !== a.morphColors && 0 < a.morphColors.length) for (console.warn('THREE.JSONLoader: "morphColors" no longer supported. Using them as face colors.'), b = c.faces, h = a.morphColors[0].colors, d = 0, f = b.length; d < f; d++) {
	        b[d].color.fromArray(h, 3 * d);
	      }
	    })(d);(function () {
	      var b = [],
	          d = [];void 0 !== a.animation && d.push(a.animation);void 0 !== a.animations && (a.animations.length ? d = d.concat(a.animations) : d.push(a.animations));for (var f = 0; f < d.length; f++) {
	        var h = THREE.AnimationClip.parseAnimation(d[f], c.bones);h && b.push(h);
	      }c.morphTargets && (d = THREE.AnimationClip.CreateClipsFromMorphTargetSequences(c.morphTargets, 10), b = b.concat(d));0 < b.length && (c.animations = b);
	    })();c.computeFaceNormals();c.computeBoundingSphere();
	    if (void 0 === a.materials || 0 === a.materials.length) return { geometry: c };d = THREE.Loader.prototype.initMaterials(a.materials, b, this.crossOrigin);return { geometry: c, materials: d };
	  } };
	THREE.LoadingManager = function (a, b, c) {
	  var d = this,
	      e = !1,
	      g = 0,
	      f = 0;this.onStart = void 0;this.onLoad = a;this.onProgress = b;this.onError = c;this.itemStart = function (a) {
	    f++;if (!1 === e && void 0 !== d.onStart) d.onStart(a, g, f);e = !0;
	  };this.itemEnd = function (a) {
	    g++;if (void 0 !== d.onProgress) d.onProgress(a, g, f);if (g === f && (e = !1, void 0 !== d.onLoad)) d.onLoad();
	  };this.itemError = function (a) {
	    if (void 0 !== d.onError) d.onError(a);
	  };
	};THREE.DefaultLoadingManager = new THREE.LoadingManager();
	THREE.BufferGeometryLoader = function (a) {
	  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
	};
	THREE.BufferGeometryLoader.prototype = { constructor: THREE.BufferGeometryLoader, load: function load(a, b, c, d) {
	    var e = this,
	        g = new THREE.XHRLoader(e.manager);g.setCrossOrigin(this.crossOrigin);g.load(a, function (a) {
	      b(e.parse(JSON.parse(a)));
	    }, c, d);
	  }, setCrossOrigin: function setCrossOrigin(a) {
	    this.crossOrigin = a;
	  }, parse: function parse(a) {
	    var b = new THREE.BufferGeometry(),
	        c = a.data.index;void 0 !== c && (c = new self[c.type](c.array), b.setIndex(new THREE.BufferAttribute(c, 1)));var d = a.data.attributes,
	        e;for (e in d) {
	      var g = d[e],
	          c = new self[g.type](g.array);
	      b.addAttribute(e, new THREE.BufferAttribute(c, g.itemSize));
	    }e = a.data.groups || a.data.drawcalls || a.data.offsets;if (void 0 !== e) for (c = 0, d = e.length; c !== d; ++c) {
	      g = e[c], b.addGroup(g.start, g.count);
	    }a = a.data.boundingSphere;void 0 !== a && (e = new THREE.Vector3(), void 0 !== a.center && e.fromArray(a.center), b.boundingSphere = new THREE.Sphere(e, a.radius));return b;
	  } };THREE.MaterialLoader = function (a) {
	  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;this.textures = {};
	};
	THREE.MaterialLoader.prototype = { constructor: THREE.MaterialLoader, load: function load(a, b, c, d) {
	    var e = this,
	        g = new THREE.XHRLoader(e.manager);g.setCrossOrigin(this.crossOrigin);g.load(a, function (a) {
	      b(e.parse(JSON.parse(a)));
	    }, c, d);
	  }, setCrossOrigin: function setCrossOrigin(a) {
	    this.crossOrigin = a;
	  }, setTextures: function setTextures(a) {
	    this.textures = a;
	  }, getTexture: function getTexture(a) {
	    var b = this.textures;void 0 === b[a] && console.warn("THREE.MaterialLoader: Undefined texture", a);return b[a];
	  }, parse: function parse(a) {
	    var b = new THREE[a.type]();b.uuid = a.uuid;void 0 !== a.name && (b.name = a.name);void 0 !== a.color && b.color.setHex(a.color);void 0 !== a.emissive && b.emissive.setHex(a.emissive);void 0 !== a.specular && b.specular.setHex(a.specular);void 0 !== a.shininess && (b.shininess = a.shininess);void 0 !== a.uniforms && (b.uniforms = a.uniforms);void 0 !== a.vertexShader && (b.vertexShader = a.vertexShader);void 0 !== a.fragmentShader && (b.fragmentShader = a.fragmentShader);void 0 !== a.vertexColors && (b.vertexColors = a.vertexColors);void 0 !== a.shading && (b.shading = a.shading);void 0 !== a.blending && (b.blending = a.blending);void 0 !== a.side && (b.side = a.side);void 0 !== a.opacity && (b.opacity = a.opacity);void 0 !== a.transparent && (b.transparent = a.transparent);void 0 !== a.alphaTest && (b.alphaTest = a.alphaTest);void 0 !== a.depthTest && (b.depthTest = a.depthTest);void 0 !== a.depthWrite && (b.depthWrite = a.depthWrite);void 0 !== a.wireframe && (b.wireframe = a.wireframe);void 0 !== a.wireframeLinewidth && (b.wireframeLinewidth = a.wireframeLinewidth);void 0 !== a.size && (b.size = a.size);void 0 !== a.sizeAttenuation && (b.sizeAttenuation = a.sizeAttenuation);void 0 !== a.map && (b.map = this.getTexture(a.map));void 0 !== a.alphaMap && (b.alphaMap = this.getTexture(a.alphaMap), b.transparent = !0);void 0 !== a.bumpMap && (b.bumpMap = this.getTexture(a.bumpMap));void 0 !== a.bumpScale && (b.bumpScale = a.bumpScale);void 0 !== a.normalMap && (b.normalMap = this.getTexture(a.normalMap));a.normalScale && (b.normalScale = new THREE.Vector2(a.normalScale, a.normalScale));void 0 !== a.displacementMap && (b.displacementMap = this.getTexture(a.displacementMap));void 0 !== a.displacementScale && (b.displacementScale = a.displacementScale);void 0 !== a.displacementBias && (b.displacementBias = a.displacementBias);void 0 !== a.specularMap && (b.specularMap = this.getTexture(a.specularMap));void 0 !== a.envMap && (b.envMap = this.getTexture(a.envMap), b.combine = THREE.MultiplyOperation);a.reflectivity && (b.reflectivity = a.reflectivity);void 0 !== a.lightMap && (b.lightMap = this.getTexture(a.lightMap));void 0 !== a.lightMapIntensity && (b.lightMapIntensity = a.lightMapIntensity);void 0 !== a.aoMap && (b.aoMap = this.getTexture(a.aoMap));
	    void 0 !== a.aoMapIntensity && (b.aoMapIntensity = a.aoMapIntensity);if (void 0 !== a.materials) for (var c = 0, d = a.materials.length; c < d; c++) {
	      b.materials.push(this.parse(a.materials[c]));
	    }return b;
	  } };THREE.ObjectLoader = function (a) {
	  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;this.texturePath = "";
	};
	THREE.ObjectLoader.prototype = { constructor: THREE.ObjectLoader, load: function load(a, b, c, d) {
	    "" === this.texturePath && (this.texturePath = a.substring(0, a.lastIndexOf("/") + 1));var e = this,
	        g = new THREE.XHRLoader(e.manager);g.setCrossOrigin(this.crossOrigin);g.load(a, function (a) {
	      e.parse(JSON.parse(a), b);
	    }, c, d);
	  }, setTexturePath: function setTexturePath(a) {
	    this.texturePath = a;
	  }, setCrossOrigin: function setCrossOrigin(a) {
	    this.crossOrigin = a;
	  }, parse: function parse(a, b) {
	    var c = this.parseGeometries(a.geometries),
	        d = this.parseImages(a.images, function () {
	      void 0 !== b && b(e);
	    }),
	        d = this.parseTextures(a.textures, d),
	        d = this.parseMaterials(a.materials, d),
	        e = this.parseObject(a.object, c, d);a.animations && (e.animations = this.parseAnimations(a.animations));void 0 !== a.images && 0 !== a.images.length || void 0 === b || b(e);return e;
	  }, parseGeometries: function parseGeometries(a) {
	    var b = {};if (void 0 !== a) for (var c = new THREE.JSONLoader(), d = new THREE.BufferGeometryLoader(), e = 0, g = a.length; e < g; e++) {
	      var f,
	          h = a[e];switch (h.type) {case "PlaneGeometry":case "PlaneBufferGeometry":
	          f = new THREE[h.type](h.width, h.height, h.widthSegments, h.heightSegments);break;case "BoxGeometry":case "CubeGeometry":
	          f = new THREE.BoxGeometry(h.width, h.height, h.depth, h.widthSegments, h.heightSegments, h.depthSegments);break;case "CircleBufferGeometry":
	          f = new THREE.CircleBufferGeometry(h.radius, h.segments, h.thetaStart, h.thetaLength);break;case "CircleGeometry":
	          f = new THREE.CircleGeometry(h.radius, h.segments, h.thetaStart, h.thetaLength);break;case "CylinderGeometry":
	          f = new THREE.CylinderGeometry(h.radiusTop, h.radiusBottom, h.height, h.radialSegments, h.heightSegments, h.openEnded, h.thetaStart, h.thetaLength);break;case "SphereGeometry":
	          f = new THREE.SphereGeometry(h.radius, h.widthSegments, h.heightSegments, h.phiStart, h.phiLength, h.thetaStart, h.thetaLength);break;case "SphereBufferGeometry":
	          f = new THREE.SphereBufferGeometry(h.radius, h.widthSegments, h.heightSegments, h.phiStart, h.phiLength, h.thetaStart, h.thetaLength);break;case "DodecahedronGeometry":
	          f = new THREE.DodecahedronGeometry(h.radius, h.detail);break;case "IcosahedronGeometry":
	          f = new THREE.IcosahedronGeometry(h.radius, h.detail);break;case "OctahedronGeometry":
	          f = new THREE.OctahedronGeometry(h.radius, h.detail);break;case "TetrahedronGeometry":
	          f = new THREE.TetrahedronGeometry(h.radius, h.detail);break;case "RingGeometry":
	          f = new THREE.RingGeometry(h.innerRadius, h.outerRadius, h.thetaSegments, h.phiSegments, h.thetaStart, h.thetaLength);break;case "TorusGeometry":
	          f = new THREE.TorusGeometry(h.radius, h.tube, h.radialSegments, h.tubularSegments, h.arc);break;case "TorusKnotGeometry":
	          f = new THREE.TorusKnotGeometry(h.radius, h.tube, h.radialSegments, h.tubularSegments, h.p, h.q, h.heightScale);break;case "BufferGeometry":
	          f = d.parse(h);break;case "Geometry":
	          f = c.parse(h.data, this.texturePath).geometry;break;default:
	          console.warn('THREE.ObjectLoader: Unsupported geometry type "' + h.type + '"');continue;}f.uuid = h.uuid;void 0 !== h.name && (f.name = h.name);b[h.uuid] = f;
	    }return b;
	  }, parseMaterials: function parseMaterials(a, b) {
	    var c = {};if (void 0 !== a) {
	      var d = new THREE.MaterialLoader();d.setTextures(b);for (var e = 0, g = a.length; e < g; e++) {
	        var f = d.parse(a[e]);c[f.uuid] = f;
	      }
	    }return c;
	  },
	  parseAnimations: function parseAnimations(a) {
	    for (var b = [], c = 0; c < a.length; c++) {
	      var d = THREE.AnimationClip.parse(a[c]);b.push(d);
	    }return b;
	  }, parseImages: function parseImages(a, b) {
	    function c(a) {
	      d.manager.itemStart(a);return f.load(a, function () {
	        d.manager.itemEnd(a);
	      });
	    }var d = this,
	        e = {};if (void 0 !== a && 0 < a.length) {
	      var g = new THREE.LoadingManager(b),
	          f = new THREE.ImageLoader(g);f.setCrossOrigin(this.crossOrigin);for (var g = 0, h = a.length; g < h; g++) {
	        var l = a[g],
	            k = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(l.url) ? l.url : d.texturePath + l.url;e[l.uuid] = c(k);
	      }
	    }return e;
	  },
	  parseTextures: function parseTextures(a, b) {
	    function c(a) {
	      if ("number" === typeof a) return a;console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.", a);return THREE[a];
	    }var d = {};if (void 0 !== a) for (var e = 0, g = a.length; e < g; e++) {
	      var f = a[e];void 0 === f.image && console.warn('THREE.ObjectLoader: No "image" specified for', f.uuid);void 0 === b[f.image] && console.warn("THREE.ObjectLoader: Undefined image", f.image);var h = new THREE.Texture(b[f.image]);h.needsUpdate = !0;h.uuid = f.uuid;void 0 !== f.name && (h.name = f.name);void 0 !== f.mapping && (h.mapping = c(f.mapping));void 0 !== f.offset && (h.offset = new THREE.Vector2(f.offset[0], f.offset[1]));void 0 !== f.repeat && (h.repeat = new THREE.Vector2(f.repeat[0], f.repeat[1]));void 0 !== f.minFilter && (h.minFilter = c(f.minFilter));void 0 !== f.magFilter && (h.magFilter = c(f.magFilter));void 0 !== f.anisotropy && (h.anisotropy = f.anisotropy);Array.isArray(f.wrap) && (h.wrapS = c(f.wrap[0]), h.wrapT = c(f.wrap[1]));d[f.uuid] = h;
	    }return d;
	  }, parseObject: function () {
	    var a = new THREE.Matrix4();return function (b, c, d) {
	      function e(a) {
	        void 0 === c[a] && console.warn("THREE.ObjectLoader: Undefined geometry", a);return c[a];
	      }function g(a) {
	        if (void 0 !== a) return void 0 === d[a] && console.warn("THREE.ObjectLoader: Undefined material", a), d[a];
	      }var f;switch (b.type) {case "Scene":
	          f = new THREE.Scene();break;case "PerspectiveCamera":
	          f = new THREE.PerspectiveCamera(b.fov, b.aspect, b.near, b.far);break;case "OrthographicCamera":
	          f = new THREE.OrthographicCamera(b.left, b.right, b.top, b.bottom, b.near, b.far);break;case "AmbientLight":
	          f = new THREE.AmbientLight(b.color);
	          break;case "DirectionalLight":
	          f = new THREE.DirectionalLight(b.color, b.intensity);break;case "PointLight":
	          f = new THREE.PointLight(b.color, b.intensity, b.distance, b.decay);break;case "SpotLight":
	          f = new THREE.SpotLight(b.color, b.intensity, b.distance, b.angle, b.exponent, b.decay);break;case "HemisphereLight":
	          f = new THREE.HemisphereLight(b.color, b.groundColor, b.intensity);break;case "Mesh":
	          f = new THREE.Mesh(e(b.geometry), g(b.material));break;case "LOD":
	          f = new THREE.LOD();break;case "Line":
	          f = new THREE.Line(e(b.geometry), g(b.material), b.mode);break;case "PointCloud":case "Points":
	          f = new THREE.Points(e(b.geometry), g(b.material));break;case "Sprite":
	          f = new THREE.Sprite(g(b.material));break;case "Group":
	          f = new THREE.Group();break;default:
	          f = new THREE.Object3D();}f.uuid = b.uuid;void 0 !== b.name && (f.name = b.name);void 0 !== b.matrix ? (a.fromArray(b.matrix), a.decompose(f.position, f.quaternion, f.scale)) : (void 0 !== b.position && f.position.fromArray(b.position), void 0 !== b.rotation && f.rotation.fromArray(b.rotation), void 0 !== b.scale && f.scale.fromArray(b.scale));
	      void 0 !== b.castShadow && (f.castShadow = b.castShadow);void 0 !== b.receiveShadow && (f.receiveShadow = b.receiveShadow);void 0 !== b.visible && (f.visible = b.visible);void 0 !== b.userData && (f.userData = b.userData);if (void 0 !== b.children) for (var h in b.children) {
	        f.add(this.parseObject(b.children[h], c, d));
	      }if ("LOD" === b.type) {
	        b = b.levels;for (var l = 0; l < b.length; l++) {
	          var k = b[l];h = f.getObjectByProperty("uuid", k.object);void 0 !== h && f.addLevel(h, k.distance);
	        }
	      }return f;
	    };
	  }() };
	THREE.TextureLoader = function (a) {
	  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
	};THREE.TextureLoader.prototype = { constructor: THREE.TextureLoader, load: function load(a, b, c, d) {
	    var e = new THREE.Texture(),
	        g = new THREE.ImageLoader(this.manager);g.setCrossOrigin(this.crossOrigin);g.load(a, function (a) {
	      e.image = a;e.needsUpdate = !0;void 0 !== b && b(e);
	    }, c, d);return e;
	  }, setCrossOrigin: function setCrossOrigin(a) {
	    this.crossOrigin = a;
	  } };THREE.CubeTextureLoader = function (a) {
	  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
	};
	THREE.CubeTextureLoader.prototype = { constructor: THREE.CubeTextureLoader, load: function load(a, b, c, d) {
	    function e(c) {
	      f.load(a[c], function (a) {
	        g.images[c] = a;h++;6 === h && (g.needsUpdate = !0, b && b(g));
	      }, void 0, d);
	    }var g = new THREE.CubeTexture([]),
	        f = new THREE.ImageLoader();f.setCrossOrigin(this.crossOrigin);var h = 0;for (c = 0; c < a.length; ++c) {
	      e(c);
	    }return g;
	  }, setCrossOrigin: function setCrossOrigin(a) {
	    this.crossOrigin = a;
	  } };
	THREE.DataTextureLoader = THREE.BinaryTextureLoader = function (a) {
	  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;this._parser = null;
	};
	THREE.BinaryTextureLoader.prototype = { constructor: THREE.BinaryTextureLoader, load: function load(a, b, c, d) {
	    var e = this,
	        g = new THREE.DataTexture(),
	        f = new THREE.XHRLoader(this.manager);f.setCrossOrigin(this.crossOrigin);f.setResponseType("arraybuffer");f.load(a, function (a) {
	      if (a = e._parser(a)) void 0 !== a.image ? g.image = a.image : void 0 !== a.data && (g.image.width = a.width, g.image.height = a.height, g.image.data = a.data), g.wrapS = void 0 !== a.wrapS ? a.wrapS : THREE.ClampToEdgeWrapping, g.wrapT = void 0 !== a.wrapT ? a.wrapT : THREE.ClampToEdgeWrapping, g.magFilter = void 0 !== a.magFilter ? a.magFilter : THREE.LinearFilter, g.minFilter = void 0 !== a.minFilter ? a.minFilter : THREE.LinearMipMapLinearFilter, g.anisotropy = void 0 !== a.anisotropy ? a.anisotropy : 1, void 0 !== a.format && (g.format = a.format), void 0 !== a.type && (g.type = a.type), void 0 !== a.mipmaps && (g.mipmaps = a.mipmaps), 1 === a.mipmapCount && (g.minFilter = THREE.LinearFilter), g.needsUpdate = !0, b && b(g, a);
	    }, c, d);return g;
	  }, setCrossOrigin: function setCrossOrigin(a) {
	    this.crossOrigin = a;
	  } };
	THREE.CompressedTextureLoader = function (a) {
	  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;this._parser = null;
	};
	THREE.CompressedTextureLoader.prototype = { constructor: THREE.CompressedTextureLoader, load: function load(a, b, c, d) {
	    var e = this,
	        g = [],
	        f = new THREE.CompressedTexture();f.image = g;var h = new THREE.XHRLoader(this.manager);h.setCrossOrigin(this.crossOrigin);h.setResponseType("arraybuffer");if (Array.isArray(a)) for (var l = 0, k = function k(_k) {
	      h.load(a[_k], function (a) {
	        a = e._parser(a, !0);g[_k] = { width: a.width, height: a.height, format: a.format, mipmaps: a.mipmaps };l += 1;6 === l && (1 === a.mipmapCount && (f.minFilter = THREE.LinearFilter), f.format = a.format, f.needsUpdate = !0, b && b(f));
	      }, c, d);
	    }, m = 0, p = a.length; m < p; ++m) {
	      k(m);
	    } else h.load(a, function (a) {
	      a = e._parser(a, !0);if (a.isCubemap) for (var c = a.mipmaps.length / a.mipmapCount, d = 0; d < c; d++) {
	        g[d] = { mipmaps: [] };for (var h = 0; h < a.mipmapCount; h++) {
	          g[d].mipmaps.push(a.mipmaps[d * a.mipmapCount + h]), g[d].format = a.format, g[d].width = a.width, g[d].height = a.height;
	        }
	      } else f.image.width = a.width, f.image.height = a.height, f.mipmaps = a.mipmaps;1 === a.mipmapCount && (f.minFilter = THREE.LinearFilter);f.format = a.format;f.needsUpdate = !0;b && b(f);
	    }, c, d);return f;
	  }, setCrossOrigin: function setCrossOrigin(a) {
	    this.crossOrigin = a;
	  } };
	THREE.Material = function () {
	  Object.defineProperty(this, "id", { value: THREE.MaterialIdCount++ });this.uuid = THREE.Math.generateUUID();this.name = "";this.type = "Material";this.side = THREE.FrontSide;this.opacity = 1;this.transparent = !1;this.blending = THREE.NormalBlending;this.blendSrc = THREE.SrcAlphaFactor;this.blendDst = THREE.OneMinusSrcAlphaFactor;this.blendEquation = THREE.AddEquation;this.blendEquationAlpha = this.blendDstAlpha = this.blendSrcAlpha = null;this.depthFunc = THREE.LessEqualDepth;this.colorWrite = this.depthWrite = this.depthTest = !0;this.precision = null;this.polygonOffset = !1;this.overdraw = this.alphaTest = this.polygonOffsetUnits = this.polygonOffsetFactor = 0;this._needsUpdate = this.visible = !0;
	};
	THREE.Material.prototype = { constructor: THREE.Material, get needsUpdate() {
	    return this._needsUpdate;
	  }, set needsUpdate(a) {
	    !0 === a && this.update();this._needsUpdate = a;
	  }, setValues: function setValues(a) {
	    if (void 0 !== a) for (var b in a) {
	      var c = a[b];if (void 0 === c) console.warn("THREE.Material: '" + b + "' parameter is undefined.");else {
	        var d = this[b];void 0 === d ? console.warn("THREE." + this.type + ": '" + b + "' is not a property of this material.") : d instanceof THREE.Color ? d.set(c) : d instanceof THREE.Vector3 && c instanceof THREE.Vector3 ? d.copy(c) : this[b] = "overdraw" === b ? Number(c) : c;
	      }
	    }
	  }, toJSON: function toJSON(a) {
	    var b = { metadata: { version: 4.4, type: "Material", generator: "Material.toJSON" } };b.uuid = this.uuid;b.type = this.type;"" !== this.name && (b.name = this.name);this.color instanceof THREE.Color && (b.color = this.color.getHex());this.emissive instanceof THREE.Color && (b.emissive = this.emissive.getHex());this.specular instanceof THREE.Color && (b.specular = this.specular.getHex());void 0 !== this.shininess && (b.shininess = this.shininess);this.map instanceof THREE.Texture && (b.map = this.map.toJSON(a).uuid);this.alphaMap instanceof THREE.Texture && (b.alphaMap = this.alphaMap.toJSON(a).uuid);this.lightMap instanceof THREE.Texture && (b.lightMap = this.lightMap.toJSON(a).uuid);this.bumpMap instanceof THREE.Texture && (b.bumpMap = this.bumpMap.toJSON(a).uuid, b.bumpScale = this.bumpScale);this.normalMap instanceof THREE.Texture && (b.normalMap = this.normalMap.toJSON(a).uuid, b.normalScale = this.normalScale);this.displacementMap instanceof THREE.Texture && (b.displacementMap = this.displacementMap.toJSON(a).uuid, b.displacementScale = this.displacementScale, b.displacementBias = this.displacementBias);this.specularMap instanceof THREE.Texture && (b.specularMap = this.specularMap.toJSON(a).uuid);this.envMap instanceof THREE.Texture && (b.envMap = this.envMap.toJSON(a).uuid, b.reflectivity = this.reflectivity);void 0 !== this.size && (b.size = this.size);void 0 !== this.sizeAttenuation && (b.sizeAttenuation = this.sizeAttenuation);void 0 !== this.vertexColors && this.vertexColors !== THREE.NoColors && (b.vertexColors = this.vertexColors);void 0 !== this.shading && this.shading !== THREE.SmoothShading && (b.shading = this.shading);void 0 !== this.blending && this.blending !== THREE.NormalBlending && (b.blending = this.blending);void 0 !== this.side && this.side !== THREE.FrontSide && (b.side = this.side);1 > this.opacity && (b.opacity = this.opacity);!0 === this.transparent && (b.transparent = this.transparent);0 < this.alphaTest && (b.alphaTest = this.alphaTest);!0 === this.wireframe && (b.wireframe = this.wireframe);1 < this.wireframeLinewidth && (b.wireframeLinewidth = this.wireframeLinewidth);return b;
	  },
	  clone: function clone() {
	    return new this.constructor().copy(this);
	  }, copy: function copy(a) {
	    this.name = a.name;this.side = a.side;this.opacity = a.opacity;this.transparent = a.transparent;this.blending = a.blending;this.blendSrc = a.blendSrc;this.blendDst = a.blendDst;this.blendEquation = a.blendEquation;this.blendSrcAlpha = a.blendSrcAlpha;this.blendDstAlpha = a.blendDstAlpha;this.blendEquationAlpha = a.blendEquationAlpha;this.depthFunc = a.depthFunc;this.depthTest = a.depthTest;this.depthWrite = a.depthWrite;this.precision = a.precision;this.polygonOffset = a.polygonOffset;this.polygonOffsetFactor = a.polygonOffsetFactor;this.polygonOffsetUnits = a.polygonOffsetUnits;this.alphaTest = a.alphaTest;this.overdraw = a.overdraw;this.visible = a.visible;return this;
	  }, update: function update() {
	    this.dispatchEvent({ type: "update" });
	  }, dispose: function dispose() {
	    this.dispatchEvent({ type: "dispose" });
	  }, get wrapAround() {
	    console.warn("THREE." + this.type + ": .wrapAround has been removed.");
	  }, set wrapAround(a) {
	    console.warn("THREE." + this.type + ": .wrapAround has been removed.");
	  }, get wrapRGB() {
	    console.warn("THREE." + this.type + ": .wrapRGB has been removed.");return new THREE.Color();
	  } };THREE.EventDispatcher.prototype.apply(THREE.Material.prototype);THREE.MaterialIdCount = 0;THREE.LineBasicMaterial = function (a) {
	  THREE.Material.call(this);this.type = "LineBasicMaterial";this.color = new THREE.Color(16777215);this.linewidth = 1;this.linejoin = this.linecap = "round";this.vertexColors = THREE.NoColors;this.fog = !0;this.setValues(a);
	};THREE.LineBasicMaterial.prototype = Object.create(THREE.Material.prototype);
	THREE.LineBasicMaterial.prototype.constructor = THREE.LineBasicMaterial;THREE.LineBasicMaterial.prototype.copy = function (a) {
	  THREE.Material.prototype.copy.call(this, a);this.color.copy(a.color);this.linewidth = a.linewidth;this.linecap = a.linecap;this.linejoin = a.linejoin;this.vertexColors = a.vertexColors;this.fog = a.fog;return this;
	};
	THREE.LineDashedMaterial = function (a) {
	  THREE.Material.call(this);this.type = "LineDashedMaterial";this.color = new THREE.Color(16777215);this.scale = this.linewidth = 1;this.dashSize = 3;this.gapSize = 1;this.vertexColors = !1;this.fog = !0;this.setValues(a);
	};THREE.LineDashedMaterial.prototype = Object.create(THREE.Material.prototype);THREE.LineDashedMaterial.prototype.constructor = THREE.LineDashedMaterial;
	THREE.LineDashedMaterial.prototype.copy = function (a) {
	  THREE.Material.prototype.copy.call(this, a);this.color.copy(a.color);this.linewidth = a.linewidth;this.scale = a.scale;this.dashSize = a.dashSize;this.gapSize = a.gapSize;this.vertexColors = a.vertexColors;this.fog = a.fog;return this;
	};
	THREE.MeshBasicMaterial = function (a) {
	  THREE.Material.call(this);this.type = "MeshBasicMaterial";this.color = new THREE.Color(16777215);this.aoMap = this.map = null;this.aoMapIntensity = 1;this.envMap = this.alphaMap = this.specularMap = null;this.combine = THREE.MultiplyOperation;this.reflectivity = 1;this.refractionRatio = .98;this.fog = !0;this.shading = THREE.SmoothShading;this.wireframe = !1;this.wireframeLinewidth = 1;this.wireframeLinejoin = this.wireframeLinecap = "round";this.vertexColors = THREE.NoColors;this.morphTargets = this.skinning = !1;this.setValues(a);
	};THREE.MeshBasicMaterial.prototype = Object.create(THREE.Material.prototype);THREE.MeshBasicMaterial.prototype.constructor = THREE.MeshBasicMaterial;
	THREE.MeshBasicMaterial.prototype.copy = function (a) {
	  THREE.Material.prototype.copy.call(this, a);this.color.copy(a.color);this.map = a.map;this.aoMap = a.aoMap;this.aoMapIntensity = a.aoMapIntensity;this.specularMap = a.specularMap;this.alphaMap = a.alphaMap;this.envMap = a.envMap;this.combine = a.combine;this.reflectivity = a.reflectivity;this.refractionRatio = a.refractionRatio;this.fog = a.fog;this.shading = a.shading;this.wireframe = a.wireframe;this.wireframeLinewidth = a.wireframeLinewidth;this.wireframeLinecap = a.wireframeLinecap;
	  this.wireframeLinejoin = a.wireframeLinejoin;this.vertexColors = a.vertexColors;this.skinning = a.skinning;this.morphTargets = a.morphTargets;return this;
	};
	THREE.MeshLambertMaterial = function (a) {
	  THREE.Material.call(this);this.type = "MeshLambertMaterial";this.color = new THREE.Color(16777215);this.emissive = new THREE.Color(0);this.envMap = this.alphaMap = this.specularMap = this.map = null;this.combine = THREE.MultiplyOperation;this.reflectivity = 1;this.refractionRatio = .98;this.fog = !0;this.wireframe = !1;this.wireframeLinewidth = 1;this.wireframeLinejoin = this.wireframeLinecap = "round";this.vertexColors = THREE.NoColors;this.morphNormals = this.morphTargets = this.skinning = !1;this.setValues(a);
	};
	THREE.MeshLambertMaterial.prototype = Object.create(THREE.Material.prototype);THREE.MeshLambertMaterial.prototype.constructor = THREE.MeshLambertMaterial;
	THREE.MeshLambertMaterial.prototype.copy = function (a) {
	  THREE.Material.prototype.copy.call(this, a);this.color.copy(a.color);this.emissive.copy(a.emissive);this.map = a.map;this.specularMap = a.specularMap;this.alphaMap = a.alphaMap;this.envMap = a.envMap;this.combine = a.combine;this.reflectivity = a.reflectivity;this.refractionRatio = a.refractionRatio;this.fog = a.fog;this.wireframe = a.wireframe;this.wireframeLinewidth = a.wireframeLinewidth;this.wireframeLinecap = a.wireframeLinecap;this.wireframeLinejoin = a.wireframeLinejoin;
	  this.vertexColors = a.vertexColors;this.skinning = a.skinning;this.morphTargets = a.morphTargets;this.morphNormals = a.morphNormals;return this;
	};
	THREE.MeshPhongMaterial = function (a) {
	  THREE.Material.call(this);this.type = "MeshPhongMaterial";this.color = new THREE.Color(16777215);this.emissive = new THREE.Color(0);this.specular = new THREE.Color(1118481);this.shininess = 30;this.metal = !1;this.lightMap = this.map = null;this.lightMapIntensity = 1;this.aoMap = null;this.aoMapIntensity = 1;this.bumpMap = this.emissiveMap = null;this.bumpScale = 1;this.normalMap = null;this.normalScale = new THREE.Vector2(1, 1);this.displacementMap = null;this.displacementScale = 1;this.displacementBias = 0;this.envMap = this.alphaMap = this.specularMap = null;this.combine = THREE.MultiplyOperation;this.reflectivity = 1;this.refractionRatio = .98;this.fog = !0;this.shading = THREE.SmoothShading;this.wireframe = !1;this.wireframeLinewidth = 1;this.wireframeLinejoin = this.wireframeLinecap = "round";this.vertexColors = THREE.NoColors;this.morphNormals = this.morphTargets = this.skinning = !1;this.setValues(a);
	};THREE.MeshPhongMaterial.prototype = Object.create(THREE.Material.prototype);THREE.MeshPhongMaterial.prototype.constructor = THREE.MeshPhongMaterial;
	THREE.MeshPhongMaterial.prototype.copy = function (a) {
	  THREE.Material.prototype.copy.call(this, a);this.color.copy(a.color);this.emissive.copy(a.emissive);this.specular.copy(a.specular);this.shininess = a.shininess;this.metal = a.metal;this.map = a.map;this.lightMap = a.lightMap;this.lightMapIntensity = a.lightMapIntensity;this.aoMap = a.aoMap;this.aoMapIntensity = a.aoMapIntensity;this.emissiveMap = a.emissiveMap;this.bumpMap = a.bumpMap;this.bumpScale = a.bumpScale;this.normalMap = a.normalMap;this.normalScale.copy(a.normalScale);
	  this.displacementMap = a.displacementMap;this.displacementScale = a.displacementScale;this.displacementBias = a.displacementBias;this.specularMap = a.specularMap;this.alphaMap = a.alphaMap;this.envMap = a.envMap;this.combine = a.combine;this.reflectivity = a.reflectivity;this.refractionRatio = a.refractionRatio;this.fog = a.fog;this.shading = a.shading;this.wireframe = a.wireframe;this.wireframeLinewidth = a.wireframeLinewidth;this.wireframeLinecap = a.wireframeLinecap;this.wireframeLinejoin = a.wireframeLinejoin;this.vertexColors = a.vertexColors;this.skinning = a.skinning;this.morphTargets = a.morphTargets;this.morphNormals = a.morphNormals;return this;
	};THREE.MeshDepthMaterial = function (a) {
	  THREE.Material.call(this);this.type = "MeshDepthMaterial";this.wireframe = this.morphTargets = !1;this.wireframeLinewidth = 1;this.setValues(a);
	};THREE.MeshDepthMaterial.prototype = Object.create(THREE.Material.prototype);THREE.MeshDepthMaterial.prototype.constructor = THREE.MeshDepthMaterial;
	THREE.MeshDepthMaterial.prototype.copy = function (a) {
	  THREE.Material.prototype.copy.call(this, a);this.wireframe = a.wireframe;this.wireframeLinewidth = a.wireframeLinewidth;return this;
	};THREE.MeshNormalMaterial = function (a) {
	  THREE.Material.call(this, a);this.type = "MeshNormalMaterial";this.wireframe = !1;this.wireframeLinewidth = 1;this.morphTargets = !1;this.setValues(a);
	};THREE.MeshNormalMaterial.prototype = Object.create(THREE.Material.prototype);THREE.MeshNormalMaterial.prototype.constructor = THREE.MeshNormalMaterial;
	THREE.MeshNormalMaterial.prototype.copy = function (a) {
	  THREE.Material.prototype.copy.call(this, a);this.wireframe = a.wireframe;this.wireframeLinewidth = a.wireframeLinewidth;return this;
	};THREE.MultiMaterial = function (a) {
	  this.uuid = THREE.Math.generateUUID();this.type = "MultiMaterial";this.materials = a instanceof Array ? a : [];this.visible = !0;
	};
	THREE.MultiMaterial.prototype = { constructor: THREE.MultiMaterial, toJSON: function toJSON() {
	    for (var a = { metadata: { version: 4.2, type: "material", generator: "MaterialExporter" }, uuid: this.uuid, type: this.type, materials: [] }, b = 0, c = this.materials.length; b < c; b++) {
	      a.materials.push(this.materials[b].toJSON());
	    }a.visible = this.visible;return a;
	  }, clone: function clone() {
	    for (var a = new this.constructor(), b = 0; b < this.materials.length; b++) {
	      a.materials.push(this.materials[b].clone());
	    }a.visible = this.visible;return a;
	  } };THREE.MeshFaceMaterial = THREE.MultiMaterial;
	THREE.PointsMaterial = function (a) {
	  THREE.Material.call(this);this.type = "PointsMaterial";this.color = new THREE.Color(16777215);this.map = null;this.size = 1;this.sizeAttenuation = !0;this.vertexColors = THREE.NoColors;this.fog = !0;this.setValues(a);
	};THREE.PointsMaterial.prototype = Object.create(THREE.Material.prototype);THREE.PointsMaterial.prototype.constructor = THREE.PointsMaterial;
	THREE.PointsMaterial.prototype.copy = function (a) {
	  THREE.Material.prototype.copy.call(this, a);this.color.copy(a.color);this.map = a.map;this.size = a.size;this.sizeAttenuation = a.sizeAttenuation;this.vertexColors = a.vertexColors;this.fog = a.fog;return this;
	};THREE.PointCloudMaterial = function (a) {
	  console.warn("THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.");return new THREE.PointsMaterial(a);
	};
	THREE.ParticleBasicMaterial = function (a) {
	  console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.");return new THREE.PointsMaterial(a);
	};THREE.ParticleSystemMaterial = function (a) {
	  console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.");return new THREE.PointsMaterial(a);
	};
	THREE.ShaderMaterial = function (a) {
	  THREE.Material.call(this);this.type = "ShaderMaterial";this.defines = {};this.uniforms = {};this.vertexShader = "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";this.fragmentShader = "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";this.shading = THREE.SmoothShading;this.linewidth = 1;this.wireframe = !1;this.wireframeLinewidth = 1;this.lights = this.fog = !1;this.vertexColors = THREE.NoColors;this.derivatives = this.morphNormals = this.morphTargets = this.skinning = !1;this.defaultAttributeValues = { color: [1, 1, 1], uv: [0, 0], uv2: [0, 0] };this.index0AttributeName = void 0;void 0 !== a && (void 0 !== a.attributes && console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."), this.setValues(a));
	};THREE.ShaderMaterial.prototype = Object.create(THREE.Material.prototype);THREE.ShaderMaterial.prototype.constructor = THREE.ShaderMaterial;
	THREE.ShaderMaterial.prototype.copy = function (a) {
	  THREE.Material.prototype.copy.call(this, a);this.fragmentShader = a.fragmentShader;this.vertexShader = a.vertexShader;this.uniforms = THREE.UniformsUtils.clone(a.uniforms);this.attributes = a.attributes;this.defines = a.defines;this.shading = a.shading;this.wireframe = a.wireframe;this.wireframeLinewidth = a.wireframeLinewidth;this.fog = a.fog;this.lights = a.lights;this.vertexColors = a.vertexColors;this.skinning = a.skinning;this.morphTargets = a.morphTargets;this.morphNormals = a.morphNormals;this.derivatives = a.derivatives;return this;
	};THREE.ShaderMaterial.prototype.toJSON = function (a) {
	  a = THREE.Material.prototype.toJSON.call(this, a);a.uniforms = this.uniforms;a.attributes = this.attributes;a.vertexShader = this.vertexShader;a.fragmentShader = this.fragmentShader;return a;
	};THREE.RawShaderMaterial = function (a) {
	  THREE.ShaderMaterial.call(this, a);this.type = "RawShaderMaterial";
	};THREE.RawShaderMaterial.prototype = Object.create(THREE.ShaderMaterial.prototype);
	THREE.RawShaderMaterial.prototype.constructor = THREE.RawShaderMaterial;THREE.SpriteMaterial = function (a) {
	  THREE.Material.call(this);this.type = "SpriteMaterial";this.color = new THREE.Color(16777215);this.map = null;this.rotation = 0;this.fog = !1;this.setValues(a);
	};THREE.SpriteMaterial.prototype = Object.create(THREE.Material.prototype);THREE.SpriteMaterial.prototype.constructor = THREE.SpriteMaterial;
	THREE.SpriteMaterial.prototype.copy = function (a) {
	  THREE.Material.prototype.copy.call(this, a);this.color.copy(a.color);this.map = a.map;this.rotation = a.rotation;this.fog = a.fog;return this;
	};
	THREE.Texture = function (a, b, c, d, e, g, f, h, l) {
	  Object.defineProperty(this, "id", { value: THREE.TextureIdCount++ });this.uuid = THREE.Math.generateUUID();this.sourceFile = this.name = "";this.image = void 0 !== a ? a : THREE.Texture.DEFAULT_IMAGE;this.mipmaps = [];this.mapping = void 0 !== b ? b : THREE.Texture.DEFAULT_MAPPING;this.wrapS = void 0 !== c ? c : THREE.ClampToEdgeWrapping;this.wrapT = void 0 !== d ? d : THREE.ClampToEdgeWrapping;this.magFilter = void 0 !== e ? e : THREE.LinearFilter;this.minFilter = void 0 !== g ? g : THREE.LinearMipMapLinearFilter;
	  this.anisotropy = void 0 !== l ? l : 1;this.format = void 0 !== f ? f : THREE.RGBAFormat;this.type = void 0 !== h ? h : THREE.UnsignedByteType;this.offset = new THREE.Vector2(0, 0);this.repeat = new THREE.Vector2(1, 1);this.generateMipmaps = !0;this.premultiplyAlpha = !1;this.flipY = !0;this.unpackAlignment = 4;this.version = 0;this.onUpdate = null;
	};THREE.Texture.DEFAULT_IMAGE = void 0;THREE.Texture.DEFAULT_MAPPING = THREE.UVMapping;
	THREE.Texture.prototype = { constructor: THREE.Texture, set needsUpdate(a) {
	    !0 === a && this.version++;
	  }, clone: function clone() {
	    return new this.constructor().copy(this);
	  }, copy: function copy(a) {
	    this.image = a.image;this.mipmaps = a.mipmaps.slice(0);this.mapping = a.mapping;this.wrapS = a.wrapS;this.wrapT = a.wrapT;this.magFilter = a.magFilter;this.minFilter = a.minFilter;this.anisotropy = a.anisotropy;this.format = a.format;this.type = a.type;this.offset.copy(a.offset);this.repeat.copy(a.repeat);this.generateMipmaps = a.generateMipmaps;this.premultiplyAlpha = a.premultiplyAlpha;this.flipY = a.flipY;this.unpackAlignment = a.unpackAlignment;return this;
	  }, toJSON: function toJSON(a) {
	    if (void 0 !== a.textures[this.uuid]) return a.textures[this.uuid];var b = { metadata: { version: 4.4, type: "Texture", generator: "Texture.toJSON" }, uuid: this.uuid, name: this.name, mapping: this.mapping, repeat: [this.repeat.x, this.repeat.y], offset: [this.offset.x, this.offset.y], wrap: [this.wrapS, this.wrapT], minFilter: this.minFilter, magFilter: this.magFilter, anisotropy: this.anisotropy };if (void 0 !== this.image) {
	      var c = this.image;void 0 === c.uuid && (c.uuid = THREE.Math.generateUUID());if (void 0 === a.images[c.uuid]) {
	        var d = a.images,
	            e = c.uuid,
	            g = c.uuid,
	            f;void 0 !== c.toDataURL ? f = c : (f = document.createElement("canvas"), f.width = c.width, f.height = c.height, f.getContext("2d").drawImage(c, 0, 0, c.width, c.height));f = 2048 < f.width || 2048 < f.height ? f.toDataURL("image/jpeg", .6) : f.toDataURL("image/png");d[e] = { uuid: g, url: f };
	      }b.image = c.uuid;
	    }return a.textures[this.uuid] = b;
	  }, dispose: function dispose() {
	    this.dispatchEvent({ type: "dispose" });
	  }, transformUv: function transformUv(a) {
	    if (this.mapping === THREE.UVMapping) {
	      a.multiply(this.repeat);a.add(this.offset);if (0 > a.x || 1 < a.x) switch (this.wrapS) {case THREE.RepeatWrapping:
	          a.x -= Math.floor(a.x);break;case THREE.ClampToEdgeWrapping:
	          a.x = 0 > a.x ? 0 : 1;break;case THREE.MirroredRepeatWrapping:
	          1 === Math.abs(Math.floor(a.x) % 2) ? a.x = Math.ceil(a.x) - a.x : a.x -= Math.floor(a.x);}if (0 > a.y || 1 < a.y) switch (this.wrapT) {case THREE.RepeatWrapping:
	          a.y -= Math.floor(a.y);break;case THREE.ClampToEdgeWrapping:
	          a.y = 0 > a.y ? 0 : 1;break;case THREE.MirroredRepeatWrapping:
	          1 === Math.abs(Math.floor(a.y) % 2) ? a.y = Math.ceil(a.y) - a.y : a.y -= Math.floor(a.y);}this.flipY && (a.y = 1 - a.y);
	    }
	  } };THREE.EventDispatcher.prototype.apply(THREE.Texture.prototype);THREE.TextureIdCount = 0;THREE.CanvasTexture = function (a, b, c, d, e, g, f, h, l) {
	  THREE.Texture.call(this, a, b, c, d, e, g, f, h, l);this.needsUpdate = !0;
	};THREE.CanvasTexture.prototype = Object.create(THREE.Texture.prototype);THREE.CanvasTexture.prototype.constructor = THREE.CanvasTexture;
	THREE.CubeTexture = function (a, b, c, d, e, g, f, h, l) {
	  b = void 0 !== b ? b : THREE.CubeReflectionMapping;THREE.Texture.call(this, a, b, c, d, e, g, f, h, l);this.images = a;this.flipY = !1;
	};THREE.CubeTexture.prototype = Object.create(THREE.Texture.prototype);THREE.CubeTexture.prototype.constructor = THREE.CubeTexture;THREE.CubeTexture.prototype.copy = function (a) {
	  THREE.Texture.prototype.copy.call(this, a);this.images = a.images;return this;
	};
	THREE.CompressedTexture = function (a, b, c, d, e, g, f, h, l, k, m) {
	  THREE.Texture.call(this, null, g, f, h, l, k, d, e, m);this.image = { width: b, height: c };this.mipmaps = a;this.generateMipmaps = this.flipY = !1;
	};THREE.CompressedTexture.prototype = Object.create(THREE.Texture.prototype);THREE.CompressedTexture.prototype.constructor = THREE.CompressedTexture;
	THREE.DataTexture = function (a, b, c, d, e, g, f, h, l, k, m) {
	  THREE.Texture.call(this, null, g, f, h, l, k, d, e, m);this.image = { data: a, width: b, height: c };this.magFilter = void 0 !== l ? l : THREE.NearestFilter;this.minFilter = void 0 !== k ? k : THREE.NearestFilter;this.generateMipmaps = this.flipY = !1;
	};THREE.DataTexture.prototype = Object.create(THREE.Texture.prototype);THREE.DataTexture.prototype.constructor = THREE.DataTexture;
	THREE.VideoTexture = function (a, b, c, d, e, g, f, h, l) {
	  function k() {
	    requestAnimationFrame(k);a.readyState === a.HAVE_ENOUGH_DATA && (m.needsUpdate = !0);
	  }THREE.Texture.call(this, a, b, c, d, e, g, f, h, l);this.generateMipmaps = !1;var m = this;k();
	};THREE.VideoTexture.prototype = Object.create(THREE.Texture.prototype);THREE.VideoTexture.prototype.constructor = THREE.VideoTexture;THREE.Group = function () {
	  THREE.Object3D.call(this);this.type = "Group";
	};THREE.Group.prototype = Object.create(THREE.Object3D.prototype);
	THREE.Group.prototype.constructor = THREE.Group;THREE.Points = function (a, b) {
	  THREE.Object3D.call(this);this.type = "Points";this.geometry = void 0 !== a ? a : new THREE.Geometry();this.material = void 0 !== b ? b : new THREE.PointsMaterial({ color: 16777215 * Math.random() });
	};THREE.Points.prototype = Object.create(THREE.Object3D.prototype);THREE.Points.prototype.constructor = THREE.Points;
	THREE.Points.prototype.raycast = function () {
	  var a = new THREE.Matrix4(),
	      b = new THREE.Ray();return function (c, d) {
	    function e(a, e) {
	      var f = b.distanceSqToPoint(a);if (f < l) {
	        var h = b.closestPointToPoint(a);h.applyMatrix4(g.matrixWorld);var k = c.ray.origin.distanceTo(h);k < c.near || k > c.far || d.push({ distance: k, distanceToRay: Math.sqrt(f), point: h.clone(), index: e, face: null, object: g });
	      }
	    }var g = this,
	        f = g.geometry,
	        h = c.params.Points.threshold;a.getInverse(this.matrixWorld);b.copy(c.ray).applyMatrix4(a);if (null === f.boundingBox || !1 !== b.isIntersectionBox(f.boundingBox)) {
	      var h = h / ((this.scale.x + this.scale.y + this.scale.z) / 3),
	          l = h * h,
	          h = new THREE.Vector3();if (f instanceof THREE.BufferGeometry) {
	        var k = f.index,
	            f = f.attributes.position.array;if (null !== k) for (var m = k.array, k = 0, p = m.length; k < p; k++) {
	          var n = m[k];h.fromArray(f, 3 * n);e(h, n);
	        } else for (k = 0, m = f.length / 3; k < m; k++) {
	          h.fromArray(f, 3 * k), e(h, k);
	        }
	      } else for (h = f.vertices, k = 0, m = h.length; k < m; k++) {
	        e(h[k], k);
	      }
	    }
	  };
	}();THREE.Points.prototype.clone = function () {
	  return new this.constructor(this.geometry, this.material).copy(this);
	};
	THREE.PointCloud = function (a, b) {
	  console.warn("THREE.PointCloud has been renamed to THREE.Points.");return new THREE.Points(a, b);
	};THREE.ParticleSystem = function (a, b) {
	  console.warn("THREE.ParticleSystem has been renamed to THREE.Points.");return new THREE.Points(a, b);
	};
	THREE.Line = function (a, b, c) {
	  if (1 === c) return console.warn("THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead."), new THREE.LineSegments(a, b);THREE.Object3D.call(this);this.type = "Line";this.geometry = void 0 !== a ? a : new THREE.Geometry();this.material = void 0 !== b ? b : new THREE.LineBasicMaterial({ color: 16777215 * Math.random() });
	};THREE.Line.prototype = Object.create(THREE.Object3D.prototype);THREE.Line.prototype.constructor = THREE.Line;
	THREE.Line.prototype.raycast = function () {
	  var a = new THREE.Matrix4(),
	      b = new THREE.Ray(),
	      c = new THREE.Sphere();return function (d, e) {
	    var g = d.linePrecision,
	        g = g * g,
	        f = this.geometry;null === f.boundingSphere && f.computeBoundingSphere();c.copy(f.boundingSphere);c.applyMatrix4(this.matrixWorld);if (!1 !== d.ray.isIntersectionSphere(c)) {
	      a.getInverse(this.matrixWorld);b.copy(d.ray).applyMatrix4(a);var h = new THREE.Vector3(),
	          l = new THREE.Vector3(),
	          k = new THREE.Vector3(),
	          m = new THREE.Vector3(),
	          p = this instanceof THREE.LineSegments ? 2 : 1;if (f instanceof THREE.BufferGeometry) {
	        var n = f.index,
	            q = f.attributes;if (null !== n) for (var f = n.array, q = q.position.array, n = 0, s = f.length - 1; n < s; n += p) {
	          var t = f[n + 1];h.fromArray(q, 3 * f[n]);l.fromArray(q, 3 * t);t = b.distanceSqToSegment(h, l, m, k);t > g || (m.applyMatrix4(this.matrixWorld), t = d.ray.origin.distanceTo(m), t < d.near || t > d.far || e.push({ distance: t, point: k.clone().applyMatrix4(this.matrixWorld), index: n, face: null, faceIndex: null, object: this }));
	        } else for (q = q.position.array, n = 0, s = q.length / 3 - 1; n < s; n += p) {
	          h.fromArray(q, 3 * n), l.fromArray(q, 3 * n + 3), t = b.distanceSqToSegment(h, l, m, k), t > g || (m.applyMatrix4(this.matrixWorld), t = d.ray.origin.distanceTo(m), t < d.near || t > d.far || e.push({ distance: t, point: k.clone().applyMatrix4(this.matrixWorld), index: n, face: null, faceIndex: null, object: this }));
	        }
	      } else if (f instanceof THREE.Geometry) for (h = f.vertices, l = h.length, n = 0; n < l - 1; n += p) {
	        t = b.distanceSqToSegment(h[n], h[n + 1], m, k), t > g || (m.applyMatrix4(this.matrixWorld), t = d.ray.origin.distanceTo(m), t < d.near || t > d.far || e.push({ distance: t, point: k.clone().applyMatrix4(this.matrixWorld),
	          index: n, face: null, faceIndex: null, object: this }));
	      }
	    }
	  };
	}();THREE.Line.prototype.clone = function () {
	  return new this.constructor(this.geometry, this.material).copy(this);
	};THREE.LineStrip = 0;THREE.LinePieces = 1;THREE.LineSegments = function (a, b) {
	  THREE.Line.call(this, a, b);this.type = "LineSegments";
	};THREE.LineSegments.prototype = Object.create(THREE.Line.prototype);THREE.LineSegments.prototype.constructor = THREE.LineSegments;
	THREE.Mesh = function (a, b) {
	  THREE.Object3D.call(this);this.type = "Mesh";this.geometry = void 0 !== a ? a : new THREE.Geometry();this.material = void 0 !== b ? b : new THREE.MeshBasicMaterial({ color: 16777215 * Math.random() });this.updateMorphTargets();
	};THREE.Mesh.prototype = Object.create(THREE.Object3D.prototype);THREE.Mesh.prototype.constructor = THREE.Mesh;
	THREE.Mesh.prototype.updateMorphTargets = function () {
	  if (void 0 !== this.geometry.morphTargets && 0 < this.geometry.morphTargets.length) {
	    this.morphTargetBase = -1;this.morphTargetInfluences = [];this.morphTargetDictionary = {};for (var a = 0, b = this.geometry.morphTargets.length; a < b; a++) {
	      this.morphTargetInfluences.push(0), this.morphTargetDictionary[this.geometry.morphTargets[a].name] = a;
	    }
	  }
	};
	THREE.Mesh.prototype.getMorphTargetIndexByName = function (a) {
	  if (void 0 !== this.morphTargetDictionary[a]) return this.morphTargetDictionary[a];console.warn("THREE.Mesh.getMorphTargetIndexByName: morph target " + a + " does not exist. Returning 0.");return 0;
	};
	THREE.Mesh.prototype.raycast = function () {
	  function a(a, b, c, d, e, f, g) {
	    THREE.Triangle.barycoordFromPoint(a, b, c, d, t);e.multiplyScalar(t.x);f.multiplyScalar(t.y);g.multiplyScalar(t.z);e.add(f).add(g);return e.clone();
	  }function b(a, b, c, d, e, f, g) {
	    var h = a.material;if (null === (h.side === THREE.BackSide ? c.intersectTriangle(f, e, d, !0, g) : c.intersectTriangle(d, e, f, h.side !== THREE.DoubleSide, g))) return null;u.copy(g);u.applyMatrix4(a.matrixWorld);c = b.ray.origin.distanceTo(u);return c < b.near || c > b.far ? null : { distance: c, point: u.clone(),
	      object: a };
	  }function c(c, d, e, g, k, m, p, u) {
	    f.fromArray(g, 3 * m);h.fromArray(g, 3 * p);l.fromArray(g, 3 * u);if (c = b(c, d, e, f, h, l, v)) k && (n.fromArray(k, 2 * m), q.fromArray(k, 2 * p), s.fromArray(k, 2 * u), c.uv = a(v, f, h, l, n, q, s)), c.face = new THREE.Face3(m, p, u, THREE.Triangle.normal(f, h, l)), c.faceIndex = m;return c;
	  }var d = new THREE.Matrix4(),
	      e = new THREE.Ray(),
	      g = new THREE.Sphere(),
	      f = new THREE.Vector3(),
	      h = new THREE.Vector3(),
	      l = new THREE.Vector3(),
	      k = new THREE.Vector3(),
	      m = new THREE.Vector3(),
	      p = new THREE.Vector3(),
	      n = new THREE.Vector2(),
	      q = new THREE.Vector2(),
	      s = new THREE.Vector2(),
	      t = new THREE.Vector3(),
	      v = new THREE.Vector3(),
	      u = new THREE.Vector3();return function (u, t) {
	    var x = this.geometry,
	        B = this.material;if (void 0 !== B) {
	      null === x.boundingSphere && x.computeBoundingSphere();var y = this.matrixWorld;g.copy(x.boundingSphere);g.applyMatrix4(y);if (!1 !== u.ray.isIntersectionSphere(g) && (d.getInverse(y), e.copy(u.ray).applyMatrix4(d), null === x.boundingBox || !1 !== e.isIntersectionBox(x.boundingBox))) {
	        var z, A;if (x instanceof THREE.BufferGeometry) {
	          var J,
	              F,
	              B = x.index,
	              y = x.attributes,
	              x = y.position.array;
	          void 0 !== y.uv && (z = y.uv.array);if (null !== B) for (var y = B.array, C = 0, N = y.length; C < N; C += 3) {
	            if (B = y[C], J = y[C + 1], F = y[C + 2], A = c(this, u, e, x, z, B, J, F)) A.faceIndex = Math.floor(C / 3), t.push(A);
	          } else for (C = 0, N = x.length; C < N; C += 9) {
	            if (B = C / 3, J = B + 1, F = B + 2, A = c(this, u, e, x, z, B, J, F)) A.index = B, t.push(A);
	          }
	        } else if (x instanceof THREE.Geometry) {
	          var L,
	              Q,
	              y = B instanceof THREE.MeshFaceMaterial,
	              C = !0 === y ? B.materials : null,
	              N = x.vertices;J = x.faces;F = x.faceVertexUvs[0];0 < F.length && (z = F);for (var M = 0, K = J.length; M < K; M++) {
	            var E = J[M];A = !0 === y ? C[E.materialIndex] : B;if (void 0 !== A) {
	              F = N[E.a];L = N[E.b];Q = N[E.c];if (!0 === A.morphTargets) {
	                A = x.morphTargets;var O = this.morphTargetInfluences;f.set(0, 0, 0);h.set(0, 0, 0);l.set(0, 0, 0);for (var T = 0, H = A.length; T < H; T++) {
	                  var R = O[T];if (0 !== R) {
	                    var G = A[T].vertices;f.addScaledVector(k.subVectors(G[E.a], F), R);h.addScaledVector(m.subVectors(G[E.b], L), R);l.addScaledVector(p.subVectors(G[E.c], Q), R);
	                  }
	                }f.add(F);h.add(L);l.add(Q);F = f;L = h;Q = l;
	              }if (A = b(this, u, e, F, L, Q, v)) z && (O = z[M], n.copy(O[0]), q.copy(O[1]), s.copy(O[2]), A.uv = a(v, F, L, Q, n, q, s)), A.face = E, A.faceIndex = M, t.push(A);
	            }
	          }
	        }
	      }
	    }
	  };
	}();THREE.Mesh.prototype.clone = function () {
	  return new this.constructor(this.geometry, this.material).copy(this);
	};THREE.Bone = function (a) {
	  THREE.Object3D.call(this);this.type = "Bone";this.skin = a;
	};THREE.Bone.prototype = Object.create(THREE.Object3D.prototype);THREE.Bone.prototype.constructor = THREE.Bone;THREE.Bone.prototype.copy = function (a) {
	  THREE.Object3D.prototype.copy.call(this, a);this.skin = a.skin;return this;
	};
	THREE.Skeleton = function (a, b, c) {
	  this.useVertexTexture = void 0 !== c ? c : !0;this.identityMatrix = new THREE.Matrix4();a = a || [];this.bones = a.slice(0);this.useVertexTexture ? (a = Math.sqrt(4 * this.bones.length), a = THREE.Math.nextPowerOfTwo(Math.ceil(a)), this.boneTextureHeight = this.boneTextureWidth = a = Math.max(a, 4), this.boneMatrices = new Float32Array(this.boneTextureWidth * this.boneTextureHeight * 4), this.boneTexture = new THREE.DataTexture(this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, THREE.RGBAFormat, THREE.FloatType)) : this.boneMatrices = new Float32Array(16 * this.bones.length);if (void 0 === b) this.calculateInverses();else if (this.bones.length === b.length) this.boneInverses = b.slice(0);else for (console.warn("THREE.Skeleton bonInverses is the wrong length."), this.boneInverses = [], b = 0, a = this.bones.length; b < a; b++) {
	    this.boneInverses.push(new THREE.Matrix4());
	  }
	};
	THREE.Skeleton.prototype.calculateInverses = function () {
	  this.boneInverses = [];for (var a = 0, b = this.bones.length; a < b; a++) {
	    var c = new THREE.Matrix4();this.bones[a] && c.getInverse(this.bones[a].matrixWorld);this.boneInverses.push(c);
	  }
	};
	THREE.Skeleton.prototype.pose = function () {
	  for (var a, b = 0, c = this.bones.length; b < c; b++) {
	    (a = this.bones[b]) && a.matrixWorld.getInverse(this.boneInverses[b]);
	  }b = 0;for (c = this.bones.length; b < c; b++) {
	    if (a = this.bones[b]) a.parent ? (a.matrix.getInverse(a.parent.matrixWorld), a.matrix.multiply(a.matrixWorld)) : a.matrix.copy(a.matrixWorld), a.matrix.decompose(a.position, a.quaternion, a.scale);
	  }
	};
	THREE.Skeleton.prototype.update = function () {
	  var a = new THREE.Matrix4();return function () {
	    for (var b = 0, c = this.bones.length; b < c; b++) {
	      a.multiplyMatrices(this.bones[b] ? this.bones[b].matrixWorld : this.identityMatrix, this.boneInverses[b]), a.flattenToArrayOffset(this.boneMatrices, 16 * b);
	    }this.useVertexTexture && (this.boneTexture.needsUpdate = !0);
	  };
	}();THREE.Skeleton.prototype.clone = function () {
	  return new THREE.Skeleton(this.bones, this.boneInverses, this.useVertexTexture);
	};
	THREE.SkinnedMesh = function (a, b, c) {
	  THREE.Mesh.call(this, a, b);this.type = "SkinnedMesh";this.bindMode = "attached";this.bindMatrix = new THREE.Matrix4();this.bindMatrixInverse = new THREE.Matrix4();a = [];if (this.geometry && void 0 !== this.geometry.bones) {
	    for (var d, e = 0, g = this.geometry.bones.length; e < g; ++e) {
	      d = this.geometry.bones[e], b = new THREE.Bone(this), a.push(b), b.name = d.name, b.position.fromArray(d.pos), b.quaternion.fromArray(d.rotq), void 0 !== d.scl && b.scale.fromArray(d.scl);
	    }e = 0;for (g = this.geometry.bones.length; e < g; ++e) {
	      d = this.geometry.bones[e], -1 !== d.parent && null !== d.parent ? a[d.parent].add(a[e]) : this.add(a[e]);
	    }
	  }this.normalizeSkinWeights();this.updateMatrixWorld(!0);this.bind(new THREE.Skeleton(a, void 0, c), this.matrixWorld);
	};THREE.SkinnedMesh.prototype = Object.create(THREE.Mesh.prototype);THREE.SkinnedMesh.prototype.constructor = THREE.SkinnedMesh;
	THREE.SkinnedMesh.prototype.bind = function (a, b) {
	  this.skeleton = a;void 0 === b && (this.updateMatrixWorld(!0), this.skeleton.calculateInverses(), b = this.matrixWorld);this.bindMatrix.copy(b);this.bindMatrixInverse.getInverse(b);
	};THREE.SkinnedMesh.prototype.pose = function () {
	  this.skeleton.pose();
	};
	THREE.SkinnedMesh.prototype.normalizeSkinWeights = function () {
	  if (this.geometry instanceof THREE.Geometry) for (var a = 0; a < this.geometry.skinIndices.length; a++) {
	    var b = this.geometry.skinWeights[a],
	        c = 1 / b.lengthManhattan();Infinity !== c ? b.multiplyScalar(c) : b.set(1);
	  }
	};
	THREE.SkinnedMesh.prototype.updateMatrixWorld = function (a) {
	  THREE.Mesh.prototype.updateMatrixWorld.call(this, !0);"attached" === this.bindMode ? this.bindMatrixInverse.getInverse(this.matrixWorld) : "detached" === this.bindMode ? this.bindMatrixInverse.getInverse(this.bindMatrix) : console.warn("THREE.SkinnedMesh unrecognized bindMode: " + this.bindMode);
	};THREE.SkinnedMesh.prototype.clone = function () {
	  return new this.constructor(this.geometry, this.material, this.useVertexTexture).copy(this);
	};
	THREE.LOD = function () {
	  THREE.Object3D.call(this);this.type = "LOD";Object.defineProperties(this, { levels: { enumerable: !0, value: [] }, objects: { get: function get() {
	        console.warn("THREE.LOD: .objects has been renamed to .levels.");return this.levels;
	      } } });
	};THREE.LOD.prototype = Object.create(THREE.Object3D.prototype);THREE.LOD.prototype.constructor = THREE.LOD;
	THREE.LOD.prototype.addLevel = function (a, b) {
	  void 0 === b && (b = 0);b = Math.abs(b);for (var c = this.levels, d = 0; d < c.length && !(b < c[d].distance); d++) {}c.splice(d, 0, { distance: b, object: a });this.add(a);
	};THREE.LOD.prototype.getObjectForDistance = function (a) {
	  for (var b = this.levels, c = 1, d = b.length; c < d && !(a < b[c].distance); c++) {}return b[c - 1].object;
	};
	THREE.LOD.prototype.raycast = function () {
	  var a = new THREE.Vector3();return function (b, c) {
	    a.setFromMatrixPosition(this.matrixWorld);var d = b.ray.origin.distanceTo(a);this.getObjectForDistance(d).raycast(b, c);
	  };
	}();
	THREE.LOD.prototype.update = function () {
	  var a = new THREE.Vector3(),
	      b = new THREE.Vector3();return function (c) {
	    var d = this.levels;if (1 < d.length) {
	      a.setFromMatrixPosition(c.matrixWorld);b.setFromMatrixPosition(this.matrixWorld);c = a.distanceTo(b);d[0].object.visible = !0;for (var e = 1, g = d.length; e < g; e++) {
	        if (c >= d[e].distance) d[e - 1].object.visible = !1, d[e].object.visible = !0;else break;
	      }for (; e < g; e++) {
	        d[e].object.visible = !1;
	      }
	    }
	  };
	}();
	THREE.LOD.prototype.copy = function (a) {
	  THREE.Object3D.prototype.copy.call(this, a, !1);a = a.levels;for (var b = 0, c = a.length; b < c; b++) {
	    var d = a[b];this.addLevel(d.object.clone(), d.distance);
	  }return this;
	};THREE.LOD.prototype.toJSON = function (a) {
	  a = THREE.Object3D.prototype.toJSON.call(this, a);a.object.levels = [];for (var b = this.levels, c = 0, d = b.length; c < d; c++) {
	    var e = b[c];a.object.levels.push({ object: e.object.uuid, distance: e.distance });
	  }return a;
	};
	THREE.Sprite = function () {
	  var a = new Uint16Array([0, 1, 2, 0, 2, 3]),
	      b = new Float32Array([-.5, -.5, 0, .5, -.5, 0, .5, .5, 0, -.5, .5, 0]),
	      c = new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),
	      d = new THREE.BufferGeometry();d.setIndex(new THREE.BufferAttribute(a, 1));d.addAttribute("position", new THREE.BufferAttribute(b, 3));d.addAttribute("uv", new THREE.BufferAttribute(c, 2));return function (a) {
	    THREE.Object3D.call(this);this.type = "Sprite";this.geometry = d;this.material = void 0 !== a ? a : new THREE.SpriteMaterial();
	  };
	}();THREE.Sprite.prototype = Object.create(THREE.Object3D.prototype);
	THREE.Sprite.prototype.constructor = THREE.Sprite;THREE.Sprite.prototype.raycast = function () {
	  var a = new THREE.Vector3();return function (b, c) {
	    a.setFromMatrixPosition(this.matrixWorld);var d = b.ray.distanceSqToPoint(a);d > this.scale.x * this.scale.y || c.push({ distance: Math.sqrt(d), point: this.position, face: null, object: this });
	  };
	}();THREE.Sprite.prototype.clone = function () {
	  return new this.constructor(this.material).copy(this);
	};THREE.Particle = THREE.Sprite;
	THREE.LensFlare = function (a, b, c, d, e) {
	  THREE.Object3D.call(this);this.lensFlares = [];this.positionScreen = new THREE.Vector3();this.customUpdateCallback = void 0;void 0 !== a && this.add(a, b, c, d, e);
	};THREE.LensFlare.prototype = Object.create(THREE.Object3D.prototype);THREE.LensFlare.prototype.constructor = THREE.LensFlare;
	THREE.LensFlare.prototype.add = function (a, b, c, d, e, g) {
	  void 0 === b && (b = -1);void 0 === c && (c = 0);void 0 === g && (g = 1);void 0 === e && (e = new THREE.Color(16777215));void 0 === d && (d = THREE.NormalBlending);c = Math.min(c, Math.max(0, c));this.lensFlares.push({ texture: a, size: b, distance: c, x: 0, y: 0, z: 0, scale: 1, rotation: 0, opacity: g, color: e, blending: d });
	};
	THREE.LensFlare.prototype.updateLensFlares = function () {
	  var a,
	      b = this.lensFlares.length,
	      c,
	      d = 2 * -this.positionScreen.x,
	      e = 2 * -this.positionScreen.y;for (a = 0; a < b; a++) {
	    c = this.lensFlares[a], c.x = this.positionScreen.x + d * c.distance, c.y = this.positionScreen.y + e * c.distance, c.wantedRotation = c.x * Math.PI * .25, c.rotation += .25 * (c.wantedRotation - c.rotation);
	  }
	};
	THREE.LensFlare.prototype.copy = function (a) {
	  THREE.Object3D.prototype.copy.call(this, a);this.positionScreen.copy(a.positionScreen);this.customUpdateCallback = a.customUpdateCallback;for (var b = 0, c = a.lensFlares.length; b < c; b++) {
	    this.lensFlares.push(a.lensFlares[b]);
	  }return this;
	};THREE.Scene = function () {
	  THREE.Object3D.call(this);this.type = "Scene";this.overrideMaterial = this.fog = null;this.autoUpdate = !0;
	};THREE.Scene.prototype = Object.create(THREE.Object3D.prototype);THREE.Scene.prototype.constructor = THREE.Scene;
	THREE.Scene.prototype.copy = function (a) {
	  THREE.Object3D.prototype.copy.call(this, a);null !== a.fog && (this.fog = a.fog.clone());null !== a.overrideMaterial && (this.overrideMaterial = a.overrideMaterial.clone());this.autoUpdate = a.autoUpdate;this.matrixAutoUpdate = a.matrixAutoUpdate;return this;
	};THREE.Fog = function (a, b, c) {
	  this.name = "";this.color = new THREE.Color(a);this.near = void 0 !== b ? b : 1;this.far = void 0 !== c ? c : 1E3;
	};THREE.Fog.prototype.clone = function () {
	  return new THREE.Fog(this.color.getHex(), this.near, this.far);
	};
	THREE.FogExp2 = function (a, b) {
	  this.name = "";this.color = new THREE.Color(a);this.density = void 0 !== b ? b : 2.5E-4;
	};THREE.FogExp2.prototype.clone = function () {
	  return new THREE.FogExp2(this.color.getHex(), this.density);
	};THREE.ShaderChunk = {};THREE.ShaderChunk.alphamap_fragment = "#ifdef USE_ALPHAMAP\n\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n\n#endif\n";THREE.ShaderChunk.alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n\n\tuniform sampler2D alphaMap;\n\n#endif\n";THREE.ShaderChunk.alphatest_fragment = "#ifdef ALPHATEST\n\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n\n#endif\n";
	THREE.ShaderChunk.aomap_fragment = "#ifdef USE_AOMAP\n\n\ttotalAmbientLight *= ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\n#endif\n";THREE.ShaderChunk.aomap_pars_fragment = "#ifdef USE_AOMAP\n\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n\n#endif";THREE.ShaderChunk.begin_vertex = "\nvec3 transformed = vec3( position );\n";THREE.ShaderChunk.beginnormal_vertex = "\nvec3 objectNormal = vec3( normal );\n";THREE.ShaderChunk.bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\n\n\n\tvec2 dHdxy_fwd() {\n\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\n\t\treturn vec2( dBx, dBy );\n\n\t}\n\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\n\t\tvec3 vSigmaX = dFdx( surf_pos );\n\t\tvec3 vSigmaY = dFdy( surf_pos );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\n\t}\n\n#endif\n";
	THREE.ShaderChunk.color_fragment = "#ifdef USE_COLOR\n\n\tdiffuseColor.rgb *= vColor;\n\n#endif";THREE.ShaderChunk.color_pars_fragment = "#ifdef USE_COLOR\n\n\tvarying vec3 vColor;\n\n#endif\n";THREE.ShaderChunk.color_pars_vertex = "#ifdef USE_COLOR\n\n\tvarying vec3 vColor;\n\n#endif";THREE.ShaderChunk.color_vertex = "#ifdef USE_COLOR\n\n\tvColor.xyz = color.xyz;\n\n#endif";THREE.ShaderChunk.common = "#define PI 3.14159\n#define PI2 6.28318\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\n\nvec3 transformDirection( in vec3 normal, in mat4 matrix ) {\n\n\treturn normalize( ( matrix * vec4( normal, 0.0 ) ).xyz );\n\n}\n\nvec3 inverseTransformDirection( in vec3 normal, in mat4 matrix ) {\n\n\treturn normalize( ( vec4( normal, 0.0 ) * matrix ).xyz );\n\n}\n\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\n\treturn - distance * planeNormal + point;\n\n}\n\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n\n}\n\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n\n}\n\nfloat calcLightAttenuation( float lightDistance, float cutoffDistance, float decayExponent ) {\n\n\tif ( decayExponent > 0.0 ) {\n\n\t  return pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\n\t}\n\n\treturn 1.0;\n\n}\n\nvec3 F_Schlick( in vec3 specularColor, in float dotLH ) {\n\n\n\tfloat fresnel = exp2( ( -5.55437 * dotLH - 6.98316 ) * dotLH );\n\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n\n}\n\nfloat G_BlinnPhong_Implicit( /* in float dotNL, in float dotNV */ ) {\n\n\n\treturn 0.25;\n\n}\n\nfloat D_BlinnPhong( in float shininess, in float dotNH ) {\n\n\n\treturn ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n\n}\n\nvec3 BRDF_BlinnPhong( in vec3 specularColor, in float shininess, in vec3 normal, in vec3 lightDir, in vec3 viewDir ) {\n\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotLH = saturate( dot( lightDir, halfDir ) );\n\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\n\tfloat G = G_BlinnPhong_Implicit( /* dotNL, dotNV */ );\n\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\n\treturn F * G * D;\n\n}\n\nvec3 inputToLinear( in vec3 a ) {\n\n\t#ifdef GAMMA_INPUT\n\n\t\treturn pow( a, vec3( float( GAMMA_FACTOR ) ) );\n\n\t#else\n\n\t\treturn a;\n\n\t#endif\n\n}\n\nvec3 linearToOutput( in vec3 a ) {\n\n\t#ifdef GAMMA_OUTPUT\n\n\t\treturn pow( a, vec3( 1.0 / float( GAMMA_FACTOR ) ) );\n\n\t#else\n\n\t\treturn a;\n\n\t#endif\n\n}\n";
	THREE.ShaderChunk.defaultnormal_vertex = "#ifdef FLIP_SIDED\n\n\tobjectNormal = -objectNormal;\n\n#endif\n\nvec3 transformedNormal = normalMatrix * objectNormal;\n";THREE.ShaderChunk.displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n\n\ttransformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n\n#endif\n";THREE.ShaderChunk.displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n\n#endif\n";
	THREE.ShaderChunk.emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\n\temissiveColor.rgb = inputToLinear( emissiveColor.rgb );\n\n\ttotalEmissiveLight *= emissiveColor.rgb;\n\n#endif\n";THREE.ShaderChunk.emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n\n\tuniform sampler2D emissiveMap;\n\n#endif\n";THREE.ShaderChunk.envmap_fragment = "#ifdef USE_ENVMAP\n\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\n\t\t#else\n\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\n\t\t#endif\n\n\t#else\n\n\t\tvec3 reflectVec = vReflect;\n\n\t#endif\n\n\t#ifdef DOUBLE_SIDED\n\t\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#else\n\t\tfloat flipNormal = 1.0;\n\t#endif\n\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\n\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\tvec3 reflectView = flipNormal * normalize((viewMatrix * vec4( reflectVec, 0.0 )).xyz + vec3(0.0,0.0,1.0));\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#endif\n\n\tenvColor.xyz = inputToLinear( envColor.xyz );\n\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\n\t#endif\n\n#endif\n";
	THREE.ShaderChunk.envmap_pars_fragment = "#ifdef USE_ENVMAP\n\n\tuniform float reflectivity;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\n\t\tuniform float refractionRatio;\n\n\t#else\n\n\t\tvarying vec3 vReflect;\n\n\t#endif\n\n#endif\n";THREE.ShaderChunk.envmap_pars_vertex = "#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG )\n\n\tvarying vec3 vReflect;\n\n\tuniform float refractionRatio;\n\n#endif\n";
	THREE.ShaderChunk.envmap_vertex = "#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG )\n\n\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\n\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\n\t#ifdef ENVMAP_MODE_REFLECTION\n\n\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\n\t#else\n\n\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\n\t#endif\n\n#endif\n";
	THREE.ShaderChunk.fog_fragment = "#ifdef USE_FOG\n\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\n\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\n\n\t#else\n\n\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\n\n\t#endif\n\n\t#ifdef FOG_EXP2\n\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\n\n\t#else\n\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, depth );\n\n\t#endif\n\t\n\toutgoingLight = mix( outgoingLight, fogColor, fogFactor );\n\n#endif";
	THREE.ShaderChunk.fog_pars_fragment = "#ifdef USE_FOG\n\n\tuniform vec3 fogColor;\n\n\t#ifdef FOG_EXP2\n\n\t\tuniform float fogDensity;\n\n\t#else\n\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n\n#endif";THREE.ShaderChunk.hemilight_fragment = "#if MAX_HEMI_LIGHTS > 0\n\n\tfor ( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\n\n\t\tvec3 lightDir = hemisphereLightDirection[ i ];\n\n\t\tfloat dotProduct = dot( normal, lightDir );\n\n\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\n\n\t\tvec3 lightColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\n\n\t\ttotalAmbientLight += lightColor;\n\n\t}\n\n#endif\n\n";
	THREE.ShaderChunk.lightmap_fragment = "#ifdef USE_LIGHTMAP\n\n\ttotalAmbientLight += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\n#endif\n";THREE.ShaderChunk.lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n\n#endif";THREE.ShaderChunk.lights_lambert_pars_vertex = "#if MAX_DIR_LIGHTS > 0\n\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n\n#endif\n\n#if MAX_POINT_LIGHTS > 0\n\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n\tuniform float pointLightDecay[ MAX_POINT_LIGHTS ];\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0\n\n\tuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\n\tuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\n\tuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightDecay[ MAX_SPOT_LIGHTS ];\n\n#endif\n";
	THREE.ShaderChunk.lights_lambert_vertex = "vLightFront = vec3( 0.0 );\n\n#ifdef DOUBLE_SIDED\n\n\tvLightBack = vec3( 0.0 );\n\n#endif\n\nvec3 normal = normalize( transformedNormal );\n\n#if MAX_POINT_LIGHTS > 0\n\n\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\n\n\t\tvec3 lightColor = pointLightColor[ i ];\n\n\t\tvec3 lVector = pointLightPosition[ i ] - mvPosition.xyz;\n\t\tvec3 lightDir = normalize( lVector );\n\n\n\t\tfloat attenuation = calcLightAttenuation( length( lVector ), pointLightDistance[ i ], pointLightDecay[ i ] );\n\n\n\t\tfloat dotProduct = dot( normal, lightDir );\n\n\t\tvLightFront += lightColor * attenuation * saturate( dotProduct );\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tvLightBack += lightColor * attenuation * saturate( - dotProduct );\n\n\t\t#endif\n\n\t}\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0\n\n\tfor ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\n\n\t\tvec3 lightColor = spotLightColor[ i ];\n\n\t\tvec3 lightPosition = spotLightPosition[ i ];\n\t\tvec3 lVector = lightPosition - mvPosition.xyz;\n\t\tvec3 lightDir = normalize( lVector );\n\n\t\tfloat spotEffect = dot( spotLightDirection[ i ], lightDir );\n\n\t\tif ( spotEffect > spotLightAngleCos[ i ] ) {\n\n\t\t\tspotEffect = saturate( pow( saturate( spotEffect ), spotLightExponent[ i ] ) );\n\n\n\t\t\tfloat attenuation = calcLightAttenuation( length( lVector ), spotLightDistance[ i ], spotLightDecay[ i ] );\n\n\t\t\tattenuation *= spotEffect;\n\n\n\t\t\tfloat dotProduct = dot( normal, lightDir );\n\n\t\t\tvLightFront += lightColor * attenuation * saturate( dotProduct );\n\n\t\t\t#ifdef DOUBLE_SIDED\n\n\t\t\t\tvLightBack += lightColor * attenuation * saturate( - dotProduct );\n\n\t\t\t#endif\n\n\t\t}\n\n\t}\n\n#endif\n\n#if MAX_DIR_LIGHTS > 0\n\n\tfor ( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\n\n\t\tvec3 lightColor = directionalLightColor[ i ];\n\n\t\tvec3 lightDir = directionalLightDirection[ i ];\n\n\n\t\tfloat dotProduct = dot( normal, lightDir );\n\n\t\tvLightFront += lightColor * saturate( dotProduct );\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tvLightBack += lightColor * saturate( - dotProduct );\n\n\t\t#endif\n\n\t}\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n\tfor ( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\n\n\t\tvec3 lightDir = hemisphereLightDirection[ i ];\n\n\n\t\tfloat dotProduct = dot( normal, lightDir );\n\n\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\n\n\t\tvLightFront += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tfloat hemiDiffuseWeightBack = - 0.5 * dotProduct + 0.5;\n\n\t\t\tvLightBack += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeightBack );\n\n\t\t#endif\n\n\t}\n\n#endif\n";
	THREE.ShaderChunk.lights_phong_fragment = "vec3 viewDir = normalize( vViewPosition );\n\nvec3 totalDiffuseLight = vec3( 0.0 );\nvec3 totalSpecularLight = vec3( 0.0 );\n\n#if MAX_POINT_LIGHTS > 0\n\n\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\n\n\t\tvec3 lightColor = pointLightColor[ i ];\n\n\t\tvec3 lightPosition = pointLightPosition[ i ];\n\t\tvec3 lVector = lightPosition + vViewPosition.xyz;\n\t\tvec3 lightDir = normalize( lVector );\n\n\n\t\tfloat attenuation = calcLightAttenuation( length( lVector ), pointLightDistance[ i ], pointLightDecay[ i ] );\n\n\n\t\tfloat cosineTerm = saturate( dot( normal, lightDir ) );\n\n\t\ttotalDiffuseLight += lightColor * attenuation * cosineTerm;\n\n\n\t\tvec3 brdf = BRDF_BlinnPhong( specular, shininess, normal, lightDir, viewDir );\n\n\t\ttotalSpecularLight += brdf * specularStrength * lightColor * attenuation * cosineTerm;\n\n\n\t}\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0\n\n\tfor ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\n\n\t\tvec3 lightColor = spotLightColor[ i ];\n\n\t\tvec3 lightPosition = spotLightPosition[ i ];\n\t\tvec3 lVector = lightPosition + vViewPosition.xyz;\n\t\tvec3 lightDir = normalize( lVector );\n\n\t\tfloat spotEffect = dot( spotLightDirection[ i ], lightDir );\n\n\t\tif ( spotEffect > spotLightAngleCos[ i ] ) {\n\n\t\t\tspotEffect = saturate( pow( saturate( spotEffect ), spotLightExponent[ i ] ) );\n\n\n\t\t\tfloat attenuation = calcLightAttenuation( length( lVector ), spotLightDistance[ i ], spotLightDecay[ i ] );\n\n\t\t\tattenuation *= spotEffect;\n\n\n\t\t\tfloat cosineTerm = saturate( dot( normal, lightDir ) );\n\n\t\t\ttotalDiffuseLight += lightColor * attenuation * cosineTerm;\n\n\n\t\t\tvec3 brdf = BRDF_BlinnPhong( specular, shininess, normal, lightDir, viewDir );\n\n\t\t\ttotalSpecularLight += brdf * specularStrength * lightColor * attenuation * cosineTerm;\n\n\t\t}\n\n\t}\n\n#endif\n\n#if MAX_DIR_LIGHTS > 0\n\n\tfor ( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\n\n\t\tvec3 lightColor = directionalLightColor[ i ];\n\n\t\tvec3 lightDir = directionalLightDirection[ i ];\n\n\n\t\tfloat cosineTerm = saturate( dot( normal, lightDir ) );\n\n\t\ttotalDiffuseLight += lightColor * cosineTerm;\n\n\n\t\tvec3 brdf = BRDF_BlinnPhong( specular, shininess, normal, lightDir, viewDir );\n\n\t\ttotalSpecularLight += brdf * specularStrength * lightColor * cosineTerm;\n\n\t}\n\n#endif\n";
	THREE.ShaderChunk.lights_phong_pars_fragment = "uniform vec3 ambientLightColor;\n\n#if MAX_DIR_LIGHTS > 0\n\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n\n#endif\n\n#if MAX_POINT_LIGHTS > 0\n\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\n\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n\tuniform float pointLightDecay[ MAX_POINT_LIGHTS ];\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0\n\n\tuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\n\tuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\n\tuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightDecay[ MAX_SPOT_LIGHTS ];\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0 || defined( USE_ENVMAP )\n\n\tvarying vec3 vWorldPosition;\n\n#endif\n\nvarying vec3 vViewPosition;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n#endif\n";
	THREE.ShaderChunk.lights_phong_pars_vertex = "#if MAX_SPOT_LIGHTS > 0 || defined( USE_ENVMAP )\n\n\tvarying vec3 vWorldPosition;\n\n#endif\n\n#if MAX_POINT_LIGHTS > 0\n\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\n\n#endif\n";THREE.ShaderChunk.lights_phong_vertex = "#if MAX_SPOT_LIGHTS > 0 || defined( USE_ENVMAP )\n\n\tvWorldPosition = worldPosition.xyz;\n\n#endif\n";THREE.ShaderChunk.linear_to_gamma_fragment = "\n\toutgoingLight = linearToOutput( outgoingLight );\n";
	THREE.ShaderChunk.logdepthbuf_fragment = "#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\n\n\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\n\n#endif";THREE.ShaderChunk.logdepthbuf_pars_fragment = "#ifdef USE_LOGDEPTHBUF\n\n\tuniform float logDepthBufFC;\n\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\n\t\tvarying float vFragDepth;\n\n\t#endif\n\n#endif\n";THREE.ShaderChunk.logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\n\t\tvarying float vFragDepth;\n\n\t#endif\n\n\tuniform float logDepthBufFC;\n\n#endif";
	THREE.ShaderChunk.logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n\n\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\n\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\n#else\n\n\t\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\n\n\t#endif\n\n#endif";THREE.ShaderChunk.map_fragment = "#ifdef USE_MAP\n\n\tvec4 texelColor = texture2D( map, vUv );\n\n\ttexelColor.xyz = inputToLinear( texelColor.xyz );\n\n\tdiffuseColor *= texelColor;\n\n#endif\n";
	THREE.ShaderChunk.map_pars_fragment = "#ifdef USE_MAP\n\n\tuniform sampler2D map;\n\n#endif";THREE.ShaderChunk.map_particle_fragment = "#ifdef USE_MAP\n\n\tdiffuseColor *= texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\n\n#endif\n";THREE.ShaderChunk.map_particle_pars_fragment = "#ifdef USE_MAP\n\n\tuniform vec4 offsetRepeat;\n\tuniform sampler2D map;\n\n#endif\n";THREE.ShaderChunk.morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n\n#endif\n";
	THREE.ShaderChunk.morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n\n\t#ifndef USE_MORPHNORMALS\n\n\tuniform float morphTargetInfluences[ 8 ];\n\n\t#else\n\n\tuniform float morphTargetInfluences[ 4 ];\n\n\t#endif\n\n#endif";THREE.ShaderChunk.morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\n\t#ifndef USE_MORPHNORMALS\n\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\n\t#endif\n\n#endif\n";
	THREE.ShaderChunk.normal_phong_fragment = "#ifndef FLAT_SHADED\n\n\tvec3 normal = normalize( vNormal );\n\n\t#ifdef DOUBLE_SIDED\n\n\t\tnormal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\n\n\t#endif\n\n#else\n\n\tvec3 fdx = dFdx( vViewPosition );\n\tvec3 fdy = dFdy( vViewPosition );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n\n#endif\n\n#ifdef USE_NORMALMAP\n\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n\n#elif defined( USE_BUMPMAP )\n\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n\n#endif\n\n";
	THREE.ShaderChunk.normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\n\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\n\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\n\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\n\t\tvec3 N = normalize( surf_norm );\n\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\tmapN.xy = normalScale * mapN.xy;\n\t\tmat3 tsn = mat3( S, T, N );\n\t\treturn normalize( tsn * mapN );\n\n\t}\n\n#endif\n";
	THREE.ShaderChunk.project_vertex = "#ifdef USE_SKINNING\n\n\tvec4 mvPosition = modelViewMatrix * skinned;\n\n#else\n\n\tvec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\n\n#endif\n\ngl_Position = projectionMatrix * mvPosition;\n";THREE.ShaderChunk.shadowmap_fragment = "#ifdef USE_SHADOWMAP\n\n\tfor ( int i = 0; i < MAX_SHADOWS; i ++ ) {\n\n\t\tfloat texelSizeY =  1.0 / shadowMapSize[ i ].y;\n\n\t\tfloat shadow = 0.0;\n\n#if defined( POINT_LIGHT_SHADOWS )\n\n\t\tbool isPointLight = shadowDarkness[ i ] < 0.0;\n\n\t\tif ( isPointLight ) {\n\n\t\t\tfloat realShadowDarkness = abs( shadowDarkness[ i ] );\n\n\t\t\tvec3 lightToPosition = vShadowCoord[ i ].xyz;\n\n\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n\n\t\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t\tfloat dp = length( lightToPosition );\n\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D, texelSizeY ) ), shadowBias[ i ], shadow );\n\n\n\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tconst float Dr = 1.25;\n\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tconst float Dr = 2.25;\n\t#endif\n\n\t\t\tfloat os = Dr *  2.0 * texelSizeY;\n\n\t\t\tconst vec3 Gsd = vec3( - 1, 0, 1 );\n\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zzz * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zxz * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xxz * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xzz * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zzx * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zxx * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xxx * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xzx * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zzy * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zxy * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xxy * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xzy * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zyz * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xyz * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zyx * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xyx * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.yzz * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.yxz * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.yxx * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.yzx * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\n\t\t\tshadow *= realShadowDarkness * ( 1.0 / 21.0 );\n\n\t#else \n\t\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t\tfloat dp = length( lightToPosition );\n\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D, texelSizeY ) ), shadowBias[ i ], shadow );\n\n\t\t\tshadow *= realShadowDarkness;\n\n\t#endif\n\n\t\t} else {\n\n#endif \n\t\t\tfloat texelSizeX =  1.0 / shadowMapSize[ i ].x;\n\n\t\t\tvec3 shadowCoord = vShadowCoord[ i ].xyz / vShadowCoord[ i ].w;\n\n\n\t\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\t\tbool inFrustum = all( inFrustumVec );\n\n\t\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\n\t\t\tbool frustumTest = all( frustumTestVec );\n\n\t\t\tif ( frustumTest ) {\n\n\t#if defined( SHADOWMAP_TYPE_PCF )\n\n\n\t\t\t\t/*\n\t\t\t\t\tfor ( float y = -1.25; y <= 1.25; y += 1.25 )\n\t\t\t\t\t\tfor ( float x = -1.25; x <= 1.25; x += 1.25 ) {\n\t\t\t\t\t\t\tvec4 rgbaDepth = texture2D( shadowMap[ i ], vec2( x * xPixelOffset, y * yPixelOffset ) + shadowCoord.xy );\n\t\t\t\t\t\t\tfloat fDepth = unpackDepth( rgbaDepth );\n\t\t\t\t\t\t\tif ( fDepth < shadowCoord.z )\n\t\t\t\t\t\t\t\tshadow += 1.0;\n\t\t\t\t\t}\n\t\t\t\t\tshadow /= 9.0;\n\t\t\t\t*/\n\n\t\t\t\tshadowCoord.z += shadowBias[ i ];\n\n\t\t\t\tconst float ShadowDelta = 1.0 / 9.0;\n\n\t\t\t\tfloat xPixelOffset = texelSizeX;\n\t\t\t\tfloat yPixelOffset = texelSizeY;\n\n\t\t\t\tfloat dx0 = - 1.25 * xPixelOffset;\n\t\t\t\tfloat dy0 = - 1.25 * yPixelOffset;\n\t\t\t\tfloat dx1 = 1.25 * xPixelOffset;\n\t\t\t\tfloat dy1 = 1.25 * yPixelOffset;\n\n\t\t\t\tfloat fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\n\n\t\t\t\tshadow *= shadowDarkness[ i ];\n\n\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\n\n\t\t\t\tshadowCoord.z += shadowBias[ i ];\n\n\t\t\t\tfloat xPixelOffset = texelSizeX;\n\t\t\t\tfloat yPixelOffset = texelSizeY;\n\n\t\t\t\tfloat dx0 = - 1.0 * xPixelOffset;\n\t\t\t\tfloat dy0 = - 1.0 * yPixelOffset;\n\t\t\t\tfloat dx1 = 1.0 * xPixelOffset;\n\t\t\t\tfloat dy1 = 1.0 * yPixelOffset;\n\n\t\t\t\tmat3 shadowKernel;\n\t\t\t\tmat3 depthKernel;\n\n\t\t\t\tdepthKernel[ 0 ][ 0 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\n\t\t\t\tdepthKernel[ 0 ][ 1 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\n\t\t\t\tdepthKernel[ 0 ][ 2 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\n\t\t\t\tdepthKernel[ 1 ][ 0 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\n\t\t\t\tdepthKernel[ 1 ][ 1 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\n\t\t\t\tdepthKernel[ 1 ][ 2 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\n\t\t\t\tdepthKernel[ 2 ][ 0 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\n\t\t\t\tdepthKernel[ 2 ][ 1 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\n\t\t\t\tdepthKernel[ 2 ][ 2 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\n\n\t\t\t\tvec3 shadowZ = vec3( shadowCoord.z );\n\t\t\t\tshadowKernel[ 0 ] = vec3( lessThan( depthKernel[ 0 ], shadowZ ) );\n\t\t\t\tshadowKernel[ 0 ] *= vec3( 0.25 );\n\n\t\t\t\tshadowKernel[ 1 ] = vec3( lessThan( depthKernel[ 1 ], shadowZ ) );\n\t\t\t\tshadowKernel[ 1 ] *= vec3( 0.25 );\n\n\t\t\t\tshadowKernel[ 2 ] = vec3( lessThan( depthKernel[ 2 ], shadowZ ) );\n\t\t\t\tshadowKernel[ 2 ] *= vec3( 0.25 );\n\n\t\t\t\tvec2 fractionalCoord = 1.0 - fract( shadowCoord.xy * shadowMapSize[ i ].xy );\n\n\t\t\t\tshadowKernel[ 0 ] = mix( shadowKernel[ 1 ], shadowKernel[ 0 ], fractionalCoord.x );\n\t\t\t\tshadowKernel[ 1 ] = mix( shadowKernel[ 2 ], shadowKernel[ 1 ], fractionalCoord.x );\n\n\t\t\t\tvec4 shadowValues;\n\t\t\t\tshadowValues.x = mix( shadowKernel[ 0 ][ 1 ], shadowKernel[ 0 ][ 0 ], fractionalCoord.y );\n\t\t\t\tshadowValues.y = mix( shadowKernel[ 0 ][ 2 ], shadowKernel[ 0 ][ 1 ], fractionalCoord.y );\n\t\t\t\tshadowValues.z = mix( shadowKernel[ 1 ][ 1 ], shadowKernel[ 1 ][ 0 ], fractionalCoord.y );\n\t\t\t\tshadowValues.w = mix( shadowKernel[ 1 ][ 2 ], shadowKernel[ 1 ][ 1 ], fractionalCoord.y );\n\n\t\t\t\tshadow = dot( shadowValues, vec4( 1.0 ) ) * shadowDarkness[ i ];\n\n\t#else \n\t\t\t\tshadowCoord.z += shadowBias[ i ];\n\n\t\t\t\tvec4 rgbaDepth = texture2D( shadowMap[ i ], shadowCoord.xy );\n\t\t\t\tfloat fDepth = unpackDepth( rgbaDepth );\n\n\t\t\t\tif ( fDepth < shadowCoord.z )\n\t\t\t\t\tshadow = shadowDarkness[ i ];\n\n\t#endif\n\n\t\t\t}\n\n#ifdef SHADOWMAP_DEBUG\n\n\t\t\tif ( inFrustum ) {\n\n\t\t\t\tif ( i == 0 ) {\n\n\t\t\t\t\toutgoingLight *= vec3( 1.0, 0.5, 0.0 );\n\n\t\t\t\t} else if ( i == 1 ) {\n\n\t\t\t\t\toutgoingLight *= vec3( 0.0, 1.0, 0.8 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\toutgoingLight *= vec3( 0.0, 0.5, 1.0 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n#endif\n\n#if defined( POINT_LIGHT_SHADOWS )\n\n\t\t}\n\n#endif\n\n\t\tshadowMask = shadowMask * vec3( 1.0 - shadow );\n\n\t}\n\n#endif\n";
	THREE.ShaderChunk.shadowmap_pars_fragment = "#ifdef USE_SHADOWMAP\n\n\tuniform sampler2D shadowMap[ MAX_SHADOWS ];\n\tuniform vec2 shadowMapSize[ MAX_SHADOWS ];\n\n\tuniform float shadowDarkness[ MAX_SHADOWS ];\n\tuniform float shadowBias[ MAX_SHADOWS ];\n\n\tvarying vec4 vShadowCoord[ MAX_SHADOWS ];\n\n\tfloat unpackDepth( const in vec4 rgba_depth ) {\n\n\t\tconst vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\n\t\tfloat depth = dot( rgba_depth, bit_shift );\n\t\treturn depth;\n\n\t}\n\n\t#if defined(POINT_LIGHT_SHADOWS)\n\n\n\t\tvoid adjustShadowValue1K( const float testDepth, const vec4 textureData, const float bias, inout float shadowValue ) {\n\n\t\t\tconst vec4 bitSh = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\n\t\t\tif ( testDepth >= dot( textureData, bitSh ) * 1000.0 + bias )\n\t\t\t\tshadowValue += 1.0;\n\n\t\t}\n\n\n\t\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\n\n\t\t\tvec3 absV = abs( v );\n\n\n\t\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\t\tabsV *= scaleToCube;\n\n\n\t\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\n\n\n\t\t\tvec2 planar = v.xy;\n\n\t\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\t\tfloat almostOne = 1.0 - almostATexel;\n\n\t\t\tif ( absV.z >= almostOne ) {\n\n\t\t\t\tif ( v.z > 0.0 )\n\t\t\t\t\tplanar.x = 4.0 - v.x;\n\n\t\t\t} else if ( absV.x >= almostOne ) {\n\n\t\t\t\tfloat signX = sign( v.x );\n\t\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\n\t\t\t} else if ( absV.y >= almostOne ) {\n\n\t\t\t\tfloat signY = sign( v.y );\n\t\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\t\tplanar.y = v.z * signY - 2.0;\n\n\t\t\t}\n\n\n\t\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\n\t\t}\n\n\t#endif\n\n#endif\n";
	THREE.ShaderChunk.shadowmap_pars_vertex = "#ifdef USE_SHADOWMAP\n\n\tuniform float shadowDarkness[ MAX_SHADOWS ];\n\tuniform mat4 shadowMatrix[ MAX_SHADOWS ];\n\tvarying vec4 vShadowCoord[ MAX_SHADOWS ];\n\n#endif";THREE.ShaderChunk.shadowmap_vertex = "#ifdef USE_SHADOWMAP\n\n\tfor ( int i = 0; i < MAX_SHADOWS; i ++ ) {\n\n\t\t\tvShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;\n\n\t}\n\n#endif";THREE.ShaderChunk.skinbase_vertex = "#ifdef USE_SKINNING\n\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n\n#endif";
	THREE.ShaderChunk.skinning_pars_vertex = "#ifdef USE_SKINNING\n\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\n\t#ifdef BONE_TEXTURE\n\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureWidth;\n\t\tuniform int boneTextureHeight;\n\n\t\tmat4 getBoneMatrix( const in float i ) {\n\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureWidth ) );\n\t\t\tfloat y = floor( j / float( boneTextureWidth ) );\n\n\t\t\tfloat dx = 1.0 / float( boneTextureWidth );\n\t\t\tfloat dy = 1.0 / float( boneTextureHeight );\n\n\t\t\ty = dy * ( y + 0.5 );\n\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\n\t\t\treturn bone;\n\n\t\t}\n\n\t#else\n\n\t\tuniform mat4 boneGlobalMatrices[ MAX_BONES ];\n\n\t\tmat4 getBoneMatrix( const in float i ) {\n\n\t\t\tmat4 bone = boneGlobalMatrices[ int(i) ];\n\t\t\treturn bone;\n\n\t\t}\n\n\t#endif\n\n#endif\n";
	THREE.ShaderChunk.skinning_vertex = "#ifdef USE_SKINNING\n\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\tskinned  = bindMatrixInverse * skinned;\n\n#endif\n";THREE.ShaderChunk.skinnormal_vertex = "#ifdef USE_SKINNING\n\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\n#endif\n";
	THREE.ShaderChunk.specularmap_fragment = "float specularStrength;\n\n#ifdef USE_SPECULARMAP\n\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n\n#else\n\n\tspecularStrength = 1.0;\n\n#endif";THREE.ShaderChunk.specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n\n\tuniform sampler2D specularMap;\n\n#endif";THREE.ShaderChunk.uv2_pars_fragment = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\n\tvarying vec2 vUv2;\n\n#endif";
	THREE.ShaderChunk.uv2_pars_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\n#endif";THREE.ShaderChunk.uv2_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\n\tvUv2 = uv2;\n\n#endif";THREE.ShaderChunk.uv_pars_fragment = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP )\n\n\tvarying vec2 vUv;\n\n#endif";
	THREE.ShaderChunk.uv_pars_vertex = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP )\n\n\tvarying vec2 vUv;\n\tuniform vec4 offsetRepeat;\n\n#endif\n";THREE.ShaderChunk.uv_vertex = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP )\n\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n\n#endif";
	THREE.ShaderChunk.worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\n\n\t#ifdef USE_SKINNING\n\n\t\tvec4 worldPosition = modelMatrix * skinned;\n\n\t#else\n\n\t\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n\n\t#endif\n\n#endif\n";
	THREE.UniformsUtils = { merge: function merge(a) {
	    for (var b = {}, c = 0; c < a.length; c++) {
	      var d = this.clone(a[c]),
	          e;for (e in d) {
	        b[e] = d[e];
	      }
	    }return b;
	  }, clone: function clone(a) {
	    var b = {},
	        c;for (c in a) {
	      b[c] = {};for (var d in a[c]) {
	        var e = a[c][d];e instanceof THREE.Color || e instanceof THREE.Vector2 || e instanceof THREE.Vector3 || e instanceof THREE.Vector4 || e instanceof THREE.Matrix3 || e instanceof THREE.Matrix4 || e instanceof THREE.Texture ? b[c][d] = e.clone() : Array.isArray(e) ? b[c][d] = e.slice() : b[c][d] = e;
	      }
	    }return b;
	  } };
	THREE.UniformsLib = { common: { diffuse: { type: "c", value: new THREE.Color(15658734) }, opacity: { type: "f", value: 1 }, map: { type: "t", value: null }, offsetRepeat: { type: "v4", value: new THREE.Vector4(0, 0, 1, 1) }, specularMap: { type: "t", value: null }, alphaMap: { type: "t", value: null }, envMap: { type: "t", value: null }, flipEnvMap: { type: "f", value: -1 }, reflectivity: { type: "f", value: 1 }, refractionRatio: { type: "f", value: .98 } }, aomap: { aoMap: { type: "t", value: null }, aoMapIntensity: { type: "f", value: 1 } }, lightmap: { lightMap: { type: "t", value: null }, lightMapIntensity: { type: "f",
	      value: 1 } }, emissivemap: { emissiveMap: { type: "t", value: null } }, bumpmap: { bumpMap: { type: "t", value: null }, bumpScale: { type: "f", value: 1 } }, normalmap: { normalMap: { type: "t", value: null }, normalScale: { type: "v2", value: new THREE.Vector2(1, 1) } }, displacementmap: { displacementMap: { type: "t", value: null }, displacementScale: { type: "f", value: 1 }, displacementBias: { type: "f", value: 0 } }, fog: { fogDensity: { type: "f", value: 2.5E-4 }, fogNear: { type: "f", value: 1 }, fogFar: { type: "f", value: 2E3 }, fogColor: { type: "c", value: new THREE.Color(16777215) } },
	  lights: { ambientLightColor: { type: "fv", value: [] }, directionalLightDirection: { type: "fv", value: [] }, directionalLightColor: { type: "fv", value: [] }, hemisphereLightDirection: { type: "fv", value: [] }, hemisphereLightSkyColor: { type: "fv", value: [] }, hemisphereLightGroundColor: { type: "fv", value: [] }, pointLightColor: { type: "fv", value: [] }, pointLightPosition: { type: "fv", value: [] }, pointLightDistance: { type: "fv1", value: [] }, pointLightDecay: { type: "fv1", value: [] }, spotLightColor: { type: "fv", value: [] }, spotLightPosition: { type: "fv", value: [] },
	    spotLightDirection: { type: "fv", value: [] }, spotLightDistance: { type: "fv1", value: [] }, spotLightAngleCos: { type: "fv1", value: [] }, spotLightExponent: { type: "fv1", value: [] }, spotLightDecay: { type: "fv1", value: [] } }, points: { psColor: { type: "c", value: new THREE.Color(15658734) }, opacity: { type: "f", value: 1 }, size: { type: "f", value: 1 }, scale: { type: "f", value: 1 }, map: { type: "t", value: null }, offsetRepeat: { type: "v4", value: new THREE.Vector4(0, 0, 1, 1) }, fogDensity: { type: "f", value: 2.5E-4 }, fogNear: { type: "f", value: 1 }, fogFar: { type: "f", value: 2E3 },
	    fogColor: { type: "c", value: new THREE.Color(16777215) } }, shadowmap: { shadowMap: { type: "tv", value: [] }, shadowMapSize: { type: "v2v", value: [] }, shadowBias: { type: "fv1", value: [] }, shadowDarkness: { type: "fv1", value: [] }, shadowMatrix: { type: "m4v", value: [] } } };
	THREE.ShaderLib = { basic: { uniforms: THREE.UniformsUtils.merge([THREE.UniformsLib.common, THREE.UniformsLib.aomap, THREE.UniformsLib.fog, THREE.UniformsLib.shadowmap]), vertexShader: [THREE.ShaderChunk.common, THREE.ShaderChunk.uv_pars_vertex, THREE.ShaderChunk.uv2_pars_vertex, THREE.ShaderChunk.envmap_pars_vertex, THREE.ShaderChunk.color_pars_vertex, THREE.ShaderChunk.morphtarget_pars_vertex, THREE.ShaderChunk.skinning_pars_vertex, THREE.ShaderChunk.shadowmap_pars_vertex, THREE.ShaderChunk.logdepthbuf_pars_vertex, "void main() {", THREE.ShaderChunk.uv_vertex, THREE.ShaderChunk.uv2_vertex, THREE.ShaderChunk.color_vertex, THREE.ShaderChunk.skinbase_vertex, "\t#ifdef USE_ENVMAP", THREE.ShaderChunk.beginnormal_vertex, THREE.ShaderChunk.morphnormal_vertex, THREE.ShaderChunk.skinnormal_vertex, THREE.ShaderChunk.defaultnormal_vertex, "\t#endif", THREE.ShaderChunk.begin_vertex, THREE.ShaderChunk.morphtarget_vertex, THREE.ShaderChunk.skinning_vertex, THREE.ShaderChunk.project_vertex, THREE.ShaderChunk.logdepthbuf_vertex, THREE.ShaderChunk.worldpos_vertex, THREE.ShaderChunk.envmap_vertex, THREE.ShaderChunk.shadowmap_vertex, "}"].join("\n"), fragmentShader: ["uniform vec3 diffuse;\nuniform float opacity;", THREE.ShaderChunk.common, THREE.ShaderChunk.color_pars_fragment, THREE.ShaderChunk.uv_pars_fragment, THREE.ShaderChunk.uv2_pars_fragment, THREE.ShaderChunk.map_pars_fragment, THREE.ShaderChunk.alphamap_pars_fragment, THREE.ShaderChunk.aomap_pars_fragment, THREE.ShaderChunk.envmap_pars_fragment, THREE.ShaderChunk.fog_pars_fragment, THREE.ShaderChunk.shadowmap_pars_fragment, THREE.ShaderChunk.specularmap_pars_fragment, THREE.ShaderChunk.logdepthbuf_pars_fragment, "void main() {\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tvec3 totalAmbientLight = vec3( 1.0 );\n\tvec3 shadowMask = vec3( 1.0 );", THREE.ShaderChunk.logdepthbuf_fragment, THREE.ShaderChunk.map_fragment, THREE.ShaderChunk.color_fragment, THREE.ShaderChunk.alphamap_fragment, THREE.ShaderChunk.alphatest_fragment, THREE.ShaderChunk.specularmap_fragment, THREE.ShaderChunk.aomap_fragment, THREE.ShaderChunk.shadowmap_fragment, "\toutgoingLight = diffuseColor.rgb * totalAmbientLight * shadowMask;", THREE.ShaderChunk.envmap_fragment, THREE.ShaderChunk.linear_to_gamma_fragment, THREE.ShaderChunk.fog_fragment, "\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n}"].join("\n") }, lambert: { uniforms: THREE.UniformsUtils.merge([THREE.UniformsLib.common, THREE.UniformsLib.fog, THREE.UniformsLib.lights, THREE.UniformsLib.shadowmap, { emissive: { type: "c", value: new THREE.Color(0) } }]), vertexShader: ["#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif", THREE.ShaderChunk.common, THREE.ShaderChunk.uv_pars_vertex, THREE.ShaderChunk.uv2_pars_vertex, THREE.ShaderChunk.envmap_pars_vertex, THREE.ShaderChunk.lights_lambert_pars_vertex, THREE.ShaderChunk.color_pars_vertex, THREE.ShaderChunk.morphtarget_pars_vertex, THREE.ShaderChunk.skinning_pars_vertex, THREE.ShaderChunk.shadowmap_pars_vertex, THREE.ShaderChunk.logdepthbuf_pars_vertex, "void main() {", THREE.ShaderChunk.uv_vertex, THREE.ShaderChunk.uv2_vertex, THREE.ShaderChunk.color_vertex, THREE.ShaderChunk.beginnormal_vertex, THREE.ShaderChunk.morphnormal_vertex, THREE.ShaderChunk.skinbase_vertex, THREE.ShaderChunk.skinnormal_vertex, THREE.ShaderChunk.defaultnormal_vertex, THREE.ShaderChunk.begin_vertex, THREE.ShaderChunk.morphtarget_vertex, THREE.ShaderChunk.skinning_vertex, THREE.ShaderChunk.project_vertex, THREE.ShaderChunk.logdepthbuf_vertex, THREE.ShaderChunk.worldpos_vertex, THREE.ShaderChunk.envmap_vertex, THREE.ShaderChunk.lights_lambert_vertex, THREE.ShaderChunk.shadowmap_vertex, "}"].join("\n"), fragmentShader: ["uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nuniform vec3 ambientLightColor;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif", THREE.ShaderChunk.common, THREE.ShaderChunk.color_pars_fragment, THREE.ShaderChunk.uv_pars_fragment, THREE.ShaderChunk.uv2_pars_fragment, THREE.ShaderChunk.map_pars_fragment, THREE.ShaderChunk.alphamap_pars_fragment, THREE.ShaderChunk.envmap_pars_fragment, THREE.ShaderChunk.fog_pars_fragment, THREE.ShaderChunk.shadowmap_pars_fragment, THREE.ShaderChunk.specularmap_pars_fragment, THREE.ShaderChunk.logdepthbuf_pars_fragment, "void main() {\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tvec3 totalAmbientLight = ambientLightColor;\n\tvec3 shadowMask = vec3( 1.0 );", THREE.ShaderChunk.logdepthbuf_fragment, THREE.ShaderChunk.map_fragment, THREE.ShaderChunk.color_fragment, THREE.ShaderChunk.alphamap_fragment, THREE.ShaderChunk.alphatest_fragment, THREE.ShaderChunk.specularmap_fragment, THREE.ShaderChunk.shadowmap_fragment, "\t#ifdef DOUBLE_SIDED\n\t\tif ( gl_FrontFacing )\n\t\t\toutgoingLight += diffuseColor.rgb * ( vLightFront * shadowMask + totalAmbientLight ) + emissive;\n\t\telse\n\t\t\toutgoingLight += diffuseColor.rgb * ( vLightBack * shadowMask + totalAmbientLight ) + emissive;\n\t#else\n\t\toutgoingLight += diffuseColor.rgb * ( vLightFront * shadowMask + totalAmbientLight ) + emissive;\n\t#endif", THREE.ShaderChunk.envmap_fragment, THREE.ShaderChunk.linear_to_gamma_fragment, THREE.ShaderChunk.fog_fragment, "\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n}"].join("\n") }, phong: { uniforms: THREE.UniformsUtils.merge([THREE.UniformsLib.common, THREE.UniformsLib.aomap, THREE.UniformsLib.lightmap, THREE.UniformsLib.emissivemap, THREE.UniformsLib.bumpmap, THREE.UniformsLib.normalmap, THREE.UniformsLib.displacementmap, THREE.UniformsLib.fog, THREE.UniformsLib.lights, THREE.UniformsLib.shadowmap, { emissive: { type: "c",
	        value: new THREE.Color(0) }, specular: { type: "c", value: new THREE.Color(1118481) }, shininess: { type: "f", value: 30 } }]), vertexShader: ["#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif", THREE.ShaderChunk.common, THREE.ShaderChunk.uv_pars_vertex, THREE.ShaderChunk.uv2_pars_vertex, THREE.ShaderChunk.displacementmap_pars_vertex, THREE.ShaderChunk.envmap_pars_vertex, THREE.ShaderChunk.lights_phong_pars_vertex, THREE.ShaderChunk.color_pars_vertex, THREE.ShaderChunk.morphtarget_pars_vertex, THREE.ShaderChunk.skinning_pars_vertex, THREE.ShaderChunk.shadowmap_pars_vertex, THREE.ShaderChunk.logdepthbuf_pars_vertex, "void main() {", THREE.ShaderChunk.uv_vertex, THREE.ShaderChunk.uv2_vertex, THREE.ShaderChunk.color_vertex, THREE.ShaderChunk.beginnormal_vertex, THREE.ShaderChunk.morphnormal_vertex, THREE.ShaderChunk.skinbase_vertex, THREE.ShaderChunk.skinnormal_vertex, THREE.ShaderChunk.defaultnormal_vertex, "#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif", THREE.ShaderChunk.begin_vertex, THREE.ShaderChunk.displacementmap_vertex, THREE.ShaderChunk.morphtarget_vertex, THREE.ShaderChunk.skinning_vertex, THREE.ShaderChunk.project_vertex, THREE.ShaderChunk.logdepthbuf_vertex, "\tvViewPosition = - mvPosition.xyz;", THREE.ShaderChunk.worldpos_vertex, THREE.ShaderChunk.envmap_vertex, THREE.ShaderChunk.lights_phong_vertex, THREE.ShaderChunk.shadowmap_vertex, "}"].join("\n"), fragmentShader: ["#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;", THREE.ShaderChunk.common, THREE.ShaderChunk.color_pars_fragment, THREE.ShaderChunk.uv_pars_fragment, THREE.ShaderChunk.uv2_pars_fragment, THREE.ShaderChunk.map_pars_fragment, THREE.ShaderChunk.alphamap_pars_fragment, THREE.ShaderChunk.aomap_pars_fragment, THREE.ShaderChunk.lightmap_pars_fragment, THREE.ShaderChunk.emissivemap_pars_fragment, THREE.ShaderChunk.envmap_pars_fragment, THREE.ShaderChunk.fog_pars_fragment, THREE.ShaderChunk.lights_phong_pars_fragment, THREE.ShaderChunk.shadowmap_pars_fragment, THREE.ShaderChunk.bumpmap_pars_fragment, THREE.ShaderChunk.normalmap_pars_fragment, THREE.ShaderChunk.specularmap_pars_fragment, THREE.ShaderChunk.logdepthbuf_pars_fragment, "void main() {\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tvec3 totalAmbientLight = ambientLightColor;\n\tvec3 totalEmissiveLight = emissive;\n\tvec3 shadowMask = vec3( 1.0 );", THREE.ShaderChunk.logdepthbuf_fragment, THREE.ShaderChunk.map_fragment, THREE.ShaderChunk.color_fragment, THREE.ShaderChunk.alphamap_fragment, THREE.ShaderChunk.alphatest_fragment, THREE.ShaderChunk.specularmap_fragment, THREE.ShaderChunk.normal_phong_fragment, THREE.ShaderChunk.lightmap_fragment, THREE.ShaderChunk.hemilight_fragment, THREE.ShaderChunk.aomap_fragment, THREE.ShaderChunk.emissivemap_fragment, THREE.ShaderChunk.lights_phong_fragment, THREE.ShaderChunk.shadowmap_fragment, "totalDiffuseLight *= shadowMask;\ntotalSpecularLight *= shadowMask;\n#ifdef METAL\n\toutgoingLight += diffuseColor.rgb * ( totalDiffuseLight + totalAmbientLight ) * specular + totalSpecularLight + totalEmissiveLight;\n#else\n\toutgoingLight += diffuseColor.rgb * ( totalDiffuseLight + totalAmbientLight ) + totalSpecularLight + totalEmissiveLight;\n#endif", THREE.ShaderChunk.envmap_fragment, THREE.ShaderChunk.linear_to_gamma_fragment, THREE.ShaderChunk.fog_fragment, "\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n}"].join("\n") }, points: { uniforms: THREE.UniformsUtils.merge([THREE.UniformsLib.points, THREE.UniformsLib.shadowmap]), vertexShader: ["uniform float size;\nuniform float scale;", THREE.ShaderChunk.common, THREE.ShaderChunk.color_pars_vertex, THREE.ShaderChunk.shadowmap_pars_vertex, THREE.ShaderChunk.logdepthbuf_pars_vertex, "void main() {", THREE.ShaderChunk.color_vertex, "\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\t#ifdef USE_SIZEATTENUATION\n\t\tgl_PointSize = size * ( scale / length( mvPosition.xyz ) );\n\t#else\n\t\tgl_PointSize = size;\n\t#endif\n\tgl_Position = projectionMatrix * mvPosition;", THREE.ShaderChunk.logdepthbuf_vertex, THREE.ShaderChunk.worldpos_vertex, THREE.ShaderChunk.shadowmap_vertex, "}"].join("\n"), fragmentShader: ["uniform vec3 psColor;\nuniform float opacity;", THREE.ShaderChunk.common, THREE.ShaderChunk.color_pars_fragment, THREE.ShaderChunk.map_particle_pars_fragment, THREE.ShaderChunk.fog_pars_fragment, THREE.ShaderChunk.shadowmap_pars_fragment, THREE.ShaderChunk.logdepthbuf_pars_fragment, "void main() {\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( psColor, opacity );\n\tvec3 shadowMask = vec3( 1.0 );", THREE.ShaderChunk.logdepthbuf_fragment, THREE.ShaderChunk.map_particle_fragment, THREE.ShaderChunk.color_fragment, THREE.ShaderChunk.alphatest_fragment, THREE.ShaderChunk.shadowmap_fragment, "\toutgoingLight = diffuseColor.rgb * shadowMask;", THREE.ShaderChunk.fog_fragment, "\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n}"].join("\n") }, dashed: { uniforms: THREE.UniformsUtils.merge([THREE.UniformsLib.common, THREE.UniformsLib.fog, { scale: { type: "f", value: 1 }, dashSize: { type: "f", value: 1 }, totalSize: { type: "f", value: 2 } }]), vertexShader: ["uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;", THREE.ShaderChunk.common, THREE.ShaderChunk.color_pars_vertex, THREE.ShaderChunk.logdepthbuf_pars_vertex, "void main() {", THREE.ShaderChunk.color_vertex, "\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;", THREE.ShaderChunk.logdepthbuf_vertex, "}"].join("\n"), fragmentShader: ["uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;", THREE.ShaderChunk.common, THREE.ShaderChunk.color_pars_fragment, THREE.ShaderChunk.fog_pars_fragment, THREE.ShaderChunk.logdepthbuf_pars_fragment, "void main() {\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );", THREE.ShaderChunk.logdepthbuf_fragment, THREE.ShaderChunk.color_fragment, "\toutgoingLight = diffuseColor.rgb;", THREE.ShaderChunk.fog_fragment, "\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n}"].join("\n") }, depth: { uniforms: { mNear: { type: "f", value: 1 }, mFar: { type: "f", value: 2E3 }, opacity: { type: "f", value: 1 } }, vertexShader: [THREE.ShaderChunk.common, THREE.ShaderChunk.morphtarget_pars_vertex, THREE.ShaderChunk.logdepthbuf_pars_vertex, "void main() {", THREE.ShaderChunk.begin_vertex, THREE.ShaderChunk.morphtarget_vertex, THREE.ShaderChunk.project_vertex, THREE.ShaderChunk.logdepthbuf_vertex, "}"].join("\n"), fragmentShader: ["uniform float mNear;\nuniform float mFar;\nuniform float opacity;", THREE.ShaderChunk.common, THREE.ShaderChunk.logdepthbuf_pars_fragment, "void main() {", THREE.ShaderChunk.logdepthbuf_fragment, "\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\n\t#else\n\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\n\t#endif\n\tfloat color = 1.0 - smoothstep( mNear, mFar, depth );\n\tgl_FragColor = vec4( vec3( color ), opacity );\n}"].join("\n") },
	  normal: { uniforms: { opacity: { type: "f", value: 1 } }, vertexShader: ["varying vec3 vNormal;", THREE.ShaderChunk.common, THREE.ShaderChunk.morphtarget_pars_vertex, THREE.ShaderChunk.logdepthbuf_pars_vertex, "void main() {\n\tvNormal = normalize( normalMatrix * normal );", THREE.ShaderChunk.begin_vertex, THREE.ShaderChunk.morphtarget_vertex, THREE.ShaderChunk.project_vertex, THREE.ShaderChunk.logdepthbuf_vertex, "}"].join("\n"), fragmentShader: ["uniform float opacity;\nvarying vec3 vNormal;", THREE.ShaderChunk.common, THREE.ShaderChunk.logdepthbuf_pars_fragment, "void main() {\n\tgl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );", THREE.ShaderChunk.logdepthbuf_fragment, "}"].join("\n") }, cube: { uniforms: { tCube: { type: "t", value: null }, tFlip: { type: "f", value: -1 } }, vertexShader: ["varying vec3 vWorldPosition;", THREE.ShaderChunk.common, THREE.ShaderChunk.logdepthbuf_pars_vertex, "void main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", THREE.ShaderChunk.logdepthbuf_vertex, "}"].join("\n"), fragmentShader: ["uniform samplerCube tCube;\nuniform float tFlip;\nvarying vec3 vWorldPosition;", THREE.ShaderChunk.common, THREE.ShaderChunk.logdepthbuf_pars_fragment, "void main() {\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );", THREE.ShaderChunk.logdepthbuf_fragment, "}"].join("\n") }, equirect: { uniforms: { tEquirect: { type: "t", value: null }, tFlip: { type: "f", value: -1 } }, vertexShader: ["varying vec3 vWorldPosition;", THREE.ShaderChunk.common, THREE.ShaderChunk.logdepthbuf_pars_vertex, "void main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", THREE.ShaderChunk.logdepthbuf_vertex, "}"].join("\n"), fragmentShader: ["uniform sampler2D tEquirect;\nuniform float tFlip;\nvarying vec3 vWorldPosition;", THREE.ShaderChunk.common, THREE.ShaderChunk.logdepthbuf_pars_fragment, "void main() {\nvec3 direction = normalize( vWorldPosition );\nvec2 sampleUV;\nsampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\nsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\ngl_FragColor = texture2D( tEquirect, sampleUV );", THREE.ShaderChunk.logdepthbuf_fragment, "}"].join("\n") }, depthRGBA: { uniforms: {}, vertexShader: [THREE.ShaderChunk.common, THREE.ShaderChunk.morphtarget_pars_vertex, THREE.ShaderChunk.skinning_pars_vertex, THREE.ShaderChunk.logdepthbuf_pars_vertex, "void main() {", THREE.ShaderChunk.skinbase_vertex, THREE.ShaderChunk.begin_vertex, THREE.ShaderChunk.morphtarget_vertex, THREE.ShaderChunk.skinning_vertex, THREE.ShaderChunk.project_vertex, THREE.ShaderChunk.logdepthbuf_vertex, "}"].join("\n"), fragmentShader: [THREE.ShaderChunk.common, THREE.ShaderChunk.logdepthbuf_pars_fragment, "vec4 pack_depth( const in float depth ) {\n\tconst vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );\n\tconst vec4 bit_mask = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );\n\tvec4 res = mod( depth * bit_shift * vec4( 255 ), vec4( 256 ) ) / vec4( 255 );\n\tres -= res.xxyz * bit_mask;\n\treturn res;\n}\nvoid main() {", THREE.ShaderChunk.logdepthbuf_fragment, "\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tgl_FragData[ 0 ] = pack_depth( gl_FragDepthEXT );\n\t#else\n\t\tgl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );\n\t#endif\n}"].join("\n") },
	  distanceRGBA: { uniforms: { lightPos: { type: "v3", value: new THREE.Vector3(0, 0, 0) } }, vertexShader: ["varying vec4 vWorldPosition;", THREE.ShaderChunk.common, THREE.ShaderChunk.morphtarget_pars_vertex, THREE.ShaderChunk.skinning_pars_vertex, "void main() {", THREE.ShaderChunk.skinbase_vertex, THREE.ShaderChunk.begin_vertex, THREE.ShaderChunk.morphtarget_vertex, THREE.ShaderChunk.skinning_vertex, THREE.ShaderChunk.project_vertex, THREE.ShaderChunk.worldpos_vertex, "vWorldPosition = worldPosition;\n}"].join("\n"), fragmentShader: ["uniform vec3 lightPos;\nvarying vec4 vWorldPosition;", THREE.ShaderChunk.common, "vec4 pack1K ( float depth ) {\n   depth /= 1000.0;\n   const vec4 bitSh = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );\n\tconst vec4 bitMsk = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );\n\tvec4 res = fract( depth * bitSh );\n\tres -= res.xxyz * bitMsk;\n\treturn res; \n}\nfloat unpack1K ( vec4 color ) {\n\tconst vec4 bitSh = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\n\treturn dot( color, bitSh ) * 1000.0;\n}\nvoid main () {\n\tgl_FragColor = pack1K( length( vWorldPosition.xyz - lightPos.xyz ) );\n}"].join("\n") } };
	THREE.WebGLRenderer = function (a) {
	  function b(a, b, c, d) {
	    !0 === G && (a *= d, b *= d, c *= d);r.clearColor(a, b, c, d);
	  }function c() {
	    I.init();r.viewport(na, oa, pa, qa);b(U.r, U.g, U.b, X);
	  }function d() {
	    ra = Aa = null;sa = "";ta = -1;wa = !0;I.reset();
	  }function e(a) {
	    a.preventDefault();d();c();W.clear();
	  }function g(a) {
	    a = a.target;a.removeEventListener("dispose", g);a: {
	      var b = W.get(a);if (a.image && b.__image__webglTextureCube) r.deleteTexture(b.__image__webglTextureCube);else {
	        if (void 0 === b.__webglInit) break a;r.deleteTexture(b.__webglTexture);
	      }W.delete(a);
	    }la.textures--;
	  }
	  function f(a) {
	    a = a.target;a.removeEventListener("dispose", f);var b = W.get(a),
	        c = W.get(a.texture);if (a && void 0 !== c.__webglTexture) {
	      r.deleteTexture(c.__webglTexture);if (a instanceof THREE.WebGLRenderTargetCube) for (c = 0; 6 > c; c++) {
	        r.deleteFramebuffer(b.__webglFramebuffer[c]), r.deleteRenderbuffer(b.__webglRenderbuffer[c]);
	      } else r.deleteFramebuffer(b.__webglFramebuffer), r.deleteRenderbuffer(b.__webglRenderbuffer);W.delete(a.texture);W.delete(a);
	    }la.textures--;
	  }function h(a) {
	    a = a.target;a.removeEventListener("dispose", h);l(a);W.delete(a);
	  }function l(a) {
	    var b = W.get(a).program;a.program = void 0;void 0 !== b && ua.releaseProgram(b);
	  }function k(a, b) {
	    return b[0] - a[0];
	  }function m(a, b) {
	    return a.object.renderOrder !== b.object.renderOrder ? a.object.renderOrder - b.object.renderOrder : a.material.id !== b.material.id ? a.material.id - b.material.id : a.z !== b.z ? a.z - b.z : a.id - b.id;
	  }function p(a, b) {
	    return a.object.renderOrder !== b.object.renderOrder ? a.object.renderOrder - b.object.renderOrder : a.z !== b.z ? b.z - a.z : a.id - b.id;
	  }function n(a, b, c, d, e) {
	    var f;c.transparent ? (d = Z, f = ++fa) : (d = ca, f = ++ga);f = d[f];void 0 !== f ? (f.id = a.id, f.object = a, f.geometry = b, f.material = c, f.z = V.z, f.group = e) : (f = { id: a.id, object: a, geometry: b, material: c, z: V.z, group: e }, d.push(f));
	  }function q(a, b) {
	    if (!1 !== a.visible) {
	      if (0 !== (a.channels.mask & b.channels.mask)) if (a instanceof THREE.Light) da.push(a);else if (a instanceof THREE.Sprite) ea.push(a);else if (a instanceof THREE.LensFlare) ja.push(a);else if (a instanceof THREE.ImmediateRenderObject) !0 === aa.sortObjects && (V.setFromMatrixPosition(a.matrixWorld), V.applyProjection(xa)), n(a, null, a.material, V.z, null);else if (a instanceof THREE.Mesh || a instanceof THREE.Line || a instanceof THREE.Points) if (a instanceof THREE.SkinnedMesh && a.skeleton.update(), !1 === a.frustumCulled || !0 === Ba.intersectsObject(a)) {
	        var c = a.material;if (!0 === c.visible) {
	          !0 === aa.sortObjects && (V.setFromMatrixPosition(a.matrixWorld), V.applyProjection(xa));var d = va.update(a);if (c instanceof THREE.MeshFaceMaterial) for (var e = d.groups, f = c.materials, c = 0, g = e.length; c < g; c++) {
	            var h = e[c],
	                l = f[h.materialIndex];!0 === l.visible && n(a, d, l, V.z, h);
	          } else n(a, d, c, V.z, null);
	        }
	      }d = a.children;c = 0;for (g = d.length; c < g; c++) {
	        q(d[c], b);
	      }
	    }
	  }function s(a, b, c, d, e) {
	    for (var f = 0, g = a.length; f < g; f++) {
	      var h = a[f],
	          l = h.object,
	          k = h.geometry,
	          n = void 0 === e ? h.material : e,
	          h = h.group;l.modelViewMatrix.multiplyMatrices(b.matrixWorldInverse, l.matrixWorld);l.normalMatrix.getNormalMatrix(l.modelViewMatrix);if (l instanceof THREE.ImmediateRenderObject) {
	        t(n);var m = v(b, c, d, n, l);sa = "";l.render(function (a) {
	          aa.renderBufferImmediate(a, m, n);
	        });
	      } else aa.renderBufferDirect(b, c, d, k, n, l, h);
	    }
	  }function t(a) {
	    a.side !== THREE.DoubleSide ? I.enable(r.CULL_FACE) : I.disable(r.CULL_FACE);I.setFlipSided(a.side === THREE.BackSide);!0 === a.transparent ? I.setBlending(a.blending, a.blendEquation, a.blendSrc, a.blendDst, a.blendEquationAlpha, a.blendSrcAlpha, a.blendDstAlpha) : I.setBlending(THREE.NoBlending);I.setDepthFunc(a.depthFunc);I.setDepthTest(a.depthTest);I.setDepthWrite(a.depthWrite);I.setColorWrite(a.colorWrite);I.setPolygonOffset(a.polygonOffset, a.polygonOffsetFactor, a.polygonOffsetUnits);
	  }function v(a, b, c, d, e) {
	    ya = 0;var f = W.get(d);if (d.needsUpdate || !f.program) {
	      a: {
	        var g = W.get(d),
	            k = ua.getParameters(d, b, c, e),
	            n = ua.getProgramCode(d, k),
	            m = g.program,
	            q = !0;if (void 0 === m) d.addEventListener("dispose", h);else if (m.code !== n) l(d);else if (void 0 !== k.shaderID) break a;else q = !1;q && (k.shaderID ? (m = THREE.ShaderLib[k.shaderID], g.__webglShader = { name: d.type, uniforms: THREE.UniformsUtils.clone(m.uniforms), vertexShader: m.vertexShader, fragmentShader: m.fragmentShader }) : g.__webglShader = { name: d.type, uniforms: d.uniforms, vertexShader: d.vertexShader,
	          fragmentShader: d.fragmentShader }, d.__webglShader = g.__webglShader, m = ua.acquireProgram(d, k, n), g.program = m, d.program = m);k = m.getAttributes();if (d.morphTargets) for (n = d.numSupportedMorphTargets = 0; n < aa.maxMorphTargets; n++) {
	          0 <= k["morphTarget" + n] && d.numSupportedMorphTargets++;
	        }if (d.morphNormals) for (n = d.numSupportedMorphNormals = 0; n < aa.maxMorphNormals; n++) {
	          0 <= k["morphNormal" + n] && d.numSupportedMorphNormals++;
	        }g.uniformsList = [];var k = g.program.getUniforms(),
	            p;for (p in g.__webglShader.uniforms) {
	          (n = k[p]) && g.uniformsList.push([g.__webglShader.uniforms[p], n]);
	        }
	      }d.needsUpdate = !1;
	    }n = m = q = !1;g = f.program;p = g.getUniforms();k = f.__webglShader.uniforms;g.id !== Aa && (r.useProgram(g.program), Aa = g.id, n = m = q = !0);d.id !== ta && (-1 === ta && (n = !0), ta = d.id, m = !0);if (q || a !== ra) r.uniformMatrix4fv(p.projectionMatrix, !1, a.projectionMatrix.elements), ha.logarithmicDepthBuffer && r.uniform1f(p.logDepthBufFC, 2 / (Math.log(a.far + 1) / Math.LN2)), a !== ra && (ra = a), (d instanceof THREE.ShaderMaterial || d instanceof THREE.MeshPhongMaterial || d.envMap) && void 0 !== p.cameraPosition && (V.setFromMatrixPosition(a.matrixWorld), r.uniform3f(p.cameraPosition, V.x, V.y, V.z)), (d instanceof THREE.MeshPhongMaterial || d instanceof THREE.MeshLambertMaterial || d instanceof THREE.MeshBasicMaterial || d instanceof THREE.ShaderMaterial || d.skinning) && void 0 !== p.viewMatrix && r.uniformMatrix4fv(p.viewMatrix, !1, a.matrixWorldInverse.elements);d.skinning && (e.bindMatrix && void 0 !== p.bindMatrix && r.uniformMatrix4fv(p.bindMatrix, !1, e.bindMatrix.elements), e.bindMatrixInverse && void 0 !== p.bindMatrixInverse && r.uniformMatrix4fv(p.bindMatrixInverse, !1, e.bindMatrixInverse.elements), ha.floatVertexTextures && e.skeleton && e.skeleton.useVertexTexture ? (void 0 !== p.boneTexture && (q = w(), r.uniform1i(p.boneTexture, q), aa.setTexture(e.skeleton.boneTexture, q)), void 0 !== p.boneTextureWidth && r.uniform1i(p.boneTextureWidth, e.skeleton.boneTextureWidth), void 0 !== p.boneTextureHeight && r.uniform1i(p.boneTextureHeight, e.skeleton.boneTextureHeight)) : e.skeleton && e.skeleton.boneMatrices && void 0 !== p.boneGlobalMatrices && r.uniformMatrix4fv(p.boneGlobalMatrices, !1, e.skeleton.boneMatrices));if (m) {
	      c && d.fog && (k.fogColor.value = c.color, c instanceof THREE.Fog ? (k.fogNear.value = c.near, k.fogFar.value = c.far) : c instanceof THREE.FogExp2 && (k.fogDensity.value = c.density));if (d instanceof THREE.MeshPhongMaterial || d instanceof THREE.MeshLambertMaterial || d.lights) {
	        if (wa) {
	          var n = !0,
	              s,
	              t = q = 0,
	              x = 0,
	              v,
	              F,
	              C,
	              y = Ca,
	              E = a.matrixWorldInverse,
	              B = y.directional.colors,
	              K = y.directional.positions,
	              O = y.point.colors,
	              N = y.point.positions,
	              M = y.point.distances,
	              G = y.point.decays,
	              J = y.spot.colors,
	              H = y.spot.positions,
	              Q = y.spot.distances,
	              I = y.spot.directions,
	              da = y.spot.anglesCos,
	              T = y.spot.exponents,
	              R = y.spot.decays,
	              Z = y.hemi.skyColors,
	              ga = y.hemi.groundColors,
	              S = y.hemi.positions,
	              ca = 0,
	              U = 0,
	              ea = 0,
	              fa = 0,
	              ja = 0,
	              ma = 0,
	              X = 0,
	              $ = 0,
	              ba = s = 0;c = C = ba = 0;for (m = b.length; c < m; c++) {
	            s = b[c], v = s.color, F = s.intensity, C = s.distance, s instanceof THREE.AmbientLight ? s.visible && (q += v.r, t += v.g, x += v.b) : s instanceof THREE.DirectionalLight ? (ja += 1, s.visible && (Y.setFromMatrixPosition(s.matrixWorld), V.setFromMatrixPosition(s.target.matrixWorld), Y.sub(V), Y.transformDirection(E), s = 3 * ca, K[s + 0] = Y.x, K[s + 1] = Y.y, K[s + 2] = Y.z, D(B, s, v, F), ca += 1)) : s instanceof THREE.PointLight ? (ma += 1, s.visible && (ba = 3 * U, D(O, ba, v, F), V.setFromMatrixPosition(s.matrixWorld), V.applyMatrix4(E), N[ba + 0] = V.x, N[ba + 1] = V.y, N[ba + 2] = V.z, M[U] = C, G[U] = 0 === s.distance ? 0 : s.decay, U += 1)) : s instanceof THREE.SpotLight ? (X += 1, s.visible && (ba = 3 * ea, D(J, ba, v, F), Y.setFromMatrixPosition(s.matrixWorld), V.copy(Y).applyMatrix4(E), H[ba + 0] = V.x, H[ba + 1] = V.y, H[ba + 2] = V.z, Q[ea] = C, V.setFromMatrixPosition(s.target.matrixWorld), Y.sub(V), Y.transformDirection(E), I[ba + 0] = Y.x, I[ba + 1] = Y.y, I[ba + 2] = Y.z, da[ea] = Math.cos(s.angle), T[ea] = s.exponent, R[ea] = 0 === s.distance ? 0 : s.decay, ea += 1)) : s instanceof THREE.HemisphereLight && ($ += 1, s.visible && (Y.setFromMatrixPosition(s.matrixWorld), Y.transformDirection(E), C = 3 * fa, S[C + 0] = Y.x, S[C + 1] = Y.y, S[C + 2] = Y.z, v = s.color, s = s.groundColor, D(Z, C, v, F), D(ga, C, s, F), fa += 1));
	          }c = 3 * ca;for (m = Math.max(B.length, 3 * ja); c < m; c++) {
	            B[c] = 0;
	          }c = 3 * U;for (m = Math.max(O.length, 3 * ma); c < m; c++) {
	            O[c] = 0;
	          }c = 3 * ea;for (m = Math.max(J.length, 3 * X); c < m; c++) {
	            J[c] = 0;
	          }c = 3 * fa;for (m = Math.max(Z.length, 3 * $); c < m; c++) {
	            Z[c] = 0;
	          }c = 3 * fa;for (m = Math.max(ga.length, 3 * $); c < m; c++) {
	            ga[c] = 0;
	          }y.directional.length = ca;y.point.length = U;y.spot.length = ea;y.hemi.length = fa;y.ambient[0] = q;y.ambient[1] = t;y.ambient[2] = x;wa = !1;
	        }n ? (n = Ca, k.ambientLightColor.value = n.ambient, k.directionalLightColor.value = n.directional.colors, k.directionalLightDirection.value = n.directional.positions, k.pointLightColor.value = n.point.colors, k.pointLightPosition.value = n.point.positions, k.pointLightDistance.value = n.point.distances, k.pointLightDecay.value = n.point.decays, k.spotLightColor.value = n.spot.colors, k.spotLightPosition.value = n.spot.positions, k.spotLightDistance.value = n.spot.distances, k.spotLightDirection.value = n.spot.directions, k.spotLightAngleCos.value = n.spot.anglesCos, k.spotLightExponent.value = n.spot.exponents, k.spotLightDecay.value = n.spot.decays, k.hemisphereLightSkyColor.value = n.hemi.skyColors, k.hemisphereLightGroundColor.value = n.hemi.groundColors, k.hemisphereLightDirection.value = n.hemi.positions, u(k, !0)) : u(k, !1);
	      }if (d instanceof THREE.MeshBasicMaterial || d instanceof THREE.MeshLambertMaterial || d instanceof THREE.MeshPhongMaterial) {
	        k.opacity.value = d.opacity;k.diffuse.value = d.color;d.emissive && (k.emissive.value = d.emissive);k.map.value = d.map;k.specularMap.value = d.specularMap;k.alphaMap.value = d.alphaMap;d.aoMap && (k.aoMap.value = d.aoMap, k.aoMapIntensity.value = d.aoMapIntensity);var P;d.map ? P = d.map : d.specularMap ? P = d.specularMap : d.displacementMap ? P = d.displacementMap : d.normalMap ? P = d.normalMap : d.bumpMap ? P = d.bumpMap : d.alphaMap ? P = d.alphaMap : d.emissiveMap && (P = d.emissiveMap);void 0 !== P && (P instanceof THREE.WebGLRenderTarget && (P = P.texture), n = P.offset, P = P.repeat, k.offsetRepeat.value.set(n.x, n.y, P.x, P.y));k.envMap.value = d.envMap;k.flipEnvMap.value = d.envMap instanceof THREE.WebGLRenderTargetCube ? 1 : -1;k.reflectivity.value = d.reflectivity;k.refractionRatio.value = d.refractionRatio;
	      }d instanceof THREE.LineBasicMaterial ? (k.diffuse.value = d.color, k.opacity.value = d.opacity) : d instanceof THREE.LineDashedMaterial ? (k.diffuse.value = d.color, k.opacity.value = d.opacity, k.dashSize.value = d.dashSize, k.totalSize.value = d.dashSize + d.gapSize, k.scale.value = d.scale) : d instanceof THREE.PointsMaterial ? (k.psColor.value = d.color, k.opacity.value = d.opacity, k.size.value = d.size, k.scale.value = L.height / 2, k.map.value = d.map, null !== d.map && (a = d.map.offset, P = d.map.repeat, k.offsetRepeat.value.set(a.x, a.y, P.x, P.y))) : d instanceof THREE.MeshPhongMaterial ? (k.specular.value = d.specular, k.shininess.value = Math.max(d.shininess, 1E-4), d.lightMap && (k.lightMap.value = d.lightMap, k.lightMapIntensity.value = d.lightMapIntensity), d.emissiveMap && (k.emissiveMap.value = d.emissiveMap), d.bumpMap && (k.bumpMap.value = d.bumpMap, k.bumpScale.value = d.bumpScale), d.normalMap && (k.normalMap.value = d.normalMap, k.normalScale.value.copy(d.normalScale)), d.displacementMap && (k.displacementMap.value = d.displacementMap, k.displacementScale.value = d.displacementScale, k.displacementBias.value = d.displacementBias)) : d instanceof THREE.MeshDepthMaterial ? (k.mNear.value = a.near, k.mFar.value = a.far, k.opacity.value = d.opacity) : d instanceof THREE.MeshNormalMaterial && (k.opacity.value = d.opacity);if (e.receiveShadow && !d._shadowPass && k.shadowMatrix) for (a = d = 0, P = b.length; a < P; a++) {
	        n = b[a], !0 === n.castShadow && (n instanceof THREE.PointLight || n instanceof THREE.SpotLight || n instanceof THREE.DirectionalLight) && (c = n.shadow, n instanceof THREE.PointLight ? (V.setFromMatrixPosition(n.matrixWorld).negate(), c.matrix.identity().setPosition(V), k.shadowDarkness.value[d] = -c.darkness) : k.shadowDarkness.value[d] = c.darkness, k.shadowMatrix.value[d] = c.matrix, k.shadowMap.value[d] = c.map, k.shadowMapSize.value[d] = c.mapSize, k.shadowBias.value[d] = c.bias, d++);
	      }b = f.uniformsList;f = 0;for (d = b.length; f < d; f++) {
	        if (a = b[f][0], !1 !== a.needsUpdate) switch (k = a.type, c = a.value, P = b[f][1], k) {case "1i":
	            r.uniform1i(P, c);break;case "1f":
	            r.uniform1f(P, c);break;case "2f":
	            r.uniform2f(P, c[0], c[1]);break;case "3f":
	            r.uniform3f(P, c[0], c[1], c[2]);break;case "4f":
	            r.uniform4f(P, c[0], c[1], c[2], c[3]);break;case "1iv":
	            r.uniform1iv(P, c);break;case "3iv":
	            r.uniform3iv(P, c);break;case "1fv":
	            r.uniform1fv(P, c);break;case "2fv":
	            r.uniform2fv(P, c);break;
	          case "3fv":
	            r.uniform3fv(P, c);break;case "4fv":
	            r.uniform4fv(P, c);break;case "Matrix3fv":
	            r.uniformMatrix3fv(P, !1, c);break;case "Matrix4fv":
	            r.uniformMatrix4fv(P, !1, c);break;case "i":
	            r.uniform1i(P, c);break;case "f":
	            r.uniform1f(P, c);break;case "v2":
	            r.uniform2f(P, c.x, c.y);break;case "v3":
	            r.uniform3f(P, c.x, c.y, c.z);break;case "v4":
	            r.uniform4f(P, c.x, c.y, c.z, c.w);break;case "c":
	            r.uniform3f(P, c.r, c.g, c.b);break;case "iv1":
	            r.uniform1iv(P, c);break;case "iv":
	            r.uniform3iv(P, c);break;case "fv1":
	            r.uniform1fv(P, c);
	            break;case "fv":
	            r.uniform3fv(P, c);break;case "v2v":
	            void 0 === a._array && (a._array = new Float32Array(2 * c.length));m = k = 0;for (n = c.length; k < n; k++, m += 2) {
	              a._array[m + 0] = c[k].x, a._array[m + 1] = c[k].y;
	            }r.uniform2fv(P, a._array);break;case "v3v":
	            void 0 === a._array && (a._array = new Float32Array(3 * c.length));m = k = 0;for (n = c.length; k < n; k++, m += 3) {
	              a._array[m + 0] = c[k].x, a._array[m + 1] = c[k].y, a._array[m + 2] = c[k].z;
	            }r.uniform3fv(P, a._array);break;case "v4v":
	            void 0 === a._array && (a._array = new Float32Array(4 * c.length));m = k = 0;for (n = c.length; k < n; k++, m += 4) {
	              a._array[m + 0] = c[k].x, a._array[m + 1] = c[k].y, a._array[m + 2] = c[k].z, a._array[m + 3] = c[k].w;
	            }r.uniform4fv(P, a._array);break;case "m3":
	            r.uniformMatrix3fv(P, !1, c.elements);break;case "m3v":
	            void 0 === a._array && (a._array = new Float32Array(9 * c.length));k = 0;for (n = c.length; k < n; k++) {
	              c[k].flattenToArrayOffset(a._array, 9 * k);
	            }r.uniformMatrix3fv(P, !1, a._array);break;case "m4":
	            r.uniformMatrix4fv(P, !1, c.elements);break;case "m4v":
	            void 0 === a._array && (a._array = new Float32Array(16 * c.length));k = 0;for (n = c.length; k < n; k++) {
	              c[k].flattenToArrayOffset(a._array, 16 * k);
	            }r.uniformMatrix4fv(P, !1, a._array);break;case "t":
	            m = w();r.uniform1i(P, m);if (!c) continue;c instanceof THREE.CubeTexture || Array.isArray(c.image) && 6 === c.image.length ? z(c, m) : c instanceof THREE.WebGLRenderTargetCube ? A(c.texture, m) : c instanceof THREE.WebGLRenderTarget ? aa.setTexture(c.texture, m) : aa.setTexture(c, m);break;case "tv":
	            void 0 === a._array && (a._array = []);k = 0;for (n = a.value.length; k < n; k++) {
	              a._array[k] = w();
	            }r.uniform1iv(P, a._array);k = 0;for (n = a.value.length; k < n; k++) {
	              c = a.value[k], m = a._array[k], c && (c instanceof THREE.CubeTexture || c.image instanceof Array && 6 === c.image.length ? z(c, m) : c instanceof THREE.WebGLRenderTarget ? aa.setTexture(c.texture, m) : c instanceof THREE.WebGLRenderTargetCube ? A(c.texture, m) : aa.setTexture(c, m));
	            }break;default:
	            console.warn("THREE.WebGLRenderer: Unknown uniform type: " + k);}
	      }
	    }r.uniformMatrix4fv(p.modelViewMatrix, !1, e.modelViewMatrix.elements);p.normalMatrix && r.uniformMatrix3fv(p.normalMatrix, !1, e.normalMatrix.elements);void 0 !== p.modelMatrix && r.uniformMatrix4fv(p.modelMatrix, !1, e.matrixWorld.elements);
	    return g;
	  }function u(a, b) {
	    a.ambientLightColor.needsUpdate = b;a.directionalLightColor.needsUpdate = b;a.directionalLightDirection.needsUpdate = b;a.pointLightColor.needsUpdate = b;a.pointLightPosition.needsUpdate = b;a.pointLightDistance.needsUpdate = b;a.pointLightDecay.needsUpdate = b;a.spotLightColor.needsUpdate = b;a.spotLightPosition.needsUpdate = b;a.spotLightDistance.needsUpdate = b;a.spotLightDirection.needsUpdate = b;a.spotLightAngleCos.needsUpdate = b;a.spotLightExponent.needsUpdate = b;a.spotLightDecay.needsUpdate = b;a.hemisphereLightSkyColor.needsUpdate = b;a.hemisphereLightGroundColor.needsUpdate = b;a.hemisphereLightDirection.needsUpdate = b;
	  }function w() {
	    var a = ya;a >= ha.maxTextures && console.warn("WebGLRenderer: trying to use " + a + " texture units while this GPU supports only " + ha.maxTextures);ya += 1;return a;
	  }function D(a, b, c, d) {
	    a[b + 0] = c.r * d;a[b + 1] = c.g * d;a[b + 2] = c.b * d;
	  }function x(a, b, c) {
	    c ? (r.texParameteri(a, r.TEXTURE_WRAP_S, N(b.wrapS)), r.texParameteri(a, r.TEXTURE_WRAP_T, N(b.wrapT)), r.texParameteri(a, r.TEXTURE_MAG_FILTER, N(b.magFilter)), r.texParameteri(a, r.TEXTURE_MIN_FILTER, N(b.minFilter))) : (r.texParameteri(a, r.TEXTURE_WRAP_S, r.CLAMP_TO_EDGE), r.texParameteri(a, r.TEXTURE_WRAP_T, r.CLAMP_TO_EDGE), b.wrapS === THREE.ClampToEdgeWrapping && b.wrapT === THREE.ClampToEdgeWrapping || console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.", b), r.texParameteri(a, r.TEXTURE_MAG_FILTER, C(b.magFilter)), r.texParameteri(a, r.TEXTURE_MIN_FILTER, C(b.minFilter)), b.minFilter !== THREE.NearestFilter && b.minFilter !== THREE.LinearFilter && console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.", b));!(c = S.get("EXT_texture_filter_anisotropic")) || b.type === THREE.FloatType && null === S.get("OES_texture_float_linear") || b.type === THREE.HalfFloatType && null === S.get("OES_texture_half_float_linear") || !(1 < b.anisotropy || W.get(b).__currentAnisotropy) || (r.texParameterf(a, c.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(b.anisotropy, aa.getMaxAnisotropy())), W.get(b).__currentAnisotropy = b.anisotropy);
	  }function B(a, b) {
	    if (a.width > b || a.height > b) {
	      var c = b / Math.max(a.width, a.height),
	          d = document.createElement("canvas");d.width = Math.floor(a.width * c);d.height = Math.floor(a.height * c);d.getContext("2d").drawImage(a, 0, 0, a.width, a.height, 0, 0, d.width, d.height);console.warn("THREE.WebGLRenderer: image is too big (" + a.width + "x" + a.height + "). Resized to " + d.width + "x" + d.height, a);return d;
	    }return a;
	  }function y(a) {
	    return THREE.Math.isPowerOfTwo(a.width) && THREE.Math.isPowerOfTwo(a.height);
	  }function z(a, b) {
	    var c = W.get(a);if (6 === a.image.length) if (0 < a.version && c.__version !== a.version) {
	      c.__image__webglTextureCube || (a.addEventListener("dispose", g), c.__image__webglTextureCube = r.createTexture(), la.textures++);I.activeTexture(r.TEXTURE0 + b);I.bindTexture(r.TEXTURE_CUBE_MAP, c.__image__webglTextureCube);r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL, a.flipY);for (var d = a instanceof THREE.CompressedTexture, e = a.image[0] instanceof THREE.DataTexture, f = [], h = 0; 6 > h; h++) {
	        f[h] = !aa.autoScaleCubemaps || d || e ? e ? a.image[h].image : a.image[h] : B(a.image[h], ha.maxCubemapSize);
	      }var k = y(f[0]),
	          l = N(a.format),
	          n = N(a.type);x(r.TEXTURE_CUBE_MAP, a, k);for (h = 0; 6 > h; h++) {
	        if (d) for (var m, q = f[h].mipmaps, p = 0, s = q.length; p < s; p++) {
	          m = q[p], a.format !== THREE.RGBAFormat && a.format !== THREE.RGBFormat ? -1 < I.getCompressedTextureFormats().indexOf(l) ? I.compressedTexImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + h, p, l, m.width, m.height, 0, m.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setCubeTexture()") : I.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + h, p, l, m.width, m.height, 0, l, n, m.data);
	        } else e ? I.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + h, 0, l, f[h].width, f[h].height, 0, l, n, f[h].data) : I.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + h, 0, l, l, n, f[h]);
	      }a.generateMipmaps && k && r.generateMipmap(r.TEXTURE_CUBE_MAP);c.__version = a.version;if (a.onUpdate) a.onUpdate(a);
	    } else I.activeTexture(r.TEXTURE0 + b), I.bindTexture(r.TEXTURE_CUBE_MAP, c.__image__webglTextureCube);
	  }function A(a, b) {
	    I.activeTexture(r.TEXTURE0 + b);I.bindTexture(r.TEXTURE_CUBE_MAP, W.get(a).__webglTexture);
	  }function J(a, b, c) {
	    r.bindFramebuffer(r.FRAMEBUFFER, a);r.framebufferTexture2D(r.FRAMEBUFFER, r.COLOR_ATTACHMENT0, c, W.get(b.texture).__webglTexture, 0);
	  }function F(a, b) {
	    r.bindRenderbuffer(r.RENDERBUFFER, a);b.depthBuffer && !b.stencilBuffer ? (r.renderbufferStorage(r.RENDERBUFFER, r.DEPTH_COMPONENT16, b.width, b.height), r.framebufferRenderbuffer(r.FRAMEBUFFER, r.DEPTH_ATTACHMENT, r.RENDERBUFFER, a)) : b.depthBuffer && b.stencilBuffer ? (r.renderbufferStorage(r.RENDERBUFFER, r.DEPTH_STENCIL, b.width, b.height), r.framebufferRenderbuffer(r.FRAMEBUFFER, r.DEPTH_STENCIL_ATTACHMENT, r.RENDERBUFFER, a)) : r.renderbufferStorage(r.RENDERBUFFER, r.RGBA4, b.width, b.height);
	  }function C(a) {
	    return a === THREE.NearestFilter || a === THREE.NearestMipMapNearestFilter || a === THREE.NearestMipMapLinearFilter ? r.NEAREST : r.LINEAR;
	  }function N(a) {
	    var b;if (a === THREE.RepeatWrapping) return r.REPEAT;if (a === THREE.ClampToEdgeWrapping) return r.CLAMP_TO_EDGE;if (a === THREE.MirroredRepeatWrapping) return r.MIRRORED_REPEAT;if (a === THREE.NearestFilter) return r.NEAREST;
	    if (a === THREE.NearestMipMapNearestFilter) return r.NEAREST_MIPMAP_NEAREST;if (a === THREE.NearestMipMapLinearFilter) return r.NEAREST_MIPMAP_LINEAR;if (a === THREE.LinearFilter) return r.LINEAR;if (a === THREE.LinearMipMapNearestFilter) return r.LINEAR_MIPMAP_NEAREST;if (a === THREE.LinearMipMapLinearFilter) return r.LINEAR_MIPMAP_LINEAR;if (a === THREE.UnsignedByteType) return r.UNSIGNED_BYTE;if (a === THREE.UnsignedShort4444Type) return r.UNSIGNED_SHORT_4_4_4_4;if (a === THREE.UnsignedShort5551Type) return r.UNSIGNED_SHORT_5_5_5_1;
	    if (a === THREE.UnsignedShort565Type) return r.UNSIGNED_SHORT_5_6_5;if (a === THREE.ByteType) return r.BYTE;if (a === THREE.ShortType) return r.SHORT;if (a === THREE.UnsignedShortType) return r.UNSIGNED_SHORT;if (a === THREE.IntType) return r.INT;if (a === THREE.UnsignedIntType) return r.UNSIGNED_INT;if (a === THREE.FloatType) return r.FLOAT;b = S.get("OES_texture_half_float");if (null !== b && a === THREE.HalfFloatType) return b.HALF_FLOAT_OES;if (a === THREE.AlphaFormat) return r.ALPHA;if (a === THREE.RGBFormat) return r.RGB;if (a === THREE.RGBAFormat) return r.RGBA;
	    if (a === THREE.LuminanceFormat) return r.LUMINANCE;if (a === THREE.LuminanceAlphaFormat) return r.LUMINANCE_ALPHA;if (a === THREE.AddEquation) return r.FUNC_ADD;if (a === THREE.SubtractEquation) return r.FUNC_SUBTRACT;if (a === THREE.ReverseSubtractEquation) return r.FUNC_REVERSE_SUBTRACT;if (a === THREE.ZeroFactor) return r.ZERO;if (a === THREE.OneFactor) return r.ONE;if (a === THREE.SrcColorFactor) return r.SRC_COLOR;if (a === THREE.OneMinusSrcColorFactor) return r.ONE_MINUS_SRC_COLOR;if (a === THREE.SrcAlphaFactor) return r.SRC_ALPHA;
	    if (a === THREE.OneMinusSrcAlphaFactor) return r.ONE_MINUS_SRC_ALPHA;if (a === THREE.DstAlphaFactor) return r.DST_ALPHA;if (a === THREE.OneMinusDstAlphaFactor) return r.ONE_MINUS_DST_ALPHA;if (a === THREE.DstColorFactor) return r.DST_COLOR;if (a === THREE.OneMinusDstColorFactor) return r.ONE_MINUS_DST_COLOR;if (a === THREE.SrcAlphaSaturateFactor) return r.SRC_ALPHA_SATURATE;b = S.get("WEBGL_compressed_texture_s3tc");if (null !== b) {
	      if (a === THREE.RGB_S3TC_DXT1_Format) return b.COMPRESSED_RGB_S3TC_DXT1_EXT;if (a === THREE.RGBA_S3TC_DXT1_Format) return b.COMPRESSED_RGBA_S3TC_DXT1_EXT;
	      if (a === THREE.RGBA_S3TC_DXT3_Format) return b.COMPRESSED_RGBA_S3TC_DXT3_EXT;if (a === THREE.RGBA_S3TC_DXT5_Format) return b.COMPRESSED_RGBA_S3TC_DXT5_EXT;
	    }b = S.get("WEBGL_compressed_texture_pvrtc");if (null !== b) {
	      if (a === THREE.RGB_PVRTC_4BPPV1_Format) return b.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if (a === THREE.RGB_PVRTC_2BPPV1_Format) return b.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if (a === THREE.RGBA_PVRTC_4BPPV1_Format) return b.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if (a === THREE.RGBA_PVRTC_2BPPV1_Format) return b.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
	    }b = S.get("EXT_blend_minmax");if (null !== b) {
	      if (a === THREE.MinEquation) return b.MIN_EXT;if (a === THREE.MaxEquation) return b.MAX_EXT;
	    }return 0;
	  }console.log("THREE.WebGLRenderer", THREE.REVISION);a = a || {};var L = void 0 !== a.canvas ? a.canvas : document.createElement("canvas"),
	      Q = void 0 !== a.context ? a.context : null,
	      M = L.width,
	      K = L.height,
	      E = 1,
	      O = void 0 !== a.alpha ? a.alpha : !1,
	      T = void 0 !== a.depth ? a.depth : !0,
	      H = void 0 !== a.stencil ? a.stencil : !0,
	      R = void 0 !== a.antialias ? a.antialias : !1,
	      G = void 0 !== a.premultipliedAlpha ? a.premultipliedAlpha : !0,
	      ia = void 0 !== a.preserveDrawingBuffer ? a.preserveDrawingBuffer : !1,
	      U = new THREE.Color(0),
	      X = 0,
	      da = [],
	      ca = [],
	      ga = -1,
	      Z = [],
	      fa = -1,
	      ma = new Float32Array(8),
	      ea = [],
	      ja = [];this.domElement = L;this.context = null;this.sortObjects = this.autoClearStencil = this.autoClearDepth = this.autoClearColor = this.autoClear = !0;this.gammaFactor = 2;this.gammaOutput = this.gammaInput = !1;this.maxMorphTargets = 8;this.maxMorphNormals = 4;this.autoScaleCubemaps = !0;var aa = this,
	      Aa = null,
	      za = null,
	      ta = -1,
	      sa = "",
	      ra = null,
	      ya = 0,
	      na = 0,
	      oa = 0,
	      pa = L.width,
	      qa = L.height,
	      Da = 0,
	      Ea = 0,
	      Ba = new THREE.Frustum(),
	      xa = new THREE.Matrix4(),
	      V = new THREE.Vector3(),
	      Y = new THREE.Vector3(),
	      wa = !0,
	      Ca = { ambient: [0, 0, 0], directional: { length: 0, colors: [], positions: [] }, point: { length: 0, colors: [], positions: [], distances: [], decays: [] }, spot: { length: 0, colors: [], positions: [], distances: [], directions: [], anglesCos: [], exponents: [], decays: [] }, hemi: { length: 0, skyColors: [], groundColors: [], positions: [] } },
	      la = { geometries: 0, textures: 0 },
	      ka = { calls: 0, vertices: 0, faces: 0, points: 0 };this.info = { render: ka, memory: la, programs: null };
	  var r;try {
	    O = { alpha: O, depth: T, stencil: H, antialias: R, premultipliedAlpha: G, preserveDrawingBuffer: ia };r = Q || L.getContext("webgl", O) || L.getContext("experimental-webgl", O);if (null === r) {
	      if (null !== L.getContext("webgl")) throw "Error creating WebGL context with your selected attributes.";throw "Error creating WebGL context.";
	    }L.addEventListener("webglcontextlost", e, !1);
	  } catch (Fa) {
	    console.error("THREE.WebGLRenderer: " + Fa);
	  }var S = new THREE.WebGLExtensions(r);S.get("OES_texture_float");S.get("OES_texture_float_linear");
	  S.get("OES_texture_half_float");S.get("OES_texture_half_float_linear");S.get("OES_standard_derivatives");S.get("ANGLE_instanced_arrays");S.get("OES_element_index_uint") && (THREE.BufferGeometry.MaxIndex = 4294967296);var ha = new THREE.WebGLCapabilities(r, S, a),
	      I = new THREE.WebGLState(r, S, N),
	      W = new THREE.WebGLProperties(),
	      va = new THREE.WebGLObjects(r, W, this.info),
	      ua = new THREE.WebGLPrograms(this, ha);this.info.programs = ua.programs;var Ga = new THREE.WebGLBufferRenderer(r, S, ka),
	      Ha = new THREE.WebGLIndexedBufferRenderer(r, S, ka);c();this.context = r;this.capabilities = ha;this.extensions = S;this.state = I;var $ = new THREE.WebGLShadowMap(this, da, va);this.shadowMap = $;var Ia = new THREE.SpritePlugin(this, ea),
	      Ja = new THREE.LensFlarePlugin(this, ja);this.getContext = function () {
	    return r;
	  };this.getContextAttributes = function () {
	    return r.getContextAttributes();
	  };this.forceContextLoss = function () {
	    S.get("WEBGL_lose_context").loseContext();
	  };this.getMaxAnisotropy = function () {
	    var a;return function () {
	      if (void 0 !== a) return a;var b = S.get("EXT_texture_filter_anisotropic");
	      return a = null !== b ? r.getParameter(b.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 0;
	    };
	  }();this.getPrecision = function () {
	    return ha.precision;
	  };this.getPixelRatio = function () {
	    return E;
	  };this.setPixelRatio = function (a) {
	    void 0 !== a && (E = a);
	  };this.getSize = function () {
	    return { width: M, height: K };
	  };this.setSize = function (a, b, c) {
	    M = a;K = b;L.width = a * E;L.height = b * E;!1 !== c && (L.style.width = a + "px", L.style.height = b + "px");this.setViewport(0, 0, a, b);
	  };this.setViewport = function (a, b, c, d) {
	    na = a * E;oa = b * E;pa = c * E;qa = d * E;r.viewport(na, oa, pa, qa);
	  };this.getViewport = function (a) {
	    a.x = na / E;a.y = oa / E;a.z = pa / E;a.w = qa / E;
	  };this.setScissor = function (a, b, c, d) {
	    r.scissor(a * E, b * E, c * E, d * E);
	  };this.enableScissorTest = function (a) {
	    I.setScissorTest(a);
	  };this.getClearColor = function () {
	    return U;
	  };this.setClearColor = function (a, c) {
	    U.set(a);X = void 0 !== c ? c : 1;b(U.r, U.g, U.b, X);
	  };this.getClearAlpha = function () {
	    return X;
	  };this.setClearAlpha = function (a) {
	    X = a;b(U.r, U.g, U.b, X);
	  };this.clear = function (a, b, c) {
	    var d = 0;if (void 0 === a || a) d |= r.COLOR_BUFFER_BIT;if (void 0 === b || b) d |= r.DEPTH_BUFFER_BIT;if (void 0 === c || c) d |= r.STENCIL_BUFFER_BIT;r.clear(d);
	  };this.clearColor = function () {
	    r.clear(r.COLOR_BUFFER_BIT);
	  };this.clearDepth = function () {
	    r.clear(r.DEPTH_BUFFER_BIT);
	  };this.clearStencil = function () {
	    r.clear(r.STENCIL_BUFFER_BIT);
	  };this.clearTarget = function (a, b, c, d) {
	    this.setRenderTarget(a);this.clear(b, c, d);
	  };this.resetGLState = d;this.dispose = function () {
	    L.removeEventListener("webglcontextlost", e, !1);
	  };this.renderBufferImmediate = function (a, b, c) {
	    I.initAttributes();var d = W.get(a);a.hasPositions && !d.position && (d.position = r.createBuffer());a.hasNormals && !d.normal && (d.normal = r.createBuffer());a.hasUvs && !d.uv && (d.uv = r.createBuffer());a.hasColors && !d.color && (d.color = r.createBuffer());b = b.getAttributes();a.hasPositions && (r.bindBuffer(r.ARRAY_BUFFER, d.position), r.bufferData(r.ARRAY_BUFFER, a.positionArray, r.DYNAMIC_DRAW), I.enableAttribute(b.position), r.vertexAttribPointer(b.position, 3, r.FLOAT, !1, 0, 0));if (a.hasNormals) {
	      r.bindBuffer(r.ARRAY_BUFFER, d.normal);if ("MeshPhongMaterial" !== c.type && c.shading === THREE.FlatShading) for (var e = 0, f = 3 * a.count; e < f; e += 9) {
	        var g = a.normalArray,
	            h = (g[e + 0] + g[e + 3] + g[e + 6]) / 3,
	            k = (g[e + 1] + g[e + 4] + g[e + 7]) / 3,
	            l = (g[e + 2] + g[e + 5] + g[e + 8]) / 3;g[e + 0] = h;g[e + 1] = k;g[e + 2] = l;g[e + 3] = h;g[e + 4] = k;g[e + 5] = l;g[e + 6] = h;g[e + 7] = k;g[e + 8] = l;
	      }r.bufferData(r.ARRAY_BUFFER, a.normalArray, r.DYNAMIC_DRAW);I.enableAttribute(b.normal);r.vertexAttribPointer(b.normal, 3, r.FLOAT, !1, 0, 0);
	    }a.hasUvs && c.map && (r.bindBuffer(r.ARRAY_BUFFER, d.uv), r.bufferData(r.ARRAY_BUFFER, a.uvArray, r.DYNAMIC_DRAW), I.enableAttribute(b.uv), r.vertexAttribPointer(b.uv, 2, r.FLOAT, !1, 0, 0));a.hasColors && c.vertexColors !== THREE.NoColors && (r.bindBuffer(r.ARRAY_BUFFER, d.color), r.bufferData(r.ARRAY_BUFFER, a.colorArray, r.DYNAMIC_DRAW), I.enableAttribute(b.color), r.vertexAttribPointer(b.color, 3, r.FLOAT, !1, 0, 0));I.disableUnusedAttributes();r.drawArrays(r.TRIANGLES, 0, a.count);a.count = 0;
	  };this.renderBufferDirect = function (a, b, c, d, e, f, g) {
	    t(e);var h = v(a, b, c, e, f),
	        l = !1;a = d.id + "_" + h.id + "_" + e.wireframe;a !== sa && (sa = a, l = !0);b = f.morphTargetInfluences;if (void 0 !== b) {
	      a = [];c = 0;for (l = b.length; c < l; c++) {
	        var n = b[c];a.push([n, c]);
	      }a.sort(k);8 < a.length && (a.length = 8);var m = d.morphAttributes;c = 0;for (l = a.length; c < l; c++) {
	        n = a[c], ma[c] = n[0], 0 !== n[0] ? (b = n[1], !0 === e.morphTargets && m.position && d.addAttribute("morphTarget" + c, m.position[b]), !0 === e.morphNormals && m.normal && d.addAttribute("morphNormal" + c, m.normal[b])) : (!0 === e.morphTargets && d.removeAttribute("morphTarget" + c), !0 === e.morphNormals && d.removeAttribute("morphNormal" + c));
	      }a = h.getUniforms();null !== a.morphTargetInfluences && r.uniform1fv(a.morphTargetInfluences, ma);l = !0;
	    }b = d.index;c = d.attributes.position;!0 === e.wireframe && (b = va.getWireframeAttribute(d));null !== b ? (a = Ha, a.setIndex(b)) : a = Ga;if (l) {
	      a: {
	        var l = void 0,
	            q;if (d instanceof THREE.InstancedBufferGeometry && (q = S.get("ANGLE_instanced_arrays"), null === q)) {
	          console.error("THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");break a;
	        }void 0 === l && (l = 0);I.initAttributes();var n = d.attributes,
	            h = h.getAttributes(),
	            m = e.defaultAttributeValues,
	            p;for (p in h) {
	          var s = h[p];if (0 <= s) {
	            var u = n[p];if (void 0 !== u) {
	              var w = u.itemSize,
	                  x = va.getAttributeBuffer(u);if (u instanceof THREE.InterleavedBufferAttribute) {
	                var F = u.data,
	                    D = F.stride,
	                    u = u.offset;F instanceof THREE.InstancedInterleavedBuffer ? (I.enableAttributeAndDivisor(s, F.meshPerAttribute, q), void 0 === d.maxInstancedCount && (d.maxInstancedCount = F.meshPerAttribute * F.count)) : I.enableAttribute(s);r.bindBuffer(r.ARRAY_BUFFER, x);r.vertexAttribPointer(s, w, r.FLOAT, !1, D * F.array.BYTES_PER_ELEMENT, (l * D + u) * F.array.BYTES_PER_ELEMENT);
	              } else u instanceof THREE.InstancedBufferAttribute ? (I.enableAttributeAndDivisor(s, u.meshPerAttribute, q), void 0 === d.maxInstancedCount && (d.maxInstancedCount = u.meshPerAttribute * u.count)) : I.enableAttribute(s), r.bindBuffer(r.ARRAY_BUFFER, x), r.vertexAttribPointer(s, w, r.FLOAT, !1, 0, l * w * 4);
	            } else if (void 0 !== m && (w = m[p], void 0 !== w)) switch (w.length) {case 2:
	                r.vertexAttrib2fv(s, w);break;case 3:
	                r.vertexAttrib3fv(s, w);break;case 4:
	                r.vertexAttrib4fv(s, w);break;default:
	                r.vertexAttrib1fv(s, w);}
	          }
	        }I.disableUnusedAttributes();
	      }null !== b && r.bindBuffer(r.ELEMENT_ARRAY_BUFFER, va.getAttributeBuffer(b));
	    }q = Infinity;null !== b ? q = b.count : void 0 !== c && (q = c.count);p = d.drawRange.start;b = d.drawRange.count;c = null !== g ? g.start : 0;l = null !== g ? g.count : Infinity;g = Math.max(0, p, c);q = Math.min(0 + q, p + b, c + l) - 1;q = Math.max(0, q - g + 1);f instanceof THREE.Mesh ? (!0 === e.wireframe ? (I.setLineWidth(e.wireframeLinewidth * E), a.setMode(r.LINES)) : a.setMode(r.TRIANGLES), d instanceof THREE.InstancedBufferGeometry && 0 < d.maxInstancedCount ? a.renderInstances(d) : a.render(g, q)) : f instanceof THREE.Line ? (d = e.linewidth, void 0 === d && (d = 1), I.setLineWidth(d * E), f instanceof THREE.LineSegments ? a.setMode(r.LINES) : a.setMode(r.LINE_STRIP), a.render(g, q)) : f instanceof THREE.Points && (a.setMode(r.POINTS), a.render(g, q));
	  };this.render = function (a, b, c, d) {
	    if (!1 === b instanceof THREE.Camera) console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");else {
	      var e = a.fog;sa = "";ta = -1;ra = null;wa = !0;!0 === a.autoUpdate && a.updateMatrixWorld();null === b.parent && b.updateMatrixWorld();b.matrixWorldInverse.getInverse(b.matrixWorld);
	      xa.multiplyMatrices(b.projectionMatrix, b.matrixWorldInverse);Ba.setFromMatrix(xa);da.length = 0;fa = ga = -1;ea.length = 0;ja.length = 0;q(a, b);ca.length = ga + 1;Z.length = fa + 1;!0 === aa.sortObjects && (ca.sort(m), Z.sort(p));$.render(a);ka.calls = 0;ka.vertices = 0;ka.faces = 0;ka.points = 0;this.setRenderTarget(c);(this.autoClear || d) && this.clear(this.autoClearColor, this.autoClearDepth, this.autoClearStencil);a.overrideMaterial ? (d = a.overrideMaterial, s(ca, b, da, e, d), s(Z, b, da, e, d)) : (I.setBlending(THREE.NoBlending), s(ca, b, da, e), s(Z, b, da, e));Ia.render(a, b);Ja.render(a, b, Da, Ea);c && (a = c.texture, b = y(c), a.generateMipmaps && b && a.minFilter !== THREE.NearestFilter && a.minFilter !== THREE.LinearFilter && (a = c instanceof THREE.WebGLRenderTargetCube ? r.TEXTURE_CUBE_MAP : r.TEXTURE_2D, c = W.get(c.texture).__webglTexture, I.bindTexture(a, c), r.generateMipmap(a), I.bindTexture(a, null)));I.setDepthTest(!0);I.setDepthWrite(!0);I.setColorWrite(!0);
	    }
	  };this.setFaceCulling = function (a, b) {
	    a === THREE.CullFaceNone ? I.disable(r.CULL_FACE) : (b === THREE.FrontFaceDirectionCW ? r.frontFace(r.CW) : r.frontFace(r.CCW), a === THREE.CullFaceBack ? r.cullFace(r.BACK) : a === THREE.CullFaceFront ? r.cullFace(r.FRONT) : r.cullFace(r.FRONT_AND_BACK), I.enable(r.CULL_FACE));
	  };this.setTexture = function (a, b) {
	    var c = W.get(a);if (0 < a.version && c.__version !== a.version) {
	      var d = a.image;if (void 0 === d) console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined", a);else if (!1 === d.complete) console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete", a);else {
	        void 0 === c.__webglInit && (c.__webglInit = !0, a.addEventListener("dispose", g), c.__webglTexture = r.createTexture(), la.textures++);I.activeTexture(r.TEXTURE0 + b);I.bindTexture(r.TEXTURE_2D, c.__webglTexture);r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL, a.flipY);r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL, a.premultiplyAlpha);r.pixelStorei(r.UNPACK_ALIGNMENT, a.unpackAlignment);a.image = B(a.image, ha.maxTextureSize);if ((a.wrapS !== THREE.ClampToEdgeWrapping || a.wrapT !== THREE.ClampToEdgeWrapping || a.minFilter !== THREE.NearestFilter && a.minFilter !== THREE.LinearFilter) && !1 === y(a.image)) {
	          d = a.image;if (d instanceof HTMLImageElement || d instanceof HTMLCanvasElement) {
	            var e = document.createElement("canvas");e.width = THREE.Math.nearestPowerOfTwo(d.width);e.height = THREE.Math.nearestPowerOfTwo(d.height);e.getContext("2d").drawImage(d, 0, 0, e.width, e.height);console.warn("THREE.WebGLRenderer: image is not power of two (" + d.width + "x" + d.height + "). Resized to " + e.width + "x" + e.height, d);d = e;
	          }a.image = d;
	        }var f = a.image,
	            d = y(f),
	            e = N(a.format),
	            h = N(a.type);
	        x(r.TEXTURE_2D, a, d);var k = a.mipmaps;if (a instanceof THREE.DataTexture) {
	          if (0 < k.length && d) {
	            for (var l = 0, n = k.length; l < n; l++) {
	              f = k[l], I.texImage2D(r.TEXTURE_2D, l, e, f.width, f.height, 0, e, h, f.data);
	            }a.generateMipmaps = !1;
	          } else I.texImage2D(r.TEXTURE_2D, 0, e, f.width, f.height, 0, e, h, f.data);
	        } else if (a instanceof THREE.CompressedTexture) for (l = 0, n = k.length; l < n; l++) {
	          f = k[l], a.format !== THREE.RGBAFormat && a.format !== THREE.RGBFormat ? -1 < I.getCompressedTextureFormats().indexOf(e) ? I.compressedTexImage2D(r.TEXTURE_2D, l, e, f.width, f.height, 0, f.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()") : I.texImage2D(r.TEXTURE_2D, l, e, f.width, f.height, 0, e, h, f.data);
	        } else if (0 < k.length && d) {
	          l = 0;for (n = k.length; l < n; l++) {
	            f = k[l], I.texImage2D(r.TEXTURE_2D, l, e, e, h, f);
	          }a.generateMipmaps = !1;
	        } else I.texImage2D(r.TEXTURE_2D, 0, e, e, h, a.image);a.generateMipmaps && d && r.generateMipmap(r.TEXTURE_2D);c.__version = a.version;if (a.onUpdate) a.onUpdate(a);
	      }
	    } else I.activeTexture(r.TEXTURE0 + b), I.bindTexture(r.TEXTURE_2D, c.__webglTexture);
	  };this.setRenderTarget = function (a) {
	    var b = a instanceof THREE.WebGLRenderTargetCube;if (a && void 0 === W.get(a).__webglFramebuffer) {
	      var c = W.get(a),
	          d = W.get(a.texture);void 0 === a.depthBuffer && (a.depthBuffer = !0);void 0 === a.stencilBuffer && (a.stencilBuffer = !0);a.addEventListener("dispose", f);d.__webglTexture = r.createTexture();la.textures++;var e = y(a),
	          g = N(a.texture.format),
	          h = N(a.texture.type);if (b) {
	        c.__webglFramebuffer = [];c.__webglRenderbuffer = [];I.bindTexture(r.TEXTURE_CUBE_MAP, d.__webglTexture);
	        x(r.TEXTURE_CUBE_MAP, a.texture, e);for (d = 0; 6 > d; d++) {
	          c.__webglFramebuffer[d] = r.createFramebuffer(), c.__webglRenderbuffer[d] = r.createRenderbuffer(), I.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + d, 0, g, a.width, a.height, 0, g, h, null), J(c.__webglFramebuffer[d], a, r.TEXTURE_CUBE_MAP_POSITIVE_X + d), F(c.__webglRenderbuffer[d], a);
	        }a.texture.generateMipmaps && e && r.generateMipmap(r.TEXTURE_CUBE_MAP);
	      } else c.__webglFramebuffer = r.createFramebuffer(), c.__webglRenderbuffer = a.shareDepthFrom ? a.shareDepthFrom.__webglRenderbuffer : r.createRenderbuffer(), I.bindTexture(r.TEXTURE_2D, d.__webglTexture), x(r.TEXTURE_2D, a.texture, e), I.texImage2D(r.TEXTURE_2D, 0, g, a.width, a.height, 0, g, h, null), J(c.__webglFramebuffer, a, r.TEXTURE_2D), a.shareDepthFrom ? a.depthBuffer && !a.stencilBuffer ? r.framebufferRenderbuffer(r.FRAMEBUFFER, r.DEPTH_ATTACHMENT, r.RENDERBUFFER, c.__webglRenderbuffer) : a.depthBuffer && a.stencilBuffer && r.framebufferRenderbuffer(r.FRAMEBUFFER, r.DEPTH_STENCIL_ATTACHMENT, r.RENDERBUFFER, c.__webglRenderbuffer) : F(c.__webglRenderbuffer, a), a.texture.generateMipmaps && e && r.generateMipmap(r.TEXTURE_2D);b ? I.bindTexture(r.TEXTURE_CUBE_MAP, null) : I.bindTexture(r.TEXTURE_2D, null);r.bindRenderbuffer(r.RENDERBUFFER, null);r.bindFramebuffer(r.FRAMEBUFFER, null);
	    }a ? (c = W.get(a), d = b ? c.__webglFramebuffer[a.activeCubeFace] : c.__webglFramebuffer, c = a.width, e = a.height, h = g = 0) : (d = null, c = pa, e = qa, g = na, h = oa);d !== za && (r.bindFramebuffer(r.FRAMEBUFFER, d), r.viewport(g, h, c, e), za = d);b && (d = W.get(a.texture), r.framebufferTexture2D(r.FRAMEBUFFER, r.COLOR_ATTACHMENT0, r.TEXTURE_CUBE_MAP_POSITIVE_X + a.activeCubeFace, d.__webglTexture, 0));Da = c;Ea = e;
	  };this.readRenderTargetPixels = function (a, b, c, d, e, f) {
	    if (!1 === a instanceof THREE.WebGLRenderTarget) console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");else {
	      var g = W.get(a).__webglFramebuffer;if (g) {
	        var h = !1;g !== za && (r.bindFramebuffer(r.FRAMEBUFFER, g), h = !0);try {
	          var k = a.texture;k.format !== THREE.RGBAFormat && N(k.format) !== r.getParameter(r.IMPLEMENTATION_COLOR_READ_FORMAT) ? console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.") : k.type === THREE.UnsignedByteType || N(k.type) === r.getParameter(r.IMPLEMENTATION_COLOR_READ_TYPE) || k.type === THREE.FloatType && S.get("WEBGL_color_buffer_float") || k.type === THREE.HalfFloatType && S.get("EXT_color_buffer_half_float") ? r.checkFramebufferStatus(r.FRAMEBUFFER) === r.FRAMEBUFFER_COMPLETE ? r.readPixels(b, c, d, e, N(k.format), N(k.type), f) : console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.") : console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
	        } finally {
	          h && r.bindFramebuffer(r.FRAMEBUFFER, za);
	        }
	      }
	    }
	  };this.supportsFloatTextures = function () {
	    console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' ).");return S.get("OES_texture_float");
	  };this.supportsHalfFloatTextures = function () {
	    console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' ).");return S.get("OES_texture_half_float");
	  };this.supportsStandardDerivatives = function () {
	    console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' ).");
	    return S.get("OES_standard_derivatives");
	  };this.supportsCompressedTextureS3TC = function () {
	    console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' ).");return S.get("WEBGL_compressed_texture_s3tc");
	  };this.supportsCompressedTexturePVRTC = function () {
	    console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' ).");return S.get("WEBGL_compressed_texture_pvrtc");
	  };this.supportsBlendMinMax = function () {
	    console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' ).");return S.get("EXT_blend_minmax");
	  };this.supportsVertexTextures = function () {
	    return ha.vertexTextures;
	  };this.supportsInstancedArrays = function () {
	    console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' ).");return S.get("ANGLE_instanced_arrays");
	  };this.initMaterial = function () {
	    console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.");
	  };
	  this.addPrePlugin = function () {
	    console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.");
	  };this.addPostPlugin = function () {
	    console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.");
	  };this.updateShadowMap = function () {
	    console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.");
	  };Object.defineProperties(this, { shadowMapEnabled: { get: function get() {
	        return $.enabled;
	      }, set: function set(a) {
	        console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.");$.enabled = a;
	      } },
	    shadowMapType: { get: function get() {
	        return $.type;
	      }, set: function set(a) {
	        console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.");$.type = a;
	      } }, shadowMapCullFace: { get: function get() {
	        return $.cullFace;
	      }, set: function set(a) {
	        console.warn("THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.");$.cullFace = a;
	      } }, shadowMapDebug: { get: function get() {
	        return $.debug;
	      }, set: function set(a) {
	        console.warn("THREE.WebGLRenderer: .shadowMapDebug is now .shadowMap.debug.");$.debug = a;
	      } } });
	};
	THREE.WebGLRenderTarget = function (a, b, c) {
	  this.uuid = THREE.Math.generateUUID();this.width = a;this.height = b;c = c || {};void 0 === c.minFilter && (c.minFilter = THREE.LinearFilter);this.texture = new THREE.Texture(void 0, void 0, c.wrapS, c.wrapT, c.magFilter, c.minFilter, c.format, c.type, c.anisotropy);this.depthBuffer = void 0 !== c.depthBuffer ? c.depthBuffer : !0;this.stencilBuffer = void 0 !== c.stencilBuffer ? c.stencilBuffer : !0;this.shareDepthFrom = void 0 !== c.shareDepthFrom ? c.shareDepthFrom : null;
	};
	THREE.WebGLRenderTarget.prototype = { constructor: THREE.WebGLRenderTarget, get wrapS() {
	    console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.");return this.texture.wrapS;
	  }, set wrapS(a) {
	    console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.");this.texture.wrapS = a;
	  }, get wrapT() {
	    console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.");return this.texture.wrapT;
	  }, set wrapT(a) {
	    console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.");this.texture.wrapT = a;
	  },
	  get magFilter() {
	    console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.");return this.texture.magFilter;
	  }, set magFilter(a) {
	    console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.");this.texture.magFilter = a;
	  }, get minFilter() {
	    console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.");return this.texture.minFilter;
	  }, set minFilter(a) {
	    console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.");this.texture.minFilter = a;
	  }, get anisotropy() {
	    console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.");
	    return this.texture.anisotropy;
	  }, set anisotropy(a) {
	    console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.");this.texture.anisotropy = a;
	  }, get offset() {
	    console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset.");return this.texture.offset;
	  }, set offset(a) {
	    console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset.");this.texture.offset = a;
	  }, get repeat() {
	    console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat.");return this.texture.repeat;
	  }, set repeat(a) {
	    console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat.");
	    this.texture.repeat = a;
	  }, get format() {
	    console.warn("THREE.WebGLRenderTarget: .format is now .texture.format.");return this.texture.format;
	  }, set format(a) {
	    console.warn("THREE.WebGLRenderTarget: .format is now .texture.format.");this.texture.format = a;
	  }, get type() {
	    console.warn("THREE.WebGLRenderTarget: .type is now .texture.type.");return this.texture.type;
	  }, set type(a) {
	    console.warn("THREE.WebGLRenderTarget: .type is now .texture.type.");this.texture.type = a;
	  }, get generateMipmaps() {
	    console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.");
	    return this.texture.generateMipmaps;
	  }, set generateMipmaps(a) {
	    console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.");this.texture.generateMipmaps = a;
	  }, setSize: function setSize(a, b) {
	    if (this.width !== a || this.height !== b) this.width = a, this.height = b, this.dispose();
	  }, clone: function clone() {
	    return new this.constructor().copy(this);
	  }, copy: function copy(a) {
	    this.width = a.width;this.height = a.height;this.texture = a.texture.clone();this.depthBuffer = a.depthBuffer;this.stencilBuffer = a.stencilBuffer;this.shareDepthFrom = a.shareDepthFrom;return this;
	  }, dispose: function dispose() {
	    this.dispatchEvent({ type: "dispose" });
	  } };THREE.EventDispatcher.prototype.apply(THREE.WebGLRenderTarget.prototype);THREE.WebGLRenderTargetCube = function (a, b, c) {
	  THREE.WebGLRenderTarget.call(this, a, b, c);this.activeCubeFace = 0;
	};THREE.WebGLRenderTargetCube.prototype = Object.create(THREE.WebGLRenderTarget.prototype);THREE.WebGLRenderTargetCube.prototype.constructor = THREE.WebGLRenderTargetCube;
	THREE.WebGLBufferRenderer = function (a, b, c) {
	  var d;this.setMode = function (a) {
	    d = a;
	  };this.render = function (b, g) {
	    a.drawArrays(d, b, g);c.calls++;c.vertices += g;d === a.TRIANGLES && (c.faces += g / 3);
	  };this.renderInstances = function (a) {
	    var c = b.get("ANGLE_instanced_arrays");if (null === c) console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");else {
	      var f = a.attributes.position;f instanceof THREE.InterleavedBufferAttribute ? c.drawArraysInstancedANGLE(d, 0, f.data.count, a.maxInstancedCount) : c.drawArraysInstancedANGLE(d, 0, f.count, a.maxInstancedCount);
	    }
	  };
	};
	THREE.WebGLIndexedBufferRenderer = function (a, b, c) {
	  var d, e, g;this.setMode = function (a) {
	    d = a;
	  };this.setIndex = function (c) {
	    c.array instanceof Uint32Array && b.get("OES_element_index_uint") ? (e = a.UNSIGNED_INT, g = 4) : (e = a.UNSIGNED_SHORT, g = 2);
	  };this.render = function (b, h) {
	    a.drawElements(d, h, e, b * g);c.calls++;c.vertices += h;d === a.TRIANGLES && (c.faces += h / 3);
	  };this.renderInstances = function (a) {
	    var c = b.get("ANGLE_instanced_arrays");null === c ? console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.") : c.drawElementsInstancedANGLE(d, a.index.array.length, e, 0, a.maxInstancedCount);
	  };
	};
	THREE.WebGLExtensions = function (a) {
	  var b = {};this.get = function (c) {
	    if (void 0 !== b[c]) return b[c];var d;switch (c) {case "EXT_texture_filter_anisotropic":
	        d = a.getExtension("EXT_texture_filter_anisotropic") || a.getExtension("MOZ_EXT_texture_filter_anisotropic") || a.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case "WEBGL_compressed_texture_s3tc":
	        d = a.getExtension("WEBGL_compressed_texture_s3tc") || a.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || a.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
	        break;case "WEBGL_compressed_texture_pvrtc":
	        d = a.getExtension("WEBGL_compressed_texture_pvrtc") || a.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:
	        d = a.getExtension(c);}null === d && console.warn("THREE.WebGLRenderer: " + c + " extension not supported.");return b[c] = d;
	  };
	};
	THREE.WebGLCapabilities = function (a, b, c) {
	  function d(b) {
	    if ("highp" === b) {
	      if (0 < a.getShaderPrecisionFormat(a.VERTEX_SHADER, a.HIGH_FLOAT).precision && 0 < a.getShaderPrecisionFormat(a.FRAGMENT_SHADER, a.HIGH_FLOAT).precision) return "highp";b = "mediump";
	    }return "mediump" === b && 0 < a.getShaderPrecisionFormat(a.VERTEX_SHADER, a.MEDIUM_FLOAT).precision && 0 < a.getShaderPrecisionFormat(a.FRAGMENT_SHADER, a.MEDIUM_FLOAT).precision ? "mediump" : "lowp";
	  }this.getMaxPrecision = d;this.precision = void 0 !== c.precision ? c.precision : "highp";
	  this.logarithmicDepthBuffer = void 0 !== c.logarithmicDepthBuffer ? c.logarithmicDepthBuffer : !1;this.maxTextures = a.getParameter(a.MAX_TEXTURE_IMAGE_UNITS);this.maxVertexTextures = a.getParameter(a.MAX_VERTEX_TEXTURE_IMAGE_UNITS);this.maxTextureSize = a.getParameter(a.MAX_TEXTURE_SIZE);this.maxCubemapSize = a.getParameter(a.MAX_CUBE_MAP_TEXTURE_SIZE);this.maxAttributes = a.getParameter(a.MAX_VERTEX_ATTRIBS);this.maxVertexUniforms = a.getParameter(a.MAX_VERTEX_UNIFORM_VECTORS);this.maxVaryings = a.getParameter(a.MAX_VARYING_VECTORS);
	  this.maxFragmentUniforms = a.getParameter(a.MAX_FRAGMENT_UNIFORM_VECTORS);this.vertexTextures = 0 < this.maxVertexTextures;this.floatFragmentTextures = !!b.get("OES_texture_float");this.floatVertexTextures = this.vertexTextures && this.floatFragmentTextures;c = d(this.precision);c !== this.precision && (console.warn("THREE.WebGLRenderer:", this.precision, "not supported, using", c, "instead."), this.precision = c);this.logarithmicDepthBuffer && (this.logarithmicDepthBuffer = !!b.get("EXT_frag_depth"));
	};
	THREE.WebGLGeometries = function (a, b, c) {
	  function d(a) {
	    a = a.target;var h = g[a.id].attributes,
	        l;for (l in h) {
	      e(h[l]);
	    }a.removeEventListener("dispose", d);delete g[a.id];l = b.get(a);l.wireframe && e(l.wireframe);c.memory.geometries--;
	  }function e(c) {
	    var d;d = c instanceof THREE.InterleavedBufferAttribute ? b.get(c.data).__webglBuffer : b.get(c).__webglBuffer;void 0 !== d && (a.deleteBuffer(d), c instanceof THREE.InterleavedBufferAttribute ? b.delete(c.data) : b.delete(c));
	  }var g = {};this.get = function (a) {
	    var b = a.geometry;if (void 0 !== g[b.id]) return g[b.id];b.addEventListener("dispose", d);var e;b instanceof THREE.BufferGeometry ? e = b : b instanceof THREE.Geometry && (void 0 === b._bufferGeometry && (b._bufferGeometry = new THREE.BufferGeometry().setFromObject(a)), e = b._bufferGeometry);g[b.id] = e;c.memory.geometries++;return e;
	  };
	};
	THREE.WebGLObjects = function (a, b, c) {
	  function d(c, d) {
	    var e = c instanceof THREE.InterleavedBufferAttribute ? c.data : c,
	        g = b.get(e);void 0 === g.__webglBuffer ? (g.__webglBuffer = a.createBuffer(), a.bindBuffer(d, g.__webglBuffer), a.bufferData(d, e.array, e.dynamic ? a.DYNAMIC_DRAW : a.STATIC_DRAW), g.version = e.version) : g.version !== e.version && (a.bindBuffer(d, g.__webglBuffer), !1 === e.dynamic || -1 === e.updateRange.count ? a.bufferSubData(d, 0, e.array) : 0 === e.updateRange.count ? console.error("THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.") : (a.bufferSubData(d, e.updateRange.offset * e.array.BYTES_PER_ELEMENT, e.array.subarray(e.updateRange.offset, e.updateRange.offset + e.updateRange.count)), e.updateRange.count = 0), g.version = e.version);
	  }function e(a, b, c) {
	    if (b > c) {
	      var d = b;b = c;c = d;
	    }d = a[b];return void 0 === d ? (a[b] = [c], !0) : -1 === d.indexOf(c) ? (d.push(c), !0) : !1;
	  }var g = new THREE.WebGLGeometries(a, b, c);this.getAttributeBuffer = function (a) {
	    return a instanceof THREE.InterleavedBufferAttribute ? b.get(a.data).__webglBuffer : b.get(a).__webglBuffer;
	  };this.getWireframeAttribute = function (c) {
	    var g = b.get(c);if (void 0 !== g.wireframe) return g.wireframe;var l = [],
	        k = c.index,
	        m = c.attributes;c = m.position;if (null !== k) for (var m = {}, k = k.array, p = 0, n = k.length; p < n; p += 3) {
	      var q = k[p + 0],
	          s = k[p + 1],
	          t = k[p + 2];e(m, q, s) && l.push(q, s);e(m, s, t) && l.push(s, t);e(m, t, q) && l.push(t, q);
	    } else for (k = m.position.array, p = 0, n = k.length / 3 - 1; p < n; p += 3) {
	      q = p + 0, s = p + 1, t = p + 2, l.push(q, s, s, t, t, q);
	    }l = new THREE.BufferAttribute(new (65535 < c.count ? Uint32Array : Uint16Array)(l), 1);d(l, a.ELEMENT_ARRAY_BUFFER);return g.wireframe = l;
	  };this.update = function (b) {
	    var c = g.get(b);b.geometry instanceof THREE.Geometry && c.updateFromObject(b);b = c.index;var e = c.attributes;null !== b && d(b, a.ELEMENT_ARRAY_BUFFER);for (var k in e) {
	      d(e[k], a.ARRAY_BUFFER);
	    }b = c.morphAttributes;for (k in b) {
	      for (var e = b[k], m = 0, p = e.length; m < p; m++) {
	        d(e[m], a.ARRAY_BUFFER);
	      }
	    }return c;
	  };
	};
	THREE.WebGLProgram = function () {
	  function a(a) {
	    var b = [],
	        c;for (c in a) {
	      var f = a[c];!1 !== f && b.push("#define " + c + " " + f);
	    }return b.join("\n");
	  }function b(a) {
	    return "" !== a;
	  }var c = 0;return function (d, e, g, f) {
	    var h = d.context,
	        l = g.defines,
	        k = g.__webglShader.vertexShader,
	        m = g.__webglShader.fragmentShader,
	        p = "SHADOWMAP_TYPE_BASIC";f.shadowMapType === THREE.PCFShadowMap ? p = "SHADOWMAP_TYPE_PCF" : f.shadowMapType === THREE.PCFSoftShadowMap && (p = "SHADOWMAP_TYPE_PCF_SOFT");var n = "ENVMAP_TYPE_CUBE",
	        q = "ENVMAP_MODE_REFLECTION",
	        s = "ENVMAP_BLENDING_MULTIPLY";
	    if (f.envMap) {
	      switch (g.envMap.mapping) {case THREE.CubeReflectionMapping:case THREE.CubeRefractionMapping:
	          n = "ENVMAP_TYPE_CUBE";break;case THREE.EquirectangularReflectionMapping:case THREE.EquirectangularRefractionMapping:
	          n = "ENVMAP_TYPE_EQUIREC";break;case THREE.SphericalReflectionMapping:
	          n = "ENVMAP_TYPE_SPHERE";}switch (g.envMap.mapping) {case THREE.CubeRefractionMapping:case THREE.EquirectangularRefractionMapping:
	          q = "ENVMAP_MODE_REFRACTION";}switch (g.combine) {case THREE.MultiplyOperation:
	          s = "ENVMAP_BLENDING_MULTIPLY";
	          break;case THREE.MixOperation:
	          s = "ENVMAP_BLENDING_MIX";break;case THREE.AddOperation:
	          s = "ENVMAP_BLENDING_ADD";}
	    }var t = 0 < d.gammaFactor ? d.gammaFactor : 1,
	        v = a(l),
	        u = h.createProgram();g instanceof THREE.RawShaderMaterial ? d = l = "" : (l = ["precision " + f.precision + " float;", "precision " + f.precision + " int;", "#define SHADER_NAME " + g.__webglShader.name, v, f.supportsVertexTextures ? "#define VERTEX_TEXTURES" : "", d.gammaInput ? "#define GAMMA_INPUT" : "", d.gammaOutput ? "#define GAMMA_OUTPUT" : "", "#define GAMMA_FACTOR " + t, "#define MAX_DIR_LIGHTS " + f.maxDirLights, "#define MAX_POINT_LIGHTS " + f.maxPointLights, "#define MAX_SPOT_LIGHTS " + f.maxSpotLights, "#define MAX_HEMI_LIGHTS " + f.maxHemiLights, "#define MAX_SHADOWS " + f.maxShadows, "#define MAX_BONES " + f.maxBones, f.map ? "#define USE_MAP" : "", f.envMap ? "#define USE_ENVMAP" : "", f.envMap ? "#define " + q : "", f.lightMap ? "#define USE_LIGHTMAP" : "", f.aoMap ? "#define USE_AOMAP" : "", f.emissiveMap ? "#define USE_EMISSIVEMAP" : "", f.bumpMap ? "#define USE_BUMPMAP" : "", f.normalMap ? "#define USE_NORMALMAP" : "", f.displacementMap && f.supportsVertexTextures ? "#define USE_DISPLACEMENTMAP" : "", f.specularMap ? "#define USE_SPECULARMAP" : "", f.alphaMap ? "#define USE_ALPHAMAP" : "", f.vertexColors ? "#define USE_COLOR" : "", f.flatShading ? "#define FLAT_SHADED" : "", f.skinning ? "#define USE_SKINNING" : "", f.useVertexTexture ? "#define BONE_TEXTURE" : "", f.morphTargets ? "#define USE_MORPHTARGETS" : "", f.morphNormals && !1 === f.flatShading ? "#define USE_MORPHNORMALS" : "", f.doubleSided ? "#define DOUBLE_SIDED" : "", f.flipSided ? "#define FLIP_SIDED" : "", f.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", f.shadowMapEnabled ? "#define " + p : "", f.shadowMapDebug ? "#define SHADOWMAP_DEBUG" : "", 0 < f.pointLightShadows ? "#define POINT_LIGHT_SHADOWS" : "", f.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "", f.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", f.logarithmicDepthBuffer && d.extensions.get("EXT_frag_depth") ? "#define USE_LOGDEPTHBUF_EXT" : "", "uniform mat4 modelMatrix;", "uniform mat4 modelViewMatrix;", "uniform mat4 projectionMatrix;", "uniform mat4 viewMatrix;", "uniform mat3 normalMatrix;", "uniform vec3 cameraPosition;", "attribute vec3 position;", "attribute vec3 normal;", "attribute vec2 uv;", "#ifdef USE_COLOR", "\tattribute vec3 color;", "#endif", "#ifdef USE_MORPHTARGETS", "\tattribute vec3 morphTarget0;", "\tattribute vec3 morphTarget1;", "\tattribute vec3 morphTarget2;", "\tattribute vec3 morphTarget3;", "\t#ifdef USE_MORPHNORMALS", "\t\tattribute vec3 morphNormal0;", "\t\tattribute vec3 morphNormal1;", "\t\tattribute vec3 morphNormal2;", "\t\tattribute vec3 morphNormal3;", "\t#else", "\t\tattribute vec3 morphTarget4;", "\t\tattribute vec3 morphTarget5;", "\t\tattribute vec3 morphTarget6;", "\t\tattribute vec3 morphTarget7;", "\t#endif", "#endif", "#ifdef USE_SKINNING", "\tattribute vec4 skinIndex;", "\tattribute vec4 skinWeight;", "#endif", "\n"].filter(b).join("\n"), d = [f.bumpMap || f.normalMap || f.flatShading || g.derivatives ? "#extension GL_OES_standard_derivatives : enable" : "", f.logarithmicDepthBuffer && d.extensions.get("EXT_frag_depth") ? "#extension GL_EXT_frag_depth : enable" : "", "precision " + f.precision + " float;", "precision " + f.precision + " int;", "#define SHADER_NAME " + g.__webglShader.name, v, "#define MAX_DIR_LIGHTS " + f.maxDirLights, "#define MAX_POINT_LIGHTS " + f.maxPointLights, "#define MAX_SPOT_LIGHTS " + f.maxSpotLights, "#define MAX_HEMI_LIGHTS " + f.maxHemiLights, "#define MAX_SHADOWS " + f.maxShadows, f.alphaTest ? "#define ALPHATEST " + f.alphaTest : "", d.gammaInput ? "#define GAMMA_INPUT" : "", d.gammaOutput ? "#define GAMMA_OUTPUT" : "", "#define GAMMA_FACTOR " + t, f.useFog && f.fog ? "#define USE_FOG" : "", f.useFog && f.fogExp ? "#define FOG_EXP2" : "", f.map ? "#define USE_MAP" : "", f.envMap ? "#define USE_ENVMAP" : "", f.envMap ? "#define " + n : "", f.envMap ? "#define " + q : "", f.envMap ? "#define " + s : "", f.lightMap ? "#define USE_LIGHTMAP" : "", f.aoMap ? "#define USE_AOMAP" : "", f.emissiveMap ? "#define USE_EMISSIVEMAP" : "", f.bumpMap ? "#define USE_BUMPMAP" : "", f.normalMap ? "#define USE_NORMALMAP" : "", f.specularMap ? "#define USE_SPECULARMAP" : "", f.alphaMap ? "#define USE_ALPHAMAP" : "", f.vertexColors ? "#define USE_COLOR" : "", f.flatShading ? "#define FLAT_SHADED" : "", f.metal ? "#define METAL" : "", f.doubleSided ? "#define DOUBLE_SIDED" : "", f.flipSided ? "#define FLIP_SIDED" : "", f.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", f.shadowMapEnabled ? "#define " + p : "", f.shadowMapDebug ? "#define SHADOWMAP_DEBUG" : "", 0 < f.pointLightShadows ? "#define POINT_LIGHT_SHADOWS" : "", f.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", f.logarithmicDepthBuffer && d.extensions.get("EXT_frag_depth") ? "#define USE_LOGDEPTHBUF_EXT" : "", "uniform mat4 viewMatrix;", "uniform vec3 cameraPosition;", "\n"].filter(b).join("\n"));m = d + m;
	    k = THREE.WebGLShader(h, h.VERTEX_SHADER, l + k);m = THREE.WebGLShader(h, h.FRAGMENT_SHADER, m);h.attachShader(u, k);h.attachShader(u, m);void 0 !== g.index0AttributeName ? h.bindAttribLocation(u, 0, g.index0AttributeName) : !0 === f.morphTargets && h.bindAttribLocation(u, 0, "position");h.linkProgram(u);f = h.getProgramInfoLog(u);p = h.getShaderInfoLog(k);n = h.getShaderInfoLog(m);s = q = !0;if (!1 === h.getProgramParameter(u, h.LINK_STATUS)) q = !1, console.error("THREE.WebGLProgram: shader error: ", h.getError(), "gl.VALIDATE_STATUS", h.getProgramParameter(u, h.VALIDATE_STATUS), "gl.getProgramInfoLog", f, p, n);else if ("" !== f) console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()", f);else if ("" === p || "" === n) s = !1;s && (this.diagnostics = { runnable: q, material: g, programLog: f, vertexShader: { log: p, prefix: l }, fragmentShader: { log: n, prefix: d } });h.deleteShader(k);h.deleteShader(m);var w;this.getUniforms = function () {
	      if (void 0 === w) {
	        for (var a = {}, b = h.getProgramParameter(u, h.ACTIVE_UNIFORMS), c = 0; c < b; c++) {
	          var d = h.getActiveUniform(u, c).name,
	              e = h.getUniformLocation(u, d),
	              f = d.lastIndexOf("[0]");
	          -1 !== f && f === d.length - 3 && (a[d.substr(0, f)] = e);a[d] = e;
	        }w = a;
	      }return w;
	    };var D;this.getAttributes = function () {
	      if (void 0 === D) {
	        for (var a = {}, b = h.getProgramParameter(u, h.ACTIVE_ATTRIBUTES), c = 0; c < b; c++) {
	          var d = h.getActiveAttrib(u, c).name;a[d] = h.getAttribLocation(u, d);
	        }D = a;
	      }return D;
	    };this.destroy = function () {
	      h.deleteProgram(u);this.program = void 0;
	    };Object.defineProperties(this, { uniforms: { get: function get() {
	          console.warn("THREE.WebGLProgram: .uniforms is now .getUniforms().");return this.getUniforms();
	        } }, attributes: { get: function get() {
	          console.warn("THREE.WebGLProgram: .attributes is now .getAttributes().");
	          return this.getAttributes();
	        } } });this.id = c++;this.code = e;this.usedTimes = 1;this.program = u;this.vertexShader = k;this.fragmentShader = m;return this;
	  };
	}();
	THREE.WebGLPrograms = function (a, b) {
	  var c = [],
	      d = { MeshDepthMaterial: "depth", MeshNormalMaterial: "normal", MeshBasicMaterial: "basic", MeshLambertMaterial: "lambert", MeshPhongMaterial: "phong", LineBasicMaterial: "basic", LineDashedMaterial: "dashed", PointsMaterial: "points" },
	      e = "precision supportsVertexTextures map envMap envMapMode lightMap aoMap emissiveMap bumpMap normalMap displacementMap specularMap alphaMap combine vertexColors fog useFog fogExp flatShading sizeAttenuation logarithmicDepthBuffer skinning maxBones useVertexTexture morphTargets morphNormals maxMorphTargets maxMorphNormals maxDirLights maxPointLights maxSpotLights maxHemiLights maxShadows shadowMapEnabled pointLightShadows shadowMapType shadowMapDebug alphaTest metal doubleSided flipSided".split(" ");this.getParameters = function (c, e, h, l) {
	    var k,
	        m,
	        p,
	        n,
	        q,
	        s = d[c.type];k = q = n = p = m = 0;for (var t = e.length; k < t; k++) {
	      var v = e[k];!1 !== v.visible && (v instanceof THREE.DirectionalLight && m++, v instanceof THREE.PointLight && p++, v instanceof THREE.SpotLight && n++, v instanceof THREE.HemisphereLight && q++);
	    }for (var v = k = t = 0, u = e.length; v < u; v++) {
	      var w = e[v];w.castShadow && ((w instanceof THREE.SpotLight || w instanceof THREE.DirectionalLight) && t++, w instanceof THREE.PointLight && (t++, k++));
	    }e = t;b.floatVertexTextures && l && l.skeleton && l.skeleton.useVertexTexture ? t = 1024 : (t = Math.floor((b.maxVertexUniforms - 20) / 4), void 0 !== l && l instanceof THREE.SkinnedMesh && (t = Math.min(l.skeleton.bones.length, t), t < l.skeleton.bones.length && console.warn("WebGLRenderer: too many bones - " + l.skeleton.bones.length + ", this GPU supports just " + t + " (try OpenGL instead of ANGLE)")));v = a.getPrecision();null !== c.precision && (v = b.getMaxPrecision(c.precision), v !== c.precision && console.warn("THREE.WebGLRenderer.initMaterial:", c.precision, "not supported, using", v, "instead."));return { shaderID: s,
	      precision: v, supportsVertexTextures: b.vertexTextures, map: !!c.map, envMap: !!c.envMap, envMapMode: c.envMap && c.envMap.mapping, lightMap: !!c.lightMap, aoMap: !!c.aoMap, emissiveMap: !!c.emissiveMap, bumpMap: !!c.bumpMap, normalMap: !!c.normalMap, displacementMap: !!c.displacementMap, specularMap: !!c.specularMap, alphaMap: !!c.alphaMap, combine: c.combine, vertexColors: c.vertexColors, fog: h, useFog: c.fog, fogExp: h instanceof THREE.FogExp2, flatShading: c.shading === THREE.FlatShading, sizeAttenuation: c.sizeAttenuation, logarithmicDepthBuffer: b.logarithmicDepthBuffer,
	      skinning: c.skinning, maxBones: t, useVertexTexture: b.floatVertexTextures && l && l.skeleton && l.skeleton.useVertexTexture, morphTargets: c.morphTargets, morphNormals: c.morphNormals, maxMorphTargets: a.maxMorphTargets, maxMorphNormals: a.maxMorphNormals, maxDirLights: m, maxPointLights: p, maxSpotLights: n, maxHemiLights: q, maxShadows: e, pointLightShadows: k, shadowMapEnabled: a.shadowMap.enabled && l.receiveShadow && 0 < e, shadowMapType: a.shadowMap.type, shadowMapDebug: a.shadowMap.debug, alphaTest: c.alphaTest, metal: c.metal, doubleSided: c.side === THREE.DoubleSide, flipSided: c.side === THREE.BackSide };
	  };this.getProgramCode = function (a, b) {
	    var c = [];b.shaderID ? c.push(b.shaderID) : (c.push(a.fragmentShader), c.push(a.vertexShader));if (void 0 !== a.defines) for (var d in a.defines) {
	      c.push(d), c.push(a.defines[d]);
	    }for (d = 0; d < e.length; d++) {
	      var k = e[d];c.push(k);c.push(b[k]);
	    }return c.join();
	  };this.acquireProgram = function (b, d, e) {
	    for (var l, k = 0, m = c.length; k < m; k++) {
	      var p = c[k];if (p.code === e) {
	        l = p;++l.usedTimes;break;
	      }
	    }void 0 === l && (l = new THREE.WebGLProgram(a, e, b, d), c.push(l));
	    return l;
	  };this.releaseProgram = function (a) {
	    if (0 === --a.usedTimes) {
	      var b = c.indexOf(a);c[b] = c[c.length - 1];c.pop();a.destroy();
	    }
	  };this.programs = c;
	};THREE.WebGLProperties = function () {
	  var a = {};this.get = function (b) {
	    b = b.uuid;var c = a[b];void 0 === c && (c = {}, a[b] = c);return c;
	  };this.delete = function (b) {
	    delete a[b.uuid];
	  };this.clear = function () {
	    a = {};
	  };
	};
	THREE.WebGLShader = function () {
	  function a(a) {
	    a = a.split("\n");for (var c = 0; c < a.length; c++) {
	      a[c] = c + 1 + ": " + a[c];
	    }return a.join("\n");
	  }return function (b, c, d) {
	    var e = b.createShader(c);b.shaderSource(e, d);b.compileShader(e);!1 === b.getShaderParameter(e, b.COMPILE_STATUS) && console.error("THREE.WebGLShader: Shader couldn't compile.");"" !== b.getShaderInfoLog(e) && console.warn("THREE.WebGLShader: gl.getShaderInfoLog()", c === b.VERTEX_SHADER ? "vertex" : "fragment", b.getShaderInfoLog(e), a(d));return e;
	  };
	}();
	THREE.WebGLShadowMap = function (a, b, c) {
	  function d(a, b, c, d) {
	    var e = a.geometry,
	        f = null,
	        f = n,
	        g = a.customDepthMaterial;c && (f = q, g = a.customDistanceMaterial);g ? f = g : (a = a instanceof THREE.SkinnedMesh && b.skinning, g = 0, void 0 !== e.morphTargets && 0 < e.morphTargets.length && b.morphTargets && (g |= 1), a && (g |= 2), f = f[g]);f.visible = b.visible;f.wireframe = b.wireframe;f.wireframeLinewidth = b.wireframeLinewidth;c && void 0 !== f.uniforms.lightPos && f.uniforms.lightPos.value.copy(d);return f;
	  }function e(a, b) {
	    if (!1 !== a.visible) {
	      (a instanceof THREE.Mesh || a instanceof THREE.Line || a instanceof THREE.Points) && a.castShadow && (!1 === a.frustumCulled || !0 === h.intersectsObject(a)) && !0 === a.material.visible && (a.modelViewMatrix.multiplyMatrices(b.matrixWorldInverse, a.matrixWorld), p.push(a));for (var c = a.children, d = 0, f = c.length; d < f; d++) {
	        e(c[d], b);
	      }
	    }
	  }var g = a.context,
	      f = a.state,
	      h = new THREE.Frustum(),
	      l = new THREE.Matrix4();new THREE.Vector3();new THREE.Vector3();for (var k = new THREE.Vector3(), m = new THREE.Vector3(), p = [], n = Array(4), q = Array(4), s = [new THREE.Vector3(1, 0, 0), new THREE.Vector3(-1, 0, 0), new THREE.Vector3(0, 0, 1), new THREE.Vector3(0, 0, -1), new THREE.Vector3(0, 1, 0), new THREE.Vector3(0, -1, 0)], t = [new THREE.Vector3(0, 1, 0), new THREE.Vector3(0, 1, 0), new THREE.Vector3(0, 1, 0), new THREE.Vector3(0, 1, 0), new THREE.Vector3(0, 0, 1), new THREE.Vector3(0, 0, -1)], v = [new THREE.Vector4(), new THREE.Vector4(), new THREE.Vector4(), new THREE.Vector4(), new THREE.Vector4(), new THREE.Vector4()], u = new THREE.Vector4(), w = THREE.ShaderLib.depthRGBA, D = THREE.UniformsUtils.clone(w.uniforms), x = THREE.ShaderLib.distanceRGBA, B = THREE.UniformsUtils.clone(x.uniforms), y = 0; 4 !== y; ++y) {
	    var z = 0 !== (y & 1),
	        A = 0 !== (y & 2),
	        J = new THREE.ShaderMaterial({ uniforms: D, vertexShader: w.vertexShader, fragmentShader: w.fragmentShader, morphTargets: z, skinning: A });J._shadowPass = !0;n[y] = J;z = new THREE.ShaderMaterial({ uniforms: B, vertexShader: x.vertexShader, fragmentShader: x.fragmentShader, morphTargets: z, skinning: A });z._shadowPass = !0;q[y] = z;
	  }var F = this;this.enabled = !1;this.autoUpdate = !0;this.needsUpdate = !1;this.type = THREE.PCFShadowMap;this.cullFace = THREE.CullFaceFront;this.render = function (n) {
	    var q, w;if (!1 !== F.enabled && (!1 !== F.autoUpdate || !1 !== F.needsUpdate)) {
	      g.clearColor(1, 1, 1, 1);f.disable(g.BLEND);f.enable(g.CULL_FACE);g.frontFace(g.CCW);g.cullFace(F.cullFace === THREE.CullFaceFront ? g.FRONT : g.BACK);f.setDepthTest(!0);a.getViewport(u);for (var x = 0, D = b.length; x < D; x++) {
	        var y = b[x];if (!0 === y.castShadow) {
	          var z = y.shadow,
	              B = z.camera,
	              A = z.mapSize;if (y instanceof THREE.PointLight) {
	            q = 6;w = !0;var H = A.x / 4,
	                J = A.y / 2;v[0].set(2 * H, J, H, J);v[1].set(0, J, H, J);v[2].set(3 * H, J, H, J);v[3].set(H, J, H, J);v[4].set(3 * H, 0, H, J);
	            v[5].set(H, 0, H, J);
	          } else q = 1, w = !1;null === z.map && (H = THREE.LinearFilter, F.type === THREE.PCFSoftShadowMap && (H = THREE.NearestFilter), z.map = new THREE.WebGLRenderTarget(A.x, A.y, { minFilter: H, magFilter: H, format: THREE.RGBAFormat }), z.matrix = new THREE.Matrix4(), y instanceof THREE.SpotLight && (B.aspect = A.x / A.y), B.updateProjectionMatrix());A = z.map;z = z.matrix;m.setFromMatrixPosition(y.matrixWorld);B.position.copy(m);a.setRenderTarget(A);a.clear();for (A = 0; A < q; A++) {
	            for (w ? (k.copy(B.position), k.add(s[A]), B.up.copy(t[A]), B.lookAt(k), H = v[A], a.setViewport(H.x, H.y, H.z, H.w)) : (k.setFromMatrixPosition(y.target.matrixWorld), B.lookAt(k)), B.updateMatrixWorld(), B.matrixWorldInverse.getInverse(B.matrixWorld), z.set(.5, 0, 0, .5, 0, .5, 0, .5, 0, 0, .5, .5, 0, 0, 0, 1), z.multiply(B.projectionMatrix), z.multiply(B.matrixWorldInverse), l.multiplyMatrices(B.projectionMatrix, B.matrixWorldInverse), h.setFromMatrix(l), p.length = 0, e(n, B), H = 0, J = p.length; H < J; H++) {
	              var G = p[H],
	                  ia = c.update(G),
	                  U = G.material;if (U instanceof THREE.MeshFaceMaterial) for (var X = ia.groups, U = U.materials, da = 0, ca = X.length; da < ca; da++) {
	                var ga = X[da],
	                    Z = U[ga.materialIndex];!0 === Z.visible && (Z = d(G, Z, w, m), a.renderBufferDirect(B, b, null, ia, Z, G, ga));
	              } else Z = d(G, U, w, m), a.renderBufferDirect(B, b, null, ia, Z, G, null);
	            }
	          }a.resetGLState();
	        }
	      }a.setViewport(u.x, u.y, u.z, u.w);n = a.getClearColor();q = a.getClearAlpha();a.setClearColor(n, q);f.enable(g.BLEND);F.cullFace === THREE.CullFaceFront && g.cullFace(g.BACK);a.resetGLState();F.needsUpdate = !1;
	    }
	  };
	};
	THREE.WebGLState = function (a, b, c) {
	  var d = this,
	      e = new Uint8Array(16),
	      g = new Uint8Array(16),
	      f = new Uint8Array(16),
	      h = {},
	      l = null,
	      k = null,
	      m = null,
	      p = null,
	      n = null,
	      q = null,
	      s = null,
	      t = null,
	      v = null,
	      u = null,
	      w = null,
	      D = null,
	      x = null,
	      B = null,
	      y = null,
	      z = a.getParameter(a.MAX_TEXTURE_IMAGE_UNITS),
	      A = void 0,
	      J = {};this.init = function () {
	    a.clearColor(0, 0, 0, 1);a.clearDepth(1);a.clearStencil(0);this.enable(a.DEPTH_TEST);a.depthFunc(a.LEQUAL);a.frontFace(a.CCW);a.cullFace(a.BACK);this.enable(a.CULL_FACE);this.enable(a.BLEND);a.blendEquation(a.FUNC_ADD);
	    a.blendFunc(a.SRC_ALPHA, a.ONE_MINUS_SRC_ALPHA);
	  };this.initAttributes = function () {
	    for (var a = 0, b = e.length; a < b; a++) {
	      e[a] = 0;
	    }
	  };this.enableAttribute = function (c) {
	    e[c] = 1;0 === g[c] && (a.enableVertexAttribArray(c), g[c] = 1);0 !== f[c] && (b.get("ANGLE_instanced_arrays").vertexAttribDivisorANGLE(c, 0), f[c] = 0);
	  };this.enableAttributeAndDivisor = function (b, c, d) {
	    e[b] = 1;0 === g[b] && (a.enableVertexAttribArray(b), g[b] = 1);f[b] !== c && (d.vertexAttribDivisorANGLE(b, c), f[b] = c);
	  };this.disableUnusedAttributes = function () {
	    for (var b = 0, c = g.length; b < c; b++) {
	      g[b] !== e[b] && (a.disableVertexAttribArray(b), g[b] = 0);
	    }
	  };this.enable = function (b) {
	    !0 !== h[b] && (a.enable(b), h[b] = !0);
	  };this.disable = function (b) {
	    !1 !== h[b] && (a.disable(b), h[b] = !1);
	  };this.getCompressedTextureFormats = function () {
	    if (null === l && (l = [], b.get("WEBGL_compressed_texture_pvrtc") || b.get("WEBGL_compressed_texture_s3tc"))) for (var c = a.getParameter(a.COMPRESSED_TEXTURE_FORMATS), d = 0; d < c.length; d++) {
	      l.push(c[d]);
	    }return l;
	  };this.setBlending = function (b, d, e, f, g, h, l) {
	    b !== k && (b === THREE.NoBlending ? this.disable(a.BLEND) : b === THREE.AdditiveBlending ? (this.enable(a.BLEND), a.blendEquation(a.FUNC_ADD), a.blendFunc(a.SRC_ALPHA, a.ONE)) : b === THREE.SubtractiveBlending ? (this.enable(a.BLEND), a.blendEquation(a.FUNC_ADD), a.blendFunc(a.ZERO, a.ONE_MINUS_SRC_COLOR)) : b === THREE.MultiplyBlending ? (this.enable(a.BLEND), a.blendEquation(a.FUNC_ADD), a.blendFunc(a.ZERO, a.SRC_COLOR)) : b === THREE.CustomBlending ? this.enable(a.BLEND) : (this.enable(a.BLEND), a.blendEquationSeparate(a.FUNC_ADD, a.FUNC_ADD), a.blendFuncSeparate(a.SRC_ALPHA, a.ONE_MINUS_SRC_ALPHA, a.ONE, a.ONE_MINUS_SRC_ALPHA)), k = b);if (b === THREE.CustomBlending) {
	      g = g || d;h = h || e;l = l || f;if (d !== m || g !== q) a.blendEquationSeparate(c(d), c(g)), m = d, q = g;if (e !== p || f !== n || h !== s || l !== t) a.blendFuncSeparate(c(e), c(f), c(h), c(l)), p = e, n = f, s = h, t = l;
	    } else t = s = q = n = p = m = null;
	  };this.setDepthFunc = function (b) {
	    if (v !== b) {
	      if (b) switch (b) {case THREE.NeverDepth:
	          a.depthFunc(a.NEVER);break;case THREE.AlwaysDepth:
	          a.depthFunc(a.ALWAYS);break;case THREE.LessDepth:
	          a.depthFunc(a.LESS);break;case THREE.LessEqualDepth:
	          a.depthFunc(a.LEQUAL);
	          break;case THREE.EqualDepth:
	          a.depthFunc(a.EQUAL);break;case THREE.GreaterEqualDepth:
	          a.depthFunc(a.GEQUAL);break;case THREE.GreaterDepth:
	          a.depthFunc(a.GREATER);break;case THREE.NotEqualDepth:
	          a.depthFunc(a.NOTEQUAL);break;default:
	          a.depthFunc(a.LEQUAL);} else a.depthFunc(a.LEQUAL);v = b;
	    }
	  };this.setDepthTest = function (b) {
	    b ? this.enable(a.DEPTH_TEST) : this.disable(a.DEPTH_TEST);
	  };this.setDepthWrite = function (b) {
	    u !== b && (a.depthMask(b), u = b);
	  };this.setColorWrite = function (b) {
	    w !== b && (a.colorMask(b, b, b, b), w = b);
	  };this.setFlipSided = function (b) {
	    D !== b && (b ? a.frontFace(a.CW) : a.frontFace(a.CCW), D = b);
	  };this.setLineWidth = function (b) {
	    b !== x && (a.lineWidth(b), x = b);
	  };this.setPolygonOffset = function (b, c, d) {
	    b ? this.enable(a.POLYGON_OFFSET_FILL) : this.disable(a.POLYGON_OFFSET_FILL);!b || B === c && y === d || (a.polygonOffset(c, d), B = c, y = d);
	  };this.setScissorTest = function (b) {
	    b ? this.enable(a.SCISSOR_TEST) : this.disable(a.SCISSOR_TEST);
	  };this.activeTexture = function (b) {
	    void 0 === b && (b = a.TEXTURE0 + z - 1);A !== b && (a.activeTexture(b), A = b);
	  };this.bindTexture = function (b, c) {
	    void 0 === A && d.activeTexture();var e = J[A];void 0 === e && (e = { type: void 0, texture: void 0 }, J[A] = e);if (e.type !== b || e.texture !== c) a.bindTexture(b, c), e.type = b, e.texture = c;
	  };this.compressedTexImage2D = function () {
	    try {
	      a.compressedTexImage2D.apply(a, arguments);
	    } catch (b) {
	      console.error(b);
	    }
	  };this.texImage2D = function () {
	    try {
	      a.texImage2D.apply(a, arguments);
	    } catch (b) {
	      console.error(b);
	    }
	  };this.reset = function () {
	    for (var b = 0; b < g.length; b++) {
	      1 === g[b] && (a.disableVertexAttribArray(b), g[b] = 0);
	    }h = {};D = w = u = k = l = null;
	  };
	};
	THREE.LensFlarePlugin = function (a, b) {
	  var c,
	      d,
	      e,
	      g,
	      f,
	      h,
	      l,
	      k,
	      m,
	      p,
	      n = a.context,
	      q = a.state,
	      s,
	      t,
	      v,
	      u,
	      w,
	      D;this.render = function (x, B, y, z) {
	    if (0 !== b.length) {
	      x = new THREE.Vector3();var A = z / y,
	          J = .5 * y,
	          F = .5 * z,
	          C = 16 / z,
	          N = new THREE.Vector2(C * A, C),
	          L = new THREE.Vector3(1, 1, 0),
	          Q = new THREE.Vector2(1, 1);if (void 0 === v) {
	        var C = new Float32Array([-1, -1, 0, 0, 1, -1, 1, 0, 1, 1, 1, 1, -1, 1, 0, 1]),
	            M = new Uint16Array([0, 1, 2, 0, 2, 3]);s = n.createBuffer();t = n.createBuffer();n.bindBuffer(n.ARRAY_BUFFER, s);n.bufferData(n.ARRAY_BUFFER, C, n.STATIC_DRAW);n.bindBuffer(n.ELEMENT_ARRAY_BUFFER, t);n.bufferData(n.ELEMENT_ARRAY_BUFFER, M, n.STATIC_DRAW);w = n.createTexture();D = n.createTexture();q.bindTexture(n.TEXTURE_2D, w);n.texImage2D(n.TEXTURE_2D, 0, n.RGB, 16, 16, 0, n.RGB, n.UNSIGNED_BYTE, null);n.texParameteri(n.TEXTURE_2D, n.TEXTURE_WRAP_S, n.CLAMP_TO_EDGE);n.texParameteri(n.TEXTURE_2D, n.TEXTURE_WRAP_T, n.CLAMP_TO_EDGE);n.texParameteri(n.TEXTURE_2D, n.TEXTURE_MAG_FILTER, n.NEAREST);n.texParameteri(n.TEXTURE_2D, n.TEXTURE_MIN_FILTER, n.NEAREST);q.bindTexture(n.TEXTURE_2D, D);n.texImage2D(n.TEXTURE_2D, 0, n.RGBA, 16, 16, 0, n.RGBA, n.UNSIGNED_BYTE, null);n.texParameteri(n.TEXTURE_2D, n.TEXTURE_WRAP_S, n.CLAMP_TO_EDGE);n.texParameteri(n.TEXTURE_2D, n.TEXTURE_WRAP_T, n.CLAMP_TO_EDGE);n.texParameteri(n.TEXTURE_2D, n.TEXTURE_MAG_FILTER, n.NEAREST);n.texParameteri(n.TEXTURE_2D, n.TEXTURE_MIN_FILTER, n.NEAREST);var C = (u = 0 < n.getParameter(n.MAX_VERTEX_TEXTURE_IMAGE_UNITS)) ? { vertexShader: "uniform lowp int renderType;\nuniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nuniform sampler2D occlusionMap;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nvUV = uv;\nvec2 pos = position;\nif ( renderType == 2 ) {\nvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\nvVisibility =        visibility.r / 9.0;\nvVisibility *= 1.0 - visibility.g / 9.0;\nvVisibility *=       visibility.b / 9.0;\nvVisibility *= 1.0 - visibility.a / 9.0;\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}",
	          fragmentShader: "uniform lowp int renderType;\nuniform sampler2D map;\nuniform float opacity;\nuniform vec3 color;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nif ( renderType == 0 ) {\ngl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\n} else if ( renderType == 1 ) {\ngl_FragColor = texture2D( map, vUV );\n} else {\nvec4 texture = texture2D( map, vUV );\ntexture.a *= opacity * vVisibility;\ngl_FragColor = texture;\ngl_FragColor.rgb *= color;\n}\n}" } : { vertexShader: "uniform lowp int renderType;\nuniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\nvUV = uv;\nvec2 pos = position;\nif ( renderType == 2 ) {\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}",
	          fragmentShader: "precision mediump float;\nuniform lowp int renderType;\nuniform sampler2D map;\nuniform sampler2D occlusionMap;\nuniform float opacity;\nuniform vec3 color;\nvarying vec2 vUV;\nvoid main() {\nif ( renderType == 0 ) {\ngl_FragColor = vec4( texture2D( map, vUV ).rgb, 0.0 );\n} else if ( renderType == 1 ) {\ngl_FragColor = texture2D( map, vUV );\n} else {\nfloat visibility = texture2D( occlusionMap, vec2( 0.5, 0.1 ) ).a;\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) ).a;\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) ).a;\nvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) ).a;\nvisibility = ( 1.0 - visibility / 4.0 );\nvec4 texture = texture2D( map, vUV );\ntexture.a *= opacity * visibility;\ngl_FragColor = texture;\ngl_FragColor.rgb *= color;\n}\n}" },
	            M = n.createProgram(),
	            K = n.createShader(n.FRAGMENT_SHADER),
	            E = n.createShader(n.VERTEX_SHADER),
	            O = "precision " + a.getPrecision() + " float;\n";n.shaderSource(K, O + C.fragmentShader);n.shaderSource(E, O + C.vertexShader);n.compileShader(K);n.compileShader(E);n.attachShader(M, K);n.attachShader(M, E);n.linkProgram(M);v = M;m = n.getAttribLocation(v, "position");p = n.getAttribLocation(v, "uv");c = n.getUniformLocation(v, "renderType");d = n.getUniformLocation(v, "map");e = n.getUniformLocation(v, "occlusionMap");g = n.getUniformLocation(v, "opacity");f = n.getUniformLocation(v, "color");h = n.getUniformLocation(v, "scale");l = n.getUniformLocation(v, "rotation");k = n.getUniformLocation(v, "screenPosition");
	      }n.useProgram(v);q.initAttributes();q.enableAttribute(m);q.enableAttribute(p);q.disableUnusedAttributes();n.uniform1i(e, 0);n.uniform1i(d, 1);n.bindBuffer(n.ARRAY_BUFFER, s);n.vertexAttribPointer(m, 2, n.FLOAT, !1, 16, 0);n.vertexAttribPointer(p, 2, n.FLOAT, !1, 16, 8);n.bindBuffer(n.ELEMENT_ARRAY_BUFFER, t);q.disable(n.CULL_FACE);n.depthMask(!1);M = 0;for (K = b.length; M < K; M++) {
	        if (C = 16 / z, N.set(C * A, C), E = b[M], x.set(E.matrixWorld.elements[12], E.matrixWorld.elements[13], E.matrixWorld.elements[14]), x.applyMatrix4(B.matrixWorldInverse), x.applyProjection(B.projectionMatrix), L.copy(x), Q.x = L.x * J + J, Q.y = L.y * F + F, u || 0 < Q.x && Q.x < y && 0 < Q.y && Q.y < z) {
	          q.activeTexture(n.TEXTURE0);q.bindTexture(n.TEXTURE_2D, null);q.activeTexture(n.TEXTURE1);q.bindTexture(n.TEXTURE_2D, w);n.copyTexImage2D(n.TEXTURE_2D, 0, n.RGB, Q.x - 8, Q.y - 8, 16, 16, 0);n.uniform1i(c, 0);n.uniform2f(h, N.x, N.y);n.uniform3f(k, L.x, L.y, L.z);q.disable(n.BLEND);q.enable(n.DEPTH_TEST);n.drawElements(n.TRIANGLES, 6, n.UNSIGNED_SHORT, 0);q.activeTexture(n.TEXTURE0);q.bindTexture(n.TEXTURE_2D, D);n.copyTexImage2D(n.TEXTURE_2D, 0, n.RGBA, Q.x - 8, Q.y - 8, 16, 16, 0);n.uniform1i(c, 1);q.disable(n.DEPTH_TEST);q.activeTexture(n.TEXTURE1);q.bindTexture(n.TEXTURE_2D, w);n.drawElements(n.TRIANGLES, 6, n.UNSIGNED_SHORT, 0);E.positionScreen.copy(L);E.customUpdateCallback ? E.customUpdateCallback(E) : E.updateLensFlares();n.uniform1i(c, 2);q.enable(n.BLEND);for (var O = 0, T = E.lensFlares.length; O < T; O++) {
	            var H = E.lensFlares[O];.001 < H.opacity && .001 < H.scale && (L.x = H.x, L.y = H.y, L.z = H.z, C = H.size * H.scale / z, N.x = C * A, N.y = C, n.uniform3f(k, L.x, L.y, L.z), n.uniform2f(h, N.x, N.y), n.uniform1f(l, H.rotation), n.uniform1f(g, H.opacity), n.uniform3f(f, H.color.r, H.color.g, H.color.b), q.setBlending(H.blending, H.blendEquation, H.blendSrc, H.blendDst), a.setTexture(H.texture, 1), n.drawElements(n.TRIANGLES, 6, n.UNSIGNED_SHORT, 0));
	          }
	        }
	      }q.enable(n.CULL_FACE);q.enable(n.DEPTH_TEST);n.depthMask(!0);a.resetGLState();
	    }
	  };
	};
	THREE.SpritePlugin = function (a, b) {
	  var c, d, e, g, f, h, l, k, m, p, n, q, s, t, v, u, w;function D(a, b) {
	    return a.z !== b.z ? b.z - a.z : b.id - a.id;
	  }var x = a.context,
	      B = a.state,
	      y,
	      z,
	      A,
	      J,
	      F = new THREE.Vector3(),
	      C = new THREE.Quaternion(),
	      N = new THREE.Vector3();this.render = function (L, Q) {
	    if (0 !== b.length) {
	      if (void 0 === A) {
	        var M = new Float32Array([-.5, -.5, 0, 0, .5, -.5, 1, 0, .5, .5, 1, 1, -.5, .5, 0, 1]),
	            K = new Uint16Array([0, 1, 2, 0, 2, 3]);y = x.createBuffer();z = x.createBuffer();x.bindBuffer(x.ARRAY_BUFFER, y);x.bufferData(x.ARRAY_BUFFER, M, x.STATIC_DRAW);x.bindBuffer(x.ELEMENT_ARRAY_BUFFER, z);x.bufferData(x.ELEMENT_ARRAY_BUFFER, K, x.STATIC_DRAW);var M = x.createProgram(),
	            K = x.createShader(x.VERTEX_SHADER),
	            E = x.createShader(x.FRAGMENT_SHADER);x.shaderSource(K, ["precision " + a.getPrecision() + " float;", "uniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float rotation;\nuniform vec2 scale;\nuniform vec2 uvOffset;\nuniform vec2 uvScale;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\nvUV = uvOffset + uv * uvScale;\nvec2 alignedPosition = position * scale;\nvec2 rotatedPosition;\nrotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\nrotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\nvec4 finalPosition;\nfinalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\nfinalPosition.xy += rotatedPosition;\nfinalPosition = projectionMatrix * finalPosition;\ngl_Position = finalPosition;\n}"].join("\n"));
	        x.shaderSource(E, ["precision " + a.getPrecision() + " float;", "uniform vec3 color;\nuniform sampler2D map;\nuniform float opacity;\nuniform int fogType;\nuniform vec3 fogColor;\nuniform float fogDensity;\nuniform float fogNear;\nuniform float fogFar;\nuniform float alphaTest;\nvarying vec2 vUV;\nvoid main() {\nvec4 texture = texture2D( map, vUV );\nif ( texture.a < alphaTest ) discard;\ngl_FragColor = vec4( color * texture.xyz, texture.a * opacity );\nif ( fogType > 0 ) {\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\nfloat fogFactor = 0.0;\nif ( fogType == 1 ) {\nfogFactor = smoothstep( fogNear, fogFar, depth );\n} else {\nconst float LOG2 = 1.442695;\nfogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\nfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\n}\ngl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\n}\n}"].join("\n"));
	        x.compileShader(K);x.compileShader(E);x.attachShader(M, K);x.attachShader(M, E);x.linkProgram(M);A = M;u = x.getAttribLocation(A, "position");w = x.getAttribLocation(A, "uv");c = x.getUniformLocation(A, "uvOffset");d = x.getUniformLocation(A, "uvScale");e = x.getUniformLocation(A, "rotation");g = x.getUniformLocation(A, "scale");f = x.getUniformLocation(A, "color");h = x.getUniformLocation(A, "map");l = x.getUniformLocation(A, "opacity");k = x.getUniformLocation(A, "modelViewMatrix");m = x.getUniformLocation(A, "projectionMatrix");p = x.getUniformLocation(A, "fogType");n = x.getUniformLocation(A, "fogDensity");q = x.getUniformLocation(A, "fogNear");s = x.getUniformLocation(A, "fogFar");t = x.getUniformLocation(A, "fogColor");v = x.getUniformLocation(A, "alphaTest");M = document.createElement("canvas");M.width = 8;M.height = 8;K = M.getContext("2d");K.fillStyle = "white";K.fillRect(0, 0, 8, 8);J = new THREE.Texture(M);J.needsUpdate = !0;
	      }x.useProgram(A);B.initAttributes();B.enableAttribute(u);B.enableAttribute(w);B.disableUnusedAttributes();B.disable(x.CULL_FACE);
	      B.enable(x.BLEND);x.bindBuffer(x.ARRAY_BUFFER, y);x.vertexAttribPointer(u, 2, x.FLOAT, !1, 16, 0);x.vertexAttribPointer(w, 2, x.FLOAT, !1, 16, 8);x.bindBuffer(x.ELEMENT_ARRAY_BUFFER, z);x.uniformMatrix4fv(m, !1, Q.projectionMatrix.elements);B.activeTexture(x.TEXTURE0);x.uniform1i(h, 0);K = M = 0;(E = L.fog) ? (x.uniform3f(t, E.color.r, E.color.g, E.color.b), E instanceof THREE.Fog ? (x.uniform1f(q, E.near), x.uniform1f(s, E.far), x.uniform1i(p, 1), K = M = 1) : E instanceof THREE.FogExp2 && (x.uniform1f(n, E.density), x.uniform1i(p, 2), K = M = 2)) : (x.uniform1i(p, 0), K = M = 0);for (var E = 0, O = b.length; E < O; E++) {
	        var T = b[E];T.modelViewMatrix.multiplyMatrices(Q.matrixWorldInverse, T.matrixWorld);T.z = -T.modelViewMatrix.elements[14];
	      }b.sort(D);for (var H = [], E = 0, O = b.length; E < O; E++) {
	        var T = b[E],
	            R = T.material;x.uniform1f(v, R.alphaTest);x.uniformMatrix4fv(k, !1, T.modelViewMatrix.elements);T.matrixWorld.decompose(F, C, N);H[0] = N.x;H[1] = N.y;T = 0;L.fog && R.fog && (T = K);M !== T && (x.uniform1i(p, T), M = T);null !== R.map ? (x.uniform2f(c, R.map.offset.x, R.map.offset.y), x.uniform2f(d, R.map.repeat.x, R.map.repeat.y)) : (x.uniform2f(c, 0, 0), x.uniform2f(d, 1, 1));x.uniform1f(l, R.opacity);x.uniform3f(f, R.color.r, R.color.g, R.color.b);x.uniform1f(e, R.rotation);x.uniform2fv(g, H);B.setBlending(R.blending, R.blendEquation, R.blendSrc, R.blendDst);B.setDepthTest(R.depthTest);B.setDepthWrite(R.depthWrite);R.map && R.map.image && R.map.image.width ? a.setTexture(R.map, 0) : a.setTexture(J, 0);x.drawElements(x.TRIANGLES, 6, x.UNSIGNED_SHORT, 0);
	      }B.enable(x.CULL_FACE);a.resetGLState();
	    }
	  };
	};
	THREE.CurveUtils = { tangentQuadraticBezier: function tangentQuadraticBezier(a, b, c, d) {
	    return 2 * (1 - a) * (c - b) + 2 * a * (d - c);
	  }, tangentCubicBezier: function tangentCubicBezier(a, b, c, d, e) {
	    return -3 * b * (1 - a) * (1 - a) + 3 * c * (1 - a) * (1 - a) - 6 * a * c * (1 - a) + 6 * a * d * (1 - a) - 3 * a * a * d + 3 * a * a * e;
	  }, tangentSpline: function tangentSpline(a, b, c, d, e) {
	    return 6 * a * a - 6 * a + (3 * a * a - 4 * a + 1) + (-6 * a * a + 6 * a) + (3 * a * a - 2 * a);
	  }, interpolate: function interpolate(a, b, c, d, e) {
	    a = .5 * (c - a);d = .5 * (d - b);var g = e * e;return (2 * b - 2 * c + a + d) * e * g + (-3 * b + 3 * c - 2 * a - d) * g + a * e + b;
	  } };
	THREE.GeometryUtils = { merge: function merge(a, b, c) {
	    console.warn("THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.");var d;b instanceof THREE.Mesh && (b.matrixAutoUpdate && b.updateMatrix(), d = b.matrix, b = b.geometry);a.merge(b, d, c);
	  }, center: function center(a) {
	    console.warn("THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.");return a.center();
	  } };
	THREE.ImageUtils = { crossOrigin: void 0, loadTexture: function loadTexture(a, b, c, d) {
	    console.warn("THREE.ImageUtils.loadTexture is being deprecated. Use THREE.TextureLoader() instead.");var e = new THREE.TextureLoader();e.setCrossOrigin(this.crossOrigin);a = e.load(a, c, void 0, d);b && (a.mapping = b);return a;
	  }, loadTextureCube: function loadTextureCube(a, b, c, d) {
	    console.warn("THREE.ImageUtils.loadTextureCube is being deprecated. Use THREE.CubeTextureLoader() instead.");var e = new THREE.CubeTextureLoader();e.setCrossOrigin(this.crossOrigin);a = e.load(a, c, void 0, d);b && (a.mapping = b);return a;
	  }, loadCompressedTexture: function loadCompressedTexture() {
	    console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.");
	  }, loadCompressedTextureCube: function loadCompressedTextureCube() {
	    console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.");
	  } };
	THREE.SceneUtils = { createMultiMaterialObject: function createMultiMaterialObject(a, b) {
	    for (var c = new THREE.Group(), d = 0, e = b.length; d < e; d++) {
	      c.add(new THREE.Mesh(a, b[d]));
	    }return c;
	  }, detach: function detach(a, b, c) {
	    a.applyMatrix(b.matrixWorld);b.remove(a);c.add(a);
	  }, attach: function attach(a, b, c) {
	    var d = new THREE.Matrix4();d.getInverse(c.matrixWorld);a.applyMatrix(d);b.remove(a);c.add(a);
	  } };
	THREE.ShapeUtils = { area: function area(a) {
	    for (var b = a.length, c = 0, d = b - 1, e = 0; e < b; d = e++) {
	      c += a[d].x * a[e].y - a[e].x * a[d].y;
	    }return .5 * c;
	  }, triangulate: function () {
	    return function (a, b) {
	      var c = a.length;if (3 > c) return null;var d = [],
	          e = [],
	          g = [],
	          f,
	          h,
	          l;if (0 < THREE.ShapeUtils.area(a)) for (h = 0; h < c; h++) {
	        e[h] = h;
	      } else for (h = 0; h < c; h++) {
	        e[h] = c - 1 - h;
	      }var k = 2 * c;for (h = c - 1; 2 < c;) {
	        if (0 >= k--) {
	          console.warn("THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()");break;
	        }f = h;c <= f && (f = 0);h = f + 1;c <= h && (h = 0);l = h + 1;c <= l && (l = 0);var m;a: {
	          var p = m = void 0,
	              n = void 0,
	              q = void 0,
	              s = void 0,
	              t = void 0,
	              v = void 0,
	              u = void 0,
	              w = void 0,
	              p = a[e[f]].x,
	              n = a[e[f]].y,
	              q = a[e[h]].x,
	              s = a[e[h]].y,
	              t = a[e[l]].x,
	              v = a[e[l]].y;if (Number.EPSILON > (q - p) * (v - n) - (s - n) * (t - p)) m = !1;else {
	            var D = void 0,
	                x = void 0,
	                B = void 0,
	                y = void 0,
	                z = void 0,
	                A = void 0,
	                J = void 0,
	                F = void 0,
	                C = void 0,
	                N = void 0,
	                C = F = J = w = u = void 0,
	                D = t - q,
	                x = v - s,
	                B = p - t,
	                y = n - v,
	                z = q - p,
	                A = s - n;for (m = 0; m < c; m++) {
	              if (u = a[e[m]].x, w = a[e[m]].y, !(u === p && w === n || u === q && w === s || u === t && w === v) && (J = u - p, F = w - n, C = u - q, N = w - s, u -= t, w -= v, C = D * N - x * C, J = z * F - A * J, F = B * w - y * u, C >= -Number.EPSILON && F >= -Number.EPSILON && J >= -Number.EPSILON)) {
	                m = !1;break a;
	              }
	            }m = !0;
	          }
	        }if (m) {
	          d.push([a[e[f]], a[e[h]], a[e[l]]]);g.push([e[f], e[h], e[l]]);f = h;for (l = h + 1; l < c; f++, l++) {
	            e[f] = e[l];
	          }c--;k = 2 * c;
	        }
	      }return b ? g : d;
	    };
	  }(), triangulateShape: function triangulateShape(a, b) {
	    function c(a, b, c) {
	      return a.x !== b.x ? a.x < b.x ? a.x <= c.x && c.x <= b.x : b.x <= c.x && c.x <= a.x : a.y < b.y ? a.y <= c.y && c.y <= b.y : b.y <= c.y && c.y <= a.y;
	    }function d(a, b, d, e, f) {
	      var g = b.x - a.x,
	          h = b.y - a.y,
	          k = e.x - d.x,
	          l = e.y - d.y,
	          m = a.x - d.x,
	          p = a.y - d.y,
	          z = h * k - g * l,
	          A = h * m - g * p;if (Math.abs(z) > Number.EPSILON) {
	        if (0 < z) {
	          if (0 > A || A > z) return [];k = l * m - k * p;if (0 > k || k > z) return [];
	        } else {
	          if (0 < A || A < z) return [];k = l * m - k * p;if (0 < k || k < z) return [];
	        }if (0 === k) return !f || 0 !== A && A !== z ? [a] : [];if (k === z) return !f || 0 !== A && A !== z ? [b] : [];if (0 === A) return [d];if (A === z) return [e];f = k / z;return [{ x: a.x + f * g, y: a.y + f * h }];
	      }if (0 !== A || l * m !== k * p) return [];h = 0 === g && 0 === h;k = 0 === k && 0 === l;if (h && k) return a.x !== d.x || a.y !== d.y ? [] : [a];if (h) return c(d, e, a) ? [a] : [];if (k) return c(a, b, d) ? [d] : [];0 !== g ? (a.x < b.x ? (g = a, k = a.x, h = b, a = b.x) : (g = b, k = b.x, h = a, a = a.x), d.x < e.x ? (b = d, z = d.x, l = e, d = e.x) : (b = e, z = e.x, l = d, d = d.x)) : (a.y < b.y ? (g = a, k = a.y, h = b, a = b.y) : (g = b, k = b.y, h = a, a = a.y), d.y < e.y ? (b = d, z = d.y, l = e, d = e.y) : (b = e, z = e.y, l = d, d = d.y));return k <= z ? a < z ? [] : a === z ? f ? [] : [b] : a <= d ? [b, h] : [b, l] : k > d ? [] : k === d ? f ? [] : [g] : a <= d ? [g, h] : [g, l];
	    }function e(a, b, c, d) {
	      var e = b.x - a.x,
	          f = b.y - a.y;b = c.x - a.x;c = c.y - a.y;var g = d.x - a.x;d = d.y - a.y;a = e * c - f * b;e = e * d - f * g;return Math.abs(a) > Number.EPSILON ? (b = g * c - d * b, 0 < a ? 0 <= e && 0 <= b : 0 <= e || 0 <= b) : 0 < e;
	    }var g,
	        f,
	        h,
	        l,
	        k,
	        m = {};h = a.concat();g = 0;for (f = b.length; g < f; g++) {
	      Array.prototype.push.apply(h, b[g]);
	    }g = 0;for (f = h.length; g < f; g++) {
	      k = h[g].x + ":" + h[g].y, void 0 !== m[k] && console.warn("THREE.Shape: Duplicate point", k), m[k] = g;
	    }g = function (a, b) {
	      function c(a, b) {
	        var d = h.length - 1,
	            f = a - 1;0 > f && (f = d);var g = a + 1;g > d && (g = 0);d = e(h[a], h[f], h[g], k[b]);if (!d) return !1;d = k.length - 1;f = b - 1;0 > f && (f = d);g = b + 1;g > d && (g = 0);return (d = e(k[b], k[f], k[g], h[a])) ? !0 : !1;
	      }function f(a, b) {
	        var c, e;for (c = 0; c < h.length; c++) {
	          if (e = c + 1, e %= h.length, e = d(a, b, h[c], h[e], !0), 0 < e.length) return !0;
	        }return !1;
	      }function g(a, c) {
	        var e, f, h, k;for (e = 0; e < l.length; e++) {
	          for (f = b[l[e]], h = 0; h < f.length; h++) {
	            if (k = h + 1, k %= f.length, k = d(a, c, f[h], f[k], !0), 0 < k.length) return !0;
	          }
	        }return !1;
	      }var h = a.concat(),
	          k,
	          l = [],
	          m,
	          p,
	          y,
	          z,
	          A,
	          J = [],
	          F,
	          C,
	          N,
	          L = 0;for (m = b.length; L < m; L++) {
	        l.push(L);
	      }F = 0;for (var Q = 2 * l.length; 0 < l.length;) {
	        Q--;if (0 > Q) {
	          console.log("Infinite Loop! Holes left:" + l.length + ", Probably Hole outside Shape!");break;
	        }for (p = F; p < h.length; p++) {
	          y = h[p];m = -1;for (L = 0; L < l.length; L++) {
	            if (z = l[L], A = y.x + ":" + y.y + ":" + z, void 0 === J[A]) {
	              k = b[z];for (C = 0; C < k.length; C++) {
	                if (z = k[C], c(p, C) && !f(y, z) && !g(y, z)) {
	                  m = C;l.splice(L, 1);
	                  F = h.slice(0, p + 1);z = h.slice(p);C = k.slice(m);N = k.slice(0, m + 1);h = F.concat(C).concat(N).concat(z);F = p;break;
	                }
	              }if (0 <= m) break;J[A] = !0;
	            }
	          }if (0 <= m) break;
	        }
	      }return h;
	    }(a, b);var p = THREE.ShapeUtils.triangulate(g, !1);g = 0;for (f = p.length; g < f; g++) {
	      for (l = p[g], h = 0; 3 > h; h++) {
	        k = l[h].x + ":" + l[h].y, k = m[k], void 0 !== k && (l[h] = k);
	      }
	    }return p.concat();
	  }, isClockWise: function isClockWise(a) {
	    return 0 > THREE.ShapeUtils.area(a);
	  }, b2: function () {
	    return function (a, b, c, d) {
	      var e = 1 - a;return e * e * b + 2 * (1 - a) * a * c + a * a * d;
	    };
	  }(), b3: function () {
	    return function (a, b, c, d, e) {
	      var g = 1 - a,
	          f = 1 - a;return g * g * g * b + 3 * f * f * a * c + 3 * (1 - a) * a * a * d + a * a * a * e;
	    };
	  }() };THREE.Audio = function (a) {
	  THREE.Object3D.call(this);this.type = "Audio";this.context = a.context;this.source = this.context.createBufferSource();this.source.onended = this.onEnded.bind(this);this.gain = this.context.createGain();this.gain.connect(this.context.destination);this.panner = this.context.createPanner();this.panner.connect(this.gain);this.autoplay = !1;this.startTime = 0;this.playbackRate = 1;this.isPlaying = !1;
	};THREE.Audio.prototype = Object.create(THREE.Object3D.prototype);
	THREE.Audio.prototype.constructor = THREE.Audio;THREE.Audio.prototype.load = function (a) {
	  var b = this,
	      c = new XMLHttpRequest();c.open("GET", a, !0);c.responseType = "arraybuffer";c.onload = function (a) {
	    b.context.decodeAudioData(this.response, function (a) {
	      b.source.buffer = a;b.autoplay && b.play();
	    });
	  };c.send();return this;
	};
	THREE.Audio.prototype.play = function () {
	  if (!0 === this.isPlaying) console.warn("THREE.Audio: Audio is already playing.");else {
	    var a = this.context.createBufferSource();a.buffer = this.source.buffer;a.loop = this.source.loop;a.onended = this.source.onended;a.start(0, this.startTime);a.playbackRate.value = this.playbackRate;this.isPlaying = !0;this.source = a;this.connect();
	  }
	};THREE.Audio.prototype.pause = function () {
	  this.source.stop();this.startTime = this.context.currentTime;
	};
	THREE.Audio.prototype.stop = function () {
	  this.source.stop();this.startTime = 0;
	};THREE.Audio.prototype.connect = function () {
	  void 0 !== this.filter ? (this.source.connect(this.filter), this.filter.connect(this.panner)) : this.source.connect(this.panner);
	};THREE.Audio.prototype.disconnect = function () {
	  void 0 !== this.filter ? (this.source.disconnect(this.filter), this.filter.disconnect(this.panner)) : this.source.disconnect(this.panner);
	};
	THREE.Audio.prototype.setFilter = function (a) {
	  !0 === this.isPlaying ? (this.disconnect(), this.filter = a, this.connect()) : this.filter = a;
	};THREE.Audio.prototype.getFilter = function () {
	  return this.filter;
	};THREE.Audio.prototype.setPlaybackRate = function (a) {
	  this.playbackRate = a;!0 === this.isPlaying && (this.source.playbackRate.value = this.playbackRate);
	};THREE.Audio.prototype.getPlaybackRate = function () {
	  return this.playbackRate;
	};THREE.Audio.prototype.onEnded = function () {
	  this.isPlaying = !1;
	};
	THREE.Audio.prototype.setLoop = function (a) {
	  this.source.loop = a;
	};THREE.Audio.prototype.getLoop = function () {
	  return this.source.loop;
	};THREE.Audio.prototype.setRefDistance = function (a) {
	  this.panner.refDistance = a;
	};THREE.Audio.prototype.getRefDistance = function () {
	  return this.panner.refDistance;
	};THREE.Audio.prototype.setRolloffFactor = function (a) {
	  this.panner.rolloffFactor = a;
	};THREE.Audio.prototype.getRolloffFactor = function () {
	  return this.panner.rolloffFactor;
	};
	THREE.Audio.prototype.setVolume = function (a) {
	  this.gain.gain.value = a;
	};THREE.Audio.prototype.getVolume = function () {
	  return this.gain.gain.value;
	};THREE.Audio.prototype.updateMatrixWorld = function () {
	  var a = new THREE.Vector3();return function (b) {
	    THREE.Object3D.prototype.updateMatrixWorld.call(this, b);a.setFromMatrixPosition(this.matrixWorld);this.panner.setPosition(a.x, a.y, a.z);
	  };
	}();THREE.AudioListener = function () {
	  THREE.Object3D.call(this);this.type = "AudioListener";this.context = new (window.AudioContext || window.webkitAudioContext)();
	};
	THREE.AudioListener.prototype = Object.create(THREE.Object3D.prototype);THREE.AudioListener.prototype.constructor = THREE.AudioListener;
	THREE.AudioListener.prototype.updateMatrixWorld = function () {
	  var a = new THREE.Vector3(),
	      b = new THREE.Quaternion(),
	      c = new THREE.Vector3(),
	      d = new THREE.Vector3();return function (e) {
	    THREE.Object3D.prototype.updateMatrixWorld.call(this, e);e = this.context.listener;var g = this.up;this.matrixWorld.decompose(a, b, c);d.set(0, 0, -1).applyQuaternion(b);e.setPosition(a.x, a.y, a.z);e.setOrientation(d.x, d.y, d.z, g.x, g.y, g.z);
	  };
	}();THREE.Curve = function () {};
	THREE.Curve.prototype = { constructor: THREE.Curve, getPoint: function getPoint(a) {
	    console.warn("THREE.Curve: Warning, getPoint() not implemented!");return null;
	  }, getPointAt: function getPointAt(a) {
	    a = this.getUtoTmapping(a);return this.getPoint(a);
	  }, getPoints: function getPoints(a) {
	    a || (a = 5);var b,
	        c = [];for (b = 0; b <= a; b++) {
	      c.push(this.getPoint(b / a));
	    }return c;
	  }, getSpacedPoints: function getSpacedPoints(a) {
	    a || (a = 5);var b,
	        c = [];for (b = 0; b <= a; b++) {
	      c.push(this.getPointAt(b / a));
	    }return c;
	  }, getLength: function getLength() {
	    var a = this.getLengths();return a[a.length - 1];
	  }, getLengths: function getLengths(a) {
	    a || (a = this.__arcLengthDivisions ? this.__arcLengthDivisions : 200);if (this.cacheArcLengths && this.cacheArcLengths.length === a + 1 && !this.needsUpdate) return this.cacheArcLengths;this.needsUpdate = !1;var b = [],
	        c,
	        d = this.getPoint(0),
	        e,
	        g = 0;b.push(0);for (e = 1; e <= a; e++) {
	      c = this.getPoint(e / a), g += c.distanceTo(d), b.push(g), d = c;
	    }return this.cacheArcLengths = b;
	  }, updateArcLengths: function updateArcLengths() {
	    this.needsUpdate = !0;this.getLengths();
	  }, getUtoTmapping: function getUtoTmapping(a, b) {
	    var c = this.getLengths(),
	        d = 0,
	        e = c.length,
	        g;g = b ? b : a * c[e - 1];for (var f = 0, h = e - 1, l; f <= h;) {
	      if (d = Math.floor(f + (h - f) / 2), l = c[d] - g, 0 > l) f = d + 1;else if (0 < l) h = d - 1;else {
	        h = d;break;
	      }
	    }d = h;if (c[d] === g) return d / (e - 1);f = c[d];return c = (d + (g - f) / (c[d + 1] - f)) / (e - 1);
	  }, getTangent: function getTangent(a) {
	    var b = a - 1E-4;a += 1E-4;0 > b && (b = 0);1 < a && (a = 1);b = this.getPoint(b);return this.getPoint(a).clone().sub(b).normalize();
	  }, getTangentAt: function getTangentAt(a) {
	    a = this.getUtoTmapping(a);return this.getTangent(a);
	  } };THREE.Curve.Utils = THREE.CurveUtils;
	THREE.Curve.create = function (a, b) {
	  a.prototype = Object.create(THREE.Curve.prototype);a.prototype.constructor = a;a.prototype.getPoint = b;return a;
	};THREE.CurvePath = function () {
	  this.curves = [];this.autoClose = !1;
	};THREE.CurvePath.prototype = Object.create(THREE.Curve.prototype);THREE.CurvePath.prototype.constructor = THREE.CurvePath;THREE.CurvePath.prototype.add = function (a) {
	  this.curves.push(a);
	};
	THREE.CurvePath.prototype.closePath = function () {
	  var a = this.curves[0].getPoint(0),
	      b = this.curves[this.curves.length - 1].getPoint(1);a.equals(b) || this.curves.push(new THREE.LineCurve(b, a));
	};THREE.CurvePath.prototype.getPoint = function (a) {
	  for (var b = a * this.getLength(), c = this.getCurveLengths(), d = 0; d < c.length;) {
	    if (c[d] >= b) return a = this.curves[d], b = 1 - (c[d] - b) / a.getLength(), a.getPointAt(b);d++;
	  }return null;
	};THREE.CurvePath.prototype.getLength = function () {
	  var a = this.getCurveLengths();return a[a.length - 1];
	};
	THREE.CurvePath.prototype.getCurveLengths = function () {
	  if (this.cacheLengths && this.cacheLengths.length === this.curves.length) return this.cacheLengths;for (var a = [], b = 0, c = 0, d = this.curves.length; c < d; c++) {
	    b += this.curves[c].getLength(), a.push(b);
	  }return this.cacheLengths = a;
	};THREE.CurvePath.prototype.createPointsGeometry = function (a) {
	  a = this.getPoints(a, !0);return this.createGeometry(a);
	};THREE.CurvePath.prototype.createSpacedPointsGeometry = function (a) {
	  a = this.getSpacedPoints(a, !0);return this.createGeometry(a);
	};
	THREE.CurvePath.prototype.createGeometry = function (a) {
	  for (var b = new THREE.Geometry(), c = 0, d = a.length; c < d; c++) {
	    var e = a[c];b.vertices.push(new THREE.Vector3(e.x, e.y, e.z || 0));
	  }return b;
	};THREE.Path = function (a) {
	  THREE.CurvePath.call(this);this.actions = [];a && this.fromPoints(a);
	};THREE.Path.prototype = Object.create(THREE.CurvePath.prototype);THREE.Path.prototype.constructor = THREE.Path;THREE.Path.prototype.fromPoints = function (a) {
	  this.moveTo(a[0].x, a[0].y);for (var b = 1, c = a.length; b < c; b++) {
	    this.lineTo(a[b].x, a[b].y);
	  }
	};
	THREE.Path.prototype.moveTo = function (a, b) {
	  this.actions.push({ action: "moveTo", args: [a, b] });
	};THREE.Path.prototype.lineTo = function (a, b) {
	  var c = this.actions[this.actions.length - 1].args,
	      c = new THREE.LineCurve(new THREE.Vector2(c[c.length - 2], c[c.length - 1]), new THREE.Vector2(a, b));this.curves.push(c);this.actions.push({ action: "lineTo", args: [a, b] });
	};
	THREE.Path.prototype.quadraticCurveTo = function (a, b, c, d) {
	  var e = this.actions[this.actions.length - 1].args,
	      e = new THREE.QuadraticBezierCurve(new THREE.Vector2(e[e.length - 2], e[e.length - 1]), new THREE.Vector2(a, b), new THREE.Vector2(c, d));this.curves.push(e);this.actions.push({ action: "quadraticCurveTo", args: [a, b, c, d] });
	};
	THREE.Path.prototype.bezierCurveTo = function (a, b, c, d, e, g) {
	  var f = this.actions[this.actions.length - 1].args,
	      f = new THREE.CubicBezierCurve(new THREE.Vector2(f[f.length - 2], f[f.length - 1]), new THREE.Vector2(a, b), new THREE.Vector2(c, d), new THREE.Vector2(e, g));this.curves.push(f);this.actions.push({ action: "bezierCurveTo", args: [a, b, c, d, e, g] });
	};
	THREE.Path.prototype.splineThru = function (a) {
	  var b = Array.prototype.slice.call(arguments),
	      c = this.actions[this.actions.length - 1].args,
	      c = [new THREE.Vector2(c[c.length - 2], c[c.length - 1])];Array.prototype.push.apply(c, a);c = new THREE.SplineCurve(c);this.curves.push(c);this.actions.push({ action: "splineThru", args: b });
	};THREE.Path.prototype.arc = function (a, b, c, d, e, g) {
	  var f = this.actions[this.actions.length - 1].args;this.absarc(a + f[f.length - 2], b + f[f.length - 1], c, d, e, g);
	};
	THREE.Path.prototype.absarc = function (a, b, c, d, e, g) {
	  this.absellipse(a, b, c, c, d, e, g);
	};THREE.Path.prototype.ellipse = function (a, b, c, d, e, g, f, h) {
	  var l = this.actions[this.actions.length - 1].args;this.absellipse(a + l[l.length - 2], b + l[l.length - 1], c, d, e, g, f, h);
	};THREE.Path.prototype.absellipse = function (a, b, c, d, e, g, f, h) {
	  var l = [a, b, c, d, e, g, f, h || 0];a = new THREE.EllipseCurve(a, b, c, d, e, g, f, h);this.curves.push(a);a = a.getPoint(1);l.push(a.x);l.push(a.y);this.actions.push({ action: "ellipse", args: l });
	};
	THREE.Path.prototype.getSpacedPoints = function (a, b) {
	  a || (a = 40);for (var c = [], d = 0; d < a; d++) {
	    c.push(this.getPoint(d / a));
	  }return c;
	};
	THREE.Path.prototype.getPoints = function (a, b) {
	  a = a || 12;for (var c = THREE.ShapeUtils.b2, d = THREE.ShapeUtils.b3, e = [], g, f, h, l, k, m, p, n, q, s, t = 0, v = this.actions.length; t < v; t++) {
	    q = this.actions[t];var u = q.args;switch (q.action) {case "moveTo":
	        e.push(new THREE.Vector2(u[0], u[1]));break;case "lineTo":
	        e.push(new THREE.Vector2(u[0], u[1]));break;case "quadraticCurveTo":
	        g = u[2];f = u[3];k = u[0];m = u[1];0 < e.length ? (q = e[e.length - 1], p = q.x, n = q.y) : (q = this.actions[t - 1].args, p = q[q.length - 2], n = q[q.length - 1]);for (u = 1; u <= a; u++) {
	          s = u / a, q = c(s, p, k, g), s = c(s, n, m, f), e.push(new THREE.Vector2(q, s));
	        }break;case "bezierCurveTo":
	        g = u[4];f = u[5];k = u[0];m = u[1];h = u[2];l = u[3];0 < e.length ? (q = e[e.length - 1], p = q.x, n = q.y) : (q = this.actions[t - 1].args, p = q[q.length - 2], n = q[q.length - 1]);for (u = 1; u <= a; u++) {
	          s = u / a, q = d(s, p, k, h, g), s = d(s, n, m, l, f), e.push(new THREE.Vector2(q, s));
	        }break;case "splineThru":
	        q = this.actions[t - 1].args;s = [new THREE.Vector2(q[q.length - 2], q[q.length - 1])];q = a * u[0].length;s = s.concat(u[0]);s = new THREE.SplineCurve(s);for (u = 1; u <= q; u++) {
	          e.push(s.getPointAt(u / q));
	        }break;case "arc":
	        g = u[0];f = u[1];m = u[2];h = u[3];q = u[4];k = !!u[5];p = q - h;n = 2 * a;for (u = 1; u <= n; u++) {
	          s = u / n, k || (s = 1 - s), s = h + s * p, q = g + m * Math.cos(s), s = f + m * Math.sin(s), e.push(new THREE.Vector2(q, s));
	        }break;case "ellipse":
	        g = u[0];f = u[1];m = u[2];l = u[3];h = u[4];q = u[5];k = !!u[6];var w = u[7];p = q - h;n = 2 * a;var D, x;0 !== w && (D = Math.cos(w), x = Math.sin(w));for (u = 1; u <= n; u++) {
	          s = u / n;k || (s = 1 - s);s = h + s * p;q = g + m * Math.cos(s);s = f + l * Math.sin(s);if (0 !== w) {
	            var B = q;q = (B - g) * D - (s - f) * x + g;s = (B - g) * x + (s - f) * D + f;
	          }e.push(new THREE.Vector2(q, s));
	        }}
	  }c = e[e.length - 1];Math.abs(c.x - e[0].x) < Number.EPSILON && Math.abs(c.y - e[0].y) < Number.EPSILON && e.splice(e.length - 1, 1);b && e.push(e[0]);return e;
	};
	THREE.Path.prototype.toShapes = function (a, b) {
	  function c(a) {
	    for (var b = [], c = 0, d = a.length; c < d; c++) {
	      var e = a[c],
	          f = new THREE.Shape();f.actions = e.actions;f.curves = e.curves;b.push(f);
	    }return b;
	  }function d(a, b) {
	    for (var c = b.length, d = !1, e = c - 1, f = 0; f < c; e = f++) {
	      var g = b[e],
	          h = b[f],
	          k = h.x - g.x,
	          l = h.y - g.y;if (Math.abs(l) > Number.EPSILON) {
	        if (0 > l && (g = b[f], k = -k, h = b[e], l = -l), !(a.y < g.y || a.y > h.y)) if (a.y === g.y) {
	          if (a.x === g.x) return !0;
	        } else {
	          e = l * (a.x - g.x) - k * (a.y - g.y);if (0 === e) return !0;0 > e || (d = !d);
	        }
	      } else if (a.y === g.y && (h.x <= a.x && a.x <= g.x || g.x <= a.x && a.x <= h.x)) return !0;
	    }return d;
	  }var e = THREE.ShapeUtils.isClockWise,
	      g = function (a) {
	    for (var b = [], c = new THREE.Path(), d = 0, e = a.length; d < e; d++) {
	      var f = a[d],
	          g = f.args,
	          f = f.action;"moveTo" === f && 0 !== c.actions.length && (b.push(c), c = new THREE.Path());c[f].apply(c, g);
	    }0 !== c.actions.length && b.push(c);return b;
	  }(this.actions);if (0 === g.length) return [];if (!0 === b) return c(g);var f,
	      h,
	      l,
	      k = [];if (1 === g.length) return h = g[0], l = new THREE.Shape(), l.actions = h.actions, l.curves = h.curves, k.push(l), k;var m = !e(g[0].getPoints()),
	      m = a ? !m : m;l = [];var p = [],
	      n = [],
	      q = 0,
	      s;p[q] = void 0;n[q] = [];for (var t = 0, v = g.length; t < v; t++) {
	    h = g[t], s = h.getPoints(), f = e(s), (f = a ? !f : f) ? (!m && p[q] && q++, p[q] = { s: new THREE.Shape(), p: s }, p[q].s.actions = h.actions, p[q].s.curves = h.curves, m && q++, n[q] = []) : n[q].push({ h: h, p: s[0] });
	  }if (!p[0]) return c(g);if (1 < p.length) {
	    t = !1;h = [];e = 0;for (g = p.length; e < g; e++) {
	      l[e] = [];
	    }e = 0;for (g = p.length; e < g; e++) {
	      for (f = n[e], m = 0; m < f.length; m++) {
	        q = f[m];s = !0;for (v = 0; v < p.length; v++) {
	          d(q.p, p[v].p) && (e !== v && h.push({ froms: e, tos: v, hole: m }), s ? (s = !1, l[v].push(q)) : t = !0);
	        }s && l[e].push(q);
	      }
	    }0 < h.length && (t || (n = l));
	  }t = 0;for (e = p.length; t < e; t++) {
	    for (l = p[t].s, k.push(l), h = n[t], g = 0, f = h.length; g < f; g++) {
	      l.holes.push(h[g].h);
	    }
	  }return k;
	};THREE.Shape = function () {
	  THREE.Path.apply(this, arguments);this.holes = [];
	};THREE.Shape.prototype = Object.create(THREE.Path.prototype);THREE.Shape.prototype.constructor = THREE.Shape;THREE.Shape.prototype.extrude = function (a) {
	  return new THREE.ExtrudeGeometry(this, a);
	};THREE.Shape.prototype.makeGeometry = function (a) {
	  return new THREE.ShapeGeometry(this, a);
	};
	THREE.Shape.prototype.getPointsHoles = function (a) {
	  for (var b = [], c = 0, d = this.holes.length; c < d; c++) {
	    b[c] = this.holes[c].getPoints(a);
	  }return b;
	};THREE.Shape.prototype.extractAllPoints = function (a) {
	  return { shape: this.getPoints(a), holes: this.getPointsHoles(a) };
	};THREE.Shape.prototype.extractPoints = function (a) {
	  return this.extractAllPoints(a);
	};THREE.Shape.Utils = THREE.ShapeUtils;THREE.LineCurve = function (a, b) {
	  this.v1 = a;this.v2 = b;
	};THREE.LineCurve.prototype = Object.create(THREE.Curve.prototype);
	THREE.LineCurve.prototype.constructor = THREE.LineCurve;THREE.LineCurve.prototype.getPoint = function (a) {
	  var b = this.v2.clone().sub(this.v1);b.multiplyScalar(a).add(this.v1);return b;
	};THREE.LineCurve.prototype.getPointAt = function (a) {
	  return this.getPoint(a);
	};THREE.LineCurve.prototype.getTangent = function (a) {
	  return this.v2.clone().sub(this.v1).normalize();
	};THREE.QuadraticBezierCurve = function (a, b, c) {
	  this.v0 = a;this.v1 = b;this.v2 = c;
	};THREE.QuadraticBezierCurve.prototype = Object.create(THREE.Curve.prototype);
	THREE.QuadraticBezierCurve.prototype.constructor = THREE.QuadraticBezierCurve;THREE.QuadraticBezierCurve.prototype.getPoint = function (a) {
	  var b = THREE.ShapeUtils.b2;return new THREE.Vector2(b(a, this.v0.x, this.v1.x, this.v2.x), b(a, this.v0.y, this.v1.y, this.v2.y));
	};THREE.QuadraticBezierCurve.prototype.getTangent = function (a) {
	  var b = THREE.CurveUtils.tangentQuadraticBezier;return new THREE.Vector2(b(a, this.v0.x, this.v1.x, this.v2.x), b(a, this.v0.y, this.v1.y, this.v2.y)).normalize();
	};
	THREE.CubicBezierCurve = function (a, b, c, d) {
	  this.v0 = a;this.v1 = b;this.v2 = c;this.v3 = d;
	};THREE.CubicBezierCurve.prototype = Object.create(THREE.Curve.prototype);THREE.CubicBezierCurve.prototype.constructor = THREE.CubicBezierCurve;THREE.CubicBezierCurve.prototype.getPoint = function (a) {
	  var b = THREE.ShapeUtils.b3;return new THREE.Vector2(b(a, this.v0.x, this.v1.x, this.v2.x, this.v3.x), b(a, this.v0.y, this.v1.y, this.v2.y, this.v3.y));
	};
	THREE.CubicBezierCurve.prototype.getTangent = function (a) {
	  var b = THREE.CurveUtils.tangentCubicBezier;return new THREE.Vector2(b(a, this.v0.x, this.v1.x, this.v2.x, this.v3.x), b(a, this.v0.y, this.v1.y, this.v2.y, this.v3.y)).normalize();
	};THREE.SplineCurve = function (a) {
	  this.points = void 0 == a ? [] : a;
	};THREE.SplineCurve.prototype = Object.create(THREE.Curve.prototype);THREE.SplineCurve.prototype.constructor = THREE.SplineCurve;
	THREE.SplineCurve.prototype.getPoint = function (a) {
	  var b = this.points;a *= b.length - 1;var c = Math.floor(a);a -= c;var d = b[0 === c ? c : c - 1],
	      e = b[c],
	      g = b[c > b.length - 2 ? b.length - 1 : c + 1],
	      b = b[c > b.length - 3 ? b.length - 1 : c + 2],
	      c = THREE.CurveUtils.interpolate;return new THREE.Vector2(c(d.x, e.x, g.x, b.x, a), c(d.y, e.y, g.y, b.y, a));
	};THREE.EllipseCurve = function (a, b, c, d, e, g, f, h) {
	  this.aX = a;this.aY = b;this.xRadius = c;this.yRadius = d;this.aStartAngle = e;this.aEndAngle = g;this.aClockwise = f;this.aRotation = h || 0;
	};THREE.EllipseCurve.prototype = Object.create(THREE.Curve.prototype);
	THREE.EllipseCurve.prototype.constructor = THREE.EllipseCurve;
	THREE.EllipseCurve.prototype.getPoint = function (a) {
	  var b = this.aEndAngle - this.aStartAngle;0 > b && (b += 2 * Math.PI);b > 2 * Math.PI && (b -= 2 * Math.PI);b = !0 === this.aClockwise ? this.aEndAngle + (1 - a) * (2 * Math.PI - b) : this.aStartAngle + a * b;a = this.aX + this.xRadius * Math.cos(b);var c = this.aY + this.yRadius * Math.sin(b);if (0 !== this.aRotation) {
	    var b = Math.cos(this.aRotation),
	        d = Math.sin(this.aRotation),
	        e = a;a = (e - this.aX) * b - (c - this.aY) * d + this.aX;c = (e - this.aX) * d + (c - this.aY) * b + this.aY;
	  }return new THREE.Vector2(a, c);
	};
	THREE.ArcCurve = function (a, b, c, d, e, g) {
	  THREE.EllipseCurve.call(this, a, b, c, c, d, e, g);
	};THREE.ArcCurve.prototype = Object.create(THREE.EllipseCurve.prototype);THREE.ArcCurve.prototype.constructor = THREE.ArcCurve;THREE.LineCurve3 = THREE.Curve.create(function (a, b) {
	  this.v1 = a;this.v2 = b;
	}, function (a) {
	  var b = new THREE.Vector3();b.subVectors(this.v2, this.v1);b.multiplyScalar(a);b.add(this.v1);return b;
	});
	THREE.QuadraticBezierCurve3 = THREE.Curve.create(function (a, b, c) {
	  this.v0 = a;this.v1 = b;this.v2 = c;
	}, function (a) {
	  var b = THREE.ShapeUtils.b2;return new THREE.Vector3(b(a, this.v0.x, this.v1.x, this.v2.x), b(a, this.v0.y, this.v1.y, this.v2.y), b(a, this.v0.z, this.v1.z, this.v2.z));
	});
	THREE.CubicBezierCurve3 = THREE.Curve.create(function (a, b, c, d) {
	  this.v0 = a;this.v1 = b;this.v2 = c;this.v3 = d;
	}, function (a) {
	  var b = THREE.ShapeUtils.b3;return new THREE.Vector3(b(a, this.v0.x, this.v1.x, this.v2.x, this.v3.x), b(a, this.v0.y, this.v1.y, this.v2.y, this.v3.y), b(a, this.v0.z, this.v1.z, this.v2.z, this.v3.z));
	});
	THREE.SplineCurve3 = THREE.Curve.create(function (a) {
	  console.warn("THREE.SplineCurve3 will be deprecated. Please use THREE.CatmullRomCurve3");this.points = void 0 == a ? [] : a;
	}, function (a) {
	  var b = this.points;a *= b.length - 1;var c = Math.floor(a);a -= c;var d = b[0 == c ? c : c - 1],
	      e = b[c],
	      g = b[c > b.length - 2 ? b.length - 1 : c + 1],
	      b = b[c > b.length - 3 ? b.length - 1 : c + 2],
	      c = THREE.CurveUtils.interpolate;return new THREE.Vector3(c(d.x, e.x, g.x, b.x, a), c(d.y, e.y, g.y, b.y, a), c(d.z, e.z, g.z, b.z, a));
	});
	THREE.CatmullRomCurve3 = function () {
	  function a() {}var b = new THREE.Vector3(),
	      c = new a(),
	      d = new a(),
	      e = new a();a.prototype.init = function (a, b, c, d) {
	    this.c0 = a;this.c1 = c;this.c2 = -3 * a + 3 * b - 2 * c - d;this.c3 = 2 * a - 2 * b + c + d;
	  };a.prototype.initNonuniformCatmullRom = function (a, b, c, d, e, m, p) {
	    a = ((b - a) / e - (c - a) / (e + m) + (c - b) / m) * m;d = ((c - b) / m - (d - b) / (m + p) + (d - c) / p) * m;this.init(b, c, a, d);
	  };a.prototype.initCatmullRom = function (a, b, c, d, e) {
	    this.init(b, c, e * (c - a), e * (d - b));
	  };a.prototype.calc = function (a) {
	    var b = a * a;return this.c0 + this.c1 * a + this.c2 * b + this.c3 * b * a;
	  };return THREE.Curve.create(function (a) {
	    this.points = a || [];
	  }, function (a) {
	    var f = this.points,
	        h,
	        l;l = f.length;2 > l && console.log("duh, you need at least 2 points");a *= l - 1;h = Math.floor(a);a -= h;0 === a && h === l - 1 && (h = l - 2, a = 1);var k, m, p;0 === h ? (b.subVectors(f[0], f[1]).add(f[0]), k = b) : k = f[h - 1];m = f[h];p = f[h + 1];h + 2 < l ? f = f[h + 2] : (b.subVectors(f[l - 1], f[l - 2]).add(f[l - 2]), f = b);if (void 0 === this.type || "centripetal" === this.type || "chordal" === this.type) {
	      var n = "chordal" === this.type ? .5 : .25;l = Math.pow(k.distanceToSquared(m), n);
	      h = Math.pow(m.distanceToSquared(p), n);n = Math.pow(p.distanceToSquared(f), n);1E-4 > h && (h = 1);1E-4 > l && (l = h);1E-4 > n && (n = h);c.initNonuniformCatmullRom(k.x, m.x, p.x, f.x, l, h, n);d.initNonuniformCatmullRom(k.y, m.y, p.y, f.y, l, h, n);e.initNonuniformCatmullRom(k.z, m.z, p.z, f.z, l, h, n);
	    } else "catmullrom" === this.type && (l = void 0 !== this.tension ? this.tension : .5, c.initCatmullRom(k.x, m.x, p.x, f.x, l), d.initCatmullRom(k.y, m.y, p.y, f.y, l), e.initCatmullRom(k.z, m.z, p.z, f.z, l));return new THREE.Vector3(c.calc(a), d.calc(a), e.calc(a));
	  });
	}();
	THREE.ClosedSplineCurve3 = THREE.Curve.create(function (a) {
	  this.points = void 0 == a ? [] : a;
	}, function (a) {
	  var b = this.points;a *= b.length - 0;var c = Math.floor(a);a -= c;var c = c + (0 < c ? 0 : (Math.floor(Math.abs(c) / b.length) + 1) * b.length),
	      d = b[(c - 1) % b.length],
	      e = b[c % b.length],
	      g = b[(c + 1) % b.length],
	      b = b[(c + 2) % b.length],
	      c = THREE.CurveUtils.interpolate;return new THREE.Vector3(c(d.x, e.x, g.x, b.x, a), c(d.y, e.y, g.y, b.y, a), c(d.z, e.z, g.z, b.z, a));
	});
	THREE.BoxGeometry = function (a, b, c, d, e, g) {
	  function f(a, b, c, d, e, f, g, t) {
	    var v,
	        u = h.widthSegments,
	        w = h.heightSegments,
	        D = e / 2,
	        x = f / 2,
	        B = h.vertices.length;if ("x" === a && "y" === b || "y" === a && "x" === b) v = "z";else if ("x" === a && "z" === b || "z" === a && "x" === b) v = "y", w = h.depthSegments;else if ("z" === a && "y" === b || "y" === a && "z" === b) v = "x", u = h.depthSegments;var y = u + 1,
	        z = w + 1,
	        A = e / u,
	        J = f / w,
	        F = new THREE.Vector3();F[v] = 0 < g ? 1 : -1;for (e = 0; e < z; e++) {
	      for (f = 0; f < y; f++) {
	        var C = new THREE.Vector3();C[a] = (f * A - D) * c;C[b] = (e * J - x) * d;C[v] = g;h.vertices.push(C);
	      }
	    }for (e = 0; e < w; e++) {
	      for (f = 0; f < u; f++) {
	        x = f + y * e, a = f + y * (e + 1), b = f + 1 + y * (e + 1), c = f + 1 + y * e, d = new THREE.Vector2(f / u, 1 - e / w), g = new THREE.Vector2(f / u, 1 - (e + 1) / w), v = new THREE.Vector2((f + 1) / u, 1 - (e + 1) / w), D = new THREE.Vector2((f + 1) / u, 1 - e / w), x = new THREE.Face3(x + B, a + B, c + B), x.normal.copy(F), x.vertexNormals.push(F.clone(), F.clone(), F.clone()), x.materialIndex = t, h.faces.push(x), h.faceVertexUvs[0].push([d, g, D]), x = new THREE.Face3(a + B, b + B, c + B), x.normal.copy(F), x.vertexNormals.push(F.clone(), F.clone(), F.clone()), x.materialIndex = t, h.faces.push(x), h.faceVertexUvs[0].push([g.clone(), v, D.clone()]);
	      }
	    }
	  }THREE.Geometry.call(this);this.type = "BoxGeometry";this.parameters = { width: a, height: b, depth: c, widthSegments: d, heightSegments: e, depthSegments: g };this.widthSegments = d || 1;this.heightSegments = e || 1;this.depthSegments = g || 1;var h = this;d = a / 2;e = b / 2;g = c / 2;f("z", "y", -1, -1, c, b, d, 0);f("z", "y", 1, -1, c, b, -d, 1);f("x", "z", 1, 1, a, c, e, 2);f("x", "z", 1, -1, a, c, -e, 3);f("x", "y", 1, -1, a, b, g, 4);f("x", "y", -1, -1, a, b, -g, 5);this.mergeVertices();
	};THREE.BoxGeometry.prototype = Object.create(THREE.Geometry.prototype);
	THREE.BoxGeometry.prototype.constructor = THREE.BoxGeometry;THREE.BoxGeometry.prototype.clone = function () {
	  var a = this.parameters;return new THREE.BoxGeometry(a.width, a.height, a.depth, a.widthSegments, a.heightSegments, a.depthSegments);
	};THREE.CubeGeometry = THREE.BoxGeometry;THREE.CircleGeometry = function (a, b, c, d) {
	  THREE.Geometry.call(this);this.type = "CircleGeometry";this.parameters = { radius: a, segments: b, thetaStart: c, thetaLength: d };this.fromBufferGeometry(new THREE.CircleBufferGeometry(a, b, c, d));
	};
	THREE.CircleGeometry.prototype = Object.create(THREE.Geometry.prototype);THREE.CircleGeometry.prototype.constructor = THREE.CircleGeometry;THREE.CircleGeometry.prototype.clone = function () {
	  var a = this.parameters;return new THREE.CircleGeometry(a.radius, a.segments, a.thetaStart, a.thetaLength);
	};
	THREE.CircleBufferGeometry = function (a, b, c, d) {
	  THREE.BufferGeometry.call(this);this.type = "CircleBufferGeometry";this.parameters = { radius: a, segments: b, thetaStart: c, thetaLength: d };a = a || 50;b = void 0 !== b ? Math.max(3, b) : 8;c = void 0 !== c ? c : 0;d = void 0 !== d ? d : 2 * Math.PI;var e = b + 2,
	      g = new Float32Array(3 * e),
	      f = new Float32Array(3 * e),
	      e = new Float32Array(2 * e);f[2] = 1;e[0] = .5;e[1] = .5;for (var h = 0, l = 3, k = 2; h <= b; h++, l += 3, k += 2) {
	    var m = c + h / b * d;g[l] = a * Math.cos(m);g[l + 1] = a * Math.sin(m);f[l + 2] = 1;e[k] = (g[l] / a + 1) / 2;e[k + 1] = (g[l + 1] / a + 1) / 2;
	  }c = [];for (l = 1; l <= b; l++) {
	    c.push(l, l + 1, 0);
	  }this.setIndex(new THREE.BufferAttribute(new Uint16Array(c), 1));this.addAttribute("position", new THREE.BufferAttribute(g, 3));this.addAttribute("normal", new THREE.BufferAttribute(f, 3));this.addAttribute("uv", new THREE.BufferAttribute(e, 2));this.boundingSphere = new THREE.Sphere(new THREE.Vector3(), a);
	};THREE.CircleBufferGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);THREE.CircleBufferGeometry.prototype.constructor = THREE.CircleBufferGeometry;
	THREE.CircleBufferGeometry.prototype.clone = function () {
	  var a = this.parameters;return new THREE.CircleBufferGeometry(a.radius, a.segments, a.thetaStart, a.thetaLength);
	};
	THREE.CylinderGeometry = function (a, b, c, d, e, g, f, h) {
	  THREE.Geometry.call(this);this.type = "CylinderGeometry";this.parameters = { radiusTop: a, radiusBottom: b, height: c, radialSegments: d, heightSegments: e, openEnded: g, thetaStart: f, thetaLength: h };a = void 0 !== a ? a : 20;b = void 0 !== b ? b : 20;c = void 0 !== c ? c : 100;d = d || 8;e = e || 1;g = void 0 !== g ? g : !1;f = void 0 !== f ? f : 0;h = void 0 !== h ? h : 2 * Math.PI;var l = c / 2,
	      k,
	      m,
	      p = [],
	      n = [];for (m = 0; m <= e; m++) {
	    var q = [],
	        s = [],
	        t = m / e,
	        v = t * (b - a) + a;for (k = 0; k <= d; k++) {
	      var u = k / d,
	          w = new THREE.Vector3();w.x = v * Math.sin(u * h + f);w.y = -t * c + l;w.z = v * Math.cos(u * h + f);this.vertices.push(w);q.push(this.vertices.length - 1);s.push(new THREE.Vector2(u, 1 - t));
	    }p.push(q);n.push(s);
	  }c = (b - a) / c;for (k = 0; k < d; k++) {
	    for (0 !== a ? (f = this.vertices[p[0][k]].clone(), h = this.vertices[p[0][k + 1]].clone()) : (f = this.vertices[p[1][k]].clone(), h = this.vertices[p[1][k + 1]].clone()), f.setY(Math.sqrt(f.x * f.x + f.z * f.z) * c).normalize(), h.setY(Math.sqrt(h.x * h.x + h.z * h.z) * c).normalize(), m = 0; m < e; m++) {
	      var q = p[m][k],
	          s = p[m + 1][k],
	          t = p[m + 1][k + 1],
	          v = p[m][k + 1],
	          u = f.clone(),
	          w = f.clone(),
	          D = h.clone(),
	          x = h.clone(),
	          B = n[m][k].clone(),
	          y = n[m + 1][k].clone(),
	          z = n[m + 1][k + 1].clone(),
	          A = n[m][k + 1].clone();this.faces.push(new THREE.Face3(q, s, v, [u, w, x]));this.faceVertexUvs[0].push([B, y, A]);this.faces.push(new THREE.Face3(s, t, v, [w.clone(), D, x.clone()]));this.faceVertexUvs[0].push([y.clone(), z, A.clone()]);
	    }
	  }if (!1 === g && 0 < a) for (this.vertices.push(new THREE.Vector3(0, l, 0)), k = 0; k < d; k++) {
	    q = p[0][k], s = p[0][k + 1], t = this.vertices.length - 1, u = new THREE.Vector3(0, 1, 0), w = new THREE.Vector3(0, 1, 0), D = new THREE.Vector3(0, 1, 0), B = n[0][k].clone(), y = n[0][k + 1].clone(), z = new THREE.Vector2(y.x, 0), this.faces.push(new THREE.Face3(q, s, t, [u, w, D], void 0, 1)), this.faceVertexUvs[0].push([B, y, z]);
	  }if (!1 === g && 0 < b) for (this.vertices.push(new THREE.Vector3(0, -l, 0)), k = 0; k < d; k++) {
	    q = p[e][k + 1], s = p[e][k], t = this.vertices.length - 1, u = new THREE.Vector3(0, -1, 0), w = new THREE.Vector3(0, -1, 0), D = new THREE.Vector3(0, -1, 0), B = n[e][k + 1].clone(), y = n[e][k].clone(), z = new THREE.Vector2(y.x, 1), this.faces.push(new THREE.Face3(q, s, t, [u, w, D], void 0, 2)), this.faceVertexUvs[0].push([B, y, z]);
	  }this.computeFaceNormals();
	};THREE.CylinderGeometry.prototype = Object.create(THREE.Geometry.prototype);THREE.CylinderGeometry.prototype.constructor = THREE.CylinderGeometry;THREE.CylinderGeometry.prototype.clone = function () {
	  var a = this.parameters;return new THREE.CylinderGeometry(a.radiusTop, a.radiusBottom, a.height, a.radialSegments, a.heightSegments, a.openEnded, a.thetaStart, a.thetaLength);
	};
	THREE.EdgesGeometry = function (a, b) {
	  function c(a, b) {
	    return a - b;
	  }THREE.BufferGeometry.call(this);var d = Math.cos(THREE.Math.degToRad(void 0 !== b ? b : 1)),
	      e = [0, 0],
	      g = {},
	      f = ["a", "b", "c"],
	      h;a instanceof THREE.BufferGeometry ? (h = new THREE.Geometry(), h.fromBufferGeometry(a)) : h = a.clone();h.mergeVertices();h.computeFaceNormals();var l = h.vertices;h = h.faces;for (var k = 0, m = h.length; k < m; k++) {
	    for (var p = h[k], n = 0; 3 > n; n++) {
	      e[0] = p[f[n]];e[1] = p[f[(n + 1) % 3]];e.sort(c);var q = e.toString();void 0 === g[q] ? g[q] = { vert1: e[0], vert2: e[1], face1: k,
	        face2: void 0 } : g[q].face2 = k;
	    }
	  }e = [];for (q in g) {
	    if (f = g[q], void 0 === f.face2 || h[f.face1].normal.dot(h[f.face2].normal) <= d) k = l[f.vert1], e.push(k.x), e.push(k.y), e.push(k.z), k = l[f.vert2], e.push(k.x), e.push(k.y), e.push(k.z);
	  }this.addAttribute("position", new THREE.BufferAttribute(new Float32Array(e), 3));
	};THREE.EdgesGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);THREE.EdgesGeometry.prototype.constructor = THREE.EdgesGeometry;
	THREE.ExtrudeGeometry = function (a, b) {
	  "undefined" !== typeof a && (THREE.Geometry.call(this), this.type = "ExtrudeGeometry", a = Array.isArray(a) ? a : [a], this.addShapeList(a, b), this.computeFaceNormals());
	};THREE.ExtrudeGeometry.prototype = Object.create(THREE.Geometry.prototype);THREE.ExtrudeGeometry.prototype.constructor = THREE.ExtrudeGeometry;THREE.ExtrudeGeometry.prototype.addShapeList = function (a, b) {
	  for (var c = a.length, d = 0; d < c; d++) {
	    this.addShape(a[d], b);
	  }
	};
	THREE.ExtrudeGeometry.prototype.addShape = function (a, b) {
	  function c(a, b, c) {
	    b || console.error("THREE.ExtrudeGeometry: vec does not exist");return b.clone().multiplyScalar(c).add(a);
	  }function d(a, b, c) {
	    var d = 1,
	        d = a.x - b.x,
	        e = a.y - b.y,
	        f = c.x - a.x,
	        g = c.y - a.y,
	        h = d * d + e * e;if (Math.abs(d * g - e * f) > Number.EPSILON) {
	      var k = Math.sqrt(h),
	          l = Math.sqrt(f * f + g * g),
	          h = b.x - e / k;b = b.y + d / k;f = ((c.x - g / l - h) * g - (c.y + f / l - b) * f) / (d * g - e * f);c = h + d * f - a.x;a = b + e * f - a.y;d = c * c + a * a;if (2 >= d) return new THREE.Vector2(c, a);d = Math.sqrt(d / 2);
	    } else a = !1, d > Number.EPSILON ? f > Number.EPSILON && (a = !0) : d < -Number.EPSILON ? f < -Number.EPSILON && (a = !0) : Math.sign(e) === Math.sign(g) && (a = !0), a ? (c = -e, a = d, d = Math.sqrt(h)) : (c = d, a = e, d = Math.sqrt(h / 2));return new THREE.Vector2(c / d, a / d);
	  }function e(a, b) {
	    var c, d;for (G = a.length; 0 <= --G;) {
	      c = G;d = G - 1;0 > d && (d = a.length - 1);for (var e = 0, f = q + 2 * m, e = 0; e < f; e++) {
	        var g = T * e,
	            h = T * (e + 1),
	            k = b + c + g,
	            g = b + d + g,
	            l = b + d + h,
	            h = b + c + h,
	            k = k + F,
	            g = g + F,
	            l = l + F,
	            h = h + F;J.faces.push(new THREE.Face3(k, g, h, null, null, 1));J.faces.push(new THREE.Face3(g, l, h, null, null, 1));k = u.generateSideWallUV(J, k, g, l, h);J.faceVertexUvs[0].push([k[0], k[1], k[3]]);J.faceVertexUvs[0].push([k[1], k[2], k[3]]);
	      }
	    }
	  }function g(a, b, c) {
	    J.vertices.push(new THREE.Vector3(a, b, c));
	  }function f(a, b, c) {
	    a += F;b += F;c += F;J.faces.push(new THREE.Face3(a, b, c, null, null, 0));a = u.generateTopUV(J, a, b, c);J.faceVertexUvs[0].push(a);
	  }var h = void 0 !== b.amount ? b.amount : 100,
	      l = void 0 !== b.bevelThickness ? b.bevelThickness : 6,
	      k = void 0 !== b.bevelSize ? b.bevelSize : l - 2,
	      m = void 0 !== b.bevelSegments ? b.bevelSegments : 3,
	      p = void 0 !== b.bevelEnabled ? b.bevelEnabled : !0,
	      n = void 0 !== b.curveSegments ? b.curveSegments : 12,
	      q = void 0 !== b.steps ? b.steps : 1,
	      s = b.extrudePath,
	      t,
	      v = !1,
	      u = void 0 !== b.UVGenerator ? b.UVGenerator : THREE.ExtrudeGeometry.WorldUVGenerator,
	      w,
	      D,
	      x,
	      B;s && (t = s.getSpacedPoints(q), v = !0, p = !1, w = void 0 !== b.frames ? b.frames : new THREE.TubeGeometry.FrenetFrames(s, q, !1), D = new THREE.Vector3(), x = new THREE.Vector3(), B = new THREE.Vector3());p || (k = l = m = 0);var y,
	      z,
	      A,
	      J = this,
	      F = this.vertices.length,
	      s = a.extractPoints(n),
	      n = s.shape,
	      C = s.holes;if (s = !THREE.ShapeUtils.isClockWise(n)) {
	    n = n.reverse();
	    z = 0;for (A = C.length; z < A; z++) {
	      y = C[z], THREE.ShapeUtils.isClockWise(y) && (C[z] = y.reverse());
	    }s = !1;
	  }var N = THREE.ShapeUtils.triangulateShape(n, C),
	      L = n;z = 0;for (A = C.length; z < A; z++) {
	    y = C[z], n = n.concat(y);
	  }var Q,
	      M,
	      K,
	      E,
	      O,
	      T = n.length,
	      H,
	      R = N.length,
	      s = [],
	      G = 0;K = L.length;Q = K - 1;for (M = G + 1; G < K; G++, Q++, M++) {
	    Q === K && (Q = 0), M === K && (M = 0), s[G] = d(L[G], L[Q], L[M]);
	  }var ia = [],
	      U,
	      X = s.concat();z = 0;for (A = C.length; z < A; z++) {
	    y = C[z];U = [];G = 0;K = y.length;Q = K - 1;for (M = G + 1; G < K; G++, Q++, M++) {
	      Q === K && (Q = 0), M === K && (M = 0), U[G] = d(y[G], y[Q], y[M]);
	    }ia.push(U);X = X.concat(U);
	  }for (Q = 0; Q < m; Q++) {
	    K = Q / m;E = l * (1 - K);M = k * Math.sin(K * Math.PI / 2);G = 0;for (K = L.length; G < K; G++) {
	      O = c(L[G], s[G], M), g(O.x, O.y, -E);
	    }z = 0;for (A = C.length; z < A; z++) {
	      for (y = C[z], U = ia[z], G = 0, K = y.length; G < K; G++) {
	        O = c(y[G], U[G], M), g(O.x, O.y, -E);
	      }
	    }
	  }M = k;for (G = 0; G < T; G++) {
	    O = p ? c(n[G], X[G], M) : n[G], v ? (x.copy(w.normals[0]).multiplyScalar(O.x), D.copy(w.binormals[0]).multiplyScalar(O.y), B.copy(t[0]).add(x).add(D), g(B.x, B.y, B.z)) : g(O.x, O.y, 0);
	  }for (K = 1; K <= q; K++) {
	    for (G = 0; G < T; G++) {
	      O = p ? c(n[G], X[G], M) : n[G], v ? (x.copy(w.normals[K]).multiplyScalar(O.x), D.copy(w.binormals[K]).multiplyScalar(O.y), B.copy(t[K]).add(x).add(D), g(B.x, B.y, B.z)) : g(O.x, O.y, h / q * K);
	    }
	  }for (Q = m - 1; 0 <= Q; Q--) {
	    K = Q / m;E = l * (1 - K);M = k * Math.sin(K * Math.PI / 2);G = 0;for (K = L.length; G < K; G++) {
	      O = c(L[G], s[G], M), g(O.x, O.y, h + E);
	    }z = 0;for (A = C.length; z < A; z++) {
	      for (y = C[z], U = ia[z], G = 0, K = y.length; G < K; G++) {
	        O = c(y[G], U[G], M), v ? g(O.x, O.y + t[q - 1].y, t[q - 1].x + E) : g(O.x, O.y, h + E);
	      }
	    }
	  }(function () {
	    if (p) {
	      var a;a = 0 * T;for (G = 0; G < R; G++) {
	        H = N[G], f(H[2] + a, H[1] + a, H[0] + a);
	      }a = q + 2 * m;a *= T;for (G = 0; G < R; G++) {
	        H = N[G], f(H[0] + a, H[1] + a, H[2] + a);
	      }
	    } else {
	      for (G = 0; G < R; G++) {
	        H = N[G], f(H[2], H[1], H[0]);
	      }for (G = 0; G < R; G++) {
	        H = N[G], f(H[0] + T * q, H[1] + T * q, H[2] + T * q);
	      }
	    }
	  })();(function () {
	    var a = 0;e(L, a);a += L.length;z = 0;for (A = C.length; z < A; z++) {
	      y = C[z], e(y, a), a += y.length;
	    }
	  })();
	};
	THREE.ExtrudeGeometry.WorldUVGenerator = { generateTopUV: function generateTopUV(a, b, c, d) {
	    a = a.vertices;b = a[b];c = a[c];d = a[d];return [new THREE.Vector2(b.x, b.y), new THREE.Vector2(c.x, c.y), new THREE.Vector2(d.x, d.y)];
	  }, generateSideWallUV: function generateSideWallUV(a, b, c, d, e) {
	    a = a.vertices;b = a[b];c = a[c];d = a[d];e = a[e];return .01 > Math.abs(b.y - c.y) ? [new THREE.Vector2(b.x, 1 - b.z), new THREE.Vector2(c.x, 1 - c.z), new THREE.Vector2(d.x, 1 - d.z), new THREE.Vector2(e.x, 1 - e.z)] : [new THREE.Vector2(b.y, 1 - b.z), new THREE.Vector2(c.y, 1 - c.z), new THREE.Vector2(d.y, 1 - d.z), new THREE.Vector2(e.y, 1 - e.z)];
	  } };THREE.ShapeGeometry = function (a, b) {
	  THREE.Geometry.call(this);this.type = "ShapeGeometry";!1 === Array.isArray(a) && (a = [a]);this.addShapeList(a, b);this.computeFaceNormals();
	};THREE.ShapeGeometry.prototype = Object.create(THREE.Geometry.prototype);THREE.ShapeGeometry.prototype.constructor = THREE.ShapeGeometry;THREE.ShapeGeometry.prototype.addShapeList = function (a, b) {
	  for (var c = 0, d = a.length; c < d; c++) {
	    this.addShape(a[c], b);
	  }return this;
	};
	THREE.ShapeGeometry.prototype.addShape = function (a, b) {
	  void 0 === b && (b = {});var c = b.material,
	      d = void 0 === b.UVGenerator ? THREE.ExtrudeGeometry.WorldUVGenerator : b.UVGenerator,
	      e,
	      g,
	      f,
	      h = this.vertices.length;e = a.extractPoints(void 0 !== b.curveSegments ? b.curveSegments : 12);var l = e.shape,
	      k = e.holes;if (!THREE.ShapeUtils.isClockWise(l)) for (l = l.reverse(), e = 0, g = k.length; e < g; e++) {
	    f = k[e], THREE.ShapeUtils.isClockWise(f) && (k[e] = f.reverse());
	  }var m = THREE.ShapeUtils.triangulateShape(l, k);e = 0;for (g = k.length; e < g; e++) {
	    f = k[e], l = l.concat(f);
	  }k = l.length;g = m.length;for (e = 0; e < k; e++) {
	    f = l[e], this.vertices.push(new THREE.Vector3(f.x, f.y, 0));
	  }for (e = 0; e < g; e++) {
	    k = m[e], l = k[0] + h, f = k[1] + h, k = k[2] + h, this.faces.push(new THREE.Face3(l, f, k, null, null, c)), this.faceVertexUvs[0].push(d.generateTopUV(this, l, f, k));
	  }
	};
	THREE.LatheGeometry = function (a, b, c, d) {
	  THREE.Geometry.call(this);this.type = "LatheGeometry";this.parameters = { points: a, segments: b, phiStart: c, phiLength: d };b = b || 12;c = c || 0;d = d || 2 * Math.PI;for (var e = 1 / (a.length - 1), g = 1 / b, f = 0, h = b; f <= h; f++) {
	    for (var l = c + f * g * d, k = Math.cos(l), m = Math.sin(l), l = 0, p = a.length; l < p; l++) {
	      var n = a[l],
	          q = new THREE.Vector3();q.x = k * n.x - m * n.y;q.y = m * n.x + k * n.y;q.z = n.z;this.vertices.push(q);
	    }
	  }c = a.length;f = 0;for (h = b; f < h; f++) {
	    for (l = 0, p = a.length - 1; l < p; l++) {
	      b = m = l + c * f;d = m + c;var k = m + 1 + c,
	          m = m + 1,
	          n = f * g,
	          q = l * e,
	          s = n + g,
	          t = q + e;this.faces.push(new THREE.Face3(b, d, m));this.faceVertexUvs[0].push([new THREE.Vector2(n, q), new THREE.Vector2(s, q), new THREE.Vector2(n, t)]);this.faces.push(new THREE.Face3(d, k, m));this.faceVertexUvs[0].push([new THREE.Vector2(s, q), new THREE.Vector2(s, t), new THREE.Vector2(n, t)]);
	    }
	  }this.mergeVertices();this.computeFaceNormals();this.computeVertexNormals();
	};THREE.LatheGeometry.prototype = Object.create(THREE.Geometry.prototype);THREE.LatheGeometry.prototype.constructor = THREE.LatheGeometry;
	THREE.PlaneGeometry = function (a, b, c, d) {
	  THREE.Geometry.call(this);this.type = "PlaneGeometry";this.parameters = { width: a, height: b, widthSegments: c, heightSegments: d };this.fromBufferGeometry(new THREE.PlaneBufferGeometry(a, b, c, d));
	};THREE.PlaneGeometry.prototype = Object.create(THREE.Geometry.prototype);THREE.PlaneGeometry.prototype.constructor = THREE.PlaneGeometry;THREE.PlaneGeometry.prototype.clone = function () {
	  var a = this.parameters;return new THREE.PlaneGeometry(a.width, a.height, a.widthSegments, a.heightSegments);
	};
	THREE.PlaneBufferGeometry = function (a, b, c, d) {
	  THREE.BufferGeometry.call(this);this.type = "PlaneBufferGeometry";this.parameters = { width: a, height: b, widthSegments: c, heightSegments: d };var e = a / 2,
	      g = b / 2;c = Math.floor(c) || 1;d = Math.floor(d) || 1;var f = c + 1,
	      h = d + 1,
	      l = a / c,
	      k = b / d;b = new Float32Array(f * h * 3);a = new Float32Array(f * h * 3);for (var m = new Float32Array(f * h * 2), p = 0, n = 0, q = 0; q < h; q++) {
	    for (var s = q * k - g, t = 0; t < f; t++) {
	      b[p] = t * l - e, b[p + 1] = -s, a[p + 2] = 1, m[n] = t / c, m[n + 1] = 1 - q / d, p += 3, n += 2;
	    }
	  }p = 0;e = new (65535 < b.length / 3 ? Uint32Array : Uint16Array)(c * d * 6);for (q = 0; q < d; q++) {
	    for (t = 0; t < c; t++) {
	      g = t + f * (q + 1), h = t + 1 + f * (q + 1), l = t + 1 + f * q, e[p] = t + f * q, e[p + 1] = g, e[p + 2] = l, e[p + 3] = g, e[p + 4] = h, e[p + 5] = l, p += 6;
	    }
	  }this.setIndex(new THREE.BufferAttribute(e, 1));this.addAttribute("position", new THREE.BufferAttribute(b, 3));this.addAttribute("normal", new THREE.BufferAttribute(a, 3));this.addAttribute("uv", new THREE.BufferAttribute(m, 2));
	};THREE.PlaneBufferGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);THREE.PlaneBufferGeometry.prototype.constructor = THREE.PlaneBufferGeometry;
	THREE.PlaneBufferGeometry.prototype.clone = function () {
	  var a = this.parameters;return new THREE.PlaneBufferGeometry(a.width, a.height, a.widthSegments, a.heightSegments);
	};
	THREE.RingGeometry = function (a, b, c, d, e, g) {
	  THREE.Geometry.call(this);this.type = "RingGeometry";this.parameters = { innerRadius: a, outerRadius: b, thetaSegments: c, phiSegments: d, thetaStart: e, thetaLength: g };a = a || 0;b = b || 50;e = void 0 !== e ? e : 0;g = void 0 !== g ? g : 2 * Math.PI;c = void 0 !== c ? Math.max(3, c) : 8;d = void 0 !== d ? Math.max(1, d) : 8;var f,
	      h = [],
	      l = a,
	      k = (b - a) / d;for (a = 0; a < d + 1; a++) {
	    for (f = 0; f < c + 1; f++) {
	      var m = new THREE.Vector3(),
	          p = e + f / c * g;m.x = l * Math.cos(p);m.y = l * Math.sin(p);this.vertices.push(m);h.push(new THREE.Vector2((m.x / b + 1) / 2, (m.y / b + 1) / 2));
	    }l += k;
	  }b = new THREE.Vector3(0, 0, 1);for (a = 0; a < d; a++) {
	    for (e = a * (c + 1), f = 0; f < c; f++) {
	      g = p = f + e, k = p + c + 1, m = p + c + 2, this.faces.push(new THREE.Face3(g, k, m, [b.clone(), b.clone(), b.clone()])), this.faceVertexUvs[0].push([h[g].clone(), h[k].clone(), h[m].clone()]), g = p, k = p + c + 2, m = p + 1, this.faces.push(new THREE.Face3(g, k, m, [b.clone(), b.clone(), b.clone()])), this.faceVertexUvs[0].push([h[g].clone(), h[k].clone(), h[m].clone()]);
	    }
	  }this.computeFaceNormals();this.boundingSphere = new THREE.Sphere(new THREE.Vector3(), l);
	};
	THREE.RingGeometry.prototype = Object.create(THREE.Geometry.prototype);THREE.RingGeometry.prototype.constructor = THREE.RingGeometry;THREE.RingGeometry.prototype.clone = function () {
	  var a = this.parameters;return new THREE.RingGeometry(a.innerRadius, a.outerRadius, a.thetaSegments, a.phiSegments, a.thetaStart, a.thetaLength);
	};
	THREE.SphereGeometry = function (a, b, c, d, e, g, f) {
	  THREE.Geometry.call(this);this.type = "SphereGeometry";this.parameters = { radius: a, widthSegments: b, heightSegments: c, phiStart: d, phiLength: e, thetaStart: g, thetaLength: f };this.fromBufferGeometry(new THREE.SphereBufferGeometry(a, b, c, d, e, g, f));
	};THREE.SphereGeometry.prototype = Object.create(THREE.Geometry.prototype);THREE.SphereGeometry.prototype.constructor = THREE.SphereGeometry;
	THREE.SphereGeometry.prototype.clone = function () {
	  var a = this.parameters;return new THREE.SphereGeometry(a.radius, a.widthSegments, a.heightSegments, a.phiStart, a.phiLength, a.thetaStart, a.thetaLength);
	};
	THREE.SphereBufferGeometry = function (a, b, c, d, e, g, f) {
	  THREE.BufferGeometry.call(this);this.type = "SphereBufferGeometry";this.parameters = { radius: a, widthSegments: b, heightSegments: c, phiStart: d, phiLength: e, thetaStart: g, thetaLength: f };a = a || 50;b = Math.max(3, Math.floor(b) || 8);c = Math.max(2, Math.floor(c) || 6);d = void 0 !== d ? d : 0;e = void 0 !== e ? e : 2 * Math.PI;g = void 0 !== g ? g : 0;f = void 0 !== f ? f : Math.PI;for (var h = g + f, l = (b + 1) * (c + 1), k = new THREE.BufferAttribute(new Float32Array(3 * l), 3), m = new THREE.BufferAttribute(new Float32Array(3 * l), 3), l = new THREE.BufferAttribute(new Float32Array(2 * l), 2), p = 0, n = [], q = new THREE.Vector3(), s = 0; s <= c; s++) {
	    for (var t = [], v = s / c, u = 0; u <= b; u++) {
	      var w = u / b,
	          D = -a * Math.cos(d + w * e) * Math.sin(g + v * f),
	          x = a * Math.cos(g + v * f),
	          B = a * Math.sin(d + w * e) * Math.sin(g + v * f);q.set(D, x, B).normalize();k.setXYZ(p, D, x, B);m.setXYZ(p, q.x, q.y, q.z);l.setXY(p, w, 1 - v);t.push(p);p++;
	    }n.push(t);
	  }d = [];for (s = 0; s < c; s++) {
	    for (u = 0; u < b; u++) {
	      e = n[s][u + 1], f = n[s][u], p = n[s + 1][u], q = n[s + 1][u + 1], (0 !== s || 0 < g) && d.push(e, f, q), (s !== c - 1 || h < Math.PI) && d.push(f, p, q);
	    }
	  }this.setIndex(new (65535 < k.count ? THREE.Uint32Attribute : THREE.Uint16Attribute)(d, 1));this.addAttribute("position", k);this.addAttribute("normal", m);this.addAttribute("uv", l);this.boundingSphere = new THREE.Sphere(new THREE.Vector3(), a);
	};THREE.SphereBufferGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);THREE.SphereBufferGeometry.prototype.constructor = THREE.SphereBufferGeometry;
	THREE.SphereBufferGeometry.prototype.clone = function () {
	  var a = this.parameters;return new THREE.SphereBufferGeometry(a.radius, a.widthSegments, a.heightSegments, a.phiStart, a.phiLength, a.thetaStart, a.thetaLength);
	};
	THREE.TorusGeometry = function (a, b, c, d, e) {
	  THREE.Geometry.call(this);this.type = "TorusGeometry";this.parameters = { radius: a, tube: b, radialSegments: c, tubularSegments: d, arc: e };a = a || 100;b = b || 40;c = c || 8;d = d || 6;e = e || 2 * Math.PI;for (var g = new THREE.Vector3(), f = [], h = [], l = 0; l <= c; l++) {
	    for (var k = 0; k <= d; k++) {
	      var m = k / d * e,
	          p = l / c * Math.PI * 2;g.x = a * Math.cos(m);g.y = a * Math.sin(m);var n = new THREE.Vector3();n.x = (a + b * Math.cos(p)) * Math.cos(m);n.y = (a + b * Math.cos(p)) * Math.sin(m);n.z = b * Math.sin(p);this.vertices.push(n);f.push(new THREE.Vector2(k / d, l / c));h.push(n.clone().sub(g).normalize());
	    }
	  }for (l = 1; l <= c; l++) {
	    for (k = 1; k <= d; k++) {
	      a = (d + 1) * l + k - 1, b = (d + 1) * (l - 1) + k - 1, e = (d + 1) * (l - 1) + k, g = (d + 1) * l + k, m = new THREE.Face3(a, b, g, [h[a].clone(), h[b].clone(), h[g].clone()]), this.faces.push(m), this.faceVertexUvs[0].push([f[a].clone(), f[b].clone(), f[g].clone()]), m = new THREE.Face3(b, e, g, [h[b].clone(), h[e].clone(), h[g].clone()]), this.faces.push(m), this.faceVertexUvs[0].push([f[b].clone(), f[e].clone(), f[g].clone()]);
	    }
	  }this.computeFaceNormals();
	};
	THREE.TorusGeometry.prototype = Object.create(THREE.Geometry.prototype);THREE.TorusGeometry.prototype.constructor = THREE.TorusGeometry;THREE.TorusGeometry.prototype.clone = function () {
	  var a = this.parameters;return new THREE.TorusGeometry(a.radius, a.tube, a.radialSegments, a.tubularSegments, a.arc);
	};
	THREE.TorusKnotGeometry = function (a, b, c, d, e, g, f) {
	  function h(a, b, c, d, e) {
	    var f = Math.cos(a),
	        g = Math.sin(a);a *= b / c;b = Math.cos(a);f *= d * (2 + b) * .5;g = d * (2 + b) * g * .5;d = e * d * Math.sin(a) * .5;return new THREE.Vector3(f, g, d);
	  }THREE.Geometry.call(this);this.type = "TorusKnotGeometry";this.parameters = { radius: a, tube: b, radialSegments: c, tubularSegments: d, p: e, q: g, heightScale: f };a = a || 100;b = b || 40;c = c || 64;d = d || 8;e = e || 2;g = g || 3;f = f || 1;for (var l = Array(c), k = new THREE.Vector3(), m = new THREE.Vector3(), p = new THREE.Vector3(), n = 0; n < c; ++n) {
	    l[n] = Array(d);var q = n / c * 2 * e * Math.PI,
	        s = h(q, g, e, a, f),
	        q = h(q + .01, g, e, a, f);k.subVectors(q, s);m.addVectors(q, s);p.crossVectors(k, m);m.crossVectors(p, k);p.normalize();m.normalize();for (q = 0; q < d; ++q) {
	      var t = q / d * 2 * Math.PI,
	          v = -b * Math.cos(t),
	          t = b * Math.sin(t),
	          u = new THREE.Vector3();u.x = s.x + v * m.x + t * p.x;u.y = s.y + v * m.y + t * p.y;u.z = s.z + v * m.z + t * p.z;l[n][q] = this.vertices.push(u) - 1;
	    }
	  }for (n = 0; n < c; ++n) {
	    for (q = 0; q < d; ++q) {
	      e = (n + 1) % c, g = (q + 1) % d, a = l[n][q], b = l[e][q], e = l[e][g], g = l[n][g], f = new THREE.Vector2(n / c, q / d), k = new THREE.Vector2((n + 1) / c, q / d), m = new THREE.Vector2((n + 1) / c, (q + 1) / d), p = new THREE.Vector2(n / c, (q + 1) / d), this.faces.push(new THREE.Face3(a, b, g)), this.faceVertexUvs[0].push([f, k, p]), this.faces.push(new THREE.Face3(b, e, g)), this.faceVertexUvs[0].push([k.clone(), m, p.clone()]);
	    }
	  }this.computeFaceNormals();this.computeVertexNormals();
	};THREE.TorusKnotGeometry.prototype = Object.create(THREE.Geometry.prototype);THREE.TorusKnotGeometry.prototype.constructor = THREE.TorusKnotGeometry;
	THREE.TorusKnotGeometry.prototype.clone = function () {
	  var a = this.parameters;return new THREE.TorusKnotGeometry(a.radius, a.tube, a.radialSegments, a.tubularSegments, a.p, a.q, a.heightScale);
	};
	THREE.TubeGeometry = function (a, b, c, d, e, g) {
	  THREE.Geometry.call(this);this.type = "TubeGeometry";this.parameters = { path: a, segments: b, radius: c, radialSegments: d, closed: e, taper: g };b = b || 64;c = c || 1;d = d || 8;e = e || !1;g = g || THREE.TubeGeometry.NoTaper;var f = [],
	      h,
	      l,
	      k = b + 1,
	      m,
	      p,
	      n,
	      q,
	      s,
	      t = new THREE.Vector3(),
	      v,
	      u,
	      w;v = new THREE.TubeGeometry.FrenetFrames(a, b, e);u = v.normals;w = v.binormals;this.tangents = v.tangents;this.normals = u;this.binormals = w;for (v = 0; v < k; v++) {
	    for (f[v] = [], m = v / (k - 1), s = a.getPointAt(m), h = u[v], l = w[v], n = c * g(m), m = 0; m < d; m++) {
	      p = m / d * 2 * Math.PI, q = -n * Math.cos(p), p = n * Math.sin(p), t.copy(s), t.x += q * h.x + p * l.x, t.y += q * h.y + p * l.y, t.z += q * h.z + p * l.z, f[v][m] = this.vertices.push(new THREE.Vector3(t.x, t.y, t.z)) - 1;
	    }
	  }for (v = 0; v < b; v++) {
	    for (m = 0; m < d; m++) {
	      g = e ? (v + 1) % b : v + 1, k = (m + 1) % d, a = f[v][m], c = f[g][m], g = f[g][k], k = f[v][k], t = new THREE.Vector2(v / b, m / d), u = new THREE.Vector2((v + 1) / b, m / d), w = new THREE.Vector2((v + 1) / b, (m + 1) / d), h = new THREE.Vector2(v / b, (m + 1) / d), this.faces.push(new THREE.Face3(a, c, k)), this.faceVertexUvs[0].push([t, u, h]), this.faces.push(new THREE.Face3(c, g, k)), this.faceVertexUvs[0].push([u.clone(), w, h.clone()]);
	    }
	  }this.computeFaceNormals();this.computeVertexNormals();
	};THREE.TubeGeometry.prototype = Object.create(THREE.Geometry.prototype);THREE.TubeGeometry.prototype.constructor = THREE.TubeGeometry;THREE.TubeGeometry.prototype.clone = function () {
	  return new this.constructor(this.parameters.path, this.parameters.segments, this.parameters.radius, this.parameters.radialSegments, this.parameters.closed, this.parameters.taper);
	};THREE.TubeGeometry.NoTaper = function (a) {
	  return 1;
	};
	THREE.TubeGeometry.SinusoidalTaper = function (a) {
	  return Math.sin(Math.PI * a);
	};
	THREE.TubeGeometry.FrenetFrames = function (a, b, c) {
	  var d = new THREE.Vector3(),
	      e = [],
	      g = [],
	      f = [],
	      h = new THREE.Vector3(),
	      l = new THREE.Matrix4();b += 1;var k, m, p;this.tangents = e;this.normals = g;this.binormals = f;for (k = 0; k < b; k++) {
	    m = k / (b - 1), e[k] = a.getTangentAt(m), e[k].normalize();
	  }g[0] = new THREE.Vector3();f[0] = new THREE.Vector3();a = Number.MAX_VALUE;k = Math.abs(e[0].x);m = Math.abs(e[0].y);p = Math.abs(e[0].z);k <= a && (a = k, d.set(1, 0, 0));m <= a && (a = m, d.set(0, 1, 0));p <= a && d.set(0, 0, 1);h.crossVectors(e[0], d).normalize();g[0].crossVectors(e[0], h);f[0].crossVectors(e[0], g[0]);for (k = 1; k < b; k++) {
	    g[k] = g[k - 1].clone(), f[k] = f[k - 1].clone(), h.crossVectors(e[k - 1], e[k]), h.length() > Number.EPSILON && (h.normalize(), d = Math.acos(THREE.Math.clamp(e[k - 1].dot(e[k]), -1, 1)), g[k].applyMatrix4(l.makeRotationAxis(h, d))), f[k].crossVectors(e[k], g[k]);
	  }if (c) for (d = Math.acos(THREE.Math.clamp(g[0].dot(g[b - 1]), -1, 1)), d /= b - 1, 0 < e[0].dot(h.crossVectors(g[0], g[b - 1])) && (d = -d), k = 1; k < b; k++) {
	    g[k].applyMatrix4(l.makeRotationAxis(e[k], d * k)), f[k].crossVectors(e[k], g[k]);
	  }
	};
	THREE.PolyhedronGeometry = function (a, b, c, d) {
	  function e(a) {
	    var b = a.normalize().clone();b.index = l.vertices.push(b) - 1;var c = Math.atan2(a.z, -a.x) / 2 / Math.PI + .5;a = Math.atan2(-a.y, Math.sqrt(a.x * a.x + a.z * a.z)) / Math.PI + .5;b.uv = new THREE.Vector2(c, 1 - a);return b;
	  }function g(a, b, c, d) {
	    d = new THREE.Face3(a.index, b.index, c.index, [a.clone(), b.clone(), c.clone()], void 0, d);l.faces.push(d);v.copy(a).add(b).add(c).divideScalar(3);d = Math.atan2(v.z, -v.x);l.faceVertexUvs[0].push([h(a.uv, a, d), h(b.uv, b, d), h(c.uv, c, d)]);
	  }function f(a, b) {
	    for (var c = Math.pow(2, b), d = e(l.vertices[a.a]), f = e(l.vertices[a.b]), h = e(l.vertices[a.c]), k = [], n = a.materialIndex, m = 0; m <= c; m++) {
	      k[m] = [];for (var p = e(d.clone().lerp(h, m / c)), q = e(f.clone().lerp(h, m / c)), s = c - m, t = 0; t <= s; t++) {
	        k[m][t] = 0 === t && m === c ? p : e(p.clone().lerp(q, t / s));
	      }
	    }for (m = 0; m < c; m++) {
	      for (t = 0; t < 2 * (c - m) - 1; t++) {
	        d = Math.floor(t / 2), 0 === t % 2 ? g(k[m][d + 1], k[m + 1][d], k[m][d], n) : g(k[m][d + 1], k[m + 1][d + 1], k[m + 1][d], n);
	      }
	    }
	  }function h(a, b, c) {
	    0 > c && 1 === a.x && (a = new THREE.Vector2(a.x - 1, a.y));0 === b.x && 0 === b.z && (a = new THREE.Vector2(c / 2 / Math.PI + .5, a.y));return a.clone();
	  }THREE.Geometry.call(this);this.type = "PolyhedronGeometry";this.parameters = { vertices: a, indices: b, radius: c, detail: d };c = c || 1;d = d || 0;for (var l = this, k = 0, m = a.length; k < m; k += 3) {
	    e(new THREE.Vector3(a[k], a[k + 1], a[k + 2]));
	  }a = this.vertices;for (var p = [], n = k = 0, m = b.length; k < m; k += 3, n++) {
	    var q = a[b[k]],
	        s = a[b[k + 1]],
	        t = a[b[k + 2]];p[n] = new THREE.Face3(q.index, s.index, t.index, [q.clone(), s.clone(), t.clone()], void 0, n);
	  }for (var v = new THREE.Vector3(), k = 0, m = p.length; k < m; k++) {
	    f(p[k], d);
	  }k = 0;for (m = this.faceVertexUvs[0].length; k < m; k++) {
	    b = this.faceVertexUvs[0][k], d = b[0].x, a = b[1].x, p = b[2].x, n = Math.max(d, a, p), q = Math.min(d, a, p), .9 < n && .1 > q && (.2 > d && (b[0].x += 1), .2 > a && (b[1].x += 1), .2 > p && (b[2].x += 1));
	  }k = 0;for (m = this.vertices.length; k < m; k++) {
	    this.vertices[k].multiplyScalar(c);
	  }this.mergeVertices();this.computeFaceNormals();this.boundingSphere = new THREE.Sphere(new THREE.Vector3(), c);
	};THREE.PolyhedronGeometry.prototype = Object.create(THREE.Geometry.prototype);THREE.PolyhedronGeometry.prototype.constructor = THREE.PolyhedronGeometry;
	THREE.PolyhedronGeometry.prototype.clone = function () {
	  var a = this.parameters;return new THREE.PolyhedronGeometry(a.vertices, a.indices, a.radius, a.detail);
	};
	THREE.DodecahedronGeometry = function (a, b) {
	  var c = (1 + Math.sqrt(5)) / 2,
	      d = 1 / c;THREE.PolyhedronGeometry.call(this, [-1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, 0, -d, -c, 0, -d, c, 0, d, -c, 0, d, c, -d, -c, 0, -d, c, 0, d, -c, 0, d, c, 0, -c, 0, -d, c, 0, -d, -c, 0, d, c, 0, d], [3, 11, 7, 3, 7, 15, 3, 15, 13, 7, 19, 17, 7, 17, 6, 7, 6, 15, 17, 4, 8, 17, 8, 10, 17, 10, 6, 8, 0, 16, 8, 16, 2, 8, 2, 10, 0, 12, 1, 0, 1, 18, 0, 18, 16, 6, 10, 2, 6, 2, 13, 6, 13, 15, 2, 16, 18, 2, 18, 3, 2, 3, 13, 18, 1, 9, 18, 9, 11, 18, 11, 3, 4, 14, 12, 4, 12, 0, 4, 0, 8, 11, 9, 5, 11, 5, 19, 11, 19, 7, 19, 5, 14, 19, 14, 4, 19, 4, 17, 1, 12, 14, 1, 14, 5, 1, 5, 9], a, b);this.type = "DodecahedronGeometry";this.parameters = { radius: a, detail: b };
	};THREE.DodecahedronGeometry.prototype = Object.create(THREE.PolyhedronGeometry.prototype);THREE.DodecahedronGeometry.prototype.constructor = THREE.DodecahedronGeometry;THREE.DodecahedronGeometry.prototype.clone = function () {
	  var a = this.parameters;return new THREE.DodecahedronGeometry(a.radius, a.detail);
	};
	THREE.IcosahedronGeometry = function (a, b) {
	  var c = (1 + Math.sqrt(5)) / 2;THREE.PolyhedronGeometry.call(this, [-1, c, 0, 1, c, 0, -1, -c, 0, 1, -c, 0, 0, -1, c, 0, 1, c, 0, -1, -c, 0, 1, -c, c, 0, -1, c, 0, 1, -c, 0, -1, -c, 0, 1], [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1], a, b);this.type = "IcosahedronGeometry";this.parameters = { radius: a, detail: b };
	};THREE.IcosahedronGeometry.prototype = Object.create(THREE.PolyhedronGeometry.prototype);
	THREE.IcosahedronGeometry.prototype.constructor = THREE.IcosahedronGeometry;THREE.IcosahedronGeometry.prototype.clone = function () {
	  var a = this.parameters;return new THREE.IcosahedronGeometry(a.radius, a.detail);
	};THREE.OctahedronGeometry = function (a, b) {
	  THREE.PolyhedronGeometry.call(this, [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1], [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2], a, b);this.type = "OctahedronGeometry";this.parameters = { radius: a, detail: b };
	};THREE.OctahedronGeometry.prototype = Object.create(THREE.PolyhedronGeometry.prototype);
	THREE.OctahedronGeometry.prototype.constructor = THREE.OctahedronGeometry;THREE.OctahedronGeometry.prototype.clone = function () {
	  var a = this.parameters;return new THREE.OctahedronGeometry(a.radius, a.detail);
	};THREE.TetrahedronGeometry = function (a, b) {
	  THREE.PolyhedronGeometry.call(this, [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1], [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1], a, b);this.type = "TetrahedronGeometry";this.parameters = { radius: a, detail: b };
	};THREE.TetrahedronGeometry.prototype = Object.create(THREE.PolyhedronGeometry.prototype);
	THREE.TetrahedronGeometry.prototype.constructor = THREE.TetrahedronGeometry;THREE.TetrahedronGeometry.prototype.clone = function () {
	  var a = this.parameters;return new THREE.TetrahedronGeometry(a.radius, a.detail);
	};
	THREE.ParametricGeometry = function (a, b, c) {
	  THREE.Geometry.call(this);this.type = "ParametricGeometry";this.parameters = { func: a, slices: b, stacks: c };var d = this.vertices,
	      e = this.faces,
	      g = this.faceVertexUvs[0],
	      f,
	      h,
	      l,
	      k,
	      m = b + 1;for (f = 0; f <= c; f++) {
	    for (k = f / c, h = 0; h <= b; h++) {
	      l = h / b, l = a(l, k), d.push(l);
	    }
	  }var p, n, q, s;for (f = 0; f < c; f++) {
	    for (h = 0; h < b; h++) {
	      a = f * m + h, d = f * m + h + 1, k = (f + 1) * m + h + 1, l = (f + 1) * m + h, p = new THREE.Vector2(h / b, f / c), n = new THREE.Vector2((h + 1) / b, f / c), q = new THREE.Vector2((h + 1) / b, (f + 1) / c), s = new THREE.Vector2(h / b, (f + 1) / c), e.push(new THREE.Face3(a, d, l)), g.push([p, n, s]), e.push(new THREE.Face3(d, k, l)), g.push([n.clone(), q, s.clone()]);
	    }
	  }this.computeFaceNormals();this.computeVertexNormals();
	};THREE.ParametricGeometry.prototype = Object.create(THREE.Geometry.prototype);THREE.ParametricGeometry.prototype.constructor = THREE.ParametricGeometry;
	THREE.WireframeGeometry = function (a) {
	  function b(a, b) {
	    return a - b;
	  }THREE.BufferGeometry.call(this);var c = [0, 0],
	      d = {},
	      e = ["a", "b", "c"];if (a instanceof THREE.Geometry) {
	    var g = a.vertices,
	        f = a.faces,
	        h = 0,
	        l = new Uint32Array(6 * f.length);a = 0;for (var k = f.length; a < k; a++) {
	      for (var m = f[a], p = 0; 3 > p; p++) {
	        c[0] = m[e[p]];c[1] = m[e[(p + 1) % 3]];c.sort(b);var n = c.toString();void 0 === d[n] && (l[2 * h] = c[0], l[2 * h + 1] = c[1], d[n] = !0, h++);
	      }
	    }c = new Float32Array(6 * h);a = 0;for (k = h; a < k; a++) {
	      for (p = 0; 2 > p; p++) {
	        d = g[l[2 * a + p]], h = 6 * a + 3 * p, c[h + 0] = d.x, c[h + 1] = d.y, c[h + 2] = d.z;
	      }
	    }this.addAttribute("position", new THREE.BufferAttribute(c, 3));
	  } else if (a instanceof THREE.BufferGeometry) {
	    if (null !== a.index) {
	      k = a.index.array;g = a.attributes.position;e = a.drawcalls;h = 0;0 === e.length && a.addGroup(0, k.length);l = new Uint32Array(2 * k.length);f = 0;for (m = e.length; f < m; ++f) {
	        a = e[f];p = a.start;n = a.count;a = p;for (var q = p + n; a < q; a += 3) {
	          for (p = 0; 3 > p; p++) {
	            c[0] = k[a + p], c[1] = k[a + (p + 1) % 3], c.sort(b), n = c.toString(), void 0 === d[n] && (l[2 * h] = c[0], l[2 * h + 1] = c[1], d[n] = !0, h++);
	          }
	        }
	      }c = new Float32Array(6 * h);a = 0;for (k = h; a < k; a++) {
	        for (p = 0; 2 > p; p++) {
	          h = 6 * a + 3 * p, d = l[2 * a + p], c[h + 0] = g.getX(d), c[h + 1] = g.getY(d), c[h + 2] = g.getZ(d);
	        }
	      }
	    } else for (g = a.attributes.position.array, h = g.length / 3, l = h / 3, c = new Float32Array(6 * h), a = 0, k = l; a < k; a++) {
	      for (p = 0; 3 > p; p++) {
	        h = 18 * a + 6 * p, l = 9 * a + 3 * p, c[h + 0] = g[l], c[h + 1] = g[l + 1], c[h + 2] = g[l + 2], d = 9 * a + (p + 1) % 3 * 3, c[h + 3] = g[d], c[h + 4] = g[d + 1], c[h + 5] = g[d + 2];
	      }
	    }this.addAttribute("position", new THREE.BufferAttribute(c, 3));
	  }
	};THREE.WireframeGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);
	THREE.WireframeGeometry.prototype.constructor = THREE.WireframeGeometry;THREE.AxisHelper = function (a) {
	  a = a || 1;var b = new Float32Array([0, 0, 0, a, 0, 0, 0, 0, 0, 0, a, 0, 0, 0, 0, 0, 0, a]),
	      c = new Float32Array([1, 0, 0, 1, .6, 0, 0, 1, 0, .6, 1, 0, 0, 0, 1, 0, .6, 1]);a = new THREE.BufferGeometry();a.addAttribute("position", new THREE.BufferAttribute(b, 3));a.addAttribute("color", new THREE.BufferAttribute(c, 3));b = new THREE.LineBasicMaterial({ vertexColors: THREE.VertexColors });THREE.LineSegments.call(this, a, b);
	};THREE.AxisHelper.prototype = Object.create(THREE.LineSegments.prototype);
	THREE.AxisHelper.prototype.constructor = THREE.AxisHelper;
	THREE.ArrowHelper = function () {
	  var a = new THREE.Geometry();a.vertices.push(new THREE.Vector3(0, 0, 0), new THREE.Vector3(0, 1, 0));var b = new THREE.CylinderGeometry(0, .5, 1, 5, 1);b.translate(0, -.5, 0);return function (c, d, e, g, f, h) {
	    THREE.Object3D.call(this);void 0 === g && (g = 16776960);void 0 === e && (e = 1);void 0 === f && (f = .2 * e);void 0 === h && (h = .2 * f);this.position.copy(d);f < e && (this.line = new THREE.Line(a, new THREE.LineBasicMaterial({ color: g })), this.line.matrixAutoUpdate = !1, this.add(this.line));this.cone = new THREE.Mesh(b, new THREE.MeshBasicMaterial({ color: g }));
	    this.cone.matrixAutoUpdate = !1;this.add(this.cone);this.setDirection(c);this.setLength(e, f, h);
	  };
	}();THREE.ArrowHelper.prototype = Object.create(THREE.Object3D.prototype);THREE.ArrowHelper.prototype.constructor = THREE.ArrowHelper;THREE.ArrowHelper.prototype.setDirection = function () {
	  var a = new THREE.Vector3(),
	      b;return function (c) {
	    .99999 < c.y ? this.quaternion.set(0, 0, 0, 1) : -.99999 > c.y ? this.quaternion.set(1, 0, 0, 0) : (a.set(c.z, 0, -c.x).normalize(), b = Math.acos(c.y), this.quaternion.setFromAxisAngle(a, b));
	  };
	}();
	THREE.ArrowHelper.prototype.setLength = function (a, b, c) {
	  void 0 === b && (b = .2 * a);void 0 === c && (c = .2 * b);b < a && (this.line.scale.set(1, a - b, 1), this.line.updateMatrix());this.cone.scale.set(c, b, c);this.cone.position.y = a;this.cone.updateMatrix();
	};THREE.ArrowHelper.prototype.setColor = function (a) {
	  void 0 !== this.line && this.line.material.color.set(a);this.cone.material.color.set(a);
	};
	THREE.BoxHelper = function (a) {
	  var b = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]),
	      c = new Float32Array(24),
	      d = new THREE.BufferGeometry();d.setIndex(new THREE.BufferAttribute(b, 1));d.addAttribute("position", new THREE.BufferAttribute(c, 3));THREE.LineSegments.call(this, d, new THREE.LineBasicMaterial({ color: 16776960 }));void 0 !== a && this.update(a);
	};THREE.BoxHelper.prototype = Object.create(THREE.LineSegments.prototype);THREE.BoxHelper.prototype.constructor = THREE.BoxHelper;
	THREE.BoxHelper.prototype.update = function () {
	  var a = new THREE.Box3();return function (b) {
	    a.setFromObject(b);if (!a.empty()) {
	      b = a.min;var c = a.max,
	          d = this.geometry.attributes.position,
	          e = d.array;e[0] = c.x;e[1] = c.y;e[2] = c.z;e[3] = b.x;e[4] = c.y;e[5] = c.z;e[6] = b.x;e[7] = b.y;e[8] = c.z;e[9] = c.x;e[10] = b.y;e[11] = c.z;e[12] = c.x;e[13] = c.y;e[14] = b.z;e[15] = b.x;e[16] = c.y;e[17] = b.z;e[18] = b.x;e[19] = b.y;e[20] = b.z;e[21] = c.x;e[22] = b.y;e[23] = b.z;d.needsUpdate = !0;this.geometry.computeBoundingSphere();
	    }
	  };
	}();
	THREE.BoundingBoxHelper = function (a, b) {
	  var c = void 0 !== b ? b : 8947848;this.object = a;this.box = new THREE.Box3();THREE.Mesh.call(this, new THREE.BoxGeometry(1, 1, 1), new THREE.MeshBasicMaterial({ color: c, wireframe: !0 }));
	};THREE.BoundingBoxHelper.prototype = Object.create(THREE.Mesh.prototype);THREE.BoundingBoxHelper.prototype.constructor = THREE.BoundingBoxHelper;THREE.BoundingBoxHelper.prototype.update = function () {
	  this.box.setFromObject(this.object);this.box.size(this.scale);this.box.center(this.position);
	};
	THREE.CameraHelper = function (a) {
	  function b(a, b, d) {
	    c(a, d);c(b, d);
	  }function c(a, b) {
	    d.vertices.push(new THREE.Vector3());d.colors.push(new THREE.Color(b));void 0 === g[a] && (g[a] = []);g[a].push(d.vertices.length - 1);
	  }var d = new THREE.Geometry(),
	      e = new THREE.LineBasicMaterial({ color: 16777215, vertexColors: THREE.FaceColors }),
	      g = {};b("n1", "n2", 16755200);b("n2", "n4", 16755200);b("n4", "n3", 16755200);b("n3", "n1", 16755200);b("f1", "f2", 16755200);b("f2", "f4", 16755200);b("f4", "f3", 16755200);b("f3", "f1", 16755200);b("n1", "f1", 16755200);
	  b("n2", "f2", 16755200);b("n3", "f3", 16755200);b("n4", "f4", 16755200);b("p", "n1", 16711680);b("p", "n2", 16711680);b("p", "n3", 16711680);b("p", "n4", 16711680);b("u1", "u2", 43775);b("u2", "u3", 43775);b("u3", "u1", 43775);b("c", "t", 16777215);b("p", "c", 3355443);b("cn1", "cn2", 3355443);b("cn3", "cn4", 3355443);b("cf1", "cf2", 3355443);b("cf3", "cf4", 3355443);THREE.LineSegments.call(this, d, e);this.camera = a;this.camera.updateProjectionMatrix();this.matrix = a.matrixWorld;this.matrixAutoUpdate = !1;this.pointMap = g;this.update();
	};
	THREE.CameraHelper.prototype = Object.create(THREE.LineSegments.prototype);THREE.CameraHelper.prototype.constructor = THREE.CameraHelper;
	THREE.CameraHelper.prototype.update = function () {
	  function a(a, f, h, l) {
	    d.set(f, h, l).unproject(e);a = c[a];if (void 0 !== a) for (f = 0, h = a.length; f < h; f++) {
	      b.vertices[a[f]].copy(d);
	    }
	  }var b,
	      c,
	      d = new THREE.Vector3(),
	      e = new THREE.Camera();return function () {
	    b = this.geometry;c = this.pointMap;e.projectionMatrix.copy(this.camera.projectionMatrix);a("c", 0, 0, -1);a("t", 0, 0, 1);a("n1", -1, -1, -1);a("n2", 1, -1, -1);a("n3", -1, 1, -1);a("n4", 1, 1, -1);a("f1", -1, -1, 1);a("f2", 1, -1, 1);a("f3", -1, 1, 1);a("f4", 1, 1, 1);a("u1", .7, 1.1, -1);a("u2", -.7, 1.1, -1);a("u3", 0, 2, -1);a("cf1", -1, 0, 1);a("cf2", 1, 0, 1);a("cf3", 0, -1, 1);a("cf4", 0, 1, 1);a("cn1", -1, 0, -1);a("cn2", 1, 0, -1);a("cn3", 0, -1, -1);a("cn4", 0, 1, -1);b.verticesNeedUpdate = !0;
	  };
	}();
	THREE.DirectionalLightHelper = function (a, b) {
	  THREE.Object3D.call(this);this.light = a;this.light.updateMatrixWorld();this.matrix = a.matrixWorld;this.matrixAutoUpdate = !1;b = b || 1;var c = new THREE.Geometry();c.vertices.push(new THREE.Vector3(-b, b, 0), new THREE.Vector3(b, b, 0), new THREE.Vector3(b, -b, 0), new THREE.Vector3(-b, -b, 0), new THREE.Vector3(-b, b, 0));var d = new THREE.LineBasicMaterial({ fog: !1 });d.color.copy(this.light.color).multiplyScalar(this.light.intensity);this.lightPlane = new THREE.Line(c, d);this.add(this.lightPlane);
	  c = new THREE.Geometry();c.vertices.push(new THREE.Vector3(), new THREE.Vector3());d = new THREE.LineBasicMaterial({ fog: !1 });d.color.copy(this.light.color).multiplyScalar(this.light.intensity);this.targetLine = new THREE.Line(c, d);this.add(this.targetLine);this.update();
	};THREE.DirectionalLightHelper.prototype = Object.create(THREE.Object3D.prototype);THREE.DirectionalLightHelper.prototype.constructor = THREE.DirectionalLightHelper;
	THREE.DirectionalLightHelper.prototype.dispose = function () {
	  this.lightPlane.geometry.dispose();this.lightPlane.material.dispose();this.targetLine.geometry.dispose();this.targetLine.material.dispose();
	};
	THREE.DirectionalLightHelper.prototype.update = function () {
	  var a = new THREE.Vector3(),
	      b = new THREE.Vector3(),
	      c = new THREE.Vector3();return function () {
	    a.setFromMatrixPosition(this.light.matrixWorld);b.setFromMatrixPosition(this.light.target.matrixWorld);c.subVectors(b, a);this.lightPlane.lookAt(c);this.lightPlane.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);this.targetLine.geometry.vertices[1].copy(c);this.targetLine.geometry.verticesNeedUpdate = !0;this.targetLine.material.color.copy(this.lightPlane.material.color);
	  };
	}();
	THREE.EdgesHelper = function (a, b, c) {
	  b = void 0 !== b ? b : 16777215;THREE.LineSegments.call(this, new THREE.EdgesGeometry(a.geometry, c), new THREE.LineBasicMaterial({ color: b }));this.matrix = a.matrixWorld;this.matrixAutoUpdate = !1;
	};THREE.EdgesHelper.prototype = Object.create(THREE.LineSegments.prototype);THREE.EdgesHelper.prototype.constructor = THREE.EdgesHelper;
	THREE.FaceNormalsHelper = function (a, b, c, d) {
	  this.object = a;this.size = void 0 !== b ? b : 1;a = void 0 !== c ? c : 16776960;d = void 0 !== d ? d : 1;b = 0;c = this.object.geometry;c instanceof THREE.Geometry ? b = c.faces.length : console.warn("THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.");c = new THREE.BufferGeometry();b = new THREE.Float32Attribute(6 * b, 3);c.addAttribute("position", b);THREE.LineSegments.call(this, c, new THREE.LineBasicMaterial({ color: a, linewidth: d }));this.matrixAutoUpdate = !1;this.update();
	};THREE.FaceNormalsHelper.prototype = Object.create(THREE.LineSegments.prototype);THREE.FaceNormalsHelper.prototype.constructor = THREE.FaceNormalsHelper;
	THREE.FaceNormalsHelper.prototype.update = function () {
	  var a = new THREE.Vector3(),
	      b = new THREE.Vector3(),
	      c = new THREE.Matrix3();return function () {
	    this.object.updateMatrixWorld(!0);c.getNormalMatrix(this.object.matrixWorld);for (var d = this.object.matrixWorld, e = this.geometry.attributes.position, g = this.object.geometry, f = g.vertices, g = g.faces, h = 0, l = 0, k = g.length; l < k; l++) {
	      var m = g[l],
	          p = m.normal;a.copy(f[m.a]).add(f[m.b]).add(f[m.c]).divideScalar(3).applyMatrix4(d);b.copy(p).applyMatrix3(c).normalize().multiplyScalar(this.size).add(a);
	      e.setXYZ(h, a.x, a.y, a.z);h += 1;e.setXYZ(h, b.x, b.y, b.z);h += 1;
	    }e.needsUpdate = !0;return this;
	  };
	}();
	THREE.GridHelper = function (a, b) {
	  var c = new THREE.Geometry(),
	      d = new THREE.LineBasicMaterial({ vertexColors: THREE.VertexColors });this.color1 = new THREE.Color(4473924);this.color2 = new THREE.Color(8947848);for (var e = -a; e <= a; e += b) {
	    c.vertices.push(new THREE.Vector3(-a, 0, e), new THREE.Vector3(a, 0, e), new THREE.Vector3(e, 0, -a), new THREE.Vector3(e, 0, a));var g = 0 === e ? this.color1 : this.color2;c.colors.push(g, g, g, g);
	  }THREE.LineSegments.call(this, c, d);
	};THREE.GridHelper.prototype = Object.create(THREE.LineSegments.prototype);
	THREE.GridHelper.prototype.constructor = THREE.GridHelper;THREE.GridHelper.prototype.setColors = function (a, b) {
	  this.color1.set(a);this.color2.set(b);this.geometry.colorsNeedUpdate = !0;
	};
	THREE.HemisphereLightHelper = function (a, b) {
	  THREE.Object3D.call(this);this.light = a;this.light.updateMatrixWorld();this.matrix = a.matrixWorld;this.matrixAutoUpdate = !1;this.colors = [new THREE.Color(), new THREE.Color()];var c = new THREE.SphereGeometry(b, 4, 2);c.rotateX(-Math.PI / 2);for (var d = 0; 8 > d; d++) {
	    c.faces[d].color = this.colors[4 > d ? 0 : 1];
	  }d = new THREE.MeshBasicMaterial({ vertexColors: THREE.FaceColors, wireframe: !0 });this.lightSphere = new THREE.Mesh(c, d);this.add(this.lightSphere);this.update();
	};
	THREE.HemisphereLightHelper.prototype = Object.create(THREE.Object3D.prototype);THREE.HemisphereLightHelper.prototype.constructor = THREE.HemisphereLightHelper;THREE.HemisphereLightHelper.prototype.dispose = function () {
	  this.lightSphere.geometry.dispose();this.lightSphere.material.dispose();
	};
	THREE.HemisphereLightHelper.prototype.update = function () {
	  var a = new THREE.Vector3();return function () {
	    this.colors[0].copy(this.light.color).multiplyScalar(this.light.intensity);this.colors[1].copy(this.light.groundColor).multiplyScalar(this.light.intensity);this.lightSphere.lookAt(a.setFromMatrixPosition(this.light.matrixWorld).negate());this.lightSphere.geometry.colorsNeedUpdate = !0;
	  };
	}();
	THREE.PointLightHelper = function (a, b) {
	  this.light = a;this.light.updateMatrixWorld();var c = new THREE.SphereGeometry(b, 4, 2),
	      d = new THREE.MeshBasicMaterial({ wireframe: !0, fog: !1 });d.color.copy(this.light.color).multiplyScalar(this.light.intensity);THREE.Mesh.call(this, c, d);this.matrix = this.light.matrixWorld;this.matrixAutoUpdate = !1;
	};THREE.PointLightHelper.prototype = Object.create(THREE.Mesh.prototype);THREE.PointLightHelper.prototype.constructor = THREE.PointLightHelper;
	THREE.PointLightHelper.prototype.dispose = function () {
	  this.geometry.dispose();this.material.dispose();
	};THREE.PointLightHelper.prototype.update = function () {
	  this.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);
	};
	THREE.SkeletonHelper = function (a) {
	  this.bones = this.getBoneList(a);for (var b = new THREE.Geometry(), c = 0; c < this.bones.length; c++) {
	    this.bones[c].parent instanceof THREE.Bone && (b.vertices.push(new THREE.Vector3()), b.vertices.push(new THREE.Vector3()), b.colors.push(new THREE.Color(0, 0, 1)), b.colors.push(new THREE.Color(0, 1, 0)));
	  }b.dynamic = !0;c = new THREE.LineBasicMaterial({ vertexColors: THREE.VertexColors, depthTest: !1, depthWrite: !1, transparent: !0 });THREE.LineSegments.call(this, b, c);this.root = a;this.matrix = a.matrixWorld;
	  this.matrixAutoUpdate = !1;this.update();
	};THREE.SkeletonHelper.prototype = Object.create(THREE.LineSegments.prototype);THREE.SkeletonHelper.prototype.constructor = THREE.SkeletonHelper;THREE.SkeletonHelper.prototype.getBoneList = function (a) {
	  var b = [];a instanceof THREE.Bone && b.push(a);for (var c = 0; c < a.children.length; c++) {
	    b.push.apply(b, this.getBoneList(a.children[c]));
	  }return b;
	};
	THREE.SkeletonHelper.prototype.update = function () {
	  for (var a = this.geometry, b = new THREE.Matrix4().getInverse(this.root.matrixWorld), c = new THREE.Matrix4(), d = 0, e = 0; e < this.bones.length; e++) {
	    var g = this.bones[e];g.parent instanceof THREE.Bone && (c.multiplyMatrices(b, g.matrixWorld), a.vertices[d].setFromMatrixPosition(c), c.multiplyMatrices(b, g.parent.matrixWorld), a.vertices[d + 1].setFromMatrixPosition(c), d += 2);
	  }a.verticesNeedUpdate = !0;a.computeBoundingSphere();
	};
	THREE.SpotLightHelper = function (a) {
	  THREE.Object3D.call(this);this.light = a;this.light.updateMatrixWorld();this.matrix = a.matrixWorld;this.matrixAutoUpdate = !1;a = new THREE.CylinderGeometry(0, 1, 1, 8, 1, !0);a.translate(0, -.5, 0);a.rotateX(-Math.PI / 2);var b = new THREE.MeshBasicMaterial({ wireframe: !0, fog: !1 });this.cone = new THREE.Mesh(a, b);this.add(this.cone);this.update();
	};THREE.SpotLightHelper.prototype = Object.create(THREE.Object3D.prototype);THREE.SpotLightHelper.prototype.constructor = THREE.SpotLightHelper;
	THREE.SpotLightHelper.prototype.dispose = function () {
	  this.cone.geometry.dispose();this.cone.material.dispose();
	};THREE.SpotLightHelper.prototype.update = function () {
	  var a = new THREE.Vector3(),
	      b = new THREE.Vector3();return function () {
	    var c = this.light.distance ? this.light.distance : 1E4,
	        d = c * Math.tan(this.light.angle);this.cone.scale.set(d, d, c);a.setFromMatrixPosition(this.light.matrixWorld);b.setFromMatrixPosition(this.light.target.matrixWorld);this.cone.lookAt(b.sub(a));this.cone.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);
	  };
	}();
	THREE.VertexNormalsHelper = function (a, b, c, d) {
	  this.object = a;this.size = void 0 !== b ? b : 1;a = void 0 !== c ? c : 16711680;d = void 0 !== d ? d : 1;b = 0;c = this.object.geometry;c instanceof THREE.Geometry ? b = 3 * c.faces.length : c instanceof THREE.BufferGeometry && (b = c.attributes.normal.count);c = new THREE.BufferGeometry();b = new THREE.Float32Attribute(6 * b, 3);c.addAttribute("position", b);THREE.LineSegments.call(this, c, new THREE.LineBasicMaterial({ color: a, linewidth: d }));this.matrixAutoUpdate = !1;this.update();
	};
	THREE.VertexNormalsHelper.prototype = Object.create(THREE.LineSegments.prototype);THREE.VertexNormalsHelper.prototype.constructor = THREE.VertexNormalsHelper;
	THREE.VertexNormalsHelper.prototype.update = function () {
	  var a = new THREE.Vector3(),
	      b = new THREE.Vector3(),
	      c = new THREE.Matrix3();return function () {
	    var d = ["a", "b", "c"];this.object.updateMatrixWorld(!0);c.getNormalMatrix(this.object.matrixWorld);var e = this.object.matrixWorld,
	        g = this.geometry.attributes.position,
	        f = this.object.geometry;if (f instanceof THREE.Geometry) for (var h = f.vertices, l = f.faces, k = f = 0, m = l.length; k < m; k++) {
	      for (var p = l[k], n = 0, q = p.vertexNormals.length; n < q; n++) {
	        var s = p.vertexNormals[n];a.copy(h[p[d[n]]]).applyMatrix4(e);
	        b.copy(s).applyMatrix3(c).normalize().multiplyScalar(this.size).add(a);g.setXYZ(f, a.x, a.y, a.z);f += 1;g.setXYZ(f, b.x, b.y, b.z);f += 1;
	      }
	    } else if (f instanceof THREE.BufferGeometry) for (d = f.attributes.position, h = f.attributes.normal, n = f = 0, q = d.count; n < q; n++) {
	      a.set(d.getX(n), d.getY(n), d.getZ(n)).applyMatrix4(e), b.set(h.getX(n), h.getY(n), h.getZ(n)), b.applyMatrix3(c).normalize().multiplyScalar(this.size).add(a), g.setXYZ(f, a.x, a.y, a.z), f += 1, g.setXYZ(f, b.x, b.y, b.z), f += 1;
	    }g.needsUpdate = !0;return this;
	  };
	}();
	THREE.WireframeHelper = function (a, b) {
	  var c = void 0 !== b ? b : 16777215;THREE.LineSegments.call(this, new THREE.WireframeGeometry(a.geometry), new THREE.LineBasicMaterial({ color: c }));this.matrix = a.matrixWorld;this.matrixAutoUpdate = !1;
	};THREE.WireframeHelper.prototype = Object.create(THREE.LineSegments.prototype);THREE.WireframeHelper.prototype.constructor = THREE.WireframeHelper;THREE.ImmediateRenderObject = function (a) {
	  THREE.Object3D.call(this);this.material = a;this.render = function (a) {};
	};
	THREE.ImmediateRenderObject.prototype = Object.create(THREE.Object3D.prototype);THREE.ImmediateRenderObject.prototype.constructor = THREE.ImmediateRenderObject;THREE.MorphBlendMesh = function (a, b) {
	  THREE.Mesh.call(this, a, b);this.animationsMap = {};this.animationsList = [];var c = this.geometry.morphTargets.length;this.createAnimation("__default", 0, c - 1, c / 1);this.setAnimationWeight("__default", 1);
	};THREE.MorphBlendMesh.prototype = Object.create(THREE.Mesh.prototype);THREE.MorphBlendMesh.prototype.constructor = THREE.MorphBlendMesh;
	THREE.MorphBlendMesh.prototype.createAnimation = function (a, b, c, d) {
	  b = { start: b, end: c, length: c - b + 1, fps: d, duration: (c - b) / d, lastFrame: 0, currentFrame: 0, active: !1, time: 0, direction: 1, weight: 1, directionBackwards: !1, mirroredLoop: !1 };this.animationsMap[a] = b;this.animationsList.push(b);
	};
	THREE.MorphBlendMesh.prototype.autoCreateAnimations = function (a) {
	  for (var b = /([a-z]+)_?(\d+)/, c, d = {}, e = this.geometry, g = 0, f = e.morphTargets.length; g < f; g++) {
	    var h = e.morphTargets[g].name.match(b);if (h && 1 < h.length) {
	      var l = h[1];d[l] || (d[l] = { start: Infinity, end: -Infinity });h = d[l];g < h.start && (h.start = g);g > h.end && (h.end = g);c || (c = l);
	    }
	  }for (l in d) {
	    h = d[l], this.createAnimation(l, h.start, h.end, a);
	  }this.firstAnimation = c;
	};
	THREE.MorphBlendMesh.prototype.setAnimationDirectionForward = function (a) {
	  if (a = this.animationsMap[a]) a.direction = 1, a.directionBackwards = !1;
	};THREE.MorphBlendMesh.prototype.setAnimationDirectionBackward = function (a) {
	  if (a = this.animationsMap[a]) a.direction = -1, a.directionBackwards = !0;
	};THREE.MorphBlendMesh.prototype.setAnimationFPS = function (a, b) {
	  var c = this.animationsMap[a];c && (c.fps = b, c.duration = (c.end - c.start) / c.fps);
	};
	THREE.MorphBlendMesh.prototype.setAnimationDuration = function (a, b) {
	  var c = this.animationsMap[a];c && (c.duration = b, c.fps = (c.end - c.start) / c.duration);
	};THREE.MorphBlendMesh.prototype.setAnimationWeight = function (a, b) {
	  var c = this.animationsMap[a];c && (c.weight = b);
	};THREE.MorphBlendMesh.prototype.setAnimationTime = function (a, b) {
	  var c = this.animationsMap[a];c && (c.time = b);
	};THREE.MorphBlendMesh.prototype.getAnimationTime = function (a) {
	  var b = 0;if (a = this.animationsMap[a]) b = a.time;return b;
	};
	THREE.MorphBlendMesh.prototype.getAnimationDuration = function (a) {
	  var b = -1;if (a = this.animationsMap[a]) b = a.duration;return b;
	};THREE.MorphBlendMesh.prototype.playAnimation = function (a) {
	  var b = this.animationsMap[a];b ? (b.time = 0, b.active = !0) : console.warn("THREE.MorphBlendMesh: animation[" + a + "] undefined in .playAnimation()");
	};THREE.MorphBlendMesh.prototype.stopAnimation = function (a) {
	  if (a = this.animationsMap[a]) a.active = !1;
	};
	THREE.MorphBlendMesh.prototype.update = function (a) {
	  for (var b = 0, c = this.animationsList.length; b < c; b++) {
	    var d = this.animationsList[b];if (d.active) {
	      var e = d.duration / d.length;d.time += d.direction * a;if (d.mirroredLoop) {
	        if (d.time > d.duration || 0 > d.time) d.direction *= -1, d.time > d.duration && (d.time = d.duration, d.directionBackwards = !0), 0 > d.time && (d.time = 0, d.directionBackwards = !1);
	      } else d.time %= d.duration, 0 > d.time && (d.time += d.duration);var g = d.start + THREE.Math.clamp(Math.floor(d.time / e), 0, d.length - 1),
	          f = d.weight;g !== d.currentFrame && (this.morphTargetInfluences[d.lastFrame] = 0, this.morphTargetInfluences[d.currentFrame] = 1 * f, this.morphTargetInfluences[g] = 0, d.lastFrame = d.currentFrame, d.currentFrame = g);e = d.time % e / e;d.directionBackwards && (e = 1 - e);d.currentFrame !== d.lastFrame ? (this.morphTargetInfluences[d.currentFrame] = e * f, this.morphTargetInfluences[d.lastFrame] = (1 - e) * f) : this.morphTargetInfluences[d.currentFrame] = f;
	    }
	  }
	};

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgYTI4MDBhYzBkY2ZiNDMwMGY1OGQiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9UZXJhTWFjL0RvY3VtZW50cy8wMF9TdG9jay8xMF9iYXNlL2Zyb250ZW5kX2Jhc2VfdmVyMDIvZGV2ZWxvcG1lbnQvcHJvamVjdC1uYW1lL2Fzc2V0cy9qcy9fZGV2anMvc3JjL1RvcC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL1RlcmFNYWMvRG9jdW1lbnRzLzAwX1N0b2NrLzEwX2Jhc2UvZnJvbnRlbmRfYmFzZV92ZXIwMi9kZXZlbG9wbWVudC9wcm9qZWN0LW5hbWUvYXNzZXRzL2pzL19kZXZqcy9zcmMvUGFnZS9Db21tb24uanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9UZXJhTWFjL0RvY3VtZW50cy8wMF9TdG9jay8xMF9iYXNlL2Zyb250ZW5kX2Jhc2VfdmVyMDIvZGV2ZWxvcG1lbnQvcHJvamVjdC1uYW1lL2Fzc2V0cy9qcy9fZGV2anMvc3JjL0NvbmYuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9UZXJhTWFjL0RvY3VtZW50cy8wMF9TdG9jay8xMF9iYXNlL2Zyb250ZW5kX2Jhc2VfdmVyMDIvZGV2ZWxvcG1lbnQvcHJvamVjdC1uYW1lL2Fzc2V0cy9qcy9fZGV2anMvc3JjL0RhdGEvU291bmQuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9UZXJhTWFjL0RvY3VtZW50cy8wMF9TdG9jay8xMF9iYXNlL2Zyb250ZW5kX2Jhc2VfdmVyMDIvZGV2ZWxvcG1lbnQvcHJvamVjdC1uYW1lL2Fzc2V0cy9qcy9fZGV2anMvc3JjL015TGlicy9VdGlsLmpzIiwid2VicGFjazovLy8vVXNlcnMvVGVyYU1hYy9Eb2N1bWVudHMvMDBfU3RvY2svMTBfYmFzZS9mcm9udGVuZF9iYXNlX3ZlcjAyL2RldmVsb3BtZW50L3Byb2plY3QtbmFtZS9hc3NldHMvanMvX2RldmpzL3NyYy9NeUxpYnMvRnVuYy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL1RlcmFNYWMvRG9jdW1lbnRzLzAwX1N0b2NrLzEwX2Jhc2UvZnJvbnRlbmRfYmFzZV92ZXIwMi9kZXZlbG9wbWVudC9wcm9qZWN0LW5hbWUvYXNzZXRzL2pzL19kZXZqcy9zcmMvTXlMaWJzL0V2ZW50TWdyL1JlYWR5TWdyLmpzIiwid2VicGFjazovLy8vVXNlcnMvVGVyYU1hYy9Eb2N1bWVudHMvMDBfU3RvY2svMTBfYmFzZS9mcm9udGVuZF9iYXNlX3ZlcjAyL2RldmVsb3BtZW50L3Byb2plY3QtbmFtZS9hc3NldHMvanMvX2RldmpzL3NyYy9GdW5jL1JlYWR5UGVyY2VudC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL1RlcmFNYWMvRG9jdW1lbnRzLzAwX1N0b2NrLzEwX2Jhc2UvZnJvbnRlbmRfYmFzZV92ZXIwMi9kZXZlbG9wbWVudC9wcm9qZWN0LW5hbWUvYXNzZXRzL2pzL19kZXZqcy9zcmMvTXlMaWJzL0V2ZW50TWdyL1VwZGF0ZU1nci5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL1RlcmFNYWMvRG9jdW1lbnRzLzAwX1N0b2NrLzEwX2Jhc2UvZnJvbnRlbmRfYmFzZV92ZXIwMi9kZXZlbG9wbWVudC9wcm9qZWN0LW5hbWUvYXNzZXRzL2pzL19kZXZqcy9zcmMvTXlMaWJzL0V2ZW50TWdyL1Jlc2l6ZU1nci5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL1RlcmFNYWMvRG9jdW1lbnRzLzAwX1N0b2NrLzEwX2Jhc2UvZnJvbnRlbmRfYmFzZV92ZXIwMi9kZXZlbG9wbWVudC9wcm9qZWN0LW5hbWUvYXNzZXRzL2pzL19kZXZqcy9zcmMvTXlMaWJzL0V2ZW50TWdyL1Njcm9sbE1nci5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL1RlcmFNYWMvRG9jdW1lbnRzLzAwX1N0b2NrLzEwX2Jhc2UvZnJvbnRlbmRfYmFzZV92ZXIwMi9kZXZlbG9wbWVudC9wcm9qZWN0LW5hbWUvYXNzZXRzL2pzL19kZXZqcy9zcmMvTXlMaWJzL0V2ZW50TWdyL01vdXNlTWdyLmpzIiwid2VicGFjazovLy8vVXNlcnMvVGVyYU1hYy9Eb2N1bWVudHMvMDBfU3RvY2svMTBfYmFzZS9mcm9udGVuZF9iYXNlX3ZlcjAyL2RldmVsb3BtZW50L3Byb2plY3QtbmFtZS9hc3NldHMvanMvX2RldmpzL3NyYy9GdW5jL0xvYWRNZ3IuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9UZXJhTWFjL0RvY3VtZW50cy8wMF9TdG9jay8xMF9iYXNlL2Zyb250ZW5kX2Jhc2VfdmVyMDIvZGV2ZWxvcG1lbnQvcHJvamVjdC1uYW1lL2Fzc2V0cy9qcy9fZGV2anMvc3JjL0Z1bmMvTG9hZGVyLmpzIiwid2VicGFjazovLy8vVXNlcnMvVGVyYU1hYy9Eb2N1bWVudHMvMDBfU3RvY2svMTBfYmFzZS9mcm9udGVuZF9iYXNlX3ZlcjAyL2RldmVsb3BtZW50L3Byb2plY3QtbmFtZS9hc3NldHMvanMvX2RldmpzL3NyYy9EaXNwbGF5L1VJL1NlYzAxVmlkZW8uanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9UZXJhTWFjL0RvY3VtZW50cy8wMF9TdG9jay8xMF9iYXNlL2Zyb250ZW5kX2Jhc2VfdmVyMDIvZGV2ZWxvcG1lbnQvcHJvamVjdC1uYW1lL2Fzc2V0cy9qcy9fZGV2anMvc3JjL0Rpc3BsYXkvVUkvWW91dHViZUZvclNlYzAxLmpzIiwid2VicGFjazovLy8vVXNlcnMvVGVyYU1hYy9Eb2N1bWVudHMvMDBfU3RvY2svMTBfYmFzZS9mcm9udGVuZF9iYXNlX3ZlcjAyL2RldmVsb3BtZW50L3Byb2plY3QtbmFtZS9hc3NldHMvanMvX2RldmpzL3NyYy9NeUxpYnMvRGlzcGxheS9MYXlvdXQvRnVsbFNpemUuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9UZXJhTWFjL0RvY3VtZW50cy8wMF9TdG9jay8xMF9iYXNlL2Zyb250ZW5kX2Jhc2VfdmVyMDIvZGV2ZWxvcG1lbnQvcHJvamVjdC1uYW1lL2Fzc2V0cy9qcy9fZGV2anMvc3JjL0Rpc3BsYXkvVUkvVG9wVGltZS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL1RlcmFNYWMvRG9jdW1lbnRzLzAwX1N0b2NrLzEwX2Jhc2UvZnJvbnRlbmRfYmFzZV92ZXIwMi9kZXZlbG9wbWVudC9wcm9qZWN0LW5hbWUvYXNzZXRzL2pzL19kZXZqcy9zcmMvRnVuYy9KdWRnZUVudmlyb25tZW50LmpzIiwid2VicGFjazovLy8vVXNlcnMvVGVyYU1hYy9Eb2N1bWVudHMvMDBfU3RvY2svMTBfYmFzZS9mcm9udGVuZF9iYXNlX3ZlcjAyL2RldmVsb3BtZW50L3Byb2plY3QtbmFtZS9hc3NldHMvanMvX2RldmpzL3NyYy9GdW5jL19ldmVudHMvUmVzcG9uc2l2ZVN3aXRjaEltZy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL1RlcmFNYWMvRG9jdW1lbnRzLzAwX1N0b2NrLzEwX2Jhc2UvZnJvbnRlbmRfYmFzZV92ZXIwMi9kZXZlbG9wbWVudC9wcm9qZWN0LW5hbWUvYXNzZXRzL2pzL19kZXZqcy9zcmMvRnVuYy9Td2lwZVRyYW5zaXRpb24uanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9UZXJhTWFjL0RvY3VtZW50cy8wMF9TdG9jay8xMF9iYXNlL2Zyb250ZW5kX2Jhc2VfdmVyMDIvZGV2ZWxvcG1lbnQvcHJvamVjdC1uYW1lL2Fzc2V0cy9qcy9fZGV2anMvc3JjL0Z1bmMvU2Nyb2xsVHJhbnNpdGlvbi5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL1RlcmFNYWMvRG9jdW1lbnRzLzAwX1N0b2NrLzEwX2Jhc2UvZnJvbnRlbmRfYmFzZV92ZXIwMi9kZXZlbG9wbWVudC9wcm9qZWN0LW5hbWUvYXNzZXRzL2pzL19kZXZqcy9zcmMvRnVuYy9TbnMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9UZXJhTWFjL0RvY3VtZW50cy8wMF9TdG9jay8xMF9iYXNlL2Zyb250ZW5kX2Jhc2VfdmVyMDIvZGV2ZWxvcG1lbnQvcHJvamVjdC1uYW1lL2Fzc2V0cy9lanMvaW5jL21ldGFEYXRhLmpzb24iLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9UZXJhTWFjL0RvY3VtZW50cy8wMF9TdG9jay8xMF9iYXNlL2Zyb250ZW5kX2Jhc2VfdmVyMDIvZGV2ZWxvcG1lbnQvcHJvamVjdC1uYW1lL2Fzc2V0cy9qcy9fZGV2anMvc3JjL0Rpc3BsYXkvTGF5b3V0L0xheW91dC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL1RlcmFNYWMvRG9jdW1lbnRzLzAwX1N0b2NrLzEwX2Jhc2UvZnJvbnRlbmRfYmFzZV92ZXIwMi9kZXZlbG9wbWVudC9wcm9qZWN0LW5hbWUvYXNzZXRzL2pzL19kZXZqcy9zcmMvRGlzcGxheS9MYXlvdXQvU2l6ZS9TaXplLmpzIiwid2VicGFjazovLy8vVXNlcnMvVGVyYU1hYy9Eb2N1bWVudHMvMDBfU3RvY2svMTBfYmFzZS9mcm9udGVuZF9iYXNlX3ZlcjAyL2RldmVsb3BtZW50L3Byb2plY3QtbmFtZS9hc3NldHMvanMvX2RldmpzL3NyYy9EaXNwbGF5L0xheW91dC9TaXplL1NjYWxlLmpzIiwid2VicGFjazovLy8vVXNlcnMvVGVyYU1hYy9Eb2N1bWVudHMvMDBfU3RvY2svMTBfYmFzZS9mcm9udGVuZF9iYXNlX3ZlcjAyL2RldmVsb3BtZW50L3Byb2plY3QtbmFtZS9hc3NldHMvanMvX2RldmpzL3NyYy9EaXNwbGF5L0xheW91dC9Qb3N0aW9uL1Bvc2l0aW9uLmpzIiwid2VicGFjazovLy8vVXNlcnMvVGVyYU1hYy9Eb2N1bWVudHMvMDBfU3RvY2svMTBfYmFzZS9mcm9udGVuZF9iYXNlX3ZlcjAyL2RldmVsb3BtZW50L3Byb2plY3QtbmFtZS9hc3NldHMvanMvX2RldmpzL3NyYy9QYWdlL01haW4uanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9UZXJhTWFjL0RvY3VtZW50cy8wMF9TdG9jay8xMF9iYXNlL2Zyb250ZW5kX2Jhc2VfdmVyMDIvZGV2ZWxvcG1lbnQvcHJvamVjdC1uYW1lL2Fzc2V0cy9qcy9fZGV2anMvc3JjL0Rpc3BsYXkvRGlzcGxheVRvcC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL1RlcmFNYWMvRG9jdW1lbnRzLzAwX1N0b2NrLzEwX2Jhc2UvZnJvbnRlbmRfYmFzZV92ZXIwMi9kZXZlbG9wbWVudC9wcm9qZWN0LW5hbWUvYXNzZXRzL2pzL19kZXZqcy9zcmMvRGlzcGxheS9FZmZlY3RzL0VmZmVjdHMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9UZXJhTWFjL0RvY3VtZW50cy8wMF9TdG9jay8xMF9iYXNlL2Zyb250ZW5kX2Jhc2VfdmVyMDIvZGV2ZWxvcG1lbnQvcHJvamVjdC1uYW1lL2Fzc2V0cy9qcy9fZGV2anMvc3JjL0Rpc3BsYXkvRWZmZWN0cy8wM19lZmZlY3RzL1NlY3Rpb24wMkJnL0NWQ29udGVudHMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9UZXJhTWFjL0RvY3VtZW50cy8wMF9TdG9jay8xMF9iYXNlL2Zyb250ZW5kX2Jhc2VfdmVyMDIvZGV2ZWxvcG1lbnQvcHJvamVjdC1uYW1lL2Fzc2V0cy9qcy9fZGV2anMvc3JjL0Rpc3BsYXkvRWZmZWN0cy8wM19lZmZlY3RzL1NlY3Rpb24wMkJnL0NWQ29udGVudHNMb29wLmpzIiwid2VicGFjazovLy8vVXNlcnMvVGVyYU1hYy9Eb2N1bWVudHMvMDBfU3RvY2svMTBfYmFzZS9mcm9udGVuZF9iYXNlX3ZlcjAyL2RldmVsb3BtZW50L3Byb2plY3QtbmFtZS9hc3NldHMvanMvX2RldmpzL3NyYy9EaXNwbGF5L0VmZmVjdHMvMDNfZWZmZWN0cy9TZWN0aW9uMDJCZy9DVkNvbnRlbnRzVGltZWxpbmUuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9UZXJhTWFjL0RvY3VtZW50cy8wMF9TdG9jay8xMF9iYXNlL2Zyb250ZW5kX2Jhc2VfdmVyMDIvZGV2ZWxvcG1lbnQvcHJvamVjdC1uYW1lL2Fzc2V0cy9qcy9fZGV2anMvc3JjL0Rpc3BsYXkvRWZmZWN0cy8wM19lZmZlY3RzL1NlY3Rpb24wMkJnL19kZXRhaWxzL0NyZWF0ZUNhbnZhcy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL1RlcmFNYWMvRG9jdW1lbnRzLzAwX1N0b2NrLzEwX2Jhc2UvZnJvbnRlbmRfYmFzZV92ZXIwMi9kZXZlbG9wbWVudC9wcm9qZWN0LW5hbWUvYXNzZXRzL2pzL19kZXZqcy9zcmMvRGlzcGxheS9FZmZlY3RzLzAzX2VmZmVjdHMvU2VjdGlvbjAyQmcvX2RldGFpbHMvQ2FudmFzLmpzIiwid2VicGFjazovLy8vVXNlcnMvVGVyYU1hYy9Eb2N1bWVudHMvMDBfU3RvY2svMTBfYmFzZS9mcm9udGVuZF9iYXNlX3ZlcjAyL2RldmVsb3BtZW50L3Byb2plY3QtbmFtZS9hc3NldHMvanMvX2RldmpzL3NyYy9EaXNwbGF5L0VmZmVjdHMvMDNfZWZmZWN0cy9TZWN0aW9uMDJCZy9fZGV0YWlscy9QbGFuZS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL1RlcmFNYWMvRG9jdW1lbnRzLzAwX1N0b2NrLzEwX2Jhc2UvZnJvbnRlbmRfYmFzZV92ZXIwMi9kZXZlbG9wbWVudC9wcm9qZWN0LW5hbWUvYXNzZXRzL2pzL19kZXZqcy9zcmMvRGlzcGxheS9FZmZlY3RzLzAzX2VmZmVjdHMvU2VjdGlvbjA0UHJvZHVjdC9HbENvbnRlbnRzLmpzIiwid2VicGFjazovLy8vVXNlcnMvVGVyYU1hYy9Eb2N1bWVudHMvMDBfU3RvY2svMTBfYmFzZS9mcm9udGVuZF9iYXNlX3ZlcjAyL2RldmVsb3BtZW50L3Byb2plY3QtbmFtZS9hc3NldHMvanMvX2RldmpzL3NyYy9EaXNwbGF5L0VmZmVjdHMvMDNfZWZmZWN0cy9TZWN0aW9uMDRQcm9kdWN0L0dsQ29udGVudHNMb29wLmpzIiwid2VicGFjazovLy8vVXNlcnMvVGVyYU1hYy9Eb2N1bWVudHMvMDBfU3RvY2svMTBfYmFzZS9mcm9udGVuZF9iYXNlX3ZlcjAyL2RldmVsb3BtZW50L3Byb2plY3QtbmFtZS9hc3NldHMvanMvX2RldmpzL3NyYy9EaXNwbGF5L0VmZmVjdHMvMDNfZWZmZWN0cy9TZWN0aW9uMDRQcm9kdWN0L0dsQ29udGVudHNUaW1lbGluZS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL1RlcmFNYWMvRG9jdW1lbnRzLzAwX1N0b2NrLzEwX2Jhc2UvZnJvbnRlbmRfYmFzZV92ZXIwMi9kZXZlbG9wbWVudC9wcm9qZWN0LW5hbWUvYXNzZXRzL2pzL19kZXZqcy9zcmMvTXlMaWJzL0V2ZW50TWdyL1NvbWV0aW1lc01nci5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL1RlcmFNYWMvRG9jdW1lbnRzLzAwX1N0b2NrLzEwX2Jhc2UvZnJvbnRlbmRfYmFzZV92ZXIwMi9kZXZlbG9wbWVudC9wcm9qZWN0LW5hbWUvYXNzZXRzL2pzL19kZXZqcy9zcmMvRGlzcGxheS9FZmZlY3RzLzAzX2VmZmVjdHMvU2VjdGlvbjA0UHJvZHVjdC9fZGV0YWlscy9QbGFuZS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL1RlcmFNYWMvRG9jdW1lbnRzLzAwX1N0b2NrLzEwX2Jhc2UvZnJvbnRlbmRfYmFzZV92ZXIwMi9kZXZlbG9wbWVudC9wcm9qZWN0LW5hbWUvYXNzZXRzL2pzL19kZXZqcy9zcmMvRGlzcGxheS9FZmZlY3RzL1BhcmFtLmpzIiwid2VicGFjazovLy8vVXNlcnMvVGVyYU1hYy9Eb2N1bWVudHMvMDBfU3RvY2svMTBfYmFzZS9mcm9udGVuZF9iYXNlX3ZlcjAyL2RldmVsb3BtZW50L3Byb2plY3QtbmFtZS9hc3NldHMvanMvX2RldmpzL3NyYy9EaXNwbGF5L0VmZmVjdHMvUHJvZmlsZXIuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9UZXJhTWFjL0RvY3VtZW50cy8wMF9TdG9jay8xMF9iYXNlL2Zyb250ZW5kX2Jhc2VfdmVyMDIvZGV2ZWxvcG1lbnQvcHJvamVjdC1uYW1lL2Fzc2V0cy9qcy9fZGV2anMvc3JjL0Rpc3BsYXkvTGF5b3V0L1NpemUvU2NhbGVUb3AuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9UZXJhTWFjL0RvY3VtZW50cy8wMF9TdG9jay8xMF9iYXNlL2Zyb250ZW5kX2Jhc2VfdmVyMDIvZGV2ZWxvcG1lbnQvcHJvamVjdC1uYW1lL2Fzc2V0cy9qcy9fZGV2anMvc3JjL0Rpc3BsYXkvRWZmZWN0cy8wM19lZmZlY3RzL0hvdmVyRWZmZWN0U05TU1BGb290ZXIuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9UZXJhTWFjL0RvY3VtZW50cy8wMF9TdG9jay8xMF9iYXNlL2Zyb250ZW5kX2Jhc2VfdmVyMDIvZGV2ZWxvcG1lbnQvcHJvamVjdC1uYW1lL2Fzc2V0cy9qcy9fZGV2anMvc3JjL0Rpc3BsYXkvRWZmZWN0cy8wM19lZmZlY3RzL0hvdmVyRWZmZWN0U1ZHQXJyb3dUb3AuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9UZXJhTWFjL0RvY3VtZW50cy8wMF9TdG9jay8xMF9iYXNlL2Zyb250ZW5kX2Jhc2VfdmVyMDIvZGV2ZWxvcG1lbnQvcHJvamVjdC1uYW1lL2Fzc2V0cy9qcy9fZGV2anMvc3JjL1Zpc3VhbC9DYW52YXMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9UZXJhTWFjL0RvY3VtZW50cy8wMF9TdG9jay8xMF9iYXNlL2Zyb250ZW5kX2Jhc2VfdmVyMDIvZGV2ZWxvcG1lbnQvcHJvamVjdC1uYW1lL2Fzc2V0cy9qcy9fZGV2anMvc3JjL0VudHJ5LmpzIiwid2VicGFjazovLy8vVXNlcnMvVGVyYU1hYy9Eb2N1bWVudHMvMDBfU3RvY2svMTBfYmFzZS9mcm9udGVuZF9iYXNlX3ZlcjAyL2RldmVsb3BtZW50L3Byb2plY3QtbmFtZS9hc3NldHMvanMvX2RldmpzL2xpYnMvdGhyZWUubWluLmpzIl0sIm5hbWVzIjpbIndpbmRvdyIsImdiIiwidW5kZWZpbmVkIiwiaW4iLCJjb21tb24iLCJtYWluIiwiQ29tbW9uIiwib25JbW1lZGlhdGUiLCJzZXRFdmVudHMiLCJjb25mIiwidSIsImYiLCIkIiwiZG9jdW1lbnQiLCJvbiIsIm9uUmVhZHkiLCJiaW5kIiwib25Mb2FkIiwiQ29uZiIsIlJFTEVBU0UiLCJGTEciLCJMT0ciLCJQQVJBTSIsIlNUQVRTIiwiZGVmVyIsImRlZkgiLCJXIiwiSCIsInNwVyIsInNwSCIsImJwIiwibW9kZSIsImtleXMiLCJzd2l0Y2hNb2RlIiwic291bmREYXRhIiwic2VjMDJJbWdOdW0iLCJ5b3V0dWJlSUQwMSIsInlvdXR1YmVJRDAyIiwid2ViRm9udExvYWRlZCIsImkiLCJrZXkiLCJsZW4iLCJwYXJhbSIsInJlZiIsInJlZjEiLCJ2YWx1ZSIsImxvY2F0aW9uIiwic2VhcmNoIiwicmVwbGFjZSIsInNwbGl0IiwibGVuZ3RoIiwiaiIsIm9iaiIsImsiLCJ2YWwiLCJTb3VuZERhdGEiLCJVdGlsIiwidWEiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJ0b0xvd2VyQ2FzZSIsImFwcFYiLCJhcHBWZXJzaW9uIiwiaXNSZXNTUCIsImlzUmVzUEMiLCJpc1BDIiwiaXNTUCIsImlzVEFCIiwiaXNNQiIsImlzSUUiLCJpc1NldFNQU2l6ZSIsInN0YXJ0VGltZSIsImVsYXBzZWRUaW1lIiwibm93IiwiRGF0ZSIsIm1pbiIsIm1heCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsIm1pbjEiLCJtYXgxIiwibWluMiIsIm1heDIiLCJoaXQiLCJyYW5nZSIsIm51bSIsInJlc01pbiIsInJlc01heCIsImJhc2VNaW4iLCJiYXNlTWF4IiwicCIsIm4iLCJwb3MiLCJTdHJpbmciLCJpbmRleE9mIiwic3Vic3RyIiwibnVtZXJhdG9yIiwiZGVub21pbmF0b3IiLCJyYWRpYW5zIiwiUEkiLCJhbmdsZSIsInAxIiwicDIiLCJzcXJ0IiwicG93IiwieCIsInkiLCJhcnIiLCJzb3J0IiwiYSIsImIiLCJhcnkiLCJzbGljZSIsInQiLCJBcnJheSIsInB1c2giLCJzaHVmZmxlQXJ5IiwibCIsImxlbjEiLCJuZXdBcnIiLCJwYXJhIiwiZGVzYyIsImxpc3QiLCJyZXR1cm5LZXkiLCJnZXRUaW1lIiwiZmxnIiwiY3NzIiwibWVkaWEiLCJwYXR0ZXJuIiwiUmVnRXhwIiwiam9pbiIsInRlc3QiLCJhZGRDbGFzcyIsImlzSXBhZCIsImlzQW5kcm9pZCIsInBsYXRmb3JtIiwiaXNJb3MiLCJtc2llIiwicGFyc2VJbnQiLCJtYXRjaCIsImlzSWUxMFVuZGVyIiwibG9nIiwiaXNJRTExIiwicmVtb3ZlQ2xhc3MiLCJ2ZXJzaW9uIiwicGFyc2VGbG9hdCIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsInVybCIsImhyZWYiLCJwYXJhbUl0ZW1zIiwicGFyYW1JdGVtIiwiaGFzaCIsImNvb2tpZSIsImlzQ29udGFpbiIsInIiLCJnIiwic3RyIiwidG9TdHJpbmciLCJjb250YWluIiwibnVtYmVyIiwiX3BvdyIsInJvdW5kIiwicmVzIiwib3JnIiwiZGVzdCIsImJlZm9yZSIsImFmdGVyIiwiZ2V0Tm93IiwiaG91ciIsImdldEhvdXJzIiwibWludXRlIiwiZ2V0TWludXRlcyIsInNlY29uZCIsImdldFNlY29uZHMiLCJtaWxsU2Vjb25kIiwiZ2V0TWlsbGlzZWNvbmRzIiwiZ2V0RGF0ZSIsIm1vbnRoZGF5cyIsImdldE1vbnRoIiwiZ2V0RnVsbFllYXIiLCJ3ZWVrRGF5SlAiLCJ3REoiLCJnZXREYXkiLCJ3ZWVrRGF5RU4iLCJ3REUiLCJkYXRlIiwiTnVtYmVyIiwiaWdub3JlQXJyYXkiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJjYWxsIiwiJHRhcmdldCIsIiRpbWciLCJlYWNoIiwidyIsIndpZHRoIiwiaCIsImhlaWdodCIsImF0dHIiLCJ0cmlnZ2VyIiwic2VsZiIsImUiLCJwcmV2ZW50RGVmYXVsdCIsIm9mZiIsInByb3RvY29sIiwiaG9zdG5hbWUiLCJwb3J0IiwicGF0aG5hbWUiLCJldmVudCIsInJldHVyblZhbHVlIiwia2V5Q29kZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJvbndoZWVsIiwib25tb3VzZXdoZWVsIiwib250b3VjaG1vdmUiLCJvbmtleWRvd24iLCJwcmV2ZW50RGVmYXVsdEZvclNjcm9sbEtleXMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiRnVuYyIsImJsYW5rIiwiZGVidWdnZXIiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJleHBhbmRqUXVlcnkiLCJtZXRob2RzIiwiY29uc29sZSIsIm0iLCJwcmVwZW5kIiwiRlBTIiwibW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwid2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2FsbGJhY2siLCJzZXRUaW1lb3V0IiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJtb3pDYW5jZWxBbmltYXRpb25GcmFtZSIsIndlYmtpdENhbmNlbEFuaW1hdGlvbkZyYW1lIiwidGltZXIiLCJjbGVhclRpbWVvdXQiLCJqUXVlcnkiLCJmbiIsImV4dGVuZCIsImFkanVzdCIsImFkanVzdFciLCJhZGp1c3RIIiwiQ1NTIiwic3VwcG9ydHMiLCJkb2N1bWVudEVsZW1lbnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJ2IiwiaXNBbmRyb2lkVmVyc2lvbiIsImFsZXJ0IiwiUmVhZHlNZ3IiLCJjb21wbGV0ZWQiLCJ0b3RhbCIsImN1cnJlbnQiLCJvbkNvbXBsZXRlZEZ1bmMiLCJyZWFkeVBlcmNlbnQiLCJ1cCIsInJlbW92ZSIsInVwZGF0ZSIsInNldHVwIiwiUmVhZHlQZXJjZW50IiwiJGxvYWRpbmciLCIkYmFyIiwiJHBlcmNlbnQiLCJpc0xvY2siLCJzZXRUaW1lb3V0TG9jayIsInRhcmdldCIsInJtIiwidGV4dCIsIm9uQ29tcGxldGUiLCJUd2Vlbk1heCIsInRvIiwic2NhbGUiLCJvcGFjaXR5IiwiZWFzZSIsIlBvd2VyMyIsImVhc2VJbk91dCIsIlVwZGF0ZU1nciIsImNudCIsInVwZGF0ZUxpc3QiLCJUaW1lciIsImlzU3RvcCIsIm5hbWUiLCJmdW5jIiwiYXJyUmVtb3ZlIiwibG9vcCIsImNoZWNrIiwic3BsaWNlIiwiUmVzaXplTWdyIiwicmVzaXplTGlzdCIsIndzIiwib2xkVyIsIm9sZEgiLCJvblJlc2l6ZSIsImdldFdpbmRvd1NpemUiLCJTY3JvbGxNZ3IiLCJzY3JvbGxMaXN0Iiwic2Nyb2xsRW5kTGlzdCIsInN0Iiwic2IiLCJzdiIsIlNUQW1vdW50Iiwib2Zmc2V0IiwiaXNTdGFydCIsImVuZCIsInNjcm9sbFRvcCIsImRlbHRhIiwiZGVsdGFYIiwiZGVsdGFZIiwiaXNXaW4iLCJpc0ZGIiwic2Nyb2xsTGVmdCIsIm9uU2Nyb2xsIiwib25Nb3VzZVdoZWVsIiwiTW91c2VNZ3IiLCJjeCIsImN5IiwibW91c2VNb3ZlTGlzdCIsIm1vdXNlTW92ZVN0YXJ0TGlzdCIsIm1vdXNlTW92ZUVuZExpc3QiLCJlbmRUaW1lIiwib25FbmQiLCJvcmlnaW5hbEV2ZW50IiwiY2hhbmdlZFRvdWNoZXMiLCJwYWdlWCIsInBhZ2VZIiwib2Zmc2V0WCIsImxlZnQiLCJ0b3AiLCJjbGllbnRYIiwiY2xpZW50WSIsIm9uVG91Y2htb3ZlIiwib25Nb3VzZW1vdmUiLCJMb2FkTWdyIiwibG9hZGVyIiwiY2IiLCJ5b3V0dWJlSWZyYW1lU2NyaXB0IiwibG9hZFNlYzAySW1nIiwicGF0aCIsImNiMDIiLCJpbWciLCJzaGFkZXJzIiwic2hhZGVyTG9hZExpc3QiLCJab29tQmx1ciIsIlRyYW5zaXRpb24wMiIsInNoYWRlclNlcmlhbExvYWQiLCJzaGFkZXIiLCJsb2FkIiwiY29tcCIsInNlY3Rpb24wNFByb2R1Y3RJbWciLCJ0ZXh0dXJlTGlzdCIsInRleHR1cmVzIiwidGV4dHVyZVNlcmlhbExvYWQiLCJ0ZXh0dXJlIiwiVEhSRUUiLCJJbWFnZVV0aWxzIiwibG9hZFRleHR1cmUiLCJjb25maWciLCJjdXN0b20iLCJmYW1pbGllcyIsInVybHMiLCJhY3RpdmUiLCJ3ZWJGb250IiwiTG9hZGVyIiwic3JjIiwiZ2V0SlNPTiIsImRhdGEiLCJudGgiLCJJbWFnZSIsImFkZDAiLCJvbmxvYWQiLCJpbWdOdW0iLCJlbG0iLCJpc0xvYWQiLCJ2aWRlbyIsImNyZWF0ZUVsZW1lbnQiLCJ0eXBlIiwic3VwcG9ydFZpZGVvRXh0IiwicGxheSIsInRhZyIsImZpcnN0U2NyaXB0VGFnIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJwYXJlbnROb2RlIiwiaW5zZXJ0QmVmb3JlIiwib25Zb3VUdWJlSWZyYW1lUmVhZHkiLCJleHQiLCJjYW5QbGF5VHlwZSIsIndmIiwiYXN5bmMiLCJzIiwiYWdhaW4iLCJXZWJGb250Iiwib25Mb2FkZWQiLCJTZWMwMVZpZGVvIiwiWW91dHViZUZvclNlYzAxIiwiaWQiLCJ2aWRlb0lEIiwidmlkZW9MaXN0IiwicGxheWVyIiwiaXNGaXJzdCIsImlzU2Vla0xvY2siLCJpc1NlZWtMb2NrMDIiLCJZVCIsIlBsYXllciIsInZpZGVvSWQiLCJldmVudHMiLCJvblBsYXllclN0YXRlQ2hhbmdlIiwicGxheWVyVmFycyIsImF1dG9wbGF5IiwiY29udHJvbHMiLCJzaG93aW5mbyIsImF1dG9oaWRlIiwicmVsIiwiZW5hYmxlanNhcGkiLCJpdl9sb2FkX3BvbGljeSIsImRpc2FibGVrYiIsIm1vZGVzdGJyYW5kaW5nIiwic3RhcnQiLCJ0YXJnZXREZWZXIiwidGFyZ2V0RGVmSCIsInJ1biIsInNldFBsYXliYWNrUXVhbGl0eSIsInRpbWUiLCJzZWMwMVZpZGVvIiwicGxheUJ5TllUaW1lIiwic3RhdHVzIiwiUGxheWVyU3RhdGUiLCJFTkRFRCIsInBsYXlWaWRlbyIsIlBMQVlJTkciLCJDVUVEIiwiaXNTYWZhcmkiLCJCVUZGRVJJTkciLCJzZWVrVG8iLCJnZXRDdXJyZW50VGltZSIsIm55SCIsIm9uU2VlayIsIkZ1bGxTaXplIiwiJFdyYXAiLCIkVGFyZ2V0IiwiJHdyYXAiLCJ0YXJnZXRXIiwidGFyZ2V0SCIsInJhdGlvVyIsInJhdGlvIiwibWwiLCJtdCIsImdldCIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0IiwiZ2V0RGVmIiwic2V0U3R5bGUiLCJnZXRTaXplIiwic2V0UG9zIiwiVG9wVGltZSIsIiRoMDEiLCJmaW5kIiwiJGgwMiIsIiRtMDEiLCIkbTAyIiwiaXNBbGVydCIsImRpcyIsInRsIiwiVGltZWxpbmVNYXgiLCJyZXBlYXQiLCJzZXQiLCJQb3dlcjIiLCJKdWRnZUVudmlyb25tZW50IiwiaXNEZXZpY2VTUCIsImlzRGV2aWNlVEFCIiwiaXNEZXZpY2VNQiIsImlzRGV2aWNlUEMiLCJpc0lFVmVyc2lvbiIsImlzRGlyZWN0aW9uIiwiaXNSZXNwb25zaXZlIiwiUmVzcG9uc2l2ZVN3aXRjaEltZyIsImlzUENMb2NrIiwiaXNTUExvY2siLCJpbmRleCIsImVsIiwic3RyUmVwbGFjZSIsImhhc0NsYXNzIiwic2V0SW1nU1BTaXplIiwibm90IiwiU3dpcGVUcmFuc2l0aW9uIiwiJHN0YXJ0V3JhcCIsIiRlbmRXcmFwIiwicGFnZUxpc3QiLCJvbGQiLCJuZXh0IiwicHJldiIsInNYIiwibVgiLCJlWCIsIm1pbkRpcyIsInNUIiwiZVQiLCJtaW5UIiwib25Ub3VjaExvbmciLCJvblRvdWNoU3RhcnRDQiIsIm9uVG91Y2hFbmRDQiIsInNZIiwibVkiLCJlWSIsImFic0RpcyIsImFicyIsInBqYXgiLCJMYXlvdXQiLCJzaXplIiwicmF0ZSIsImNhbGN1bGF0ZU9yZGVyIiwicGFnZU5hbWUiLCJmaWx0ZXIiLCJpc05vdFRvdWNoIiwiZGlyIiwib25Ub3VjaFN0YXJ0Iiwib25Ub3VjaEVuZCIsIlNjcm9sbFRyYW5zaXRpb24iLCJpc1N3aXRjaCIsImlzUGpheExvY2siLCJtZW51IiwiaXNPcGVuIiwic3dpdGNoIiwiU25zIiwiJGZiIiwiJHR3IiwiJGxpbmUiLCIkbWFpbCIsImZiIiwidGl0IiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiaHRtbCIsImRlcyIsInR3IiwibGluZSIsImQiLCJkZXNjcmlwdGlvbiIsImtleXdvcmQiLCJvcGVuV2luZG93IiwiYWRkcmVzcyIsInN1YiIsImJvZHkiLCJzY3JlZW4iLCJvcGVuIiwianVtcEZCIiwianVtcFRXIiwianVtcExJTkUiLCJvblNlbmRNYWlsIiwicG9zaXRpb24iLCJTaXplIiwiU2NhbGUiLCJTUEJhc2VXIiwiUENCYXNlVyIsIiR0YXJnZXRMaXN0IiwiaVciLCJ3cmFwIiwiUG9zaXRpb24iLCJzZXRDZW50ZXIiLCJNYWluIiwicGFnZSIsIkRpc3BsYXlUb3AiLCJjYW52YXMiLCJvdXRwdXQiLCJnZXRFbGVtZW50QnlJZCIsImluaXQiLCJFZmZlY3RzIiwiZ2wiLCJkb20iLCJzdGF0ZSIsImRlYnVnIiwiQ1ZDb250ZW50cyIsInRpbWVsaW5lIiwidGxNYWluIiwicGF1c2UiLCJDVkNvbnRlbnRzTG9vcCIsImlzQWx3YXlzIiwiaXNSdW5TdGF0dXMiLCJpc0FkanVzdFBhcmFtIiwic29tZXRpbWVzU3RhdGUiLCJsb29wTGlzdCIsImxvb3BTdGFydCIsInJ1bkFsd2F5cyIsInJ1blN0YXR1cyIsInJ1bkFkanVzdFBhcmFtIiwiZHJhdyIsIkNWQ29udGVudHNUaW1lbGluZSIsImJlZ2lubmluZyIsInN0ZXAwMSIsInN0ZXAwMiIsInN0ZXAwMyIsInN0YW5kQnkiLCJzb21ldGltZXMiLCJDcmVhdGVDYW52YXMiLCJjIiwiY3ciLCJjaCIsImZpbGxTdHlsZSIsImlzUmVzaXplIiwic2V0Q2FudmFzU2l6ZSIsImFwcGVuZCIsInZ4Iiwib2Zmc2V0RnJhbWUiLCJvZmZzZXRWeCIsInhOdW0iLCJ5TnVtIiwidGlsZUxpc3QiLCJ0aWxlIiwiY3R4IiwiZmlsbFJlY3QiLCJhZGRPYmplY3RzIiwiY250U3RvcCIsIlNlYzAyQmciLCJDYW52YXMiLCJnZXRDb250ZXh0IiwiUGxhbmUiLCJzdHJva2VTdHlsZSIsIm9wIiwiY3JlYXRlIiwiZnJhbWVTdGFydCIsImltZ0xpc3QiLCJkcmF3SW1hZ2UiLCJHbENvbnRlbnRzIiwicmVuZGVyZXIiLCJjYW1lcmEiLCJzY2VuZSIsImxpZ2h0IiwiYWRqdXN0UGFyYW0iLCJzdGF0ZUxpbmVSb3RhdGUiLCJpc0NvbnRyb2wiLCJXZWJHTFJlbmRlcmVyIiwiYW50aWFsaWFzIiwic2V0U2l6ZSIsInNldENsZWFyQ29sb3IiLCJkb21FbGVtZW50IiwiU2NlbmUiLCJDYW1lcmEiLCJEaXJlY3Rpb25hbExpZ2h0IiwieiIsImxvYWRNZ3IiLCJzZWN0aW9uMDRQcm9kdWN0U2hhZGVyIiwicGxhbmUiLCJUcmFja2JhbGxDb250cm9scyIsInpvb21TcGVlZCIsInJvdGF0ZVNwZWVkIiwiUHJvZmlsZXIiLCJhc3BlY3QiLCJ1cGRhdGVQcm9qZWN0aW9uTWF0cml4IiwiY3VyIiwib25DaGFuZ2VGdW5jTGlzdCIsIm9uU2VjdGlvbjA0IiwiR2xDb250ZW50c0xvb3AiLCJTZWN0aW9uMDRQcm9kdWN0IiwidXBkYXRlQ29udHJvbGwiLCJyZW5kZXIiLCJHbENvbnRlbnRzVGltZWxpbmUiLCJ1bmlmb3JtcyIsInN0cmVuZ3RoIiwiRXhwbyIsIm9uU3RhcnQiLCJlYXNlSW4iLCJlYXNlT3V0IiwiZnJvbSIsInBsYW5lMDIiLCJtYXRlcmlhbCIsIlNoYWRlck1hdGVyaWFsIiwidmVydGV4U2hhZGVyIiwidnMiLCJmcmFnbWVudFNoYWRlciIsImZzIiwidHJhbnNwYXJlbnQiLCJwcm9ncmVzcyIsIm9uUmVzaXpzZSIsIlNvbWVUaW1lcyIsImNiTGlzdCIsIm9yZGVyIiwibGF0ZXIiLCJnZW9tZXRyeSIsImRlZldXIiwiZGVmSEgiLCJyYXRlVyIsImxiIiwiaW1hZ2UiLCJQbGFuZUdlb21ldHJ5IiwiTWVzaCIsInRleHR1cmUwMSIsIlBhcmFtIiwiZ3VpIiwianNvbiIsImlzRmxhZyIsImNsb2NrIiwiem9vbWJsdXIiLCJ0cmFuc2l0aW9uIiwiem9vbSIsImNvbG9yU2VwYXJhdGlvbiIsInR3ZWVuIiwiUG93ZXI0Iiwic2V0dXBEYXRhIiwiZGF0IiwiR1VJIiwicmVtZW1iZXIiLCJ6SW5kZXgiLCJmMSIsImFkZEZvbGRlciIsInN0ZXAiLCJsaXN0ZW4iLCJvbkNoYW5nZSIsIm5GcmFnIiwiU3RhdHMiLCJzdHlsZSIsImFwcGVuZENoaWxkIiwiSG92ZXJFZmZlY3RTTlNTUEZvb3RlciIsIiRpbm5lciIsIiRsaXN0IiwiJGl0ZW0iLCJzaG93IiwiY2xvc2UiLCJ0b2dnbGVDbGFzcyIsInRoYXQiLCJraWxsVHdlZW5zT2YiLCIkYm94IiwicmVhZHkiLCJlcSIsImhpZGUiLCJ0b2dnbGUiLCJIb3ZlckVmZmVjdFNWR0Fycm93VG9wIiwiaXNIb3ZlciIsImF1dG9UTCIsImtpbGwiLCJ0bDAyIiwidGwwMSIsInNjYWxlWSIsImF1dG9BcnJvdyIsImRlbGF5Iiwib25FbnRlciIsIm9uTGVhdmUiLCJvcHRzIiwiY3ViZSIsImNyZWF0ZUNhbWVyYSIsIl9jcmVhdGVDYW1lcmEiLCJjcmVhdGVSZW5kZXJlciIsIl9jcmVhdGVSZW5kZXJlciIsImNyZWF0ZVNjZW5lIiwiX2NyZWF0ZVNjZW5lIiwiY3JlYXRlT2JqZWN0IiwiX2NyZWF0ZU9iamVjdCIsIl9vblJlc2l6ZSIsIlVwZGF0ZSIsIl9VcGRhdGUiLCJQZXJzcGVjdGl2ZUNhbWVyYSIsImFscGhhIiwic3RlbmNpbCIsImRlcHRoIiwicHJlbXVsdGlwbGllZEFscGhhIiwic2V0UGl4ZWxSYXRpbyIsImRldmljZVBpeGVsUmF0aW8iLCJjdWJlR2VvbWV0cnkiLCJCb3hHZW9tZXRyeSIsImN1YmVNYXRlcmlhbCIsIk1lc2hCYXNpY01hdGVyaWFsIiwiY29sb3IiLCJ3aXJlZnJhbWUiLCJyZXF1aXJlIiwiRW50cnkiLCJSRVZJU0lPTiIsImV4cG9ydHMiLCJtb2R1bGUiLCJwZXJmb3JtYW5jZSIsIkVQU0lMT04iLCJzaWduIiwiRnVuY3Rpb24iLCJkZWZpbmVQcm9wZXJ0eSIsIk1PVVNFIiwiTEVGVCIsIk1JRERMRSIsIlJJR0hUIiwiQ3VsbEZhY2VOb25lIiwiQ3VsbEZhY2VCYWNrIiwiQ3VsbEZhY2VGcm9udCIsIkN1bGxGYWNlRnJvbnRCYWNrIiwiRnJvbnRGYWNlRGlyZWN0aW9uQ1ciLCJGcm9udEZhY2VEaXJlY3Rpb25DQ1ciLCJCYXNpY1NoYWRvd01hcCIsIlBDRlNoYWRvd01hcCIsIlBDRlNvZnRTaGFkb3dNYXAiLCJGcm9udFNpZGUiLCJCYWNrU2lkZSIsIkRvdWJsZVNpZGUiLCJGbGF0U2hhZGluZyIsIlNtb290aFNoYWRpbmciLCJOb0NvbG9ycyIsIkZhY2VDb2xvcnMiLCJWZXJ0ZXhDb2xvcnMiLCJOb0JsZW5kaW5nIiwiTm9ybWFsQmxlbmRpbmciLCJBZGRpdGl2ZUJsZW5kaW5nIiwiU3VidHJhY3RpdmVCbGVuZGluZyIsIk11bHRpcGx5QmxlbmRpbmciLCJDdXN0b21CbGVuZGluZyIsIkFkZEVxdWF0aW9uIiwiU3VidHJhY3RFcXVhdGlvbiIsIlJldmVyc2VTdWJ0cmFjdEVxdWF0aW9uIiwiTWluRXF1YXRpb24iLCJNYXhFcXVhdGlvbiIsIlplcm9GYWN0b3IiLCJPbmVGYWN0b3IiLCJTcmNDb2xvckZhY3RvciIsIk9uZU1pbnVzU3JjQ29sb3JGYWN0b3IiLCJTcmNBbHBoYUZhY3RvciIsIk9uZU1pbnVzU3JjQWxwaGFGYWN0b3IiLCJEc3RBbHBoYUZhY3RvciIsIk9uZU1pbnVzRHN0QWxwaGFGYWN0b3IiLCJEc3RDb2xvckZhY3RvciIsIk9uZU1pbnVzRHN0Q29sb3JGYWN0b3IiLCJTcmNBbHBoYVNhdHVyYXRlRmFjdG9yIiwiTmV2ZXJEZXB0aCIsIkFsd2F5c0RlcHRoIiwiTGVzc0RlcHRoIiwiTGVzc0VxdWFsRGVwdGgiLCJFcXVhbERlcHRoIiwiR3JlYXRlckVxdWFsRGVwdGgiLCJHcmVhdGVyRGVwdGgiLCJOb3RFcXVhbERlcHRoIiwiTXVsdGlwbHlPcGVyYXRpb24iLCJNaXhPcGVyYXRpb24iLCJBZGRPcGVyYXRpb24iLCJVVk1hcHBpbmciLCJDdWJlUmVmbGVjdGlvbk1hcHBpbmciLCJDdWJlUmVmcmFjdGlvbk1hcHBpbmciLCJFcXVpcmVjdGFuZ3VsYXJSZWZsZWN0aW9uTWFwcGluZyIsIkVxdWlyZWN0YW5ndWxhclJlZnJhY3Rpb25NYXBwaW5nIiwiU3BoZXJpY2FsUmVmbGVjdGlvbk1hcHBpbmciLCJSZXBlYXRXcmFwcGluZyIsIkNsYW1wVG9FZGdlV3JhcHBpbmciLCJNaXJyb3JlZFJlcGVhdFdyYXBwaW5nIiwiTmVhcmVzdEZpbHRlciIsIk5lYXJlc3RNaXBNYXBOZWFyZXN0RmlsdGVyIiwiTmVhcmVzdE1pcE1hcExpbmVhckZpbHRlciIsIkxpbmVhckZpbHRlciIsIkxpbmVhck1pcE1hcE5lYXJlc3RGaWx0ZXIiLCJMaW5lYXJNaXBNYXBMaW5lYXJGaWx0ZXIiLCJVbnNpZ25lZEJ5dGVUeXBlIiwiQnl0ZVR5cGUiLCJTaG9ydFR5cGUiLCJVbnNpZ25lZFNob3J0VHlwZSIsIkludFR5cGUiLCJVbnNpZ25lZEludFR5cGUiLCJGbG9hdFR5cGUiLCJIYWxmRmxvYXRUeXBlIiwiVW5zaWduZWRTaG9ydDQ0NDRUeXBlIiwiVW5zaWduZWRTaG9ydDU1NTFUeXBlIiwiVW5zaWduZWRTaG9ydDU2NVR5cGUiLCJBbHBoYUZvcm1hdCIsIlJHQkZvcm1hdCIsIlJHQkFGb3JtYXQiLCJMdW1pbmFuY2VGb3JtYXQiLCJMdW1pbmFuY2VBbHBoYUZvcm1hdCIsIlJHQkVGb3JtYXQiLCJSR0JfUzNUQ19EWFQxX0Zvcm1hdCIsIlJHQkFfUzNUQ19EWFQxX0Zvcm1hdCIsIlJHQkFfUzNUQ19EWFQzX0Zvcm1hdCIsIlJHQkFfUzNUQ19EWFQ1X0Zvcm1hdCIsIlJHQl9QVlJUQ180QlBQVjFfRm9ybWF0IiwiUkdCX1BWUlRDXzJCUFBWMV9Gb3JtYXQiLCJSR0JBX1BWUlRDXzRCUFBWMV9Gb3JtYXQiLCJSR0JBX1BWUlRDXzJCUFBWMV9Gb3JtYXQiLCJMb29wT25jZSIsIkxvb3BSZXBlYXQiLCJMb29wUGluZ1BvbmciLCJQcm9qZWN0b3IiLCJlcnJvciIsInByb2plY3RWZWN0b3IiLCJ3YXJuIiwicHJvamVjdCIsInVucHJvamVjdFZlY3RvciIsInVucHJvamVjdCIsInBpY2tpbmdSYXkiLCJDYW52YXNSZW5kZXJlciIsImNsZWFyIiwiQ29sb3IiLCJhcmd1bWVudHMiLCJmcm9tQXJyYXkiLCJjb25zdHJ1Y3RvciIsImNvcHkiLCJzZXRIZXgiLCJzZXRSR0IiLCJzZXRIU0wiLCJldWNsaWRlYW5Nb2R1bG8iLCJjbGFtcCIsImV4ZWMiLCJjaGFyQXQiLCJDb2xvcktleXdvcmRzIiwiY2xvbmUiLCJjb3B5R2FtbWFUb0xpbmVhciIsImNvcHlMaW5lYXJUb0dhbW1hIiwiY29udmVydEdhbW1hVG9MaW5lYXIiLCJjb252ZXJ0TGluZWFyVG9HYW1tYSIsImdldEhleCIsImdldEhleFN0cmluZyIsImdldEhTTCIsImdldFN0eWxlIiwib2Zmc2V0SFNMIiwiYWRkQ29sb3JzIiwiYWRkU2NhbGFyIiwibXVsdGlwbHkiLCJtdWx0aXBseVNjYWxhciIsImxlcnAiLCJlcXVhbHMiLCJ0b0FycmF5IiwiYWxpY2VibHVlIiwiYW50aXF1ZXdoaXRlIiwiYXF1YSIsImFxdWFtYXJpbmUiLCJhenVyZSIsImJlaWdlIiwiYmlzcXVlIiwiYmxhY2siLCJibGFuY2hlZGFsbW9uZCIsImJsdWUiLCJibHVldmlvbGV0IiwiYnJvd24iLCJidXJseXdvb2QiLCJjYWRldGJsdWUiLCJjaGFydHJldXNlIiwiY2hvY29sYXRlIiwiY29yYWwiLCJjb3JuZmxvd2VyYmx1ZSIsImNvcm5zaWxrIiwiY3JpbXNvbiIsImN5YW4iLCJkYXJrYmx1ZSIsImRhcmtjeWFuIiwiZGFya2dvbGRlbnJvZCIsImRhcmtncmF5IiwiZGFya2dyZWVuIiwiZGFya2dyZXkiLCJkYXJra2hha2kiLCJkYXJrbWFnZW50YSIsImRhcmtvbGl2ZWdyZWVuIiwiZGFya29yYW5nZSIsImRhcmtvcmNoaWQiLCJkYXJrcmVkIiwiZGFya3NhbG1vbiIsImRhcmtzZWFncmVlbiIsImRhcmtzbGF0ZWJsdWUiLCJkYXJrc2xhdGVncmF5IiwiZGFya3NsYXRlZ3JleSIsImRhcmt0dXJxdW9pc2UiLCJkYXJrdmlvbGV0IiwiZGVlcHBpbmsiLCJkZWVwc2t5Ymx1ZSIsImRpbWdyYXkiLCJkaW1ncmV5IiwiZG9kZ2VyYmx1ZSIsImZpcmVicmljayIsImZsb3JhbHdoaXRlIiwiZm9yZXN0Z3JlZW4iLCJmdWNoc2lhIiwiZ2FpbnNib3JvIiwiZ2hvc3R3aGl0ZSIsImdvbGQiLCJnb2xkZW5yb2QiLCJncmF5IiwiZ3JlZW4iLCJncmVlbnllbGxvdyIsImdyZXkiLCJob25leWRldyIsImhvdHBpbmsiLCJpbmRpYW5yZWQiLCJpbmRpZ28iLCJpdm9yeSIsImtoYWtpIiwibGF2ZW5kZXIiLCJsYXZlbmRlcmJsdXNoIiwibGF3bmdyZWVuIiwibGVtb25jaGlmZm9uIiwibGlnaHRibHVlIiwibGlnaHRjb3JhbCIsImxpZ2h0Y3lhbiIsImxpZ2h0Z29sZGVucm9keWVsbG93IiwibGlnaHRncmF5IiwibGlnaHRncmVlbiIsImxpZ2h0Z3JleSIsImxpZ2h0cGluayIsImxpZ2h0c2FsbW9uIiwibGlnaHRzZWFncmVlbiIsImxpZ2h0c2t5Ymx1ZSIsImxpZ2h0c2xhdGVncmF5IiwibGlnaHRzbGF0ZWdyZXkiLCJsaWdodHN0ZWVsYmx1ZSIsImxpZ2h0eWVsbG93IiwibGltZSIsImxpbWVncmVlbiIsImxpbmVuIiwibWFnZW50YSIsIm1hcm9vbiIsIm1lZGl1bWFxdWFtYXJpbmUiLCJtZWRpdW1ibHVlIiwibWVkaXVtb3JjaGlkIiwibWVkaXVtcHVycGxlIiwibWVkaXVtc2VhZ3JlZW4iLCJtZWRpdW1zbGF0ZWJsdWUiLCJtZWRpdW1zcHJpbmdncmVlbiIsIm1lZGl1bXR1cnF1b2lzZSIsIm1lZGl1bXZpb2xldHJlZCIsIm1pZG5pZ2h0Ymx1ZSIsIm1pbnRjcmVhbSIsIm1pc3R5cm9zZSIsIm1vY2Nhc2luIiwibmF2YWpvd2hpdGUiLCJuYXZ5Iiwib2xkbGFjZSIsIm9saXZlIiwib2xpdmVkcmFiIiwib3JhbmdlIiwib3JhbmdlcmVkIiwib3JjaGlkIiwicGFsZWdvbGRlbnJvZCIsInBhbGVncmVlbiIsInBhbGV0dXJxdW9pc2UiLCJwYWxldmlvbGV0cmVkIiwicGFwYXlhd2hpcCIsInBlYWNocHVmZiIsInBlcnUiLCJwaW5rIiwicGx1bSIsInBvd2RlcmJsdWUiLCJwdXJwbGUiLCJyZWQiLCJyb3N5YnJvd24iLCJyb3lhbGJsdWUiLCJzYWRkbGVicm93biIsInNhbG1vbiIsInNhbmR5YnJvd24iLCJzZWFncmVlbiIsInNlYXNoZWxsIiwic2llbm5hIiwic2lsdmVyIiwic2t5Ymx1ZSIsInNsYXRlYmx1ZSIsInNsYXRlZ3JheSIsInNsYXRlZ3JleSIsInNub3ciLCJzcHJpbmdncmVlbiIsInN0ZWVsYmx1ZSIsInRhbiIsInRlYWwiLCJ0aGlzdGxlIiwidG9tYXRvIiwidHVycXVvaXNlIiwidmlvbGV0Iiwid2hlYXQiLCJ3aGl0ZSIsIndoaXRlc21va2UiLCJ5ZWxsb3ciLCJ5ZWxsb3dncmVlbiIsIlF1YXRlcm5pb24iLCJfeCIsIl95IiwiX3oiLCJfdyIsIm9uQ2hhbmdlQ2FsbGJhY2siLCJzZXRGcm9tRXVsZXIiLCJFdWxlciIsIkVycm9yIiwiY29zIiwic2luIiwic2V0RnJvbUF4aXNBbmdsZSIsInNldEZyb21Sb3RhdGlvbk1hdHJpeCIsImVsZW1lbnRzIiwic2V0RnJvbVVuaXRWZWN0b3JzIiwiVmVjdG9yMyIsImRvdCIsImNyb3NzVmVjdG9ycyIsIm5vcm1hbGl6ZSIsImludmVyc2UiLCJjb25qdWdhdGUiLCJsZW5ndGhTcSIsIm11bHRpcGx5UXVhdGVybmlvbnMiLCJtdWx0aXBseVZlY3RvcjMiLCJhcHBseVF1YXRlcm5pb24iLCJzbGVycCIsImFjb3MiLCJWZWN0b3IyIiwic2V0WCIsInNldFkiLCJzZXRDb21wb25lbnQiLCJnZXRDb21wb25lbnQiLCJhZGRWZWN0b3JzIiwiYWRkU2NhbGVkVmVjdG9yIiwic3ViVmVjdG9ycyIsInN1YlNjYWxhciIsImlzRmluaXRlIiwiZGl2aWRlIiwiZGl2aWRlU2NhbGFyIiwiY2xhbXBTY2FsYXIiLCJjbGFtcExlbmd0aCIsImNlaWwiLCJyb3VuZFRvWmVybyIsIm5lZ2F0ZSIsImxlbmd0aE1hbmhhdHRhbiIsImRpc3RhbmNlVG8iLCJkaXN0YW5jZVRvU3F1YXJlZCIsInNldExlbmd0aCIsImxlcnBWZWN0b3JzIiwiZnJvbUF0dHJpYnV0ZSIsIml0ZW1TaXplIiwiYXJyYXkiLCJyb3RhdGVBcm91bmQiLCJzZXRaIiwibXVsdGlwbHlWZWN0b3JzIiwiYXBwbHlFdWxlciIsImFwcGx5QXhpc0FuZ2xlIiwiYXBwbHlNYXRyaXgzIiwiYXBwbHlNYXRyaXg0IiwiYXBwbHlQcm9qZWN0aW9uIiwiTWF0cml4NCIsIm11bHRpcGx5TWF0cmljZXMiLCJwcm9qZWN0aW9uTWF0cml4IiwiZ2V0SW52ZXJzZSIsIm1hdHJpeFdvcmxkIiwidHJhbnNmb3JtRGlyZWN0aW9uIiwiY3Jvc3MiLCJwcm9qZWN0T25WZWN0b3IiLCJwcm9qZWN0T25QbGFuZSIsInJlZmxlY3QiLCJhbmdsZVRvIiwic2V0RXVsZXJGcm9tUm90YXRpb25NYXRyaXgiLCJzZXRFdWxlckZyb21RdWF0ZXJuaW9uIiwiZ2V0UG9zaXRpb25Gcm9tTWF0cml4Iiwic2V0RnJvbU1hdHJpeFBvc2l0aW9uIiwiZ2V0U2NhbGVGcm9tTWF0cml4Iiwic2V0RnJvbU1hdHJpeFNjYWxlIiwiZ2V0Q29sdW1uRnJvbU1hdHJpeCIsInNldEZyb21NYXRyaXhDb2x1bW4iLCJWZWN0b3I0Iiwic2V0VyIsInNldEF4aXNBbmdsZUZyb21RdWF0ZXJuaW9uIiwic2V0QXhpc0FuZ2xlRnJvbVJvdGF0aW9uTWF0cml4IiwiX29yZGVyIiwiRGVmYXVsdE9yZGVyIiwiUm90YXRpb25PcmRlcnMiLCJhc2luIiwiYXRhbjIiLCJzZXRGcm9tUXVhdGVybmlvbiIsIm1ha2VSb3RhdGlvbkZyb21RdWF0ZXJuaW9uIiwic2V0RnJvbVZlY3RvcjMiLCJyZW9yZGVyIiwidG9WZWN0b3IzIiwiTGluZTMiLCJjZW50ZXIiLCJkaXN0YW5jZVNxIiwiZGlzdGFuY2UiLCJhdCIsImNsb3Nlc3RQb2ludFRvUG9pbnRQYXJhbWV0ZXIiLCJjbG9zZXN0UG9pbnRUb1BvaW50IiwiQm94MiIsIkluZmluaXR5Iiwic2V0RnJvbVBvaW50cyIsIm1ha2VFbXB0eSIsImV4cGFuZEJ5UG9pbnQiLCJzZXRGcm9tQ2VudGVyQW5kU2l6ZSIsImVtcHR5IiwiZXhwYW5kQnlWZWN0b3IiLCJleHBhbmRCeVNjYWxhciIsImNvbnRhaW5zUG9pbnQiLCJjb250YWluc0JveCIsImdldFBhcmFtZXRlciIsImlzSW50ZXJzZWN0aW9uQm94IiwiY2xhbXBQb2ludCIsImRpc3RhbmNlVG9Qb2ludCIsImludGVyc2VjdCIsInVuaW9uIiwidHJhbnNsYXRlIiwiQm94MyIsInNldEZyb21PYmplY3QiLCJ1cGRhdGVNYXRyaXhXb3JsZCIsInRyYXZlcnNlIiwiR2VvbWV0cnkiLCJ2ZXJ0aWNlcyIsIkJ1ZmZlckdlb21ldHJ5IiwiYXR0cmlidXRlcyIsImdldEJvdW5kaW5nU3BoZXJlIiwiU3BoZXJlIiwicmFkaXVzIiwiTWF0cml4MyIsIkZsb2F0MzJBcnJheSIsImlkZW50aXR5IiwibXVsdGlwbHlWZWN0b3IzQXJyYXkiLCJhcHBseVRvVmVjdG9yM0FycmF5IiwiYXBwbHlUb0J1ZmZlciIsImdldFgiLCJnZXRZIiwiZ2V0WiIsInNldFhZWiIsImRldGVybWluYW50IiwidHJhbnNwb3NlIiwiZmxhdHRlblRvQXJyYXlPZmZzZXQiLCJnZXROb3JtYWxNYXRyaXgiLCJ0cmFuc3Bvc2VJbnRvQXJyYXkiLCJxIiwiZXh0cmFjdFBvc2l0aW9uIiwiY29weVBvc2l0aW9uIiwiZXh0cmFjdEJhc2lzIiwibWFrZUJhc2lzIiwiZXh0cmFjdFJvdGF0aW9uIiwibWFrZVJvdGF0aW9uRnJvbUV1bGVyIiwic2V0Um90YXRpb25Gcm9tUXVhdGVybmlvbiIsImxvb2tBdCIsIkQiLCJCIiwiQSIsIkoiLCJGIiwiQyIsIk4iLCJMIiwiUSIsIk0iLCJLIiwiRSIsIk8iLCJtdWx0aXBseVRvQXJyYXkiLCJtdWx0aXBseVZlY3RvcjQiLCJyb3RhdGVBeGlzIiwiY3Jvc3NWZWN0b3IiLCJnZXRQb3NpdGlvbiIsInNldFBvc2l0aW9uIiwicm90YXRlWCIsInJvdGF0ZVkiLCJyb3RhdGVaIiwicm90YXRlQnlBeGlzIiwiZ2V0TWF4U2NhbGVPbkF4aXMiLCJtYWtlVHJhbnNsYXRpb24iLCJtYWtlUm90YXRpb25YIiwibWFrZVJvdGF0aW9uWSIsIm1ha2VSb3RhdGlvbloiLCJtYWtlUm90YXRpb25BeGlzIiwibWFrZVNjYWxlIiwiY29tcG9zZSIsImRlY29tcG9zZSIsIm1ha2VGcnVzdHVtIiwibWFrZVBlcnNwZWN0aXZlIiwiZGVnVG9SYWQiLCJtYWtlT3J0aG9ncmFwaGljIiwiUmF5Iiwib3JpZ2luIiwiZGlyZWN0aW9uIiwicmVjYXN0IiwiZGlzdGFuY2VTcVRvUG9pbnQiLCJkaXN0YW5jZVNxVG9TZWdtZW50IiwiaXNJbnRlcnNlY3Rpb25TcGhlcmUiLCJpbnRlcnNlY3RTcGhlcmUiLCJpc0ludGVyc2VjdGlvblBsYW5lIiwibm9ybWFsIiwiZGlzdGFuY2VUb1BsYW5lIiwiY29uc3RhbnQiLCJpbnRlcnNlY3RQbGFuZSIsImludGVyc2VjdEJveCIsImludGVyc2VjdFRyaWFuZ2xlIiwiaW50ZXJzZWN0c1NwaGVyZSIsImdldEJvdW5kaW5nQm94IiwiRnJ1c3R1bSIsInBsYW5lcyIsInNldEZyb21NYXRyaXgiLCJzZXRDb21wb25lbnRzIiwiaW50ZXJzZWN0c09iamVjdCIsImJvdW5kaW5nU3BoZXJlIiwiY29tcHV0ZUJvdW5kaW5nU3BoZXJlIiwiaW50ZXJzZWN0c0JveCIsInNldEZyb21Ob3JtYWxBbmRDb3BsYW5hclBvaW50Iiwic2V0RnJvbUNvcGxhbmFyUG9pbnRzIiwiZGlzdGFuY2VUb1NwaGVyZSIsInByb2plY3RQb2ludCIsIm9ydGhvUG9pbnQiLCJpc0ludGVyc2VjdGlvbkxpbmUiLCJpbnRlcnNlY3RMaW5lIiwiY29wbGFuYXJQb2ludCIsImdlbmVyYXRlVVVJRCIsIm1hcExpbmVhciIsInNtb290aHN0ZXAiLCJzbW9vdGhlcnN0ZXAiLCJyYW5kb20xNiIsInJhbmRJbnQiLCJyYW5kRmxvYXQiLCJyYW5kRmxvYXRTcHJlYWQiLCJyYWRUb0RlZyIsImlzUG93ZXJPZlR3byIsIm5lYXJlc3RQb3dlck9mVHdvIiwiTE4yIiwibmV4dFBvd2VyT2ZUd28iLCJTcGxpbmUiLCJwb2ludHMiLCJpbml0RnJvbUFycmF5IiwiZ2V0UG9pbnQiLCJnZXRDb250cm9sUG9pbnRzQXJyYXkiLCJnZXRMZW5ndGgiLCJjaHVua3MiLCJyZXBhcmFtZXRyaXplQnlBcmNMZW5ndGgiLCJUcmlhbmdsZSIsImJhcnljb29yZEZyb21Qb2ludCIsInNldEZyb21Qb2ludHNBbmRJbmRpY2VzIiwiYXJlYSIsIm1pZHBvaW50IiwiQ2hhbm5lbHMiLCJtYXNrIiwiZW5hYmxlIiwiZGlzYWJsZSIsIkNsb2NrIiwiYXV0b1N0YXJ0Iiwib2xkVGltZSIsInJ1bm5pbmciLCJzdG9wIiwiZ2V0RWxhcHNlZFRpbWUiLCJnZXREZWx0YSIsIkV2ZW50RGlzcGF0Y2hlciIsImFwcGx5IiwiaGFzRXZlbnRMaXN0ZW5lciIsImRpc3BhdGNoRXZlbnQiLCJfbGlzdGVuZXJzIiwidmlzaWJsZSIsInJheWNhc3QiLCJjaGlsZHJlbiIsIlJheWNhc3RlciIsInJheSIsIm5lYXIiLCJmYXIiLCJwYXJhbXMiLCJMaW5lIiwiTE9EIiwiUG9pbnRzIiwidGhyZXNob2xkIiwiU3ByaXRlIiwiZGVmaW5lUHJvcGVydGllcyIsIlBvaW50Q2xvdWQiLCJsaW5lUHJlY2lzaW9uIiwic2V0RnJvbUNhbWVyYSIsIk9ydGhvZ3JhcGhpY0NhbWVyYSIsImludGVyc2VjdE9iamVjdCIsImludGVyc2VjdE9iamVjdHMiLCJpc0FycmF5IiwiT2JqZWN0M0QiLCJPYmplY3QzRElkQ291bnQiLCJ1dWlkIiwicGFyZW50IiwiY2hhbm5lbHMiLCJEZWZhdWx0VXAiLCJlbnVtZXJhYmxlIiwicm90YXRpb24iLCJxdWF0ZXJuaW9uIiwibW9kZWxWaWV3TWF0cml4Iiwibm9ybWFsTWF0cml4Iiwicm90YXRpb25BdXRvVXBkYXRlIiwibWF0cml4IiwibWF0cml4QXV0b1VwZGF0ZSIsIkRlZmF1bHRNYXRyaXhBdXRvVXBkYXRlIiwibWF0cml4V29ybGROZWVkc1VwZGF0ZSIsInJlY2VpdmVTaGFkb3ciLCJjYXN0U2hhZG93IiwiZnJ1c3R1bUN1bGxlZCIsInJlbmRlck9yZGVyIiwidXNlckRhdGEiLCJldWxlck9yZGVyIiwidXNlUXVhdGVybmlvbiIsInJlbmRlckRlcHRoIiwiYXBwbHlNYXRyaXgiLCJzZXRSb3RhdGlvbkZyb21BeGlzQW5nbGUiLCJzZXRSb3RhdGlvbkZyb21FdWxlciIsInNldFJvdGF0aW9uRnJvbU1hdHJpeCIsInJvdGF0ZU9uQXhpcyIsInRyYW5zbGF0ZU9uQXhpcyIsInRyYW5zbGF0ZVgiLCJ0cmFuc2xhdGVZIiwidHJhbnNsYXRlWiIsImxvY2FsVG9Xb3JsZCIsIndvcmxkVG9Mb2NhbCIsImdldENoaWxkQnlOYW1lIiwiZ2V0T2JqZWN0QnlOYW1lIiwiZ2V0T2JqZWN0QnlJZCIsImdldE9iamVjdEJ5UHJvcGVydHkiLCJnZXRXb3JsZFBvc2l0aW9uIiwiZ2V0V29ybGRRdWF0ZXJuaW9uIiwiZ2V0V29ybGRSb3RhdGlvbiIsImdldFdvcmxkU2NhbGUiLCJnZXRXb3JsZERpcmVjdGlvbiIsInRyYXZlcnNlVmlzaWJsZSIsInRyYXZlcnNlQW5jZXN0b3JzIiwidXBkYXRlTWF0cml4IiwidG9KU09OIiwibWV0YWRhdGEiLCJnZW9tZXRyaWVzIiwibWF0ZXJpYWxzIiwiaW1hZ2VzIiwiZ2VuZXJhdG9yIiwiSlNPTiIsInN0cmluZ2lmeSIsIm9iamVjdCIsInBhcnNlIiwiRmFjZTMiLCJ2ZXJ0ZXhOb3JtYWxzIiwidmVydGV4Q29sb3JzIiwibWF0ZXJpYWxJbmRleCIsIkZhY2U0IiwiQnVmZmVyQXR0cmlidXRlIiwiZHluYW1pYyIsInVwZGF0ZVJhbmdlIiwiY291bnQiLCJuZWVkc1VwZGF0ZSIsInNldER5bmFtaWMiLCJjb3B5QXQiLCJjb3B5QXJyYXkiLCJjb3B5Q29sb3JzQXJyYXkiLCJjb3B5SW5kaWNlc0FycmF5IiwiY29weVZlY3RvcjJzQXJyYXkiLCJjb3B5VmVjdG9yM3NBcnJheSIsImNvcHlWZWN0b3I0c0FycmF5IiwiZ2V0VyIsInNldFhZIiwic2V0WFlaVyIsIkludDhBdHRyaWJ1dGUiLCJJbnQ4QXJyYXkiLCJVaW50OEF0dHJpYnV0ZSIsIlVpbnQ4QXJyYXkiLCJVaW50OENsYW1wZWRBdHRyaWJ1dGUiLCJVaW50OENsYW1wZWRBcnJheSIsIkludDE2QXR0cmlidXRlIiwiSW50MTZBcnJheSIsIlVpbnQxNkF0dHJpYnV0ZSIsIlVpbnQxNkFycmF5IiwiSW50MzJBdHRyaWJ1dGUiLCJJbnQzMkFycmF5IiwiVWludDMyQXR0cmlidXRlIiwiVWludDMyQXJyYXkiLCJGbG9hdDMyQXR0cmlidXRlIiwiRmxvYXQ2NEF0dHJpYnV0ZSIsIkZsb2F0NjRBcnJheSIsIkR5bmFtaWNCdWZmZXJBdHRyaWJ1dGUiLCJJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUiLCJtZXNoUGVyQXR0cmlidXRlIiwiSW50ZXJsZWF2ZWRCdWZmZXIiLCJzdHJpZGUiLCJJbnN0YW5jZWRJbnRlcmxlYXZlZEJ1ZmZlciIsIkludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlIiwiR2VvbWV0cnlJZENvdW50IiwiY29sb3JzIiwiZmFjZXMiLCJmYWNlVmVydGV4VXZzIiwibW9ycGhUYXJnZXRzIiwibW9ycGhOb3JtYWxzIiwic2tpbldlaWdodHMiLCJza2luSW5kaWNlcyIsImxpbmVEaXN0YW5jZXMiLCJib3VuZGluZ0JveCIsImdyb3Vwc05lZWRVcGRhdGUiLCJsaW5lRGlzdGFuY2VzTmVlZFVwZGF0ZSIsImNvbG9yc05lZWRVcGRhdGUiLCJub3JtYWxzTmVlZFVwZGF0ZSIsInV2c05lZWRVcGRhdGUiLCJlbGVtZW50c05lZWRVcGRhdGUiLCJ2ZXJ0aWNlc05lZWRVcGRhdGUiLCJjb21wdXRlQm91bmRpbmdCb3giLCJmcm9tQnVmZmVyR2VvbWV0cnkiLCJ1diIsInV2MiIsImdyb3VwcyIsImNvbXB1dGVGYWNlTm9ybWFscyIsImNvbXB1dGVWZXJ0ZXhOb3JtYWxzIiwiY29tcHV0ZU1vcnBoTm9ybWFscyIsIl9fb3JpZ2luYWxGYWNlTm9ybWFsIiwiX19vcmlnaW5hbFZlcnRleE5vcm1hbHMiLCJmYWNlTm9ybWFscyIsImNvbXB1dGVUYW5nZW50cyIsImNvbXB1dGVMaW5lRGlzdGFuY2VzIiwibWVyZ2UiLCJtZXJnZU1lc2giLCJtZXJnZVZlcnRpY2VzIiwic29ydEZhY2VzQnlNYXRlcmlhbEluZGV4IiwiX2lkIiwicGFyYW1ldGVycyIsIm5vcm1hbHMiLCJ1dnMiLCJkaXNwb3NlIiwiRGlyZWN0R2VvbWV0cnkiLCJpbmRpY2VzIiwidXZzMiIsImNvbXB1dGVHcm91cHMiLCJmcm9tR2VvbWV0cnkiLCJtb3JwaEF0dHJpYnV0ZXMiLCJkcmF3UmFuZ2UiLCJhZGRJbmRleCIsInNldEluZGV4IiwiZ2V0SW5kZXgiLCJhZGRBdHRyaWJ1dGUiLCJnZXRBdHRyaWJ1dGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJkcmF3Y2FsbHMiLCJvZmZzZXRzIiwiYWRkRHJhd0NhbGwiLCJhZGRHcm91cCIsImNsZWFyRHJhd0NhbGxzIiwiY2xlYXJHcm91cHMiLCJzZXREcmF3UmFuZ2UiLCJ1cGRhdGVGcm9tT2JqZWN0IiwiX19kaXJlY3RHZW9tZXRyeSIsImxpbmVEaXN0YW5jZSIsImZyb21EaXJlY3RHZW9tZXRyeSIsImlzTmFOIiwibm9ybWFsaXplTm9ybWFscyIsImNvbXB1dGVPZmZzZXRzIiwiTWF4SW5kZXgiLCJJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSIsIm1heEluc3RhbmNlZENvdW50IiwiaW5zdGFuY2VzIiwiQW5pbWF0aW9uQWN0aW9uIiwiY2xpcCIsImxvY2FsUm9vdCIsInRpbWVTY2FsZSIsIndlaWdodCIsImxvb3BDb3VudCIsImVuYWJsZWQiLCJhY3Rpb25UaW1lIiwiY2xpcFRpbWUiLCJwcm9wZXJ0eUJpbmRpbmdzIiwic2V0TG9jYWxSb290IiwidXBkYXRlVGltZSIsImR1cmF0aW9uIiwibWl4ZXIiLCJhY3Rpb24iLCJsb29wRGVsdGEiLCJzeW5jV2l0aCIsIndhcnBUb0R1cmF0aW9uIiwiZ2V0QXQiLCJnZXRUaW1lU2NhbGVBdCIsImdldFdlaWdodEF0IiwiQW5pbWF0aW9uQ2xpcCIsInRyYWNrcyIsInRyaW0iLCJvcHRpbWl6ZSIsInJlc3VsdHMiLCJDcmVhdGVGcm9tTW9ycGhUYXJnZXRTZXF1ZW5jZSIsIktleWZyYW1lVHJhY2siLCJrZXlDb21wYXJlciIsIk51bWJlcktleWZyYW1lVHJhY2siLCJmaW5kQnlOYW1lIiwiQ3JlYXRlQ2xpcHNGcm9tTW9ycGhUYXJnZXRTZXF1ZW5jZXMiLCJmcHMiLCJwYXJzZUFuaW1hdGlvbiIsImhpZXJhcmNoeSIsIm1vcnBoVGFyZ2V0IiwiVmVjdG9yS2V5ZnJhbWVUcmFjayIsIlF1YXRlcm5pb25LZXlmcmFtZVRyYWNrIiwicm90Iiwic2NsIiwiQW5pbWF0aW9uTWl4ZXIiLCJyb290IiwiYWN0aW9ucyIsInByb3BlcnR5QmluZGluZ01hcCIsImFkZEFjdGlvbiIsIlByb3BlcnR5QmluZGluZyIsInJlZmVyZW5jZUNvdW50IiwicmVtb3ZlQWxsQWN0aW9ucyIsInVuYmluZCIsInJlbW92ZUFjdGlvbiIsImZpbmRBY3Rpb25CeU5hbWUiLCJmYWRlT3V0IiwiZmFkZUluIiwid2FycCIsImNyb3NzRmFkZSIsImFjY3VtdWxhdGUiLCJBbmltYXRpb25VdGlscyIsImdldEVxdWFsc0Z1bmMiLCJnZXRMZXJwRnVuYyIsImxlcnBfb2JqZWN0Iiwic2xlcnBfb2JqZWN0IiwibGVycF9udW1iZXIiLCJsZXJwX2Jvb2xlYW4iLCJsZXJwX2Jvb2xlYW5faW1tZWRpYXRlIiwibGVycF9zdHJpbmciLCJsZXJwX3N0cmluZ19pbW1lZGlhdGUiLCJsYXN0SW5kZXgiLCJ2YWxpZGF0ZSIsInNldFJlc3VsdCIsInJlc3VsdCIsImNvbnN0YW50VG9OZXh0IiwibGVycFZhbHVlcyIsInNoaWZ0IiwiY29tcGFyZVZhbHVlcyIsIkdldFRyYWNrVHlwZUZvclR5cGVOYW1lIiwiQm9vbGVhbktleWZyYW1lVHJhY2siLCJTdHJpbmdLZXlmcmFtZVRyYWNrIiwicm9vdE5vZGUiLCJ0cmFja05hbWUiLCJvcmlnaW5hbFZhbHVlIiwicGFyc2VUcmFja05hbWUiLCJkaXJlY3RvcnlOYW1lIiwibm9kZU5hbWUiLCJvYmplY3ROYW1lIiwib2JqZWN0SW5kZXgiLCJwcm9wZXJ0eU5hbWUiLCJwcm9wZXJ0eUluZGV4Iiwibm9kZSIsImZpbmROb2RlIiwiY3VtdWxhdGl2ZVZhbHVlIiwiY3VtdWxhdGl2ZVdlaWdodCIsInJlc2V0IiwiaXNCb3VuZCIsImxlcnBWYWx1ZSIsInNldFZhbHVlIiwidHJpZ2dlckRpcnR5IiwiZXF1YWxzVmFsdWUiLCJnZXRWYWx1ZSIsInNrZWxldG9uIiwiYm9uZXMiLCJtYXRyaXhXb3JsZEludmVyc2UiLCJDdWJlQ2FtZXJhIiwicmVuZGVyVGFyZ2V0IiwiV2ViR0xSZW5kZXJUYXJnZXRDdWJlIiwiZm9ybWF0IiwibWFnRmlsdGVyIiwibWluRmlsdGVyIiwidXBkYXRlQ3ViZU1hcCIsImdlbmVyYXRlTWlwbWFwcyIsImFjdGl2ZUN1YmVGYWNlIiwic2V0UmVuZGVyVGFyZ2V0IiwicmlnaHQiLCJib3R0b20iLCJmb3YiLCJzZXRMZW5zIiwiYXRhbiIsInNldFZpZXdPZmZzZXQiLCJmdWxsV2lkdGgiLCJmdWxsSGVpZ2h0IiwiTGlnaHQiLCJvbmx5U2hhZG93Iiwic2hhZG93Q2FtZXJhRm92Iiwic2hhZG93Iiwic2hhZG93Q2FtZXJhTGVmdCIsInNoYWRvd0NhbWVyYVJpZ2h0Iiwic2hhZG93Q2FtZXJhVG9wIiwic2hhZG93Q2FtZXJhQm90dG9tIiwic2hhZG93Q2FtZXJhTmVhciIsInNoYWRvd0NhbWVyYUZhciIsInNoYWRvd0NhbWVyYVZpc2libGUiLCJzaGFkb3dCaWFzIiwiYmlhcyIsInNoYWRvd0RhcmtuZXNzIiwiZGFya25lc3MiLCJzaGFkb3dNYXBXaWR0aCIsIm1hcFNpemUiLCJzaGFkb3dNYXBIZWlnaHQiLCJncm91bmRDb2xvciIsImludGVuc2l0eSIsImRlY2F5IiwiZXhwb25lbnQiLCJMaWdodFNoYWRvdyIsIm1hcCIsIkFtYmllbnRMaWdodCIsIkhlbWlzcGhlcmVMaWdodCIsIlBvaW50TGlnaHQiLCJTcG90TGlnaHQiLCJDYWNoZSIsImZpbGVzIiwib25Mb2FkU3RhcnQiLCJvbkxvYWRQcm9ncmVzcyIsIm9uTG9hZENvbXBsZXRlIiwiY3Jvc3NPcmlnaW4iLCJleHRyYWN0VXJsQmFzZSIsInBvcCIsImluaXRNYXRlcmlhbHMiLCJjcmVhdGVNYXRlcmlhbCIsIkhhbmRsZXJzIiwic2V0Q3Jvc3NPcmlnaW4iLCJ3cmFwUyIsIndyYXBUIiwiYW5pc290cm9weSIsIlRleHR1cmVMb2FkZXIiLCJNYXRlcmlhbExvYWRlciIsImJsZW5kaW5nIiwic3BlY3VsYXIiLCJlbWlzc2l2ZSIsInNoaW5pbmVzcyIsIm1hcERpZmZ1c2VSZXBlYXQiLCJtYXBEaWZmdXNlT2Zmc2V0IiwibWFwRGlmZnVzZVdyYXAiLCJtYXBEaWZmdXNlQW5pc290cm9weSIsImxpZ2h0TWFwIiwibWFwTGlnaHRSZXBlYXQiLCJtYXBMaWdodE9mZnNldCIsIm1hcExpZ2h0V3JhcCIsIm1hcExpZ2h0QW5pc290cm9weSIsImFvTWFwIiwibWFwQU9SZXBlYXQiLCJtYXBBT09mZnNldCIsIm1hcEFPV3JhcCIsIm1hcEFPQW5pc290cm9weSIsImJ1bXBNYXAiLCJtYXBCdW1wUmVwZWF0IiwibWFwQnVtcE9mZnNldCIsIm1hcEJ1bXBXcmFwIiwibWFwQnVtcEFuaXNvdHJvcHkiLCJidW1wU2NhbGUiLCJub3JtYWxNYXAiLCJtYXBOb3JtYWxSZXBlYXQiLCJtYXBOb3JtYWxPZmZzZXQiLCJtYXBOb3JtYWxXcmFwIiwibWFwTm9ybWFsQW5pc290cm9weSIsIm5vcm1hbFNjYWxlIiwic3BlY3VsYXJNYXAiLCJtYXBTcGVjdWxhclJlcGVhdCIsIm1hcFNwZWN1bGFyT2Zmc2V0IiwibWFwU3BlY3VsYXJXcmFwIiwibWFwU3BlY3VsYXJBbmlzb3Ryb3B5IiwiYWxwaGFNYXAiLCJtYXBBbHBoYVJlcGVhdCIsIm1hcEFscGhhT2Zmc2V0IiwibWFwQWxwaGFXcmFwIiwibWFwQWxwaGFBbmlzb3Ryb3B5Iiwic2lkZSIsInNldFRleHR1cmVzIiwiaGFuZGxlcnMiLCJYSFJMb2FkZXIiLCJtYW5hZ2VyIiwiRGVmYXVsdExvYWRpbmdNYW5hZ2VyIiwiWE1MSHR0cFJlcXVlc3QiLCJyZXNwb25zZSIsIml0ZW1FbmQiLCJpdGVtRXJyb3IiLCJyZXNwb25zZVR5cGUiLCJ3aXRoQ3JlZGVudGlhbHMiLCJzZW5kIiwiaXRlbVN0YXJ0Iiwic2V0UmVzcG9uc2VUeXBlIiwic2V0V2l0aENyZWRlbnRpYWxzIiwiSW1hZ2VMb2FkZXIiLCJKU09OTG9hZGVyIiwic3RhdHVzRG9tRWxlbWVudCIsIl9zdGF0dXNEb21FbGVtZW50IiwidGV4dHVyZVBhdGgiLCJzZXRUZXh0dXJlUGF0aCIsImluZmx1ZW5jZXNQZXJWZXJ0ZXgiLCJtb3JwaENvbG9ycyIsImFuaW1hdGlvbiIsImFuaW1hdGlvbnMiLCJjb25jYXQiLCJMb2FkaW5nTWFuYWdlciIsIm9uUHJvZ3Jlc3MiLCJvbkVycm9yIiwiQnVmZmVyR2VvbWV0cnlMb2FkZXIiLCJnZXRUZXh0dXJlIiwic2hhZGluZyIsImFscGhhVGVzdCIsImRlcHRoVGVzdCIsImRlcHRoV3JpdGUiLCJ3aXJlZnJhbWVMaW5ld2lkdGgiLCJzaXplQXR0ZW51YXRpb24iLCJkaXNwbGFjZW1lbnRNYXAiLCJkaXNwbGFjZW1lbnRTY2FsZSIsImRpc3BsYWNlbWVudEJpYXMiLCJlbnZNYXAiLCJjb21iaW5lIiwicmVmbGVjdGl2aXR5IiwibGlnaHRNYXBJbnRlbnNpdHkiLCJhb01hcEludGVuc2l0eSIsIk9iamVjdExvYWRlciIsInN1YnN0cmluZyIsImxhc3RJbmRleE9mIiwicGFyc2VHZW9tZXRyaWVzIiwicGFyc2VJbWFnZXMiLCJwYXJzZVRleHR1cmVzIiwicGFyc2VNYXRlcmlhbHMiLCJwYXJzZU9iamVjdCIsInBhcnNlQW5pbWF0aW9ucyIsIndpZHRoU2VnbWVudHMiLCJoZWlnaHRTZWdtZW50cyIsImRlcHRoU2VnbWVudHMiLCJDaXJjbGVCdWZmZXJHZW9tZXRyeSIsInNlZ21lbnRzIiwidGhldGFTdGFydCIsInRoZXRhTGVuZ3RoIiwiQ2lyY2xlR2VvbWV0cnkiLCJDeWxpbmRlckdlb21ldHJ5IiwicmFkaXVzVG9wIiwicmFkaXVzQm90dG9tIiwicmFkaWFsU2VnbWVudHMiLCJvcGVuRW5kZWQiLCJTcGhlcmVHZW9tZXRyeSIsInBoaVN0YXJ0IiwicGhpTGVuZ3RoIiwiU3BoZXJlQnVmZmVyR2VvbWV0cnkiLCJEb2RlY2FoZWRyb25HZW9tZXRyeSIsImRldGFpbCIsIkljb3NhaGVkcm9uR2VvbWV0cnkiLCJPY3RhaGVkcm9uR2VvbWV0cnkiLCJUZXRyYWhlZHJvbkdlb21ldHJ5IiwiUmluZ0dlb21ldHJ5IiwiaW5uZXJSYWRpdXMiLCJvdXRlclJhZGl1cyIsInRoZXRhU2VnbWVudHMiLCJwaGlTZWdtZW50cyIsIlRvcnVzR2VvbWV0cnkiLCJ0dWJlIiwidHVidWxhclNlZ21lbnRzIiwiYXJjIiwiVG9ydXNLbm90R2VvbWV0cnkiLCJoZWlnaHRTY2FsZSIsIlRleHR1cmUiLCJtYXBwaW5nIiwiR3JvdXAiLCJsZXZlbHMiLCJhZGRMZXZlbCIsIkN1YmVUZXh0dXJlTG9hZGVyIiwiQ3ViZVRleHR1cmUiLCJEYXRhVGV4dHVyZUxvYWRlciIsIkJpbmFyeVRleHR1cmVMb2FkZXIiLCJfcGFyc2VyIiwiRGF0YVRleHR1cmUiLCJtaXBtYXBzIiwibWlwbWFwQ291bnQiLCJDb21wcmVzc2VkVGV4dHVyZUxvYWRlciIsIkNvbXByZXNzZWRUZXh0dXJlIiwiaXNDdWJlbWFwIiwiTWF0ZXJpYWwiLCJNYXRlcmlhbElkQ291bnQiLCJibGVuZFNyYyIsImJsZW5kRHN0IiwiYmxlbmRFcXVhdGlvbiIsImJsZW5kRXF1YXRpb25BbHBoYSIsImJsZW5kRHN0QWxwaGEiLCJibGVuZFNyY0FscGhhIiwiZGVwdGhGdW5jIiwiY29sb3JXcml0ZSIsInByZWNpc2lvbiIsInBvbHlnb25PZmZzZXQiLCJvdmVyZHJhdyIsInBvbHlnb25PZmZzZXRVbml0cyIsInBvbHlnb25PZmZzZXRGYWN0b3IiLCJfbmVlZHNVcGRhdGUiLCJzZXRWYWx1ZXMiLCJ3cmFwQXJvdW5kIiwid3JhcFJHQiIsIkxpbmVCYXNpY01hdGVyaWFsIiwibGluZXdpZHRoIiwibGluZWpvaW4iLCJsaW5lY2FwIiwiZm9nIiwiTGluZURhc2hlZE1hdGVyaWFsIiwiZGFzaFNpemUiLCJnYXBTaXplIiwicmVmcmFjdGlvblJhdGlvIiwid2lyZWZyYW1lTGluZWpvaW4iLCJ3aXJlZnJhbWVMaW5lY2FwIiwic2tpbm5pbmciLCJNZXNoTGFtYmVydE1hdGVyaWFsIiwiTWVzaFBob25nTWF0ZXJpYWwiLCJtZXRhbCIsImVtaXNzaXZlTWFwIiwiTWVzaERlcHRoTWF0ZXJpYWwiLCJNZXNoTm9ybWFsTWF0ZXJpYWwiLCJNdWx0aU1hdGVyaWFsIiwiTWVzaEZhY2VNYXRlcmlhbCIsIlBvaW50c01hdGVyaWFsIiwiUG9pbnRDbG91ZE1hdGVyaWFsIiwiUGFydGljbGVCYXNpY01hdGVyaWFsIiwiUGFydGljbGVTeXN0ZW1NYXRlcmlhbCIsImRlZmluZXMiLCJsaWdodHMiLCJkZXJpdmF0aXZlcyIsImRlZmF1bHRBdHRyaWJ1dGVWYWx1ZXMiLCJpbmRleDBBdHRyaWJ1dGVOYW1lIiwiVW5pZm9ybXNVdGlscyIsIlJhd1NoYWRlck1hdGVyaWFsIiwiU3ByaXRlTWF0ZXJpYWwiLCJUZXh0dXJlSWRDb3VudCIsInNvdXJjZUZpbGUiLCJERUZBVUxUX0lNQUdFIiwiREVGQVVMVF9NQVBQSU5HIiwicHJlbXVsdGlwbHlBbHBoYSIsImZsaXBZIiwidW5wYWNrQWxpZ25tZW50Iiwib25VcGRhdGUiLCJ0b0RhdGFVUkwiLCJ0cmFuc2Zvcm1VdiIsIkNhbnZhc1RleHR1cmUiLCJWaWRlb1RleHR1cmUiLCJyZWFkeVN0YXRlIiwiSEFWRV9FTk9VR0hfREFUQSIsImRpc3RhbmNlVG9SYXkiLCJwb2ludCIsImZhY2UiLCJQYXJ0aWNsZVN5c3RlbSIsIkxpbmVTZWdtZW50cyIsImZhY2VJbmRleCIsIkxpbmVTdHJpcCIsIkxpbmVQaWVjZXMiLCJ1cGRhdGVNb3JwaFRhcmdldHMiLCJtb3JwaFRhcmdldEJhc2UiLCJtb3JwaFRhcmdldEluZmx1ZW5jZXMiLCJtb3JwaFRhcmdldERpY3Rpb25hcnkiLCJnZXRNb3JwaFRhcmdldEluZGV4QnlOYW1lIiwiVCIsIlIiLCJHIiwiQm9uZSIsInNraW4iLCJTa2VsZXRvbiIsInVzZVZlcnRleFRleHR1cmUiLCJpZGVudGl0eU1hdHJpeCIsImJvbmVUZXh0dXJlSGVpZ2h0IiwiYm9uZVRleHR1cmVXaWR0aCIsImJvbmVNYXRyaWNlcyIsImJvbmVUZXh0dXJlIiwiY2FsY3VsYXRlSW52ZXJzZXMiLCJib25lSW52ZXJzZXMiLCJwb3NlIiwiU2tpbm5lZE1lc2giLCJiaW5kTW9kZSIsImJpbmRNYXRyaXgiLCJiaW5kTWF0cml4SW52ZXJzZSIsInJvdHEiLCJub3JtYWxpemVTa2luV2VpZ2h0cyIsIm9iamVjdHMiLCJnZXRPYmplY3RGb3JEaXN0YW5jZSIsIlBhcnRpY2xlIiwiTGVuc0ZsYXJlIiwibGVuc0ZsYXJlcyIsInBvc2l0aW9uU2NyZWVuIiwiY3VzdG9tVXBkYXRlQ2FsbGJhY2siLCJ1cGRhdGVMZW5zRmxhcmVzIiwid2FudGVkUm90YXRpb24iLCJvdmVycmlkZU1hdGVyaWFsIiwiYXV0b1VwZGF0ZSIsIkZvZyIsIkZvZ0V4cDIiLCJkZW5zaXR5IiwiU2hhZGVyQ2h1bmsiLCJhbHBoYW1hcF9mcmFnbWVudCIsImFscGhhbWFwX3BhcnNfZnJhZ21lbnQiLCJhbHBoYXRlc3RfZnJhZ21lbnQiLCJhb21hcF9mcmFnbWVudCIsImFvbWFwX3BhcnNfZnJhZ21lbnQiLCJiZWdpbl92ZXJ0ZXgiLCJiZWdpbm5vcm1hbF92ZXJ0ZXgiLCJidW1wbWFwX3BhcnNfZnJhZ21lbnQiLCJjb2xvcl9mcmFnbWVudCIsImNvbG9yX3BhcnNfZnJhZ21lbnQiLCJjb2xvcl9wYXJzX3ZlcnRleCIsImNvbG9yX3ZlcnRleCIsImRlZmF1bHRub3JtYWxfdmVydGV4IiwiZGlzcGxhY2VtZW50bWFwX3ZlcnRleCIsImRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleCIsImVtaXNzaXZlbWFwX2ZyYWdtZW50IiwiZW1pc3NpdmVtYXBfcGFyc19mcmFnbWVudCIsImVudm1hcF9mcmFnbWVudCIsImVudm1hcF9wYXJzX2ZyYWdtZW50IiwiZW52bWFwX3BhcnNfdmVydGV4IiwiZW52bWFwX3ZlcnRleCIsImZvZ19mcmFnbWVudCIsImZvZ19wYXJzX2ZyYWdtZW50IiwiaGVtaWxpZ2h0X2ZyYWdtZW50IiwibGlnaHRtYXBfZnJhZ21lbnQiLCJsaWdodG1hcF9wYXJzX2ZyYWdtZW50IiwibGlnaHRzX2xhbWJlcnRfcGFyc192ZXJ0ZXgiLCJsaWdodHNfbGFtYmVydF92ZXJ0ZXgiLCJsaWdodHNfcGhvbmdfZnJhZ21lbnQiLCJsaWdodHNfcGhvbmdfcGFyc19mcmFnbWVudCIsImxpZ2h0c19waG9uZ19wYXJzX3ZlcnRleCIsImxpZ2h0c19waG9uZ192ZXJ0ZXgiLCJsaW5lYXJfdG9fZ2FtbWFfZnJhZ21lbnQiLCJsb2dkZXB0aGJ1Zl9mcmFnbWVudCIsImxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQiLCJsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleCIsImxvZ2RlcHRoYnVmX3ZlcnRleCIsIm1hcF9mcmFnbWVudCIsIm1hcF9wYXJzX2ZyYWdtZW50IiwibWFwX3BhcnRpY2xlX2ZyYWdtZW50IiwibWFwX3BhcnRpY2xlX3BhcnNfZnJhZ21lbnQiLCJtb3JwaG5vcm1hbF92ZXJ0ZXgiLCJtb3JwaHRhcmdldF9wYXJzX3ZlcnRleCIsIm1vcnBodGFyZ2V0X3ZlcnRleCIsIm5vcm1hbF9waG9uZ19mcmFnbWVudCIsIm5vcm1hbG1hcF9wYXJzX2ZyYWdtZW50IiwicHJvamVjdF92ZXJ0ZXgiLCJzaGFkb3dtYXBfZnJhZ21lbnQiLCJzaGFkb3dtYXBfcGFyc19mcmFnbWVudCIsInNoYWRvd21hcF9wYXJzX3ZlcnRleCIsInNoYWRvd21hcF92ZXJ0ZXgiLCJza2luYmFzZV92ZXJ0ZXgiLCJza2lubmluZ19wYXJzX3ZlcnRleCIsInNraW5uaW5nX3ZlcnRleCIsInNraW5ub3JtYWxfdmVydGV4Iiwic3BlY3VsYXJtYXBfZnJhZ21lbnQiLCJzcGVjdWxhcm1hcF9wYXJzX2ZyYWdtZW50IiwidXYyX3BhcnNfZnJhZ21lbnQiLCJ1djJfcGFyc192ZXJ0ZXgiLCJ1djJfdmVydGV4IiwidXZfcGFyc19mcmFnbWVudCIsInV2X3BhcnNfdmVydGV4IiwidXZfdmVydGV4Iiwid29ybGRwb3NfdmVydGV4IiwiVW5pZm9ybXNMaWIiLCJkaWZmdXNlIiwib2Zmc2V0UmVwZWF0IiwiZmxpcEVudk1hcCIsImFvbWFwIiwibGlnaHRtYXAiLCJlbWlzc2l2ZW1hcCIsImJ1bXBtYXAiLCJub3JtYWxtYXAiLCJkaXNwbGFjZW1lbnRtYXAiLCJmb2dEZW5zaXR5IiwiZm9nTmVhciIsImZvZ0ZhciIsImZvZ0NvbG9yIiwiYW1iaWVudExpZ2h0Q29sb3IiLCJkaXJlY3Rpb25hbExpZ2h0RGlyZWN0aW9uIiwiZGlyZWN0aW9uYWxMaWdodENvbG9yIiwiaGVtaXNwaGVyZUxpZ2h0RGlyZWN0aW9uIiwiaGVtaXNwaGVyZUxpZ2h0U2t5Q29sb3IiLCJoZW1pc3BoZXJlTGlnaHRHcm91bmRDb2xvciIsInBvaW50TGlnaHRDb2xvciIsInBvaW50TGlnaHRQb3NpdGlvbiIsInBvaW50TGlnaHREaXN0YW5jZSIsInBvaW50TGlnaHREZWNheSIsInNwb3RMaWdodENvbG9yIiwic3BvdExpZ2h0UG9zaXRpb24iLCJzcG90TGlnaHREaXJlY3Rpb24iLCJzcG90TGlnaHREaXN0YW5jZSIsInNwb3RMaWdodEFuZ2xlQ29zIiwic3BvdExpZ2h0RXhwb25lbnQiLCJzcG90TGlnaHREZWNheSIsInBzQ29sb3IiLCJzaGFkb3dtYXAiLCJzaGFkb3dNYXAiLCJzaGFkb3dNYXBTaXplIiwic2hhZG93TWF0cml4IiwiU2hhZGVyTGliIiwiYmFzaWMiLCJsYW1iZXJ0IiwicGhvbmciLCJkYXNoZWQiLCJ0b3RhbFNpemUiLCJtTmVhciIsIm1GYXIiLCJ0Q3ViZSIsInRGbGlwIiwiZXF1aXJlY3QiLCJ0RXF1aXJlY3QiLCJkZXB0aFJHQkEiLCJkaXN0YW5jZVJHQkEiLCJsaWdodFBvcyIsImNsZWFyQ29sb3IiLCJJIiwidmlld3BvcnQiLCJuYSIsIm9hIiwicGEiLCJxYSIsIlUiLCJYIiwicmEiLCJBYSIsInNhIiwidGEiLCJ3YSIsIl9faW1hZ2VfX3dlYmdsVGV4dHVyZUN1YmUiLCJkZWxldGVUZXh0dXJlIiwiX193ZWJnbEluaXQiLCJfX3dlYmdsVGV4dHVyZSIsImRlbGV0ZSIsImRlbGV0ZUZyYW1lYnVmZmVyIiwiX193ZWJnbEZyYW1lYnVmZmVyIiwiZGVsZXRlUmVuZGVyYnVmZmVyIiwiX193ZWJnbFJlbmRlcmJ1ZmZlciIsInByb2dyYW0iLCJyZWxlYXNlUHJvZ3JhbSIsIloiLCJmYSIsImNhIiwiZ2EiLCJWIiwiZ3JvdXAiLCJkYSIsImVhIiwiamEiLCJJbW1lZGlhdGVSZW5kZXJPYmplY3QiLCJhYSIsInNvcnRPYmplY3RzIiwieGEiLCJCYSIsInZhIiwicmVuZGVyQnVmZmVySW1tZWRpYXRlIiwicmVuZGVyQnVmZmVyRGlyZWN0IiwiQ1VMTF9GQUNFIiwic2V0RmxpcFNpZGVkIiwic2V0QmxlbmRpbmciLCJzZXREZXB0aEZ1bmMiLCJzZXREZXB0aFRlc3QiLCJzZXREZXB0aFdyaXRlIiwic2V0Q29sb3JXcml0ZSIsInNldFBvbHlnb25PZmZzZXQiLCJ5YSIsImdldFBhcmFtZXRlcnMiLCJnZXRQcm9ncmFtQ29kZSIsImNvZGUiLCJzaGFkZXJJRCIsIl9fd2ViZ2xTaGFkZXIiLCJhY3F1aXJlUHJvZ3JhbSIsImdldEF0dHJpYnV0ZXMiLCJudW1TdXBwb3J0ZWRNb3JwaFRhcmdldHMiLCJtYXhNb3JwaFRhcmdldHMiLCJudW1TdXBwb3J0ZWRNb3JwaE5vcm1hbHMiLCJtYXhNb3JwaE5vcm1hbHMiLCJ1bmlmb3Jtc0xpc3QiLCJnZXRVbmlmb3JtcyIsInVzZVByb2dyYW0iLCJ1bmlmb3JtTWF0cml4NGZ2IiwiaGEiLCJsb2dhcml0aG1pY0RlcHRoQnVmZmVyIiwidW5pZm9ybTFmIiwibG9nRGVwdGhCdWZGQyIsImNhbWVyYVBvc2l0aW9uIiwidW5pZm9ybTNmIiwidmlld01hdHJpeCIsImZsb2F0VmVydGV4VGV4dHVyZXMiLCJ1bmlmb3JtMWkiLCJzZXRUZXh0dXJlIiwiYm9uZUdsb2JhbE1hdHJpY2VzIiwiQ2EiLCJkaXJlY3Rpb25hbCIsInBvc2l0aW9ucyIsImRpc3RhbmNlcyIsImRlY2F5cyIsInNwb3QiLCJkaXJlY3Rpb25zIiwiYW5nbGVzQ29zIiwiZXhwb25lbnRzIiwiaGVtaSIsInNreUNvbG9ycyIsImdyb3VuZENvbG9ycyIsIlMiLCJtYSIsImJhIiwiWSIsImFtYmllbnQiLCJQIiwiV2ViR0xSZW5kZXJUYXJnZXQiLCJfc2hhZG93UGFzcyIsInVuaWZvcm0yZiIsInVuaWZvcm00ZiIsInVuaWZvcm0xaXYiLCJ1bmlmb3JtM2l2IiwidW5pZm9ybTFmdiIsInVuaWZvcm0yZnYiLCJ1bmlmb3JtM2Z2IiwidW5pZm9ybTRmdiIsInVuaWZvcm1NYXRyaXgzZnYiLCJfYXJyYXkiLCJtb2RlbE1hdHJpeCIsIm1heFRleHR1cmVzIiwidGV4UGFyYW1ldGVyaSIsIlRFWFRVUkVfV1JBUF9TIiwiVEVYVFVSRV9XUkFQX1QiLCJURVhUVVJFX01BR19GSUxURVIiLCJURVhUVVJFX01JTl9GSUxURVIiLCJDTEFNUF9UT19FREdFIiwiX19jdXJyZW50QW5pc290cm9weSIsInRleFBhcmFtZXRlcmYiLCJURVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCIsImdldE1heEFuaXNvdHJvcHkiLCJfX3ZlcnNpb24iLCJjcmVhdGVUZXh0dXJlIiwibGEiLCJhY3RpdmVUZXh0dXJlIiwiVEVYVFVSRTAiLCJiaW5kVGV4dHVyZSIsIlRFWFRVUkVfQ1VCRV9NQVAiLCJwaXhlbFN0b3JlaSIsIlVOUEFDS19GTElQX1lfV0VCR0wiLCJhdXRvU2NhbGVDdWJlbWFwcyIsIm1heEN1YmVtYXBTaXplIiwiZ2V0Q29tcHJlc3NlZFRleHR1cmVGb3JtYXRzIiwiY29tcHJlc3NlZFRleEltYWdlMkQiLCJURVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1giLCJ0ZXhJbWFnZTJEIiwiZ2VuZXJhdGVNaXBtYXAiLCJiaW5kRnJhbWVidWZmZXIiLCJGUkFNRUJVRkZFUiIsImZyYW1lYnVmZmVyVGV4dHVyZTJEIiwiQ09MT1JfQVRUQUNITUVOVDAiLCJiaW5kUmVuZGVyYnVmZmVyIiwiUkVOREVSQlVGRkVSIiwiZGVwdGhCdWZmZXIiLCJzdGVuY2lsQnVmZmVyIiwicmVuZGVyYnVmZmVyU3RvcmFnZSIsIkRFUFRIX0NPTVBPTkVOVDE2IiwiZnJhbWVidWZmZXJSZW5kZXJidWZmZXIiLCJERVBUSF9BVFRBQ0hNRU5UIiwiREVQVEhfU1RFTkNJTCIsIkRFUFRIX1NURU5DSUxfQVRUQUNITUVOVCIsIlJHQkE0IiwiTkVBUkVTVCIsIkxJTkVBUiIsIlJFUEVBVCIsIk1JUlJPUkVEX1JFUEVBVCIsIk5FQVJFU1RfTUlQTUFQX05FQVJFU1QiLCJORUFSRVNUX01JUE1BUF9MSU5FQVIiLCJMSU5FQVJfTUlQTUFQX05FQVJFU1QiLCJMSU5FQVJfTUlQTUFQX0xJTkVBUiIsIlVOU0lHTkVEX0JZVEUiLCJVTlNJR05FRF9TSE9SVF80XzRfNF80IiwiVU5TSUdORURfU0hPUlRfNV81XzVfMSIsIlVOU0lHTkVEX1NIT1JUXzVfNl81IiwiQllURSIsIlNIT1JUIiwiVU5TSUdORURfU0hPUlQiLCJJTlQiLCJVTlNJR05FRF9JTlQiLCJGTE9BVCIsIkhBTEZfRkxPQVRfT0VTIiwiQUxQSEEiLCJSR0IiLCJSR0JBIiwiTFVNSU5BTkNFIiwiTFVNSU5BTkNFX0FMUEhBIiwiRlVOQ19BREQiLCJGVU5DX1NVQlRSQUNUIiwiRlVOQ19SRVZFUlNFX1NVQlRSQUNUIiwiWkVSTyIsIk9ORSIsIlNSQ19DT0xPUiIsIk9ORV9NSU5VU19TUkNfQ09MT1IiLCJTUkNfQUxQSEEiLCJPTkVfTUlOVVNfU1JDX0FMUEhBIiwiRFNUX0FMUEhBIiwiT05FX01JTlVTX0RTVF9BTFBIQSIsIkRTVF9DT0xPUiIsIk9ORV9NSU5VU19EU1RfQ09MT1IiLCJTUkNfQUxQSEFfU0FUVVJBVEUiLCJDT01QUkVTU0VEX1JHQl9TM1RDX0RYVDFfRVhUIiwiQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUMV9FWFQiLCJDT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQzX0VYVCIsIkNPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDVfRVhUIiwiQ09NUFJFU1NFRF9SR0JfUFZSVENfNEJQUFYxX0lNRyIsIkNPTVBSRVNTRURfUkdCX1BWUlRDXzJCUFBWMV9JTUciLCJDT01QUkVTU0VEX1JHQkFfUFZSVENfNEJQUFYxX0lNRyIsIkNPTVBSRVNTRURfUkdCQV9QVlJUQ18yQlBQVjFfSU1HIiwiTUlOX0VYVCIsIk1BWF9FWFQiLCJjb250ZXh0IiwiaWEiLCJwcmVzZXJ2ZURyYXdpbmdCdWZmZXIiLCJhdXRvQ2xlYXJTdGVuY2lsIiwiYXV0b0NsZWFyRGVwdGgiLCJhdXRvQ2xlYXJDb2xvciIsImF1dG9DbGVhciIsImdhbW1hRmFjdG9yIiwiZ2FtbWFPdXRwdXQiLCJnYW1tYUlucHV0IiwiemEiLCJEYSIsIkVhIiwia2EiLCJjYWxscyIsImluZm8iLCJtZW1vcnkiLCJwcm9ncmFtcyIsIkZhIiwiV2ViR0xFeHRlbnNpb25zIiwiV2ViR0xDYXBhYmlsaXRpZXMiLCJXZWJHTFN0YXRlIiwiV2ViR0xQcm9wZXJ0aWVzIiwiV2ViR0xPYmplY3RzIiwiV2ViR0xQcm9ncmFtcyIsIkdhIiwiV2ViR0xCdWZmZXJSZW5kZXJlciIsIkhhIiwiV2ViR0xJbmRleGVkQnVmZmVyUmVuZGVyZXIiLCJjYXBhYmlsaXRpZXMiLCJleHRlbnNpb25zIiwiV2ViR0xTaGFkb3dNYXAiLCJJYSIsIlNwcml0ZVBsdWdpbiIsIkphIiwiTGVuc0ZsYXJlUGx1Z2luIiwiZ2V0Q29udGV4dEF0dHJpYnV0ZXMiLCJmb3JjZUNvbnRleHRMb3NzIiwibG9zZUNvbnRleHQiLCJNQVhfVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQiLCJnZXRQcmVjaXNpb24iLCJnZXRQaXhlbFJhdGlvIiwic2V0Vmlld3BvcnQiLCJnZXRWaWV3cG9ydCIsInNldFNjaXNzb3IiLCJzY2lzc29yIiwiZW5hYmxlU2Npc3NvclRlc3QiLCJzZXRTY2lzc29yVGVzdCIsImdldENsZWFyQ29sb3IiLCJnZXRDbGVhckFscGhhIiwic2V0Q2xlYXJBbHBoYSIsIkNPTE9SX0JVRkZFUl9CSVQiLCJERVBUSF9CVUZGRVJfQklUIiwiU1RFTkNJTF9CVUZGRVJfQklUIiwiY2xlYXJEZXB0aCIsImNsZWFyU3RlbmNpbCIsImNsZWFyVGFyZ2V0IiwicmVzZXRHTFN0YXRlIiwiaW5pdEF0dHJpYnV0ZXMiLCJoYXNQb3NpdGlvbnMiLCJjcmVhdGVCdWZmZXIiLCJoYXNOb3JtYWxzIiwiaGFzVXZzIiwiaGFzQ29sb3JzIiwiYmluZEJ1ZmZlciIsIkFSUkFZX0JVRkZFUiIsImJ1ZmZlckRhdGEiLCJwb3NpdGlvbkFycmF5IiwiRFlOQU1JQ19EUkFXIiwiZW5hYmxlQXR0cmlidXRlIiwidmVydGV4QXR0cmliUG9pbnRlciIsIm5vcm1hbEFycmF5IiwidXZBcnJheSIsImNvbG9yQXJyYXkiLCJkaXNhYmxlVW51c2VkQXR0cmlidXRlcyIsImRyYXdBcnJheXMiLCJUUklBTkdMRVMiLCJnZXRXaXJlZnJhbWVBdHRyaWJ1dGUiLCJnZXRBdHRyaWJ1dGVCdWZmZXIiLCJlbmFibGVBdHRyaWJ1dGVBbmREaXZpc29yIiwiQllURVNfUEVSX0VMRU1FTlQiLCJ2ZXJ0ZXhBdHRyaWIyZnYiLCJ2ZXJ0ZXhBdHRyaWIzZnYiLCJ2ZXJ0ZXhBdHRyaWI0ZnYiLCJ2ZXJ0ZXhBdHRyaWIxZnYiLCJFTEVNRU5UX0FSUkFZX0JVRkZFUiIsInNldExpbmVXaWR0aCIsInNldE1vZGUiLCJMSU5FUyIsInJlbmRlckluc3RhbmNlcyIsIkxJTkVfU1RSSVAiLCJQT0lOVFMiLCJURVhUVVJFXzJEIiwic2V0RmFjZUN1bGxpbmciLCJmcm9udEZhY2UiLCJDVyIsIkNDVyIsImN1bGxGYWNlIiwiQkFDSyIsIkZST05UIiwiRlJPTlRfQU5EX0JBQ0siLCJjb21wbGV0ZSIsIlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCIsIlVOUEFDS19BTElHTk1FTlQiLCJtYXhUZXh0dXJlU2l6ZSIsIkhUTUxJbWFnZUVsZW1lbnQiLCJIVE1MQ2FudmFzRWxlbWVudCIsImNyZWF0ZUZyYW1lYnVmZmVyIiwiY3JlYXRlUmVuZGVyYnVmZmVyIiwic2hhcmVEZXB0aEZyb20iLCJyZWFkUmVuZGVyVGFyZ2V0UGl4ZWxzIiwiSU1QTEVNRU5UQVRJT05fQ09MT1JfUkVBRF9GT1JNQVQiLCJJTVBMRU1FTlRBVElPTl9DT0xPUl9SRUFEX1RZUEUiLCJjaGVja0ZyYW1lYnVmZmVyU3RhdHVzIiwiRlJBTUVCVUZGRVJfQ09NUExFVEUiLCJyZWFkUGl4ZWxzIiwic3VwcG9ydHNGbG9hdFRleHR1cmVzIiwic3VwcG9ydHNIYWxmRmxvYXRUZXh0dXJlcyIsInN1cHBvcnRzU3RhbmRhcmREZXJpdmF0aXZlcyIsInN1cHBvcnRzQ29tcHJlc3NlZFRleHR1cmVTM1RDIiwic3VwcG9ydHNDb21wcmVzc2VkVGV4dHVyZVBWUlRDIiwic3VwcG9ydHNCbGVuZE1pbk1heCIsInN1cHBvcnRzVmVydGV4VGV4dHVyZXMiLCJ2ZXJ0ZXhUZXh0dXJlcyIsInN1cHBvcnRzSW5zdGFuY2VkQXJyYXlzIiwiaW5pdE1hdGVyaWFsIiwiYWRkUHJlUGx1Z2luIiwiYWRkUG9zdFBsdWdpbiIsInVwZGF0ZVNoYWRvd01hcCIsInNoYWRvd01hcEVuYWJsZWQiLCJzaGFkb3dNYXBUeXBlIiwic2hhZG93TWFwQ3VsbEZhY2UiLCJzaGFkb3dNYXBEZWJ1ZyIsImRyYXdBcnJheXNJbnN0YW5jZWRBTkdMRSIsImRyYXdFbGVtZW50cyIsImRyYXdFbGVtZW50c0luc3RhbmNlZEFOR0xFIiwiZ2V0RXh0ZW5zaW9uIiwiZ2V0U2hhZGVyUHJlY2lzaW9uRm9ybWF0IiwiVkVSVEVYX1NIQURFUiIsIkhJR0hfRkxPQVQiLCJGUkFHTUVOVF9TSEFERVIiLCJNRURJVU1fRkxPQVQiLCJnZXRNYXhQcmVjaXNpb24iLCJNQVhfVEVYVFVSRV9JTUFHRV9VTklUUyIsIm1heFZlcnRleFRleHR1cmVzIiwiTUFYX1ZFUlRFWF9URVhUVVJFX0lNQUdFX1VOSVRTIiwiTUFYX1RFWFRVUkVfU0laRSIsIk1BWF9DVUJFX01BUF9URVhUVVJFX1NJWkUiLCJtYXhBdHRyaWJ1dGVzIiwiTUFYX1ZFUlRFWF9BVFRSSUJTIiwibWF4VmVydGV4VW5pZm9ybXMiLCJNQVhfVkVSVEVYX1VOSUZPUk1fVkVDVE9SUyIsIm1heFZhcnlpbmdzIiwiTUFYX1ZBUllJTkdfVkVDVE9SUyIsIm1heEZyYWdtZW50VW5pZm9ybXMiLCJNQVhfRlJBR01FTlRfVU5JRk9STV9WRUNUT1JTIiwiZmxvYXRGcmFnbWVudFRleHR1cmVzIiwiV2ViR0xHZW9tZXRyaWVzIiwiX193ZWJnbEJ1ZmZlciIsImRlbGV0ZUJ1ZmZlciIsIl9idWZmZXJHZW9tZXRyeSIsIlNUQVRJQ19EUkFXIiwiYnVmZmVyU3ViRGF0YSIsInN1YmFycmF5IiwiV2ViR0xQcm9ncmFtIiwiY3JlYXRlUHJvZ3JhbSIsIm1heERpckxpZ2h0cyIsIm1heFBvaW50TGlnaHRzIiwibWF4U3BvdExpZ2h0cyIsIm1heEhlbWlMaWdodHMiLCJtYXhTaGFkb3dzIiwibWF4Qm9uZXMiLCJmbGF0U2hhZGluZyIsImRvdWJsZVNpZGVkIiwiZmxpcFNpZGVkIiwicG9pbnRMaWdodFNoYWRvd3MiLCJ1c2VGb2ciLCJmb2dFeHAiLCJXZWJHTFNoYWRlciIsImF0dGFjaFNoYWRlciIsImJpbmRBdHRyaWJMb2NhdGlvbiIsImxpbmtQcm9ncmFtIiwiZ2V0UHJvZ3JhbUluZm9Mb2ciLCJnZXRTaGFkZXJJbmZvTG9nIiwiZ2V0UHJvZ3JhbVBhcmFtZXRlciIsIkxJTktfU1RBVFVTIiwiZ2V0RXJyb3IiLCJWQUxJREFURV9TVEFUVVMiLCJkaWFnbm9zdGljcyIsInJ1bm5hYmxlIiwicHJvZ3JhbUxvZyIsInByZWZpeCIsImRlbGV0ZVNoYWRlciIsIkFDVElWRV9VTklGT1JNUyIsImdldEFjdGl2ZVVuaWZvcm0iLCJnZXRVbmlmb3JtTG9jYXRpb24iLCJBQ1RJVkVfQVRUUklCVVRFUyIsImdldEFjdGl2ZUF0dHJpYiIsImdldEF0dHJpYkxvY2F0aW9uIiwiZGVzdHJveSIsImRlbGV0ZVByb2dyYW0iLCJ1c2VkVGltZXMiLCJlbnZNYXBNb2RlIiwiY3JlYXRlU2hhZGVyIiwic2hhZGVyU291cmNlIiwiY29tcGlsZVNoYWRlciIsImdldFNoYWRlclBhcmFtZXRlciIsIkNPTVBJTEVfU1RBVFVTIiwiY3VzdG9tRGVwdGhNYXRlcmlhbCIsImN1c3RvbURpc3RhbmNlTWF0ZXJpYWwiLCJCTEVORCIsIkRFUFRIX1RFU1QiLCJMRVFVQUwiLCJibGVuZEZ1bmMiLCJlbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSIsInZlcnRleEF0dHJpYkRpdmlzb3JBTkdMRSIsImRpc2FibGVWZXJ0ZXhBdHRyaWJBcnJheSIsIkNPTVBSRVNTRURfVEVYVFVSRV9GT1JNQVRTIiwiYmxlbmRFcXVhdGlvblNlcGFyYXRlIiwiYmxlbmRGdW5jU2VwYXJhdGUiLCJORVZFUiIsIkFMV0FZUyIsIkxFU1MiLCJFUVVBTCIsIkdFUVVBTCIsIkdSRUFURVIiLCJOT1RFUVVBTCIsImRlcHRoTWFzayIsImNvbG9yTWFzayIsImxpbmVXaWR0aCIsIlBPTFlHT05fT0ZGU0VUX0ZJTEwiLCJTQ0lTU09SX1RFU1QiLCJURVhUVVJFMSIsImNvcHlUZXhJbWFnZTJEIiwiQ3VydmVVdGlscyIsInRhbmdlbnRRdWFkcmF0aWNCZXppZXIiLCJ0YW5nZW50Q3ViaWNCZXppZXIiLCJ0YW5nZW50U3BsaW5lIiwiaW50ZXJwb2xhdGUiLCJHZW9tZXRyeVV0aWxzIiwibG9hZFRleHR1cmVDdWJlIiwibG9hZENvbXByZXNzZWRUZXh0dXJlIiwibG9hZENvbXByZXNzZWRUZXh0dXJlQ3ViZSIsIlNjZW5lVXRpbHMiLCJjcmVhdGVNdWx0aU1hdGVyaWFsT2JqZWN0IiwiZGV0YWNoIiwiYXR0YWNoIiwiU2hhcGVVdGlscyIsInRyaWFuZ3VsYXRlIiwidHJpYW5ndWxhdGVTaGFwZSIsImlzQ2xvY2tXaXNlIiwiYjIiLCJiMyIsIkF1ZGlvIiwic291cmNlIiwiY3JlYXRlQnVmZmVyU291cmNlIiwib25lbmRlZCIsIm9uRW5kZWQiLCJnYWluIiwiY3JlYXRlR2FpbiIsImNvbm5lY3QiLCJkZXN0aW5hdGlvbiIsInBhbm5lciIsImNyZWF0ZVBhbm5lciIsInBsYXliYWNrUmF0ZSIsImlzUGxheWluZyIsImRlY29kZUF1ZGlvRGF0YSIsImJ1ZmZlciIsImN1cnJlbnRUaW1lIiwiZGlzY29ubmVjdCIsInNldEZpbHRlciIsImdldEZpbHRlciIsInNldFBsYXliYWNrUmF0ZSIsImdldFBsYXliYWNrUmF0ZSIsInNldExvb3AiLCJnZXRMb29wIiwic2V0UmVmRGlzdGFuY2UiLCJyZWZEaXN0YW5jZSIsImdldFJlZkRpc3RhbmNlIiwic2V0Um9sbG9mZkZhY3RvciIsInJvbGxvZmZGYWN0b3IiLCJnZXRSb2xsb2ZmRmFjdG9yIiwic2V0Vm9sdW1lIiwiZ2V0Vm9sdW1lIiwiQXVkaW9MaXN0ZW5lciIsIkF1ZGlvQ29udGV4dCIsIndlYmtpdEF1ZGlvQ29udGV4dCIsImxpc3RlbmVyIiwic2V0T3JpZW50YXRpb24iLCJDdXJ2ZSIsImdldFBvaW50QXQiLCJnZXRVdG9UbWFwcGluZyIsImdldFBvaW50cyIsImdldFNwYWNlZFBvaW50cyIsImdldExlbmd0aHMiLCJfX2FyY0xlbmd0aERpdmlzaW9ucyIsImNhY2hlQXJjTGVuZ3RocyIsInVwZGF0ZUFyY0xlbmd0aHMiLCJnZXRUYW5nZW50IiwiZ2V0VGFuZ2VudEF0IiwiVXRpbHMiLCJDdXJ2ZVBhdGgiLCJjdXJ2ZXMiLCJhdXRvQ2xvc2UiLCJjbG9zZVBhdGgiLCJMaW5lQ3VydmUiLCJnZXRDdXJ2ZUxlbmd0aHMiLCJjYWNoZUxlbmd0aHMiLCJjcmVhdGVQb2ludHNHZW9tZXRyeSIsImNyZWF0ZUdlb21ldHJ5IiwiY3JlYXRlU3BhY2VkUG9pbnRzR2VvbWV0cnkiLCJQYXRoIiwiZnJvbVBvaW50cyIsIm1vdmVUbyIsImxpbmVUbyIsImFyZ3MiLCJxdWFkcmF0aWNDdXJ2ZVRvIiwiUXVhZHJhdGljQmV6aWVyQ3VydmUiLCJiZXppZXJDdXJ2ZVRvIiwiQ3ViaWNCZXppZXJDdXJ2ZSIsInNwbGluZVRocnUiLCJTcGxpbmVDdXJ2ZSIsImFic2FyYyIsImFic2VsbGlwc2UiLCJlbGxpcHNlIiwiRWxsaXBzZUN1cnZlIiwidG9TaGFwZXMiLCJTaGFwZSIsImZyb21zIiwidG9zIiwiaG9sZSIsImhvbGVzIiwiZXh0cnVkZSIsIkV4dHJ1ZGVHZW9tZXRyeSIsIm1ha2VHZW9tZXRyeSIsIlNoYXBlR2VvbWV0cnkiLCJnZXRQb2ludHNIb2xlcyIsImV4dHJhY3RBbGxQb2ludHMiLCJzaGFwZSIsImV4dHJhY3RQb2ludHMiLCJ2MSIsInYyIiwidjAiLCJ2MyIsImFYIiwiYVkiLCJ4UmFkaXVzIiwieVJhZGl1cyIsImFTdGFydEFuZ2xlIiwiYUVuZEFuZ2xlIiwiYUNsb2Nrd2lzZSIsImFSb3RhdGlvbiIsIkFyY0N1cnZlIiwiTGluZUN1cnZlMyIsIlF1YWRyYXRpY0JlemllckN1cnZlMyIsIkN1YmljQmV6aWVyQ3VydmUzIiwiU3BsaW5lQ3VydmUzIiwiQ2F0bXVsbFJvbUN1cnZlMyIsImMwIiwiYzEiLCJjMiIsImMzIiwiaW5pdE5vbnVuaWZvcm1DYXRtdWxsUm9tIiwiaW5pdENhdG11bGxSb20iLCJjYWxjIiwidGVuc2lvbiIsIkNsb3NlZFNwbGluZUN1cnZlMyIsIkN1YmVHZW9tZXRyeSIsIkVkZ2VzR2VvbWV0cnkiLCJ2ZXJ0MSIsInZlcnQyIiwiZmFjZTEiLCJmYWNlMiIsImFkZFNoYXBlTGlzdCIsImFkZFNoYXBlIiwiZ2VuZXJhdGVTaWRlV2FsbFVWIiwiZ2VuZXJhdGVUb3BVViIsImFtb3VudCIsImJldmVsVGhpY2tuZXNzIiwiYmV2ZWxTaXplIiwiYmV2ZWxTZWdtZW50cyIsImJldmVsRW5hYmxlZCIsImN1cnZlU2VnbWVudHMiLCJzdGVwcyIsImV4dHJ1ZGVQYXRoIiwiVVZHZW5lcmF0b3IiLCJXb3JsZFVWR2VuZXJhdG9yIiwiZnJhbWVzIiwiVHViZUdlb21ldHJ5IiwiRnJlbmV0RnJhbWVzIiwicmV2ZXJzZSIsImJpbm9ybWFscyIsIkxhdGhlR2VvbWV0cnkiLCJQbGFuZUJ1ZmZlckdlb21ldHJ5IiwiY2xvc2VkIiwidGFwZXIiLCJOb1RhcGVyIiwidGFuZ2VudHMiLCJTaW51c29pZGFsVGFwZXIiLCJNQVhfVkFMVUUiLCJQb2x5aGVkcm9uR2VvbWV0cnkiLCJQYXJhbWV0cmljR2VvbWV0cnkiLCJzbGljZXMiLCJzdGFja3MiLCJXaXJlZnJhbWVHZW9tZXRyeSIsIkF4aXNIZWxwZXIiLCJBcnJvd0hlbHBlciIsImNvbmUiLCJzZXREaXJlY3Rpb24iLCJzZXRDb2xvciIsIkJveEhlbHBlciIsIkJvdW5kaW5nQm94SGVscGVyIiwiYm94IiwiQ2FtZXJhSGVscGVyIiwicG9pbnRNYXAiLCJEaXJlY3Rpb25hbExpZ2h0SGVscGVyIiwibGlnaHRQbGFuZSIsInRhcmdldExpbmUiLCJFZGdlc0hlbHBlciIsIkZhY2VOb3JtYWxzSGVscGVyIiwiR3JpZEhlbHBlciIsImNvbG9yMSIsImNvbG9yMiIsInNldENvbG9ycyIsIkhlbWlzcGhlcmVMaWdodEhlbHBlciIsImxpZ2h0U3BoZXJlIiwiUG9pbnRMaWdodEhlbHBlciIsIlNrZWxldG9uSGVscGVyIiwiZ2V0Qm9uZUxpc3QiLCJTcG90TGlnaHRIZWxwZXIiLCJWZXJ0ZXhOb3JtYWxzSGVscGVyIiwiV2lyZWZyYW1lSGVscGVyIiwiTW9ycGhCbGVuZE1lc2giLCJhbmltYXRpb25zTWFwIiwiYW5pbWF0aW9uc0xpc3QiLCJjcmVhdGVBbmltYXRpb24iLCJzZXRBbmltYXRpb25XZWlnaHQiLCJsYXN0RnJhbWUiLCJjdXJyZW50RnJhbWUiLCJkaXJlY3Rpb25CYWNrd2FyZHMiLCJtaXJyb3JlZExvb3AiLCJhdXRvQ3JlYXRlQW5pbWF0aW9ucyIsImZpcnN0QW5pbWF0aW9uIiwic2V0QW5pbWF0aW9uRGlyZWN0aW9uRm9yd2FyZCIsInNldEFuaW1hdGlvbkRpcmVjdGlvbkJhY2t3YXJkIiwic2V0QW5pbWF0aW9uRlBTIiwic2V0QW5pbWF0aW9uRHVyYXRpb24iLCJzZXRBbmltYXRpb25UaW1lIiwiZ2V0QW5pbWF0aW9uVGltZSIsImdldEFuaW1hdGlvbkR1cmF0aW9uIiwicGxheUFuaW1hdGlvbiIsInN0b3BBbmltYXRpb24iXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1QkFBZTtBQUNmO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOzs7Ozs7Ozs7QUM5QkE7Ozs7QUFDQTs7Ozs7O0FBVEE7Ozs7Ozs7O0FBV0EsRUFBQyxZQUFJOztBQUVIO0FBQ0EsT0FBSUEsT0FBT0MsRUFBUCxLQUFZQyxTQUFoQixFQUEyQkYsT0FBT0MsRUFBUCxHQUFZLEVBQVo7QUFDM0JELFVBQU9DLEVBQVAsQ0FBVUUsRUFBVixHQUFlLEVBQWYsQ0FKRyxDQUlnQjs7QUFFbkJGLE1BQUdFLEVBQUgsQ0FBTUMsTUFBTixHQUFlLHNCQUFmO0FBQ0FILE1BQUdFLEVBQUgsQ0FBTUUsSUFBTixHQUFhLG9CQUFiO0FBRUQsRUFURCxJOzs7Ozs7Ozs7Ozs7c2pCQ1hBOzs7Ozs7OztBQW1CQTs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOzs7QUF6QkE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBR0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FB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QTJCaDFDLEVBQUVzbUUsWUFBN0IsSUFBMkNybkYsQ0FBeks7QUFBMks7QUFBQztBQUFDLEVBRC9YLEMiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuXG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRleHBvcnRzOiB7fSxcbiBcdFx0XHRpZDogbW9kdWxlSWQsXG4gXHRcdFx0bG9hZGVkOiBmYWxzZVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIGEyODAwYWMwZGNmYjQzMDBmNThkIiwiLyoqXG4gKiBmaWxlT3ZlcnZpZXc6XG4gKiBQcm9qZWN0OlxuICogRmlsZTogVG9wXG4gKiBEYXRlOlxuICogQXV0aG9yOlxuICovXG5cbmltcG9ydCBDb21tb24gZnJvbSAnLi9QYWdlL0NvbW1vbi5qcyc7XG5pbXBvcnQgTWFpbiBmcm9tICcuL1BhZ2UvTWFpbi5qcyc7XG5cbigoKT0+e1xuXG4gIC8vIGdsb2JhbOOCquODluOCuOOCp+OCr+ODiFxuICBpZiAod2luZG93LmdiPT09dW5kZWZpbmVkKSB3aW5kb3cuZ2IgPSB7fTtcbiAgd2luZG93LmdiLmluID0ge307IC8vaW5zdGFuY2VcblxuICBnYi5pbi5jb21tb24gPSBuZXcgQ29tbW9uKCk7XG4gIGdiLmluLm1haW4gPSBuZXcgTWFpbigpO1xuXG59KSgpO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvVXNlcnMvVGVyYU1hYy9Eb2N1bWVudHMvMDBfU3RvY2svMTBfYmFzZS9mcm9udGVuZF9iYXNlX3ZlcjAyL2RldmVsb3BtZW50L3Byb2plY3QtbmFtZS9hc3NldHMvanMvX2RldmpzL3NyYy9Ub3AuanMiLCIvKipcbiAqIGZpbGVPdmVydmlldzpcbiAqIFByb2plY3Q6XG4gKiBGaWxlOiBDb21tb25cbiAqIERhdGU6XG4gKiBBdXRob3I6XG4gKi9cblxuaW1wb3J0IENvbmYgZnJvbSAnLi4vQ29uZi5qcyc7XG5pbXBvcnQgVXRpbCBmcm9tICcuLi9NeUxpYnMvVXRpbC5qcyc7XG5pbXBvcnQgRnVuYyBmcm9tICcuLi9NeUxpYnMvRnVuYy5qcyc7XG5cbmltcG9ydCBSZWFkeU1nciBmcm9tICcuLi9NeUxpYnMvRXZlbnRNZ3IvUmVhZHlNZ3IuanMnO1xuaW1wb3J0IFVwZGF0ZU1nciBmcm9tICcuLi9NeUxpYnMvRXZlbnRNZ3IvVXBkYXRlTWdyLmpzJztcbmltcG9ydCBSZXNpemVNZ3IgZnJvbSAnLi4vTXlMaWJzL0V2ZW50TWdyL1Jlc2l6ZU1nci5qcyc7XG5pbXBvcnQgU2Nyb2xsTWdyIGZyb20gJy4uL015TGlicy9FdmVudE1nci9TY3JvbGxNZ3IuanMnO1xuaW1wb3J0IE1vdXNlTWdyIGZyb20gJy4uL015TGlicy9FdmVudE1nci9Nb3VzZU1nci5qcyc7XG5pbXBvcnQgTG9hZE1nciBmcm9tICcuLi9GdW5jL0xvYWRNZ3IuanMnO1xuXG4vLyBpbXBvcnQgUGpheCBmcm9tICcuLi9GdW5jL1BqYXguanMnO1xuaW1wb3J0IEp1ZGdlRW52aXJvbm1lbnQgZnJvbSAnLi4vRnVuYy9KdWRnZUVudmlyb25tZW50LmpzJztcbmltcG9ydCBSZXNwb25zaXZlU3dpdGNoSW1nIGZyb20gJy4uL0Z1bmMvX2V2ZW50cy9SZXNwb25zaXZlU3dpdGNoSW1nLmpzJztcbmltcG9ydCBTd2lwZVRyYW5zaXRpb24gZnJvbSAnLi4vRnVuYy9Td2lwZVRyYW5zaXRpb24uanMnO1xuXG4vLyBpbXBvcnQgTWVudSBmcm9tICcuLi9EaXNwbGF5L1VJL19jb21wb3JuZW50cy9NZW51LmpzJztcbi8vIGltcG9ydCBOYXYgZnJvbSAnLi4vRGlzcGxheS9VSS9OYXYuanMnO1xuLy8gaW1wb3J0IEFsZXJ0IGZyb20gJy4uL0Rpc3BsYXkvVUkvQWxlcnQuanMnO1xuLy8gaW1wb3J0IFNpZGVSIGZyb20gJy4uL0Rpc3BsYXkvVUkvU2lkZVIuanMnO1xuLy8gaW1wb3J0IFRpbWUgZnJvbSAnLi4vRnVuYy9UaW1lLmpzJztcbmltcG9ydCBTY3JvbGxUcmFuc2l0aW9uIGZyb20gJy4uL0Z1bmMvU2Nyb2xsVHJhbnNpdGlvbi5qcyc7XG4vLyBpbXBvcnQgUGFnZVRvcCBmcm9tICcuLi9EaXNwbGF5L1VJL19wYXJ0cy9QYWdlVG9wLmpzJztcbi8vIGltcG9ydCBTZWMwMVZpZGVvIGZyb20gJy4uL0Rpc3BsYXkvVUkvU2VjMDFWaWRlby5qcyc7XG5pbXBvcnQgU25zIGZyb20gJy4uL0Z1bmMvU25zLmpzJztcbi8vIGltcG9ydCBTbGlkZXJUb3AgZnJvbSAnLi4vRGlzcGxheS9VSS9TbGlkZXJUb3AuanMnO1xuXG5cbmltcG9ydCBMYXlvdXQgZnJvbSAnLi4vRGlzcGxheS9MYXlvdXQvTGF5b3V0LmpzJztcblxuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21tb24ge1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuXG4gICAgdGhpcy5vbkltbWVkaWF0ZSgpO1xuICAgIHRoaXMuc2V0RXZlbnRzKCk7XG5cbiAgfVxuXG4gIG9uSW1tZWRpYXRlKCkge1xuXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gIOWIneacn+WApOOBruioreWumuODu+ODh+ODvOOCv+OBrumFjee9rlxuICAgIC8vICB1dGls6Zai5pWw44Gu5Yid5pyf5YyWXG4gICAgLy8gIOOCpOODmeODs+ODiOODnuODjeODvOOCuOODo+ODvOOBruioree9rlxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIGdiLmluLmNvbmYgPSBuZXcgQ29uZigpO1xuICAgIGdiLmluLnUgPSBuZXcgVXRpbCgpO1xuICAgIGdiLmluLmYgPSBuZXcgRnVuYygpO1xuICAgIC8vIGdiLmluLnVwID0gbmV3IFVwZGF0ZU1ncigpO1xuICAgIC8vIGdiLmluLnIgPSBuZXcgUmVzaXplTWdyKCk7XG4gICAgLy8gZ2IuaW4ucyA9IG5ldyBTY3JvbGxNZ3IoKTtcbiAgICAvLyBnYi5pbi5tID0gbmV3IE1vdXNlTWdyKCk7XG4gICAgLy8gZ2IuaW4ucm0gPSBuZXcgUmVhZHlNZ3IoKTtcbiAgICAvLyBnYi5pbi5sb2FkTWdyID0gbmV3IExvYWRNZ3IoKTtcbiAgICAvLyBnYi5pbi5zY3QgPSBuZXcgU2Nyb2xsVHJhbnNpdGlvbigpO1xuXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy9cbiAgICAvLyAg44Gd44Gu5LuWXG4gICAgLy9cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBwamF444Gu6Kit5a6aXG4gICAgLy8gZ2IuaW4ucGpheCA9IG5ldyBQamF4KCk7XG5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyAgTGF5b3V0XG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gZ2IuaW4uTGF5b3V0ID0gbmV3IExheW91dCgpO1xuXG5cbiAgICAvLyDmupblgpnlrozkuoblvozjga7lh6bnkIZcbiAgICAvLyBnYi5pbi5ybS5vbkNvbXBsZXRlZEZ1bmMgPSAoKT0+e25ldyBEaXNwbGF5T3BlbmluZygpO31cblxuICB9XG5cbiAgb25SZWFkeSgpIHtcblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vICDjg4fjg5DjgqTjgrnjg7vjg5bjg6njgqbjgrbliKTlrppcbiAgICAvLyAg44K544Oe44Ob44Gu5ZCR44GN5Yik5a6aXG4gICAgLy8gIOODmuODvOOCuOaDheWgseWPluW+l1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIGdiLmluLmplID0gbmV3IEp1ZGdlRW52aXJvbm1lbnQoKTtcbiAgICAvLyBnYi5pbi5yZXNJbWcgPSBuZXcgUmVzcG9uc2l2ZVN3aXRjaEltZygpO1xuICAgIC8vIGdiLmluLnNucyA9IG5ldyBTbnMoJCgnLmZiU2hhcmUnKSwkKCcudHdTaGFyZScpLCQoJy5saW5lU2hhcmUnKSwkKCcub25NYWlsJykpXG4gICAgLy8gZ2IuaW4uc3d0ID0gbmV3IFN3aXBlVHJhbnNpdGlvbigpO1xuXG4gICAgLy8gZ2IuaW4uZi5jaGVja0Nzc0JsZW5kKCk7XG5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyAgVUlcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBnYi5pbi5tZW51ID0gbmV3IE1lbnUoKTtcbiAgICAvLyBnYi5pbi5uYXYgPSBuZXcgTmF2KCk7XG4gICAgLy8gZ2IuaW4uc2lkZVIgPSBuZXcgU2lkZVIoKTtcbiAgICAvLyBnYi5pbi5hbGVydCA9IG5ldyBBbGVydCgpO1xuICAgIC8vIGdiLmluLnBhZ2V0b3AgPSBuZXcgUGFnZVRvcCgpO1xuXG4gICAgLy8gYmdcbiAgICAvLyBnYi5pbi5zbGlkZXJUb3AgPSBuZXcgU2xpZGVyVG9wKCQoJyNiZ1dyYXAgLnNlYzAxJykpO1xuXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gIEVmZmVjdHNcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBnYi5pbi5wYWdlVHJhbnNpdGlvbkVmZmVjdCA9IG5ldyBQYWdlVHJhbnNpdGlvbkVmZmVjdCgkKCcjcGFnZVRyYW5zaXRpb25MYXllcicpKTtcbiAgICAvLyBnYi5pbi5zZWMwMVZpZGVvID0gbmV3IFNlYzAxVmlkZW8oKTtcbiAgICAvLyBnYi5pbi5TZWMwMkJnID0gbmV3IFNlY3Rpb24wMkJnKCk7XG5cbiAgICAvLyBnYi5pbi5oZTAxID0gbmV3IEhvdmVyRWZmZWN0U1ZHKCQoJy5TVkdIb3ZlcicpLCcjZmZmJywnIzAwMCcpO1xuICAgIC8vIGdiLmluLmhlMDIgPSBuZXcgSG92ZXJFZmZlY3RTVkcoJCgnLlNWR0hvdmVyVycpLCcjODFkOGQwJywnI2ZmZicpO1xuICAgIC8vIGdiLmluLmhlMDMgPSBuZXcgSG92ZXJFZmZlY3RTVkcoJCgnLlNWR0hvdmVyVzAyJyksJyM4MWQ4ZDAnLCcjMDAwJyk7XG4gICAgLy8gZ2IuaW4uaGUwNCA9IG5ldyBIb3ZlckVmZmVjdFNWR0xvZ28oJCgnI2hlYWRlciAubG9nbywgI2hlYWRlciAuc3ViVGl0JykpO1xuICAgIC8vIGdiLmluLmhlMDUgPSBuZXcgSG92ZXJFZmZlY3RNZW51SXRlbSgkKCcjbWVudSAubWVudUxpc3QgLml0ZW0nKSk7XG4gICAgLy8gZ2IuaW4uaGUwNiA9IG5ldyBIb3ZlckVmZmVjdFNWR0Fycm93U2lkZVIoJCgnI3NpZGVSIC5uZXh0JykpO1xuICAgIC8vIGdiLmluLmhlMDcgPSBuZXcgSG92ZXJFZmZlY3RNZW51QnRuKCQoJy5tZW51QnRuMDEnKSk7XG4gICAgLy8gZ2IuaW4uaGUwOCA9IG5ldyBIb3ZlckVmZmVjdFNOU1BDRm9vdGVyKCQoJyNzaWRlTCAuc25zLnNwJykpO1xuXG4gICAgLy8gbG9nbyDlh7rjgZlcbiAgICAvLyBUd2Vlbk1heC50bygkKCcjaGVhZGVyIC5sb2dvJyksIDIuMiwge29wYWNpdHk6IDEsIGVhc2U6IFBvd2VyMi5lYXNlSW5PdXR9KVxuXG4gICAgLy8gZ2IuaW4ubG9hZE1nci5zdGFydCgpO1xuXG4gIH1cblxuICBvbkxvYWQoKSB7XG5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvL1xuICAgIC8vICBGdW5jXG4gICAgLy9cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy9cbiAgICAvLyAgTGF5b3V0XG4gICAgLy9cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vXG4gICAgLy8gIERpc3BhbHlcbiAgICAvL1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy9cbiAgICAvLyAgTW90aW9uXG4gICAgLy9cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICB9XG5cbiAgc2V0RXZlbnRzKCkge1xuXG4gICAgJChkb2N1bWVudCkub24oJ3JlYWR5JywgdGhpcy5vblJlYWR5LmJpbmQodGhpcykpO1xuICAgICQod2luZG93KS5vbignbG9hZCcsIHRoaXMub25Mb2FkLmJpbmQodGhpcykpO1xuXG4gIH1cblxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvVXNlcnMvVGVyYU1hYy9Eb2N1bWVudHMvMDBfU3RvY2svMTBfYmFzZS9mcm9udGVuZF9iYXNlX3ZlcjAyL2RldmVsb3BtZW50L3Byb2plY3QtbmFtZS9hc3NldHMvanMvX2RldmpzL3NyYy9QYWdlL0NvbW1vbi5qcyIsIi8qKlxuICogZmlsZU92ZXJ2aWV3OlxuICogUHJvamVjdDpcbiAqIEZpbGU6IENvbmZcbiAqIERhdGU6XG4gKiBBdXRob3I6XG4gKi9cblxuaW1wb3J0IFNvdW5kRGF0YSBmcm9tICcuL0RhdGEvU291bmQuanMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb25mIHtcblxuICBjb25zdHJ1Y3RvcigpIHtcblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vICDmnKznlarjg5Xjg6njgrBcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gICAgXG4gICAgdGhpcy5SRUxFQVNFID0gdHJ1ZTtcbiAgICAvLyB0aGlzLlJFTEVBU0UgPSBmYWxzZTtcblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vICDjg5Xjg6njgrDplqLpgKNcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICB0aGlzLkZMRyA9IHtcbiAgICAgIExPRzp0cnVlLCAgLy8g44Ot44Kw5Ye65YqbXG4gICAgICBQQVJBTTp0cnVlLCAvLyDjg5Hjg6njg6Hjg7zjgr/jg4Hjgqfjg4Pjgq9cbiAgICAgIFNUQVRTOnRydWUgIC8vIFN0YXRz6KGo56S6XG4gICAgfTtcbiAgICBpZiAoIXRoaXMuUkVMRUFTRSkge1xuICAgICAgdGhpcy5GTEcgPSB7XG4gICAgICAgIExPRzpmYWxzZSxcbiAgICAgICAgUEFSQU06ZmFsc2UsXG4gICAgICAgIFNUQVRTOmZhbHNlIFxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyAg5Z+65pysIHdpZHRoIGhlaWdodFxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIHRoaXMuZGVmVyA9IDEzMDA7XG4gICAgdGhpcy5kZWZIID0gODUwO1xuXG4gICAgdGhpcy5XID0gMTIwMDtcbiAgICB0aGlzLkggPSA3NTA7XG5cbiAgICB0aGlzLnNwVyA9IDM3NTtcbiAgICB0aGlzLnNwSCA9IDY2NztcblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vICDjg5bjg6zjgqTjgq/jg53jgqTjg7Pjg4hcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICB0aGlzLmJwID0gNzY4O1xuXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gIG1vZGVcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICB0aGlzLm1vZGUgPSBudWxsO1xuICAgIHRoaXMua2V5cyA9IFtcbiAgICAgIHtcbiAgICAgICAgICAna2V5JzogJ21vdmllJyxcbiAgICAgICAgICAndmFsdWUnOiBbJ21vcm5pbmcnLCdhZnRlcm5vb24nLCduaWdodCddLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgICAna2V5JzogJ2RhdGEnLFxuICAgICAgICAgICd2YWx1ZSc6IFsnZGF0YTAxJywnZGF0YTAyJywnZGF0YTAzJ10sXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICAgICdrZXknOiAncHJvZHVjdCcsXG4gICAgICAgICAgJ3ZhbHVlJzogWycwMSddLFxuICAgICAgfSxcbiAgICBdXG4gICAgdGhpcy5zd2l0Y2hNb2RlKCk7XG5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyAgc291bmQgZGF0YVxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIHRoaXMuc291bmREYXRhID0gbmV3IFNvdW5kRGF0YSgpO1xuXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gIHNlYzAyIGJnIEltZyBOdW1cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICB0aGlzLnNlYzAySW1nTnVtID0gMzk2O1xuXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gIHlvdXR1YmUgSURcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICB0aGlzLnlvdXR1YmVJRDAxID0gJ3hXMm9OcE5yS2QwJztcbiAgICB0aGlzLnlvdXR1YmVJRDAyID0gJ3QyV2VSUmRBRmVJJztcblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vICB3ZWIgZm9udCBsb2FkZWRcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICB0aGlzLndlYkZvbnRMb2FkZWQgPSBmYWxzZTtcblxuICB9XG5cblxuICBzd2l0Y2hNb2RlKCl7XG5cbiAgICB2YXIgaSwga2V5LCBsZW4sIHBhcmFtLCByZWYsIHJlZjEsIHZhbHVlO1xuXG4gICAgcmVmID0gbG9jYXRpb24uc2VhcmNoLnJlcGxhY2UoJz8nLCAnJykuc3BsaXQoJyYnKTtcblxuICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgcGFyYW0gPSByZWZbaV07XG4gICAgICByZWYxID0gcGFyYW0uc3BsaXQoJz0nKSwga2V5ID0gcmVmMVswXSwgdmFsdWUgPSByZWYxWzFdO1xuXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHRoaXMua2V5cy5sZW5ndGg7IGorKykge1xuXG4gICAgICAgIHZhciBvYmogPSB0aGlzLmtleXNbal07XG5cbiAgICAgICAgLy8g44OR44Op44Oh44O844K/44GM44Kt44O844Go5LiA57eS44Gg44Gj44Gf44KJXG4gICAgICAgIGlmIChvYmoua2V5ID09PSBrZXkpIHtcblxuICAgICAgICAgIC8vIOWQhOWApOOBqOavlOi8g1xuICAgICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgb2JqLnZhbHVlLmxlbmd0aDsgaysrKSB7XG5cbiAgICAgICAgICAgIHZhciB2YWwgPSBvYmoudmFsdWVba107XG5cbiAgICAgICAgICAgIC8vIOOCreODvOOCknRoaXMua2V5c+OBrmtleeOBq+OAgXZhbHVl44KS5q+U6LyD44GX44Gm5ZCM5YCk44Gg44Gj44Gf44KC44Gu44GrXG4gICAgICAgICAgICBpZiAodmFsID09PSB2YWx1ZSkgdGhpc1tvYmoua2V5XSA9IHZhbDtcbiAgICAgICAgICAgIFxuICAgICAgICAgIH07XG5cblxuICAgICAgICB9O1xuXG4gICAgICAgIFxuICAgICAgfTtcblxuICAgIH1cblxuICB9XG5cbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL1VzZXJzL1RlcmFNYWMvRG9jdW1lbnRzLzAwX1N0b2NrLzEwX2Jhc2UvZnJvbnRlbmRfYmFzZV92ZXIwMi9kZXZlbG9wbWVudC9wcm9qZWN0LW5hbWUvYXNzZXRzL2pzL19kZXZqcy9zcmMvQ29uZi5qcyIsIi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy9cbi8vICBEYXRhXG4vL1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNvdW5kRGF0YSB7XG5cbiAgY29uc3RydWN0b3IoKSB7XG5cbiAgICAvLyB0aGlzLkFUQVJJMDEgPSAnL3Byb2plY3QtbmFtZS9hc3NldHMvc291bmQvYXRhcmkvQXRhcmlfMDQud2F2JztcbiAgICAvLyB0aGlzLkFUQVJJMDIgPSAnL3Byb2plY3QtbmFtZS9hc3NldHMvc291bmQvYXRhcmkvQXRhcmlfMDUud2F2JztcblxuICAgIC8vIHRoaXMuQkFOMDEgPSAnL3Byb2plY3QtbmFtZS9hc3NldHMvc291bmQvZG9uL0JhLW5fMDEud2F2JztcbiAgICAvLyB0aGlzLkJBTjAyID0gJy9wcm9qZWN0LW5hbWUvYXNzZXRzL3NvdW5kL2Rvbi9CYS1uXzAyLndhdic7XG4gICAgLy8gdGhpcy5CQU4wMyA9ICcvcHJvamVjdC1uYW1lL2Fzc2V0cy9zb3VuZC9kb24vQmEtbl8wMy53YXYnO1xuICAgIC8vIHRoaXMuQkFOMDQgPSAnL3Byb2plY3QtbmFtZS9hc3NldHMvc291bmQvZG9uL0JhLW5fMDQud2F2JztcblxuICAgIC8vIHRoaXMuRE9OMDEgPSAnL3Byb2plY3QtbmFtZS9hc3NldHMvc291bmQvZG9uL0JpZ19Eb25fMDEud2F2JztcbiAgICAvLyB0aGlzLkRPTjAyID0gJy9wcm9qZWN0LW5hbWUvYXNzZXRzL3NvdW5kL2Rvbi9CaWdfRG9uXzAyLndhdic7XG4gICAgLy8gdGhpcy5ET04wMyA9ICcvcHJvamVjdC1uYW1lL2Fzc2V0cy9zb3VuZC9kb24vQmlnX0Rvbl8wMy53YXYnO1xuICAgIC8vIHRoaXMuRE9OMDQgPSAnL3Byb2plY3QtbmFtZS9hc3NldHMvc291bmQvZG9uL0Rvbl8wNC53YXYnO1xuXG4gICAgLy8gdGhpcy5ET0ROMDEgPSAnL3Byb2plY3QtbmFtZS9hc3NldHMvc291bmQvZG9uL0RvZG9uXzAxLndhdic7XG4gICAgLy8gdGhpcy5ET0ROMDIgPSAnL3Byb2plY3QtbmFtZS9hc3NldHMvc291bmQvZG9uL0RvZG9uXzAyLndhdic7XG5cbiAgICAvLyB0aGlzLkdvZ29nbzAxID0gJy9wcm9qZWN0LW5hbWUvYXNzZXRzL3NvdW5kL2Rvbi9Hb2dvZ29fMDEud2F2JztcbiAgICAvLyB0aGlzLkdvZ29nbzAyID0gJy9wcm9qZWN0LW5hbWUvYXNzZXRzL3NvdW5kL2Rvbi9Hb2dvZ29fMDIud2F2JztcblxuICAgIC8vIHRoaXMuSUtBUkkgPSAnL3Byb2plY3QtbmFtZS9hc3NldHMvc291bmQvaWthcmkvSWthcmlfMDEud2F2JztcblxuICAgIC8vIHRoaXMuUk9VTEVUVEUwMSA9ICcvcHJvamVjdC1uYW1lL2Fzc2V0cy9zb3VuZC9yb3VsZXR0ZS9Sb3VsZXR0ZV8wMS53YXYnO1xuICAgIC8vIHRoaXMuUk9VTEVUVEUwMiA9ICcvcHJvamVjdC1uYW1lL2Fzc2V0cy9zb3VuZC9yb3VsZXR0ZS9Sb3VsZXR0ZV8wMi53YXYnO1xuICAgIC8vIHRoaXMuUk9VTEVUVEUwMyA9ICcvcHJvamVjdC1uYW1lL2Fzc2V0cy9zb3VuZC9yb3VsZXR0ZS9Sb3VsZXR0ZV8wMy53YXYnO1xuXG4gICAgLy8gdGhpcy5TRUEgPSAnL3Byb2plY3QtbmFtZS9hc3NldHMvc291bmQvc2VhL1NlYSZrYW1vbWVfMDEud2F2JztcblxuICB9XG5cbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL1VzZXJzL1RlcmFNYWMvRG9jdW1lbnRzLzAwX1N0b2NrLzEwX2Jhc2UvZnJvbnRlbmRfYmFzZV92ZXIwMi9kZXZlbG9wbWVudC9wcm9qZWN0LW5hbWUvYXNzZXRzL2pzL19kZXZqcy9zcmMvRGF0YS9Tb3VuZC5qcyIsIi8qKlxuICogZmlsZU92ZXJ2aWV3OlxuICogUHJvamVjdDpcbiAqIEZpbGU6IFV0aWxcbiAqIERhdGU6XG4gKiBBdXRob3I6XG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVXRpbCB7XG5cbiAgY29uc3RydWN0b3IoKSB7XG5cbiAgICB0aGlzLnVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTsgLy91c2VyYWdlbnRcbiAgICB0aGlzLmFwcFYgPSB3aW5kb3cubmF2aWdhdG9yLmFwcFZlcnNpb24udG9Mb3dlckNhc2UoKTsgLy9hcHBWZXJzaW9uXG4gICAgdGhpcy5pc1Jlc1NQID0gbnVsbDsgLy8gcmVzcG9uc2l2ZSBzcFxuICAgIHRoaXMuaXNSZXNQQyA9IG51bGw7IC8vIHJlc3BvbnNpdmUgcGNcblxuICAgIHRoaXMuaXNQQyA9IG51bGw7XG4gICAgdGhpcy5pc1NQID0gbnVsbDtcbiAgICB0aGlzLmlzVEFCID0gbnVsbDtcbiAgICB0aGlzLmlzTUIgPSBudWxsO1xuXG4gICAgdGhpcy5pc0lFID0gbnVsbDtcblxuICAgIHRoaXMuaXNTZXRTUFNpemUgPSBmYWxzZTtcblxuXG4gICAgdGhpcy5zdGFydFRpbWUgPSBudWxsO1xuICAgIHRoaXMuZWxhcHNlZFRpbWUgPSBudWxsO1xuICAgIHRoaXMubm93ID0gbmV3IERhdGUoKTtcblxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vXG4gIC8vICBNYXRoXG4gIC8vXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIFxuICAvLyDjg6njg7Pjg4Djg6DjgarmlbTmlbDjgpLlj5blvpdcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gQG1pbiA6IOacgOWwj+WApChpbnQpXG4gIC8vIEBtYXggOiDmnIDlpKflgKQoaW50KVxuICAvLyByZXR1cm4gOiBtaW7jgYvjgoltYXjjgb7jgafjga7jg6njg7Pjg4Djg6DjgarmlbTmlbAoaW50KVxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICByYW5kb20obWluLCBtYXgpIHtcblxuICAgIHJldHVybiBNYXRoLmZsb29yKChNYXRoLnJhbmRvbSgpICogKChtYXggKyAxKSAtIG1pbikgKyBtaW4pKTtcblxuICB9XG4gICAgICBcbiAgLy8g44Op44Oz44OA44Og44Gq5pW05pWw44KSMuOBpOOBruevhOWbsuOBi+OCieWPluW+l1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyBAbWluMSA6IOacgOWwj+WApDEoaW50KVxuICAvLyBAbWF4MSA6IOacgOWkp+WApDEoaW50KVxuICAvLyBAbWluMiA6IOacgOWwj+WApDIoaW50KVxuICAvLyBAbWF4MiA6IOacgOWkp+WApDIoaW50KVxuICAvLyByZXR1cm4gOiBtaW7jgYvjgoltYXjjgb7jgafjga7jg6njg7Pjg4Djg6DjgarmlbTmlbAoaW50KVxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICByYW5kb20yKG1pbjEsIG1heDEsIG1pbjIsIG1heDIpIHtcbiAgICBcbiAgICBpZiAodGhpcy5oaXQoMikpIHtcbiAgICAgIHJldHVybiB0aGlzLnJhbmRvbShtaW4xLCBtYXgxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMucmFuZG9tKG1pbjIsIG1heDIpO1xuICAgIH1cblxuICB9XG4gICAgICBcbiAgLy8gMS9AcmFuZ2Xjga7norrnjofjgad0cnVl44KS5Y+W5b6XXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIEByYW5nZSA6IOavjeaVsChpbnQpXG4gIC8vIHJldHVybiA6IHRydWUgb3IgZmFsc2UoYm9vbGVhbilcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgaGl0KHJhbmdlKSB7XG5cbiAgICByZXR1cm4gdGhpcy5yYW5kb20oMCwgcmFuZ2UgLSAxKSA9PT0gMDtcblxuICB9XG4gIFxuICAvLyAw44GL44KJ56+E5Zuy5YaF44Gn44Op44Oz44OA44Og44Gq5pW05pWw44KS5Y+W5b6XXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIEB2YWwgOiDnr4Tlm7IoaW50KVxuICAvLyByZXR1cm4gOiDjg6njg7Pjg4Djg6DjgarmlbTmlbAoaW50KVxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICByYW5nZSh2YWwpIHtcblxuICAgIHJldHVybiB0aGlzLnJhbmRvbSgtdmFsLCB2YWwpO1xuXG4gIH1cbiAgXG4gIC8vIOWApOOCkuODnuODg+ODlOODs+OCsFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyBAbnVtIDog44Oe44OD44OU44Oz44Kw44GZ44KL5YCkKE51bWJlcilcbiAgLy8gQHJlc01pbiA6IOe1kOaenOOBqOOBquOCi+WApOOBruacgOWwj+WApChOdW1iZXIpXG4gIC8vIEByZXNNYXggOiDntZDmnpzjgajjgarjgovlgKTjga7mnIDlpKflgKQoTnVtYmVyKVxuICAvLyBAYmFzZU1pbiA6IOWFg+OBqOOBquOCi+WApOOBruacgOWwj+WApChOdW1iZXIpXG4gIC8vIEBiYXNlTWF4IDog5YWD44Go44Gq44KL5YCk44Gu5pyA5aSn5YCkKE51bWJlcilcbiAgLy8gcmV0dXJuIDog44Oe44OD44OU44Oz44Kw44GV44KM44Gf5YCkKE51bWJlcilcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgbWFwKG51bSwgcmVzTWluLCByZXNNYXgsIGJhc2VNaW4sIGJhc2VNYXgpIHtcblxuICAgIHZhciBwO1xuICAgIGlmIChudW0gPCBiYXNlTWluKSB7XG4gICAgICByZXR1cm4gcmVzTWluO1xuICAgIH1cbiAgICBpZiAobnVtID4gYmFzZU1heCkge1xuICAgICAgcmV0dXJuIHJlc01heDtcbiAgICB9XG4gICAgcCA9IChyZXNNYXggLSByZXNNaW4pIC8gKGJhc2VNYXggLSBiYXNlTWluKTtcblxuICAgIHJldHVybiAoKG51bSAtIGJhc2VNaW4pICogcCkgKyByZXNNaW47XG5cbiAgfSAgICBcbiAgXG4gIC8vIOaVsOWApOOBq+Wwj+aVsOeCueesrEBu5L2N44G+44Gn44KS44Gk44GR44Gf5paH5a2X5YiX44KS6L+U44GZXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIEBudW0gOiDlgKQoTnVtYmVyKVxuICAvLyBAbiA6IOWwj+aVsOeCueOBruS9jShpbnQpXG4gIC8vIHJldHVybiA6IOWkieaPm+OBleOCjOOBn+WApChTdHJpbmcpXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIGRlY2ltYWwobnVtLCBuKSB7XG4gICAgdmFyIGksIHBvcztcbiAgICBudW0gPSBTdHJpbmcobnVtKTtcbiAgICBwb3MgPSBudW0uaW5kZXhPZihcIi5cIik7XG4gICAgaWYgKG4gPT09IDApIHtcbiAgICAgIHJldHVybiBudW0uc3BsaXQoXCIuXCIpWzBdO1xuICAgIH1cbiAgICBpZiAocG9zID09PSAtMSkge1xuICAgICAgbnVtICs9IFwiLlwiO1xuICAgICAgaSA9IDA7XG4gICAgICB3aGlsZSAoaSA8IG4pIHtcbiAgICAgICAgbnVtICs9IFwiMFwiO1xuICAgICAgICBpKys7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVtO1xuICAgIH1cbiAgICBudW0gPSBudW0uc3Vic3RyKDAsIHBvcykgKyBudW0uc3Vic3RyKHBvcywgbiArIDEpO1xuICAgIHJldHVybiBudW07XG4gIH1cblxuICBjbGFtcChudW1lcmF0b3IsZGVub21pbmF0b3IsdmFsKSB7XG5cbiAgICByZXR1cm4gdmFsICogKG51bWVyYXRvciAvIGRlbm9taW5hdG9yKTtcblxuICB9XG5cbiAgZGVncmVlKHJhZGlhbnMpIHtcblxuICAgIHJldHVybiByYWRpYW5zICogMTgwIC8gTWF0aC5QSTsgLy8x44Op44K444Ki44Oz44GM5L2V5bqm44GLXG5cbiAgfVxuXG4gIC8vIHRvIHJhZGlhbnNcbiAgcmFkaWFuKGFuZ2xlKSB7IFxuXG4gICAgcmV0dXJuIGFuZ2xlICogTWF0aC5QSSAvIDE4MDsgLy8x5bqm5L2V44Op44K444Ki44Oz44GLXG5cbiAgfVxuXG4gIGRpc3QocDEsIHAyKSB7XG5cbiAgICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KHAyLnggLSBwMS54LCAyKSArIE1hdGgucG93KHAyLnkgLSBwMS55LCAyKSk7XG5cbiAgfVxuXG4gIGFzY2VuZChhcnIpIHtcblxuICAgIGFyci5zb3J0KGZ1bmN0aW9uKGEsYil7XG4gICAgICBpZiggYSA+IGIgKSByZXR1cm4gLTE7XG4gICAgICBpZiggYSA8IGIgKSByZXR1cm4gMTtcbiAgICAgIHJldHVybiAwO1xuICAgIH0pO1xuICAgIC8vIHZhciBhID0gWzUsMyw5LDEsMTBdXG4gICAgLy8g57WQ5p6cOjEwLDksNSwzLDFcblxuICB9XG5cbiAgZGVzY2VuZChhcnIpIHtcblxuICAgIGFyci5zb3J0KGZ1bmN0aW9uKGEsYil7XG4gICAgICBpZiggYSA8IGIgKSByZXR1cm4gLTE7XG4gICAgICBpZiggYSA+IGIgKSByZXR1cm4gMTtcbiAgICAgIHJldHVybiAwO1xuICAgIH0pO1xuXG4gICAgLy8gdmFyIGEgPSBbNSwzLDksMSwxMF1cbiAgICAvLyDntZDmnpw6MSwzLDUsOSwxMFxuXG4gIH1cblxuICAvLyBtYXAodmFsdWUsIG1pbjAxLCBtYXgwMSwgbWluMDIsIG1heDAyKSB7XG5cbiAgLy8gICB2YXIgZGlzMDEgPSBtYXgwMSAtIG1pbjAxO1xuICAvLyAgIHZhciBkaXMwMiA9IG1heDAyIC0gbWluMDJcblxuICAvLyAgIHZhciByYXRlID0gZGlzMDIgLyBkaXMwMTtcblxuICAvLyAgIHZhbHVlID0gdmFsdWUgKiByYXRlO1xuXG4gIC8vICAgcmV0dXJuIHZhbHVlO1xuICAvLyB9XG5cbiAgY29uc3RyYWluKHZhbHVlLCBtaW4sIG1heCkge1xuXG4gICAgcmV0dXJuIE1hdGgubWluKG1heCwgTWF0aC5tYXgodmFsdWUsIG1pbikpO1xuXG4gICAgLy8gaWYgKHZhbHVlIDw9IGxvdykgdmFsdWUgPSBsb3c7XG4gICAgLy8gaWYgKHZhbHVlID49IGhpZ2gpIHZhbHVlID0gaGlnaDsgICAgIFxuICAgIC8vIHJldHVybiB2YWx1ZTtcblxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vXG4gIC8vICBBcnJheVxuICAvL1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyDphY3liJflhoXjga7jg6njg7Pjg4Djg6DjgarlgKTjgpLjgbLjgajjgaTlj5blvpdcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gQGFyciA6IOmFjeWIl1xuICAvLyByZXR1cm4gOiDphY3liJflhoXjga7lgKRcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgYXJyUmFuZChhcnIpIHtcblxuICAgIHJldHVybiBhcnJbdGhpcy5yYW5kb20oMCwgYXJyLmxlbmd0aCAtIDEpXTtcblxuICB9ICAgIFxuICAgIFxuICAvLyDphY3liJfjgpLjg6njg7Pjg4Djg6DjgavkuKbjgbnmm7/jgYhcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gQGFyciA6IOmFjeWIlyhBcnJheSlcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgc2h1ZmZsZShhcnkpIHtcblxuICAgIHZhciBhcnIgPSBbXTtcbiAgICBhcnIgPSBhcnkuc2xpY2UoKTtcbiAgICB2YXIgaSA9IGFyci5sZW5ndGg7XG4gICAgd2hpbGUoaSl7XG4gICAgICB2YXIgaiA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSppKTtcbiAgICAgIHZhciB0ID0gYXJyWy0taV07XG4gICAgICBhcnJbaV0gPSBhcnJbal07XG4gICAgICBhcnJbal0gPSB0O1xuICAgIH1cbiAgICByZXR1cm4gYXJyO1xuXG4gIH1cblxuICAvLyDjg6njg7Pjg4Djg6DjgarmlbDlgKTjgpLkvZzjgotcbiAgcmFuZG9tQXJyIChsZW4pIHtcblxuICAgIHZhciBhcnIgPSBuZXcgQXJyYXk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSBhcnIucHVzaChpKTtcblxuICAgIGFyciA9IHRoaXMuc2h1ZmZsZUFyeShhcnIpO1xuXG4gICAgcmV0dXJuIGFycjtcblxuICB9XG5cbiAgLy8gbnVsbOOCkuWJiumZpOOBl+OBn+mFjeWIl+OCkui/lOOBmVxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyBAYXJyIDog6YWN5YiXKEFycmF5KVxuICAvLyByZXR1cm4gOiBudWxs5YmK6Zmk44GX44Gf6YWN5YiXKEFycmF5KVxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBzbGljZU51bGwoYXJyKSB7XG5cbiAgICB2YXIgaSwgbCwgbGVuMSwgbmV3QXJyLCB2YWw7XG4gICAgbmV3QXJyID0gW107XG4gICAgZm9yIChpID0gbCA9IDAsIGxlbjEgPSBhcnIubGVuZ3RoOyBsIDwgbGVuMTsgaSA9ICsrbCkge1xuICAgICAgdmFsID0gYXJyW2ldO1xuICAgICAgaWYgKHZhbCAhPT0gbnVsbCkge1xuICAgICAgICBuZXdBcnIucHVzaCh2YWwpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3QXJyO1xuXG4gIH0gICAgXG4gIFxuICAvLyDphY3liJflhoXjga7jg5Hjg6njg6Hjg7zjgr/jgpLmr5TovIPjgZfjgabjgr3jg7zjg4hcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gQGFyciA6IOmFjeWIlyhBcnJheSlcbiAgLy8gQHBhcmEgOiDjg5Hjg6njg6Hjg7zjgr/jg7zlkI1cbiAgLy8gQGRlc2MgOiDpmY3poIbjgYvjganjgYbjgYsoYm9vbGVhbikg44OH44OV44Kp44Or44OI44Gv5piH6aCGXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIHNvcnQoYXJyLCBwYXJhLCBkZXNjKSB7XG4gICAgaWYgKGRlc2MgPT09IHZvaWQgMCkge1xuICAgICAgZGVzYyA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAoZGVzYykge1xuICAgICAgcmV0dXJuIGFyci5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGJbcGFyYV0gLSBhW3BhcmFdO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBhcnIuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgIHJldHVybiBhW3BhcmFdIC0gYltwYXJhXTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGdldEtleShsaXN0LHZhbHVlKSB7XG4gICAgICB2YXIgcmV0dXJuS2V5ID0gW107XG4gICAgICBmb3IodmFyIGtleSBpbiBsaXN0KXtcbiAgICAgICAgICBpZiAobGlzdFtrZXldID09IHZhbHVlKSB7XG4gICAgICAgICAgICAgIHJldHVybktleS5wdXNoKGtleSk7XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJldHVybktleTtcbiAgfVxuXG4gIC8vIOODpuODi+ODvOOCr0lE44KS5Y+W5b6XXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIHVuaXF1ZSgpIHtcblxuICAgIHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcblxuICB9XG4gIFxuICAvLyAqKmpxdWFyeeS9v+eUqFxuICAvLyDjg5zjgr/jg7Pjg6Ljg7zjg4nlpInmm7RcbiAgLy8gdHJ1ZeOBquOCieOCq+ODvOOCveODq+OBjOODneOCpOODs+OCv+ODvOOBruW9ouOBq1xuICAvLyBmYWxzZeOBquOCieODh+ODleOCqeODq+ODiOOBruOCq+ODvOOCveODq+OBq1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyBAZmxnIDog6YGp55So44GZ44KL44GL44Gp44GG44GLKGJvb2xlYW4pXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIGJ1dHRvbk1vZGUoZmxnKSB7XG5cbiAgICBpZiAoZmxnKSB7XG4gICAgICByZXR1cm4gJChcImJvZHlcIikuY3NzKFwiY3Vyc29yXCIsIFwicG9pbnRlclwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICQoXCJib2R5XCIpLmNzcyhcImN1cnNvclwiLCBcImRlZmF1bHRcIik7XG4gICAgfVxuXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy9cbiAgLy8gIGRldmljZVxuICAvL1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICBpc0RldmljZVNQKCl7XG5cbiAgICB2YXIgbWVkaWEgPSBbXCJpcGhvbmVcIixcImlwb2RcIixcImlwYWRcIixcImFuZHJvaWRcIixcImRyZWFtXCIsXCJjdXBjYWtlXCIsXCJibGFja2JlcnJ5OTUwMFwiLFwiYmxhY2tiZXJyeTk1MzBcIixcImJsYWNrYmVycnk5NTIwXCIsXCJibGFja2JlcnJ5OTU1MFwiLFwiYmxhY2tiZXJyeTk4MDBcIixcIndlYm9zXCIsXCJpbmNvZ25pdG9cIixcIndlYm1hdGVcIl07XG4gICAgdmFyIHBhdHRlcm4gPSBuZXcgUmVnRXhwKG1lZGlhLmpvaW4oXCJ8XCIpLFwiaVwiKTtcblxuICAgIHZhciBiID0gcGF0dGVybi50ZXN0KHRoaXMudWEpO1xuICAgIGlmIChiKSAkKCdib2R5JykuYWRkQ2xhc3MoJ2lzRGV2aWNlU1AnKTtcblxuICAgIHRoaXMuaXNTUCA9IGI7XG5cbiAgfVxuICBpc0RldmljZVRBQigpe1xuXG4gICAgdmFyIGIgPSAodGhpcy51YS5pbmRleE9mKFwid2luZG93c1wiKSAhPSAtMSAmJiB0aGlzLnVhLmluZGV4T2YoXCJ0b3VjaFwiKSAhPSAtMSlcbiAgICAgIHx8IHRoaXMudWEuaW5kZXhPZihcImlwYWRcIikgIT0gLTFcbiAgICAgIHx8ICh0aGlzLnVhLmluZGV4T2YoXCJhbmRyb2lkXCIpICE9IC0xICYmIHRoaXMudWEuaW5kZXhPZihcIm1vYmlsZVwiKSA9PSAtMSlcbiAgICAgIHx8ICh0aGlzLnVhLmluZGV4T2YoXCJmaXJlZm94XCIpICE9IC0xICYmIHRoaXMudWEuaW5kZXhPZihcInRhYmxldFwiKSAhPSAtMSlcbiAgICAgIHx8IHRoaXMudWEuaW5kZXhPZihcImtpbmRsZVwiKSAhPSAtMVxuICAgICAgfHwgdGhpcy51YS5pbmRleE9mKFwic2lsa1wiKSAhPSAtMVxuICAgICAgfHwgdGhpcy51YS5pbmRleE9mKFwicGxheWJvb2tcIikgIT0gLTE7XG4gICAgaWYgKGIpICQoJ2JvZHknKS5hZGRDbGFzcygnaXNEZXZpY2VUQUInKTtcblxuICAgIHRoaXMuaXNUQUIgPSBiO1xuXG4gIH1cblxuICBpc0RldmljZU1CKCl7XG5cbiAgICB2YXIgYiA9ICh0aGlzLnVhLmluZGV4T2YoXCJ3aW5kb3dzXCIpICE9IC0xICYmIHRoaXMudWEuaW5kZXhPZihcInBob25lXCIpICE9IC0xKVxuICAgICAgfHwgdGhpcy51YS5pbmRleE9mKFwiaXBob25lXCIpICE9IC0xXG4gICAgICB8fCB0aGlzLnVhLmluZGV4T2YoXCJpcG9kXCIpICE9IC0xXG4gICAgICB8fCAodGhpcy51YS5pbmRleE9mKFwiYW5kcm9pZFwiKSAhPSAtMSAmJiB0aGlzLnVhLmluZGV4T2YoXCJtb2JpbGVcIikgIT0gLTEpXG4gICAgICB8fCAodGhpcy51YS5pbmRleE9mKFwiZmlyZWZveFwiKSAhPSAtMSAmJiB0aGlzLnVhLmluZGV4T2YoXCJtb2JpbGVcIikgIT0gLTEpXG4gICAgICB8fCB0aGlzLnVhLmluZGV4T2YoXCJibGFja2JlcnJ5XCIpICE9IC0xO1xuICAgIGlmIChiKSAkKCdib2R5JykuYWRkQ2xhc3MoJ2lzRGV2aWNlTUInKTtcblxuICAgIHRoaXMuaXNNQiA9IGI7XG5cbiAgfVxuXG4gIGlzRGV2aWNlUEMoKXtcblxuICAgIGlmICghKHRoaXMuaXNTUCB8fCB0aGlzLmlzVEFCIHx8IHRoaXMuaXNNQikpIHtcbiAgICAgIFxuICAgICAgJCgnYm9keScpLmFkZENsYXNzKCdpc0RldmljZVBDJyk7XG4gICAgICB0aGlzLmlzUEMgPSB0cnVlO1xuICAgICAgcmV0dXJuO1xuXG4gICAgfVxuXG4gICAgdGhpcy5pc1BDID0gZmFsc2U7XG5cbiAgfVxuXG4gIC8vIOOCueODnuODleOCqeWIpOWumlxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyByZXR1cm4gOiB0cnVlIG9yIGZhbHNlKGJvb2xlYW4pXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIGlzU210KCkge1xuXG4gICAgcmV0dXJuIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignaVBhZCcpID4gMCB8fCBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ2lQaG9uZScpID4gMCB8fCBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ2lQb2QnKSA+IDAgfHwgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdBbmRyb2lkJykgPiAwO1xuXG4gIH1cblxuICAvLyDjgr/jg5bjg6zjg4Pjg4jnq6/mnKvjgYvjganjgYbjgYtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gcmV0dXJuIDogdHJ1ZSBvciBmYWxzZShib29sZWFuKVxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBpc1RhYmxldCgpIHtcblxuICAgIHJldHVybiB0aGlzLmlzSXBhZCgpIHx8ICh0aGlzLmlzQW5kcm9pZCgpICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignTW9iaWxlJykgPT09IC0xKTtcblxuICB9XG5cbiAgLy8gaVBhZOWIpOWumlxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyByZXR1cm4gOiB0cnVlIG9yIGZhbHNlKGJvb2xlYW4pXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIGlzSXBhZCgpIHtcblxuICAgIHJldHVybiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ2lQYWQnKSA+IDA7XG5cbiAgfVxuXG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vXG4gIC8vICBPU1xuICAvL1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyBBbmRyb2lk5Yik5a6aXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHJldHVybiA6IHRydWUgb3IgZmFsc2UoYm9vbGVhbilcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgaXNBbmRyb2lkKCkge1xuXG4gICAgdmFyIHU7XG4gICAgdSA9IG5hdmlnYXRvci51c2VyQWdlbnQ7XG4gICAgcmV0dXJuIHUuaW5kZXhPZignQmxhY2tCZXJyeScpID4gMCB8fCB1LmluZGV4T2YoJ0FuZHJvaWQnKSA+IDAgfHwgdS5pbmRleE9mKCdXaW5kb3dzIFBob25lJykgPiAwO1xuXG4gIH1cblxuICBpc2lQaG9uZSgpe1xuICAgIHZhciBwYXR0ZXJuID0gbmV3IFJlZ0V4cChcImlwaG9uZVwiLFwiaVwiKTtcbiAgICByZXR1cm4gcGF0dGVybi50ZXN0KHRoaXMudWEpO1xuICB9XG5cbiAgLy8gaU9T5Yik5a6aXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHJldHVybiA6IHRydWUgb3IgZmFsc2UoYm9vbGVhbilcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgaXNJb3MoKSB7XG5cbiAgICByZXR1cm4gbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdpUGFkJykgPiAwIHx8IG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignaVBob25lJykgPiAwIHx8IG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignaVBvZCcpID4gMDtcblxuICB9XG5cbiAgLy8gUFMz5Yik5a6aXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHJldHVybiA6IHRydWUgb3IgZmFsc2UoYm9vbGVhbilcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgaXNQczMoKSB7XG5cbiAgICB2YXIgdTtcbiAgICB1ID0gbmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgICByZXR1cm4gdS5pbmRleE9mKCdQTEFZU1RBVElPTiAzJykgPiAwO1xuXG4gIH1cbiAgICBcbiAgLy8gVklUQeWIpOWumlxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyByZXR1cm4gOiB0cnVlIG9yIGZhbHNlKGJvb2xlYW4pXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIGlzVml0YSgpIHtcblxuICAgIHZhciB1O1xuICAgIHUgPSBuYXZpZ2F0b3IudXNlckFnZW50O1xuICAgIHJldHVybiB1LmluZGV4T2YoJ1BsYXlTdGF0aW9uIFZpdGEnKSA+IDA7XG5cbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvL1xuICAvLyAgYnJvd3NlclxuICAvL1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gSUXjgYvjganjgYbjgYtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gcmV0dXJuIDogdHJ1ZSBvciBmYWxzZShib29sZWFuKVxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBpc0llKCkge1xuXG4gICAgdmFyIHVhO1xuICAgIHVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTtcbiAgICByZXR1cm4gdWEuaW5kZXhPZignbXNpZScpICE9PSAtMSB8fCB1YS5pbmRleE9mKCd0cmlkZW50LzcnKSAhPT0gLTE7XG5cbiAgfVxuXG4gIC8vIFdJTuOBi+OBqeOBhuOBi1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyByZXR1cm4gOiB0cnVlIG9yIGZhbHNlKGJvb2xlYW4pXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIGlzV2luKCkge1xuXG4gICAgcmV0dXJuIG5hdmlnYXRvci5wbGF0Zm9ybS5pbmRleE9mKFwiV2luXCIpICE9PSAtMTtcblxuICB9XG5cbiAgLy8gZ29vZ2xlQ2hyb21l44GL44Gp44GG44GLXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHJldHVybiA6IHRydWUgb3IgZmFsc2UoYm9vbGVhbilcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgaXNDaHJvbWUoKSB7XG5cbiAgICByZXR1cm4gbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdDaHJvbWUnKSA+IDA7XG5cbiAgfSAgICBcbiAgXG4gIC8vIEZpcmVGb3jjgYvjganjgYbjgYtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gcmV0dXJuIDogdHJ1ZSBvciBmYWxzZShib29sZWFuKVxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBpc0ZGKCkge1xuXG4gICAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkuaW5kZXhPZignZmlyZWZveCcpICE9PSAtMTtcblxuICB9XG5cbiAgaXNTYWZhcmkoKXtcblxuICAgIGlmKHRoaXMudWEuaW5kZXhPZihcImNocm9tZVwiKSAhPSAtMSkgcmV0dXJuIGZhbHNlO1xuICAgIGlmKHRoaXMudWEuaW5kZXhPZihcImx1bmFzY2FwZVwiKSAhPSAtMSkgcmV0dXJuIGZhbHNlO1xuICAgIHZhciBwYXR0ZXJuID0gbmV3IFJlZ0V4cChcInNhZmFyaVwiLFwiaVwiKTtcbiAgICByZXR1cm4gcGF0dGVybi50ZXN0KHRoaXMudWEpO1xuXG4gIH1cblxuICBpc09wZXJhKCl7XG5cbiAgICAgIHZhciBwYXR0ZXJuID0gbmV3IFJlZ0V4cChcIm9wZXJhXCIsXCJpXCIpO1xuICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdCh0aGlzLnVhKTtcblxuICB9XG5cbiAgLy8gaU9T44Guc2FmYXJp5Lul5aSW44GL44Gp44GG44GLXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHJldHVybiA6IHRydWUgb3IgZmFsc2UoYm9vbGVhbilcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgaXNJT1NVaVZpZXcoKSB7XG5cbiAgICB2YXIgYTtcbiAgICBhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTtcbiAgICByZXR1cm4gKHRoaXMuaXNJb3MoKSAmJiBhLmluZGV4T2YoJ3NhZmFyaScpID09PSAtMSkgfHwgKHRoaXMuaXNJb3MoKSAmJiBhLmluZGV4T2YoJ2NyaW9zJykgPiAwKSB8fCAodGhpcy5pc0lvcygpICYmIGEuaW5kZXhPZignZ3NhJykgPiAwKTtcblxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vXG4gIC8vICB2ZXJzaW9uXG4gIC8vXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyBJRTjku6XkuIvjgYvjganjgYbjgYtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gcmV0dXJuIDogdHJ1ZSBvciBmYWxzZShib29sZWFuKVxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBpc0llOFVuZGVyKCkge1xuXG4gICAgdmFyIG1zaWU7XG4gICAgbXNpZSA9IG5hdmlnYXRvci5hcHBWZXJzaW9uLnRvTG93ZXJDYXNlKCk7XG4gICAgbXNpZSA9IG1zaWUuaW5kZXhPZignbXNpZScpID4gLTEgPyBwYXJzZUludChtc2llLnJlcGxhY2UoLy4qbXNpZVsgXS8sICcnKS5tYXRjaCgvXlswLTldKy8pKSA6IDA7XG4gICAgcmV0dXJuIG1zaWUgPD0gOCAmJiBtc2llICE9PSAwO1xuXG4gIH1cbiAgICBcbiAgLy8gSUU55Lul5LiL44GL44Gp44GG44GLXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHJldHVybiA6IHRydWUgb3IgZmFsc2UoYm9vbGVhbilcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgaXNJZTlVbmRlcigpIHtcblxuICAgIHZhciBtc2llO1xuICAgIG1zaWUgPSBuYXZpZ2F0b3IuYXBwVmVyc2lvbi50b0xvd2VyQ2FzZSgpO1xuICAgIG1zaWUgPSBtc2llLmluZGV4T2YoJ21zaWUnKSA+IC0xID8gcGFyc2VJbnQobXNpZS5yZXBsYWNlKC8uKm1zaWVbIF0vLCAnJykubWF0Y2goL15bMC05XSsvKSkgOiAwO1xuICAgIHJldHVybiBtc2llIDw9IDkgJiYgbXNpZSAhPT0gMDtcblxuICB9XG5cbiAgLy8gSUUxMOS7peS4i+OBi+OBqeOBhuOBi1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyByZXR1cm4gOiB0cnVlIG9yIGZhbHNlKGJvb2xlYW4pXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIGlzSWUxMFVuZGVyKCkge1xuXG4gICAgdmFyIG1zaWU7XG4gICAgbXNpZSA9IG5hdmlnYXRvci5hcHBWZXJzaW9uLnRvTG93ZXJDYXNlKCk7XG4gICAgbXNpZSA9IG1zaWUuaW5kZXhPZignbXNpZScpID4gLTEgPyBwYXJzZUludChtc2llLnJlcGxhY2UoLy4qbXNpZVsgXS8sICcnKS5tYXRjaCgvXlswLTldKy8pKSA6IDA7XG4gICAgcmV0dXJuIG1zaWUgPD0gMTAgJiYgbXNpZSAhPT0gMDtcblxuICB9XG5cbiAgLy8gSUUxMeS7peS4i+OBi+OBqeOBhuOBi1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyByZXR1cm4gOiB0cnVlIG9yIGZhbHNlKGJvb2xlYW4pXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIGlzSWUxMVVuZGVyKCkge1xuXG4gICAgdmFyIGIgPSB0aGlzLmlzSWUxMFVuZGVyKCkgfHwgKHRoaXMudWEuaW5kZXhPZihcInRyaWRlbnRcIikgIT0gLTEpO1xuICAgIHJldHVybiBiO1xuICAgIC8vIHJldHVybiB0cnVlO1xuXG4gIH1cblxuICAvLyBlZGdl44GL44Gp44GG44GLXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHJldHVybiA6IHRydWUgb3IgZmFsc2UoYm9vbGVhbilcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgaXNFZGdlKCkge1xuXG4gICAgbG9nKHRoaXMudWEuaW5kZXhPZihcIkFwcGxlV2Via2l0XCIpLHRoaXMudWEuaW5kZXhPZihcIkVkZ2VcIiksdGhpcy51YSx0aGlzLmFwcFYpO1xuICAgIHZhciBiID0gKHRoaXMudWEuaW5kZXhPZihcImFwcGxld2Via2l0XCIpID49IDAgJiYgdGhpcy51YS5pbmRleE9mKFwiZWRnZVwiKSAhPSAtMSk7XG4gICAgcmV0dXJuIGI7XG4gICAgLy8gcmV0dXJuIHRydWU7XG5cbiAgfVxuXG4gIGlzSUVWZXJzaW9uKCl7XG5cbiAgICAkKCdib2R5JykuYWRkQ2xhc3MoJ2llJyk7XG4gICAgdGhpcy5pc0lFID0gdHJ1ZTtcbiAgICAgIFxuICAgIGlmICh0aGlzLmFwcFYuaW5kZXhPZihcIm1zaWUgMTAuXCIpICE9IC0xKSB7XG4gICAgICAkKCdib2R5JykuYWRkQ2xhc3MoJ2llMTAnKTtcbiAgICAgIHJldHVybiAnaWUxMCc7XG4gICAgfSBlbHNlIGlmICh0aGlzLmFwcFYuaW5kZXhPZihcIm1zaWUgOS5cIikgIT0gLTEpIHtcbiAgICAgICQoJ2JvZHknKS5hZGRDbGFzcygnaWU5Jyk7XG4gICAgICByZXR1cm4gJ2llOSc7XG4gICAgfSBlbHNlIGlmICh0aGlzLmFwcFYuaW5kZXhPZihcIm1zaWUgOC5cIikgIT0gLTEpIHtcbiAgICAgICQoJ2JvZHknKS5hZGRDbGFzcygnaWU4Jyk7ICBcbiAgICAgIHJldHVybiAnaWU4JztcbiAgICB9IGVsc2UgaWYgKHRoaXMuYXBwVi5pbmRleE9mKFwibXNpZSA3LlwiKSAhPSAtMSkge1xuICAgICAgJCgnYm9keScpLmFkZENsYXNzKCdpZTcnKTtcbiAgICAgIHJldHVybiAnaWU3JztcbiAgICB9IGVsc2UgaWYgKHRoaXMuYXBwVi5pbmRleE9mKFwibXNpZSA2LlwiKSAhPSAtMSkge1xuICAgICAgJCgnYm9keScpLmFkZENsYXNzKCdpZTYnKTtcbiAgICAgIHJldHVybiAnaWU2JztcbiAgICB9IGVsc2UgaWYgKHRoaXMuYXBwVi5pbmRleE9mKFwidHJpZGVudFwiKSAhPSAtMSkge1xuICAgICAgJCgnYm9keScpLmFkZENsYXNzKCdpZTExJyk7XG4gICAgICB0aGlzLmlzSUUxMSA9IHRydWU7XG4gICAgICByZXR1cm4gJ2llMTEnO1xuICAgIH0gZWxzZSBpZiAodGhpcy51YS5pbmRleE9mKFwiYXBwbGV3ZWJraXRcIikgPj0gMCAmJiB0aGlzLnVhLmluZGV4T2YoXCJlZGdlXCIpICE9IC0xKSB7XG4gICAgICAkKCdib2R5JykuYWRkQ2xhc3MoJ2lzRWRnZScpO1xuICAgICAgcmV0dXJuICdlZGdlJztcbiAgICB9XG5cblxuICAgICQoJ2JvZHknKS5yZW1vdmVDbGFzcygnaWUnKTtcbiAgICB0aGlzLmlzSUUgPSBmYWxzZTtcblxuICB9XG5cbiAgaXNBbmRyb2lkVmVyc2lvbigpIHtcblxuICAgIGlmKCB0aGlzLnVhLmluZGV4T2YoXCJhbmRyb2lkXCIpID4gMCApIHtcblxuICAgICAgICB2YXIgdmVyc2lvbiA9IHBhcnNlRmxvYXQodGhpcy51YS5zbGljZSh0aGlzLnVhLmluZGV4T2YoXCJhbmRyb2lkXCIpKzgpKTtcbiAgICAgICAgcmV0dXJuIHZlcnNpb247XG4gICAgICAgIFxuICAgIH1cblxuICB9XG5cbiAgaXNpcGhvbmVWZXJzaW9uKCkge1xuXG4gICAgaWYoIHRoaXMudWEuaW5kZXhPZihcImlQaG9uZSBPU1wiKSA+IDAgKSB7XG5cbiAgICAgICAgdmFyIHZlcnNpb24gPSBwYXJzZUZsb2F0KHRoaXMudWEuc2xpY2UodGhpcy51YS5pbmRleE9mKFwiaVBob25lIE9TXCIpKzEwKSk7XG4gICAgICAgIHJldHVybiB2ZXJzaW9uO1xuXG4gICAgfVxuXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy9cbiAgLy8gIHBvcnRyYWl0IC8gbGFuZHNjYXBlXG4gIC8vXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBpc0RpcmVjdGlvbiAoKSB7XG5cbiAgICB2YXIgVyA9IHdpbmRvdy5pbm5lcldpZHRoLFxuICAgICAgICBIID0gd2luZG93LmlubmVySGVpZ2h0O1xuXG4gICAgaWYgKEggPiBXKSB7XG4gICAgICAkKFwiYm9keVwiKS5hZGRDbGFzcyhcInBvcnRyYWl0XCIpO1xuICAgICAgJChcImJvZHlcIikucmVtb3ZlQ2xhc3MoXCJsYW5kc2NhcGVcIik7XG4gICAgfWVsc2V7XG4gICAgICAkKFwiYm9keVwiKS5hZGRDbGFzcyhcImxhbmRzY2FwZVwiKTtcbiAgICAgICQoXCJib2R5XCIpLnJlbW92ZUNsYXNzKFwicG9ydHJhaXRcIik7XG4gICAgfVxuXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy9cbiAgLy8gIHJlc3BvbnNpdmUg5qiq5bmF44KS6KaL44KLXG4gIC8vXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBpc1Jlc3BvbnNpdmUgKGJwKSB7XG5cbiAgICBpZiAoYnA9PXVuZGVmaW5lZCkgYnA9Mzc1O1xuXG4gICAgdmFyIFcgPSB3aW5kb3cuaW5uZXJXaWR0aCxcbiAgICAgICAgSCA9IHdpbmRvdy5pbm5lckhlaWdodDtcblxuICAgIGlmIChXID4gYnApIHtcbiAgICAgIHRoaXMuaXNSZXNTUCA9IGZhbHNlO1xuICAgICAgdGhpcy5pc1Jlc1BDID0gdHJ1ZTtcbiAgICAgICQoJ2JvZHknKS5yZW1vdmVDbGFzcygnaXNSZXNwb25zaXZlU1AnKTtcbiAgICAgICQoJ2JvZHknKS5hZGRDbGFzcygnaXNSZXNwb25zaXZlUEMnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5pc1Jlc1NQID0gdHJ1ZTtcbiAgICAgIHRoaXMuaXNSZXNQQyA9IGZhbHNlO1xuICAgICAgJCgnYm9keScpLmFkZENsYXNzKCdpc1Jlc3BvbnNpdmVTUCcpO1xuICAgICAgJCgnYm9keScpLnJlbW92ZUNsYXNzKCdpc1Jlc3BvbnNpdmVQQycpO1xuICAgIH1cblxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vXG4gIC8vICBVUkxcbiAgLy9cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8g44Kv44Ko44Oq5oqc44GN5Ye644GXXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIEBrZXkgOiDmipzjgY3lh7rjgZnjg5Hjg6njg6Hjg7zjgr/lkI0oU3RyaW5nKVxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyBnZXRRdWVyeShrZXkpIHtcblxuICAvLyAgIHZhciBxcywgcmVnZXg7XG4gIC8vICAga2V5ID0ga2V5LnJlcGxhY2UoL1vigqxbXS8sIFwi4oKs4oKs4oKsW1wiKS5yZXBsYWNlKC9b4oKsXV0vLCBcIuKCrOKCrOKCrF1cIik7XG4gIC8vICAgcmVnZXggPSBuZXcgUmVnRXhwKFwiW+KCrOKCrD8mXVwiICsga2V5ICsgXCI9KFteJiNdKilcIik7XG4gIC8vICAgcXMgPSByZWdleC5leGVjKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcbiAgLy8gICBpZiAocXMgPT09IG51bGwpIHtcbiAgLy8gICAgIHJldHVybiBcIlwiO1xuICAvLyAgIH0gZWxzZSB7XG4gIC8vICAgICByZXR1cm4gcXNbMV07XG4gIC8vICAgfVxuXG4gIC8vIH1cblxuICBnZXRQYXJhbSgpIHtcblxuICAgIHZhciB1cmwgPSBsb2NhdGlvbi5ocmVmO1xuICAgIHZhciBwYXJhbSA9IHVybC5zcGxpdCgnPycpWzFdO1xuICAgIGlmIChwYXJhbT09dW5kZWZpbmVkKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgIHZhciBwYXJhbUl0ZW1zID0gcGFyYW0uc3BsaXQoJyYnKTtcbiAgICB2YXIgbGlzdCA9IHt9O1xuICBcbiAgICBmb3IoIHZhciBpID0gMDsgaTxwYXJhbUl0ZW1zLmxlbmd0aDsgaSsrICl7XG5cbiAgICAgICAgcGFyYW1JdGVtID0gcGFyYW1JdGVtc1tpXS5zcGxpdCgnPScpO1xuICAgICAgICBsaXN0W3BhcmFtSXRlbVswXV0gPSBwYXJhbUl0ZW1bMV07XG5cbiAgICB9XG5cbiAgICByZXR1cm4gbGlzdDtcblxuICB9XG4gIFxuICAvLyDjg4/jg4Pjgrfjg6Xlj5blvpdcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gcmV0dXJuIDogbG9jYXRpb24uaGFzaOOBriPjgpLliYrpmaTjgZfjgZ/jgoTjgaRcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgaGFzaCgpIHtcblxuICAgIHJldHVybiBsb2NhdGlvbi5oYXNoLnJlcGxhY2UoXCIjXCIsIFwiXCIpO1xuXG4gIH1cblxuICAvLyBjb29raWXlj5blvpdcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gQGtleSA6IOODkeODqeODoeODvOOCv+WQjVxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBnZXRDb29raWUoa2V5KSB7XG5cbiAgICB2YXIgYSwgYXJyLCBpLCBsLCBsZW4xLCB2YWw7XG4gICAgaWYgKGRvY3VtZW50LmNvb2tpZSA9PT0gdm9pZCAwIHx8IGRvY3VtZW50LmNvb2tpZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGFyciA9IGRvY3VtZW50LmNvb2tpZS5zcGxpdChcIjsgXCIpO1xuICAgIGZvciAoaSA9IGwgPSAwLCBsZW4xID0gYXJyLmxlbmd0aDsgbCA8IGxlbjE7IGkgPSArK2wpIHtcbiAgICAgIHZhbCA9IGFycltpXTtcbiAgICAgIGEgPSB2YWwuc3BsaXQoXCI9XCIpO1xuICAgICAgaWYgKGFbMF0gPT09IGtleSkge1xuICAgICAgICByZXR1cm4gYVsxXTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG5cbiAgfSAgICAgIFxuXG4gIC8vIGNvb2tpZeioreWumlxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyBAa2V5IDog44OR44Op44Oh44O844K/5ZCNXG4gIC8vIEB2YWwgOiDlgKRcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgc2V0Q29va2llKGtleSwgdmFsKSB7XG5cbiAgICByZXR1cm4gZG9jdW1lbnQuY29va2llID0ga2V5ICsgXCI9XCIgKyB2YWw7XG5cbiAgfVxuICBcbiAgaXNQQ1NQKCkge1xuXG4gICAgdmFyIHVybCA9IGxvY2F0aW9uLmhyZWY7XG5cbiAgICBpZiAoIXRoaXMuaXNQQyAmJiAhdGhpcy5pc1RBQiAmJiAodXJsLmluZGV4T2YoJ3BjJykgIT0gLTEpKSB7XG5cbiAgICAgIGxvY2F0aW9uLmhyZWYgPSAnL29wX2dvbGRlbic7XG4gICAgXG4gICAgfSBcblxuICAgIGlmICh0aGlzLmlzUEMgJiYgdXJsLmluZGV4T2YoJ3BjJykgPT0gLTEpIHtcblxuICAgICAgbG9jYXRpb24uaHJlZiA9ICcvb3BfZ29sZGVuL3BjLyc7XG4gICAgXG4gICAgfSBcblxuICAgIGlmICh0aGlzLmlzVEFCICYmIHVybC5pbmRleE9mKCdwYycpID09IC0xKSB7XG5cbiAgICAgIGxvY2F0aW9uLmhyZWYgPSAnL29wX2dvbGRlbi9wYy8nO1xuICAgIFxuICAgIH0gXG5cbiAgICBpZiAodGhpcy5pc0NvbnRhaW4odXJsLCdyb3VsZXR0ZScpKSBsb2NhdGlvbi5ocmVmID0gJy9vcF9nb2xkZW4nO1xuICAgIGlmICh0aGlzLmlzQ29udGFpbih1cmwsJ3RvcGljcycpKSBsb2NhdGlvbi5ocmVmID0gJy9vcF9nb2xkZW4nO1xuXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy9cbiAgLy8gIENvbG9yXG4gIC8vXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIHJnYuOBi+OCiUhFWOOCq+ODqeODvOWPluW+l1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyBAciA6IDB+MjU1XG4gIC8vIEBnIDogMH4yNTVcbiAgLy8gQGIgOiAwfjI1NVxuICAvLyByZXR1cm4gOiBleCBcIiNGRkZGRkZcIlxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBnZXRIZXhDb2xvcihyLGcsYikge1xuICAgICAgdmFyIHN0cjtcbiAgICAgIHN0ciA9IChyIDw8IDE2IHwgZyA8PCA4IHwgYikudG9TdHJpbmcoMTYpO1xuICAgICAgcmV0dXJuIFwiI1wiICsgbmV3IEFycmF5KDcgLSBzdHIubGVuZ3RoKS5qb2luKFwiMFwiKSArIHN0cjtcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvL1xuICAvLyAgU3RyaW5nXG4gIC8vXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIGlzQ29udGFpbihzdHIsY29udGFpbikge1xuXG4gICAgLy8gc3Ry44Gu5Lit44GrLGNvbnRhaW7jgYzlrZjlnKjjgZfjgZ/jgolcbiAgICBpZiAoIHN0ci5pbmRleE9mKGNvbnRhaW4pICE9IC0xICkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIH1cblxuICAvLyAw5Z+L44KB44GnMuahgeOBq+OBmeOCi+mWouaVsFxuICBhZGQwKHN0cixudW09LTIpe1xuICAgIFxuICAgIHJldHVybiAoIFwiMDAwMDAwMDAwMDAwXCIgKyBzdHIgKS5zdWJzdHIoIG51bSApO1xuXG4gIH1cblxuICBmbG9hdEZvcm1hdCggbnVtYmVyLCBuICkge1xuXG4gICAgdmFyIF9wb3cgPSBNYXRoLnBvdyggMTAgLCBuICkgO1xuICAgIHJldHVybiBNYXRoLnJvdW5kKCBudW1iZXIgKiBfcG93ICkgLyBfcG93IDtcblxuICB9XG4gICAgXG4gIC8vIOWApOauteihqOiomFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBwcmljZShudW0pIHtcblxuICAgIHJldHVybiBTdHJpbmcobnVtKS5yZXBsYWNlKC8oXFxkKSg/PShcXGRcXGRcXGQpKyg/IVxcZCkpL2csICckMSwnKTtcblxuICB9XG5cbiAgLy8g5paH5a2X5YiX44KS5Y+N6LuiXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIEBzdHIgOiDmloflrZfliJcoU3RyaW5nKVxuICAvLyByZXR1cm4gOiDmloflrZfliJcoU3RyaW5nKVxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBzdHJSZXZlcnNlKHN0cikge1xuXG4gICAgdmFyIGksIGxlbiwgcmVzO1xuICAgIHJlcyA9IFwiXCI7XG4gICAgbGVuID0gc3RyLmxlbmd0aDtcbiAgICBpID0gMTtcbiAgICB3aGlsZSAoaSA8PSBsZW4pIHtcbiAgICAgIHJlcyArPSBzdHIuc3Vic3RyKC1pLCAxKTtcbiAgICAgIGkrKztcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcblxuICB9XG4gIFxuICAvLyDmloflrZfliJfjga7lhajnva7mj5tcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gQHZhbCAgOiDmloflrZfliJdcbiAgLy8gQG9lZyAgOiDnva7mj5vliY3jga7mloflrZfliJdcbiAgLy8gQGRlc3QgOiDnva7mj5vlvozjga7mloflrZfliJdcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgcmVwbGFjZUFsbCh2YWwsIG9yZywgZGVzdCkge1xuXG4gICAgcmV0dXJuIHZhbC5zcGxpdChvcmcpLmpvaW4oZGVzdCk7XG5cbiAgfSAgICBcbiAgXG4gIHN0clJlcGxhY2Uoc3RyLCBiZWZvcmUsIGFmdGVyKSB7XG5cbiAgICB2YXIgciA9IG5ldyBSZWdFeHAoIGJlZm9yZSwgJ2cnKTtcblxuICAgIHJldHVybiBzdHIucmVwbGFjZSggciAsIGFmdGVyICk7XG5cbiAgfSAgICBcbiAgXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvL1xuICAvLyAgRGF0ZVxuICAvL1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICBnZXROb3coKSB7XG5cbiAgICB0aGlzLm5vdyA9IG5ldyBEYXRlKCk7XG5cbiAgfVxuXG4gIHN0YXJ0KCkge1xuXG4gICAgdGhpcy5zdGFydFRpbWUgPSB0aGlzLm5vdy5nZXRUaW1lKCk7XG5cbiAgfVxuXG4gIGVsYXBzZWQoKSB7XG5cbiAgICB0aGlzLmVsYXBzZWRUaW1lID0gdGhpcy5ub3cuZ2V0VGltZSgpIC0gdGhpcy5zdGFydFRpbWU7XG5cbiAgfVxuXG4gIG0oKSB7XG5cbiAgICByZXR1cm4gTWF0aC5mbG9vciggdGhpcy5lbGFwc2VkVGltZSArIDEwMCAvIDYwICk7XG5cbiAgfVxuXG4gIHMoKSB7XG5cbiAgICByZXR1cm4gTWF0aC5mbG9vcih0aGlzLmVsYXBzZWRUaW1lIC8gMTAwMCk7XG5cbiAgfVxuXG4gIG1zKCkge1xuXG4gICAgcmV0dXJuIHRoaXMuZWxhcHNlZFRpbWU7XG4gICAgXG4gIH1cblxuICB0aW1lKCkge1xuXG4gICAgdGhpcy5nZXROb3coKTtcblxuICAgIHRoaXMuaG91ciA9IHRoaXMubm93LmdldEhvdXJzKCk7ICAgICAgICAgIC8vIOaZglxuICAgIHRoaXMubWludXRlID0gdGhpcy5ub3cuZ2V0TWludXRlcygpOyAgICAgIC8vIOWIhlxuICAgIHRoaXMuc2Vjb25kID0gdGhpcy5ub3cuZ2V0U2Vjb25kcygpO1xuICAgIHRoaXMubWlsbFNlY29uZCA9IHRoaXMubm93LmdldE1pbGxpc2Vjb25kcygpO1xuXG4gIH1cblxuICBkYXRlKCkge1xuXG4gICAgcmV0dXJuIHRoaXMubm93LmdldERhdGUoKTtcblxuICB9XG5cbiAgbW9udGhzKCkge1xuXG4gICAgdmFyIG1vbnRoZGF5cyA9IG5ldyBBcnJheSgzMSwgMjgsIDMxLCAzMCwgMzEsIDMwLCAzMSwgMzEsIDMwLCAzMSwgMzAsIDMxKTtcblxuICAgIHJldHVybiB0aGlzLm5vdy5nZXRNb250aCgpICsgMTtcblxuICB9XG5cbiAgeWVhcigpIHtcblxuICAgIHJldHVybiB0aGlzLm5vdy5nZXRGdWxsWWVhcigpO1xuXG4gIH1cblxuICBkYXkoKSB7XG5cbiAgICAvLyDmm5zml6UgKOaXpeacrOiqnilcbiAgICB2YXIgd2Vla0RheUpQID0gW1wi5pelXCIsXCLmnIhcIixcIueBq1wiLFwi5rC0XCIsXCLmnKhcIixcIumHkVwiLFwi5ZyfXCJdIDtcbiAgICB2YXIgd0RKID0gd2Vla0RheUpQW3RoaXMubm93LmdldERheSgpXSA7XG5cbiAgICAvLyDmm5zml6UgKOiLseiqnilcbiAgICB2YXIgd2Vla0RheUVOID0gW1wiU3VuXCIsXCJNb25cIixcIlR1ZVwiLFwiV2VkXCIsXCJUaHVcIixcIkZyaVwiLFwiU2F0XCJdIDtcbiAgICB2YXIgd0RFID0gd2Vla0RheUVOW3RoaXMubm93LmdldERheSgpXSA7XG5cbiAgfVxuICBcbiAgLy8g5pWw5pel5b6M44GuRGF0ZeOCquODluOCuOOCp+OCr+ODiOWPluW+l1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBhZnRlckRheShkYXRlLCBudW0pIHtcblxuICAgIHJldHVybiBuZXcgRGF0ZShkYXRlLmdldFRpbWUoKSArIE51bWJlcihudW0pICogMjQgKiA2MCAqIDYwICogMTAwMCk7XG5cbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvL1xuICAvLyAgRGF0YSB0eXBlIGNoZWNrXG4gIC8vXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIGlzT2JqZWN0KHZhbHVlLCBpZ25vcmVBcnJheSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgIT09IG51bGw7XG4gIH1cblxuICBpc051bWJlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcic7XG4gIH1cblxuICBpc1N0cmluZyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZyc7XG4gIH1cblxuICBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xuICB9XG5cbiAgaXNBcnJheSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG4gIH1cblxuICBpc051bGwodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbDtcbiAgfVxuXG4gIGlzVW5kZWZpbmVkKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJztcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvL1xuICAvLyAgb3RoZXJcbiAgLy9cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIHNldEltZ1NQU2l6ZSAoJHRhcmdldCl7XG5cbiAgICAvLyByZXNwb25zaXZlIHNw44Gu44Go44GN5Yem55CGXG4gICAgaWYgKCF0aGlzLmlzUmVzU1ApIHJldHVybjtcbiAgICAvLyDkuIDluqbjgaDjgZHlh6bnkIZcbiAgICAvLyBpZiAodGhpcy5pc1NldFNQU2l6ZSkgcmV0dXJuO1xuICAgIC8vIHRoaXMuaXNTZXRTUFNpemUgPSB0cnVlO1xuXG4gICAgdmFyICRpbWcgPSAkdGFyZ2V0LFxuICAgICAgICBsZW4gPSAkaW1nLmxlbmd0aDtcblxuICAgICRpbWcuZWFjaChmdW5jdGlvbihpKSB7XG5cbiAgICAgICAgdmFyIHcgPSBNYXRoLmZsb29yKCQodGhpcykud2lkdGgoKSAvIDIpLFxuICAgICAgICAgICAgaCA9IE1hdGguZmxvb3IoJCh0aGlzKS5oZWlnaHQoKSAvIDIpO1xuXG4gICAgICAgICQodGhpcykuYXR0cih7XG4gICAgICAgICAgICAnd2lkdGgnOiB3LFxuICAgICAgICAgICAgJ2hlaWdodCc6IGgsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChsZW4gPT0gaSArIDEpICQod2luZG93KS50cmlnZ2VyKCdzZXRTcFppZUVuZCcpO1xuXG4gICAgfSk7XG5cbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyAg44K544Oe44Ob5pON5L2c54Sh5Yq5XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBzZXRQcmV2ZW50KCkge1xuXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgJCh3aW5kb3cpLm9uKCd0b3VjaG1vdmUubm9Db250cm9sJywgZnVuY3Rpb24oZSl7ZS5wcmV2ZW50RGVmYXVsdCgpO30pO1xuXG4gIH1cblxuICByZW1vdmVQcmV2ZW50KCkge1xuXG4gICAgJCh3aW5kb3cpLm9mZigndG91Y2htb3ZlLm5vQ29udHJvbCcpO1xuXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gIGhvc3QscHJvdGNvbFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgcHJvdG9jb2woKSB7XG5cbiAgICByZXR1cm4gbG9jYXRpb24ucHJvdG9jb2w7XG5cbiAgfVxuICAgIFxuICBob3N0KCkge1xuXG4gICAgcmV0dXJuIGxvY2F0aW9uLmhvc3RuYW1lO1xuICAgIC8vIHJldHVybiBsb2NhdGlvbi5ob3N0XG5cbiAgfVxuXG4gIHBvcnQoKSB7XG5cbiAgICByZXR1cm4gbG9jYXRpb24ucG9ydDtcblxuICB9XG4gICAgICAgIFxuICBwYXRoKCkge1xuXG4gICAgcmV0dXJuIGxvY2F0aW9uLnBhdGhuYW1lO1xuXG4gIH1cblxuICBwcmV2ZW50RGVmYXVsdChlKSB7XG5cbiAgICBlID0gZSB8fCB3aW5kb3cuZXZlbnQ7XG4gICAgaWYgKGUucHJldmVudERlZmF1bHQpXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBlLnJldHVyblZhbHVlID0gZmFsc2U7XG5cbiAgfVxuXG4gIHByZXZlbnREZWZhdWx0Rm9yU2Nyb2xsS2V5cyhlKSB7XG5cbiAgICBpZiAoa2V5c1tlLmtleUNvZGVdKSB7XG4gICAgICAgIHByZXZlbnREZWZhdWx0KGUpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gIH1cblxuICBkaXNhYmxlU2Nyb2xsKCkge1xuXG4gICAgaWYgKHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKSAvLyBvbGRlciBGRlxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignRE9NTW91c2VTY3JvbGwnLCB0aGlzLnByZXZlbnREZWZhdWx0LCBmYWxzZSk7XG4gICAgd2luZG93Lm9ud2hlZWwgPSB0aGlzLnByZXZlbnREZWZhdWx0OyAvLyBtb2Rlcm4gc3RhbmRhcmRcbiAgICB3aW5kb3cub25tb3VzZXdoZWVsID0gZG9jdW1lbnQub25tb3VzZXdoZWVsID0gdGhpcy5wcmV2ZW50RGVmYXVsdDsgLy8gb2xkZXIgYnJvd3NlcnMsIElFXG4gICAgd2luZG93Lm9udG91Y2htb3ZlICA9IHRoaXMucHJldmVudERlZmF1bHQ7IC8vIG1vYmlsZVxuICAgIGRvY3VtZW50Lm9ua2V5ZG93biAgPSB0aGlzLnByZXZlbnREZWZhdWx0Rm9yU2Nyb2xsS2V5cztcblxuICB9XG5cbiAgZW5hYmxlU2Nyb2xsKCkge1xuXG4gICAgaWYgKHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKVxuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignRE9NTW91c2VTY3JvbGwnLCB0aGlzLnByZXZlbnREZWZhdWx0LCBmYWxzZSk7XG4gICAgd2luZG93Lm9ubW91c2V3aGVlbCA9IGRvY3VtZW50Lm9ubW91c2V3aGVlbCA9IG51bGw7IFxuICAgIHdpbmRvdy5vbndoZWVsID0gbnVsbDsgXG4gICAgd2luZG93Lm9udG91Y2htb3ZlID0gbnVsbDtcbiAgICBkb2N1bWVudC5vbmtleWRvd24gPSBudWxsO1xuXG4gIH1cblxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvVXNlcnMvVGVyYU1hYy9Eb2N1bWVudHMvMDBfU3RvY2svMTBfYmFzZS9mcm9udGVuZF9iYXNlX3ZlcjAyL2RldmVsb3BtZW50L3Byb2plY3QtbmFtZS9hc3NldHMvanMvX2RldmpzL3NyYy9NeUxpYnMvVXRpbC5qcyIsIi8qKlxuICogZmlsZU92ZXJ2aWV3OlxuICogUHJvamVjdDpcbiAqIEZpbGU6IEZ1bmNcbiAqIERhdGU6XG4gKiBBdXRob3I6XG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRnVuYyB7XG5cbiAgY29uc3RydWN0b3IoKSB7XG5cbiAgICB0aGlzLmJsYW5rKCk7XG4gICAgdGhpcy5kZWJ1Z2dlcigpO1xuICAgIHRoaXMucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCk7XG4gICAgdGhpcy5leHBhbmRqUXVlcnkoKTtcblxuICB9XG5cbiAgYmxhbmsoKSB7XG5cbiAgICAkKCgpPT57JCgnLmJsYW5rJykuYXR0cigndGFyZ2V0JywgJ19ibGFuaycpO30pO1xuXG4gIH1cblxuICBkZWJ1Z2dlcigpIHtcblxuICAgIC8vIOODh+ODkOODg+OCsOODouODvOODieWIh+abv1xuICAgIHZhciBSRUxFQVNFID0gZ2IuaW4uY29uZi5SRUxFQVNFO1xuXG4gICAgLy8g572u5o+b5a++6LGh44Gu44Oh44K944OD44OJ44KS6YWN5YiX44Go44GX44Gm5L+d5oyB44GZ44KLXG4gICAgdmFyIG1ldGhvZHMgPSBbXG4gICAgICAnbG9nJyxcbiAgICAgICdkZWJ1ZycsXG4gICAgICAnaW5mbycsXG4gICAgICAnd2FybicsXG4gICAgICAnZXJyb3InLFxuICAgICAgJ2RpcicsXG4gICAgICAndHJhY2UnLFxuICAgICAgJ2Fzc2VydCcsXG4gICAgICAnZGlyeG1sJyxcbiAgICAgICdncm91cCcsXG4gICAgICAnZ3JvdXBFbmQnLFxuICAgICAgJ3RpbWUnLFxuICAgICAgJ3RpbWVFbmQnLFxuICAgICAgJ2NvdW50JyxcbiAgICAgICdwcm9maWxlJyxcbiAgICAgICdwcm9maWxlRW5kJ1xuICAgIF07XG5cbiAgICAvLyBjb25zb2xl44GM5L2/44GI44Gq44GE5aC05ZCI44Gv56m644Gu44Kq44OW44K444Kn44Kv44OI44KS6Kit5a6a44GX44Gm44GK44GPXG4gICAgaWYoIHR5cGVvZiB3aW5kb3cuY29uc29sZSA9PT0gXCJ1bmRlZmluZWRcIiApe1xuICAgICAgd2luZG93LmNvbnNvbGUgPSB7fTtcbiAgICB9XG5cbiAgICAvLyDlkITjg6Hjgr3jg4Pjg4njgpJ3aW5kb3fjgbjnm7TmjqXov73liqDjgZfjgabooYzjgY9cbiAgICBmb3IoIHZhciBpIGluIG1ldGhvZHMgKXtcbiAgICAgIChmdW5jdGlvbiggbSApe1xuXG4gICAgICAgLy8gY29uc29sZeOBq+OBguOCi++8n+ODh+ODkOODg+OCsOODouODvOODieOBr+acieWKue+8n2NvbnNvbGXjga7jgoLjga7jga/plqLmlbDvvJ9cbiAgICAgICBpZiggY29uc29sZVttXSAmJiAhUkVMRUFTRSAmJiB0eXBlb2YgY29uc29sZVttXSA9PT0gXCJmdW5jdGlvblwiICl7XG4gICAgICAgIHdpbmRvd1ttXSA9IGNvbnNvbGVbbV0uYmluZChjb25zb2xlKTtcbiAgICAgICB9IGVsc2Uge+OAgC8vIGRlYnVnTW9kZeOBjGZhbHNlLOOCguOBl+OBj+OBr+ipsuW9k+ODoeOCveODg+ODieOBjOWtmOWcqOOBl+OBquOBhOWgtOWQiOOBr+OAgeepuuOBruODoeOCveODg+ODieOCkueUqOaEj+OBmeOCi1xuICAgICAgICB3aW5kb3dbbV0gPSBmdW5jdGlvbigpe307XG4gICAgICAgfVxuXG4gICAgICB9KSggbWV0aG9kc1tpXSApO1xuICAgIH1cblxuICB9XG5cbiAgcHJlcGVuZChwYXJhbSkge1xuXG4gICAgJCgnYm9keScpLnByZXBlbmQocGFyYW0pO1xuXG4gIH1cblxuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKSB7XG5cbiAgICB2YXIgRlBTID0gMTAwMC82MDtcblxuICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IC8vIGNocm9tZeOChOacgOaWsOOBrlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IC8vIOWPpOOBhGZpcmVmb3jnlKhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCAgLy8gc2FmYXJpNuS7peWJjeOAgWlPUzYgc2FmYXJp55SoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dChjYWxsYmFjaywgRlBTKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSA9IHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5tb3pDYW5jZWxBbmltYXRpb25GcmFtZSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy53ZWJraXRDYW5jZWxBbmltYXRpb25GcmFtZSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCB0aW1lciApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07ICAgICAgXG5cbiAgfVxuXG4gIGV4cGFuZGpRdWVyeSgpIHtcblxuICAgIGpRdWVyeS5mbi5leHRlbmQoe1xuICAgICAgdzowLCBcbiAgICAgIGg6MCwgXG4gICAgICBhZGp1c3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciB3ID0gJCh0aGlzKS5pbm5lcldpZHRoKCk7XG4gICAgICAgICAgdmFyIGggPSAkKHRoaXMpLmlubmVySGVpZ2h0KCk7XG4gICAgICAgICAgJCh0aGlzKS5jc3Moe1xuICAgICAgICAgICAgJ3Bvc2l0aW9uJzonYWJzb2x1dGUnLFxuICAgICAgICAgICAgJ2xlZnQnOic1MCUnLFxuICAgICAgICAgICAgJ3RvcCc6JzUwJScsXG4gICAgICAgICAgICAnbWFyZ2luLWxlZnQnOictJyArICh3IC8gMikgKyAncHgnLFxuICAgICAgICAgICAgJ21hcmdpbi10b3AnOictJyArIChoIC8gMikgKyAncHgnXG4gICAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgYWRqdXN0VzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHcgPSAkKHRoaXMpLmlubmVyV2lkdGgoKTtcbiAgICAgICAgICB2YXIgaCA9ICQodGhpcykuaW5uZXJIZWlnaHQoKTtcbiAgICAgICAgICAkKHRoaXMpLmNzcyh7XG4gICAgICAgICAgICAncG9zaXRpb24nOidhYnNvbHV0ZScsXG4gICAgICAgICAgICAnbGVmdCc6JzUwJScsXG4gICAgICAgICAgICAnbWFyZ2luLWxlZnQnOictJyArICh3IC8gMikgKyAncHgnXG4gICAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgYWRqdXN0SDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHcgPSAkKHRoaXMpLmlubmVyV2lkdGgoKTtcbiAgICAgICAgICB2YXIgaCA9ICQodGhpcykuaW5uZXJIZWlnaHQoKTtcbiAgICAgICAgICAkKHRoaXMpLmNzcyh7XG4gICAgICAgICAgICAncG9zaXRpb24nOidhYnNvbHV0ZScsXG4gICAgICAgICAgICAndG9wJzonNTAlJyxcbiAgICAgICAgICAgICdtYXJnaW4tdG9wJzonLScgKyAoaCAvIDIpICsgJ3B4J1xuICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gIH1cblxuICBjaGVja0Nzc0JsZW5kKCkge1xuXG4gICAgaWYgKCdDU1MnIGluIHdpbmRvdyAmJiAnc3VwcG9ydHMnIGluIHdpbmRvdy5DU1MpIHtcbiAgICAgIGlmICghd2luZG93LkNTUy5zdXBwb3J0cygnbWl4LWJsZW5kLW1vZGUnLCAnc29mdC1saWdodCcpKSB7XG4gICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKCdub3QtbWl4LWJsZW5kLW1vZGUnKVxuICAgICAgfVxuICAgIH1cblxuICAgIGxvZyhnYi5pbi51LmlzSUUpO1xuXG4gICAgaWYgKGdiLmluLnUuaXNJRSkge1xuICAgICAgXG4gICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnbm90LW1peC1ibGVuZC1tb2RlJylcbiAgICAgIFxuICAgIH07XG5cbiAgfVxuXG4gIG5vdFNhdmVJbWcoKSB7XG5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvL1xuICAgIC8vICBwY1xuICAgIC8vXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICBpZiAoZ2IuaW4udS5pc1BDKSB7XG5cbiAgICAgICQoKCk9PntcbiAgICAgICAgJChcImltZ1wiKS5vbihcImNvbnRleHRtZW51XCIsKCk9PntcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0pXG4gICAgICB9KVxuXG4gICAgfVxuXG5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvL1xuICAgIC8vICBzcCBhbmRyb2lkXG4gICAgLy9cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICB2YXIgdiA9IGdiLmluLnUuaXNBbmRyb2lkVmVyc2lvbigpO1xuXG4gICAgaWYgKHY9PXVuZGVmaW5lZCkgcmV0dXJuO1xuICAgIGlmICh2PDUpIHtcblxuICAgICAgdmFyIHRpbWVyO1xuICAgICAgJChcImltZ1wiKS5vbihcInRvdWNoc3RhcnRcIiwoKT0+e1xuICAgICAgICB0aW1lciA9IHNldFRpbWVvdXQoKCk9PntcbiAgICAgICAgICBhbGVydChcIueUu+WDj+OBr+S/neWtmOOBp+OBjeOBvuOBm+OCk1wiKVxuICAgICAgICB9LDUwMClcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSlcbiAgICAgICQoXCJpbWdcIikub24oXCJ0b3VjaGVuZFwiLCgpPT57XG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0pICAgICAgXG5cbiAgICB9XG5cbiAgfVxuXG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC9Vc2Vycy9UZXJhTWFjL0RvY3VtZW50cy8wMF9TdG9jay8xMF9iYXNlL2Zyb250ZW5kX2Jhc2VfdmVyMDIvZGV2ZWxvcG1lbnQvcHJvamVjdC1uYW1lL2Fzc2V0cy9qcy9fZGV2anMvc3JjL015TGlicy9GdW5jLmpzIiwiLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy9cbi8vICBSZWFkeU1nclxuLy9cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuaW1wb3J0IFJlYWR5UGVyY2VudCBmcm9tICcuLi8uLi9GdW5jL1JlYWR5UGVyY2VudC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlYWR5TWdyIHtcblxuICBjb25zdHJ1Y3RvcigpIHtcblxuICAgIHRoaXMuY29tcGxldGVkID0gMDtcbiAgICB0aGlzLnRvdGFsID0gMDtcbiAgICB0aGlzLmN1cnJlbnQgPSAwO1xuXG5cbiAgICB0aGlzLm9uQ29tcGxldGVkRnVuYyA9ICgpPT57fTtcblxuICAgIHRoaXMuc2V0RXZlbnRzKCk7XG5cbiAgfVxuXG4gIHNldHVwKCkge1xuXG4gICAgdGhpcy5yZWFkeVBlcmNlbnQgPSBuZXcgUmVhZHlQZXJjZW50KCk7XG5cbiAgfVxuXG4gIG9uQ29tcGxldGUoKSB7XG5cbiAgICAvLyB1cGRhdGXlh6bnkIbjgpLjgoTjgoHjgotcbiAgICBnYi5pbi51cC5yZW1vdmUoJ3JlYWR5UGVyY2VudCcsIHRoaXMucmVhZHlQZXJjZW50LnVwZGF0ZS5iaW5kKHRoaXMpKTtcblxuICAgIC8vIOa6luWCmeWujOS6huW+jOOBruWHpueQhlxuICAgIHRoaXMub25Db21wbGV0ZWRGdW5jKCk7XG5cbiAgfVxuXG4gIG9uUmVhZHkoKSB7XG5cbiAgICB0aGlzLnNldHVwKCk7XG5cbiAgfVxuICAgICAgIFxuICBzZXRFdmVudHMoKSB7XG5cbiAgICAkKGRvY3VtZW50KS5vbigncmVhZHknLCB0aGlzLm9uUmVhZHkuYmluZCh0aGlzKSk7XG5cbiAgfVxuXG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC9Vc2Vycy9UZXJhTWFjL0RvY3VtZW50cy8wMF9TdG9jay8xMF9iYXNlL2Zyb250ZW5kX2Jhc2VfdmVyMDIvZGV2ZWxvcG1lbnQvcHJvamVjdC1uYW1lL2Fzc2V0cy9qcy9fZGV2anMvc3JjL015TGlicy9FdmVudE1nci9SZWFkeU1nci5qcyIsIi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vXG4vLyAgUmVhZHlQZXJjZW50XG4vL1xuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZWFkeVBlcmNlbnQge1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuXG4gICAgdGhpcy4kbG9hZGluZyA9ICQoJyNsb2FkaW5nJyk7XG4gICAgdGhpcy4kYmFyID0gJCgnLmxvYWRpbmdCYXInKTtcbiAgICB0aGlzLiRwZXJjZW50ID0gJCgnLmxvYWRpbmdQZXJjZW50Jyk7XG5cbiAgICB0aGlzLmlzTG9jayA9IGZhbHNlO1xuICAgIHRoaXMuc2V0VGltZW91dExvY2sgPSBmYWxzZTtcblxuICAgIHRoaXMuc2V0RXZlbnRzKCk7XG5cbiAgfVxuXG4gIHVwZGF0ZSgpIHtcblxuICAgIGlmICghZ2IuaW4uY29uZi53ZWJGb250TG9hZGVkKSByZXR1cm47XG5cbiAgICB2YXIgdGFyZ2V0ID0gKGdiLmluLnJtLmNvbXBsZXRlZCAvIGdiLmluLnJtLnRvdGFsKSAqIDEwMDtcblxuICAgIGdiLmluLnJtLmN1cnJlbnQgKz0gKHRhcmdldCAtIGdiLmluLnJtLmN1cnJlbnQpICogMC4xO1xuICAgIC8vIHRoaXMuJGJhci5jc3MoeyB3aWR0aDogZ2IuaW4ucm0uY3VycmVudCArICclJyB9KTsgLy9wZXJjZW50IOS8uOOBsOOBmVxuICAgIHRoaXMuJHBlcmNlbnQudGV4dCggTWF0aC5mbG9vcihnYi5pbi5ybS5jdXJyZW50KSArICclJyk7XG5cbiAgICAvLyDntYLkuoblh6bnkIZcbiAgICBpZiAoZ2IuaW4ucm0uY3VycmVudCA+PSAxMDAgJiYgIXRoaXMuaXNMb2NrKSB7XG4gICAgICB0aGlzLmlzTG9jayA9IHRydWU7XG4gICAgICBnYi5pbi5ybS5vbkNvbXBsZXRlKCk7XG4gICAgfVxuXG4gICAgLy8gY3VycmVudCDjgYwgOTkuOSDjgojjgorlpKfjgY3jgZHjgozjgbAgMTAwIOOBqOimi+OBquOBl+OBpue1guS6huWHpueQhuOBuFxuICAgIGlmIChnYi5pbi5ybS5jdXJyZW50ID4gOTkuOSkge1xuICAgICAgZ2IuaW4ucm0uY3VycmVudCA9IDEwMDtcbiAgICB9XG5cbiAgICAvLyBpZTEx44GvLDk544Gr44Gq44Gj44Gm44CBNeenkue1jOOBo+OBpuOCgjEwMOOBp+OBquOBkeOCjOOBsOOAgeW8t+WItueahOOBq+OAgeihqOekulxuICAgIC8vIOOBneOBrumam+OAgWNvbXBsZXRl44GX44Gm54Sh44GR44KM44Gw6IOM5pmv44Gv6Z2Z5q2i55S744GrXG4gICAgLy8gaWYgKGdiLmluLnUuaXNJRTExKSB7XG5cbiAgICBpZiAoZ2IuaW4ucm0uY3VycmVudCA+IDk5ICYmICF0aGlzLnNldFRpbWVvdXRMb2NrKSB7XG4gICAgdGhpcy5zZXRUaW1lb3V0TG9jayA9IHRydWU7XG5cbiAgICBsb2coJzk5ISEhIScpO1xuICAgICAgLy8gZ2IuaW4ucm0uY3VycmVudCA9IDk5O1xuXG4gICAgICBzZXRUaW1lb3V0KCgpPT57XG5cbiAgICAgICAgbG9nKCc1ISEhJylcblxuICAgICAgICBpZiAoZ2IuaW4ucm0uY3VycmVudCAhPT0gMTAwKSB7XG5cbiAgICAgICAgICBnYi5pbi5ybS5jb21wbGV0ZWQrKztcbiAgICAgICAgICAkKCcuYmdPdmVybGF5SW1nJykuYWRkQ2xhc3MoJ2lzQWN0aXZlJyk7XG5cbiAgICAgICAgICBsb2coJ+WvvuW/nO+8ge+8gScpXG5cbiAgICAgICAgfTtcblxuICAgICAgICBcbiAgICAgIH0sNTAwMCk7XG5cbiAgICB9O1xuXG4gICAgLy8gfTtcblxuICB9XG5cbiAgcmVtb3ZlKCkge1xuXG5cbiAgICBUd2Vlbk1heFxuICAgICAgLnRvKHRoaXMuJGxvYWRpbmcsIDIuOCwge1xuICAgICAgICBzY2FsZTogMS4yLFxuICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICBlYXNlOiBQb3dlcjMuZWFzZUluT3V0LFxuICAgICAgICBvbkNvbXBsZXRlOigpPT57XG4gICAgICAgICAgdGhpcy4kbG9hZGluZy5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgICAgfSkgICAgXG5cbiAgfVxuXG4gIHNldEV2ZW50cygpIHtcblxuICAgIGdiLmluLnVwLmFkZCgncmVhZHlQZXJjZW50Jyx0aGlzLnVwZGF0ZS5iaW5kKHRoaXMpKTtcbiAgICBcbiAgfVxuXG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC9Vc2Vycy9UZXJhTWFjL0RvY3VtZW50cy8wMF9TdG9jay8xMF9iYXNlL2Zyb250ZW5kX2Jhc2VfdmVyMDIvZGV2ZWxvcG1lbnQvcHJvamVjdC1uYW1lL2Fzc2V0cy9qcy9fZGV2anMvc3JjL0Z1bmMvUmVhZHlQZXJjZW50LmpzIiwiLyoqXG4gKiBmaWxlT3ZlcnZpZXc6IOeUu+mdouabtOaWsOOCr+ODqeOCuVxuICogUHJvamVjdDpcbiAqIEZpbGU6IFVwZGF0ZU1nclxuICogRGF0ZTpcbiAqIEF1dGhvcjpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVwZGF0ZU1nciB7XG5cbiAgY29uc3RydWN0b3IoKSB7XG5cbiAgICAvL+abtOaWsOWbnuaVsFxuICAgIHRoaXMuY250ID0gMDtcblxuICAgIC8v5q+O44OV44Os44O844Og5a6f6KGM44GV44Gb44KL6Zai5pWw44KS5L+d5oyBXG4gICAgdGhpcy51cGRhdGVMaXN0ID0gW107XG5cbiAgICB0aGlzLmxlbiA9IDA7XG4gICAgdGhpcy5UaW1lciA9IG51bGw7XG4gICAgdGhpcy5pc1N0b3AgPSBmYWxzZTtcblxuICB9XG5cbiAgLyoqXG4gICAqICDlrp/ooYzjgZfjgZ/jgYTplqLmlbDjgpLnmbvpjLJcbiAgICogIGZ1bmMgOiDplqLmlbBcbiAgICovXG4gIGFkZChuYW1lLCBmdW5jKSB7XG5cbiAgICB2YXIgb2JqID0ge25hbWU6bmFtZSxmdW5jOmZ1bmN9O1xuXG4gICAgdGhpcy51cGRhdGVMaXN0LnB1c2gob2JqKTtcblxuICB9XG5cbiAgLyoqXG4gICAqICDlrp/ooYzjgZfjgZ/jgYTplqLmlbDjgpLliYrpmaRcbiAgICogIGZ1bmMgOiDplqLmlbBcbiAgICovXG4gIHJlbW92ZShuYW1lKSB7XG5cbiAgICB2YXIgdGFyZ2V0ID0ge25hbWU6bmFtZSxmdW5jOigpPT57fX07XG5cbiAgICBVcGRhdGVNZ3IuYXJyUmVtb3ZlKHRoaXMudXBkYXRlTGlzdCwgdGFyZ2V0KTtcblxuICB9XG5cbiAgLyoqXG4gICAqICDmm7TmlrAo55m76Yyy44GV44KM44Gf6Zai5pWw44Gu57eP5pWw5YiG5a6f6KGM44GZ44KLKVxuICAgKi9cbiAgdXBkYXRlKCkge1xuXG4gICAgZm9yICh2YXIgaSBpbiB0aGlzLnVwZGF0ZUxpc3QpIHRoaXMudXBkYXRlTGlzdFtpXS5mdW5jKCk7XG5cbiAgfVxuXG4gIC8qKlxuICAgKuOAgOabtOaWsOOBruWun+ihjOmWouaVsOOBruWGheWuuVxuICAgKi9cbiAgbG9vcCgpIHtcblxuICAgIHRoaXMudXBkYXRlKCk7XG4gICAgdGhpcy5jbnQrKztcblxuICAgIHRoaXMuVGltZXIgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5sb29wLmJpbmQodGhpcykpO1xuICAgIGlmICh0aGlzLmlzU3RvcCkgY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5UaW1lcik7XG4gICAgXG5cbiAgfVxuXG4gIC8qKlxuICAgKuOAgOabtOaWsOWBnOatolxuICAgKi9cbiAgc3RvcCgpIHtcblxuICAgIHRoaXMuaXNTdG9wID0gdHJ1ZTtcblxuICB9XG5cbiAgLyoqXG4gICAq44CA5pu05paw5YaN6ZaLXG4gICAqL1xuICByZXN1bWUoKSB7XG5cbiAgICB0aGlzLmlzU3RvcCA9IGZhbHNlO1xuICAgIHRoaXMubG9vcCgpO1xuXG4gIH1cblxuICAvKipcbiAgICrjgIDpnZnnmoTjg6Hjg7Pjg5DplqLmlbBcbiAgICovXG4gIHN0YXRpYyBhcnJSZW1vdmUoYXJyICwgdGFyZ2V0KSB7XG5cbiAgICB2YXIgbGVuID0gYXJyLmxlbmd0aDtcbiAgICB2YXIgY2hlY2s7XG4gICAgZm9yKCB2YXIgaSA9IDAgOyBpIDwgbGVuOyBpKysgKSB7XG4gICAgICBjaGVjayA9IGFyclsgaSBdO1xuXG4gICAgICBpZiggY2hlY2submFtZSA9PSB0YXJnZXQubmFtZSl7XG4gICAgICAgIGFyci5zcGxpY2UoIGkgLCAxICkgO1xuICAgICAgICBpLS07XG4gICAgICAgIGxlbi0tO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBhcnI7XG5cbiAgfVxuXG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC9Vc2Vycy9UZXJhTWFjL0RvY3VtZW50cy8wMF9TdG9jay8xMF9iYXNlL2Zyb250ZW5kX2Jhc2VfdmVyMDIvZGV2ZWxvcG1lbnQvcHJvamVjdC1uYW1lL2Fzc2V0cy9qcy9fZGV2anMvc3JjL015TGlicy9FdmVudE1nci9VcGRhdGVNZ3IuanMiLCIvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vL1xuLy8gIFJlc2l6ZU1nclxuLy9cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVzaXplTWdyIHtcblxuICBjb25zdHJ1Y3RvcigpIHtcblxuICAgIHRoaXMucmVzaXplTGlzdCA9IFtdO1xuICAgIHRoaXMud3MgPSB7dzowLCBoOjAsIG9sZFc6LTEsIG9sZEg6LTF9O1xuXG4gICAgdGhpcy5zZXR1cCgpO1xuXG4gIH1cblxuICBzZXR1cCgpIHtcblxuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICQod2luZG93KS5vbigncmVzaXplJywgZnVuY3Rpb24oZSl7c2VsZi5vblJlc2l6ZS5jYWxsKHNlbGYsZSk7fSk7XG4gICAgdGhpcy5nZXRXaW5kb3dTaXplKCk7XG5cbiAgfVxuXG4gIG9uUmVzaXplKGUpIHtcblxuICAgIHRoaXMuZ2V0V2luZG93U2l6ZSgpO1xuXG4gICAgZm9yICh2YXIgaSBpbiB0aGlzLnJlc2l6ZUxpc3QpIHRoaXMucmVzaXplTGlzdFtpXS5mdW5jKCk7XG5cbiAgfVxuXG4gIFcoKSB7XG5cbiAgICAgIHJldHVybiB0aGlzLndzLnc7XG4gICAgXG4gIH1cbiAgXG4gIEgoKSB7XG5cbiAgICAgIHJldHVybiB0aGlzLndzLmg7XG4gIFxuICB9XG5cbiAgZ2V0V2luZG93U2l6ZSgpe1xuXG4gICAgdmFyIHcgPSB3aW5kb3cuaW5uZXJXaWR0aCxcbiAgICAgICAgaCA9IHdpbmRvdy5pbm5lckhlaWdodDtcblxuICAgIHRoaXMud3Mub2xkVyA9IHRoaXMud3MudztcbiAgICB0aGlzLndzLm9sZEggPSB0aGlzLndzLmg7XG4gICAgdGhpcy53cy53ID0gdztcbiAgICB0aGlzLndzLmggPSBoO1xuXG4gIH1cblxuICBhZGQobmFtZSwgZnVuYykge1xuXG4gICAgdmFyIG9iaiA9IHtuYW1lOm5hbWUsZnVuYzpmdW5jfTtcblxuICAgIHRoaXMucmVzaXplTGlzdC5wdXNoKG9iaik7XG4gICAgXG4gIH1cblxuICByZW1vdmUobmFtZSkge1xuXG4gICAgUmVzaXplTWdyLmFyclJlbW92ZSh0aGlzLnJlc2l6ZUxpc3QsIG5hbWUpO1xuXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy9cbiAgLy8gIOmdmeeahOODoeODs+ODkFxuICAvL1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgc3RhdGljIGFyclJlbW92ZShhcnIgLCBuYW1lKSB7XG5cbiAgICB2YXIgbGVuID0gYXJyLmxlbmd0aDtcbiAgICB2YXIgY2hlY2s7XG4gICAgZm9yKCB2YXIgaSA9IDAgOyBpIDwgbGVuOyBpKysgKSB7XG4gICAgICBjaGVjayA9IGFyclsgaSBdO1xuXG4gICAgICBpZiggY2hlY2submFtZSA9PSBuYW1lKXtcbiAgICAgICAgYXJyLnNwbGljZSggaSAsIDEgKSA7XG4gICAgICAgIGktLTtcbiAgICAgICAgbGVuLS07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycjtcblxuICB9XG5cbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL1VzZXJzL1RlcmFNYWMvRG9jdW1lbnRzLzAwX1N0b2NrLzEwX2Jhc2UvZnJvbnRlbmRfYmFzZV92ZXIwMi9kZXZlbG9wbWVudC9wcm9qZWN0LW5hbWUvYXNzZXRzL2pzL19kZXZqcy9zcmMvTXlMaWJzL0V2ZW50TWdyL1Jlc2l6ZU1nci5qcyIsIi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vXG4vLyAgU2Nyb2xsTWdyXG4vL1xuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTY3JvbGxNZ3Ige1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuXG4gICAgdGhpcy5zY3JvbGxMaXN0ID0gW107XG4gICAgdGhpcy5zY3JvbGxFbmRMaXN0ID0gW107XG4gICAgdGhpcy53ID0gMDt0aGlzLmggPSAwO1xuICAgIHRoaXMuc3QgPSAwOyAvLyDnj77lnKjjga5zY3JvbGwgdG9wXG4gICAgdGhpcy5zYiA9IDA7IC8vIOePvuWcqOOBrnNjcm9sbCBib3R0b21cbiAgICB0aGlzLnN2ID0gMDsgLy8g54++5Zyo44Gu44K544Kv44Ot44O844Or6YePXG5cbiAgICB0aGlzLlNUQW1vdW50ID0gMDtcbiAgICB0aGlzLm9mZnNldCA9IDA7XG5cbiAgICB0aGlzLmlzU3RhcnQgPSB0cnVlO1xuXG4gICAgdGhpcy5zZXRFdmVudHMoKTtcblxuICB9XG5cbiAgc2V0dXAoKSB7XG5cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICB0aGlzLmdldFdpbmRvd1NpemUoKTtcbiAgICB0aGlzLmFkZCgnZW5kJyx0aGlzLmVuZC5iaW5kKHRoaXMpKTtcblxuICB9XG5cbiAgYWRkKG5hbWUsIGZ1bmMpIHtcblxuICAgIHZhciBvYmogPSB7bmFtZTpuYW1lLGZ1bmM6ZnVuY307XG5cbiAgICB0aGlzLnNjcm9sbExpc3QucHVzaChvYmopO1xuICAgIFxuICB9XG5cbiAgcmVtb3ZlKG5hbWUpIHtcblxuICAgIFNjcm9sbE1nci5hcnJSZW1vdmUodGhpcy5zY3JvbGxMaXN0LCBuYW1lKTtcblxuICB9XG5cbiAgcmVtb3ZlKHRhcmdldCkge1xuXG4gICAgU2Nyb2xsTWdyLmFyclJlbW92ZSh0aGlzLnNjcm9sbExpc3QsIHRhcmdldCk7XG5cbiAgfVxuXG4gIG9uUmVzaXplKGUpIHtcblxuICAgIHRoaXMuZ2V0V2luZG93U2l6ZSgpO1xuXG4gIH1cblxuICBvblNjcm9sbChlKSB7XG5cbiAgICBpZiAodGhpcy5pc1N0YXJ0KSB7XG4gICAgICB0aGlzLmlzU3RhcnQgPSBmYWxzZTtcbiAgICAgIC8vIGxvZygncmVzaXplU3RhcnQnKTtcbiAgICAgIC8vIOacgOWIneOBoOOBkeOBruWHpueQhlxuICAgIH07XG5cbiAgICB0aGlzLnN0ID0gJCh3aW5kb3cpLnNjcm9sbFRvcCgpO1xuICAgIHRoaXMuc2IgPSB0aGlzLnN0ICsgdGhpcy5oO1xuXG4gICAgZm9yICh2YXIgaSBpbiB0aGlzLnNjcm9sbExpc3QpIHRoaXMuc2Nyb2xsTGlzdFtpXS5mdW5jKCk7XG5cbiAgfVxuXG4gIG9uTW91c2VXaGVlbChlLGRlbHRhLGRlbHRhWCxkZWx0YVkpIHtcblxuICAgIHRoaXMuU1RBbW91bnQgPSBkZWx0YVk7XG4gICAgaWYgKGdiLmluLnUuaXNXaW4oKSkgdGhpcy5TVEFtb3VudCAqPSA2MDtcbiAgICBpZiAoZ2IuaW4udS5pc0ZGKCkgJiYgIWdiLmluLnUuaXNXaW4oKSkgdGhpcy5TVEFtb3VudCAqPSA2MDtcbiAgICAvLyBpZiAoTWF0aC5hYnModGhpcy5TVEFtb3VudCkgPiAxMCkgdGhpcy5TVEFtb3VudCAqPSAwLjQ7XG4gICAgdGhpcy5vZmZzZXQgKz0gdGhpcy5TVEFtb3VudDtcblxuICAgIGZvciAodmFyIGkgaW4gdGhpcy5zY3JvbGxMaXN0KSB0aGlzLnNjcm9sbExpc3RbaV0uZnVuYygpO1xuXG4gIH1cblxuICBnZXRXaW5kb3dTaXplKCl7XG5cbiAgICB0aGlzLncgPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICB0aGlzLmggPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG5cbiAgfVxuXG4gIGVuZChlKSB7XG5cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICBpZiAodGhpcy5UaW1lcikgY2xlYXJUaW1lb3V0KHRoaXMuVGltZXIpO1xuICAgIHRoaXMuVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgc2VsZi5pc1N0YXJ0ID0gdHJ1ZTtcbiAgICAgIC8vIGxvZygncmVzaXplRW5kJyk7XG5cbiAgICAgIGZvciAodmFyIGkgaW4gc2VsZi5zY3JvbGxFbmRMaXN0KSBzZWxmLnNjcm9sbEVuZExpc3RbaV0oKTtcblxuICAgIH0sIDIwMCk7XG5cbiAgfVxuXG4gIGFkZEZpeGVkT2JqZWN0U2Nyb2xsKCR0YXJnZXQpIHtcblxuICAgIHRoaXMuc2Nyb2xsTGlzdC5wdXNoKGZ1bmN0aW9uKCl7XG5cbiAgICAgICR0YXJnZXQuY3NzKFwibGVmdFwiLCAtJCh3aW5kb3cpLnNjcm9sbExlZnQoKSk7XG5cbiAgICB9KTtcblxuICB9XG5cbiAgb25SZWFkeSgpIHtcblxuICAgIHRoaXMuc2V0dXAoKTtcblxuICAgICQod2luZG93KS5vbigncmVzaXplJywgKGUpPT57dGhpcy5vblJlc2l6ZShlKTt9KTtcbiAgICAkKHdpbmRvdykub24oJ3Njcm9sbCcsIChlKT0+e3RoaXMub25TY3JvbGwoZSk7fSk7XG4gICAgJChkb2N1bWVudCkub24oJ21vdXNld2hlZWwnLCAoZSxkZWx0YSxkZWx0YVgsZGVsdGFZKT0+e3RoaXMub25Nb3VzZVdoZWVsKGUsZGVsdGEsZGVsdGFYLGRlbHRhWSk7fSk7XG5cbiAgfVxuICAgICAgIFxuICBzZXRFdmVudHMoKSB7XG5cbiAgICAkKGRvY3VtZW50KS5vbigncmVhZHknLCB0aGlzLm9uUmVhZHkuYmluZCh0aGlzKSk7XG5cbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvL1xuICAvLyAg6Z2Z55qE44Oh44Oz44OQXG4gIC8vXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBzdGF0aWMgYXJyUmVtb3ZlKGFyciAsIG5hbWUpIHtcblxuICAgIHZhciBsZW4gPSBhcnIubGVuZ3RoO1xuICAgIHZhciBjaGVjaztcbiAgICBmb3IoIHZhciBpID0gMCA7IGkgPCBsZW47IGkrKyApIHtcbiAgICAgIGNoZWNrID0gYXJyWyBpIF07XG5cbiAgICAgIGlmKCBjaGVjay5uYW1lID09IG5hbWUpe1xuICAgICAgICBhcnIuc3BsaWNlKCBpICwgMSApIDtcbiAgICAgICAgaS0tO1xuICAgICAgICBsZW4tLTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYXJyO1xuXG4gIH1cblxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvVXNlcnMvVGVyYU1hYy9Eb2N1bWVudHMvMDBfU3RvY2svMTBfYmFzZS9mcm9udGVuZF9iYXNlX3ZlcjAyL2RldmVsb3BtZW50L3Byb2plY3QtbmFtZS9hc3NldHMvanMvX2RldmpzL3NyYy9NeUxpYnMvRXZlbnRNZ3IvU2Nyb2xsTWdyLmpzIiwiLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy9cbi8vICBNb3VzZU1nclxuLy9cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTW91c2VNZ3Ige1xuXG4gIGNvbnN0cnVjdG9yKCR0YXJnZXQgPSAkKGRvY3VtZW50KSkge1xuXG4gICAgdGhpcy4kdGFyZ2V0ID0gJHRhcmdldDtcblxuICAgIHRoaXMueCA9IDA7XG4gICAgdGhpcy55ID0gMDtcblxuICAgIHRoaXMuY3ggPSAwO1xuICAgIHRoaXMuY3kgPSAwO1xuXG4gICAgdGhpcy5tb3VzZU1vdmVMaXN0ID0gW3tuYW1lOidkZWYnLGZ1bmM6KCk9Pnt9fV07XG4gICAgdGhpcy5tb3VzZU1vdmVTdGFydExpc3QgPSBbe25hbWU6J2RlZicsZnVuYzooKT0+e319XTtcbiAgICB0aGlzLm1vdXNlTW92ZUVuZExpc3QgPSBbe25hbWU6J2RlZicsZnVuYzooKT0+e319XTtcblxuICAgIHRoaXMuaXNTdGFydCA9IHRydWU7XG4gICAgdGhpcy5UaW1lciA9IG51bGw7XG4gICAgdGhpcy5lbmRUaW1lID0gMTA7XG5cbiAgICB0aGlzLnNldHVwKCk7XG4gICAgdGhpcy5zZXRFdmVudHMoKTtcblxuICB9XG5cbiAgc2V0dXAoKSB7XG5cbiAgICB0aGlzLmFkZCgnb25FbmQnLCB0aGlzLm9uRW5kLmJpbmQodGhpcykpO1xuXG4gIH1cblxuICBvblRvdWNobW92ZShlKSB7XG5cbiAgICAvLyBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICB0aGlzLnggPSBlLm9yaWdpbmFsRXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVg7IFxuICAgIHRoaXMueSA9IGUub3JpZ2luYWxFdmVudC5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWTtcblxuICB9XG5cbiAgb25Nb3VzZW1vdmUoZSkge1xuXG4gICAgLy8gbG9nKHRoaXMubW91c2VNb3ZlTGlzdCk7XG5cbiAgICBpZiAodGhpcy5pc1N0YXJ0KSB7XG4gICAgICB0aGlzLmlzU3RhcnQgPSBmYWxzZTtcblxuICAgICAgLy8g5pyA5Yid44Gg44GR44Gu5Yem55CGXG4gICAgICAvLyBsb2coJ21vdmVTdGFydCcpO1xuXG4gICAgICBmb3IgKHZhciBpIGluIHRoaXMubW91c2VNb3ZlU3RhcnRMaXN0KSB0aGlzLm1vdXNlTW92ZVN0YXJ0TGlzdFtpXS5mdW5jKCk7XG5cbiAgICB9O1xuXG4gICAgaWYgKGUub2Zmc2V0WD09dW5kZWZpbmVkKSB7IC8vIHRoaXMgd29ya3MgZm9yIEZpcmVmb3hcbiAgICAgICB0aGlzLnggPSBlLnBhZ2VYIC0gdGhpcy4kdGFyZ2V0Lm9mZnNldCgpLmxlZnQ7XG4gICAgICAgdGhpcy55ID0gZS5wYWdlWSAtIHRoaXMuJHRhcmdldC5vZmZzZXQoKS50b3A7XG4gICAgIH0gZWxzZSB7IC8vIHdvcmtzIGluIEdvb2dsZSBDaHJvbWVcbiAgICAgICB0aGlzLnggPSBlLnBhZ2VYIC0gJCh3aW5kb3cpLnNjcm9sbExlZnQoKTtcbiAgICAgICB0aGlzLnkgPSBlLnBhZ2VZIC0gJCh3aW5kb3cpLnNjcm9sbFRvcCgpO1xuICAgICB9XG5cbiAgICB0aGlzLmN4ID0gKCBlLmNsaWVudFggLSBnYi5pbi5yLlcoKS8yICk7XG4gICAgdGhpcy5jeSA9ICggZS5jbGllbnRZIC0gZ2IuaW4uci5IKCkvMiApO1xuXG4gICAgZm9yICh2YXIgaSBpbiB0aGlzLm1vdXNlTW92ZUxpc3QpIHRoaXMubW91c2VNb3ZlTGlzdFtpXS5mdW5jKCk7XG5cbiAgfVxuXG4gIG9uRW5kKGUpIHtcblxuICAgIGlmICh0aGlzLlRpbWVyKSBjbGVhclRpbWVvdXQodGhpcy5UaW1lcik7XG4gICAgdGhpcy5UaW1lciA9IHNldFRpbWVvdXQoKCk9PntcbiAgICAgIHRoaXMuaXNTdGFydCA9IHRydWU7XG5cbiAgICAgIC8vIGxvZygnbW92ZUVuZCcpO1xuXG4gICAgICBmb3IgKHZhciBpIGluIHRoaXMubW91c2VNb3ZlRW5kTGlzdCkgdGhpcy5tb3VzZU1vdmVFbmRMaXN0W2ldLmZ1bmMoKTtcblxuICAgIH0sIHRoaXMuZW5kVGltZSk7XG5cbiAgfVxuXG4gIGFkZChuYW1lLCBmdW5jKSB7XG5cbiAgICB2YXIgb2JqID0ge25hbWU6bmFtZSxmdW5jOmZ1bmN9O1xuXG4gICAgdGhpcy5tb3VzZU1vdmVMaXN0LnB1c2gob2JqKTtcbiAgICBcbiAgfVxuIFxuICBhZGRTdGFydCAobmFtZSwgZnVuYykge1xuXG4gICAgdmFyIG9iaiA9IHtuYW1lOm5hbWUsZnVuYzpmdW5jfTtcblxuICAgIHRoaXMubW91c2VNb3ZlU3RhcnRMaXN0LnB1c2gob2JqKTtcbiAgICBcbiAgfVxuXG4gIGFkZEVuZCAobmFtZSwgZnVuYykge1xuXG4gICAgdmFyIG9iaiA9IHtuYW1lOm5hbWUsZnVuYzpmdW5jfTtcblxuICAgIHRoaXMubW91c2VNb3ZlRW5kTGlzdC5wdXNoKG9iaik7XG4gICAgXG4gIH1cblxuICByZW1vdmUobmFtZSkge1xuXG4gICAgTW91c2VNZ3IuYXJyUmVtb3ZlKHRoaXMubW91c2VNb3ZlTGlzdCwgbmFtZSk7XG5cbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvL1xuICAvLyAg6Z2Z55qE44Oh44Oz44OQXG4gIC8vXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBzdGF0aWMgYXJyUmVtb3ZlKGFyciAsIG5hbWUpIHtcblxuICAgIHZhciBsZW4gPSBhcnIubGVuZ3RoO1xuICAgIHZhciBjaGVjaztcbiAgICBmb3IoIHZhciBpID0gMCA7IGkgPCBsZW47IGkrKyApIHtcbiAgICAgIGNoZWNrID0gYXJyWyBpIF07XG5cbiAgICAgIGlmKCBjaGVjay5uYW1lID09IG5hbWUpe1xuICAgICAgICBhcnIuc3BsaWNlKCBpICwgMSApIDtcbiAgICAgICAgaS0tO1xuICAgICAgICBsZW4tLTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYXJyO1xuXG4gIH1cblxuICByZW1vdmVFdmVudHMoKXtcblxuICAgIHRoaXMuJHRhcmdldC5vZmYoXCJ0b3VjaG1vdmUuTW91c2VNZ3JcIik7XG4gICAgdGhpcy4kdGFyZ2V0Lm9mZihcIm1vdXNlbW92ZS5Nb3VzZU1nclwiKTtcblxuICB9XG5cbiAgc2V0RXZlbnRzKCl7XG5cbiAgICB0aGlzLiR0YXJnZXQub24oXCJ0b3VjaG1vdmUuTW91c2VNZ3JcIiwgKGUpPT57dGhpcy5vblRvdWNobW92ZShlKTt9KTtcbiAgICB0aGlzLiR0YXJnZXQub24oXCJtb3VzZW1vdmUuTW91c2VNZ3JcIiwgKGUpPT57dGhpcy5vbk1vdXNlbW92ZShlKTt9KTtcblxuICB9XG5cbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL1VzZXJzL1RlcmFNYWMvRG9jdW1lbnRzLzAwX1N0b2NrLzEwX2Jhc2UvZnJvbnRlbmRfYmFzZV92ZXIwMi9kZXZlbG9wbWVudC9wcm9qZWN0LW5hbWUvYXNzZXRzL2pzL19kZXZqcy9zcmMvTXlMaWJzL0V2ZW50TWdyL01vdXNlTWdyLmpzIiwiLyoqXG4gKiBmaWxlT3ZlcnZpZXc6XG4gKiBQcm9qZWN0OlxuICogRmlsZTogTG9hZE1nclxuICogRGF0ZTpcbiAqIEF1dGhvcjpcbiAqL1xuXG5pbXBvcnQgTG9hZGVyIGZyb20gJy4vTG9hZGVyLmpzJztcbmltcG9ydCBTZWMwMVZpZGVvIGZyb20gJy4uL0Rpc3BsYXkvVUkvU2VjMDFWaWRlby5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExvYWRNZ3Ige1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuXG4gIH1cblxuICBzdGFydCgpIHtcblxuICAgIC8vIOOBneOBruS7llxuICAgIC8vIOOCveODvOOCt+ODo+ODq+OCueOCr+ODquODl+ODiOOBquOBqVxuICAgIC8vIHRoaXMuc25zU2NyaXB0KCk7XG5cbiAgICAvLyB0aGlzLmxvYWRZb3V0dWJlU2NyaXB0KCk7XG5cbiAgICAvLyBzZWN0aW9uMDLjgafkvb/jgYblpKfph4/jga7nlLvlg4/jgpLjg63jg7zjg4kgLy8gd2ViIHdvcmtlcuOBquOBqeOCguS9v+OBo+OBplxuICAgIC8vIHRoaXMuc2VjMDJJbWcoKTtcblxuICAgIC8vIHRoaXMud2ViRm9udCgpO1xuXG4gIH1cblxuICBsb2FkWW91dHViZVNjcmlwdCgpIHtcblxuICAgIHZhciBsb2FkZXIgPSBuZXcgTG9hZGVyKCk7XG5cbiAgICB2YXIgbGVuID0gMTtcbiAgICBnYi5pbi5ybS50b3RhbCArPSBsZW47IC8vIGxvYWTmlbDjga50b3RhbOOCkuioiOeul1xuICAgIGlmIChnYi5pbi51LmlzU1ApIGdiLmluLnJtLmNvbXBsZXRlZCsrO1xuXG4gICAgdmFyIGNiID0gKCk9PntcblxuICAgICAgZ2IuaW4ucm0uY29tcGxldGVkKys7XG5cbiAgICB9XG5cbiAgICBsb2FkZXIueW91dHViZUlmcmFtZVNjcmlwdChjYik7XG5cbiAgfVxuXG4gIHNlYzAySW1nKCkge1xuXG4gICAgLy8gYmdWaWRlb1RpbGXnlKjjga7pgKPnlarnlLvlg4/jga7oqq3jgb/ovrzjgb9cbiAgICBnYi5pbi5sb2FkU2VjMDJJbWcgPSB0aGlzLmxvYWRlciA9IG5ldyBMb2FkZXIoKTtcblxuICAgIGlmIChnYi5pbi51LmlzUEMpIHtcbiAgICAgIHZhciBsZW4gPSBnYi5pbi5jb25mLnNlYzAySW1nTnVtO1xuICAgICAgZ2IuaW4ucm0udG90YWwgKz0gbGVuO+OAgC8vIGxvYWTmlbDjga50b3RhbOOCkuioiOeul1xuICAgICAgdmFyIHBhdGggPSAnL3Byb2plY3QtbmFtZS9hc3NldHMvcmVzb3VyY2UvaW1nL21vdmllL2JnSW1nLyc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBsZW4gPSAxOTtcbiAgICAgIGdiLmluLnJtLnRvdGFsICs9IGxlbjvjgIAvLyBsb2Fk5pWw44GudG90YWzjgpLoqIjnrpdcbiAgICAgIHZhciBwYXRoID0gJy9wcm9qZWN0LW5hbWUvYXNzZXRzL3Jlc291cmNlL2ltZy9tb3ZpZS9iZ0ltZ1NQLyc7XG4gICAgfVxuXG4gICAgdmFyIGNiID0gKCk9PntcbiAgICAgIC8vIGdiLmluLlNlYzAyQmcuY3JlYXRlKCk7XG4gICAgfVxuICAgIHZhciBjYjAyID0gKCk9PntcbiAgICAgIGdiLmluLnJtLmNvbXBsZXRlZCsrO1xuICAgIH1cblxuICAgIC8vIHRoaXMubG9hZGVyLmltZ1NlcmlhbExvYWQobGVuLHBhdGgsJ3RmbnlfJyxjYixjYjAyKTtcbiAgICB0aGlzLmxvYWRlci5pbWcobGVuKzEscGF0aCwndGZueV8nLGNiLGNiMDIpO1xuXG4gIH1cblxuICBzZWN0aW9uMDRQcm9kdWN0U2hhZGVyKCkge1xuXG4gICAgdmFyIHNoYWRlcnMgPSBbXTtcbiAgICB2YXIgc2hhZGVyTG9hZExpc3QgPSBbXG4gICAgICAgICAgICAgICAgICAgICAgIC8vIGdiLkNsb2NrLFxuICAgICAgICAgICAgICAgICAgICAgICAvLyBnYi5Db2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgLy8gZ2IuUGxhc21hLFxuICAgICAgICAgICAgICAgICAgICAgICAvLyBnYi5TZXBpYSxcbiAgICAgICAgICAgICAgICAgICAgICAgLy8gZ2IuTW9zYWljLFxuICAgICAgICAgICAgICAgICAgICAgICBnYi5ab29tQmx1cixcbiAgICAgICAgICAgICAgICAgICAgICAgZ2IuWm9vbUJsdXIsXG4gICAgICAgICAgICAgICAgICAgICAgIGdiLlRyYW5zaXRpb24wMixcbiAgICAgICAgICAgICAgICAgICAgIF07XG5cbiAgICB2YXIgbGVuID0gc2hhZGVyTG9hZExpc3QubGVuZ3RoO1xuICAgIGdiLmluLnJtLnRvdGFsICs9IGxlbjsgLy8gbG9hZOaVsOOBrnRvdGFs44KS6KiI566XXG5cbiAgICB2YXIgc2hhZGVyU2VyaWFsTG9hZCA9IChsZW4sIGNiKT0+e1xuXG4gICAgICAgIHZhciBzaGFkZXIsY250PTA7XG5cbiAgICAgICAgdmFyIGxvYWQgPSAoaSk9PntcbiAgICAgICAgICBzaGFkZXIgPSBuZXcgc2hhZGVyTG9hZExpc3RbaV0oY29tcCk7XG4gICAgICAgICAgc2hhZGVycy5wdXNoKHNoYWRlcik7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGNvbXAgPSBmdW5jdGlvbigpe1xuICAgICAgICAgIGNudCsrO1xuICAgICAgICAgIGdiLmluLnJtLmNvbXBsZXRlZCsrO1xuICAgICAgICAgIGlmKGNudCA9PSBsZW4pIGNiKHNoYWRlcnMpO1xuICAgICAgICAgIGVsc2UgbG9hZChjbnQpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGxvYWQoY250KTtcblxuICAgIH1cblxuICAgIHNoYWRlclNlcmlhbExvYWQoc2hhZGVyTG9hZExpc3QubGVuZ3RoLChzaGFkZXJzKT0+e1xuXG4gICAgICB0aGlzLnNoYWRlcnMgPSBzaGFkZXJzO1xuICAgICAgdGhpcy5zZWN0aW9uMDRQcm9kdWN0SW1nKCk7XG5cbiAgICB9KVxuXG4gIH1cblxuICBzZWN0aW9uMDRQcm9kdWN0SW1nKCkge1xuXG4gICAgdmFyIHRleHR1cmVMaXN0ID0gW1xuICAgICAgJy9wcm9qZWN0LW5hbWUvYXNzZXRzL3Jlc291cmNlL2ltZy9wcm9kdWN0L3RpZmZhbnlfaGFuZDEuanBnJyxcbiAgICAgICcvcHJvamVjdC1uYW1lL2Fzc2V0cy9yZXNvdXJjZS9pbWcvcHJvZHVjdC9icm93bi5wbmcnLFxuICAgICAgJy9wcm9qZWN0LW5hbWUvYXNzZXRzL3Jlc291cmNlL2ltZy9wcm9kdWN0L2JsdWUucG5nJyxcbiAgICAgICcvcHJvamVjdC1uYW1lL2Fzc2V0cy9yZXNvdXJjZS9pbWcvcHJvZHVjdC93aGl0ZS5wbmcnLFxuICAgICAgJy9wcm9qZWN0LW5hbWUvYXNzZXRzL3Jlc291cmNlL2ltZy9wcm9kdWN0L3RpZmZhbnlibHVlLnBuZycsXG4gICAgICAnL3Byb2plY3QtbmFtZS9hc3NldHMvcmVzb3VyY2UvaW1nL3Byb2R1Y3QvcGluay5wbmcnLFxuICAgIF07ICAgICAgXG4gICAgdGhpcy50ZXh0dXJlcyA9IFtdO1xuXG4gICAgdmFyIGxlbiA9IHRleHR1cmVMaXN0Lmxlbmd0aDtcbiAgICBnYi5pbi5ybS50b3RhbCArPSBsZW47IC8vIGxvYWTmlbDjga50b3RhbOOCkuioiOeul1xuXG4gICAgdmFyIHRleHR1cmVTZXJpYWxMb2FkID0gKGxlbiwgY2IpPT57XG5cbiAgICAgIHZhciB0ZXh0dXJlLGNudD0wO1xuXG4gICAgICB2YXIgbG9hZCA9IChpKT0+e1xuICAgICAgICB0ZXh0dXJlID0gVEhSRUUuSW1hZ2VVdGlscy5sb2FkVGV4dHVyZSh0ZXh0dXJlTGlzdFtpXSwgbnVsbCAsY29tcCk7XG4gICAgICAgIHRoaXMudGV4dHVyZXMucHVzaCh0ZXh0dXJlKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBjb21wID0gZnVuY3Rpb24oKXtcbiAgICAgICAgY250Kys7XG4gICAgICAgIGdiLmluLnJtLmNvbXBsZXRlZCsrO1xuICAgICAgICBpZihjbnQgPT0gbGVuKSBjYigpO1xuICAgICAgICBlbHNlIGxvYWQoY250KTtcbiAgICAgIH07XG5cbiAgICAgIGxvYWQoY250KTtcblxuICAgIH1cblxuICAgIHRleHR1cmVTZXJpYWxMb2FkKHRleHR1cmVMaXN0Lmxlbmd0aCwgKCk9PnskKHdpbmRvdykudHJpZ2dlcignb25TZWN0aW9uMDRQcm9kdWN0SW1nJyk7fSk7XG5cbiAgfVxuXG4gIHdlYkZvbnQoKSB7XG5cbiAgICAvLyB3ZWIgZm9udCBsb2FkZXLnlKhwYXJhbVxuICAgIHZhciBjb25maWcgPSB7XG4gICAgICBjdXN0b206IHtcbiAgICAgICAgZmFtaWxpZXM6IFtcbiAgICAgICAgICAnQ29ybW9yYW50JyxcbiAgICAgICAgICAnUm9ib3RvIENvbmRlbnNlZCdcbiAgICAgICAgICAvLyAnTm90byBTYW5zIEphcGFuZXNlJyxcbiAgICAgICAgICAvLyAnUm9ib3RvJyxcbiAgICAgICAgICAvLyAnQWxlZ3JleWEgU2FucycsXG4gICAgICAgICAgLy8gJ0FsZWdyZXlhIFNhbnMgU0MnXG4gICAgICAgICAgXSxcbiAgICAgICAgdXJsczogW1xuICAgICAgICAgICdodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9Q29ybW9yYW50OjUwMCw1MDBpfFJvYm90bytDb25kZW5zZWQnXG4gICAgICAgICAgLy8gJy9wcm9qZWN0LW5hbWUvYXNzZXRzL2Nzcy9mb250LmNzcycsXG4gICAgICAgICAgLy8gJ2h0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1Sb2JvdG86NDAwLDUwMCwzMDAnLFxuICAgICAgICAgIC8vICdodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9QWxlZ3JleWErU2Fuczo0MDAsMTAwJyxcbiAgICAgICAgICAvLyAnaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PUFsZWdyZXlhK1NhbnMrU0M6NDAwLDMwMCwxMDAnXG4gICAgICAgICAgXVxuICAgICAgfSxcbiAgICAgIGFjdGl2ZTogZnVuY3Rpb24oKSB7IFxuICAgICAgICAgIFxuICAgICAgICAgIGxvZygnd2ViRm9udCEhISEnKTtcbiAgICAgICAgICBnYi5pbi5jb25mLndlYkZvbnRMb2FkZWQgPSB0cnVlO1xuXG4gICAgICB9IFxuICAgIH07XG5cbiAgICB2YXIgbG9hZGVyID0gbmV3IExvYWRlcigpOyAgIFxuICAgIGxvYWRlci53ZWJGb250KGNvbmZpZyk7XG5cbiAgfVxuXG4gIG9uRW5kKCkge1xuXG5cbiAgfVxuXG4gIHNldEV2ZW50cygpIHtcblxuXG4gICAgXG4gIH1cblxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvVXNlcnMvVGVyYU1hYy9Eb2N1bWVudHMvMDBfU3RvY2svMTBfYmFzZS9mcm9udGVuZF9iYXNlX3ZlcjAyL2RldmVsb3BtZW50L3Byb2plY3QtbmFtZS9hc3NldHMvanMvX2RldmpzL3NyYy9GdW5jL0xvYWRNZ3IuanMiLCIvKipcbiAqIGZpbGVPdmVydmlldzpcbiAqIFByb2plY3Q6XG4gKiBGaWxlOiBMb2FkZXJcbiAqIERhdGU6XG4gKiBBdXRob3I6XG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTG9hZGVyIHtcblxuICBjb25zdHJ1Y3RvcigpIHtcblxuICAgIHRoaXMubGlzdCA9IFtdO1xuICAgIHRoaXMuY250ID0gMDtcblxuICB9XG5cbiAganNvbihzcmMsY2IpIHtcblxuICAgICQuZ2V0SlNPTihzcmMsIChkYXRhKT0+e1xuXG4gICAgICBjYihkYXRhKTtcblxuICAgIH0pO1xuXG4gIH1cblxuICBpbWcobGVuLCBwYXRoLCBuYW1lLCBjYj0oKT0+e30sIGNiMDI9KCk9Pnt9KXtcblxuICAgIHZhciBpLCBpbWcsIG50aCwgY250ID0gMSwgbGlzdCA9IFtdO1xuXG4gICAgZm9yKGkgPSAxO2kgPCBsZW47aSsrKXtcbiAgICAgIGltZyA9IG5ldyBJbWFnZSgpO1xuICAgICAgbnRoID0gZ2IuaW4udS5hZGQwKGksLTUpO1xuICAgICAgdGhpcy5saXN0LnB1c2goaW1nKTtcbiAgICAgIGltZy5vbmxvYWQgPSAoKT0+e1xuICAgICAgICBjYjAyKCk7XG4gICAgICAgIGNudCsrO1xuICAgICAgICBpZihjbnQgPT0gbGVuKSBjYigpO1xuICAgICAgfVxuICAgICAgaW1nLnNyYyA9IHBhdGgrbmFtZStudGgrXCIuanBnXCI7XG4gICAgfVxuXG4gIH1cblxuICAvLyBjYjAyIGxvYWTlrozkuobmmYIg6YO95bqm6YO95bqm55So44Kz44O844Or44OQ44OD44Kv6Zai5pWwXG4gIGltZ1NlcmlhbExvYWQobGVuLCBwYXRoLCBuYW1lLCBjYj0oKT0+e30sY2IwMj0oKT0+e30pe1xuXG4gICAgdmFyIGksIGltZywgbnRoLCBjbnQgPSAwLCBsaXN0ID0gW107XG5cbiAgICB2YXIgbG9hZCA9IChpKT0+e1xuICAgICAgICBpbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgbnRoID0gZ2IuaW4udS5hZGQwKGksLTUpO1xuICAgICAgICB0aGlzLmxpc3QucHVzaChpbWcpO1xuICAgICAgICBpbWcub25sb2FkID0gKCk9PntcbiAgICAgICAgICBjYjAyKCk7XG4gICAgICAgICAgY29tcCgpO1xuICAgICAgICB9XG4gICAgICAgIGltZy5zcmMgPSBwYXRoK25hbWUrbnRoK1wiLmpwZ1wiO1xuICAgIH07XG5cbiAgICB2YXIgY29tcCA9ICgpPT57XG4gICAgICAgIGNudCsrO1xuICAgICAgICBpZihjbnQgPT0gbGVuKXtcbiAgICAgICAgICBjYigpO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICBsb2FkKGNudCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgbG9hZChjbnQpO1xuICB9XG5cbiAgYWpheEltZ0xvYWQoY2Ipe1xuXG4gICAgdmFyIGltZ051bSA9ICQoJ2ltZycpLmxlbmd0aDtcbiAgICB2YXIgY250ID0gMDtcblxuICAgICQoJ2ltZycpLmVhY2goZnVuY3Rpb24oaSwgZWxtKSB7XG5cbiAgICAgICAgdmFyIGltZyA9IG5ldyBJbWFnZSgpO1xuICAgICAgICBpbWcub25sb2FkID0gKCk9PntcbiAgICAgICAgICBjbnQrKztcbiAgICAgICAgICBpZiAoY250PT1pbWdOdW0tMSkge1xuICAgICAgICAgICAgY2IoKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGltZy5zcmMgPSBlbG0uc3JjO1xuXG4gICAgfSk7XG5cbiAgfVxuXG4gIHZpZGVvKHNyYywgY2I9KCk9Pnt9KSB7XG5cbiAgICB2YXIgaXNMb2FkID0gZmFsc2U7XG4gICAgdGhpcy52aWRlbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3ZpZGVvJyk7XG5cbiAgICB2YXIgdHlwZSA9IHRoaXMuc3VwcG9ydFZpZGVvRXh0KHRoaXMudmlkZW8pO1xuICAgIGlmICh0eXBlID09IFwiXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnZpZGVvLmFkZEV2ZW50TGlzdGVuZXIoXCJjYW5wbGF5XCIsICgpPT57XG5cbiAgICAgIGlmICghdGhpcy5pc0xvYWQpIHtcbiAgICAgICAgdGhpcy5pc0xvYWQgPSB0cnVlO1xuICAgICAgICB0aGlzLnZpZGVvLmxvb3AgPSB0cnVlO1xuICAgICAgICB0aGlzLnZpZGVvLnBsYXkoKTtcbiAgICAgICAgY2IoKTtcbiAgICAgIH1cblxuICAgIH0sZmFsc2UpO1xuXG4gICAgLy8g44Ot44O844OJXG4gICAgdGhpcy52aWRlby5zcmMgPSBzcmM7XG5cbiAgfVxuXG4gIHlvdXR1YmVJZnJhbWVTY3JpcHQoY2IpIHtcblxuICAgIC8vIElGcmFtZSBQbGF5ZXIgQVBJIOOBruiqreOBv+i+vOOBv1xuICAgIHZhciB0YWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICB0YWcub25sb2FkID0gKCk9PntcblxuICAgICAgY2IoKTtcblxuICAgIH07XG5cbiAgICAvLyB0YWcuc3JjID0gXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS9pZnJhbWVfYXBpXCI7XG4gICAgdGFnLnNyYyA9IFwiaHR0cDovL3d3dy55b3V0dWJlLmNvbS9pZnJhbWVfYXBpXCI7XG4gICAgdmFyIGZpcnN0U2NyaXB0VGFnID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpWzBdO1xuICAgIGZpcnN0U2NyaXB0VGFnLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRhZywgZmlyc3RTY3JpcHRUYWcpO1xuXG5cbiAgICAvLyBZb3VUdWJl5YuV55S7XG4gICAgd2luZG93Lm9uWW91VHViZUlmcmFtZVJlYWR5ID0gZnVuY3Rpb24oKSB7XG4gICAgICBcbiAgICAgIHdpbmRvdy5jb25zb2xlLmxvZygneW91dHViZXJlYWR5Jyk7XG5cblxuICAgIH1cblxuICB9XG5cbiAgc3VwcG9ydFZpZGVvRXh0KCkge1xuXG4gICAgdmFyIGV4dCA9IFwiXCI7XG4gICAgaWYgKHRoaXMudmlkZW8uY2FuUGxheVR5cGUoXCJ2aWRlby93ZWJtXCIpID09IFwicHJvYmFibHlcIiB8fCB0aGlzLnZpZGVvLmNhblBsYXlUeXBlKFwidmlkZW8vd2VibVwiKSA9PSBcIm1heWJlXCIpIHtcbiAgICAgIGV4dCA9IFwid2VibVwiO1xuICAgIH0gZWxzZSBpZih0aGlzLnZpZGVvLmNhblBsYXlUeXBlKFwidmlkZW8vbXA0XCIpID09IFwicHJvYmFibHlcIiB8fCB0aGlzLnZpZGVvLmNhblBsYXlUeXBlKFwidmlkZW8vbXA0XCIpID09IFwibWF5YmVcIikge1xuICAgICAgZXh0ID0gXCJtcDRcIjtcbiAgICB9IGVsc2UgaWYodGhpcy52aWRlby5jYW5QbGF5VHlwZShcInZpZGVvL29nZ1wiKSA9PSBcInByb2JhYmx5XCIgfHwgdGhpcy52aWRlby5jYW5QbGF5VHlwZShcInZpZGVvL29nZ1wiKSA9PSBcIm1heWJlXCIpIHtcbiAgICAgIGV4dCA9IFwib2dnXCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIGV4dDtcblxuICB9XG5cbiAgLy9XZWJGb25044Gu44Ot44O844OA44O8566h55CGXG4gIHdlYkZvbnQoY29uZmlnKSB7XG5cbiAgICAvLyB3ZWIgZm9udCBsb2FkZXLnlKhqc+OBrmFwcGVuZFxuICAgIHZhciB3ZiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgIHdmLnNyYyA9ICgnaHR0cHM6JyA9PSBkb2N1bWVudC5sb2NhdGlvbi5wcm90b2NvbCA/ICdodHRwcycgOiAnaHR0cCcpICtcbiAgICAgICc6Ly9hamF4Lmdvb2dsZWFwaXMuY29tL2FqYXgvbGlicy93ZWJmb250LzEvd2ViZm9udC5qcyc7XG4gICAgd2YudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnO1xuICAgIHdmLmFzeW5jID0gJ3RydWUnO1xuICAgIHZhciBzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpWzBdO1xuICAgIHMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUod2YsIHMpO1xuXG4gICAgdmFyIGFnYWluID0gKCk9PntcblxuICAgICAgLy8geXQucGxheWVy44GMbG9hZOOBleOCjOOBpuOBhOOBquOBhOWgtOWQiOOCkuiAg+aFruOBl+OBplxuICAgICAgaWYoKHR5cGVvZiBXZWJGb250ICE9PSBcInVuZGVmaW5lZFwiKSAmJiBXZWJGb250KSB7XG5cbiAgICAgICAgICBXZWJGb250LmxvYWQoY29uZmlnKTtcblxuICAgICAgfWVsc2V7XG5cbiAgICAgICAgICBzZXRUaW1lb3V0KGFnYWluLCAxMDApO1xuXG4gICAgICB9XG5cbiAgICB9XG5cbiAgICBhZ2FpbigpOyAgICBcblxuICB9XG5cbiAgb25Mb2FkZWQoKSB7XG5cbiAgICAkKCdodG1sJykuY3NzKCdvcGFjaXR5JywgJzEnKTtcblxuICB9XG5cbiAgc2V0RXZlbnRzKGxlbikge1xuXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgJCh3aW5kb3cpLm9uKCdsb2FkZWQnLCAoZXZlbnQpPT57XG4gICAgICBcbiAgICAgIHNlbGYuY250Kys7XG4gICAgICBpZiAoc2VsZi5jbnQgPT0gbGVuKSBvbkxvYWRlZCgpO1xuXG4gICAgfSk7XG4gICAgICBcbiAgfSBcblxuXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL1VzZXJzL1RlcmFNYWMvRG9jdW1lbnRzLzAwX1N0b2NrLzEwX2Jhc2UvZnJvbnRlbmRfYmFzZV92ZXIwMi9kZXZlbG9wbWVudC9wcm9qZWN0LW5hbWUvYXNzZXRzL2pzL19kZXZqcy9zcmMvRnVuYy9Mb2FkZXIuanMiLCIvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vL1xuLy8gIFNlYzAxVmlkZW9cbi8vXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5pbXBvcnQgWW91dHViZUZvclNlYzAxIGZyb20gJy4vWW91dHViZUZvclNlYzAxLmpzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VjMDFWaWRlbyB7XG5cbiAgY29uc3RydWN0b3IocGFyYW0pe1xuXG4gICAgLy8gc2VjMDF2aWRlb+eUqFxuICAgIGdiLmluLnJtLnRvdGFsKys7XG4gICAgaWYgKGdiLmluLnUuaXNTUCkgZ2IuaW4ucm0uY29tcGxldGVkKys7XG5cbiAgICBpZiAoZ2IuaW4udS5pc1BDKSB0aGlzLnNldHVwKCk7XG4gICAgdGhpcy5zZXRFdmVudHMoKTtcblxuICB9XG5cbiAgc2V0dXAoKSB7XG5cbiAgICAvLyBjcmVhdGVcbiAgICB0aGlzLnZpZGVvID0gbmV3IFlvdXR1YmVGb3JTZWMwMSgnc2VjMDFWaWRlbycsIGdiLmluLmNvbmYueW91dHViZUlEMDEsIG51bGwpO1xuICAgIFxuICB9XG5cbiAgc2V0RXZlbnRzKCkge1xuXG5cbiAgfVxuXG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC9Vc2Vycy9UZXJhTWFjL0RvY3VtZW50cy8wMF9TdG9jay8xMF9iYXNlL2Zyb250ZW5kX2Jhc2VfdmVyMDIvZGV2ZWxvcG1lbnQvcHJvamVjdC1uYW1lL2Fzc2V0cy9qcy9fZGV2anMvc3JjL0Rpc3BsYXkvVUkvU2VjMDFWaWRlby5qcyIsIi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vXG4vLyAgWW91dHViZUZvclNlYzAxXG4vL1xuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5pbXBvcnQgRnVsbFNpemUgZnJvbSAnLi4vLi4vTXlMaWJzL0Rpc3BsYXkvTGF5b3V0L0Z1bGxTaXplLmpzJztcbmltcG9ydCBUb3BUaW1lIGZyb20gJy4uLy4uL0Rpc3BsYXkvVUkvVG9wVGltZS5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFlvdXR1YmVGb3JTZWMwMSB7XG5cbiAgY29uc3RydWN0b3IoaWQsdmlkZW9JRCx2aWRlb0xpc3QpIHtcblxuICAgIHRoaXMucGxheWVyID0gbnVsbDtcblxuICAgIHRoaXMuaXNGaXJzdCA9IHRydWU7XG4gICAgdGhpcy5pc1NlZWtMb2NrID0gZmFsc2U7XG4gICAgdGhpcy5pc1NlZWtMb2NrMDIgPSBmYWxzZTtcblxuICAgIHRoaXMuc2V0dXAoaWQsdmlkZW9JRCx2aWRlb0xpc3QpO1xuXG4gIH1cblxuICBzZXR1cChpZCx2aWRlb0lELHZpZGVvTGlzdCkge1xuXG4gICAgLy8geXQucGxheWVy77+977+9bG9hZO+/ve+/ve+/ve+/vcak77+977+9yqTvv73vv73vv73vv73PpPK/vJFd77+977+977+977+9XG4gICAgaWYoKHR5cGVvZiBZVCAhPT0gXCJ1bmRlZmluZWRcIikgJiYgWVQgJiYgWVQuUGxheWVyKXtcblxuICAgICAgICAvLyBjcmVhdGVcbiAgICAgICAgdGhpcy5wbGF5ZXIgPSBuZXcgWVQuUGxheWVyKGlkLCB7XG4gICAgICAgICAgICB3aWR0aDogJzEwMCUnLCAvLyDvv73Xpe+/vWDvv73vv71g77+9zrfvv71cbiAgICAgICAgICAgIGhlaWdodDogJzEwMCUnLCAvLyDvv73Xpe+/vWDvv73vv71g77+9zrjfpO+/vVxuICAgICAgICAgICAgdmlkZW9JZDogdmlkZW9JRCwgLy8gWW91VHViZe+/ve+/vUlEXG4gICAgICAgICAgICBldmVudHM6IHtcbiAgICAgICAgICAgICAgJ29uUmVhZHknOiB0aGlzLm9uUmVhZHkuYmluZCh0aGlzKSwgLy8g77+916Xvv71g77+977+9YO+/vc6cyoLkpKzvv73HpO+/ve+/ve+/ve+/vcik77+977+9y4xn77+977+9XG4gICAgICAgICAgICAgICdvblN0YXRlQ2hhbmdlJzogdGhpcy5vblBsYXllclN0YXRlQ2hhbmdlLmJpbmQodGhpcylcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwbGF5ZXJWYXJzOiB7XG4gICAgICAgICAgICAgIGF1dG9wbGF5OiAxLFxuICAgICAgICAgICAgICBjb250cm9sczogMCxcbiAgICAgICAgICAgICAgc2hvd2luZm86IDAsXG4gICAgICAgICAgICAgIGF1dG9oaWRlOiAxLFxuICAgICAgICAgICAgICByZWw6IDAsXG4gICAgICAgICAgICAgIGVuYWJsZWpzYXBpOiAxLFxuICAgICAgICAgICAgICBpdl9sb2FkX3BvbGljeTogMyxcbiAgICAgICAgICAgICAgZGlzYWJsZWtiOjEsXG4gICAgICAgICAgICAgIG1vZGVzdGJyYW5kaW5nOiAxLFxuICAgICAgICAgICAgICBzdGFydDogMixcbiAgICAgICAgICAgICAgbG9vcDogMSxcbiAgICAgICAgICAgICAgLy8gcGxheWxpc3Q6IHZpZGVvTGlzdFxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBsYXlvdXRcbiAgICAgICAgdmFyIGwgPSBuZXcgRnVsbFNpemUoJCgnI2JnV3JhcCcpLCQoJyNzZWMwMVZpZGVvJyksMCwnRnVsbFNpemVTZWMwMVZpZGVvJyk7XG4gICAgICAgIGwudGFyZ2V0RGVmVyA9IDE5MjA7XG4gICAgICAgIGwudGFyZ2V0RGVmSCA9IDEwODA7XG4gICAgICAgIGwucnVuKCk7XG5cbiAgICB9ZWxzZXtcblxuICAgICAgICBzZXRUaW1lb3V0KHRoaXMuc2V0dXAuYmluZCh0aGlzLGlkLHZpZGVvSUQsdmlkZW9MaXN0KSwgMTAwKTtcblxuICAgIH1cblxuXG4gIH1cblxuICBvblJlYWR5IChlKSB7XG5cbiAgICAvLyDvv73fve+/ve+/ve+/vcik77+9XG4gICAgZS50YXJnZXQuc2V0UGxheWJhY2tRdWFsaXR5KCdoaWdocmVzJyk7XG5cbiAgICAvLyB0aGlzLnBsYXllci5wbGF5VmlkZW8oKTtcbiAgICB0aGlzLnNldEV2ZW50cygpO1xuXG4gICAgLy8gcGxheVxuICAgIGdiLmluLnRpbWUgPSBuZXcgVG9wVGltZSgpO1xuICAgIGdiLmluLnNlYzAxVmlkZW8udmlkZW8ucGxheUJ5TllUaW1lKCk7XG5cbiAgfVxuXG4gIG9uUGxheWVyU3RhdGVDaGFuZ2UgKGUpIHtcblxuICAgIHZhciBzdGF0dXMgPSBlLmRhdGE7XG5cbiAgICAvLyDvv73vv73vv73vv73vv71L77+9y6Tvv73vv73vv73vv73IpO+/vSAwXG4gICAgaWYgKHN0YXR1cyA9PSB3aW5kb3cuWVQuUGxheWVyU3RhdGUuRU5ERUQpIHtcbiAgICAgXG4gICAgICAgIC8vIO+/vdO777+977+977+977+977+9XG4gICAgICAgIHRoaXMucGxheWVyLnBsYXlWaWRlbygpO1xuICAgICAgICBcbiAgICB9XG5cbiAgICAvLyAvLyDvv73vv73vv73vv73vv73QpM6kyKTvv70gMVxuICAgIGlmIChzdGF0dXMgPT0gd2luZG93LllULlBsYXllclN0YXRlLlBMQVlJTkcpIHtcblxuICAgICAgaWYgKHRoaXMuaXNGaXJzdCkge1xuICAgICAgICB0aGlzLmlzRmlyc3QgPSBmYWxzZTtcbiAgICAgICAgZ2IuaW4ucm0uY29tcGxldGVkKys7XG4gICAgICB9XG5cbiAgICAgIC8vIGUudGFyZ2V0LnBhdXNlVmlkZW8oKTtcblxuICAgIH1cblxuICAgIC8vIC8vIM2j1rnvv73QpM6kyKTvv70gMlxuICAgIC8vIGlmIChzdGF0dXMgPT0gd2luZG93LllULlBsYXllclN0YXRlLlBBVVNFRCkge1xuICAgIC8vICAgICBjb25zb2xlLmxvZygnzaPWue+/ve+/vScpO1xuICAgIC8vIH1cblxuICAgIC8vIC8vIO+/vdClw6XVpe+/ve+/ve+/ve+/ve+/vdCkzqTIpO+/vSAzXG4gICAgLy8gaWYgKHN0YXR1cyA9PSB3aW5kb3cuWVQuUGxheWVyU3RhdGUuQlVGRkVSSU5HKSB7XG4gICAgLy8gICAgIGNvbnNvbGUubG9nKCfvv73QpcOl1aXvv73vv73vv73vv73vv73vv70nKTtcbiAgICAvLyB9XG5cbiAgICAvLyAvLyDvv71e77+977+977+977+977+9Z++/vd+kzqTIpO+/vSA1IDXvv73vv73Wue+/vd6k77+9yKTvv73vv73vv73vv73rpKvvv73poaLvv73vv73vv73vv73vv73HpO+/vXBsYXlcbiAgICBpZiAoc3RhdHVzID09IHdpbmRvdy5ZVC5QbGF5ZXJTdGF0ZS5DVUVEKSB7XG5cbiAgICAgICAgdGhpcy5wbGF5QnlOWVRpbWUoKTtcblxuICAgIH1cblxuXG4gICAgLy8gZm9yIHNhZmFyaSDvv73Vpe+/ve+/ve+/ve+/veulte+/ve+/ve+/ve+/ve+/vdik77+977+977+9XG4gICAgaWYgKGdiLmluLnUuaXNTYWZhcmkoKSAmJiBzdGF0dXMgPT0gd2luZG93LllULlBsYXllclN0YXRlLkJVRkZFUklORykgdGhpcy5wbGF5ZXIuc2Vla1RvKHRoaXMucGxheWVyLmdldEN1cnJlbnRUaW1lKCkgKyAwLjEpO1xuXG4gIH1cblxuICBwbGF5QnlOWVRpbWUoKSB7XG5cbiAgICB2YXIgaCA9IGdiLmluLnRpbWUubnlIO1xuXG4gICAgaWYgKGggPj0gNSAmJiBoIDwgMTMpIHtcblxuICAgICAgdGhpcy5wbGF5ZXIuc2Vla1RvKDApO1xuXG4gICAgfSBlbHNlIGlmIChoID49IDEzICYmIGggPCAxOCkge1xuXG4gICAgICB0aGlzLnBsYXllci5zZWVrVG8oMzYpO1xuXG4gICAgfSBlbHNlIHtcblxuICAgICAgdGhpcy5wbGF5ZXIuc2Vla1RvKDY2KTtcblxuICAgIH1cblxuICAgIHRoaXMucGxheWVyLnBsYXlWaWRlbygpO1xuXG5cbiAgfVxuXG4gIG9uU2VlaygpIHtcblxuICAgIHZhciBub3cgPSB0aGlzLnBsYXllci5nZXRDdXJyZW50VGltZSgpOyAgICBcblxuICAgIGlmIChub3cgPCAxLjApIHtcbiAgICAgIHRoaXMuaXNTZWVrTG9jayA9IGZhbHNlO1xuICAgICAgdGhpcy5pc1NlZWtMb2NrMDIgPSBmYWxzZTtcbiAgICB9O1xuXG4gICAgaWYgKG5vdyA+IDkwICYmICF0aGlzLmlzU2Vla0xvY2spIHtcbiAgICB0aGlzLmlzU2Vla0xvY2sgPSB0cnVlO1xuXG4gICAgICBUd2Vlbk1heC50bygkKCcuYmdPdmVybGF5SW1nJyksIDMuMCwge1xuICAgICAgICAgIG9wYWNpdHk6IDEsIFxuICAgICAgICAgIGVhc2U6UG93ZXIzLmVhc2VJbk91dCxcbiAgICAgICAgfSlcblxuICAgIH1cbiAgICBcbiAgICBpZiAobm93ID4gMS4wICYmICF0aGlzLmlzU2Vla0xvY2swMikge1xuICAgIHRoaXMuaXNTZWVrTG9jazAyID0gdHJ1ZTtcblxuICAgICAgVHdlZW5NYXgudG8oJCgnLmJnT3ZlcmxheUltZycpLCAzLjAsIHtcbiAgICAgICAgICBvcGFjaXR5OiAwLCBcbiAgICAgICAgICBlYXNlOlBvd2VyMy5lYXNlSW5PdXQsXG4gICAgICAgIH0pXG5cbiAgICB9XG4gICAgXG4gIH1cblxuICBzZXRFdmVudHMoKSB7XG5cbiAgICBnYi5pbi51cC5hZGQoJ1lvdXR1YmVGb3JTZWMwMScsdGhpcy5vblNlZWsuYmluZCh0aGlzKSk7XG5cbiAgfVxuXG4gIHJlbW92ZUV2ZW50cygpIHtcblxuICAgIGdiLmluLnVwLnJlbW92ZSgnWW91dHViZUZvclNlYzAxJyk7XG5cbiAgfVxuXG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC9Vc2Vycy9UZXJhTWFjL0RvY3VtZW50cy8wMF9TdG9jay8xMF9iYXNlL2Zyb250ZW5kX2Jhc2VfdmVyMDIvZGV2ZWxvcG1lbnQvcHJvamVjdC1uYW1lL2Fzc2V0cy9qcy9fZGV2anMvc3JjL0Rpc3BsYXkvVUkvWW91dHViZUZvclNlYzAxLmpzIiwiLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy9cbi8vICBGdWxsU2l6ZVxuLy9cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRnVsbFNpemUge1xuXG4gIGNvbnN0cnVjdG9yKCRXcmFwLCRUYXJnZXQsbW9kZSwgbmFtZSkge1xuXG4gICAgdGhpcy4kd3JhcCA9ICRXcmFwO1xuICAgIHRoaXMuJHRhcmdldCA9ICRUYXJnZXQ7XG5cbiAgICB0aGlzLlcgPSB0aGlzLiR3cmFwLndpZHRoKCk7XG4gICAgdGhpcy5IID0gdGhpcy4kd3JhcC5oZWlnaHQoKTtcbiAgICB0aGlzLnRhcmdldFc7XG4gICAgdGhpcy50YXJnZXRIO1xuICAgIHRoaXMudGFyZ2V0RGVmVztcbiAgICB0aGlzLnRhcmdldERlZkg7XG4gICAgdGhpcy5yYXRpb1c7XG4gICAgdGhpcy5yYXRpbztcbiAgICB0aGlzLm1sO1xuICAgIHRoaXMubXQ7XG5cbiAgICB0aGlzLm1vZGUgPSBtb2RlIHx8IDA7XG4gICAgdGhpcy5uYW1lID0gbmFtZSB8fCAnZnVsbHNpemUnO1xuXG4gICAgLy8gdGhpcy5pbml0KCk7XG4gICAgLy8gdGhpcy5ydW4oKTtcbiAgICB0aGlzLnNldEV2ZW50cygpO1xuXG4gIH1cblxuICBzZXRTdHlsZSgpIHtcblxuICAgIHRoaXMuJHdyYXAuY3NzKHtcbiAgICAgICdvdmVyZmxvdyc6ICdoaWRkZW4nLFxuICAgIH0pO1xuICAgIHRoaXMuJHRhcmdldC5jc3MoJ3Bvc2l0aW9uJywgJ2Fic29sdXRlJyk7XG5cbiAgfVxuXG4gIGdldERlZigpIHtcblxuICAgIHRoaXMudGFyZ2V0RGVmVyA9IHRoaXMuJHRhcmdldC5nZXQoMCkuY2xpZW50V2lkdGggfHwgdGhpcy4kdGFyZ2V0LmdldCgwKS53aWR0aCB8fCB0aGlzLiR0YXJnZXQud2lkdGgoKSxcbiAgICB0aGlzLnRhcmdldERlZkggPSB0aGlzLiR0YXJnZXQuZ2V0KDApLmNsaWVudEhlaWdodCB8fCB0aGlzLiR0YXJnZXQuZ2V0KDApLmhlaWdodCAgfHwgdGhpcy4kdGFyZ2V0LmhlaWdodCgpO1xuXG4gIH1cblxuICBnZXRTaXplKCkge1xuXG4gICAgdGhpcy5XID0gdGhpcy4kd3JhcC53aWR0aCgpO1xuICAgIHRoaXMuSCA9IHRoaXMuJHdyYXAuaGVpZ2h0KCk7IFxuXG4gICAgdGhpcy5yYXRpb1cgPSB0aGlzLkggLyB0aGlzLlc7XG4gICAgdGhpcy5yYXRpbyA9IHRoaXMudGFyZ2V0RGVmSCAvIHRoaXMudGFyZ2V0RGVmVyxcblxuICAgIHRoaXMubWwgPSAtICh0aGlzLnRhcmdldERlZlcgKiAodGhpcy5IIC8gdGhpcy50YXJnZXREZWZIKSkgLyAyO1xuICAgIHRoaXMubXQgPSAtICh0aGlzLnRhcmdldERlZkggKiAodGhpcy5XIC8gdGhpcy50YXJnZXREZWZXKSkgLyAyO1xuXG4gIH1cblxuICBzZXRQb3MoKXtcblxuICAgICAgaWYgKHRoaXMubW9kZSA9PSAnY292ZXInIHx8IHRoaXMubW9kZSA9PSAwKSB7XG5cbiAgICAgICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAvLyAg5p6g44Gr44OU44OD44K/44Oq44Gr44Gq44KL44KI44GG44GrIGJhY2tncm91bmQtc2l6ZSBjb3ZlclxuICAgICAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICAgICAgaWYgKHRoaXMucmF0aW9XID4gdGhpcy5yYXRpbykge1xuXG4gICAgICAgICAgdmFyIHcgPSAodGhpcy5IIC8gdGhpcy50YXJnZXREZWZIKSAqIHRoaXMudGFyZ2V0RGVmVztcblxuICAgICAgICAgICAgdGhpcy4kdGFyZ2V0XG4gICAgICAgICAgICAgIC5jc3MoeydoZWlnaHQnOiB0aGlzLkh9KVxuICAgICAgICAgICAgICAuY3NzKHsnbWFyZ2luLXRvcCc6IDAsJ21hcmdpbi1sZWZ0JzogdGhpcy5tbCwndG9wJzowLCdsZWZ0JzonNTAlJywnd2lkdGgnOnd9KTtcblxuICAgICAgICB9IGVsc2UgaWYgKCB0aGlzLnJhdGlvVyA8PSB0aGlzLnJhdGlvKSB7XG5cbiAgICAgICAgICAgIHZhciBoID0gKHRoaXMuVyAvIHRoaXMudGFyZ2V0RGVmVykgKiB0aGlzLnRhcmdldERlZkg7XG5cbiAgICAgICAgICAgIHRoaXMuJHRhcmdldFxuICAgICAgICAgICAgICAuY3NzKHsnd2lkdGgnOiB0aGlzLld9KVxuICAgICAgICAgICAgICAuY3NzKHsnbWFyZ2luLXRvcCc6IHRoaXMubXQsJ21hcmdpbi1sZWZ0JzogMCwndG9wJzonNTAlJywnbGVmdCc6MCwnaGVpZ2h0JzpofSk7XG5cbiAgICAgICAgfVxuXG4gICAgICB9IGVsc2UgaWYgKHRoaXMubW9kZSA9PSAnY29udGFpbicgfHwgdGhpcy5tb2RlID09IDEpe1xuXG4gICAgICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgLy8gIOaeoOWGheOBq+ODlOODg+OCv+ODquWPjuOBvuOCi+OCiOOBhuOBqyBiYWNrZ3JvdW5kLXNpemUgY29udGFpblxuICAgICAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICAgICAgaWYgKHRoaXMucmF0aW9XIDwgdGhpcy5yYXRpbykge1xuXG4gICAgICAgICAgICB0aGlzLiR0YXJnZXRcbiAgICAgICAgICAgICAgLmNzcyh7J2hlaWdodCc6IHRoaXMuSH0pXG4gICAgICAgICAgICAgIC5jc3MoeydtYXJnaW4tdG9wJzogMCwnbWFyZ2luLWxlZnQnOiB0aGlzLm1sLCd0b3AnOjAsJ2xlZnQnOic1MCUnLCd3aWR0aCc6J2F1dG8nfSk7XG5cbiAgICAgICAgfSBlbHNlIGlmICggdGhpcy5yYXRpb1cgPj0gdGhpcy5yYXRpbykge1xuXG4gICAgICAgICAgICB0aGlzLiR0YXJnZXRcbiAgICAgICAgICAgICAgLmNzcyh7J3dpZHRoJzogdGhpcy5XfSlcbiAgICAgICAgICAgICAgLmNzcyh7J21hcmdpbi10b3AnOiB0aGlzLm10LCdtYXJnaW4tbGVmdCc6IDAsJ3RvcCc6JzUwJScsJ2xlZnQnOjAsJ2hlaWdodCc6J2F1dG8nfSk7XG5cbiAgICAgICAgfVxuXG4gICAgICB9IFxuXG4gIH1cblxuICBpbml0KCkge1xuXG4gICAgdGhpcy5nZXREZWYoKTtcblxuICB9XG5cbiAgcnVuKCkge1xuXG4gICAgdGhpcy5zZXRTdHlsZSgpO1xuICAgIHRoaXMuZ2V0U2l6ZSgpO1xuICAgIHRoaXMuc2V0UG9zKCk7XG5cbiAgfVxuXG4gIHNldEV2ZW50cygpIHtcblxuICAgIGdiLmluLnIuYWRkKHRoaXMubmFtZSwgdGhpcy5ydW4uYmluZCh0aGlzKSk7XG5cbiAgfVxuXG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC9Vc2Vycy9UZXJhTWFjL0RvY3VtZW50cy8wMF9TdG9jay8xMF9iYXNlL2Zyb250ZW5kX2Jhc2VfdmVyMDIvZGV2ZWxvcG1lbnQvcHJvamVjdC1uYW1lL2Fzc2V0cy9qcy9fZGV2anMvc3JjL015TGlicy9EaXNwbGF5L0xheW91dC9GdWxsU2l6ZS5qcyIsIi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vXG4vLyAgVG9wVGltZVxuLy9cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLy8gNTAwcHjku6XkuIvjgavjgarjgaPjgZ/jgonooajnpLpcbi8vICAg5pmC6KiIY291bnRcbi8vICAgY2FudmFz6KGo56S6XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRvcFRpbWUge1xuXG4gIGNvbnN0cnVjdG9yKCl7XG5cbiAgICB0aGlzLiR0YXJnZXQgPSAkKCcudGltZVdyYXAnKTtcbiAgICB0aGlzLiRoMDEgPSB0aGlzLiR0YXJnZXQuZmluZCgnLmgwMScpO1xuICAgIHRoaXMuJGgwMiA9IHRoaXMuJHRhcmdldC5maW5kKCcuaDAyJyk7XG4gICAgdGhpcy4kbTAxID0gdGhpcy4kdGFyZ2V0LmZpbmQoJy5tMDEnKTtcbiAgICB0aGlzLiRtMDIgPSB0aGlzLiR0YXJnZXQuZmluZCgnLm0wMicpO1xuXG4gICAgdGhpcy5ueUggPSAwO1xuXG4gICAgdGhpcy5pc0FsZXJ0ID0gKGdiLmluLnIud3MuaCA8IDUwMCk/IHRydWU6IGZhbHNlO1xuXG4gICAgdGhpcy5kaXMgPSAxNDsgLy/mmYLlt65cblxuICAgIHRoaXMuc2V0dXAoKTtcbiAgICB0aGlzLnJ1bigpO1xuICAgIHRoaXMuc2V0RXZlbnRzKCk7XG5cbiAgfVxuXG4gIHNldHVwKCkge1xuXG4gICAgZ2IuaW4udS50aW1lKCk7XG4gICAgdmFyIGggPSBnYi5pbi51LmhvdXIgLSB0aGlzLmRpcztcbiAgICBpZiAoaDwwKSBoID0gMjQgKyBoO1xuICAgIHRoaXMubnlIID0gaDtcblxuICB9XG5cbiAgdXBkYXRlKCkge1xuXG4gICAgLy8g6ZaT5byV44GNXG4gICAgaWYgKGdiLmluLnVwLmNudCU2MCE9PTApIHJldHVybjtcblxuXG4gICAgZ2IuaW4udS50aW1lKCk7XG5cbiAgICB2YXIgaCA9IGdiLmluLnUuaG91ciAtIHRoaXMuZGlzO1xuICAgIGlmIChoPDApIGggPSAyNCArIGg7XG5cbiAgICB0aGlzLm55SCA9IGg7XG5cbiAgICBoID0gZ2IuaW4udS5hZGQwKGgpLnNwbGl0KCcnKTtcbiAgICB2YXIgbSA9IGdiLmluLnUuYWRkMChnYi5pbi51Lm1pbnV0ZSkuc3BsaXQoJycpO1xuICAgIHZhciBzID0gZ2IuaW4udS5hZGQwKGdiLmluLnUuc2Vjb25kKS5zcGxpdCgnJyk7XG5cbiAgICB0aGlzLiRoMDEudGV4dChoWzBdKVxuICAgIHRoaXMuJGgwMi50ZXh0KGhbMV0pXG4gICAgdGhpcy4kbTAxLnRleHQobVswXSlcbiAgICB0aGlzLiRtMDIudGV4dChtWzFdKVxuXG4gICAgLy8gdGhpcy4kaDAxLnRleHQoc1swXSlcbiAgICAvLyB0aGlzLiRoMDIudGV4dChzWzFdKVxuICAgIC8vIHRoaXMuJG0wMS50ZXh0KHNbMF0pO1xuICAgIC8vIHRoaXMuJG0wMi50ZXh0KHNbMV0pO1xuXG4gIH1cblxuICBydW4oKSB7XG5cbiAgICBnYi5pbi51cC5hZGQoJ1RvcFRpbWUnLCB0aGlzLnVwZGF0ZS5iaW5kKHRoaXMpKTtcblxuICAgIC8vIOOCs+ODs+ODnuOBruihqOekuumdnuihqOekulxuICAgIHZhciB0bCA9IG5ldyBUaW1lbGluZU1heCh7cmVwZWF0OiAtMX0pO1xuXG4gICAgdGxcbiAgICAgIC5zZXQodGhpcy4kdGFyZ2V0LmZpbmQoJy5jb2xvbicpLCB7b3BhY2l0eTogMH0pXG4gICAgICAudG8odGhpcy4kdGFyZ2V0LmZpbmQoJy5jb2xvbicpLCAwLjUsIHtvcGFjaXR5OiAxLGVhc2U6IFBvd2VyMi5lYXNlSW5PdXR9KVxuICAgICAgLnRvKHRoaXMuJHRhcmdldC5maW5kKCcuY29sb24nKSwgMC41LCB7b3BhY2l0eTogMCxlYXNlOiBQb3dlcjIuZWFzZUluT3V0fSlcblxuICB9XG5cbiAgc2V0RXZlbnRzKCkge1xuXG5cblxuICB9XG5cbiAgcmVtb3ZlRXZlbnRzKCkge1xuXG4gICAgZ2IuaW4udXAucmVtb3ZlKCdUb3BUaW1lJyk7XG5cbiAgfVxuXG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC9Vc2Vycy9UZXJhTWFjL0RvY3VtZW50cy8wMF9TdG9jay8xMF9iYXNlL2Zyb250ZW5kX2Jhc2VfdmVyMDIvZGV2ZWxvcG1lbnQvcHJvamVjdC1uYW1lL2Fzc2V0cy9qcy9fZGV2anMvc3JjL0Rpc3BsYXkvVUkvVG9wVGltZS5qcyIsIi8qKlxuICogZmlsZU92ZXJ2aWV3OiDnkrDlooPliKTlrprjgq/jg6njgrko44OH44OQ44Kk44K544CB44OW44Op44Km44K2KeOAgeWQhOWIpOWumuODoeOCveODg+ODieips+e0sOOBr0RldmljZS5qc+OCkuWPgueFp1xuICogUHJvamVjdDpcbiAqIEZpbGU6IEp1ZGdlRW52aXJvbm1lbnRcbiAqIERhdGU6XG4gKiBBdXRob3I6XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBKdWRnZUVudmlyb25tZW50IHtcblxuICBjb25zdHJ1Y3RvcigpIHtcblxuXG4gICAgdGhpcy5zZXR1cCgpO1xuICAgIHRoaXMuc2V0RXZlbnRzKCk7XG4gXG4gIH1cblxuICBzZXR1cCgpIHtcblxuICAgIC8vIOODh+ODkOOCpOOCueWIpOWumlxuICAgIGdiLmluLnUuaXNEZXZpY2VTUCgpO1xuICAgIGdiLmluLnUuaXNEZXZpY2VUQUIoKTtcbiAgICBnYi5pbi51LmlzRGV2aWNlTUIoKTtcbiAgICBnYi5pbi51LmlzRGV2aWNlUEMoKTtcblxuICAgIC8vIOODluODqeOCpuOCtuODkOODvOOCuOODp+ODs+WIpOWumlxuICAgIGdiLmluLnUuaXNJRVZlcnNpb24oKTtcblxuICAgIC8vIHJlc3BvbnNpdmUgLyBwb3J0cmFpdCAvIGxhbmRzY2FwZVxuICAgIGdiLmluLnUuaXNEaXJlY3Rpb24oKTtcbiAgICBnYi5pbi51LmlzUmVzcG9uc2l2ZShnYi5pbi5jb25mLmJwKTtcbiAgICBnYi5pbi5yLmFkZCgnaXNEaXJlY3Rpb24nLCBnYi5pbi51LmlzRGlyZWN0aW9uLmJpbmQoZ2IuaW4udSkpO1xuICAgIGdiLmluLnIuYWRkKCdpc1Jlc3BvbnNpdmUnLCBnYi5pbi51LmlzUmVzcG9uc2l2ZS5iaW5kKGdiLmluLnUsIGdiLmluLmNvbmYuYnApKTtcblxuICB9XG5cbiAgb25SZWFkeSgpIHtcblxuICAgIHRoaXMuc2V0dXAoKTtcblxuICB9XG4gICAgICAgXG4gIHNldEV2ZW50cygpIHtcblxuXG4gIH1cblxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC9Vc2Vycy9UZXJhTWFjL0RvY3VtZW50cy8wMF9TdG9jay8xMF9iYXNlL2Zyb250ZW5kX2Jhc2VfdmVyMDIvZGV2ZWxvcG1lbnQvcHJvamVjdC1uYW1lL2Fzc2V0cy9qcy9fZGV2anMvc3JjL0Z1bmMvSnVkZ2VFbnZpcm9ubWVudC5qcyIsIi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vXG4vLyAgUmVzcG9uc2l2ZVN3aXRjaEltZ1xuLy9cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVzcG9uc2l2ZVN3aXRjaEltZyB7XG5cbiAgY29uc3RydWN0b3IoKSB7XG5cbiAgICB0aGlzLnNldHVwKCk7XG4gICAgdGhpcy5ydW4oKTtcbiAgICB0aGlzLnNldEV2ZW50cygpO1xuXG4gIH1cblxuICBzZXR1cCgpIHtcblxuICAgIHRoaXMuaXNQQ0xvY2sgPSAoZ2IuaW4udS5pc1Jlc1BDKT8gZmFsc2U6IHRydWU7XG4gICAgdGhpcy5pc1NQTG9jayA9IChnYi5pbi51LmlzUmVzU1ApPyBmYWxzZTogdHJ1ZTtcblxuICAgIHRoaXMuJHRhcmdldCA9ICQoJy5yZXNwb25zaXZlSW1nJyk7XG5cbiAgfVxuXG4gIHJ1biAoKSB7XG5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyAg44OW44Os44Kk44Kv44Od44Kk44Oz44OI44KI44KK44KCc3DlgbRcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBpZiAoZ2IuaW4udS5pc1Jlc1NQICYmICF0aGlzLmlzU1BMb2NrKSB7XG4gICAgICB0aGlzLmlzUENMb2NrID0gZmFsc2U7XG4gICAgICB0aGlzLmlzU1BMb2NrID0gdHJ1ZTtcblxuICAgICAgbG9nKDExKTtcblxuICAgICAgdGhpcy4kdGFyZ2V0LmVhY2goZnVuY3Rpb24oaW5kZXgsIGVsKSB7XG4gICAgICAgIFxuICAgICAgICB2YXIgc3JjID0gJCh0aGlzKS5hdHRyKCdzcmMnKTtcbiAgICAgICAgc3JjID0gZ2IuaW4udS5zdHJSZXBsYWNlKHNyYywgJ19wYycsICdfc3AnKTtcbiAgICAgICAgJCh0aGlzKS5vZmYoJ2xvYWQnKTtcbiAgICAgICAgJCh0aGlzKS5vbignbG9hZCcsIChldmVudCk9PntcblxuICAgICAgICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKCdzcFNpemUnKSkgZ2IuaW4udS5zZXRJbWdTUFNpemUoJCh0aGlzKSk7XG5cbiAgICAgICAgfSk7XG4gICAgICAgICQodGhpcykuYXR0cignc3JjJyxzcmMpO1xuXG4gICAgICAgIC8vICQodGhpcykuYXR0cignc3JjJyxzcmMpO1xuICAgICAgICAvLyBpZiAoJCh0aGlzKS5oYXNDbGFzcygnc3BTaXplJykpIGdiLmluLnUuc2V0SW1nU1BTaXplKCQodGhpcykpO1xuXG4gICAgICB9KTtcblxuICAgICAgLy8gcmVzcG9uc2l2ZWltZ+OBjOOBpOOBhOOBpuOBquOBhOOCguOBruOBp+OAgXNwU2l6ZeOBjOOBpOOBhOOBpuOCi+OCguOBruOBrzEvMlxuICAgICAgZ2IuaW4udS5zZXRJbWdTUFNpemUoJCgnLnNwU2l6ZScpLm5vdCgnLnJlc3BvbnNpdmVJbWcnKSk7XG5cbiAgICB9IFxuXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gIOODluODrOOCpOOCr+ODneOCpOODs+ODiOOCiOOCiuOCgnBj5YG0XG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgaWYgKGdiLmluLnUuaXNSZXNQQyAmJiAhdGhpcy5pc1BDTG9jaykge1xuICAgICAgdGhpcy5pc1BDTG9jayA9IHRydWU7XG4gICAgICB0aGlzLmlzU1BMb2NrID0gZmFsc2U7XG5cbiAgICAgIGxvZygyMik7XG5cbiAgICAgIHRoaXMuJHRhcmdldC5lYWNoKGZ1bmN0aW9uKGluZGV4LCBlbCkge1xuICAgICAgICBcbiAgICAgICAgdmFyIHNyYyA9ICQodGhpcykuYXR0cignc3JjJyk7XG4gICAgICAgIHNyYyA9IGdiLmluLnUuc3RyUmVwbGFjZShzcmMsICdfc3AnLCAnX3BjJyk7XG5cbiAgICAgICAgJCh0aGlzKS5hdHRyKHt3aWR0aDogJ2F1dG8nLGhlaWdodDogJ2F1dG8nfSk7XG4gICAgICAgICQodGhpcykuYXR0cignc3JjJyxzcmMpO1xuXG4gICAgICB9KTtcblxuICAgICAgLy8gcmVzcG9uc2l2ZWltZ+OBjOOBpOOBhOOBpuOBquOBhOOCguOBruOBp+OAgXNwU2l6ZeOBjOOBpOOBhOOBpuOCi+OCguOBruOBr2F1dG/jgatcbiAgICAgICQoJy5zcFNpemUnKS5ub3QoJy5yZXNwb25zaXZlSW1nJykuYXR0cih7d2lkdGg6ICdhdXRvJyxoZWlnaHQ6ICdhdXRvJ30pO1xuXG4gICAgICAvLyBzcOOBr+OBquOBnOOBi2xvYWTjgqTjg5njg7Pjg4jjgYzlkbzjgbDjgozjgarjgYTjga7jgafjgIHjgZPjgaPjgaHjgaflh6bnkIZcbiAgICAgIC8vIGlmIChnYi5pbi51LmlzU1ApICQoJy5yZXNwb25zaXZlSW1nJykuYXR0cih7d2lkdGg6ICdhdXRvJyxoZWlnaHQ6ICdhdXRvJ30pO1xuXG4gICAgfVxuXG4gIH1cbiAgICAgICBcbiAgcmVzdW1lKCkge1xuXG4gICAgLy8gbG9nKCdyZXN1bWUnKTtcblxuICAgIHRoaXMuc2V0dXAoKTtcbiAgICB0aGlzLnJ1bigpO1xuXG4gICAgZ2IuaW4uci5yZW1vdmUoJ3Jlc3BvbnNpdmVTd2l0Y2hJbWcnKTtcbiAgICBnYi5pbi5yLmFkZCgncmVzcG9uc2l2ZVN3aXRjaEltZycsIHRoaXMucnVuLmJpbmQodGhpcykpO1xuXG4gIH1cbiAgICAgICBcbiAgc2V0RXZlbnRzKCkge1xuXG4gICAgZ2IuaW4uci5hZGQoJ3Jlc3BvbnNpdmVTd2l0Y2hJbWcnLCB0aGlzLnJ1bi5iaW5kKHRoaXMpKTtcblxuICB9XG5cbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL1VzZXJzL1RlcmFNYWMvRG9jdW1lbnRzLzAwX1N0b2NrLzEwX2Jhc2UvZnJvbnRlbmRfYmFzZV92ZXIwMi9kZXZlbG9wbWVudC9wcm9qZWN0LW5hbWUvYXNzZXRzL2pzL19kZXZqcy9zcmMvRnVuYy9fZXZlbnRzL1Jlc3BvbnNpdmVTd2l0Y2hJbWcuanMiLCIvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vXG4vLyAgU3dpcGVUcmFuc2l0aW9uIHNzc1xuLy9cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTd2lwZVRyYW5zaXRpb24ge1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gIGRvbVxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIHRoaXMuJHN0YXJ0V3JhcCA9ICQoJy5zZWN0aW9uMDEsIC5zZWN0aW9uMDIgLm5leHQsIC5zZWN0aW9uMDMgLmJveDA1Jyk7XG4gICAgLy8gdGhpcy4kc3RhcnRXcmFwID0gJCgnLnNlY3Rpb24wMicpO1xuICAgIHRoaXMuJHN0YXJ0V3JhcCA9ICQod2luZG93KTtcbiAgICB0aGlzLiRlbmRXcmFwID0gJCh3aW5kb3cpO1xuXG4gICAgdGhpcy5wYWdlTGlzdCA9IHtcbiAgICAgICd0b3AnOiAwLFxuICAgICAgJ21vdmllJzogMSxcbiAgICAgICdpbnRlcnZpZXcnOiAyLFxuICAgICAgJ2hpc3RvcnknOiAzLFxuICAgIH1cblxuICAgIC8vIHZhcmlhYmxlXG4gICAgdGhpcy5jdXJyZW50ID0gMDtcbiAgICB0aGlzLm9sZCA9IG51bGw7XG4gICAgdGhpcy5uZXh0ID0gMTtcbiAgICB0aGlzLnByZXYgPSBudWxsO1xuICAgIHRoaXMubGVuID0gNDtcblxuICAgIHRoaXMuaXNMb2NrID0gZmFsc2U7XG5cblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLVxuICAgIC8vICB2YXJpYWJsZVxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLVxuXG4gICAgLy8gcG9zaXRpb25cbiAgICB0aGlzLnNYID0gMDt0aGlzLm1YID0gMDt0aGlzLmVYID0gMDsgLy9zdGFydFgsbW92ZVgsZW5kWFxuICAgIHRoaXMuZGlzID0gMDt0aGlzLm1pbkRpcyA9IDE1O1xuXG4gICAgLy8gdGltZVxuICAgIHRoaXMuc1Q9MDt0aGlzLmVUPTA7dGhpcy5taW5UID0gMzAwOyAvL3N0YXJ0VGltZSxlbGxhcHNlZFRpbWUsXG5cbiAgICB0aGlzLlcgPSBnYi5pbi5yLlcoKTtcblxuICAgIHRoaXMub25Ub3VjaExvbmcgPSAoKT0+e307XG4gICAgdGhpcy5vblRvdWNoU3RhcnRDQiA9ICgpPT57fTtcbiAgICB0aGlzLm9uVG91Y2hFbmRDQiA9ICgpPT57fTtcblxuICAgIHRoaXMuc2V0dXAoKTtcbiAgICB0aGlzLnNldEV2ZW50cygpO1xuXG4gIH1cblxuICBzZXR1cCgpIHtcblxuICB9XG5cbiAgb25Ub3VjaFN0YXJ0IChlKSB7XG5cbiAgICAvLyB0YXJnZXRYXG4gICAgdmFyIHkgPSBlLm9yaWdpbmFsRXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVk7XG4gICAgdGhpcy5zWSA9IHk7XG5cbiAgICB0aGlzLnN0ID0gZ2IuaW4ucy5zdDtcbiAgICB0aGlzLnNiID0gZ2IuaW4ucy5zYjtcbiAgICBsb2coJ3N5Jyx5KVxuXG4gIH1cblxuICBvblRvdWNoTW92ZSAoZSkge1xuXG4gICAgLy8gdGFyZ2V0WFxuICAgIHZhciB5ID0gZS5vcmlnaW5hbEV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VZO1xuICAgIHRoaXMubVkgPSB5O1xuXG4gIH1cblxuICBvblRvdWNoRW5kIChlKSB7XG5cbiAgICBpZiAodGhpcy5pc0xvY2spIHJldHVybjsgICAgXG5cbiAgICB2YXIgeSA9IGUub3JpZ2luYWxFdmVudC5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWTtcbiAgICB0aGlzLmVZID0geTtcblxuICAgIHZhciBkaXMgPSB0aGlzLnNZIC0gdGhpcy5lWTtcbiAgICB2YXIgYWJzRGlzID0gTWF0aC5hYnMoZGlzKTtcblxuICAgIC8vIOacgOWwj+i3nembouOCiOOCiumVt+OBi+OBo+OBn+OCieOAgeWHpueQhlxuICAgIGlmKCB0aGlzLm1pbkRpcyA8IGFic0Rpcykge1xuXG4gICAgICAvLyDjg5rjg7zjgrjnlarlj7fjgpLlj5blvpdcbiAgICAgIHRoaXMuY3VycmVudCA9IHRoaXMucGFnZUxpc3RbZ2IuaW4ucGpheC5pZF07XG5cbiAgICAgIGlmIChkaXMgPiAwKSB7XG5cbiAgICAgICAgdmFyIGggPSAkKCcuc2VjdGlvbicpLmhlaWdodCgpKmdiLmluLkxheW91dC5zaXplLnNjYWxlLnJhdGU7XG4gICAgICAgIGxvZyh0aGlzLnNiLGgtMTAsdGhpcy5zYiA8IGgtMTApO1xuXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnQhPT0wICYmIHRoaXMuc2IgPCBoLTEwKSByZXR1cm47XG4gICAgICAgIC8vIGhpc3Rvcnnjg5rjg7zjgrjjga7loLTlkIjjga/lh6bnkIbjgZfjgarjgYRcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudD09MykgcmV0dXJuO1xuXG4gICAgICAgIHRoaXMuY2FsY3VsYXRlT3JkZXIoJ25leHQnKTtcblxuICAgICAgICAvLyDjgZfjgZ/jgbhcbiAgICAgICAgdmFyIHBhZ2VOYW1lID0gT2JqZWN0LmtleXModGhpcy5wYWdlTGlzdCkuZmlsdGVyKCAoa2V5KSA9PiB7IHJldHVybiB0aGlzLnBhZ2VMaXN0W2tleV0gPT09IHRoaXMuY3VycmVudCB9KVswXTtcbiAgICAgICAgJCgnLnBqYXhUb18nK3BhZ2VOYW1lKS50cmlnZ2VyKCdjbGljaycpO1xuXG4gICAgICB9IGVsc2Uge1xuXG4gICAgICAgIGxvZyh0aGlzLnN0LHRoaXMuc3QgIT09IDApO1xuXG4gICAgICAgIGlmICh0aGlzLnN0ICE9PSAwKSByZXR1cm47XG5cbiAgICAgICAgLy8g5LiK44G4XG4gICAgICAgIHRoaXMuY2FsY3VsYXRlT3JkZXIoJ3ByZXYnKTtcblxuICAgICAgICB2YXIgcGFnZU5hbWUgPSBPYmplY3Qua2V5cyh0aGlzLnBhZ2VMaXN0KS5maWx0ZXIoIChrZXkpID0+IHsgcmV0dXJuIHRoaXMucGFnZUxpc3Rba2V5XSA9PT0gdGhpcy5jdXJyZW50IH0pWzBdO1xuICAgICAgICAkKCcucGpheFRvXycrcGFnZU5hbWUpLnRyaWdnZXIoJ2NsaWNrJyk7XG5cbiAgICAgIH1cblxuXG4gICAgfVxuXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vICBibHVy6Kej6ZmkXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLVxuICAgIHRoaXMuaXNOb3RUb3VjaCA9IHRydWU7XG5cbiAgICAvLyDjgrPjg7zjg6vjg5Djg4Pjgq9cbiAgICB0aGlzLm9uVG91Y2hFbmRDQigpO1xuXG4gIH1cblxuICBjYWxjdWxhdGVPcmRlcihkaXIpIHtcblxuICAgIHRoaXMub2xkID0gdGhpcy5jdXJyZW50O1xuXG4gICAgaWYgKGRpcj09J25leHQnKSB7XG5cbiAgICAgIHRoaXMuY3VycmVudCsrO1xuICAgICAgaWYgKHRoaXMuY3VycmVudD50aGlzLmxlbi0xKSB0aGlzLmN1cnJlbnQ9dGhpcy5sZW4tMTtcbiAgICAgIHRoaXMubmV4dCA9IHRoaXMuY3VycmVudCsxO1xuICAgICAgdGhpcy5wcmV2ID0gdGhpcy5jdXJyZW50LTE7XG5cbiAgICB9IGVsc2Uge1xuXG4gICAgICB0aGlzLmN1cnJlbnQtLTtcbiAgICAgIGlmICh0aGlzLmN1cnJlbnQ8MCkgdGhpcy5jdXJyZW50PTA7ICBcbiAgICAgIHRoaXMubmV4dCA9IHRoaXMuY3VycmVudCsxO1xuICAgICAgdGhpcy5wcmV2ID0gdGhpcy5jdXJyZW50LTE7XG5cbiAgICB9ICAgICBcblxuICB9XG5cbiAgc2V0RXZlbnRzKCl7XG5cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICB0aGlzLiRzdGFydFdyYXAub24oJ3RvdWNoc3RhcnQuU3dpcGVUcmFuc2l0aW9uJywgKGUpPT57dGhpcy5vblRvdWNoU3RhcnQoZSk7fSk7XG4gICAgLy8gdGhpcy4kd3JhcC5vbigndG91Y2htb3ZlLlN3aXBlVHJhbnNpdGlvbicsIChlKT0+e3RoaXMub25Ub3VjaE1vdmUoZSk7fSk7XG4gICAgdGhpcy4kZW5kV3JhcC5vbigndG91Y2hlbmQuU3dpcGVUcmFuc2l0aW9uJywgKGUpPT57dGhpcy5vblRvdWNoRW5kKGUpO30pO1xuXG4gIH1cblxuICAgcmVtb3ZlRXZlbnRzKCl7XG5cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICB0aGlzLiRzdGFydFdyYXAub2ZmKCd0b3VjaHN0YXJ0LlN3aXBlVHJhbnNpdGlvbicpO1xuICAgIC8vIHRoaXMuJHdyYXAub2ZmKCd0b3VjaG1vdmUuU3dpcGVUcmFuc2l0aW9uJyk7XG4gICAgdGhpcy4kZW5kV3JhcC5vZmYoJ3RvdWNoZW5kLlN3aXBlVHJhbnNpdGlvbicpO1xuXG4gIH1cblxuXG4gICAgXG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC9Vc2Vycy9UZXJhTWFjL0RvY3VtZW50cy8wMF9TdG9jay8xMF9iYXNlL2Zyb250ZW5kX2Jhc2VfdmVyMDIvZGV2ZWxvcG1lbnQvcHJvamVjdC1uYW1lL2Fzc2V0cy9qcy9fZGV2anMvc3JjL0Z1bmMvU3dpcGVUcmFuc2l0aW9uLmpzIiwiLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy9cbi8vICBTY3JvbGxUcmFuc2l0aW9uXG4vL1xuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTY3JvbGxUcmFuc2l0aW9uIHtcblxuICBjb25zdHJ1Y3RvcigkdGFyZ2V0KSB7XG5cbiAgICB0aGlzLnBhZ2VMaXN0ID0ge1xuICAgICAgJ3RvcCc6IDAsXG4gICAgICAnbW92aWUnOiAxLFxuICAgICAgJ2ludGVydmlldyc6IDIsXG4gICAgICAnaGlzdG9yeSc6IDMsXG4gICAgfVxuXG4gICAgLy8gdmFyaWFibGVcbiAgICB0aGlzLmN1cnJlbnQgPSAwO1xuICAgIHRoaXMub2xkID0gbnVsbDtcbiAgICB0aGlzLm5leHQgPSAxO1xuICAgIHRoaXMucHJldiA9IG51bGw7XG4gICAgdGhpcy5sZW4gPSA0O1xuXG4gICAgdGhpcy5pc1N3aXRjaCA9IHRydWU7XG5cblxuICAgIHRoaXMuc2V0dXAoKTtcbiAgICB0aGlzLnNldEV2ZW50cygpO1xuXG4gIH1cblxuICBzZXR1cCgpIHtcblxuXG4gIH1cblxuICBzd2l0Y2goKSB7XG5cbiAgICBpZiAoIWdiLmluLnUuaXNJRSkgdmFyIHZhbCA9IDMwO1xuICAgIGVsc2UgdmFyIHZhbCA9IDA7XG5cbiAgICAvLyBsb2coZ2IuaW4ucGpheC5pc1BqYXhMb2NrLHRoaXMuU1RBbW91bnQsdGhpcy5jdXJyZW50LHRoaXMuaXNTd2l0Y2gpO1xuXG4gICAgLy8gcGpheGxvY2vmmYLjga/lh6bnkIbjgZfjgarjgYRcbiAgICBpZiAoZ2IuaW4ucGpheC5pc1BqYXhMb2NrKSByZXR1cm47XG5cbiAgICAvLyDjg5rjg7zjgrjnlarlj7fjgpLlj5blvpdcbiAgICB0aGlzLmN1cnJlbnQgPSB0aGlzLnBhZ2VMaXN0W2diLmluLnBqYXguaWRdO1xuXG4gICAgLy/jg5vjgqTjg7zjg6vjgYww5Lul5LiKIOOBi+OBpCBjdXJyZW5044GM5LiA55Wq5pyA5Yid44Gn44Gq44GEIOOBi+OBpCBzd2l0Y2jlj6/og73nirbmhYvjgafjgYLjgozjgbBcbiAgICBpZiAodGhpcy5TVEFtb3VudCA+IHZhbCAmJiB0aGlzLmN1cnJlbnQgPiAwICYmIHRoaXMuaXNTd2l0Y2gpIHtcblxuICAgICAgLy8gaGlzdG9yeeODmuODvOOCuOOBruOBqOOBjeOBr+S4iuOCueOCr+ODreODvOODq+OBl+OBpuOCgmludGVydmlldyBpbmRleOOBq+mjm+OBsOOBleOBquOBhFxuICAgICAgaWYgKGdiLmluLnBqYXguaWQ9PSdoaXN0b3J5JykgcmV0dXJuO1xuXG4gICAgICB0aGlzLmlzU3dpdGNoID0gZmFsc2U7XG4gIFxuICAgICAgdGhpcy5jYWxjdWxhdGVPcmRlcigncHJldicpO1xuXG4gICAgICB2YXIgcGFnZU5hbWUgPSBPYmplY3Qua2V5cyh0aGlzLnBhZ2VMaXN0KS5maWx0ZXIoIChrZXkpID0+IHsgcmV0dXJuIHRoaXMucGFnZUxpc3Rba2V5XSA9PT0gdGhpcy5jdXJyZW50IH0pWzBdO1xuXG4gICAgICAkKCcucGpheFRvXycrcGFnZU5hbWUpLnRyaWdnZXIoJ2NsaWNrJyk7XG5cblxuICAgIC8v44Ob44Kk44O844Or44GMMOS7peS4iyDjgYvjgaQgY3VycmVudOOBjOS4gOeVquacgOW+jOOBp+OBquOBhCDjgYvjgaQgc3dpdGNo5Y+v6IO954q25oWL44Gn44GC44KM44GwXG4gICAgfSBlbHNlIGlmKHRoaXMuU1RBbW91bnQgPCAtdmFsICYmIHRoaXMuY3VycmVudCA8IHRoaXMubGVuLTEgJiYgdGhpcy5pc1N3aXRjaCkge1xuXG4gICAgICB0aGlzLmlzU3dpdGNoID0gZmFsc2U7XG4gICAgICBcbiAgICAgIHRoaXMuY2FsY3VsYXRlT3JkZXIoJ25leHQnKTtcblxuICAgICAgdmFyIHBhZ2VOYW1lID0gT2JqZWN0LmtleXModGhpcy5wYWdlTGlzdCkuZmlsdGVyKCAoa2V5KSA9PiB7IHJldHVybiB0aGlzLnBhZ2VMaXN0W2tleV0gPT09IHRoaXMuY3VycmVudCB9KVswXTtcblxuICAgICAgJCgnLnBqYXhUb18nK3BhZ2VOYW1lKS50cmlnZ2VyKCdjbGljaycpO1xuXG4gICAgfTtcblxuXG4gIH1cblxuICBjYWxjdWxhdGVPcmRlcihkaXIpIHtcblxuICAgIHRoaXMub2xkID0gdGhpcy5jdXJyZW50O1xuXG4gICAgaWYgKGRpcj09J25leHQnKSB7XG5cbiAgICAgIHRoaXMuY3VycmVudCsrO1xuICAgICAgaWYgKHRoaXMuY3VycmVudD50aGlzLmxlbi0xKSB0aGlzLmN1cnJlbnQ9dGhpcy5sZW4tMTtcbiAgICAgIHRoaXMubmV4dCA9IHRoaXMuY3VycmVudCsxO1xuICAgICAgdGhpcy5wcmV2ID0gdGhpcy5jdXJyZW50LTE7XG5cbiAgICB9IGVsc2Uge1xuXG4gICAgICB0aGlzLmN1cnJlbnQtLTtcbiAgICAgIGlmICh0aGlzLmN1cnJlbnQ8MCkgdGhpcy5jdXJyZW50PTA7ICBcbiAgICAgIHRoaXMubmV4dCA9IHRoaXMuY3VycmVudCsxO1xuICAgICAgdGhpcy5wcmV2ID0gdGhpcy5jdXJyZW50LTE7XG5cbiAgICB9ICAgICBcblxuICB9XG5cbiAgb25Nb3VzZVdoZWVsKGUsIGRlbHRhLCBkZWx0YVgsIGRlbHRhWSkge1xuXG4gICAgLy8gbWVudeOBjOmWi+OBhOOBpuOBhOOCi+OBqOOBjeOBr+OCueOCr+ODreODvOODq+mBt+enu+OBleOBm+OBquOBhFxuICAgIGlmIChnYi5pbi5tZW51LmlzT3BlbikgcmV0dXJuO1xuICAgIC8vIHJlcyBzcOOBruOBqOOBjeOBr+WHpueQhuOBl+OBquOBhFxuICAgIGlmIChnYi5pbi51LmlzUmVzU1ApIHJldHVyblxuXG4gICAgdGhpcy5TVEFtb3VudCA9IGdiLmluLnMuU1RBbW91bnQ7XG4gICAgXG4gICAgdGhpcy5zd2l0Y2goKTtcblxuICB9XG5cbiAgc2V0RXZlbnRzKCkge1xuXG5cbiAgICBnYi5pbi5zLmFkZCgnU2Nyb2xsVHJhbnNpdGlvbicsIHRoaXMub25Nb3VzZVdoZWVsLmJpbmQodGhpcykpO1xuXG5cbiAgfVxuICBcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL1VzZXJzL1RlcmFNYWMvRG9jdW1lbnRzLzAwX1N0b2NrLzEwX2Jhc2UvZnJvbnRlbmRfYmFzZV92ZXIwMi9kZXZlbG9wbWVudC9wcm9qZWN0LW5hbWUvYXNzZXRzL2pzL19kZXZqcy9zcmMvRnVuYy9TY3JvbGxUcmFuc2l0aW9uLmpzIiwiLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vL1xuLy8gIFNuc1xuLy9cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5pbXBvcnQgbWV0YURhdGEgZnJvbSBcImpzb24tbG9hZGVyIS4uLy4uLy4uLy4uL2Vqcy9pbmMvbWV0YURhdGEuanNvblwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTbnMge1xuXG4gIGNvbnN0cnVjdG9yKCRmYiwkdHcsJGxpbmUsJG1haWwpe1xuXG4gICAgdGhpcy4kZmIgPSAkZmI7XG4gICAgdGhpcy4kdHcgPSAkdHc7XG4gICAgdGhpcy4kbGluZSA9ICRsaW5lO1xuICAgIHRoaXMuJG1haWwgPSAkbWFpbDtcblxuICAgIHRoaXMuZmIgPSB7XG4gICAgICAkdGFyZ2V0OiAkZmIsXG4gICAgICB0aXQ6IGVuY29kZVVSSUNvbXBvbmVudCgkKCd0aXRsZScpLmh0bWwoKSksXG4gICAgICBkZXM6IGVuY29kZVVSSUNvbXBvbmVudCgkKCcuZmJEZXMnKS5hdHRyKCdjb250ZW50JykpLCAvLyBkZXNjdGlwdGlvblxuICAgICAgdXJsOiBsb2NhdGlvbi5ocmVmLFxuICAgIH1cblxuICAgIHRoaXMudHcgPSB7XG4gICAgICAkdGFyZ2V0OiAkdHcsXG4gICAgICB0aXQ6IGVuY29kZVVSSUNvbXBvbmVudCgkKCd0aXRsZScpLmh0bWwoKSksXG4gICAgICBkZXM6IGVuY29kZVVSSUNvbXBvbmVudCgkKCcuZmJEZXMnKS5hdHRyKCdjb250ZW50JykpLCAvLyBkZXNjdGlwdGlvblxuICAgICAgdXJsOiBsb2NhdGlvbi5ocmVmLFxuICAgICAgaGFzaDogJ2hhc2gnLFxuICAgIH1cblxuICAgIHRoaXMubGluZSA9IHtcbiAgICAgICR0YXJnZXQ6ICRsaW5lLFxuICAgICAgdGl0OiBlbmNvZGVVUklDb21wb25lbnQoJCgndGl0bGUnKS5odG1sKCkpLFxuICAgICAgZGVzOiBlbmNvZGVVUklDb21wb25lbnQoJCgnLmZiRGVzJykuYXR0cignY29udGVudCcpKSwgLy8gZGVzY3RpcHRpb25cbiAgICAgIHVybDogbG9jYXRpb24uaHJlZixcbiAgICB9XG5cbiAgICB0aGlzLnNldEV2ZW50cygpO1xuXG4gIH1cblxuICBzd2l0Y2hNZXRhKCkge1xuXG4gICAgdmFyIHAgPSBnYi5pbi5wamF4LmlkO1xuICAgIGlmIChwID09ICdpbnRlcnZpZXdfZGV0YWlsJykge1xuXG4gICAgICBsb2coJCgnLnNlY3Rpb24nKS5oYXNDbGFzcygnc2VjdGlvbjAzX2RldGFpbDAxJykpO1xuICAgICAgaWYgKCQoJy5zZWN0aW9uJykuaGFzQ2xhc3MoJ3NlY3Rpb24wM19kZXRhaWwwMScpKSBwID0gJ2ludGVydmlld0RldGFpbDAxJztcbiAgICAgIGVsc2UgaWYgKCQoJy5zZWN0aW9uJykuaGFzQ2xhc3MoJ3NlY3Rpb24wM19kZXRhaWwwMicpKSBwID0gJ2ludGVydmlld0RldGFpbDAyJztcbiAgICAgIGVsc2UgaWYgKCQoJy5zZWN0aW9uJykuaGFzQ2xhc3MoJ3NlY3Rpb24wM19kZXRhaWwwMycpKSBwID0gJ2ludGVydmlld0RldGFpbDAzJztcbiAgXG4gICAgfVxuXG4gICAgLy8gdmFyIGQgPSBnYi5pbi5jb25mLm1ldGFbcF07XG4gICAgdmFyIGQgPSBtZXRhRGF0YVtwXTtcblxuICAgICQoJ3RpdGxlJykudGV4dCgpO1xuICAgICQoJy5tZXRhRGVzJykuYXR0cih7J2NvbnRlbnQnOiBkLmRlc2NyaXB0aW9ufSk7XG4gICAgJCgnLm1ldGFLZXknKS5hdHRyKHsnY29udGVudCc6IGQua2V5d29yZH0pO1xuXG4gICAgJCgnLmZiVGl0JykuYXR0cih7J2NvbnRlbnQnOiBkLmZiLnRpdH0pO1xuICAgICQoJy5mYkRlcycpLmF0dHIoeydjb250ZW50JzogZC5mYi5kZXN9KTtcbiAgICAkKCcuZmJJbWcnKS5hdHRyKHsnY29udGVudCc6IGQuZmIuaW1nfSk7XG4gICAgJCgnLmZiVXJsJykuYXR0cih7J2NvbnRlbnQnOiBkLmZiLnVybH0pO1xuXG4gICAgJCgnLnR3VGl0JykuYXR0cih7J2NvbnRlbnQnOiBkLnR3LnRpdH0pO1xuICAgICQoJy50d0RlcycpLmF0dHIoeydjb250ZW50JzogZC50dy5kZXN9KTtcbiAgICAkKCcudHdJbWcnKS5hdHRyKHsnY29udGVudCc6IGQudHcuaW1nfSk7XG4gICAgJCgnLnR3VXJsJykuYXR0cih7J2NvbnRlbnQnOiBkLnR3LnVybH0pO1xuXG5cbiAgfVxuXG4gIHNldHRpbmcoKSB7XG5cbiAgICB0aGlzLmZiID0ge1xuICAgICAgJHRhcmdldDogdGhpcy4kZmIsXG4gICAgICB0aXQ6IGVuY29kZVVSSUNvbXBvbmVudCgkKCd0aXRsZScpLmh0bWwoKSksXG4gICAgICBkZXM6IGVuY29kZVVSSUNvbXBvbmVudCgkKCcuZmJEZXMnKS5hdHRyKCdjb250ZW50JykpLCAvLyBkZXNjdGlwdGlvblxuICAgICAgdXJsOiBsb2NhdGlvbi5ocmVmLFxuICAgIH1cblxuICAgIHRoaXMudHcgPSB7XG4gICAgICAkdGFyZ2V0OiB0aGlzLiR0dyxcbiAgICAgIHRpdDogZW5jb2RlVVJJQ29tcG9uZW50KCQoJ3RpdGxlJykuaHRtbCgpKSxcbiAgICAgIGRlczogZW5jb2RlVVJJQ29tcG9uZW50KCQoJy5mYkRlcycpLmF0dHIoJ2NvbnRlbnQnKSksIC8vIGRlc2N0aXB0aW9uXG4gICAgICB1cmw6IGxvY2F0aW9uLmhyZWYsXG4gICAgICBoYXNoOiAnaGFzaCcsXG4gICAgfVxuXG4gICAgdGhpcy5saW5lID0ge1xuICAgICAgJHRhcmdldDogdGhpcy4kbGluZSxcbiAgICAgIHRpdDogZW5jb2RlVVJJQ29tcG9uZW50KCQoJ3RpdGxlJykuaHRtbCgpKSxcbiAgICAgIGRlczogZW5jb2RlVVJJQ29tcG9uZW50KCQoJy5mYkRlcycpLmF0dHIoJ2NvbnRlbnQnKSksIC8vIGRlc2N0aXB0aW9uXG4gICAgICB1cmw6IGxvY2F0aW9uLmhyZWYsXG4gICAgfVxuXG4gIH1cblxuICBzZXRPZ0ltZygpIHtcblxuICAgIC8vICQoJy5vZ0ltZ19mYicpLmF0dHIoJ2NvbnRlbnQnLCB0aGlzLmZiLmltZyk7XG4gICAgLy8gJCgnLm9nSW1nX3R3JykuYXR0cignY29udGVudCcsIHRoaXMudHcuaW1nKTtcblxuICB9XG5cbiAganVtcEZCKGUpIHtcblxuICAgICAgdGhpcy5vcGVuV2luZG93KCdodHRwczovL3d3dy5mYWNlYm9vay5jb20vc2hhcmVyL3NoYXJlci5waHA/dT0nICsgdGhpcy5mYi51cmwpO1xuXG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgfVxuXG5cbiAganVtcFRXKGUpIHtcblxuICAgIHRoaXMub3BlbldpbmRvdygnaHR0cDovL3R3aXR0ZXIuY29tL2ludGVudC90d2VldD91cmw9JyArIHRoaXMudHcudXJsICsgJyZ0ZXh0PScgKyB0aGlzLnR3LmRlcyk7XG4gICAgLy8gdGhpcy5vcGVuV2luZG93KCdodHRwOi8vdHdpdHRlci5jb20vaW50ZW50L3R3ZWV0P3VybD0nICsgdGhpcy50dy51cmwgKyAnJnRleHQ9JyArIHRoaXMudHcudGV4dCArICcmaGFzaHRhZ3M9JyArIHRoaXMudHcuaGFzaCk7XG5cbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgfVxuXG4gIGp1bXBMSU5FKCkge1xuXG4gICAgICB0aGlzLm9wZW5XaW5kb3coJ2h0dHA6Ly9saW5lLm1lL1IvbXNnL3RleHQvPycgKyB0aGlzLmxpbmUudGl0ICsgJyUwQScgKyB0aGlzLmxpbmUudXJsKTtcblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgb25TZW5kTWFpbCgpIHtcblxuICAgIHZhciBhZGRyZXNzID0gJyc7XG4gICAgdmFyIHN1YiA9ICcnO1xuICAgIHZhciBib2R5ID0gZW5jb2RlVVJJQ29tcG9uZW50KCQoJ3RpdGxlJykuaHRtbCgpKydcXG4nK2xvY2F0aW9uLmhyZWYpO1xuXG4gICAgbG9jYXRpb24uaHJlZiA9ICdtYWlsdG86JyArIGFkZHJlc3MgKyAnP3N1YmplY3Q9JyArIHN1YiArICcmYm9keT0nICsgYm9keTtcblxuICAgIHJldHVybiBmYWxzZTtcblxuICB9XG5cbiAgb3BlbldpbmRvdyh1cmwsIHcsIGgpIHtcblxuICAgICAgaWYodyA9PT0gdW5kZWZpbmVkKSB3ID0gNjAwO1xuICAgICAgaWYoaCA9PT0gdW5kZWZpbmVkKSBoID0gNjAwO1xuXG4gICAgICB2YXIgbCA9IE51bWJlcigod2luZG93LnNjcmVlbi53aWR0aC13KS8yKTtcbiAgICAgIHZhciB0ID0gTnVtYmVyKCh3aW5kb3cuc2NyZWVuLmhlaWdodC1oKS8yKTtcblxuICAgICAgd2luZG93Lm9wZW4odXJsLCduZXdfd2luZG93JyxcbiAgICAgICAgICAgICAgICAnbWVudWJhcj1ubywnICtcbiAgICAgICAgICAgICAgICAndG9vbGJhcj1ubywnICtcbiAgICAgICAgICAgICAgICAncmVzaXphYmxlPXllcywnICtcbiAgICAgICAgICAgICAgICAnc2Nyb2xsYmFycz15ZXMsJyArXG4gICAgICAgICAgICAgICAgJ2hlaWdodD0nICsgaCArICcsJyArXG4gICAgICAgICAgICAgICAgJ3dpZHRoPScgKyB3ICsgJywnICtcbiAgICAgICAgICAgICAgICAnbGVmdD0nICsgbCArICcsJyArXG4gICAgICAgICAgICAgICAgJ3RvcD0nICsgdFxuICAgICAgICAgICAgICApO1xuXG4gIH1cblxuICBzZXRFdmVudHMoKSB7XG5cbiAgICB0aGlzLmZiLiR0YXJnZXQub24oJ2NsaWNrJywgdGhpcy5qdW1wRkIuYmluZCh0aGlzKSk7XG4gICAgdGhpcy50dy4kdGFyZ2V0Lm9uKCdjbGljaycsIHRoaXMuanVtcFRXLmJpbmQodGhpcykpO1xuICAgIHRoaXMubGluZS4kdGFyZ2V0Lm9uKCdjbGljaycsIHRoaXMuanVtcExJTkUuYmluZCh0aGlzKSk7XG4gICAgaWYgKHRoaXMuJG1haWwpIHRoaXMuJG1haWwub24oJ2NsaWNrJywgKCk9Pnt0aGlzLm9uU2VuZE1haWwoKTtyZXR1cm4gZmFsc2U7fSk7XG5cbiAgfVxuXG4gIHJlbW92ZUV2ZW50cygpIHtcblxuICAgIHRoaXMuZmIuJHRhcmdldC5vZmYoJ2NsaWNrJyk7XG4gICAgdGhpcy50dy4kdGFyZ2V0Lm9mZignY2xpY2snKTtcbiAgICB0aGlzLmxpbmUuJHRhcmdldC5vZmYoJ2NsaWNrJyk7XG4gICAgaWYgKHRoaXMuJG1haWwpIHRoaXMuJG1haWwub2ZmKCdjbGljaycpO1xuXG4gIH1cblxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvVXNlcnMvVGVyYU1hYy9Eb2N1bWVudHMvMDBfU3RvY2svMTBfYmFzZS9mcm9udGVuZF9iYXNlX3ZlcjAyL2RldmVsb3BtZW50L3Byb2plY3QtbmFtZS9hc3NldHMvanMvX2RldmpzL3NyYy9GdW5jL1Nucy5qcyIsIm1vZHVsZS5leHBvcnRzID0ge1xuXHRcImRlc2NyaXB0aW9uXCI6IFwiZGVzY3RpcHRpb25cIixcblx0XCJrZXl3b3JkXCI6IFwi44OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O8XCIsXG5cdFwib2dwSW1nUGF0aFwiOiBcIlwiLFxuXHRcInRvcFwiOiB7XG5cdFx0XCJkZXNjcmlwdGlvblwiOiBcIuODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvFwiLFxuXHRcdFwiZmJcIjoge1xuXHRcdFx0XCJkZXNcIjogXCLjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7xcIixcblx0XHRcdFwiaW1nXCI6IFwiXCIsXG5cdFx0XHRcInNpdGVOYW1lXCI6IFwiXCIsXG5cdFx0XHRcInRpdFwiOiBcIuODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvFwiLFxuXHRcdFx0XCJ0eXBlXCI6IFwid2Vic2l0ZVwiLFxuXHRcdFx0XCJ1cmxcIjogXCJcIlxuXHRcdH0sXG5cdFx0XCJrZXl3b3JkXCI6IFwi44OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O8XCIsXG5cdFx0XCJsaW5lXCI6IHtcblx0XHRcdFwiZGVzXCI6IFwi44OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O8XCIsXG5cdFx0XHRcImltZ1wiOiBcIlwiLFxuXHRcdFx0XCJ0aXRcIjogXCLjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7xcIixcblx0XHRcdFwidXJsXCI6IFwiXCJcblx0XHR9LFxuXHRcdFwidGl0bGVcIjogXCJcIixcblx0XHRcInR3XCI6IHtcblx0XHRcdFwiY2FyZFwiOiBcInN1bW1hcnlfbGFyZ2VfaW1hZ2VcIixcblx0XHRcdFwiY3JlYXRvclwiOiBcIlwiLFxuXHRcdFx0XCJkZXNcIjogXCLjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7xcIixcblx0XHRcdFwiaW1nXCI6IFwiXCIsXG5cdFx0XHRcInNpdGVOYW1lXCI6IFwiXCIsXG5cdFx0XHRcInRpdFwiOiBcIlwiLFxuXHRcdFx0XCJ1cmxcIjogXCLjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7xcIlxuXHRcdH1cblx0fSxcblx0XCJtb3ZpZVwiOiB7XG5cdFx0XCJkZXNjcmlwdGlvblwiOiBcIuODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvFwiLFxuXHRcdFwiZmJcIjoge1xuXHRcdFx0XCJkZXNcIjogXCLjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7xcIixcblx0XHRcdFwiaW1nXCI6IFwiXCIsXG5cdFx0XHRcInNpdGVOYW1lXCI6IFwiXCIsXG5cdFx0XHRcInRpdFwiOiBcIuODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvFwiLFxuXHRcdFx0XCJ0eXBlXCI6IFwid2Vic2l0ZVwiLFxuXHRcdFx0XCJ1cmxcIjogXCJcIlxuXHRcdH0sXG5cdFx0XCJrZXl3b3JkXCI6IFwi44OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O8XCIsXG5cdFx0XCJsaW5lXCI6IHtcblx0XHRcdFwiZGVzXCI6IFwi44OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O8XCIsXG5cdFx0XHRcImltZ1wiOiBcIlwiLFxuXHRcdFx0XCJ0aXRcIjogXCLjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7xcIixcblx0XHRcdFwidXJsXCI6IFwiXCJcblx0XHR9LFxuXHRcdFwidGl0bGVcIjogXCJcIixcblx0XHRcInR3XCI6IHtcblx0XHRcdFwiY2FyZFwiOiBcInN1bW1hcnlfbGFyZ2VfaW1hZ2VcIixcblx0XHRcdFwiY3JlYXRvclwiOiBcIlwiLFxuXHRcdFx0XCJkZXNcIjogXCLjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7xcIixcblx0XHRcdFwiaW1nXCI6IFwiXCIsXG5cdFx0XHRcInNpdGVOYW1lXCI6IFwiXCIsXG5cdFx0XHRcInRpdFwiOiBcIlwiLFxuXHRcdFx0XCJ1cmxcIjogXCLjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7xcIlxuXHRcdH1cblx0fSxcblx0XCJpbnRlcnZpZXdcIjoge1xuXHRcdFwiZGVzY3JpcHRpb25cIjogXCLjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7xcIixcblx0XHRcImZiXCI6IHtcblx0XHRcdFwiZGVzXCI6IFwi44OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O8XCIsXG5cdFx0XHRcImltZ1wiOiBcIlwiLFxuXHRcdFx0XCJzaXRlTmFtZVwiOiBcIlwiLFxuXHRcdFx0XCJ0aXRcIjogXCLjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7xcIixcblx0XHRcdFwidHlwZVwiOiBcIndlYnNpdGVcIixcblx0XHRcdFwidXJsXCI6IFwiXCJcblx0XHR9LFxuXHRcdFwia2V5d29yZFwiOiBcIuODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvFwiLFxuXHRcdFwibGluZVwiOiB7XG5cdFx0XHRcImRlc1wiOiBcIuODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvFwiLFxuXHRcdFx0XCJpbWdcIjogXCJcIixcblx0XHRcdFwidGl0XCI6IFwi44OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O8XCIsXG5cdFx0XHRcInVybFwiOiBcIlwiXG5cdFx0fSxcblx0XHRcInRpdGxlXCI6IFwiXCIsXG5cdFx0XCJ0d1wiOiB7XG5cdFx0XHRcImNhcmRcIjogXCJzdW1tYXJ5X2xhcmdlX2ltYWdlXCIsXG5cdFx0XHRcImNyZWF0b3JcIjogXCJcIixcblx0XHRcdFwiZGVzXCI6IFwi44OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O8XCIsXG5cdFx0XHRcImltZ1wiOiBcIlwiLFxuXHRcdFx0XCJzaXRlTmFtZVwiOiBcIlwiLFxuXHRcdFx0XCJ0aXRcIjogXCJcIixcblx0XHRcdFwidXJsXCI6IFwi44OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O8XCJcblx0XHR9XG5cdH0sXG5cdFwiaW50ZXJ2aWV3RGV0YWlsMDFcIjoge1xuXHRcdFwiZGVzY3JpcHRpb25cIjogXCLjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7xcIixcblx0XHRcImZiXCI6IHtcblx0XHRcdFwiZGVzXCI6IFwi44OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O8XCIsXG5cdFx0XHRcImltZ1wiOiBcIlwiLFxuXHRcdFx0XCJzaXRlTmFtZVwiOiBcIlwiLFxuXHRcdFx0XCJ0aXRcIjogXCLjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7xcIixcblx0XHRcdFwidHlwZVwiOiBcIndlYnNpdGVcIixcblx0XHRcdFwidXJsXCI6IFwiXCJcblx0XHR9LFxuXHRcdFwia2V5d29yZFwiOiBcIuODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvFwiLFxuXHRcdFwibGluZVwiOiB7XG5cdFx0XHRcImRlc1wiOiBcIuODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvFwiLFxuXHRcdFx0XCJpbWdcIjogXCJcIixcblx0XHRcdFwidGl0XCI6IFwi44OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O8XCIsXG5cdFx0XHRcInVybFwiOiBcIlwiXG5cdFx0fSxcblx0XHRcInRpdGxlXCI6IFwiXCIsXG5cdFx0XCJ0d1wiOiB7XG5cdFx0XHRcImNhcmRcIjogXCJzdW1tYXJ5X2xhcmdlX2ltYWdlXCIsXG5cdFx0XHRcImNyZWF0b3JcIjogXCJcIixcblx0XHRcdFwiZGVzXCI6IFwi44OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O8XCIsXG5cdFx0XHRcImltZ1wiOiBcIlwiLFxuXHRcdFx0XCJzaXRlTmFtZVwiOiBcIlwiLFxuXHRcdFx0XCJ0aXRcIjogXCJcIixcblx0XHRcdFwidXJsXCI6IFwi44OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O8XCJcblx0XHR9XG5cdH0sXG5cdFwiaW50ZXJ2aWV3RGV0YWlsMDJcIjoge1xuXHRcdFwiZGVzY3JpcHRpb25cIjogXCLjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7xcIixcblx0XHRcImZiXCI6IHtcblx0XHRcdFwiZGVzXCI6IFwi44OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O8XCIsXG5cdFx0XHRcImltZ1wiOiBcIlwiLFxuXHRcdFx0XCJzaXRlTmFtZVwiOiBcIlwiLFxuXHRcdFx0XCJ0aXRcIjogXCLjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7xcIixcblx0XHRcdFwidHlwZVwiOiBcIndlYnNpdGVcIixcblx0XHRcdFwidXJsXCI6IFwiXCJcblx0XHR9LFxuXHRcdFwia2V5d29yZFwiOiBcIuODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvFwiLFxuXHRcdFwibGluZVwiOiB7XG5cdFx0XHRcImRlc1wiOiBcIuODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvFwiLFxuXHRcdFx0XCJpbWdcIjogXCJcIixcblx0XHRcdFwidGl0XCI6IFwi44OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O8XCIsXG5cdFx0XHRcInVybFwiOiBcIlwiXG5cdFx0fSxcblx0XHRcInRpdGxlXCI6IFwiXCIsXG5cdFx0XCJ0d1wiOiB7XG5cdFx0XHRcImNhcmRcIjogXCJzdW1tYXJ5X2xhcmdlX2ltYWdlXCIsXG5cdFx0XHRcImNyZWF0b3JcIjogXCJcIixcblx0XHRcdFwiZGVzXCI6IFwi44OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O8XCIsXG5cdFx0XHRcImltZ1wiOiBcIlwiLFxuXHRcdFx0XCJzaXRlTmFtZVwiOiBcIlwiLFxuXHRcdFx0XCJ0aXRcIjogXCJcIixcblx0XHRcdFwidXJsXCI6IFwi44OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O8XCJcblx0XHR9XG5cdH0sXG5cdFwiaW50ZXJ2aWV3RGV0YWlsMDNcIjoge1xuXHRcdFwiZGVzY3JpcHRpb25cIjogXCLjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7xcIixcblx0XHRcImZiXCI6IHtcblx0XHRcdFwiZGVzXCI6IFwi44OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O8XCIsXG5cdFx0XHRcImltZ1wiOiBcIlwiLFxuXHRcdFx0XCJzaXRlTmFtZVwiOiBcIlwiLFxuXHRcdFx0XCJ0aXRcIjogXCLjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7xcIixcblx0XHRcdFwidHlwZVwiOiBcIndlYnNpdGVcIixcblx0XHRcdFwidXJsXCI6IFwiXCJcblx0XHR9LFxuXHRcdFwia2V5d29yZFwiOiBcIuODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvFwiLFxuXHRcdFwibGluZVwiOiB7XG5cdFx0XHRcImRlc1wiOiBcIuODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvFwiLFxuXHRcdFx0XCJpbWdcIjogXCJcIixcblx0XHRcdFwidGl0XCI6IFwi44OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O8XCIsXG5cdFx0XHRcInVybFwiOiBcIlwiXG5cdFx0fSxcblx0XHRcInRpdGxlXCI6IFwiXCIsXG5cdFx0XCJ0d1wiOiB7XG5cdFx0XHRcImNhcmRcIjogXCJzdW1tYXJ5X2xhcmdlX2ltYWdlXCIsXG5cdFx0XHRcImNyZWF0b3JcIjogXCJcIixcblx0XHRcdFwiZGVzXCI6IFwi44OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O8XCIsXG5cdFx0XHRcImltZ1wiOiBcIlwiLFxuXHRcdFx0XCJzaXRlTmFtZVwiOiBcIlwiLFxuXHRcdFx0XCJ0aXRcIjogXCJcIixcblx0XHRcdFwidXJsXCI6IFwi44OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O8XCJcblx0XHR9XG5cdH0sXG5cdFwiaGlzdG9yeVwiOiB7XG5cdFx0XCJkZXNjcmlwdGlvblwiOiBcIuODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvFwiLFxuXHRcdFwiZmJcIjoge1xuXHRcdFx0XCJkZXNcIjogXCLjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7xcIixcblx0XHRcdFwiaW1nXCI6IFwiXCIsXG5cdFx0XHRcInNpdGVOYW1lXCI6IFwiXCIsXG5cdFx0XHRcInRpdFwiOiBcIuODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvOODgOODn+ODvFwiLFxuXHRcdFx0XCJ0eXBlXCI6IFwid2Vic2l0ZVwiLFxuXHRcdFx0XCJ1cmxcIjogXCJcIlxuXHRcdH0sXG5cdFx0XCJrZXl3b3JkXCI6IFwi44OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O8XCIsXG5cdFx0XCJsaW5lXCI6IHtcblx0XHRcdFwiZGVzXCI6IFwi44OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O844OA44Of44O8XCIsXG5cdFx0XHRcImltZ1wiOiBcIlwiLFxuXHRcdFx0XCJ0aXRcIjogXCLjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7xcIixcblx0XHRcdFwidXJsXCI6IFwiXCJcblx0XHR9LFxuXHRcdFwidGl0bGVcIjogXCJcIixcblx0XHRcInR3XCI6IHtcblx0XHRcdFwiY2FyZFwiOiBcInN1bW1hcnlfbGFyZ2VfaW1hZ2VcIixcblx0XHRcdFwiY3JlYXRvclwiOiBcIlwiLFxuXHRcdFx0XCJkZXNcIjogXCLjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7xcIixcblx0XHRcdFwiaW1nXCI6IFwiXCIsXG5cdFx0XHRcInNpdGVOYW1lXCI6IFwiXCIsXG5cdFx0XHRcInRpdFwiOiBcIlwiLFxuXHRcdFx0XCJ1cmxcIjogXCLjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7zjg4Djg5/jg7xcIlxuXHRcdH1cblx0fVxufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vanNvbi1sb2FkZXIhL1VzZXJzL1RlcmFNYWMvRG9jdW1lbnRzLzAwX1N0b2NrLzEwX2Jhc2UvZnJvbnRlbmRfYmFzZV92ZXIwMi9kZXZlbG9wbWVudC9wcm9qZWN0LW5hbWUvYXNzZXRzL2Vqcy9pbmMvbWV0YURhdGEuanNvblxuLy8gbW9kdWxlIGlkID0gMjNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy9cbi8vICBMYXlvdXRcbi8vXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmltcG9ydCBTaXplIGZyb20gJy4vU2l6ZS9TaXplLmpzJztcbmltcG9ydCBQb3NpdGlvbiBmcm9tICcuL1Bvc3Rpb24vUG9zaXRpb24uanMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMYXlvdXQge1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIFxuICAgIHRoaXMuc2V0RXZlbnRzKCk7XG5cbiAgfVxuXG4gIHNldHVwKCkge1xuXG4gICAgICB0aGlzLnNpemUgPSBuZXcgU2l6ZSgpOyAvLyBhZGp1c3Qgc2l6ZVxuXG4gICAgICB0aGlzLnBvc2l0aW9uID0gbmV3IFBvc2l0aW9uKCk7IC8vIGFkanVzdCBwb3NpdGlvblxuICAgICAgXG4gIH1cblxuICBzdGF0aWMgcmVzZXQoKSB7XG5cbiAgICAvLyBzY2FsZeOBp+Wkp+OBjeOBj+OBl+OBpuOBhOOCi+mWouS/guS4iuOAgemrmOOBleOCkjEwMCXjgavjgZfjgabjga/jgYTjgZHjgarjgYRcbiAgICBpZiAoZ2IuaW4ucGpheC5pZCA9PSAnaGlzdG9yeScgfHwgZ2IuaW4ucGpheC5pZCA9PSAnaW50ZXJ2aWV3X2RldGFpbCcpIHtcblxuICAgICAgVHdlZW5NYXguc2V0KCQoJyNpbm5lcicpLCB7XG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIGhlaWdodDogJ2F1dG8nLFxuICAgICAgICBzY2FsZTogMSxcbiAgICAgICAgJ3RyYW5zZm9ybS1vcmlnaW4nOicwIDAnLFxuICAgICAgICAnLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luJzonMCAwJ1xuICAgICAgfSk7XG4gICAgICBUd2Vlbk1heC5zZXQoJCgnI2JnV3JhcCcpLCB7XG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICBzY2FsZTogMSxcbiAgICAgICAgJ3RyYW5zZm9ybS1vcmlnaW4nOicwIDAnLFxuICAgICAgICAnLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luJzonMCAwJ1xuICAgICAgfSk7XG5cbiAgICAgIFR3ZWVuTWF4LnNldCgkKCcjd3JhcHBlcicpLCB7XG4gICAgICAgICdvdmVyZmxvdyc6J3Zpc2libGUnLFxuICAgICAgICBoZWlnaHQ6ICcxMDAlJ1xuICAgICAgfSk7XG5cbiAgICB9IGVsc2Uge1xuXG4gICAgICBUd2Vlbk1heC5zZXQoJCgnI2lubmVyLCAjYmdXcmFwJyksIHtcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgIHNjYWxlOiAxLFxuICAgICAgICAndHJhbnNmb3JtLW9yaWdpbic6JzAgMCcsXG4gICAgICAgICctd2Via2l0LXRyYW5zZm9ybS1vcmlnaW4nOicwIDAnXG4gICAgICB9KTtcblxuICAgICAgVHdlZW5NYXguc2V0KCQoJyN3cmFwcGVyJyksIHtcbiAgICAgICAgJ292ZXJmbG93JzondmlzaWJsZScsXG4gICAgICAgIGhlaWdodDogJzEwMCUnXG4gICAgICB9KTtcblxuICAgIH1cbiAgICBcbiAgfVxuXG4gIHNldEV2ZW50cygpIHtcblxuICAgICAgXG4gIH1cblxuICBvbkxvYWQoKSB7XG5cbiAgICB0aGlzLnNldHVwKCk7XG5cbiAgfVxuICAgICAgIFxuICBzZXRFdmVudHMoKSB7XG5cbiAgICAkKHdpbmRvdykub24oJ2xvYWQnLCB0aGlzLm9uTG9hZC5iaW5kKHRoaXMpKTtcblxuICB9XG5cbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL1VzZXJzL1RlcmFNYWMvRG9jdW1lbnRzLzAwX1N0b2NrLzEwX2Jhc2UvZnJvbnRlbmRfYmFzZV92ZXIwMi9kZXZlbG9wbWVudC9wcm9qZWN0LW5hbWUvYXNzZXRzL2pzL19kZXZqcy9zcmMvRGlzcGxheS9MYXlvdXQvTGF5b3V0LmpzIiwiLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy9cbi8vICBTaXplXG4vL1xuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5pbXBvcnQgU2NhbGUgZnJvbSAnLi9TY2FsZS5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNpemUge1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuXG4gICAgdGhpcy5zZXR1cCgpO1xuICAgIHRoaXMuc2V0RXZlbnRzKCk7XG5cbiAgfVxuXG4gIHNldHVwKCkge1xuICAgIFxuICAgIC8vIGdiLmluLnUuc2V0SW1nU1BTaXplKCQoJ2ltZycpKTsgLy8gZm9yIHNwIGltZ1xuXG4gICAgLy8gbmV3IGdiLlJlc3BvbnNpdmVGb250U2l6ZSgkKCcuZm9udFJlc3BvbnNpdmUnKSk7IC8v44Os44K544Od44Oz44K344OW5pmC44OV44Kp44Oz44OI44K144Kk44K644Gu5aSJ5pu0XG5cbiAgICB0aGlzLnNjYWxlID0gbmV3IFNjYWxlKCk7IC8vIHJlc2l6ZVxuXG5cbiAgfVxuXG4gIG9uUmVzaXplKCkge1xuXG4gICAgLy8gZ2IuaW4udS5zZXRJbWdTUFNpemUoJCgnaW1nJykpOyAvLyBmb3Igc3AgaW1nXG5cbiAgfVxuXG4gIHNldEV2ZW50cygpIHtcblxuICAgIC8vIGdiLmluLnIuYWRkKHRoaXMub25SZXNpemUuYmluZCh0aGlzKSk7XG5cbiAgfVxuXG5cbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL1VzZXJzL1RlcmFNYWMvRG9jdW1lbnRzLzAwX1N0b2NrLzEwX2Jhc2UvZnJvbnRlbmRfYmFzZV92ZXIwMi9kZXZlbG9wbWVudC9wcm9qZWN0LW5hbWUvYXNzZXRzL2pzL19kZXZqcy9zcmMvRGlzcGxheS9MYXlvdXQvU2l6ZS9TaXplLmpzIiwiLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy9cbi8vICBMYXlvdXRcbi8vXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTY2FsZSB7XG5cbiAgY29uc3RydWN0b3IoKSB7XG5cbiAgICB0aGlzLlNQQmFzZVcgPSAzNzU7XG4gICAgdGhpcy5QQ0Jhc2VXID0gMTMwMDtcblxuICAgIHRoaXMucmF0ZSA9IDE7XG4gICAgdGhpcy5XID0gd2luZG93LmlubmVyV2lkdGg7XG5cbiAgICB0aGlzLiR0YXJnZXRMaXN0ID0gW1xuICAgICAge1xuICAgICAgICAnJHRhcmdldCc6ICQoJy5tZW51SW5uZXInKSxcbiAgICAgICAgJ3NjYWxlJzogJ3NwT25seScgLy8gc3BPbmx5IHBjT25seSBib3RoXG4gICAgICB9LFxuICAgICAgLy8ge1xuICAgICAgLy8gICAnJHRhcmdldCc6ICQoJy5zZWN0aW9uMDNfZGV0YWlsJyksXG4gICAgICAvLyAgICdzY2FsZSc6ICdib3RoJyAvLyBzcE9ubHkgcGNPbmx5IGJvdGhcbiAgICAgIC8vIH0sXG4gICAgICAvLyB7XG4gICAgICAvLyAgICckdGFyZ2V0JzogJCgnLnNlY3Rpb24wNCcpLFxuICAgICAgLy8gICAnc2NhbGUnOiAnYm90aCcgLy8gc3BPbmx5IHBjT25seSBib3RoXG4gICAgICAvLyB9LFxuICAgIF1cblxuICAgIHRoaXMucnVuKCk7XG4gICAgdGhpcy5zZXR1cCgpO1xuICAgIHRoaXMuc2V0RXZlbnRzKCk7XG5cbiAgfVxuXG4gIHNldHVwKCkge1xuXG4gICAgXG4gIH1cblxuICBydW4oKSB7XG5cbiAgICB0aGlzLlcgPSAkKHdpbmRvdykud2lkdGgoKTtcbiAgICB0aGlzLmlXID0gd2luZG93LmlubmVyV2lkdGg7XG5cbiAgICB0aGlzLnNjYWxlKCk7XG4gICAgdGhpcy53cmFwKCk7XG5cbiAgfVxuXG4gIC8vIOaLoeWkp1xuICBzY2FsZSgpIHtcblxuICAgIC8vIGJw44Gu5aC05ZCI44Guc2NhbGVcbiAgICBpZiAodGhpcy5pVyA8PSBnYi5pbi5jb25mLmJwKSB7XG5cbiAgICAgIC8vIHdpZHRo44GL44KJcmF0ZeOCkuioiOeul1xuICAgICAgLy8gdGhpcy5yYXRlID0gZ2IuaW4udS5mbG9hdEZvcm1hdCh0aGlzLlcgLyB0aGlzLlNQQmFzZVcgLCAyKTtcbiAgICAgIHRoaXMucmF0ZSA9IHRoaXMuVyAvIHRoaXMuU1BCYXNlVztcblxuICAgICAgLy8gc2NhbGXjgZnjgovjg6rjgrnjg4jjgpLjg6vjg7zjg5dcbiAgICAgICQuZWFjaCh0aGlzLiR0YXJnZXRMaXN0LCAoaW5kZXgsIHZhbCk9PntcblxuICAgICAgICBpZiAodmFsLnNjYWxlID09ICdib3RoJyB8fCB2YWwuc2NhbGUgPT0gJ3NwT25seScpIHtcblxuICAgICAgICAgIFR3ZWVuTWF4LnNldCh2YWwuJHRhcmdldCwge1xuICAgICAgICAgICAgd2lkdGg6IHRoaXMuU1BCYXNlVyxcbiAgICAgICAgICAgIHNjYWxlOiB0aGlzLnJhdGUsXG4gICAgICAgICAgICAndHJhbnNmb3JtLW9yaWdpbic6JzAgMCcsXG4gICAgICAgICAgICAnLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luJzonMCAwJ1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgfSk7XG5cbiAgICB9IGVsc2Uge1xuXG4gICAgICAvLyB3aWR0aOOBi+OCiXJhdGXjgpLoqIjnrpdcbiAgICAgIC8vIHRoaXMucmF0ZSA9IGdiLmluLnUuZmxvYXRGb3JtYXQodGhpcy5XIC8gdGhpcy5QQ0Jhc2VXICwgMik7XG4gICAgICBpZiAodGhpcy5XID4gMTMwMCkgdGhpcy5XID0gMTMwMDtcbiAgICAgIHRoaXMucmF0ZSA9IHRoaXMuVyAvIHRoaXMuUENCYXNlVztcblxuICAgICAgLy8gc2NhbGXjgZnjgovjg6rjgrnjg4jjgpLjg6vjg7zjg5dcbiAgICAgICQuZWFjaCh0aGlzLiR0YXJnZXRMaXN0LCAoaW5kZXgsIHZhbCk9PntcblxuICAgICAgICBpZiAodmFsLnNjYWxlID09ICdib3RoJyB8fCB2YWwuc2NhbGUgPT0gJ3BjT25seScpIHtcblxuICAgICAgICAgIFR3ZWVuTWF4LnNldCh2YWwuJHRhcmdldCwge1xuICAgICAgICAgICAgd2lkdGg6IHRoaXMuUENCYXNlVyxcbiAgICAgICAgICAgIHNjYWxlOiB0aGlzLnJhdGUsXG4gICAgICAgICAgICAndHJhbnNmb3JtLW9yaWdpbic6JzAgMCcsXG4gICAgICAgICAgICAnLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luJzonMCAwJ1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8g44GT44Gh44KJ44Gu5aC05ZCI44Gv44CBc2NhbGXjgpLmiLvjgZlcbiAgICAgICAgaWYgKHZhbC5zY2FsZSA9PSAnc3BPbmx5Jykge1xuXG4gICAgICAgICAgVHdlZW5NYXguc2V0KHZhbC4kdGFyZ2V0LCB7XG4gICAgICAgICAgICB3aWR0aDogJ2F1dG8nLFxuICAgICAgICAgICAgc2NhbGU6IDEsXG4gICAgICAgICAgICAndHJhbnNmb3JtLW9yaWdpbic6JzAgMCcsXG4gICAgICAgICAgICAnLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luJzonMCAwJ1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgfSk7ICBcblxuICAgIH1cblxuICB9XG5cbiAgLy8gc2NhbGXjgZfjgZ/jgonjgIHlhYPjga7lpKfjgY3jgZXliIbkvZnnmb3jgYzjgafjgY3jgovjga7jgadvdmVyZmxvdyBoaWRkZW7jgafmtojjgZlcbiAgd3JhcCgpIHtcblxuXG5cbiAgfVxuXG4gIG9uUmVzaXplKCkge1xuXG4gICAgdGhpcy5ydW4oKTtcblxuICB9XG5cbiAgc2V0RXZlbnRzKCkge1xuXG4gICAgZ2IuaW4uci5hZGQoJ3NjYWxlJywgdGhpcy5vblJlc2l6ZS5iaW5kKHRoaXMpKTtcbiAgICBcbiAgfVxuXG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC9Vc2Vycy9UZXJhTWFjL0RvY3VtZW50cy8wMF9TdG9jay8xMF9iYXNlL2Zyb250ZW5kX2Jhc2VfdmVyMDIvZGV2ZWxvcG1lbnQvcHJvamVjdC1uYW1lL2Fzc2V0cy9qcy9fZGV2anMvc3JjL0Rpc3BsYXkvTGF5b3V0L1NpemUvU2NhbGUuanMiLCIvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vL1xuLy8gIFBvc2l0aW9uXG4vL1xuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3NpdGlvbiB7XG5cbiAgY29uc3RydWN0b3IoKSB7XG5cbiAgICB0aGlzLnNldHVwKCk7XG4gICAgdGhpcy5zZXRFdmVudHMoKTtcblxuICB9XG5cbiAgc2V0dXAoKSB7XG5cbiAgICAvLyDkuIrkuIvkuK3lpK7lr4TjgZtcbiAgICB0aGlzLnNldENlbnRlcigpO1xuXG4gIH1cblxuICBzZXRDZW50ZXIoKSB7XG5cbiAgICAkKCcucG9zQ2VudGVyJykuZWFjaChmdW5jdGlvbihpbmRleCwgZWwpIHtcblxuICAgICAgJCh0aGlzKS5hZGp1c3QoKTtcbiAgICAgIFxuICAgIH0pO1xuICAgICQoJy5wb3NDZW50ZXJXJykuZWFjaChmdW5jdGlvbihpbmRleCwgZWwpIHtcblxuICAgICAgJCh0aGlzKS5hZGp1c3RXKCk7XG4gICAgICBcbiAgICB9KTtcbiAgICAkKCcucG9zQ2VudGVySCcpLmVhY2goZnVuY3Rpb24oaW5kZXgsIGVsKSB7XG5cbiAgICAgICQodGhpcykuYWRqdXN0SCgpO1xuICAgICAgXG4gICAgfSk7XG5cbiAgfVxuXG4gIG9uUmVzaXplKCkge1xuXG4gICAgdGhpcy5zZXRDZW50ZXIoKTtcblxuICB9XG5cbiAgc2V0RXZlbnRzKCkge1xuXG4gICAgZ2IuaW4uci5hZGQoJ3NldENlbnRlcicsIHRoaXMub25SZXNpemUuYmluZCh0aGlzKSk7XG5cbiAgfVxuXG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC9Vc2Vycy9UZXJhTWFjL0RvY3VtZW50cy8wMF9TdG9jay8xMF9iYXNlL2Zyb250ZW5kX2Jhc2VfdmVyMDIvZGV2ZWxvcG1lbnQvcHJvamVjdC1uYW1lL2Fzc2V0cy9qcy9fZGV2anMvc3JjL0Rpc3BsYXkvTGF5b3V0L1Bvc3Rpb24vUG9zaXRpb24uanMiLCIvKipcbiAqIGZpbGVPdmVydmlldzpcbiAqIFByb2plY3Q6XG4gKiBGaWxlOiBNYWluXG4gKiBEYXRlOlxuICogQXV0aG9yOlxuICovXG5cbmltcG9ydCBEaXNwbGF5VG9wIGZyb20gJy4uL0Rpc3BsYXkvRGlzcGxheVRvcC5qcyc7XG4vLyBpbXBvcnQgRGlzcGxheU1vdmllIGZyb20gJy4uL0Rpc3BsYXkvRGlzcGxheU1vdmllLmpzJztcbi8vIGltcG9ydCBEaXNwbGF5SW50ZXJ2aWV3IGZyb20gJy4uL0Rpc3BsYXkvRGlzcGxheUludGVydmlldy5qcyc7XG4vLyBpbXBvcnQgRGlzcGxheUludGVydmlld0RldGFpbCBmcm9tICcuLi9EaXNwbGF5L0Rpc3BsYXlJbnRlcnZpZXdEZXRhaWwuanMnO1xuLy8gaW1wb3J0IERpc3BsYXlIaXN0b3J5IGZyb20gJy4uL0Rpc3BsYXkvRGlzcGxheUhpc3RvcnkuanMnO1xuXG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1haW4ge1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuXG4gICAgdGhpcy5vbkltbWVkaWF0ZSgpO1xuICAgIHRoaXMuc2V0RXZlbnRzKCk7XG5cbiAgfVxuXG4gIG9uSW1tZWRpYXRlKCkge1xuXG4gIH1cblxuICBvblJlYWR5KCkge1xuXG4gICAgLy9wYWdl44Oa44O844K45Yil44GuSUTjgpLlj5blvpdcbiAgICB2YXIgcGFnZSA9ICQoJ2JvZHknKS5kYXRhKCdpZCcpO1xuXG5cdFx0Ly9wYWdl44GuSUTjgZTjgajjgavnmbrngavjgZnjgovjgq/jg6njgrnjga7mjK/jgorliIbjgZFcbiAgICBzd2l0Y2ggKHBhZ2UpIHtcblxuICAgICAgY2FzZSAndG9wJzpcblxuICAgICAgICBuZXcgRGlzcGxheVRvcCgpO1xuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICAvLyBjYXNlICdtb3ZpZSc6XG4gICAgICAvL1xuICAgICAgLy8gICBuZXcgRGlzcGxheU1vdmllKCk7XG5cdFx0XHQvL1xuICAgICAgLy8gICBicmVhaztcblx0XHRcdC8vXG4gICAgICAvLyBjYXNlICdpbnRlcnZpZXcnOlxuICAgICAgLy9cbiAgICAgIC8vICAgbmV3IERpc3BsYXlJbnRlcnZpZXcoKTtcblx0XHRcdC8vXG4gICAgICAvLyAgIGJyZWFrO1xuXHRcdFx0Ly9cbiAgICAgIC8vIGNhc2UgJ2ludGVydmlld19kZXRhaWwnOlxuICAgICAgLy9cbiAgICAgIC8vICAgbmV3IERpc3BsYXlJbnRlcnZpZXdEZXRhaWwoKTtcblx0XHRcdC8vXG4gICAgICAvLyAgIGJyZWFrO1xuXHRcdFx0Ly9cbiAgICAgIC8vIGNhc2UgJ2hpc3RvcnknOlxuICAgICAgLy9cbiAgICAgIC8vICAgbmV3IERpc3BsYXlIaXN0b3J5KCk7XG5cdFx0XHQvL1xuICAgICAgLy8gICBicmVhaztcblxuICAgIH1cblxuICB9XG5cbiAgb25Mb2FkKCkge1xuXG4gICAgXG4gIH1cblxuICBvblJlbmRlcigpIHtcblxuXG4gIH1cblxuICBzZXRFdmVudHMoKSB7XG5cbiAgICAkKGRvY3VtZW50KS5vbigncmVhZHknLCB0aGlzLm9uUmVhZHkuYmluZCh0aGlzKSk7XG4gICAgJCh3aW5kb3cpLm9uKCdsb2FkJywgdGhpcy5vbkxvYWQuYmluZCh0aGlzKSk7ICAgICAgICBcblxuICB9XG5cbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL1VzZXJzL1RlcmFNYWMvRG9jdW1lbnRzLzAwX1N0b2NrLzEwX2Jhc2UvZnJvbnRlbmRfYmFzZV92ZXIwMi9kZXZlbG9wbWVudC9wcm9qZWN0LW5hbWUvYXNzZXRzL2pzL19kZXZqcy9zcmMvUGFnZS9NYWluLmpzIiwiLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy9cbi8vICBEaXNwbGF5XG4vL1xuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuaW1wb3J0IEVmZmVjdHMgZnJvbSAnLi9FZmZlY3RzL0VmZmVjdHMuanMnO1xuaW1wb3J0IFNjYWxlVG9wIGZyb20gJy4uL0Rpc3BsYXkvTGF5b3V0L1NpemUvU2NhbGVUb3AuanMnO1xuaW1wb3J0IEhvdmVyRWZmZWN0U05TU1BGb290ZXIgZnJvbSAnLi4vRGlzcGxheS9FZmZlY3RzLzAzX2VmZmVjdHMvSG92ZXJFZmZlY3RTTlNTUEZvb3Rlci5qcyc7XG5pbXBvcnQgSG92ZXJFZmZlY3RTVkdBcnJvd1RvcCBmcm9tICcuLi9EaXNwbGF5L0VmZmVjdHMvMDNfZWZmZWN0cy9Ib3ZlckVmZmVjdFNWR0Fycm93VG9wLmpzJztcbmltcG9ydCBUb3BUaW1lIGZyb20gJy4uL0Rpc3BsYXkvVUkvVG9wVGltZS5qcyc7XG5pbXBvcnQgUG9zaXRpb24gZnJvbSAnLi9MYXlvdXQvUG9zdGlvbi9Qb3NpdGlvbi5qcyc7XG5cbi8vIGltcG9ydCBXZWJHTGluaXQgZnJvbSAnLi9XZWJHTGluaXQuanMnO1xuLy8gaW1wb3J0IENhbnZhcyBmcm9tICcuLi9WaXN1YWwvQ2FudmFzLmpzJztcblxuXG5pbXBvcnQgQ2FudmFzIGZyb20gXCIuLi9WaXN1YWwvQ2FudmFzXCI7XG5cbi8vIGltcG9ydCB2cyBmcm9tICcuL3Rlc3QuZnJhZyc7XG5cblxuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEaXNwbGF5VG9wIHtcblxuICBjb25zdHJ1Y3Rvcigpe1xuXG4gICAgdGhpcy5vbkltbWVkaWF0ZSgpO1xuICAgIHRoaXMuc2V0RXZlbnRzKCk7XG5cbiAgfVxuXG4gIG9uSW1tZWRpYXRlKCkge1xuXG5cbiAgICAvLyDjgqLjg4vjg6Hjg7zjgrfjg6fjg7Pjg6vjg7zjg5fjgrnjgr/jg7zjg4hcbiAgICAvLyBnYi5pbi51cC5sb29wKCk7XG4gICAgXG4gIH1cblxuICBvbkxvYWQoKSB7XG5cbiAgICAvLyBnYi5pbi5jYW52YXMgPSBuZXcgQ2FudmFzKCk7XG4gICAgLy8gZ2IuaW4uY2FudmFzLmluaXQoKTtcblxuICAgIGdiLmluLmNhbnZhcyA9IG5ldyBDYW52YXMoe1xuICAgICAgb3V0cHV0OiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnd2ViZ2wtb3V0cHV0JylcbiAgICB9KTtcblxuICAgIGdiLmluLmNhbnZhcy5pbml0KCk7XG5cblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vICBVSSAvIExheW91dFxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIHNwXG4gICAgLy8gZ2IuaW4uc2NhbGVUb3AgPSBuZXcgU2NhbGVUb3AoKTtcbiAgICAvLyBnYi5pbi5wb3MgPSBuZXcgUG9zaXRpb24oKTtcblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vICBFZmZlY3RzXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICAvLyBzcFxuICAgIC8vIGdiLmluLnNsaWRlclRvcC5zZXRFdmVudHMoKTtcbiAgICAvLyBnYi5pbi5zbnNTUEhvdmVyRWYgPSBuZXcgSG92ZXJFZmZlY3RTTlNTUEZvb3RlcigkKCcjc2lkZUwnKSk7XG5cbiAgICAvLyBwY1xuICAgIC8vIG5ldyBIb3ZlckVmZmVjdFNWR0Fycm93VG9wKCQoJy5zZWN0aW9uMDEgLm5leHQnKSk7IC8vIOKGkiBUb3BPcGVuaW5n44G4XG5cbiAgfVxuXG4gIHN0YXRpYyBydW4oKSB7XG5cblx0XHQvLyB3aW5kb3cuY29uc29sZS5sb2coJ3N0YXRpY19SdW4nKTtcblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vICBVSSAvIExheW91dFxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIHNwXG4gICAgLy8gZ2IuaW4uc2NhbGVUb3AgPSBuZXcgU2NhbGVUb3AoKTtcbiAgICAvLyBnYi5pbi5wb3MgPSBuZXcgUG9zaXRpb24oKTtcblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vICBFZmZlY3RzXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICAvLyBzcFxuICAgIC8vIGdiLmluLnNsaWRlclRvcC5zZXRFdmVudHMoKTtcbiAgICAvLyBnYi5pbi5zbnNTUEhvdmVyRWYgPSBuZXcgSG92ZXJFZmZlY3RTTlNTUEZvb3RlcigkKCcjc2lkZUwnKSk7XG5cbiAgICAvLyBwY1xuXG4gIH1cblxuICBzZXRFdmVudHMoKSB7XG5cbiAgICAkKHdpbmRvdykub24oJ2xvYWQnLCB0aGlzLm9uTG9hZC5iaW5kKHRoaXMpKTsgICAgICAgIFxuXG4gIH1cblxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvVXNlcnMvVGVyYU1hYy9Eb2N1bWVudHMvMDBfU3RvY2svMTBfYmFzZS9mcm9udGVuZF9iYXNlX3ZlcjAyL2RldmVsb3BtZW50L3Byb2plY3QtbmFtZS9hc3NldHMvanMvX2RldmpzL3NyYy9EaXNwbGF5L0Rpc3BsYXlUb3AuanMiLCIvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vL1xuLy8gIEVmZmVjdHNcbi8vXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5pbXBvcnQgU2VjdGlvbjAyQmcgZnJvbSAnLi8wM19lZmZlY3RzL1NlY3Rpb24wMkJnL0NWQ29udGVudHMuanMnO1xuaW1wb3J0IFNlY3Rpb24wNFByb2R1Y3QgZnJvbSAnLi8wM19lZmZlY3RzL1NlY3Rpb24wNFByb2R1Y3QvR2xDb250ZW50cy5qcyc7XG5pbXBvcnQgUHJvZmlsZXIgZnJvbSAnLi9Qcm9maWxlci5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVmZmVjdHMge1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuXG4gICAgdGhpcy5nbCA9IG51bGw7XG4gICAgdGhpcy5kb20gPSBudWxsO1xuICAgIHRoaXMuc3RhdGUgPSAnJztcblxuICAgIHRoaXMuc2V0dXAoKTtcbiAgICB0aGlzLmRlYnVnKCk7XG4gICAgdGhpcy5zZXRFdmVudHMoKTtcblxuICB9XG5cbiAgc2V0dXAoKSB7XG5cbiAgICAvLyBiZ1xuICAgIC8vIGdiLmluLlNlY3Rpb24wMkJnID0gbmV3IFNlY3Rpb24wMkJnKCk7XG5cbiAgICAvLyBwcm9kdWN0XG4gICAgLy8gZ2IuaW4uU2VjdGlvbjA0UHJvZHVjdCA9IG5ldyBTZWN0aW9uMDRQcm9kdWN0KCQoJy5zZWN0aW9uMDMnKSk7XG5cbiAgfVxuXG4gIGRlYnVnKCkge1xuXG4gICAgLy8gcHJvZmlsZXLoqK3lrppcbiAgICAvLyBuZXcgUHJvZmlsZXIoKTtcblxuICB9XG5cblxuICBzZXRFdmVudHMoKSB7XG5cblxuICB9XG5cbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL1VzZXJzL1RlcmFNYWMvRG9jdW1lbnRzLzAwX1N0b2NrLzEwX2Jhc2UvZnJvbnRlbmRfYmFzZV92ZXIwMi9kZXZlbG9wbWVudC9wcm9qZWN0LW5hbWUvYXNzZXRzL2pzL19kZXZqcy9zcmMvRGlzcGxheS9FZmZlY3RzL0VmZmVjdHMuanMiLCIvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vL1xuLy8gIENWQ29udGVudHNcbi8vXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5pbXBvcnQgTG9vcCBmcm9tICcuL0NWQ29udGVudHNMb29wLmpzJztcbmltcG9ydCBUaW1lbGluZSBmcm9tICcuL0NWQ29udGVudHNUaW1lbGluZS5qcyc7XG5pbXBvcnQgQ3JlYXRlQ2FudmFzIGZyb20gJy4vX2RldGFpbHMvQ3JlYXRlQ2FudmFzLmpzJztcbmltcG9ydCBGdWxsU2l6ZSBmcm9tICcuLi8uLi8uLi8uLi9NeUxpYnMvRGlzcGxheS9MYXlvdXQvRnVsbFNpemUuanMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDVkNvbnRlbnRzIHtcblxuICBjb25zdHJ1Y3RvcigpIHtcblxuICAgIHRoaXMuc2V0dXAoKTsgXG4gICAgLy8gdGhpcy5jcmVhdGUoKTtcbiAgICB0aGlzLnNldEV2ZW50cygpO1xuICAgIC8vIGxvb3BcbiAgICB0aGlzLmxvb3AgPSBuZXcgTG9vcCgpO1xuICAgIC8vIHRpbWVsaW5lXG4gICAgdGhpcy50aW1lbGluZSA9IG5ldyBUaW1lbGluZSgpO1xuXG4gIH1cblxuICBzZXR1cCgpIHtcblxuICAgIC8vIOODquOCveODvOOCueOBruODreODvOODiVxuICAgIC8vIGdiLmluLmxvYWRNZ3Iuc2VjMDJJbWcoKTtcbiAgICBcblxuICB9XG5cbiAgY3JlYXRlKCkge1xuXG4gICAgLy8gZ2IuaW4ucm0udG90YWwgKz0gMTtcbiAgICAvLyBjYW52YXPjga7nlJ/miJBcbiAgICAvLyDjg6zjg4bjgqPjg7zjg4rnlKjjgasy5YCNXG4gICAgZ2IuaW4uY2FudmFzID0gbmV3IENyZWF0ZUNhbnZhcygkKCcjYmdXcmFwIC5zZWMwMkJnQ2FudmFzJyksZ2IuaW4uY29uZi5kZWZXLGdiLmluLmNvbmYuZGVmSCwoKT0+e1xuXG4gICAgICB2YXIgbCA9IG5ldyBGdWxsU2l6ZSgkKCcjYmdXcmFwJyksJCgnLnNlYzAyQmdDYW52YXMnKSwwLCdGdWxsU2l6ZVNlYzAyQmdDYW52YXMnKTtcbiAgICAgIGwudGFyZ2V0RGVmVyA9IGdiLmluLmNvbmYuZGVmVztcbiAgICAgIGwudGFyZ2V0RGVmSCA9IGdiLmluLmNvbmYuZGVmSDtcbiAgICAgIGwucnVuKCk7XG5cbiAgICB9KTtcblxuICAgIC8vIHVp6L+95YqgKOOCs+ODs+ODiOODreODvOODqeODvOOAgXByb2ZpbGVy44Gq44GpKVxuICAgIC8vIHRoaXMuYWRkVUkoKTtcblxuXG4gIH1cblxuICBhZGRVSSgpIHtcblxuICAgIC8vIHBhcmFtcnRlcuiqv+aVtFxuICAgIC8vIGdiLmluLnBhcmFtID0gbmV3IGdiLlBhcmFtKCk7XG5cbiAgfVxuXG4gIHBsYXkoKSB7XG5cbiAgICB0aGlzLmxvb3Auc3RhcnQoKTtcbiAgICB0aGlzLnRpbWVsaW5lLnRsTWFpbi5wbGF5KCk7XG5cbiAgfVxuXG4gIHBhdXNlKCkge1xuXG4gICAgdGhpcy5sb29wLnBhdXNlKCk7XG4gICAgdGhpcy50aW1lbGluZS50bE1haW4ucGF1c2UoKTtcblxuICB9XG5cbiAgb25SZXNpemUoKSB7XG5cbiAgfVxuXG4gIHNldEV2ZW50cygpIHtcblxuICAgIC8vIGdiLmluLnIuYWRkKCdjdkNvbnRlbnRzJywgdGhpcy5vblJlc2l6ZS5iaW5kKHRoaXMpKTtcbiAgICAvLyBnYi5pbi5oYXNoLm9uQ2hhbmdlRnVuY0xpc3QucHVzaCh0aGlzLm9uU2VjdGlvbjAyLmJpbmQodGhpcykpO1xuXG4gIH1cblxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvVXNlcnMvVGVyYU1hYy9Eb2N1bWVudHMvMDBfU3RvY2svMTBfYmFzZS9mcm9udGVuZF9iYXNlX3ZlcjAyL2RldmVsb3BtZW50L3Byb2plY3QtbmFtZS9hc3NldHMvanMvX2RldmpzL3NyYy9EaXNwbGF5L0VmZmVjdHMvMDNfZWZmZWN0cy9TZWN0aW9uMDJCZy9DVkNvbnRlbnRzLmpzIiwiLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy9cbi8vICBDVkNvbnRlbnRzTG9vcFxuLy9cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ1ZDb250ZW50c0xvb3Age1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuXG4gICAgdGhpcy5pc0Fsd2F5cyA9IHRydWU7XG4gICAgdGhpcy5pc1J1blN0YXR1cyA9IHRydWU7XG4gICAgdGhpcy5pc0FkanVzdFBhcmFtID0gdHJ1ZTtcbiAgICB0aGlzLnN0YXRlID0gJ2luaXRpYWwnO1xuICAgIHRoaXMuc29tZXRpbWVzU3RhdGUgPSAnaW5pdGlhbCc7XG5cbiAgICB0aGlzLmxvb3BMaXN0ID0gW107XG5cbiAgICB0aGlzLmxvb3BTdGFydCA9IGZhbHNlO1xuXG4gICAgdGhpcy5zZXRFdmVudHMoKTtcblxuICB9XG5cbiAgdXBkYXRlKCkge1xuXG4gICAgaWYgKHRoaXMuaXNBbHdheXMpIHRoaXMucnVuQWx3YXlzKCk7XG4gICAgaWYgKHRoaXMuaXNSdW5TdGF0dXMpIHRoaXMucnVuU3RhdHVzKCk7XG4gICAgaWYgKHRoaXMuaXNBZGp1c3RQYXJhbSkgdGhpcy5ydW5BZGp1c3RQYXJhbSgpO1xuXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8g5bi444Gr6KGM44GG5Yem55CGXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAgICBcbiAgcnVuQWx3YXlzKCkge1xuXG4gICAgZm9yICh2YXIgaSBpbiB0aGlzLmxvb3BMaXN0KSB0aGlzLmxvb3BMaXN0W2ldKCk7XG5cbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyDlkITnirbmhYvjga7lh6bnkIZcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIHJ1blN0YXR1cygpIHtcblxuICAgIGlmICh0aGlzLnN0YXRlID09ICdpbml0aWFsJykge1xuXG5cbiAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUgPT0gJ3N0YXJ0Jykge1xuXG5cblxuICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZSA9PSAnc3RlcDAxJykge1xuXG5cblxuICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZSA9PSAnc3RlcDAyJykge1xuXG5cblxuICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZSA9PSAnc3RlcDAzJykge1xuXG5cblxuICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZSA9PSAnc3RhbmRieScpIHtcblxuXG4gICAgfSBlbHNlIGlmICh0aGlzLnN0YXRlID09ICdzb21ldGltZXMnKSB7XG5cbiAgICAgIGlmICh0aGlzLnNvbWV0aW1lc1N0YXRlID09ICdsaW5lU2hhZG93Jykge1xuXG5cbiAgICAgIH0gZWxzZSBpZiAodGhpcy5zb21ldGltZXNTdGF0ZSA9PSAnc3BoZXJlJykge1xuXG5cbiAgICAgIH0gZWxzZSBpZiAodGhpcy5zb21ldGltZXNTdGF0ZSA9PSAnc2F0ZWxsaXRlJykge1xuXG5cbiAgICAgIH1cblxuICAgIH1cblxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIOODkeODqeODoeODvOOCv+iqv+aVtOeUqOWHpueQhlxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgcnVuQWRqdXN0UGFyYW0oKSB7XG5cblxuXG4gIH1cblxuICBkcmF3KCkge1xuXG5cblxuICB9XG5cbiAgbG9vcCgpIHtcblxuICAgIGlmICh0aGlzLmxvb3BTdGFydCkge1xuXG4gICAgdGhpcy51cGRhdGUoKTtcbiAgICB0aGlzLmRyYXcoKTtcblxuICAgIC8vIGxvZygnc2VjdGlvbjAyJylcblxuICAgIH1cblxuICB9XG5cbiAgc3RhcnQoKSB7XG5cbiAgICB0aGlzLmxvb3BTdGFydCA9IHRydWU7XG5cbiAgfVxuXG4gIHBhdXNlKCkge1xuXG4gICAgdGhpcy5sb29wU3RhcnQgPSBmYWxzZTtcblxuICB9XG5cbiAgYWRkKGZ1bmMpIHtcblxuICAgIHRoaXMubG9vcExpc3QucHVzaChmdW5jKTtcbiAgICBcbiAgfVxuXG4gIHNldEV2ZW50cygpIHtcblxuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIGdiLmluLnVwLmFkZCgnc2VjdGlvbjAyQmcnLHRoaXMubG9vcC5iaW5kKHRoaXMpKTtcblxuICB9XG5cbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL1VzZXJzL1RlcmFNYWMvRG9jdW1lbnRzLzAwX1N0b2NrLzEwX2Jhc2UvZnJvbnRlbmRfYmFzZV92ZXIwMi9kZXZlbG9wbWVudC9wcm9qZWN0LW5hbWUvYXNzZXRzL2pzL19kZXZqcy9zcmMvRGlzcGxheS9FZmZlY3RzLzAzX2VmZmVjdHMvU2VjdGlvbjAyQmcvQ1ZDb250ZW50c0xvb3AuanMiLCIvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vL1xuLy8gIENWQ29udGVudHNUaW1lbGluZVxuLy9cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgIENWQ29udGVudHNUaW1lbGluZSB7XG5cbiAgY29uc3RydWN0b3IoKSB7XG5cbiAgICB0aGlzLnRsTWFpbiA9IG5ldyBUaW1lbGluZU1heCgpO1xuICAgIHRoaXMuc2V0dXAoKTtcbiAgICB0aGlzLnNldEV2ZW50cygpO1xuXG4gIH1cblxuICBzZXR1cCgpIHtcblxuICAgIC8vIOOCv+OCpOODoOODqeOCpOODs+OCkuatouOCgeOBpuOBiuOBj1xuICAgIHRoaXMudGxNYWluLnBhdXNlKCk7XG5cbiAgICB0aGlzLmJlZ2lubmluZygpO1xuICAgIHRoaXMuc3RlcDAxKCk7XG4gICAgdGhpcy5zdGVwMDIoKTtcbiAgICB0aGlzLnN0ZXAwMygpO1xuICAgIHRoaXMuc3RhbmRCeSgpO1xuICAgIHRoaXMuc29tZXRpbWVzKCk7XG5cbiAgfVxuXG4gIGJlZ2lubmluZygpIHtcblxuICB9XG5cbiAgc3RlcDAxKCkge1xuXG4gIH1cblxuICBzdGVwMDIoKSB7XG5cblxuICB9XG5cbiAgc3RlcDAzKCkge1xuXG4gICAgXG4gIH1cblxuICBzdGFuZEJ5KCkge1xuXG5cbiAgfVxuXG4gIC8vIOaZguOAhVxuICBzb21ldGltZXMoKSB7XG5cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICB0aGlzLnRsTWFpblxuICAgICAgLmFkZChmdW5jdGlvbigpe1xuXG4gICAgICB9LCcrPTAuMCcpICAgIFxuXG4gIH1cblxuICBvblJlc2l6c2UoKSB7XG5cblxuICB9XG5cbiAgc2V0RXZlbnRzKCkge1xuXG4gICAgLy8gZ2IuaW4uci5hZGQoJ2N2VGltZWxpbmUnLCB0aGlzLm9uUmVzaXpzZS5iaW5kKHRoaXMpKTtcblxuICB9XG5cbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL1VzZXJzL1RlcmFNYWMvRG9jdW1lbnRzLzAwX1N0b2NrLzEwX2Jhc2UvZnJvbnRlbmRfYmFzZV92ZXIwMi9kZXZlbG9wbWVudC9wcm9qZWN0LW5hbWUvYXNzZXRzL2pzL19kZXZqcy9zcmMvRGlzcGxheS9FZmZlY3RzLzAzX2VmZmVjdHMvU2VjdGlvbjAyQmcvQ1ZDb250ZW50c1RpbWVsaW5lLmpzIiwiLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vL1xuLy8gIENyZWF0ZUNhbnZhc1xuLy9cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuaW1wb3J0IENhbnZhcyBmcm9tICcuL0NhbnZhcy5qcyc7XG5pbXBvcnQgUGxhbmUgZnJvbSAnLi9QbGFuZS5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENyZWF0ZUNhbnZhcyB7XG5cbiAgY29uc3RydWN0b3IoJHdyYXAsdyxoLGNiPSgpPT57fSkge1xuXG4gICAgdGhpcy5jID0gbnVsbDtcbiAgICB0aGlzLmN3ID0gMDtcbiAgICB0aGlzLmNoID0gMDtcbiAgICBcbiAgICB0aGlzLmZpbGxTdHlsZSA9ICcwLDAsMCc7XG4gICAgdGhpcy4kd3JhcCA9ICR3cmFwO1xuXG4gICAgdGhpcy5sb29wTGlzdCA9IFtdO1xuXG4gICAgLy8g5pyA5Yid44Kq44OW44K444Kn44Kv44OI55Sf5oiQ44GZ44KL44Gf44KB44GrYm9vbGVhbiDjgYLjgYjjgabpgIbjgatcbiAgICB0aGlzLmlzUmVzaXplID0gKGdiLmluLnUuaXNSZXNQQyk/IGZhbHNlOiB0cnVlO1xuXG4gICAgdGhpcy5jYiA9IGNiO1xuXG4gICAgdGhpcy53ID0gMjYwO1xuICAgIHRoaXMuaCA9IDE0NjtcblxuICAgIHRoaXMuc2V0dXAoKTtcbiAgICB0aGlzLnNldEV2ZW50cygpO1xuICAgIHRoaXMuc2V0Q2FudmFzU2l6ZSh3LGgpO1xuICAgIHRoaXMudGltZWxpbmUoKTtcblxuICB9XG5cbiAgc2V0dXAoKSB7IC8vY2FudmFzIGZpbmdlciBwb2ludFxuXG4gICAgdGhpcy5jID0gbmV3IENhbnZhcygpO1xuXG4gICAgLy8gdGhpcy5hZGRPYmplY3RzKCk7XG4gICAgdGhpcy5vblJlc2l6ZSgpO1xuICAgIFxuICAgIHRoaXMuJHdyYXAuYXBwZW5kKHRoaXMuYy5jYW52YXMpO1xuXG4gICAgdGhpcy5jYigpO1xuXG4gIH1cblxuICBhZGRPYmplY3RzKHZ4KSB7IC8vY2FudmFzIGZpbmdlciBwb2ludFxuXG4gICAgdGhpcy5sb29wTGlzdCA9IFtdO1xuXG4gICAgdmFyIG9mZnNldCA9IDA7XG4gICAgdmFyIG9mZnNldEZyYW1lID0gMDtcbiAgICB2YXIgb2Zmc2V0VnggPSAwO1xuXG4gICAgdGhpcy54TnVtID0gODtcbiAgICB0aGlzLnlOdW0gPSA2O1xuICAgIHRoaXMubGVuID0gdGhpcy54TnVtICogdGhpcy55TnVtO1xuXG4gICAgdGhpcy50aWxlTGlzdCA9IFtdO1xuXG4gICAgaWYgKGdiLmluLnUuaXNQQykge1xuICAgICAgdmFyIHRvdGFsID0gZ2IuaW4uY29uZi5zZWMwMkltZ051bTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHRvdGFsID0gMTk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbjsgaSsrKSB7XG4gICAgXG4gICAgICB0aGlzLnRpbGUgPSBuZXcgUGxhbmUodGhpcy5jLmN0eCx0aGlzLmZpbGxTdHlsZSk7XG5cbiAgICAgIHZhciBudGggPSBpICUgdGhpcy54TnVtOyBcbiAgICAgIGlmIChudGggPT0gMCkgb2Zmc2V0ID0gLSA1MDAgKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA1MDApIC0gMjUwO1xuICAgICAgaWYgKG50aCA9PSAwKSBvZmZzZXRGcmFtZSA9IE1hdGguZmxvb3IodG90YWwgKiBNYXRoLnJhbmRvbSgpKTtcbiAgICAgIGlmIChudGggPT0gMCkgb2Zmc2V0VnggPSB2eCArIE1hdGguZmxvb3IodnggKiAyICogTWF0aC5yYW5kb20oKSk7XG5cbiAgICAgIHZhciB4ID0gbnRoICogdGhpcy53ICsgb2Zmc2V0O1xuICAgICAgdmFyIHkgPSBNYXRoLmZsb29yKGkgLyB0aGlzLnhOdW0pICogdGhpcy5oO1xuXG4gICAgICB0aGlzLnRpbGUuc2V0dXAoeCwgeSwgdGhpcy53LCB0aGlzLmgsIG9mZnNldEZyYW1lICsgbnRoICogMywgb2Zmc2V0VngsIG9mZnNldCk7XG4gICAgICB0aGlzLnRpbGVMaXN0LnB1c2godGhpcy50aWxlKTtcbiAgICAgIHRoaXMuYWRkKHRoaXMudGlsZS5sb29wLmJpbmQodGhpcy50aWxlKSk7XG4gICAgICBcbiAgICB9O1xuXG4gIH1cblxuICBzZXRDYW52YXNTaXplKHcsaCkge1xuXG4gICAgdGhpcy5jdyA9IHRoaXMuYy5jYW52YXMud2lkdGggPSB3O1xuICAgIHRoaXMuY2ggPSB0aGlzLmMuY2FudmFzLmhlaWdodCA9IGg7XG5cbiAgfVxuXG4gIGxvb3AoKSB7XG5cbiAgICAvLyB0aGlzLmMuY3R4LmNsZWFyUmVjdCgwLDAsdGhpcy5jdyx0aGlzLmNoKTtcbiAgICAvLyB0aGlzLmMuY3R4LmZpbGxTdHlsZSA9ICdyZ2JhKDI1NSwyNTUsMjU1LDAuMDgpJztcblxuICAgIHRoaXMuYy5jdHguZmlsbFN0eWxlID0gJ3JnYmEoMjU1LDI1NSwyNTUsMC42KSc7XG4gICAgdGhpcy5jLmN0eC5maWxsUmVjdCgwLDAsdGhpcy5jdyx0aGlzLmNoKTtcblxuICAgIGZvciAodmFyIGkgaW4gdGhpcy5sb29wTGlzdCkgdGhpcy5sb29wTGlzdFtpXSgpO1xuICAgIFxuICB9XG5cbiAgdGltZWxpbmUoKSB7XG5cblxuICB9XG5cbiAgYWRkKGZ1bmMpIHtcblxuICAgIHRoaXMubG9vcExpc3QucHVzaChmdW5jKTtcbiAgICBcbiAgfVxuXG4gIG9uUmVzaXplKCkge1xuXG4gICAgbG9nKGdiLmluLnUuaXNSZXNTUCxnYi5pbi51LmlzUmVzUEMpO1xuXG4gICAgaWYgKGdiLmluLnUuaXNSZXNTUCAmJiB0aGlzLmlzUmVzaXplKSB7XG4gICAgICB0aGlzLmlzUmVzaXplID0gZmFsc2U7XG5cbiAgICAgIHRoaXMuYWRkT2JqZWN0cygwLjUpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMudGlsZUxpc3QubGVuZ3RoOyBpKyspIHtcblxuICAgICAgICB0aGlzLnRpbGVMaXN0W2ldLmNudFN0b3AgPSB0cnVlO1xuXG4gICAgICB9O1xuXG4gICAgICBsb2coMTExMSlcblxuICAgIH0gZWxzZSBpZiAoZ2IuaW4udS5pc1Jlc1BDICYmICF0aGlzLmlzUmVzaXplKSB7XG4gICAgICB0aGlzLmlzUmVzaXplID0gdHJ1ZTtcblxuICAgICAgdGhpcy5hZGRPYmplY3RzKDAuNSk7XG5cbiAgICAgIC8vIOOCueODnuODm+OBoOOBo+OBn+OCieOAgeW6g+OBhOihqOekuuOBp+OCguODleODrOODvOODoOOBruWLleOBjeOCkuatouOCgeOCi1xuICAgICAgaWYgKGdiLmluLnUuaXNTUCkge1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy50aWxlTGlzdC5sZW5ndGg7IGkrKykge1xuXG4gICAgICAgICAgdGhpcy50aWxlTGlzdFtpXS5jbnRTdG9wID0gdHJ1ZTtcblxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybjtcblxuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMudGlsZUxpc3QubGVuZ3RoOyBpKyspIHtcblxuICAgICAgICB0aGlzLnRpbGVMaXN0W2ldLmNudFN0b3AgPSBmYWxzZTtcbiAgICAgICAgXG4gICAgICB9O1xuXG5cbiAgICAgIGxvZygyMjIyKTtcblxuICAgIH1cblxuICB9XG5cbiAgc2V0RXZlbnRzKCkge1xuXG4gICAgZ2IuaW4uU2VjMDJCZy5sb29wLmFkZCh0aGlzLmxvb3AuYmluZCh0aGlzKSk7XG4gICAgZ2IuaW4uci5hZGQoJ0NyZWF0ZUNhbnZhcycsIHRoaXMub25SZXNpemUuYmluZCh0aGlzKSk7XG5cbiAgfVxuXG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC9Vc2Vycy9UZXJhTWFjL0RvY3VtZW50cy8wMF9TdG9jay8xMF9iYXNlL2Zyb250ZW5kX2Jhc2VfdmVyMDIvZGV2ZWxvcG1lbnQvcHJvamVjdC1uYW1lL2Fzc2V0cy9qcy9fZGV2anMvc3JjL0Rpc3BsYXkvRWZmZWN0cy8wM19lZmZlY3RzL1NlY3Rpb24wMkJnL19kZXRhaWxzL0NyZWF0ZUNhbnZhcy5qcyIsIi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy9cbi8vICBDYW52YXNcbi8vXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FudmFzIHtcblxuICBjb25zdHJ1Y3RvcigpIHtcblxuICAgIHRoaXMuY2FudmFzID0gbnVsbDtcbiAgICB0aGlzLmN0eCA9IG51bGw7XG4gICAgdGhpcy53ID0gJCh3aW5kb3cpLndpZHRoKCk7XG4gICAgdGhpcy5oID0gJCh3aW5kb3cpLmhlaWdodCgpO1xuXG4gICAgdGhpcy5zZXR1cCgpO1xuXG4gIH1cblxuICBzZXR1cCAoKSB7XG5cbiAgICB0aGlzLmNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpOyBcbiAgICB0aGlzLmN0eCA9IHRoaXMuY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgdGhpcy5jYW52YXMud2lkdGggPSB0aGlzLnc7XG4gICAgdGhpcy5jYW52YXMuaGVpZ2h0ID0gdGhpcy5oO1xuICAgIFxuICB9XG5cbiAgdXBkYXRlICgpIHtcblxuICAgIFxuICB9XG5cbiAgZHJhdyAoKSB7XG5cbiAgICBcbiAgfVxuXG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC9Vc2Vycy9UZXJhTWFjL0RvY3VtZW50cy8wMF9TdG9jay8xMF9iYXNlL2Zyb250ZW5kX2Jhc2VfdmVyMDIvZGV2ZWxvcG1lbnQvcHJvamVjdC1uYW1lL2Fzc2V0cy9qcy9fZGV2anMvc3JjL0Rpc3BsYXkvRWZmZWN0cy8wM19lZmZlY3RzL1NlY3Rpb24wMkJnL19kZXRhaWxzL0NhbnZhcy5qcyIsIi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy9cbi8vICBQbGFuZVxuLy9cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQbGFuZSB7XG5cbiAgY29uc3RydWN0b3IoY3R4LHN0cm9rZVN0eWxlKXtcblxuICAgIHRoaXMuY3R4ID0gY3R4O1xuXG4gICAgdGhpcy5zdHJva2VTdHlsZSA9IHN0cm9rZVN0eWxlO1xuICAgIHRoaXMub3AgPSB7dmFsOjF9O1xuXG4gICAgdGhpcy5jbnQgPSAwO1xuXG4gICAgdGhpcy5jbnRTdG9wID0gZmFsc2U7XG5cbiAgICAvLyB0aGlzLnNldHVwKCk7XG4gICAgdGhpcy5jcmVhdGUoKTtcblxuICB9XG5cbiAgc2V0dXAoeCwgeSwgdywgaCwgZnJhbWVTdGFydCwgdngsIG9mZnNldCkge1xuXG4gICAgdGhpcy5pbWdMaXN0ID0gZ2IuaW4ubG9hZFNlYzAySW1nLmxpc3Q7XG5cbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gICAgdGhpcy53ID0gdztcbiAgICB0aGlzLmggPSBoO1xuXG4gICAgdGhpcy52eCA9IHZ4O1xuXG4gICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQ7XG5cbiAgICB0aGlzLmNudCA9IGZyYW1lU3RhcnQgO1xuXG4gIH1cblxuICBjcmVhdGUoKSB7XG5cblxuICB9XG5cbiAgLy8g6aCC54K544Gn5o+P44GPXG4gIHVwZGF0ZSgpIHtcblxuICAgIHRoaXMueCAtPSB0aGlzLnZ4O1xuICAgIGlmICh0aGlzLnggPCAtdGhpcy53KSB0aGlzLnggPSBnYi5pbi5jYW52YXMuY3cgLSAxMDtcblxuICB9XG5cbiAgZHJhdygpIHtcblxuICAgIGlmICghdGhpcy5jbnRTdG9wKSB7XG5cbiAgICAgIC8vIOmWk+W8leOBjVxuICAgICAgaWYgKGdiLmluLnVwLmNudCUzPT0wKSB0aGlzLmNudCsrO1xuICAgICAgZWxzZSA7XG5cbiAgICB9O1xuICAgIC8vIHRoaXMuY250Kys7XG5cbiAgICBpZiAoZ2IuaW4udS5pc1BDKSB7XG4gICAgICB2YXIgdG90YWwgPSBnYi5pbi5jb25mLnNlYzAySW1nTnVtO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdG90YWwgPSAxOTtcbiAgICB9XG4gICAgXG4gICAgdmFyIGltZyA9IHRoaXMuaW1nTGlzdFt0aGlzLmNudCV0b3RhbF07XG4gICAgdGhpcy5jdHguZHJhd0ltYWdlKGltZywgdGhpcy54LCB0aGlzLnksIHRoaXMudywgdGhpcy5oKTtcbiAgICBcbiAgfVxuXG4gIGxvb3AoKSB7XG5cbiAgICB0aGlzLnVwZGF0ZSgpO1xuICAgIHRoaXMuZHJhdygpO1xuICAgIFxuICB9XG5cbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL1VzZXJzL1RlcmFNYWMvRG9jdW1lbnRzLzAwX1N0b2NrLzEwX2Jhc2UvZnJvbnRlbmRfYmFzZV92ZXIwMi9kZXZlbG9wbWVudC9wcm9qZWN0LW5hbWUvYXNzZXRzL2pzL19kZXZqcy9zcmMvRGlzcGxheS9FZmZlY3RzLzAzX2VmZmVjdHMvU2VjdGlvbjAyQmcvX2RldGFpbHMvUGxhbmUuanMiLCIvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vL1xuLy8gIEdsQ29udGVudHNcbi8vXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5pbXBvcnQgTG9vcCBmcm9tICcuL0dsQ29udGVudHNMb29wLmpzJztcbmltcG9ydCBUaW1lbGluZSBmcm9tICcuL0dsQ29udGVudHNUaW1lbGluZS5qcyc7XG5pbXBvcnQgUGxhbmUgZnJvbSAnLi9fZGV0YWlscy9QbGFuZS5qcyc7XG5pbXBvcnQgUGFyYW0gZnJvbSAnLi4vLi4vUGFyYW0uanMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHbENvbnRlbnRzIHtcblxuICBjb25zdHJ1Y3Rvcigkd3JhcCA9ICQoJ2JvZHknKSkge1xuXG4gICAgdGhpcy5yZW5kZXJlcjtcbiAgICB0aGlzLmNhbWVyYTtcbiAgICB0aGlzLnNjZW5lO1xuICAgIHRoaXMubGlnaHQ7XG5cbiAgICB0aGlzLnN0YXRlID0gJ2luaXRpYWwnO1xuICAgIHRoaXMuYWRqdXN0UGFyYW0gPSB0cnVlO1xuICAgIHRoaXMuc3RhdGVMaW5lUm90YXRlID0gZmFsc2U7XG4gICAgdGhpcy5zb21ldGltZXNTdGF0ZSA9ICdpbml0aWFsJztcblxuICAgIHRoaXMuaXNDb250cm9sID0gZmFsc2U7XG4gICAgdGhpcy5jb250cm9scztcblxuICAgIHRoaXMuc2V0dXAoKTtcbiAgICB0aGlzLmNyZWF0ZSgkd3JhcCk7XG4gICAgdGhpcy5zZXRFdmVudHMoKTtcbiAgICAvLyBsb29wXG4gICAgdGhpcy5sb29wID0gbmV3IExvb3AoKTtcbiAgICAvLyB0aW1lbGluZVxuICAgIHRoaXMudGltZWxpbmUgPSBuZXcgVGltZWxpbmUoKTtcblxuICB9XG5cbiAgc2V0dXAoKSB7XG5cblxuICB9XG5cbiAgY3JlYXRlKCR3cmFwKSB7XG5cbiAgICAvLyByZW5kZXJcbiAgICBnYi5pbi5yZW5kZXJlciA9IHRoaXMucmVuZGVyZXIgPSBuZXcgVEhSRUUuV2ViR0xSZW5kZXJlcih7YW50aWFsaWFzOiB0cnVlfSk7XG4gICAgdGhpcy5yZW5kZXJlci5zZXRTaXplKCBnYi5pbi5yLlcoKSwgZ2IuaW4uci5IKCkgKTtcbiAgICB0aGlzLnJlbmRlcmVyLnNldENsZWFyQ29sb3IoMHhmZmZmZmYsIDAuMCk7XG4gICAgJHdyYXAuYXBwZW5kKHRoaXMucmVuZGVyZXIuZG9tRWxlbWVudClcbiAgICAvLyBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKCAgKTtcbiAgICAkKHRoaXMucmVuZGVyZXIuZG9tRWxlbWVudCkuY3NzKHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgdG9wOiAwLGxlZnQ6IDAsXG4gICAgICAnei1pbmRleCc6IDEsXG4gICAgfSk7XG5cbiAgICAvLyBzY2VuZVxuICAgIGdiLmluLnNjZW5lID0gbmV3IGdiLlNjZW5lKCk7XG4gICAgdGhpcy5zY2VuZSA9IGdiLmluLnNjZW5lLnNjZW5lO1xuXG4gICAgLy8gY2FtZXJhXG4gICAgZ2IuaW4uY2FtZXJhID0gbmV3IGdiLkNhbWVyYSgpO1xuICAgIHRoaXMuY2FtZXJhID0gZ2IuaW4uY2FtZXJhLmNhbWVyYTtcblxuICAgIC8vIGxpZ2h0XG4gICAgdGhpcy5saWdodCA9IG5ldyBUSFJFRS5EaXJlY3Rpb25hbExpZ2h0KCAweGZmZmZmZiwgMyApO1xuICAgIHRoaXMubGlnaHQucG9zaXRpb24ueiA9IDM7XG4gICAgdGhpcy5zY2VuZS5hZGQodGhpcy5saWdodCk7XG5cbiAgICAvLyDjgqrjg5bjgrjjgqfjgq/jg4jov73liqBcbiAgICB0aGlzLmFkZE9iamVjdHMoKTtcblxuICAgIC8vIHVp6L+95YqgKOOCs+ODs+ODiOODreODvOODqeODvOOAgXByb2ZpbGVy44Gq44GpKVxuICAgIC8vIHRoaXMuYWRkVUkoKTtcblxuICAgIC8vIOODquOCveODvOOCueOBruODreODvOODiVxuICAgIGdiLmluLmxvYWRNZ3Iuc2VjdGlvbjA0UHJvZHVjdFNoYWRlcigpO1xuXG4gIH1cblxuICBhZGRPYmplY3RzKCkge1xuXG4gICAgdGhpcy5wbGFuZSA9IG5ldyBQbGFuZSgpO1xuXG4gIH1cblxuICBhZGRVSSgpIHtcblxuICAgIC8vIGNvbnRyb2xzXG5cbiAgICBpZiAodGhpcy5pc0NvbnRyb2wpIHtcblxuICAgICAgZ2IuaW4uY29udHJvbHMgPSB0aGlzLmNvbnRyb2xzID0gbmV3IFRIUkVFLlRyYWNrYmFsbENvbnRyb2xzKHRoaXMuY2FtZXJhKTtcbiAgICAgIHRoaXMuY29udHJvbHMuem9vbVNwZWVkID0gMC44O1xuICAgICAgdGhpcy5jb250cm9scy5yb3RhdGVTcGVlZCA9IDM7XG5cbiAgICB9O1xuXG4gICAgLy8gcHJvZmlsZXLoqK3lrppcbiAgICBuZXcgZ2IuUHJvZmlsZXIoKTtcbiAgICAvLyBwYXJhbXJ0ZXLoqr/mlbRcbiAgICBnYi5pbi5wYXJhbSA9IG5ldyBQYXJhbSgpO1xuXG4gIH1cblxuICBvblJlc2l6ZSgpIHtcblxuICAgIHZhciB3ID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgdmFyIGggPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG5cbiAgICB0aGlzLnJlbmRlcmVyLnNldFNpemUodywgaCk7XG4gICAgdGhpcy5jYW1lcmEuYXNwZWN0ID0gdyAvIGg7XG4gICAgdGhpcy5jYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuXG4gIH1cblxuICBvblNlY3Rpb24wNChjdXIscHJldikge1xuXG4gICAgaWYgKGN1ciA9PSAncHJvZHVjdCcpIHtcblxuICAgICAgdGhpcy5sb29wLnN0YXJ0KCk7XG4gICAgICB0aGlzLnRpbWVsaW5lLnRsTWFpbi5wbGF5KCk7XG5cbiAgICB9IGVsc2Uge1xuXG4gICAgICB0aGlzLmxvb3AucGF1c2UoKTtcbiAgICAgIHRoaXMudGltZWxpbmUudGxNYWluLnBhdXNlKCk7XG5cbiAgICB9XG5cbiAgfVxuXG4gIHNldEV2ZW50cygpIHtcblxuICAgIGdiLmluLnIuYWRkKHRoaXMub25SZXNpemUuYmluZCh0aGlzKSk7XG4gICAgZ2IuaW4uaGFzaC5vbkNoYW5nZUZ1bmNMaXN0LnB1c2godGhpcy5vblNlY3Rpb24wNC5iaW5kKHRoaXMpKTtcbiAgICAkKHdpbmRvdykub24oJ29uU2VjdGlvbjA0UHJvZHVjdEltZycsICgpPT57dGhpcy50aW1lbGluZS5zZXR1cCgpO30pO1xuXG4gIH1cblxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvVXNlcnMvVGVyYU1hYy9Eb2N1bWVudHMvMDBfU3RvY2svMTBfYmFzZS9mcm9udGVuZF9iYXNlX3ZlcjAyL2RldmVsb3BtZW50L3Byb2plY3QtbmFtZS9hc3NldHMvanMvX2RldmpzL3NyYy9EaXNwbGF5L0VmZmVjdHMvMDNfZWZmZWN0cy9TZWN0aW9uMDRQcm9kdWN0L0dsQ29udGVudHMuanMiLCIvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vL1xuLy8gIEdsQ29udGVudHNMb29wXG4vL1xuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHbENvbnRlbnRzTG9vcCB7XG5cbiAgY29uc3RydWN0b3IoKSB7XG5cbiAgICB0aGlzLmlzQWx3YXlzID0gdHJ1ZTtcbiAgICB0aGlzLmlzUnVuU3RhdHVzID0gdHJ1ZTtcbiAgICB0aGlzLmlzQWRqdXN0UGFyYW0gPSB0cnVlO1xuICAgIHRoaXMuc3RhdGUgPSAnaW5pdGlhbCc7XG4gICAgdGhpcy5zb21ldGltZXNTdGF0ZSA9ICdpbml0aWFsJztcblxuICAgIHRoaXMubG9vcFN0YXJ0ID0gZmFsc2U7XG5cbiAgICB0aGlzLmxvb3BMaXN0ID0gW107XG5cbiAgICB0aGlzLnNldEV2ZW50cygpO1xuXG4gIH1cblxuICB1cGRhdGUoKSB7XG5cbiAgICBpZiAodGhpcy5pc0Fsd2F5cykgdGhpcy5ydW5BbHdheXMoKTtcbiAgICBpZiAodGhpcy5pc1J1blN0YXR1cykgdGhpcy5ydW5TdGF0dXMoKTtcbiAgICBpZiAodGhpcy5pc0FkanVzdFBhcmFtKSB0aGlzLnJ1bkFkanVzdFBhcmFtKCk7XG5cbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyDluLjjgavooYzjgYblh6bnkIZcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICAgIFxuICBydW5BbHdheXMoKSB7XG5cbiAgICBpZiAoZ2IuaW4uU2VjdGlvbjA0UHJvZHVjdC5pc0NvbnRyb2wpIGdiLmluLmNvbnRyb2xzLnVwZGF0ZSgpO1xuXG4gICAgLy8gY2FtZXJhXG4gICAgZ2IuaW4uY2FtZXJhLnVwZGF0ZUNvbnRyb2xsKCk7XG5cbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyDlkITnirbmhYvjga7lh6bnkIZcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIHJ1blN0YXR1cygpIHtcblxuICAgIGlmICh0aGlzLnN0YXRlID09ICdpbml0aWFsJykge1xuXG5cbiAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUgPT0gJ3N0YXJ0Jykge1xuXG5cblxuICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZSA9PSAnc3RlcDAxJykge1xuXG5cblxuICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZSA9PSAnc3RlcDAyJykge1xuXG5cblxuICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZSA9PSAnc3RlcDAzJykge1xuXG5cblxuICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZSA9PSAnc3RhbmRieScpIHtcblxuXG4gICAgfSBlbHNlIGlmICh0aGlzLnN0YXRlID09ICdzb21ldGltZXMnKSB7XG5cbiAgICAgIGlmICh0aGlzLnNvbWV0aW1lc1N0YXRlID09ICdsaW5lU2hhZG93Jykge1xuXG5cbiAgICAgIH0gZWxzZSBpZiAodGhpcy5zb21ldGltZXNTdGF0ZSA9PSAnc3BoZXJlJykge1xuXG5cbiAgICAgIH0gZWxzZSBpZiAodGhpcy5zb21ldGltZXNTdGF0ZSA9PSAnc2F0ZWxsaXRlJykge1xuXG5cbiAgICAgIH1cblxuICAgIH1cblxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIOODkeODqeODoeODvOOCv+iqv+aVtOeUqOWHpueQhlxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgcnVuQWRqdXN0UGFyYW0oKSB7XG5cblxuXG4gIH1cblxuICBkcmF3KCkge1xuXG4gICAgZ2IuaW4ucmVuZGVyZXIucmVuZGVyKCBnYi5pbi5zY2VuZS5zY2VuZSwgZ2IuaW4uY2FtZXJhLmNhbWVyYSApO1xuICAgIC8vIGdiLmluLnBvc3Rwcm9jZXNzLmNvbXBvc2VyLnJlbmRlcigwLjEpO1xuXG4gIH1cblxuICBsb29wKCkge1xuXG4gICAgaWYgKHRoaXMubG9vcFN0YXJ0KSB7XG5cbiAgICB0aGlzLnVwZGF0ZSgpO1xuICAgIHRoaXMuZHJhdygpO1xuXG4gICAgbG9nKCdzZWN0aW9uMDQnKVxuXG4gICAgfVxuXG4gIH1cblxuICBzdGFydCgpIHtcblxuICAgIHRoaXMubG9vcFN0YXJ0ID0gdHJ1ZTtcblxuICB9XG5cbiAgcGF1c2UoKSB7XG5cbiAgICB0aGlzLmxvb3BTdGFydCA9IGZhbHNlO1xuXG4gIH1cblxuICBhZGQoZnVuYykge1xuXG4gICAgdGhpcy5sb29wTGlzdC5wdXNoKGZ1bmMpO1xuICAgIFxuICB9XG5cbiAgc2V0RXZlbnRzKCkge1xuXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgZ2IuaW4udXAuYWRkKCdzZWN0aW9uMDRQcm9kdWN0Jyx0aGlzLmxvb3AuYmluZCh0aGlzKSk7XG5cbiAgfVxuXG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC9Vc2Vycy9UZXJhTWFjL0RvY3VtZW50cy8wMF9TdG9jay8xMF9iYXNlL2Zyb250ZW5kX2Jhc2VfdmVyMDIvZGV2ZWxvcG1lbnQvcHJvamVjdC1uYW1lL2Fzc2V0cy9qcy9fZGV2anMvc3JjL0Rpc3BsYXkvRWZmZWN0cy8wM19lZmZlY3RzL1NlY3Rpb24wNFByb2R1Y3QvR2xDb250ZW50c0xvb3AuanMiLCIvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vL1xuLy8gIEdsQ29udGVudHNUaW1lbGluZVxuLy9cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuaW1wb3J0IFNvbWVUaW1lcyBmcm9tICcuLi8uLi8uLi8uLi9NeUxpYnMvRXZlbnRNZ3IvU29tZXRpbWVzTWdyLmpzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2xDb250ZW50c1RpbWVsaW5lIHtcblxuICBjb25zdHJ1Y3RvcigpIHtcblxuICAgIHRoaXMudGxNYWluID0gbmV3IFRpbWVsaW5lTWF4KCk7XG4gICAgLy8gdGhpcy5zZXR1cCgpO1xuICAgIHRoaXMuc2V0RXZlbnRzKCk7XG5cbiAgfVxuXG4gIHNldHVwKCkge1xuXG4gICAgLy8g44K/44Kk44Og44Op44Kk44Oz44KS5q2i44KB44Gm44GK44GPXG4gICAgdGhpcy50bE1haW4ucGF1c2UoKTtcbiAgICBcbiAgICB0aGlzLmJlZ2lubmluZygpO1xuICAgIC8vIHRoaXMuc3RlcDAxKCk7XG4gICAgLy8gdGhpcy5zdGVwMDIoKTtcbiAgICAvLyB0aGlzLnN0ZXAwMygpO1xuICAgIC8vIHRoaXMuc3RhbmRCeSgpO1xuICAgIHRoaXMuc29tZXRpbWVzKCk7ICAgIFxuXG4gIH1cblxuICBiZWdpbm5pbmcoKSB7XG5cbiAgICB0aGlzLnRsTWFpblxuICAgICAgLy8gem9vbSBpblxuICAgICAgLnRvKGdiLmluLmxvYWRNZ3Iuc2hhZGVyc1swXS51bmlmb3Jtcy5zdHJlbmd0aCwgMS4zLCB7XG4gICAgICAgIHZhbHVlOiA1MDAsXG4gICAgICAgIGVhc2U6IEV4cG8uZWFzZUluT3V0LFxuICAgICAgICBvblN0YXJ0OiAoKT0+IHtcblxuICAgICAgICAgIFR3ZWVuTWF4LnNldChnYi5pbi5sb2FkTWdyLnNoYWRlcnNbMV0udW5pZm9ybXMuc3RyZW5ndGgsIHt2YWx1ZTogNTAwfSk7XG5cbiAgICAgICAgfVxuICAgICAgfSlcblxuICAgICAgLy8gY2FtZXJh56e75YuVXG4gICAgICAudG8oZ2IuaW4uY2FtZXJhLmNhbWVyYS5wb3NpdGlvbiwgMS41LCB7XG4gICAgICAgIHo6IDIwMCxcbiAgICAgICAgZWFzZTogRXhwby5lYXNlSW5PdXRcbiAgICAgIH0sJy09MS4zJylcblxuICAgICAgLy8gcGxhbmXnp7vli5VcbiAgICAgIC50byhnYi5pbi5TZWN0aW9uMDRQcm9kdWN0LnBsYW5lLnBsYW5lLnBvc2l0aW9uLCAxLjUsIHtcbiAgICAgICAgeDogLTEwMCxcbiAgICAgICAgeTogMjAwLFxuICAgICAgICBlYXNlOiBFeHBvLmVhc2VJbk91dFxuICAgICAgfSwnLT0xLjUnKVxuXG4gICAgICAvLyB6b29tIG91dFxuICAgICAgLnRvKGdiLmluLmxvYWRNZ3Iuc2hhZGVyc1swXS51bmlmb3Jtcy5zdHJlbmd0aCwgMSwge1xuICAgICAgICB2YWx1ZTogMCxcbiAgICAgICAgZWFzZTogRXhwby5lYXNlSW5cbiAgICAgIH0sJy09MC40JylcblxuICAgICAgLy8gcGxhbmUwMeOBjG9wYWNpdHnjgafmtojjgYjjgotcbiAgICAgIC50byhnYi5pbi5sb2FkTWdyLnNoYWRlcnNbMF0udW5pZm9ybXMub3BhY2l0eSwgMSwge1xuICAgICAgICB2YWx1ZTogMCxcbiAgICAgICAgZWFzZTogUG93ZXIzLmVhc2VJbk91dFxuICAgICAgfSwnLT0wLjcnKVxuXG4gICAgICAvLyBwbGFuZTAy44GuYmx1ciBvdXRcbiAgICAgIC50byhnYi5pbi5sb2FkTWdyLnNoYWRlcnNbMV0udW5pZm9ybXMuc3RyZW5ndGgsIDEsIHtcbiAgICAgICAgdmFsdWU6IDAsXG4gICAgICAgIGVhc2U6IEV4cG8uZWFzZUluT3V0XG4gICAgICB9LCctPTEuMCcpXG5cbiAgICAgIC8vIHBsYW5lMDLjgYzlh7rjgabmnaXjgotcbiAgICAgIC50byhnYi5pbi5sb2FkTWdyLnNoYWRlcnNbMV0udW5pZm9ybXMub3BhY2l0eSwgMSwge1xuICAgICAgICB2YWx1ZTogMSxcbiAgICAgICAgZWFzZTogRXhwby5lYXNlSW5PdXRcbiAgICAgIH0sJy09MS4wJylcblxuICAgICAgLnRvKGdiLmluLmNhbWVyYS5jYW1lcmEucG9zaXRpb24sIDEuNSwge1xuICAgICAgICB6OiA0MDAsXG4gICAgICAgIGVhc2U6IEV4cG8uZWFzZU91dCxcbiAgICAgICAgb25Db21wbGV0ZTogKCk9PiB7XG5cbiAgICAgICAgICAvLyBtYXRlcmlhbOOBruWkieabtFxuXG4gICAgICAgICAgZ2IuaW4ubG9hZE1nci5zaGFkZXJzWzJdLnVuaWZvcm1zLmZyb20udmFsdWUgPSBnYi5pbi5TZWN0aW9uMDRQcm9kdWN0LnBsYW5lLnRleHR1cmVzWzFdO1xuICAgICAgICAgIGdiLmluLmxvYWRNZ3Iuc2hhZGVyc1syXS51bmlmb3Jtcy50by52YWx1ZSA9IGdiLmluLlNlY3Rpb24wNFByb2R1Y3QucGxhbmUudGV4dHVyZXNbMl07XG5cbiAgICAgICAgICBnYi5pbi5TZWN0aW9uMDRQcm9kdWN0LnBsYW5lLnBsYW5lMDIubWF0ZXJpYWwgPSBuZXcgVEhSRUUuU2hhZGVyTWF0ZXJpYWwoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmlmb3JtczogZ2IuaW4ubG9hZE1nci5zaGFkZXJzWzJdLnVuaWZvcm1zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRleFNoYWRlcjogZ2IuaW4ubG9hZE1nci5zaGFkZXJzWzJdLnZzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyYWdtZW50U2hhZGVyOiBnYi5pbi5sb2FkTWdyLnNoYWRlcnNbMl0uZnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNwYXJlbnQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgZ2IuaW4uU2VjdGlvbjA0UHJvZHVjdC5wbGFuZS5wbGFuZTAyLnNjYWxlLnggPSBnYi5pbi5TZWN0aW9uMDRQcm9kdWN0LnBsYW5lLnBsYW5lMDIuc2NhbGUueSA9IDEyMDAuMDtcblxuXG4gICAgICAgIH1cbiAgICAgIH0sJy09MS4wJylcblxuXG5cbiAgfVxuXG4gIHN0ZXAwMSgpIHtcblxuXG4gIH1cblxuICBzdGVwMDIoKSB7XG5cblxuXG4gIH1cblxuICBzdGVwMDMoKSB7XG5cblxuXG4gIH1cblxuICBzdGFuZEJ5KCkge1xuXG5cbiAgfVxuXG4gIC8vIOaZguOAhVxuICBzb21ldGltZXMoKSB7XG5cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICB0aGlzLnRsTWFpblxuICAgICAgLmFkZChmdW5jdGlvbigpe1xuXG5cbiAgICAgICAgdmFyIHMgPSBuZXcgU29tZVRpbWVzKCk7XG5cbiAgICAgICAgcy5hZGQoZnVuY3Rpb24oKXtcblxuICAgICAgICAgIFR3ZWVuTWF4LnRvKGdiLmluLmxvYWRNZ3Iuc2hhZGVyc1syXS51bmlmb3Jtcy5wcm9ncmVzcywgMS4zLCB7XG4gICAgICAgICAgICB2YWx1ZTogMSxcbiAgICAgICAgICAgIGVhc2U6IEV4cG8uZWFzZUluT3V0LFxuICAgICAgICAgICAgb25Db21wbGV0ZTogKCk9PntcblxuICAgICAgICAgICAgICBnYi5pbi5sb2FkTWdyLnNoYWRlcnNbMl0udW5pZm9ybXMuZnJvbS52YWx1ZSA9IGdiLmluLlNlY3Rpb24wNFByb2R1Y3QucGxhbmUudGV4dHVyZXNbM107XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0pXG5cbiAgICAgICAgICBcbiAgICAgICAgICBcblxuICAgICAgICB9LCAyLjAsIDIuMClcblxuICAgICAgICBzLmFkZChmdW5jdGlvbigpe1xuXG4gICAgICAgICAgVHdlZW5NYXgudG8oZ2IuaW4ubG9hZE1nci5zaGFkZXJzWzJdLnVuaWZvcm1zLnByb2dyZXNzLCAxLjMsIHtcbiAgICAgICAgICAgIHZhbHVlOiAwLFxuICAgICAgICAgICAgZWFzZTogRXhwby5lYXNlSW5PdXQsXG4gICAgICAgICAgICBvbkNvbXBsZXRlOiAoKT0+e1xuXG4gICAgICAgICAgICAgIGdiLmluLmxvYWRNZ3Iuc2hhZGVyc1syXS51bmlmb3Jtcy50by52YWx1ZSA9IGdiLmluLlNlY3Rpb24wNFByb2R1Y3QucGxhbmUudGV4dHVyZXNbNF07XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0pXG5cblxuICAgICAgICB9LCAyLjAsIDIuMClcblxuICAgICAgICBzLmFkZChmdW5jdGlvbigpe1xuXG4gICAgICAgICAgVHdlZW5NYXgudG8oZ2IuaW4ubG9hZE1nci5zaGFkZXJzWzJdLnVuaWZvcm1zLnByb2dyZXNzLCAxLjMsIHtcbiAgICAgICAgICAgIHZhbHVlOiAxLFxuICAgICAgICAgICAgZWFzZTogRXhwby5lYXNlSW5PdXQsXG4gICAgICAgICAgICBvbkNvbXBsZXRlOiAoKT0+e1xuXG4gICAgICAgICAgICAgIGdiLmluLmxvYWRNZ3Iuc2hhZGVyc1syXS51bmlmb3Jtcy5mcm9tLnZhbHVlID0gZ2IuaW4uU2VjdGlvbjA0UHJvZHVjdC5wbGFuZS50ZXh0dXJlc1s1XTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSlcblxuICAgICAgICB9LCAyLjAsIDIuMClcblxuICAgICAgICBzLmFkZChmdW5jdGlvbigpe1xuXG4gICAgICAgICAgVHdlZW5NYXgudG8oZ2IuaW4ubG9hZE1nci5zaGFkZXJzWzJdLnVuaWZvcm1zLnByb2dyZXNzLCAxLjMsIHtcbiAgICAgICAgICAgIHZhbHVlOiAwLFxuICAgICAgICAgICAgZWFzZTogRXhwby5lYXNlSW5PdXQsXG4gICAgICAgICAgICBvbkNvbXBsZXRlOiAoKT0+e1xuXG4gICAgICAgICAgICAgIGdiLmluLmxvYWRNZ3Iuc2hhZGVyc1syXS51bmlmb3Jtcy50by52YWx1ZSA9IGdiLmluLlNlY3Rpb24wNFByb2R1Y3QucGxhbmUudGV4dHVyZXNbMV07XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0pXG5cblxuICAgICAgICB9LCAyLjAsIDIuMClcblxuICAgICAgICBzLmFkZChmdW5jdGlvbigpe1xuXG4gICAgICAgICAgVHdlZW5NYXgudG8oZ2IuaW4ubG9hZE1nci5zaGFkZXJzWzJdLnVuaWZvcm1zLnByb2dyZXNzLCAxLjMsIHtcbiAgICAgICAgICAgIHZhbHVlOiAxLFxuICAgICAgICAgICAgZWFzZTogRXhwby5lYXNlSW5PdXQsXG4gICAgICAgICAgICBvbkNvbXBsZXRlOiAoKT0+e1xuXG4gICAgICAgICAgICAgIGdiLmluLmxvYWRNZ3Iuc2hhZGVyc1syXS51bmlmb3Jtcy5mcm9tLnZhbHVlID0gZ2IuaW4uU2VjdGlvbjA0UHJvZHVjdC5wbGFuZS50ZXh0dXJlc1syXTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSlcblxuXG4gICAgICAgIH0sIDIuMCwgMi4wKTtcblxuICAgICAgICBzLnN0YXJ0KCk7XG5cbiAgICAgIH0sJys9MC4wJylcbiAgICBcblxuICB9XG5cbiAgb25SZXNpenNlKCkge1xuXG4gIH1cblxuXG4gIHNldEV2ZW50cygpIHtcblxuICAgIGdiLmluLnIuYWRkKHRoaXMub25SZXNpenNlLmJpbmQodGhpcykpO1xuXG4gICAgJCh3aW5kb3cpLm9uKCdjbGljaycsKCk9PntcblxuICAgICAgLy8gdGhpcy5zdGFydCgpO1xuXG4gICAgfSk7XG5cbiAgfVxuXG5cbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL1VzZXJzL1RlcmFNYWMvRG9jdW1lbnRzLzAwX1N0b2NrLzEwX2Jhc2UvZnJvbnRlbmRfYmFzZV92ZXIwMi9kZXZlbG9wbWVudC9wcm9qZWN0LW5hbWUvYXNzZXRzL2pzL19kZXZqcy9zcmMvRGlzcGxheS9FZmZlY3RzLzAzX2VmZmVjdHMvU2VjdGlvbjA0UHJvZHVjdC9HbENvbnRlbnRzVGltZWxpbmUuanMiLCIvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vL1xuLy8gIFNvbWVUaW1lc1xuLy9cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU29tZVRpbWVzIHtcblxuICBjb25zdHJ1Y3RvcigpIHtcblxuICAgIHRoaXMuU29tZVRpbWVzO1xuICAgIHRoaXMuVGltZXIgPSBudWxsO1xuICAgIHRoaXMuY2JMaXN0ID0gW107XG4gICAgdGhpcy5sZW4gPSAwO1xuICAgIHRoaXMub3JkZXIgPSAwO1xuXG4gICAgdGhpcy5taW4gPSBbXTtcbiAgICB0aGlzLm1heCA9IFtdO1xuXG4gICAgdGhpcy5zZXR1cCgpO1xuXG4gIH1cblxuICBzZXR1cCgpIHtcblxuXG4gIH1cblxuICBzdGFydChtaW49MCwgbWF4PTApIHtcblxuICAgIHRoaXMubGF0ZXIgPSBnYi5pbi51LnJhbmRvbShtaW4sbWF4KSAqIDEwMDA7XG4gICAgdGhpcy5UaW1lciA9IHNldFRpbWVvdXQodGhpcy5ydW4uYmluZCh0aGlzKSx0aGlzLmxhdGVyKTtcblxuICB9XG5cbiAgcnVuKCkge1xuXG4gICAgdGhpcy5vcmRlciA9IHRoaXMub3JkZXIgJSB0aGlzLmxlbjtcblxuICAgIHRoaXMubGF0ZXIgPSBnYi5pbi51LnJhbmRvbSh0aGlzLm1pblt0aGlzLm9yZGVyXSx0aGlzLm1heFt0aGlzLm9yZGVyXSkgKiAxMDAwO1xuXG4gICAgdGhpcy5jYkxpc3RbdGhpcy5vcmRlcl0oKTtcblxuICAgIHRoaXMub3JkZXIrKztcbiAgICB0aGlzLlRpbWVyID0gc2V0VGltZW91dCh0aGlzLnJ1bi5iaW5kKHRoaXMpLHRoaXMubGF0ZXIpO1xuXG4gIH1cblxuICBzdG9wKCkge1xuXG4gICAgbG9nKHRoaXMuVGltZXIpO1xuICAgIGNsZWFyVGltZW91dCh0aGlzLlRpbWVyKTtcblxuICB9XG5cbiAgYWRkKGZ1bmMsbWluPTgsbWF4PTEyKSB7XG5cbiAgICB0aGlzLm1pbi5wdXNoKG1pbik7XG4gICAgdGhpcy5tYXgucHVzaChtYXgpO1xuXG4gICAgdGhpcy5jYkxpc3QucHVzaChmdW5jKTtcbiAgICB0aGlzLmxlbiA9IHRoaXMuY2JMaXN0Lmxlbmd0aDtcblxuICB9XG5cbiAgc2V0RXZlbnRzKCkge1xuXG5cbiAgfVxuXG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC9Vc2Vycy9UZXJhTWFjL0RvY3VtZW50cy8wMF9TdG9jay8xMF9iYXNlL2Zyb250ZW5kX2Jhc2VfdmVyMDIvZGV2ZWxvcG1lbnQvcHJvamVjdC1uYW1lL2Fzc2V0cy9qcy9fZGV2anMvc3JjL015TGlicy9FdmVudE1nci9Tb21ldGltZXNNZ3IuanMiLCIvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vL1xuLy8gIFBsYW5lXG4vL1xuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQbGFuZSB7XG5cbiAgY29uc3RydWN0b3IoKSB7XG5cbiAgICB0aGlzLmdlb21ldHJ5ID0gbnVsbDtcbiAgICB0aGlzLm1hdGVyaWFsID0gbnVsbDtcblxuICAgIHRoaXMudmlkZW8gPSBudWxsO1xuICAgIHRoaXMucGxhbmUgPSBudWxsO1xuXG4gICAgdGhpcy5kZWZXVyA9IDE5MjA7XG4gICAgdGhpcy5kZWZISCA9IDEwODA7XG4gICAgdGhpcy5kZWZXID0gMzA1O1xuICAgIHRoaXMucmF0ZSA9IDA7XG4gICAgdGhpcy5yYXRlVyA9IDA7XG5cbiAgICB0aGlzLmxiID0gbnVsbDsgLy9sYXlvdXQgYmFja2dyb3VuZFxuXG4gICAgdGhpcy5zZXR1cCgpO1xuICAgIHRoaXMuc2V0RXZlbnRzKCk7XG5cbiAgfVxuXG4gIHNldHVwKCkge1xuXG5cbiAgfVxuXG4gIGNyZWF0ZShjYikge1xuXG4gICAgdmFyIHRleHR1cmVzID0gdGhpcy50ZXh0dXJlcyAgPSBnYi5pbi5sb2FkTWdyLnRleHR1cmVzO1xuXG4gICAgdmFyIHcgPSB0ZXh0dXJlc1swXS5pbWFnZS53aWR0aCAvIHRleHR1cmVzWzBdLmltYWdlLndpZHRoO1xuICAgIHZhciBoID0gdGV4dHVyZXNbMF0uaW1hZ2UuaGVpZ2h0IC8gdGV4dHVyZXNbMF0uaW1hZ2Uud2lkdGg7XG5cbiAgICAvLyBwbGFuZTAxXG5cbiAgICB2YXIgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuUGxhbmVHZW9tZXRyeSh3LCBoLCAxLCAxKTtcbiAgICB2YXIgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuU2hhZGVyTWF0ZXJpYWwoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdW5pZm9ybXM6IGdiLmluLmxvYWRNZ3Iuc2hhZGVyc1swXS51bmlmb3JtcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmVydGV4U2hhZGVyOiBnYi5pbi5sb2FkTWdyLnNoYWRlcnNbMF0udnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZyYWdtZW50U2hhZGVyOiBnYi5pbi5sb2FkTWdyLnNoYWRlcnNbMF0uZnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zcGFyZW50OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICB0aGlzLnBsYW5lID0gbmV3IFRIUkVFLk1lc2goZ2VvbWV0cnksIG1hdGVyaWFsKTtcbiAgICB0aGlzLnBsYW5lLnNjYWxlLnggPSB0aGlzLnBsYW5lLnNjYWxlLnkgPSAyMDAwLjA7XG5cbiAgICAvLyBwbGFuZTAyXG5cbiAgICB2YXIgdyA9IHRleHR1cmVzWzFdLmltYWdlLndpZHRoIC8gdGV4dHVyZXNbMV0uaW1hZ2Uud2lkdGg7XG4gICAgdmFyIGggPSB0ZXh0dXJlc1sxXS5pbWFnZS5oZWlnaHQgLyB0ZXh0dXJlc1sxXS5pbWFnZS53aWR0aDtcblxuICAgIHZhciBnZW9tZXRyeSA9IG5ldyBUSFJFRS5QbGFuZUdlb21ldHJ5KHcsIGgsIDEsIDEpO1xuICAgIHZhciBtYXRlcmlhbCA9IG5ldyBUSFJFRS5TaGFkZXJNYXRlcmlhbCgge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB1bmlmb3JtczogZ2IuaW4ubG9hZE1nci5zaGFkZXJzWzFdLnVuaWZvcm1zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB2ZXJ0ZXhTaGFkZXI6IGdiLmluLmxvYWRNZ3Iuc2hhZGVyc1sxXS52cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZnJhZ21lbnRTaGFkZXI6IGdiLmluLmxvYWRNZ3Iuc2hhZGVyc1sxXS5mcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNwYXJlbnQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgIHRoaXMucGxhbmUwMiA9IG5ldyBUSFJFRS5NZXNoKGdlb21ldHJ5LCBtYXRlcmlhbCk7XG4gICAgdGhpcy5wbGFuZTAyLnNjYWxlLnggPSB0aGlzLnBsYW5lMDIuc2NhbGUueSA9IDYwMC4wO1xuXG4gICAgZ2IuaW4ubG9hZE1nci5zaGFkZXJzWzBdLnVuaWZvcm1zLm9wYWNpdHkudmFsdWUgPSAxO1xuICAgIGdiLmluLmxvYWRNZ3Iuc2hhZGVyc1sxXS51bmlmb3Jtcy5vcGFjaXR5LnZhbHVlID0gMDtcblxuICAgIHRoaXMucGxhbmUwMi5wb3NpdGlvbi56ID0gLTE7XG5cbiAgICBnYi5pbi5zY2VuZS5zY2VuZS5hZGQoIHRoaXMucGxhbmUgKTtcbiAgICBnYi5pbi5zY2VuZS5zY2VuZS5hZGQoIHRoaXMucGxhbmUwMiApO1xuXG4gICAgLy8gdGhpcy5vblJlc2l6ZSgpO1xuICAgIC8vIHRoaXMuc2V0RXZlbnRzKCk7XG5cbiAgICAvLyDjg4bjgq/jgrnjg4Hjg6PjgpJ1bmlmb3Jt5aSJ5pWw44Gr6L+95YqgXG4gICAgZ2IuaW4ubG9hZE1nci5zaGFkZXJzWzBdLnVuaWZvcm1zLnRleHR1cmUudmFsdWUgPSB0ZXh0dXJlc1swXTtcbiAgICBnYi5pbi5sb2FkTWdyLnNoYWRlcnNbMF0udW5pZm9ybXMudGV4dHVyZTAxLnZhbHVlID0gdGV4dHVyZXNbMV07XG5cbiAgICBnYi5pbi5sb2FkTWdyLnNoYWRlcnNbMV0udW5pZm9ybXMudGV4dHVyZS52YWx1ZSA9IHRleHR1cmVzWzFdO1xuICAgIGdiLmluLmxvYWRNZ3Iuc2hhZGVyc1sxXS51bmlmb3Jtcy50ZXh0dXJlMDEudmFsdWUgPSB0ZXh0dXJlc1sxXTtcblxuICAgIGNiKCk7XG5cbiAgfVxuXG4gIHNldFZpZGVvU2l6ZSgpIHtcblxuICAgIC8vIHZpZGVv44Gu44K744OD44OI44K144Kk44K6ICAgICAgICAgIFxuICAgIC8vIHRoaXMubGIgPSBuZXcgZ2IuTGF5b3V0QmFja2dyb3VuZCgkKCdib2R5JyksJCh0aGlzLnZpZGVvLnZpZGVvKSk7XG4gICAgLy8gdGhpcy5zZXRFdmVudHMoKTtcblxuICB9XG5cbiAgc2V0VHJhbnNwYXJlbnQodmFsKSB7XG5cbiAgICAvLyB0aGlzLnBsYW5lLm1hdGVyaWFsLm9wYWNpdHkgPSB2YWw7XG5cbiAgfVxuXG4gIHR3ZWVuVHJhbnNwYXJlbnQodGltZSx2YWwpIHtcblxuICAgIC8vIHZhciB0ID0gdGltZSB8fCAxLjA7XG4gICAgLy8gdmFyIHYgPSB2YWwudGFyZ2V0IHx8IDEuMDtcbiAgICAvLyB2YXIgZSA9IHZhbC5lYXNlIHx8IFBvd2VyMi5lYXNlT3V0O1xuXG4gICAgLy8gVHdlZW5NYXgudG8odGhpcy5wbGFuZS5tYXRlcmlhbCwgdCwge1xuICAgIC8vICAgb3BhY2l0eTogdixcbiAgICAvLyAgIGVhc2UgOiBlLFxuICAgIC8vIH0pO1xuXG4gIH1cblxuICB1cGRhdGUoKSB7XG5cblxuXG5cbiAgfVxuXG4gIG9uUmVzaXplKCkge1xuXG4gICAgLy8gdmFyIHcgPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAvLyB2YXIgaCA9IHdpbmRvdy5pbm5lckhlaWdodDtcblxuICAgIC8vIHZhciByYXRlVyA9IHdpbmRvdy5pbm5lckhlaWdodCAvIHdpbmRvdy5pbm5lcldpZHRoO1xuICAgIC8vIHZhciByID0gdy9oO1xuXG4gICAgLy8gaWYgKHJhdGVXIDwgdGhpcy5yYXRlKSB7XG5cbiAgICAvLyAgIHRoaXMucGxhbmUuc2NhbGUuc2V0KHIqMC41OCxyKjAuNTgsciowLjU4KVxuXG4gICAgLy8gfSBlbHNlIHtcblxuICAgIC8vICAgLy8gbG9nKDIsc2NhbGVZKTtcblxuICAgIC8vICAgdGhpcy5wbGFuZS5zY2FsZS5zZXQoMSwxLDEpO1xuXG4gICAgLy8gfVxuXG4gIH1cblxuICBzZXRFdmVudHMoKSB7XG5cbiAgICAvLyBnYi5pbi5ybS50b3RhbCArPSAxOyAvLyBsb2Fk5pWw44GudG90YWzjgpLoqIjnrpdcbiAgICAkKHdpbmRvdykub24oJ29uU2VjdGlvbjA0UHJvZHVjdEltZycsIHRoaXMuY3JlYXRlLmJpbmQodGhpcywoKT0+e1xuICAgICAgLy9nYi5pbi5ybS5jb21wbGV0ZWQrKztcbiAgICB9KSk7XG5cbiAgfVxuXG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC9Vc2Vycy9UZXJhTWFjL0RvY3VtZW50cy8wMF9TdG9jay8xMF9iYXNlL2Zyb250ZW5kX2Jhc2VfdmVyMDIvZGV2ZWxvcG1lbnQvcHJvamVjdC1uYW1lL2Fzc2V0cy9qcy9fZGV2anMvc3JjL0Rpc3BsYXkvRWZmZWN0cy8wM19lZmZlY3RzL1NlY3Rpb24wNFByb2R1Y3QvX2RldGFpbHMvUGxhbmUuanMiLCIvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vL1xuLy8gIFBhcmFtXG4vL1xuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYXJhbSB7XG5cbiAgY29uc3RydWN0b3IoKSB7XG5cbiAgICB0aGlzLmd1aTtcbiAgICB0aGlzLmpzb24gPSB7fTtcbiAgICAvLyB0aGlzLmFwcE5hbWUgPSBcInBsdXNNVlwiO1xuXG4gICAgdmFyIGlzRmxhZyA9IHRydWU7XG5cbiAgICB0aGlzLmNsb2NrID0ge1xuICAgICAgcHJvZ3Jlc3M6IDAuNSxcbiAgICB9XG5cbiAgICB0aGlzLnpvb21ibHVyID0ge1xuICAgICAgc3RyZW5ndGg6IDQ2LjAsXG4gICAgICBzaXplOiA4OS4wLFxuICAgIH1cblxuICAgIHRoaXMudHJhbnNpdGlvbiA9IHtcbiAgICAgIHByb2dyZXNzOiAwLjAsXG4gICAgICBzaXplOiAwLjA0LFxuICAgICAgem9vbTogMzAsXG4gICAgICBjb2xvclNlcGFyYXRpb246IDAuMyxcbiAgICAgIHN0cmVuZ3RoOiAwLjYsXG4gICAgICB0d2VlbjogKCk9PntcblxuICAgICAgICB2YXIgdmFsO1xuICAgICAgICBpZiAoaXNGbGFnKSB2YWwgPSAxLjA7XG4gICAgICAgIGVsc2UgdmFsID0gMC4wXG5cbiAgICAgICAgaXNGbGFnID0gIWlzRmxhZztcblxuICAgICAgICBUd2Vlbk1heC50byhnYi5pbi5wbGFuZTAyLnNoYWRlci51bmlmb3Jtcy5wcm9ncmVzcywgMi41LCB7XG4gICAgICAgICAgdmFsdWU6IHZhbCxcbiAgICAgICAgICBlYXNlOiBQb3dlcjQuZWFzZU91dFxuICAgICAgICB9KVxuXG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIHRoaXMuc2V0dXBEYXRhKCk7XG4gICAgdGhpcy5zZXR1cCgpO1xuXG4gIH1cblxuICBzZXR1cERhdGEoKSB7XG5cblxuICB9XG5cbiAgc2V0dXAoKSB7XG5cbiAgICAvLyBpZiAoZ2IuaW4uY29uZi5QQVJBTSkge1xuXG4gICAgdGhpcy5ndWkgPSBuZXcgZGF0LkdVSSgpO1xuICAgIC8vIHRoaXMuZ3VpID0gbmV3IGRhdC5HVUkoe2xvYWQ6IHRoaXMuanNvbn0pO1xuICAgIHRoaXMuZ3VpLnJlbWVtYmVyKHRoaXMpO1xuICAgICQoXCIuZGdcIikuY3NzKHt6SW5kZXg6OTk5OTl9KTtcblxuICAgIHZhciBmMSA9IHRoaXMuZ3VpLmFkZEZvbGRlcignem9vbWJsdXInKTtcbiAgICBmMS5hZGQodGhpcy56b29tYmx1ciwgJ3N0cmVuZ3RoJywgMC4wLCAyLjApLnN0ZXAoMC4wMSkubGlzdGVuKCkub25DaGFuZ2UoZnVuY3Rpb24odmFsKXtcblxuICAgICAgZ2IuaW4ucGxhbmUuc2hhZGVyc1syXS51bmlmb3Jtcy5zdHJlbmd0aC52YWx1ZSA9IHZhbDtcbiAgICAgIGxvZyh2YWwpO1xuXG4gICAgfSk7XG4gICAgZjEuYWRkKHRoaXMuem9vbWJsdXIsICdzaXplJywgMC4wLCAxMDAuMCkuc3RlcCgwLjEpLmxpc3RlbigpLm9uQ2hhbmdlKGZ1bmN0aW9uKHZhbCl7XG5cbiAgICAgIGdiLmluLnBsYW5lLnNoYWRlci51bmlmb3Jtcy5uRnJhZy52YWx1ZSA9IDEgLyB2YWw7XG5cbiAgICB9KTtcbiAgICBmMS5vcGVuKCk7XG5cbiAgICAvLyB0aGlzLmd1aS5jbG9zZSgpO1xuXG4gIH1cblxuICBzZXRFdmVudHMoKSB7XG5cblxuICB9XG5cbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL1VzZXJzL1RlcmFNYWMvRG9jdW1lbnRzLzAwX1N0b2NrLzEwX2Jhc2UvZnJvbnRlbmRfYmFzZV92ZXIwMi9kZXZlbG9wbWVudC9wcm9qZWN0LW5hbWUvYXNzZXRzL2pzL19kZXZqcy9zcmMvRGlzcGxheS9FZmZlY3RzL1BhcmFtLmpzIiwiLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy9cbi8vICBQcm9maWxlclxuLy9cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJvZmlsZXIge1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuXG4gICAgdGhpcy5TdGF0cztcbiAgICB0aGlzLnNldHVwKCk7XG4gICAgdGhpcy5zZXRFdmVudHMoKTtcblxuICB9XG5cbiAgc2V0dXAoKSB7XG5cbiAgICAvLyBpZiAoZ2IuaW4uY29uZi5TVEFUUykge1xuXG4gICAgICB0aGlzLlN0YXRzID0gbmV3IFN0YXRzKCk7XG4gICAgICB0aGlzLlN0YXRzLmRvbUVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSBcImZpeGVkXCI7XG4gICAgICB0aGlzLlN0YXRzLmRvbUVsZW1lbnQuc3R5bGUubGVmdCAgICAgPSBcIjBweFwiO1xuICAgICAgdGhpcy5TdGF0cy5kb21FbGVtZW50LnN0eWxlLnRvcCAgID0gXCIwcHhcIjtcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5TdGF0cy5kb21FbGVtZW50KTtcbiAgICBcblxuICAgIC8vIH07XG5cbiAgfVxuXG4gIHVwZGF0ZSgpIHtcblxuICAgIGlmKHRoaXMuU3RhdHMpIHtcbiAgICAgIHRoaXMuU3RhdHMudXBkYXRlKCk7XG4gICAgfVxuXG4gIH1cblxuICBzZXRFdmVudHMoKSB7XG5cbiAgICBnYi5pbi51cC5hZGQoJ3Byb2ZpbGVyJyx0aGlzLnVwZGF0ZS5iaW5kKHRoaXMpKTtcblxuICB9XG5cbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL1VzZXJzL1RlcmFNYWMvRG9jdW1lbnRzLzAwX1N0b2NrLzEwX2Jhc2UvZnJvbnRlbmRfYmFzZV92ZXIwMi9kZXZlbG9wbWVudC9wcm9qZWN0LW5hbWUvYXNzZXRzL2pzL19kZXZqcy9zcmMvRGlzcGxheS9FZmZlY3RzL1Byb2ZpbGVyLmpzIiwiLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy9cbi8vICBMYXlvdXRcbi8vXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTY2FsZSB7XG5cbiAgY29uc3RydWN0b3IoKSB7XG5cbiAgICB0aGlzLlNQQmFzZVcgPSAzNzU7XG4gICAgdGhpcy5QQ0Jhc2VXID0gMTMwMDtcblxuICAgIHRoaXMucmF0ZSA9IDE7XG4gICAgdGhpcy5XID0gd2luZG93LmlubmVyV2lkdGg7XG5cbiAgICB0aGlzLiR0YXJnZXRMaXN0ID0gW1xuICAgICAge1xuICAgICAgICAnJHRhcmdldCc6ICQoJyNzaWRlTCwgI3NpZGVSLCAjbmF2JyksXG4gICAgICAgICdzY2FsZSc6ICdzcE9ubHknIC8vIHNwT25seSBwY09ubHkgYm90aFxuICAgICAgfSxcbiAgICAgIC8vIHtcbiAgICAgIC8vICAgJyR0YXJnZXQnOiAkKCcuc2VjdGlvbjAzX2RldGFpbCcpLFxuICAgICAgLy8gICAnc2NhbGUnOiAnYm90aCcgLy8gc3BPbmx5IHBjT25seSBib3RoXG4gICAgICAvLyB9LFxuICAgICAgLy8ge1xuICAgICAgLy8gICAnJHRhcmdldCc6ICQoJy5zZWN0aW9uMDQnKSxcbiAgICAgIC8vICAgJ3NjYWxlJzogJ2JvdGgnIC8vIHNwT25seSBwY09ubHkgYm90aFxuICAgICAgLy8gfSxcbiAgICBdXG5cbiAgICB0aGlzLnJ1bigpO1xuICAgIHRoaXMuc2V0dXAoKTtcbiAgICB0aGlzLnNldEV2ZW50cygpO1xuXG4gIH1cblxuICBzZXR1cCgpIHtcblxuICAgIFxuICB9XG5cbiAgcnVuKCkge1xuXG4gICAgdGhpcy5XID0gJCh3aW5kb3cpLndpZHRoKCk7XG4gICAgdGhpcy5pVyA9IHdpbmRvdy5pbm5lcldpZHRoO1xuXG4gICAgdGhpcy5zY2FsZSgpO1xuICAgIHRoaXMud3JhcCgpO1xuXG4gIH1cblxuICAvLyDmi6HlpKdcbiAgc2NhbGUoKSB7XG5cbiAgICAvLyBicOOBruWgtOWQiOOBrnNjYWxlXG4gICAgaWYgKHRoaXMuaVcgPD0gZ2IuaW4uY29uZi5icCkge1xuXG4gICAgICAvLyB3aWR0aOOBi+OCiXJhdGXjgpLoqIjnrpdcbiAgICAgIC8vIHRoaXMucmF0ZSA9IGdiLmluLnUuZmxvYXRGb3JtYXQodGhpcy5XIC8gdGhpcy5TUEJhc2VXICwgMik7XG4gICAgICBpZiAodGhpcy5XID4gMzc1KSB0aGlzLlcgPSAzNzU7XG4gICAgICBpZiAodGhpcy5XIDwgMzIwKSB0aGlzLlcgPSAzMjA7XG4gICAgICBsb2codGhpcy5XKTtcbiAgICAgIHRoaXMucmF0ZSA9IHRoaXMuVyAvIHRoaXMuU1BCYXNlVztcblxuICAgICAgLy8gc2NhbGXjgZnjgovjg6rjgrnjg4jjgpLjg6vjg7zjg5dcbiAgICAgICQuZWFjaCh0aGlzLiR0YXJnZXRMaXN0LCAoaW5kZXgsIHZhbCk9PntcblxuICAgICAgICBpZiAodmFsLnNjYWxlID09ICdib3RoJyB8fCB2YWwuc2NhbGUgPT0gJ3NwT25seScpIHtcblxuICAgICAgICAgIFR3ZWVuTWF4LnNldCh2YWwuJHRhcmdldCwge1xuICAgICAgICAgICAgc2NhbGU6IHRoaXMucmF0ZSxcbiAgICAgICAgICB9KTtcblxuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgIH0pO1xuXG4gICAgfSBlbHNlIHtcblxuICAgICAgLy8gd2lkdGjjgYvjgolyYXRl44KS6KiI566XXG4gICAgICAvLyB0aGlzLnJhdGUgPSBnYi5pbi51LmZsb2F0Rm9ybWF0KHRoaXMuVyAvIHRoaXMuUENCYXNlVyAsIDIpO1xuICAgICAgaWYgKHRoaXMuVyA+IDEzMDApIHRoaXMuVyA9IDEzMDA7XG4gICAgICB0aGlzLnJhdGUgPSB0aGlzLlcgLyB0aGlzLlBDQmFzZVc7XG5cbiAgICAgIC8vIHNjYWxl44GZ44KL44Oq44K544OI44KS44Or44O844OXXG4gICAgICAkLmVhY2godGhpcy4kdGFyZ2V0TGlzdCwgKGluZGV4LCB2YWwpPT57XG5cbiAgICAgICAgaWYgKHZhbC5zY2FsZSA9PSAnYm90aCcgfHwgdmFsLnNjYWxlID09ICdwY09ubHknKSB7XG5cbiAgICAgICAgICBUd2Vlbk1heC5zZXQodmFsLiR0YXJnZXQsIHtcbiAgICAgICAgICAgIHNjYWxlOiB0aGlzLnJhdGUsXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgfTtcblxuICAgICAgICAvLyDjgZPjgaHjgonjga7loLTlkIjjga/jgIFzY2FsZeOCkuaIu+OBmVxuICAgICAgICBpZiAodmFsLnNjYWxlID09ICdzcE9ubHknKSB7XG5cbiAgICAgICAgICBUd2Vlbk1heC5zZXQodmFsLiR0YXJnZXQsIHtcbiAgICAgICAgICAgIHNjYWxlOiAxLFxuICAgICAgICAgIH0pO1xuXG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgfSk7ICBcblxuICAgIH1cblxuICB9XG5cbiAgLy8gc2NhbGXjgZfjgZ/jgonjgIHlhYPjga7lpKfjgY3jgZXliIbkvZnnmb3jgYzjgafjgY3jgovjga7jgadvdmVyZmxvdyBoaWRkZW7jgafmtojjgZlcbiAgd3JhcCgpIHtcblxuXG5cbiAgfVxuXG4gIHJlc2V0KCkge1xuXG4gICAgJC5lYWNoKHRoaXMuJHRhcmdldExpc3QsIChpbmRleCwgdmFsKT0+e1xuXG4gICAgICBUd2Vlbk1heC5zZXQodmFsLiR0YXJnZXQsIHtcbiAgICAgICAgc2NhbGU6IDEsXG4gICAgICAgICd0cmFuc2Zvcm0tb3JpZ2luJzonMCAwJyxcbiAgICAgICAgJy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbic6JzAgMCdcbiAgICAgIH0pO1xuICAgICAgXG4gICAgfSk7XG5cblxuICAgIC8vIOOCpOODmeODs+ODiOino+mZpFxuICAgIGdiLmluLnIucmVtb3ZlKCdzY2FsZVRvcCcpO1xuXG4gIH1cblxuICBvblJlc2l6ZSgpIHtcblxuICAgIHRoaXMucnVuKCk7XG5cbiAgfVxuXG4gIHNldEV2ZW50cygpIHtcblxuICAgIGdiLmluLnIuYWRkKCdzY2FsZVRvcCcsIHRoaXMub25SZXNpemUuYmluZCh0aGlzKSk7XG4gICAgXG4gIH1cblxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvVXNlcnMvVGVyYU1hYy9Eb2N1bWVudHMvMDBfU3RvY2svMTBfYmFzZS9mcm9udGVuZF9iYXNlX3ZlcjAyL2RldmVsb3BtZW50L3Byb2plY3QtbmFtZS9hc3NldHMvanMvX2RldmpzL3NyYy9EaXNwbGF5L0xheW91dC9TaXplL1NjYWxlVG9wLmpzIiwiLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy9cbi8vICBIb3ZlckVmZmVjdFNOU1NQRm9vdGVyXG4vL1xuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIb3ZlckVmZmVjdFNOU1NQRm9vdGVyIHtcblxuICBjb25zdHJ1Y3Rvcigkd3JhcCwgJHRhcmdldCkge1xuXG4gICAgdGhpcy4kd3JhcCA9ICR3cmFwO1xuICAgIHRoaXMuJGlubmVyID0gdGhpcy4kd3JhcC5maW5kKCcuaW5uZXInKTtcbiAgICB0aGlzLiR0YXJnZXQgPSB0aGlzLiR3cmFwLmZpbmQoJy5zbnMuc3AgLmljb25TaGFyZScpO1xuICAgIHRoaXMuJGJhciA9IHRoaXMuJHdyYXAuZmluZCgnLnNucy5zcCAuYmFyJyk7XG4gICAgdGhpcy4kbGlzdCA9IHRoaXMuJHdyYXAuZmluZCgnLnNucy5zcCAubGlzdCcpO1xuICAgIHRoaXMuJGl0ZW0gPSB0aGlzLiR3cmFwLmZpbmQoJy5zbnMuc3AgLmxpc3QgLml0ZW0nKTtcblxuICAgIC8vIG1vdGlvblxuICAgIHRoaXMudGwgPSBuZXcgVGltZWxpbmVNYXgoKTtcblxuICAgIHRoaXMuc2V0RXZlbnRzKCk7XG5cbiAgfVxuXG4gIHNldHVwKCkge1xuXG4gIH1cblxuICByZWFkeSgpIHtcblxuICAgIC8vIG94XG4gICAgVHdlZW5NYXguc2V0KHRoaXMuJHdyYXAsIHt3aWR0aDogMH0pXG5cbiAgICAvLyBiYXJcbiAgICBUd2Vlbk1heC5zZXQodGhpcy4kYmFyLCB7d2lkdGg6IDB9KVxuXG4gICAgLy8gc25zXG4gICAgVHdlZW5NYXguc2V0KHRoaXMuJGl0ZW0sIHt4OiAtNDAsIG9wYWNpdHk6IDB9KVxuXG4gICAgdGhpcy4kYmFyLnNob3coKTtcbiAgICB0aGlzLiRsaXN0LnNob3coKTtcblxuICB9XG5cbiAgdG9nZ2xlKCkge1xuXG4gICAgaWYgKHRoaXMuJHRhcmdldC5oYXNDbGFzcygnb24nKSkge1xuICAgIHRoaXMuaXNPcGVuID0gZmFsc2U7XG5cbiAgICAgIHRoaXMuY2xvc2UoKTtcblxuICAgIH0gZWxzZSB7XG4gICAgdGhpcy5pc09wZW4gPSB0cnVlO1xuXG4gICAgICB0aGlzLm9wZW4oKTtcblxuICAgIH07XG5cbiAgICB0aGlzLiR0YXJnZXQudG9nZ2xlQ2xhc3MoJ29uJyk7XG5cbiAgfVxuXG4gIG9wZW4gKHRoYXQpIHtcblxuICAgIFR3ZWVuTWF4LmtpbGxUd2VlbnNPZih0aGlzLiRib3gpO1xuICAgIFR3ZWVuTWF4LmtpbGxUd2VlbnNPZih0aGlzLiRiYXIpO1xuICAgIFR3ZWVuTWF4LmtpbGxUd2VlbnNPZih0aGlzLiRpdGVtKTtcblxuICAgIHRoaXMucmVhZHkoKTtcblxuICAgIC8vIGJhcuOBjOS8uOOBs+OCi1xuXG4gICAgdmFyIHRsID0gbmV3IFRpbWVsaW5lTWF4KCk7XG5cblxuICAgIHRsXG4gICAgICAvLyBib3jjgYzkvLjjgbPjgotcbiAgICAgIC50byh0aGlzLiR3cmFwLCAwLjQsIHtcbiAgICAgICAgd2lkdGg6IDMzMCxcbiAgICAgICAgZWFzZTogUG93ZXIzLmVhc2VPdXRcbiAgICAgIH0pXG4gICAgICAudG8odGhpcy4kYmFyLCAwLjMsIHtcbiAgICAgICAgd2lkdGg6IDMwLFxuICAgICAgICBlYXNlOiBQb3dlcjMuZWFzZU91dCxcbiAgICAgIH0sJy09MC4yJylcbiAgICAgIC50byh0aGlzLiRpdGVtLmVxKDApLCAwLjMsIHtcbiAgICAgICAgeDogMCxcbiAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgZWFzZTogUG93ZXI0LmVhc2VPdXRcbiAgICAgIH0sJy09MC4yJylcbiAgICAgIC50byh0aGlzLiRpdGVtLmVxKDEpLCAwLjMsIHtcbiAgICAgICAgeDogMCxcbiAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgZWFzZTogUG93ZXI0LmVhc2VPdXRcbiAgICAgIH0sJy09MC4yNScpXG4gICAgICAudG8odGhpcy4kaXRlbS5lcSgyKSwgMC4zLCB7XG4gICAgICAgIHg6IDAsXG4gICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgIGVhc2U6IFBvd2VyNC5lYXNlT3V0XG4gICAgICB9LCctPTAuMjUnKVxuICAgICAgLnRvKHRoaXMuJGl0ZW0uZXEoMyksIDAuMywge1xuICAgICAgICB4OiAwLFxuICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICBlYXNlOiBQb3dlcjQuZWFzZU91dFxuICAgICAgfSwnLT0wLjI1JylcbiAgICBcbiAgfVxuXG4gIGNsb3NlICh0aGF0KSB7XG5cbiAgICBUd2Vlbk1heC5raWxsVHdlZW5zT2YodGhpcy4kYm94KTtcbiAgICBUd2Vlbk1heC5raWxsVHdlZW5zT2YodGhpcy4kYmFyKTtcbiAgICBUd2Vlbk1heC5raWxsVHdlZW5zT2YodGhpcy4kaXRlbSk7XG5cbiAgICAvLyBiYXJcbiAgICB2YXIgdGwgPSBuZXcgVGltZWxpbmVNYXgoKTtcblxuICAgIHRsXG4gICAgICAudG8odGhpcy4kaXRlbS5lcSgzKSwgMC4zLCB7XG4gICAgICAgIHg6IC00MCxcbiAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgZWFzZTogUG93ZXI0LmVhc2VPdXQsXG4gICAgICB9KVxuICAgICAgLnRvKHRoaXMuJGl0ZW0uZXEoMiksIDAuMywge1xuICAgICAgICB4OiAtNDAsXG4gICAgICAgIG9wYWNpdHk6IDAsXG4gICAgICAgIGVhc2U6IFBvd2VyNC5lYXNlT3V0LFxuICAgICAgfSwnLT0wLjI1JylcbiAgICAgIC50byh0aGlzLiRpdGVtLmVxKDEpLCAwLjMsIHtcbiAgICAgICAgeDogLTQwLFxuICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICBlYXNlOiBQb3dlcjQuZWFzZU91dFxuICAgICAgfSwnLT0wLjI1JylcbiAgICAgIC50byh0aGlzLiRpdGVtLmVxKDApLCAwLjMsIHtcbiAgICAgICAgeDogLTQwLFxuICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICBlYXNlOiBQb3dlcjQuZWFzZU91dCxcbiAgICAgICAgb25Db21wbGV0ZTooKT0+e1xuICAgICAgICAgIHRoaXMuJGxpc3QuaGlkZSgpO1xuICAgICAgICB9XG4gICAgICB9LCctPTAuMjUnKVxuICAgICAgLnRvKHRoaXMuJGJhciwgMC4yLCB7XG4gICAgICAgIHdpZHRoOiAwLFxuICAgICAgICBlYXNlOiBQb3dlcjIuZWFzZU91dCxcbiAgICAgICAgb25Db21wbGV0ZTooKT0+e1xuICAgICAgICAgIHRoaXMuJGJhci5oaWRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0sJy09MC4zJylcbiAgICAgIC50byh0aGlzLiR3cmFwLCAwLjMsIHtcbiAgICAgICAgd2lkdGg6IDAsXG4gICAgICAgIGVhc2U6IFBvd2VyMy5lYXNlT3V0LFxuICAgICAgfSwnLT0wLjMnKVxuXG4gIH1cblxuICByZXNldCgpIHtcblxuICAgIHRoaXMuY2xvc2UoKTtcbiAgICB0aGlzLiR0YXJnZXQub2ZmKCdjbGljaycpO1xuXG4gIH1cblxuICBzZXRFdmVudHMoKSB7XG5cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICB0aGlzLiR0YXJnZXQub24oJ2NsaWNrJywgdGhpcy50b2dnbGUuYmluZCh0aGlzKSk7XG4gXG4gIH1cblxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvVXNlcnMvVGVyYU1hYy9Eb2N1bWVudHMvMDBfU3RvY2svMTBfYmFzZS9mcm9udGVuZF9iYXNlX3ZlcjAyL2RldmVsb3BtZW50L3Byb2plY3QtbmFtZS9hc3NldHMvanMvX2RldmpzL3NyYy9EaXNwbGF5L0VmZmVjdHMvMDNfZWZmZWN0cy9Ib3ZlckVmZmVjdFNOU1NQRm9vdGVyLmpzIiwiLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy9cbi8vICBIb3ZlckVmZmVjdFNWR0Fycm93VG9wXG4vL1xuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIb3ZlckVmZmVjdFNWR0Fycm93VG9wIHtcblxuICBjb25zdHJ1Y3RvcigkdGFyZ2V0KSB7XG5cbiAgICB0aGlzLiR0YXJnZXQgPSAkdGFyZ2V0XG5cbiAgICAvLyBtb3Rpb25cbiAgICB0aGlzLnRsID0gbmV3IFRpbWVsaW5lTWF4KCk7XG5cbiAgICB0aGlzLnNldHVwKCk7XG5cbiAgICB0aGlzLmlzSG92ZXIgPSBmYWxzZTtcblxuICAgIC8vIOOCueODnuODm+OBruOBqOOBjeOBr+WHpueQhuOBl+OBquOBhFxuICAgIGlmIChnYi5pbi51LmlzUEMpIHRoaXMuc2V0RXZlbnRzKCk7XG5cbiAgfVxuXG4gIHNldHVwKCkge1xuXG5cbiAgfVxuXG4gIHJ1bigpIHtcblxuICB9XG5cbiAgb25FbnRlciAodGhhdCkge1xuXG4gICAgaWYgKHRoaXMuYXV0b1RMKSB7XG4gICAgICB0aGlzLmF1dG9UTC5raWxsKCk7XG4gICAgICB0aGlzLmF1dG9UTCA9IG51bGw7XG4gICAgfVxuICAgIGlmICh0aGlzLnRsMDIpIHRoaXMudGwwMi5raWxsKCk7XG4gICAgdGhpcy50bDAxID0gbmV3IFRpbWVsaW5lTWF4KCk7XG5cbiAgICB0aGlzLnRsMDFcbiAgICAgICAgLy8g55+i5Y2w44KS5LiL44Gr5LiL44GS44KLXG4gICAgICAgIC50bygkKHRoYXQpLmZpbmQoJy5hcnJvdy5wYycpLCAwLjQsIHtcbiAgICAgICAgICBzY2FsZVk6IDAuNjUsXG4gICAgICAgICAgeTogOCxcbiAgICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICAgIHo6IDEsXG4gICAgICAgICAgJ3RyYW5zZm9ybS1vcmlnaW4nOiAnNTAlIDEwMCUnLFxuICAgICAgICAgIGVhc2U6IFBvd2VyNC5lYXNlT3V0XG4gICAgICAgIH0pXG4gICAgICAgIC8vIOaWh+Wtl+OCkuS4i+OBq+S4i+OBkuOCi1xuICAgICAgICAudG8oJCh0aGF0KS5maW5kKCcudGV4dCcpLCAwLjQsIHtcbiAgICAgICAgICB5OiAzMCxcbiAgICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICAgIHo6IDEsXG4gICAgICAgICAgZWFzZTogUG93ZXI0LmVhc2VPdXRcbiAgICAgICAgfSwnLT0wLjM3JylcbiAgICAgICAgXG4gIH1cblxuICBvbkxlYXZlICh0aGF0KSB7XG5cbiAgICBpZiAodGhpcy50bDAxKSB0aGlzLnRsMDEua2lsbCgpO1xuICAgIHRoaXMudGwwMiA9IG5ldyBUaW1lbGluZU1heCgpO1xuXG4gICAgdGhpcy50bDAyXG4gICAgICAvLyDmloflrZfjgpLkuIvjgavkuIvjgZLjgotcbiAgICAgIC50bygkKHRoYXQpLmZpbmQoJy50ZXh0JyksIDAuNSwge1xuICAgICAgICB5OiAwLFxuICAgICAgICB6OiAxLFxuICAgICAgICBlYXNlOiBQb3dlcjIuZWFzZUluT3V0XG4gICAgICB9KVxuICAgICAgLy8g55+i5Y2w44KS5LiL44Gr5LiL44GS44KLXG4gICAgICAudG8oJCh0aGF0KS5maW5kKCcuYXJyb3cucGMnKSwgMC41LCB7XG4gICAgICAgIHNjYWxlWTogMSxcbiAgICAgICAgeTogMCxcbiAgICAgICAgejogMSxcbiAgICAgICAgJ3RyYW5zZm9ybS1vcmlnaW4nOiAnNTAlIDEwMCUnLFxuICAgICAgICBlYXNlOiBQb3dlcjIuZWFzZUluT3V0LFxuICAgICAgICBvbkNvbXBsZXRlOiAoKT0+e1xuXG4gICAgICAgICAgaWYgKHRoaXMuYXV0b1RMID09IG51bGwpIHRoaXMuYXV0b0Fycm93KCk7ICAgICAgICAgIFxuXG4gICAgICAgIH1cbiAgICAgIH0sJy09MC40NScpXG5cbiAgfVxuXG4gIGF1dG9BcnJvdygpIHtcblxuICAgIHRoaXMuYXV0b1RMID0gbmV3IFRpbWVsaW5lTWF4KHtyZXBlYXQ6IC0xfSk7XG5cbiAgICB0aGlzLmF1dG9UTFxuICAgICAgLnRvKHRoaXMuJHRhcmdldC5maW5kKCcuYXJyb3cucGMnKSwgMC42LCB7XG4gICAgICAgIHk6IDYwLFxuICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICBkZWxheTogNS4wLFxuICAgICAgICBzY2FsZVk6IDAuMyxcbiAgICAgICAgJ3RyYW5zZm9ybS1vcmlnaW4nOiAnNTAlIDEwMCUnLFxuICAgICAgICBlYXNlOiBQb3dlcjQuZWFzZU91dFxuICAgICAgfSlcbiAgICAgIC5zZXQodGhpcy4kdGFyZ2V0LmZpbmQoJy5hcnJvdy5wYycpLCB7c2NhbGVZOiAxLHk6IC02MH0pXG4gICAgICAudG8odGhpcy4kdGFyZ2V0LmZpbmQoJy5hcnJvdy5wYycpLCAwLjUsIHtcbiAgICAgICAgc2NhbGVZOiAxLFxuICAgICAgICB5OiAwLFxuICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICBkZWxheTogMC4zLFxuICAgICAgICAndHJhbnNmb3JtLW9yaWdpbic6ICc1MCUgMTAwJScsXG4gICAgICAgIGVhc2U6IFBvd2VyNC5lYXNlT3V0XG4gICAgICB9KVxuXG4gIH1cblxuICBzZXR1cEZpcnN0KCkge1xuXG4gICAgVHdlZW5NYXguc2V0KCQoJy5zZWN0aW9uMDEgLm5leHQgLnRleHQnKSwge3k6IC02MCxvcGFjaXR5OjAsejogMSx9KTtcbiAgICBUd2Vlbk1heC5zZXQoJCgnLnNlY3Rpb24wMSAubmV4dCBzdmcnKSwge3k6IC0zMCxvcGFjaXR5OjAsejogMSx9KTtcblxuICB9XG5cbiAgcnVuRmlyc3QoKSB7XG5cbiAgICB2YXIgdGwgPSBuZXcgVGltZWxpbmVNYXgoKTtcblxuICAgICAgICAvLyDmloflrZfjgpLkuIvjgavkuIvjgZLjgotcbiAgICAgIHRsLnRvKCQoJy5zZWN0aW9uMDEgLm5leHQgLnRleHQnKSwgMS41LCB7XG4gICAgICAgICAgeTogMCxcbiAgICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICAgIHo6IDEsXG4gICAgICAgICAgZWFzZTogUG93ZXIyLmVhc2VPdXRcbiAgICAgICAgfSlcbiAgICAgICAgLnRvKCQoJy5zZWN0aW9uMDEgLm5leHQgc3ZnJyksIDEuMCwge1xuICAgICAgICAgIHk6IDAsXG4gICAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgICB6OiAxLFxuICAgICAgICAgIGVhc2U6IFBvd2VyMi5lYXNlT3V0XG4gICAgICAgIH0sJy09MC44MicpXG5cbiAgfVxuXG4gIHNldEV2ZW50cygpIHtcblxuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIHRoaXMuJHRhcmdldC5lYWNoKGZ1bmN0aW9uKGluZGV4LCBlbCkge1xuXG4gICAgICAkKHRoaXMpLm9uKCdtb3VzZWVudGVyJywgZnVuY3Rpb24oZSkge3NlbGYub25FbnRlci5jYWxsKHNlbGYsdGhpcyl9KTtcbiAgICAgICQodGhpcykub24oJ21vdXNlbGVhdmUnLCBmdW5jdGlvbihlKSB7c2VsZi5vbkxlYXZlLmNhbGwoc2VsZix0aGlzKX0pO1xuICAgICAgXG4gICAgfSk7XG5cbiAgfVxuXG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC9Vc2Vycy9UZXJhTWFjL0RvY3VtZW50cy8wMF9TdG9jay8xMF9iYXNlL2Zyb250ZW5kX2Jhc2VfdmVyMDIvZGV2ZWxvcG1lbnQvcHJvamVjdC1uYW1lL2Fzc2V0cy9qcy9fZGV2anMvc3JjL0Rpc3BsYXkvRWZmZWN0cy8wM19lZmZlY3RzL0hvdmVyRWZmZWN0U1ZHQXJyb3dUb3AuanMiLCIvKipcbiAqIGZpbGVPdmVydmlldzpcbiAqIFByb2plY3Q6XG4gKiBGaWxlOiBDYW52YXNcbiAqIERhdGU6XG4gKiBBdXRob3I6XG4gKi9cblxuaW1wb3J0IEVudHJ5IGZyb20gJy4uL0VudHJ5LmpzJztcbi8vIGltcG9ydCBDYW1lcmEgZnJvbSAnLi9VdGlscy9DYW1lcmEuanMnO1xuXG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENhbnZhcyBleHRlbmRzIEVudHJ5e1xuXG4gIGNvbnN0cnVjdG9yKG9wdHMgPSB7fSkge1xuXG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMud2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICB0aGlzLmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICB0aGlzLm91dHB1dCA9IG9wdHMub3V0cHV0IHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gICAgdGhpcy5jYW1lcmEgPSBudWxsO1xuICAgIHRoaXMucmVuZGVyZXIgPSBudWxsO1xuICAgIHRoaXMuc2NlbmUgPSBudWxsO1xuXHRcdHRoaXMuY3ViZSA9IG51bGw7XG5cbiAgICB0aGlzLmNyZWF0ZUNhbWVyYSA9IHRoaXMuX2NyZWF0ZUNhbWVyYS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuY3JlYXRlUmVuZGVyZXIgPSB0aGlzLl9jcmVhdGVSZW5kZXJlci5iaW5kKHRoaXMpO1xuICAgIHRoaXMuY3JlYXRlU2NlbmUgPSB0aGlzLl9jcmVhdGVTY2VuZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuY3JlYXRlT2JqZWN0ID0gdGhpcy5fY3JlYXRlT2JqZWN0LmJpbmQodGhpcyk7XG5cbiAgICB0aGlzLm9uUmVzaXplID0gdGhpcy5fb25SZXNpemUuYmluZCh0aGlzKTtcblxuICAgIHRoaXMuVXBkYXRlID0gdGhpcy5fVXBkYXRlLmJpbmQodGhpcyk7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiDliJ3mnJ/ljJZcbiAgICovXG4gIGluaXQoKXtcblxuICAgIHRoaXMuY3JlYXRlQ2FtZXJhKCk7XG4gICAgdGhpcy5jcmVhdGVSZW5kZXJlcigpO1xuICAgIHRoaXMuY3JlYXRlU2NlbmUoKTtcblxuXHRcdHRoaXMuY3JlYXRlT2JqZWN0KCk7XG5cbiAgICB0aGlzLlVwZGF0ZSgpO1xuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsICgpID0+IHtcbiAgICAgIHRoaXMub25SZXNpemUoKTtcbiAgICB9LCBmYWxzZSk7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiDjgqvjg6Hjg6nkvZzmiJBcbiAgICovXG4gIF9jcmVhdGVDYW1lcmEoKXtcblxuXHRcdC8vIGdiLmluLmNhbWVyYSA9IHRoaXMuY2FtZXJhID0gbmV3IENhbWVyYSg0NSwgMSwgMSwgMjAwMDApO1xuXHRcdC8vIHRoaXMuY2FtZXJhID0gbmV3IFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKDQ1LCAxLCAxLCAyMDAwMCk7XG5cbiAgICB0aGlzLmNhbWVyYSA9IG5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSgzNSwgdGhpcy53aWR0aCAvIHRoaXMuaGVpZ2h0LCAxMCwgMTAwMCk7XG4gICAgdGhpcy5jYW1lcmEucG9zaXRpb24uc2V0KDAsIDAsIDMwMCk7XG4gICAgLy8gdGhpcy5jYW1lcmEubG9va0F0KCB0aGlzLnNjZW5lLnBvc2l0aW9uICk7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiDjg6zjg7Pjg4Djg6njg7zkvZzmiJBcbiAgICovXG4gIF9jcmVhdGVSZW5kZXJlcigpe1xuXG5cdFx0dGhpcy5yZW5kZXJlciA9IG5ldyBUSFJFRS5XZWJHTFJlbmRlcmVyKHtcbiAgICAgIGFscGhhICAgICAgICAgICAgICA6IGZhbHNlLFxuICAgICAgYW50aWFsaWFzICAgICAgICAgIDogZmFsc2UsXG4gICAgICBzdGVuY2lsICAgICAgICAgICAgOiBmYWxzZSxcbiAgICAgIGRlcHRoICAgICAgICAgICAgICA6IHRydWUsXG4gICAgICBwcmVtdWx0aXBsaWVkQWxwaGEgOiBmYWxzZVxuXHRcdH0pO1xuXG4gICAgdGhpcy5yZW5kZXJlci5zZXRDbGVhckNvbG9yKCAweGZmZmZmZiApO1xuICAgIHRoaXMucmVuZGVyZXIuc2V0UGl4ZWxSYXRpbyh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyB8fCAxKTtcbiAgICB0aGlzLnJlbmRlcmVyLnNldFNpemUoIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0ICk7XG4gICAgdGhpcy5vdXRwdXQuYXBwZW5kQ2hpbGQodGhpcy5yZW5kZXJlci5kb21FbGVtZW50KTtcblxuICB9XG5cbiAgLyoqXG4gICAq44CA44K344O844Oz5L2c5oiQXG4gICAqL1xuICBfY3JlYXRlU2NlbmUoKXtcblxuXHRcdHRoaXMuc2NlbmUgPSBuZXcgVEhSRUUuU2NlbmUoKTtcblxuICB9XG5cblx0LyoqXG5cdCAq44CAT2JqZWN05L2c5oiQXG5cdCAqL1xuXHRfY3JlYXRlT2JqZWN0KCl7XG5cbiAgICB2YXIgY3ViZUdlb21ldHJ5ID0gbmV3IFRIUkVFLkJveEdlb21ldHJ5KDUwLCA1MCwgNTApO1xuICAgIHZhciBjdWJlTWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoe1xuICAgICAgY29sb3I6IDB4MDAwMDAwLFxuICAgICAgd2lyZWZyYW1lOiBmYWxzZVxuICAgIH0pO1xuXG4gICAgdGhpcy5jdWJlID0gbmV3IFRIUkVFLk1lc2goY3ViZUdlb21ldHJ5LCBjdWJlTWF0ZXJpYWwpO1xuICAgIHRoaXMuY3ViZS5wb3NpdGlvbi54ID0gLTQ7XG4gICAgdGhpcy5jdWJlLnBvc2l0aW9uLnkgPSAzO1xuICAgIHRoaXMuY3ViZS5wb3NpdGlvbi56ID0gMDtcblxuICAgIHRoaXMuc2NlbmUuYWRkKHRoaXMuY3ViZSk7XG5cblx0fVxuXG4gIC8qKlxuICAgKuOAgOabtOaWsFxuICAgKi9cbiAgX1VwZGF0ZSgpIHtcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoICgpID0+IHtcbiAgICAgIHRoaXMuVXBkYXRlKCk7XG4gICAgfSk7XG4gICAgLy8gdGhpcy5jb250cm9scy51cGRhdGUoKTtcbiAgICB0aGlzLnJlbmRlcmVyLnJlbmRlciggdGhpcy5zY2VuZSwgdGhpcy5jYW1lcmEgKTtcbiAgfVxuXG4gIC8qKlxuICAgKuOAgOeUu+mdouODquOCteOCpOOCulxuICAgKi9cbiAgX29uUmVzaXplKCkge1xuICAgIHRoaXMuY2FtZXJhLmFzcGVjdCA9IHdpbmRvdy5pbm5lcldpZHRoIC8gd2luZG93LmlubmVySGVpZ2h0O1xuICAgIHRoaXMuY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcbiAgICB0aGlzLnJlbmRlcmVyLnNldFNpemUod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodCk7XG4gIH1cblxuICBzZXRFdmVudHMoKSB7XG5cbiAgICAkKHdpbmRvdykub24oJ2xvYWQnLCB0aGlzLm9uTG9hZC5iaW5kKHRoaXMpKTtcblxuICB9XG5cbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL1VzZXJzL1RlcmFNYWMvRG9jdW1lbnRzLzAwX1N0b2NrLzEwX2Jhc2UvZnJvbnRlbmRfYmFzZV92ZXIwMi9kZXZlbG9wbWVudC9wcm9qZWN0LW5hbWUvYXNzZXRzL2pzL19kZXZqcy9zcmMvVmlzdWFsL0NhbnZhcy5qcyIsIi8qKlxuICogZmlsZU92ZXJ2aWV3OlxuICogUHJvamVjdDpcbiAqIEZpbGU6IEVudHJ5XG4gKiBEYXRlOlxuICogQXV0aG9yOlxuICovXG5cbndpbmRvdy5USFJFRSA9IHJlcXVpcmUoJy4uL2xpYnMvdGhyZWUubWluLmpzJyk7XG5cbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRW50cnkge1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXG5cdH1cblxuXHQvKipcblx0ICog5Yid5pyf5YyWXG5cdCAqL1xuXHRpbml0KCl7XG5cblxuXHR9XG5cbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL1VzZXJzL1RlcmFNYWMvRG9jdW1lbnRzLzAwX1N0b2NrLzEwX2Jhc2UvZnJvbnRlbmRfYmFzZV92ZXIwMi9kZXZlbG9wbWVudC9wcm9qZWN0LW5hbWUvYXNzZXRzL2pzL19kZXZqcy9zcmMvRW50cnkuanMiLCIvLyB0aHJlZWpzLm9yZy9saWNlbnNlXG4ndXNlIHN0cmljdCc7dmFyIFRIUkVFPXtSRVZJU0lPTjpcIjczXCJ9O1wiZnVuY3Rpb25cIj09PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFwidGhyZWVcIixUSFJFRSk6XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIG1vZHVsZSYmKG1vZHVsZS5leHBvcnRzPVRIUkVFKTtcbnZvaWQgMCE9PXNlbGYucmVxdWVzdEFuaW1hdGlvbkZyYW1lJiZ2b2lkIDAhPT1zZWxmLmNhbmNlbEFuaW1hdGlvbkZyYW1lfHxmdW5jdGlvbigpe2Zvcih2YXIgYT0wLGI9W1wibXNcIixcIm1velwiLFwid2Via2l0XCIsXCJvXCJdLGM9MDtjPGIubGVuZ3RoJiYhc2VsZi5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU7KytjKXNlbGYucmVxdWVzdEFuaW1hdGlvbkZyYW1lPXNlbGZbYltjXStcIlJlcXVlc3RBbmltYXRpb25GcmFtZVwiXSxzZWxmLmNhbmNlbEFuaW1hdGlvbkZyYW1lPXNlbGZbYltjXStcIkNhbmNlbEFuaW1hdGlvbkZyYW1lXCJdfHxzZWxmW2JbY10rXCJDYW5jZWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWVcIl07dm9pZCAwPT09c2VsZi5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUmJnZvaWQgMCE9PXNlbGYuc2V0VGltZW91dCYmKHNlbGYucmVxdWVzdEFuaW1hdGlvbkZyYW1lPWZ1bmN0aW9uKGIpe3ZhciBjPURhdGUubm93KCksZz1NYXRoLm1heCgwLDE2LShjLWEpKSxmPXNlbGYuc2V0VGltZW91dChmdW5jdGlvbigpe2IoYytcbmcpfSxnKTthPWMrZztyZXR1cm4gZn0pO3ZvaWQgMD09PXNlbGYuY2FuY2VsQW5pbWF0aW9uRnJhbWUmJnZvaWQgMCE9PXNlbGYuY2xlYXJUaW1lb3V0JiYoc2VsZi5jYW5jZWxBbmltYXRpb25GcmFtZT1mdW5jdGlvbihhKXtzZWxmLmNsZWFyVGltZW91dChhKX0pfSgpO3ZvaWQgMD09PXNlbGYucGVyZm9ybWFuY2UmJihzZWxmLnBlcmZvcm1hbmNlPXt9KTt2b2lkIDA9PT1zZWxmLnBlcmZvcm1hbmNlLm5vdyYmZnVuY3Rpb24oKXt2YXIgYT1EYXRlLm5vdygpO3NlbGYucGVyZm9ybWFuY2Uubm93PWZ1bmN0aW9uKCl7cmV0dXJuIERhdGUubm93KCktYX19KCk7dm9pZCAwPT09TnVtYmVyLkVQU0lMT04mJihOdW1iZXIuRVBTSUxPTj1NYXRoLnBvdygyLC01MikpO3ZvaWQgMD09PU1hdGguc2lnbiYmKE1hdGguc2lnbj1mdW5jdGlvbihhKXtyZXR1cm4gMD5hPy0xOjA8YT8xOithfSk7XG52b2lkIDA9PT1GdW5jdGlvbi5wcm90b3R5cGUubmFtZSYmdm9pZCAwIT09T2JqZWN0LmRlZmluZVByb3BlcnR5JiZPYmplY3QuZGVmaW5lUHJvcGVydHkoRnVuY3Rpb24ucHJvdG90eXBlLFwibmFtZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50b1N0cmluZygpLm1hdGNoKC9eXFxzKmZ1bmN0aW9uXFxzKihcXFMqKVxccypcXCgvKVsxXX19KTtUSFJFRS5NT1VTRT17TEVGVDowLE1JRERMRToxLFJJR0hUOjJ9O1RIUkVFLkN1bGxGYWNlTm9uZT0wO1RIUkVFLkN1bGxGYWNlQmFjaz0xO1RIUkVFLkN1bGxGYWNlRnJvbnQ9MjtUSFJFRS5DdWxsRmFjZUZyb250QmFjaz0zO1RIUkVFLkZyb250RmFjZURpcmVjdGlvbkNXPTA7VEhSRUUuRnJvbnRGYWNlRGlyZWN0aW9uQ0NXPTE7VEhSRUUuQmFzaWNTaGFkb3dNYXA9MDtUSFJFRS5QQ0ZTaGFkb3dNYXA9MTtUSFJFRS5QQ0ZTb2Z0U2hhZG93TWFwPTI7VEhSRUUuRnJvbnRTaWRlPTA7VEhSRUUuQmFja1NpZGU9MTtcblRIUkVFLkRvdWJsZVNpZGU9MjtUSFJFRS5GbGF0U2hhZGluZz0xO1RIUkVFLlNtb290aFNoYWRpbmc9MjtUSFJFRS5Ob0NvbG9ycz0wO1RIUkVFLkZhY2VDb2xvcnM9MTtUSFJFRS5WZXJ0ZXhDb2xvcnM9MjtUSFJFRS5Ob0JsZW5kaW5nPTA7VEhSRUUuTm9ybWFsQmxlbmRpbmc9MTtUSFJFRS5BZGRpdGl2ZUJsZW5kaW5nPTI7VEhSRUUuU3VidHJhY3RpdmVCbGVuZGluZz0zO1RIUkVFLk11bHRpcGx5QmxlbmRpbmc9NDtUSFJFRS5DdXN0b21CbGVuZGluZz01O1RIUkVFLkFkZEVxdWF0aW9uPTEwMDtUSFJFRS5TdWJ0cmFjdEVxdWF0aW9uPTEwMTtUSFJFRS5SZXZlcnNlU3VidHJhY3RFcXVhdGlvbj0xMDI7VEhSRUUuTWluRXF1YXRpb249MTAzO1RIUkVFLk1heEVxdWF0aW9uPTEwNDtUSFJFRS5aZXJvRmFjdG9yPTIwMDtUSFJFRS5PbmVGYWN0b3I9MjAxO1RIUkVFLlNyY0NvbG9yRmFjdG9yPTIwMjtUSFJFRS5PbmVNaW51c1NyY0NvbG9yRmFjdG9yPTIwMztcblRIUkVFLlNyY0FscGhhRmFjdG9yPTIwNDtUSFJFRS5PbmVNaW51c1NyY0FscGhhRmFjdG9yPTIwNTtUSFJFRS5Ec3RBbHBoYUZhY3Rvcj0yMDY7VEhSRUUuT25lTWludXNEc3RBbHBoYUZhY3Rvcj0yMDc7VEhSRUUuRHN0Q29sb3JGYWN0b3I9MjA4O1RIUkVFLk9uZU1pbnVzRHN0Q29sb3JGYWN0b3I9MjA5O1RIUkVFLlNyY0FscGhhU2F0dXJhdGVGYWN0b3I9MjEwO1RIUkVFLk5ldmVyRGVwdGg9MDtUSFJFRS5BbHdheXNEZXB0aD0xO1RIUkVFLkxlc3NEZXB0aD0yO1RIUkVFLkxlc3NFcXVhbERlcHRoPTM7VEhSRUUuRXF1YWxEZXB0aD00O1RIUkVFLkdyZWF0ZXJFcXVhbERlcHRoPTU7VEhSRUUuR3JlYXRlckRlcHRoPTY7VEhSRUUuTm90RXF1YWxEZXB0aD03O1RIUkVFLk11bHRpcGx5T3BlcmF0aW9uPTA7VEhSRUUuTWl4T3BlcmF0aW9uPTE7VEhSRUUuQWRkT3BlcmF0aW9uPTI7VEhSRUUuVVZNYXBwaW5nPTMwMDtUSFJFRS5DdWJlUmVmbGVjdGlvbk1hcHBpbmc9MzAxO1xuVEhSRUUuQ3ViZVJlZnJhY3Rpb25NYXBwaW5nPTMwMjtUSFJFRS5FcXVpcmVjdGFuZ3VsYXJSZWZsZWN0aW9uTWFwcGluZz0zMDM7VEhSRUUuRXF1aXJlY3Rhbmd1bGFyUmVmcmFjdGlvbk1hcHBpbmc9MzA0O1RIUkVFLlNwaGVyaWNhbFJlZmxlY3Rpb25NYXBwaW5nPTMwNTtUSFJFRS5SZXBlYXRXcmFwcGluZz0xRTM7VEhSRUUuQ2xhbXBUb0VkZ2VXcmFwcGluZz0xMDAxO1RIUkVFLk1pcnJvcmVkUmVwZWF0V3JhcHBpbmc9MTAwMjtUSFJFRS5OZWFyZXN0RmlsdGVyPTEwMDM7VEhSRUUuTmVhcmVzdE1pcE1hcE5lYXJlc3RGaWx0ZXI9MTAwNDtUSFJFRS5OZWFyZXN0TWlwTWFwTGluZWFyRmlsdGVyPTEwMDU7VEhSRUUuTGluZWFyRmlsdGVyPTEwMDY7VEhSRUUuTGluZWFyTWlwTWFwTmVhcmVzdEZpbHRlcj0xMDA3O1RIUkVFLkxpbmVhck1pcE1hcExpbmVhckZpbHRlcj0xMDA4O1RIUkVFLlVuc2lnbmVkQnl0ZVR5cGU9MTAwOTtUSFJFRS5CeXRlVHlwZT0xMDEwO1xuVEhSRUUuU2hvcnRUeXBlPTEwMTE7VEhSRUUuVW5zaWduZWRTaG9ydFR5cGU9MTAxMjtUSFJFRS5JbnRUeXBlPTEwMTM7VEhSRUUuVW5zaWduZWRJbnRUeXBlPTEwMTQ7VEhSRUUuRmxvYXRUeXBlPTEwMTU7VEhSRUUuSGFsZkZsb2F0VHlwZT0xMDI1O1RIUkVFLlVuc2lnbmVkU2hvcnQ0NDQ0VHlwZT0xMDE2O1RIUkVFLlVuc2lnbmVkU2hvcnQ1NTUxVHlwZT0xMDE3O1RIUkVFLlVuc2lnbmVkU2hvcnQ1NjVUeXBlPTEwMTg7VEhSRUUuQWxwaGFGb3JtYXQ9MTAxOTtUSFJFRS5SR0JGb3JtYXQ9MTAyMDtUSFJFRS5SR0JBRm9ybWF0PTEwMjE7VEhSRUUuTHVtaW5hbmNlRm9ybWF0PTEwMjI7VEhSRUUuTHVtaW5hbmNlQWxwaGFGb3JtYXQ9MTAyMztUSFJFRS5SR0JFRm9ybWF0PVRIUkVFLlJHQkFGb3JtYXQ7VEhSRUUuUkdCX1MzVENfRFhUMV9Gb3JtYXQ9MjAwMTtUSFJFRS5SR0JBX1MzVENfRFhUMV9Gb3JtYXQ9MjAwMjtUSFJFRS5SR0JBX1MzVENfRFhUM19Gb3JtYXQ9MjAwMztcblRIUkVFLlJHQkFfUzNUQ19EWFQ1X0Zvcm1hdD0yMDA0O1RIUkVFLlJHQl9QVlJUQ180QlBQVjFfRm9ybWF0PTIxMDA7VEhSRUUuUkdCX1BWUlRDXzJCUFBWMV9Gb3JtYXQ9MjEwMTtUSFJFRS5SR0JBX1BWUlRDXzRCUFBWMV9Gb3JtYXQ9MjEwMjtUSFJFRS5SR0JBX1BWUlRDXzJCUFBWMV9Gb3JtYXQ9MjEwMztUSFJFRS5Mb29wT25jZT0yMjAwO1RIUkVFLkxvb3BSZXBlYXQ9MjIwMTtUSFJFRS5Mb29wUGluZ1Bvbmc9MjIwMjtcblRIUkVFLlByb2plY3Rvcj1mdW5jdGlvbigpe2NvbnNvbGUuZXJyb3IoXCJUSFJFRS5Qcm9qZWN0b3IgaGFzIGJlZW4gbW92ZWQgdG8gL2V4YW1wbGVzL2pzL3JlbmRlcmVycy9Qcm9qZWN0b3IuanMuXCIpO3RoaXMucHJvamVjdFZlY3Rvcj1mdW5jdGlvbihhLGIpe2NvbnNvbGUud2FybihcIlRIUkVFLlByb2plY3RvcjogLnByb2plY3RWZWN0b3IoKSBpcyBub3cgdmVjdG9yLnByb2plY3QoKS5cIik7YS5wcm9qZWN0KGIpfTt0aGlzLnVucHJvamVjdFZlY3Rvcj1mdW5jdGlvbihhLGIpe2NvbnNvbGUud2FybihcIlRIUkVFLlByb2plY3RvcjogLnVucHJvamVjdFZlY3RvcigpIGlzIG5vdyB2ZWN0b3IudW5wcm9qZWN0KCkuXCIpO2EudW5wcm9qZWN0KGIpfTt0aGlzLnBpY2tpbmdSYXk9ZnVuY3Rpb24oYSxiKXtjb25zb2xlLmVycm9yKFwiVEhSRUUuUHJvamVjdG9yOiAucGlja2luZ1JheSgpIGlzIG5vdyByYXljYXN0ZXIuc2V0RnJvbUNhbWVyYSgpLlwiKX19O1xuVEhSRUUuQ2FudmFzUmVuZGVyZXI9ZnVuY3Rpb24oKXtjb25zb2xlLmVycm9yKFwiVEhSRUUuQ2FudmFzUmVuZGVyZXIgaGFzIGJlZW4gbW92ZWQgdG8gL2V4YW1wbGVzL2pzL3JlbmRlcmVycy9DYW52YXNSZW5kZXJlci5qc1wiKTt0aGlzLmRvbUVsZW1lbnQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTt0aGlzLmNsZWFyPWZ1bmN0aW9uKCl7fTt0aGlzLnJlbmRlcj1mdW5jdGlvbigpe307dGhpcy5zZXRDbGVhckNvbG9yPWZ1bmN0aW9uKCl7fTt0aGlzLnNldFNpemU9ZnVuY3Rpb24oKXt9fTtUSFJFRS5Db2xvcj1mdW5jdGlvbihhKXtyZXR1cm4gMz09PWFyZ3VtZW50cy5sZW5ndGg/dGhpcy5mcm9tQXJyYXkoYXJndW1lbnRzKTp0aGlzLnNldChhKX07XG5USFJFRS5Db2xvci5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOlRIUkVFLkNvbG9yLHI6MSxnOjEsYjoxLHNldDpmdW5jdGlvbihhKXthIGluc3RhbmNlb2YgVEhSRUUuQ29sb3I/dGhpcy5jb3B5KGEpOlwibnVtYmVyXCI9PT10eXBlb2YgYT90aGlzLnNldEhleChhKTpcInN0cmluZ1wiPT09dHlwZW9mIGEmJnRoaXMuc2V0U3R5bGUoYSk7cmV0dXJuIHRoaXN9LHNldEhleDpmdW5jdGlvbihhKXthPU1hdGguZmxvb3IoYSk7dGhpcy5yPShhPj4xNiYyNTUpLzI1NTt0aGlzLmc9KGE+PjgmMjU1KS8yNTU7dGhpcy5iPShhJjI1NSkvMjU1O3JldHVybiB0aGlzfSxzZXRSR0I6ZnVuY3Rpb24oYSxiLGMpe3RoaXMucj1hO3RoaXMuZz1iO3RoaXMuYj1jO3JldHVybiB0aGlzfSxzZXRIU0w6ZnVuY3Rpb24oKXtmdW5jdGlvbiBhKGEsYyxkKXswPmQmJihkKz0xKTsxPGQmJihkLT0xKTtyZXR1cm4gZDwxLzY/YSs2KihjLWEpKmQ6LjU+ZD9jOmQ8Mi8zP2ErNiooYy1hKSooMi8zLWQpOmF9cmV0dXJuIGZ1bmN0aW9uKGIsXG5jLGQpe2I9VEhSRUUuTWF0aC5ldWNsaWRlYW5Nb2R1bG8oYiwxKTtjPVRIUkVFLk1hdGguY2xhbXAoYywwLDEpO2Q9VEhSRUUuTWF0aC5jbGFtcChkLDAsMSk7MD09PWM/dGhpcy5yPXRoaXMuZz10aGlzLmI9ZDooYz0uNT49ZD9kKigxK2MpOmQrYy1kKmMsZD0yKmQtYyx0aGlzLnI9YShkLGMsYisxLzMpLHRoaXMuZz1hKGQsYyxiKSx0aGlzLmI9YShkLGMsYi0xLzMpKTtyZXR1cm4gdGhpc319KCksc2V0U3R5bGU6ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYihiKXt2b2lkIDAhPT1iJiYxPnBhcnNlRmxvYXQoYikmJmNvbnNvbGUud2FybihcIlRIUkVFLkNvbG9yOiBBbHBoYSBjb21wb25lbnQgb2YgXCIrYStcIiB3aWxsIGJlIGlnbm9yZWQuXCIpfXZhciBjO2lmKGM9L14oKD86cmdifGhzbClhPylcXChcXHMqKFteXFwpXSopXFwpLy5leGVjKGEpKXt2YXIgZD1jWzJdO3N3aXRjaChjWzFdKXtjYXNlIFwicmdiXCI6Y2FzZSBcInJnYmFcIjppZihjPS9eKFxcZCspXFxzKixcXHMqKFxcZCspXFxzKixcXHMqKFxcZCspXFxzKigsXFxzKihbMC05XSpcXC4/WzAtOV0rKVxccyopPyQvLmV4ZWMoZCkpcmV0dXJuIHRoaXMucj1cbk1hdGgubWluKDI1NSxwYXJzZUludChjWzFdLDEwKSkvMjU1LHRoaXMuZz1NYXRoLm1pbigyNTUscGFyc2VJbnQoY1syXSwxMCkpLzI1NSx0aGlzLmI9TWF0aC5taW4oMjU1LHBhcnNlSW50KGNbM10sMTApKS8yNTUsYihjWzVdKSx0aGlzO2lmKGM9L14oXFxkKylcXCVcXHMqLFxccyooXFxkKylcXCVcXHMqLFxccyooXFxkKylcXCVcXHMqKCxcXHMqKFswLTldKlxcLj9bMC05XSspXFxzKik/JC8uZXhlYyhkKSlyZXR1cm4gdGhpcy5yPU1hdGgubWluKDEwMCxwYXJzZUludChjWzFdLDEwKSkvMTAwLHRoaXMuZz1NYXRoLm1pbigxMDAscGFyc2VJbnQoY1syXSwxMCkpLzEwMCx0aGlzLmI9TWF0aC5taW4oMTAwLHBhcnNlSW50KGNbM10sMTApKS8xMDAsYihjWzVdKSx0aGlzO2JyZWFrO2Nhc2UgXCJoc2xcIjpjYXNlIFwiaHNsYVwiOmlmKGM9L14oWzAtOV0qXFwuP1swLTldKylcXHMqLFxccyooXFxkKylcXCVcXHMqLFxccyooXFxkKylcXCVcXHMqKCxcXHMqKFswLTldKlxcLj9bMC05XSspXFxzKik/JC8uZXhlYyhkKSl7dmFyIGQ9cGFyc2VGbG9hdChjWzFdKS9cbjM2MCxlPXBhcnNlSW50KGNbMl0sMTApLzEwMCxnPXBhcnNlSW50KGNbM10sMTApLzEwMDtiKGNbNV0pO3JldHVybiB0aGlzLnNldEhTTChkLGUsZyl9fX1lbHNlIGlmKGM9L15cXCMoW0EtRmEtZjAtOV0rKSQvLmV4ZWMoYSkpe2M9Y1sxXTtkPWMubGVuZ3RoO2lmKDM9PT1kKXJldHVybiB0aGlzLnI9cGFyc2VJbnQoYy5jaGFyQXQoMCkrYy5jaGFyQXQoMCksMTYpLzI1NSx0aGlzLmc9cGFyc2VJbnQoYy5jaGFyQXQoMSkrYy5jaGFyQXQoMSksMTYpLzI1NSx0aGlzLmI9cGFyc2VJbnQoYy5jaGFyQXQoMikrYy5jaGFyQXQoMiksMTYpLzI1NSx0aGlzO2lmKDY9PT1kKXJldHVybiB0aGlzLnI9cGFyc2VJbnQoYy5jaGFyQXQoMCkrYy5jaGFyQXQoMSksMTYpLzI1NSx0aGlzLmc9cGFyc2VJbnQoYy5jaGFyQXQoMikrYy5jaGFyQXQoMyksMTYpLzI1NSx0aGlzLmI9cGFyc2VJbnQoYy5jaGFyQXQoNCkrYy5jaGFyQXQoNSksMTYpLzI1NSx0aGlzfWEmJjA8YS5sZW5ndGgmJihjPVRIUkVFLkNvbG9yS2V5d29yZHNbYV0sXG52b2lkIDAhPT1jP3RoaXMuc2V0SGV4KGMpOmNvbnNvbGUud2FybihcIlRIUkVFLkNvbG9yOiBVbmtub3duIGNvbG9yIFwiK2EpKTtyZXR1cm4gdGhpc30sY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IodGhpcy5yLHRoaXMuZyx0aGlzLmIpfSxjb3B5OmZ1bmN0aW9uKGEpe3RoaXMucj1hLnI7dGhpcy5nPWEuZzt0aGlzLmI9YS5iO3JldHVybiB0aGlzfSxjb3B5R2FtbWFUb0xpbmVhcjpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPTIpO3RoaXMucj1NYXRoLnBvdyhhLnIsYik7dGhpcy5nPU1hdGgucG93KGEuZyxiKTt0aGlzLmI9TWF0aC5wb3coYS5iLGIpO3JldHVybiB0aGlzfSxjb3B5TGluZWFyVG9HYW1tYTpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPTIpO3ZhciBjPTA8Yj8xL2I6MTt0aGlzLnI9TWF0aC5wb3coYS5yLGMpO3RoaXMuZz1NYXRoLnBvdyhhLmcsYyk7dGhpcy5iPU1hdGgucG93KGEuYixjKTtyZXR1cm4gdGhpc30sY29udmVydEdhbW1hVG9MaW5lYXI6ZnVuY3Rpb24oKXt2YXIgYT1cbnRoaXMucixiPXRoaXMuZyxjPXRoaXMuYjt0aGlzLnI9YSphO3RoaXMuZz1iKmI7dGhpcy5iPWMqYztyZXR1cm4gdGhpc30sY29udmVydExpbmVhclRvR2FtbWE6ZnVuY3Rpb24oKXt0aGlzLnI9TWF0aC5zcXJ0KHRoaXMucik7dGhpcy5nPU1hdGguc3FydCh0aGlzLmcpO3RoaXMuYj1NYXRoLnNxcnQodGhpcy5iKTtyZXR1cm4gdGhpc30sZ2V0SGV4OmZ1bmN0aW9uKCl7cmV0dXJuIDI1NSp0aGlzLnI8PDE2XjI1NSp0aGlzLmc8PDheMjU1KnRoaXMuYjw8MH0sZ2V0SGV4U3RyaW5nOmZ1bmN0aW9uKCl7cmV0dXJuKFwiMDAwMDAwXCIrdGhpcy5nZXRIZXgoKS50b1N0cmluZygxNikpLnNsaWNlKC02KX0sZ2V0SFNMOmZ1bmN0aW9uKGEpe2E9YXx8e2g6MCxzOjAsbDowfTt2YXIgYj10aGlzLnIsYz10aGlzLmcsZD10aGlzLmIsZT1NYXRoLm1heChiLGMsZCksZz1NYXRoLm1pbihiLGMsZCksZixoPShnK2UpLzI7aWYoZz09PWUpZz1mPTA7ZWxzZXt2YXIgbD1lLWcsZz0uNT49aD9sLyhlK2cpOlxubC8oMi1lLWcpO3N3aXRjaChlKXtjYXNlIGI6Zj0oYy1kKS9sKyhjPGQ/NjowKTticmVhaztjYXNlIGM6Zj0oZC1iKS9sKzI7YnJlYWs7Y2FzZSBkOmY9KGItYykvbCs0fWYvPTZ9YS5oPWY7YS5zPWc7YS5sPWg7cmV0dXJuIGF9LGdldFN0eWxlOmZ1bmN0aW9uKCl7cmV0dXJuXCJyZ2IoXCIrKDI1NSp0aGlzLnJ8MCkrXCIsXCIrKDI1NSp0aGlzLmd8MCkrXCIsXCIrKDI1NSp0aGlzLmJ8MCkrXCIpXCJ9LG9mZnNldEhTTDpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9dGhpcy5nZXRIU0woKTtkLmgrPWE7ZC5zKz1iO2QubCs9Yzt0aGlzLnNldEhTTChkLmgsZC5zLGQubCk7cmV0dXJuIHRoaXN9LGFkZDpmdW5jdGlvbihhKXt0aGlzLnIrPWEucjt0aGlzLmcrPWEuZzt0aGlzLmIrPWEuYjtyZXR1cm4gdGhpc30sYWRkQ29sb3JzOmZ1bmN0aW9uKGEsYil7dGhpcy5yPWEucitiLnI7dGhpcy5nPWEuZytiLmc7dGhpcy5iPWEuYitiLmI7cmV0dXJuIHRoaXN9LGFkZFNjYWxhcjpmdW5jdGlvbihhKXt0aGlzLnIrPVxuYTt0aGlzLmcrPWE7dGhpcy5iKz1hO3JldHVybiB0aGlzfSxtdWx0aXBseTpmdW5jdGlvbihhKXt0aGlzLnIqPWEucjt0aGlzLmcqPWEuZzt0aGlzLmIqPWEuYjtyZXR1cm4gdGhpc30sbXVsdGlwbHlTY2FsYXI6ZnVuY3Rpb24oYSl7dGhpcy5yKj1hO3RoaXMuZyo9YTt0aGlzLmIqPWE7cmV0dXJuIHRoaXN9LGxlcnA6ZnVuY3Rpb24oYSxiKXt0aGlzLnIrPShhLnItdGhpcy5yKSpiO3RoaXMuZys9KGEuZy10aGlzLmcpKmI7dGhpcy5iKz0oYS5iLXRoaXMuYikqYjtyZXR1cm4gdGhpc30sZXF1YWxzOmZ1bmN0aW9uKGEpe3JldHVybiBhLnI9PT10aGlzLnImJmEuZz09PXRoaXMuZyYmYS5iPT09dGhpcy5ifSxmcm9tQXJyYXk6ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj0wKTt0aGlzLnI9YVtiXTt0aGlzLmc9YVtiKzFdO3RoaXMuYj1hW2IrMl07cmV0dXJuIHRoaXN9LHRvQXJyYXk6ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1hJiYoYT1bXSk7dm9pZCAwPT09YiYmKGI9MCk7YVtiXT1cbnRoaXMucjthW2IrMV09dGhpcy5nO2FbYisyXT10aGlzLmI7cmV0dXJuIGF9fTtcblRIUkVFLkNvbG9yS2V5d29yZHM9e2FsaWNlYmx1ZToxNTc5MjM4MyxhbnRpcXVld2hpdGU6MTY0NDQzNzUsYXF1YTo2NTUzNSxhcXVhbWFyaW5lOjgzODg1NjQsYXp1cmU6MTU3OTQxNzUsYmVpZ2U6MTYxMTkyNjAsYmlzcXVlOjE2NzcwMjQ0LGJsYWNrOjAsYmxhbmNoZWRhbG1vbmQ6MTY3NzIwNDUsYmx1ZToyNTUsYmx1ZXZpb2xldDo5MDU1MjAyLGJyb3duOjEwODI0MjM0LGJ1cmx5d29vZDoxNDU5NjIzMSxjYWRldGJsdWU6NjI2NjUyOCxjaGFydHJldXNlOjgzODgzNTIsY2hvY29sYXRlOjEzNzg5NDcwLGNvcmFsOjE2NzQ0MjcyLGNvcm5mbG93ZXJibHVlOjY1OTE5ODEsY29ybnNpbGs6MTY3NzUzODgsY3JpbXNvbjoxNDQyMzEwMCxjeWFuOjY1NTM1LGRhcmtibHVlOjEzOSxkYXJrY3lhbjozNTcyMyxkYXJrZ29sZGVucm9kOjEyMDkyOTM5LGRhcmtncmF5OjExMTE5MDE3LGRhcmtncmVlbjoyNTYwMCxkYXJrZ3JleToxMTExOTAxNyxkYXJra2hha2k6MTI0MzMyNTksZGFya21hZ2VudGE6OTEwOTY0MyxcbmRhcmtvbGl2ZWdyZWVuOjU1OTc5OTksZGFya29yYW5nZToxNjc0NzUyMCxkYXJrb3JjaGlkOjEwMDQwMDEyLGRhcmtyZWQ6OTEwOTUwNCxkYXJrc2FsbW9uOjE1MzA4NDEwLGRhcmtzZWFncmVlbjo5NDE5OTE5LGRhcmtzbGF0ZWJsdWU6NDczNDM0NyxkYXJrc2xhdGVncmF5OjMxMDA0OTUsZGFya3NsYXRlZ3JleTozMTAwNDk1LGRhcmt0dXJxdW9pc2U6NTI5NDUsZGFya3Zpb2xldDo5Njk5NTM5LGRlZXBwaW5rOjE2NzE2OTQ3LGRlZXBza3libHVlOjQ5MTUxLGRpbWdyYXk6NjkwODI2NSxkaW1ncmV5OjY5MDgyNjUsZG9kZ2VyYmx1ZToyMDAzMTk5LGZpcmVicmljazoxMTY3NDE0NixmbG9yYWx3aGl0ZToxNjc3NTkyMCxmb3Jlc3RncmVlbjoyMjYzODQyLGZ1Y2hzaWE6MTY3MTE5MzUsZ2FpbnNib3JvOjE0NDc0NDYwLGdob3N0d2hpdGU6MTYzMTY2NzEsZ29sZDoxNjc2NjcyMCxnb2xkZW5yb2Q6MTQzMjkxMjAsZ3JheTo4NDIxNTA0LGdyZWVuOjMyNzY4LGdyZWVueWVsbG93OjExNDAzMDU1LFxuZ3JleTo4NDIxNTA0LGhvbmV5ZGV3OjE1Nzk0MTYwLGhvdHBpbms6MTY3Mzg3NDAsaW5kaWFucmVkOjEzNDU4NTI0LGluZGlnbzo0OTE1MzMwLGl2b3J5OjE2Nzc3MjAwLGtoYWtpOjE1Nzg3NjYwLGxhdmVuZGVyOjE1MTMyNDEwLGxhdmVuZGVyYmx1c2g6MTY3NzMzNjUsbGF3bmdyZWVuOjgxOTA5NzYsbGVtb25jaGlmZm9uOjE2Nzc1ODg1LGxpZ2h0Ymx1ZToxMTM5MzI1NCxsaWdodGNvcmFsOjE1NzYxNTM2LGxpZ2h0Y3lhbjoxNDc0NTU5OSxsaWdodGdvbGRlbnJvZHllbGxvdzoxNjQ0ODIxMCxsaWdodGdyYXk6MTM4ODIzMjMsbGlnaHRncmVlbjo5NDk4MjU2LGxpZ2h0Z3JleToxMzg4MjMyMyxsaWdodHBpbms6MTY3NTg0NjUsbGlnaHRzYWxtb246MTY3NTI3NjIsbGlnaHRzZWFncmVlbjoyMTQyODkwLGxpZ2h0c2t5Ymx1ZTo4OTAwMzQ2LGxpZ2h0c2xhdGVncmF5Ojc4MzM3NTMsbGlnaHRzbGF0ZWdyZXk6NzgzMzc1MyxsaWdodHN0ZWVsYmx1ZToxMTU4NDczNCxsaWdodHllbGxvdzoxNjc3NzE4NCxcbmxpbWU6NjUyODAsbGltZWdyZWVuOjMzMjkzMzAsbGluZW46MTY0NDU2NzAsbWFnZW50YToxNjcxMTkzNSxtYXJvb246ODM4ODYwOCxtZWRpdW1hcXVhbWFyaW5lOjY3MzczMjIsbWVkaXVtYmx1ZToyMDUsbWVkaXVtb3JjaGlkOjEyMjExNjY3LG1lZGl1bXB1cnBsZTo5NjYyNjgzLG1lZGl1bXNlYWdyZWVuOjM5NzgwOTcsbWVkaXVtc2xhdGVibHVlOjgwODc3OTAsbWVkaXVtc3ByaW5nZ3JlZW46NjQxNTQsbWVkaXVtdHVycXVvaXNlOjQ3NzIzMDAsbWVkaXVtdmlvbGV0cmVkOjEzMDQ3MTczLG1pZG5pZ2h0Ymx1ZToxNjQ0OTEyLG1pbnRjcmVhbToxNjEyMTg1MCxtaXN0eXJvc2U6MTY3NzAyNzMsbW9jY2FzaW46MTY3NzAyMjksbmF2YWpvd2hpdGU6MTY3Njg2ODUsbmF2eToxMjgsb2xkbGFjZToxNjY0MzU1OCxvbGl2ZTo4NDIxMzc2LG9saXZlZHJhYjo3MDQ4NzM5LG9yYW5nZToxNjc1MzkyMCxvcmFuZ2VyZWQ6MTY3MjkzNDQsb3JjaGlkOjE0MzE1NzM0LHBhbGVnb2xkZW5yb2Q6MTU2NTcxMzAsXG5wYWxlZ3JlZW46MTAwMjU4ODAscGFsZXR1cnF1b2lzZToxMTUyOTk2NixwYWxldmlvbGV0cmVkOjE0MzgxMjAzLHBhcGF5YXdoaXA6MTY3NzMwNzcscGVhY2hwdWZmOjE2NzY3NjczLHBlcnU6MTM0Njg5OTEscGluazoxNjc2MTAzNSxwbHVtOjE0NTI0NjM3LHBvd2RlcmJsdWU6MTE1OTE5MTAscHVycGxlOjgzODg3MzYscmVkOjE2NzExNjgwLHJvc3licm93bjoxMjM1NzUxOSxyb3lhbGJsdWU6NDI4Njk0NSxzYWRkbGVicm93bjo5MTI3MTg3LHNhbG1vbjoxNjQxNjg4MixzYW5keWJyb3duOjE2MDMyODY0LHNlYWdyZWVuOjMwNTAzMjcsc2Vhc2hlbGw6MTY3NzQ2Mzgsc2llbm5hOjEwNTA2Nzk3LHNpbHZlcjoxMjYzMjI1Nixza3libHVlOjg5MDAzMzEsc2xhdGVibHVlOjY5NzAwNjEsc2xhdGVncmF5OjczNzI5NDQsc2xhdGVncmV5OjczNzI5NDQsc25vdzoxNjc3NTkzMCxzcHJpbmdncmVlbjo2NTQwNyxzdGVlbGJsdWU6NDYyMDk4MCx0YW46MTM4MDg3ODAsdGVhbDozMjg5Nix0aGlzdGxlOjE0MjA0ODg4LFxudG9tYXRvOjE2NzM3MDk1LHR1cnF1b2lzZTo0MjUxODU2LHZpb2xldDoxNTYzMTA4Nix3aGVhdDoxNjExMzMzMSx3aGl0ZToxNjc3NzIxNSx3aGl0ZXNtb2tlOjE2MTE5Mjg1LHllbGxvdzoxNjc3Njk2MCx5ZWxsb3dncmVlbjoxMDE0NTA3NH07VEhSRUUuUXVhdGVybmlvbj1mdW5jdGlvbihhLGIsYyxkKXt0aGlzLl94PWF8fDA7dGhpcy5feT1ifHwwO3RoaXMuX3o9Y3x8MDt0aGlzLl93PXZvaWQgMCE9PWQ/ZDoxfTtcblRIUkVFLlF1YXRlcm5pb24ucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5RdWF0ZXJuaW9uLGdldCB4KCl7cmV0dXJuIHRoaXMuX3h9LHNldCB4KGEpe3RoaXMuX3g9YTt0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKX0sZ2V0IHkoKXtyZXR1cm4gdGhpcy5feX0sc2V0IHkoYSl7dGhpcy5feT1hO3RoaXMub25DaGFuZ2VDYWxsYmFjaygpfSxnZXQgeigpe3JldHVybiB0aGlzLl96fSxzZXQgeihhKXt0aGlzLl96PWE7dGhpcy5vbkNoYW5nZUNhbGxiYWNrKCl9LGdldCB3KCl7cmV0dXJuIHRoaXMuX3d9LHNldCB3KGEpe3RoaXMuX3c9YTt0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKX0sc2V0OmZ1bmN0aW9uKGEsYixjLGQpe3RoaXMuX3g9YTt0aGlzLl95PWI7dGhpcy5fej1jO3RoaXMuX3c9ZDt0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKTtyZXR1cm4gdGhpc30sY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IodGhpcy5feCx0aGlzLl95LHRoaXMuX3osdGhpcy5fdyl9LFxuY29weTpmdW5jdGlvbihhKXt0aGlzLl94PWEueDt0aGlzLl95PWEueTt0aGlzLl96PWEuejt0aGlzLl93PWEudzt0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKTtyZXR1cm4gdGhpc30sc2V0RnJvbUV1bGVyOmZ1bmN0aW9uKGEsYil7aWYoITE9PT1hIGluc3RhbmNlb2YgVEhSRUUuRXVsZXIpdGhyb3cgRXJyb3IoXCJUSFJFRS5RdWF0ZXJuaW9uOiAuc2V0RnJvbUV1bGVyKCkgbm93IGV4cGVjdHMgYSBFdWxlciByb3RhdGlvbiByYXRoZXIgdGhhbiBhIFZlY3RvcjMgYW5kIG9yZGVyLlwiKTt2YXIgYz1NYXRoLmNvcyhhLl94LzIpLGQ9TWF0aC5jb3MoYS5feS8yKSxlPU1hdGguY29zKGEuX3ovMiksZz1NYXRoLnNpbihhLl94LzIpLGY9TWF0aC5zaW4oYS5feS8yKSxoPU1hdGguc2luKGEuX3ovMiksbD1hLm9yZGVyO1wiWFlaXCI9PT1sPyh0aGlzLl94PWcqZCplK2MqZipoLHRoaXMuX3k9YypmKmUtZypkKmgsdGhpcy5fej1jKmQqaCtnKmYqZSx0aGlzLl93PWMqZCplLWcqZipoKTpcIllYWlwiPT09XG5sPyh0aGlzLl94PWcqZCplK2MqZipoLHRoaXMuX3k9YypmKmUtZypkKmgsdGhpcy5fej1jKmQqaC1nKmYqZSx0aGlzLl93PWMqZCplK2cqZipoKTpcIlpYWVwiPT09bD8odGhpcy5feD1nKmQqZS1jKmYqaCx0aGlzLl95PWMqZiplK2cqZCpoLHRoaXMuX3o9YypkKmgrZypmKmUsdGhpcy5fdz1jKmQqZS1nKmYqaCk6XCJaWVhcIj09PWw/KHRoaXMuX3g9ZypkKmUtYypmKmgsdGhpcy5feT1jKmYqZStnKmQqaCx0aGlzLl96PWMqZCpoLWcqZiplLHRoaXMuX3c9YypkKmUrZypmKmgpOlwiWVpYXCI9PT1sPyh0aGlzLl94PWcqZCplK2MqZipoLHRoaXMuX3k9YypmKmUrZypkKmgsdGhpcy5fej1jKmQqaC1nKmYqZSx0aGlzLl93PWMqZCplLWcqZipoKTpcIlhaWVwiPT09bCYmKHRoaXMuX3g9ZypkKmUtYypmKmgsdGhpcy5feT1jKmYqZS1nKmQqaCx0aGlzLl96PWMqZCpoK2cqZiplLHRoaXMuX3c9YypkKmUrZypmKmgpO2lmKCExIT09Yil0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKTtyZXR1cm4gdGhpc30sc2V0RnJvbUF4aXNBbmdsZTpmdW5jdGlvbihhLFxuYil7dmFyIGM9Yi8yLGQ9TWF0aC5zaW4oYyk7dGhpcy5feD1hLngqZDt0aGlzLl95PWEueSpkO3RoaXMuX3o9YS56KmQ7dGhpcy5fdz1NYXRoLmNvcyhjKTt0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKTtyZXR1cm4gdGhpc30sc2V0RnJvbVJvdGF0aW9uTWF0cml4OmZ1bmN0aW9uKGEpe3ZhciBiPWEuZWxlbWVudHMsYz1iWzBdO2E9Yls0XTt2YXIgZD1iWzhdLGU9YlsxXSxnPWJbNV0sZj1iWzldLGg9YlsyXSxsPWJbNl0sYj1iWzEwXSxrPWMrZytiOzA8az8oYz0uNS9NYXRoLnNxcnQoaysxKSx0aGlzLl93PS4yNS9jLHRoaXMuX3g9KGwtZikqYyx0aGlzLl95PShkLWgpKmMsdGhpcy5fej0oZS1hKSpjKTpjPmcmJmM+Yj8oYz0yKk1hdGguc3FydCgxK2MtZy1iKSx0aGlzLl93PShsLWYpL2MsdGhpcy5feD0uMjUqYyx0aGlzLl95PShhK2UpL2MsdGhpcy5fej0oZCtoKS9jKTpnPmI/KGM9MipNYXRoLnNxcnQoMStnLWMtYiksdGhpcy5fdz0oZC1oKS9jLHRoaXMuX3g9KGErZSkvYyx0aGlzLl95PVxuLjI1KmMsdGhpcy5fej0oZitsKS9jKTooYz0yKk1hdGguc3FydCgxK2ItYy1nKSx0aGlzLl93PShlLWEpL2MsdGhpcy5feD0oZCtoKS9jLHRoaXMuX3k9KGYrbCkvYyx0aGlzLl96PS4yNSpjKTt0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKTtyZXR1cm4gdGhpc30sc2V0RnJvbVVuaXRWZWN0b3JzOmZ1bmN0aW9uKCl7dmFyIGEsYjtyZXR1cm4gZnVuY3Rpb24oYyxkKXt2b2lkIDA9PT1hJiYoYT1uZXcgVEhSRUUuVmVjdG9yMyk7Yj1jLmRvdChkKSsxOzFFLTY+Yj8oYj0wLE1hdGguYWJzKGMueCk+TWF0aC5hYnMoYy56KT9hLnNldCgtYy55LGMueCwwKTphLnNldCgwLC1jLnosYy55KSk6YS5jcm9zc1ZlY3RvcnMoYyxkKTt0aGlzLl94PWEueDt0aGlzLl95PWEueTt0aGlzLl96PWEuejt0aGlzLl93PWI7dGhpcy5ub3JtYWxpemUoKTtyZXR1cm4gdGhpc319KCksaW52ZXJzZTpmdW5jdGlvbigpe3RoaXMuY29uanVnYXRlKCkubm9ybWFsaXplKCk7cmV0dXJuIHRoaXN9LGNvbmp1Z2F0ZTpmdW5jdGlvbigpe3RoaXMuX3gqPVxuLTE7dGhpcy5feSo9LTE7dGhpcy5feio9LTE7dGhpcy5vbkNoYW5nZUNhbGxiYWNrKCk7cmV0dXJuIHRoaXN9LGRvdDpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5feCphLl94K3RoaXMuX3kqYS5feSt0aGlzLl96KmEuX3ordGhpcy5fdyphLl93fSxsZW5ndGhTcTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl94KnRoaXMuX3grdGhpcy5feSp0aGlzLl95K3RoaXMuX3oqdGhpcy5feit0aGlzLl93KnRoaXMuX3d9LGxlbmd0aDpmdW5jdGlvbigpe3JldHVybiBNYXRoLnNxcnQodGhpcy5feCp0aGlzLl94K3RoaXMuX3kqdGhpcy5feSt0aGlzLl96KnRoaXMuX3ordGhpcy5fdyp0aGlzLl93KX0sbm9ybWFsaXplOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5sZW5ndGgoKTswPT09YT8odGhpcy5fej10aGlzLl95PXRoaXMuX3g9MCx0aGlzLl93PTEpOihhPTEvYSx0aGlzLl94Kj1hLHRoaXMuX3kqPWEsdGhpcy5feio9YSx0aGlzLl93Kj1hKTt0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKTtyZXR1cm4gdGhpc30sXG5tdWx0aXBseTpmdW5jdGlvbihhLGIpe3JldHVybiB2b2lkIDAhPT1iPyhjb25zb2xlLndhcm4oXCJUSFJFRS5RdWF0ZXJuaW9uOiAubXVsdGlwbHkoKSBub3cgb25seSBhY2NlcHRzIG9uZSBhcmd1bWVudC4gVXNlIC5tdWx0aXBseVF1YXRlcm5pb25zKCBhLCBiICkgaW5zdGVhZC5cIiksdGhpcy5tdWx0aXBseVF1YXRlcm5pb25zKGEsYikpOnRoaXMubXVsdGlwbHlRdWF0ZXJuaW9ucyh0aGlzLGEpfSxtdWx0aXBseVF1YXRlcm5pb25zOmZ1bmN0aW9uKGEsYil7dmFyIGM9YS5feCxkPWEuX3ksZT1hLl96LGc9YS5fdyxmPWIuX3gsaD1iLl95LGw9Yi5feixrPWIuX3c7dGhpcy5feD1jKmsrZypmK2QqbC1lKmg7dGhpcy5feT1kKmsrZypoK2UqZi1jKmw7dGhpcy5fej1lKmsrZypsK2MqaC1kKmY7dGhpcy5fdz1nKmstYypmLWQqaC1lKmw7dGhpcy5vbkNoYW5nZUNhbGxiYWNrKCk7cmV0dXJuIHRoaXN9LG11bHRpcGx5VmVjdG9yMzpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5RdWF0ZXJuaW9uOiAubXVsdGlwbHlWZWN0b3IzKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIGlzIG5vdyB2ZWN0b3IuYXBwbHlRdWF0ZXJuaW9uKCBxdWF0ZXJuaW9uICkgaW5zdGVhZC5cIik7XG5yZXR1cm4gYS5hcHBseVF1YXRlcm5pb24odGhpcyl9LHNsZXJwOmZ1bmN0aW9uKGEsYil7aWYoMD09PWIpcmV0dXJuIHRoaXM7aWYoMT09PWIpcmV0dXJuIHRoaXMuY29weShhKTt2YXIgYz10aGlzLl94LGQ9dGhpcy5feSxlPXRoaXMuX3osZz10aGlzLl93LGY9ZyphLl93K2MqYS5feCtkKmEuX3krZSphLl96OzA+Zj8odGhpcy5fdz0tYS5fdyx0aGlzLl94PS1hLl94LHRoaXMuX3k9LWEuX3ksdGhpcy5fej0tYS5feixmPS1mKTp0aGlzLmNvcHkoYSk7aWYoMTw9ZilyZXR1cm4gdGhpcy5fdz1nLHRoaXMuX3g9Yyx0aGlzLl95PWQsdGhpcy5fej1lLHRoaXM7dmFyIGg9TWF0aC5hY29zKGYpLGw9TWF0aC5zcXJ0KDEtZipmKTtpZiguMDAxPk1hdGguYWJzKGwpKXJldHVybiB0aGlzLl93PS41KihnK3RoaXMuX3cpLHRoaXMuX3g9LjUqKGMrdGhpcy5feCksdGhpcy5feT0uNSooZCt0aGlzLl95KSx0aGlzLl96PS41KihlK3RoaXMuX3opLHRoaXM7Zj1NYXRoLnNpbigoMS1iKSpoKS9sO2g9XG5NYXRoLnNpbihiKmgpL2w7dGhpcy5fdz1nKmYrdGhpcy5fdypoO3RoaXMuX3g9YypmK3RoaXMuX3gqaDt0aGlzLl95PWQqZit0aGlzLl95Kmg7dGhpcy5fej1lKmYrdGhpcy5feipoO3RoaXMub25DaGFuZ2VDYWxsYmFjaygpO3JldHVybiB0aGlzfSxlcXVhbHM6ZnVuY3Rpb24oYSl7cmV0dXJuIGEuX3g9PT10aGlzLl94JiZhLl95PT09dGhpcy5feSYmYS5fej09PXRoaXMuX3omJmEuX3c9PT10aGlzLl93fSxmcm9tQXJyYXk6ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj0wKTt0aGlzLl94PWFbYl07dGhpcy5feT1hW2IrMV07dGhpcy5fej1hW2IrMl07dGhpcy5fdz1hW2IrM107dGhpcy5vbkNoYW5nZUNhbGxiYWNrKCk7cmV0dXJuIHRoaXN9LHRvQXJyYXk6ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1hJiYoYT1bXSk7dm9pZCAwPT09YiYmKGI9MCk7YVtiXT10aGlzLl94O2FbYisxXT10aGlzLl95O2FbYisyXT10aGlzLl96O2FbYiszXT10aGlzLl93O3JldHVybiBhfSxvbkNoYW5nZTpmdW5jdGlvbihhKXt0aGlzLm9uQ2hhbmdlQ2FsbGJhY2s9XG5hO3JldHVybiB0aGlzfSxvbkNoYW5nZUNhbGxiYWNrOmZ1bmN0aW9uKCl7fX07VEhSRUUuUXVhdGVybmlvbi5zbGVycD1mdW5jdGlvbihhLGIsYyxkKXtyZXR1cm4gYy5jb3B5KGEpLnNsZXJwKGIsZCl9O1RIUkVFLlZlY3RvcjI9ZnVuY3Rpb24oYSxiKXt0aGlzLng9YXx8MDt0aGlzLnk9Ynx8MH07XG5USFJFRS5WZWN0b3IyLnByb3RvdHlwZT17Y29uc3RydWN0b3I6VEhSRUUuVmVjdG9yMixnZXQgd2lkdGgoKXtyZXR1cm4gdGhpcy54fSxzZXQgd2lkdGgoYSl7dGhpcy54PWF9LGdldCBoZWlnaHQoKXtyZXR1cm4gdGhpcy55fSxzZXQgaGVpZ2h0KGEpe3RoaXMueT1hfSxzZXQ6ZnVuY3Rpb24oYSxiKXt0aGlzLng9YTt0aGlzLnk9YjtyZXR1cm4gdGhpc30sc2V0WDpmdW5jdGlvbihhKXt0aGlzLng9YTtyZXR1cm4gdGhpc30sc2V0WTpmdW5jdGlvbihhKXt0aGlzLnk9YTtyZXR1cm4gdGhpc30sc2V0Q29tcG9uZW50OmZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMDp0aGlzLng9YjticmVhaztjYXNlIDE6dGhpcy55PWI7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihcImluZGV4IGlzIG91dCBvZiByYW5nZTogXCIrYSk7fX0sZ2V0Q29tcG9uZW50OmZ1bmN0aW9uKGEpe3N3aXRjaChhKXtjYXNlIDA6cmV0dXJuIHRoaXMueDtjYXNlIDE6cmV0dXJuIHRoaXMueTtkZWZhdWx0OnRocm93IEVycm9yKFwiaW5kZXggaXMgb3V0IG9mIHJhbmdlOiBcIitcbmEpO319LGNsb25lOmZ1bmN0aW9uKCl7cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMueCx0aGlzLnkpfSxjb3B5OmZ1bmN0aW9uKGEpe3RoaXMueD1hLng7dGhpcy55PWEueTtyZXR1cm4gdGhpc30sYWRkOmZ1bmN0aW9uKGEsYil7aWYodm9pZCAwIT09YilyZXR1cm4gY29uc29sZS53YXJuKFwiVEhSRUUuVmVjdG9yMjogLmFkZCgpIG5vdyBvbmx5IGFjY2VwdHMgb25lIGFyZ3VtZW50LiBVc2UgLmFkZFZlY3RvcnMoIGEsIGIgKSBpbnN0ZWFkLlwiKSx0aGlzLmFkZFZlY3RvcnMoYSxiKTt0aGlzLngrPWEueDt0aGlzLnkrPWEueTtyZXR1cm4gdGhpc30sYWRkU2NhbGFyOmZ1bmN0aW9uKGEpe3RoaXMueCs9YTt0aGlzLnkrPWE7cmV0dXJuIHRoaXN9LGFkZFZlY3RvcnM6ZnVuY3Rpb24oYSxiKXt0aGlzLng9YS54K2IueDt0aGlzLnk9YS55K2IueTtyZXR1cm4gdGhpc30sYWRkU2NhbGVkVmVjdG9yOmZ1bmN0aW9uKGEsYil7dGhpcy54Kz1hLngqYjt0aGlzLnkrPWEueSpiO3JldHVybiB0aGlzfSxcbnN1YjpmdW5jdGlvbihhLGIpe2lmKHZvaWQgMCE9PWIpcmV0dXJuIGNvbnNvbGUud2FybihcIlRIUkVFLlZlY3RvcjI6IC5zdWIoKSBub3cgb25seSBhY2NlcHRzIG9uZSBhcmd1bWVudC4gVXNlIC5zdWJWZWN0b3JzKCBhLCBiICkgaW5zdGVhZC5cIiksdGhpcy5zdWJWZWN0b3JzKGEsYik7dGhpcy54LT1hLng7dGhpcy55LT1hLnk7cmV0dXJuIHRoaXN9LHN1YlNjYWxhcjpmdW5jdGlvbihhKXt0aGlzLngtPWE7dGhpcy55LT1hO3JldHVybiB0aGlzfSxzdWJWZWN0b3JzOmZ1bmN0aW9uKGEsYil7dGhpcy54PWEueC1iLng7dGhpcy55PWEueS1iLnk7cmV0dXJuIHRoaXN9LG11bHRpcGx5OmZ1bmN0aW9uKGEpe3RoaXMueCo9YS54O3RoaXMueSo9YS55O3JldHVybiB0aGlzfSxtdWx0aXBseVNjYWxhcjpmdW5jdGlvbihhKXtpc0Zpbml0ZShhKT8odGhpcy54Kj1hLHRoaXMueSo9YSk6dGhpcy55PXRoaXMueD0wO3JldHVybiB0aGlzfSxkaXZpZGU6ZnVuY3Rpb24oYSl7dGhpcy54Lz1hLng7XG50aGlzLnkvPWEueTtyZXR1cm4gdGhpc30sZGl2aWRlU2NhbGFyOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLm11bHRpcGx5U2NhbGFyKDEvYSl9LG1pbjpmdW5jdGlvbihhKXt0aGlzLng9TWF0aC5taW4odGhpcy54LGEueCk7dGhpcy55PU1hdGgubWluKHRoaXMueSxhLnkpO3JldHVybiB0aGlzfSxtYXg6ZnVuY3Rpb24oYSl7dGhpcy54PU1hdGgubWF4KHRoaXMueCxhLngpO3RoaXMueT1NYXRoLm1heCh0aGlzLnksYS55KTtyZXR1cm4gdGhpc30sY2xhbXA6ZnVuY3Rpb24oYSxiKXt0aGlzLng9TWF0aC5tYXgoYS54LE1hdGgubWluKGIueCx0aGlzLngpKTt0aGlzLnk9TWF0aC5tYXgoYS55LE1hdGgubWluKGIueSx0aGlzLnkpKTtyZXR1cm4gdGhpc30sY2xhbXBTY2FsYXI6ZnVuY3Rpb24oKXt2YXIgYSxiO3JldHVybiBmdW5jdGlvbihjLGQpe3ZvaWQgMD09PWEmJihhPW5ldyBUSFJFRS5WZWN0b3IyLGI9bmV3IFRIUkVFLlZlY3RvcjIpO2Euc2V0KGMsYyk7Yi5zZXQoZCxkKTtyZXR1cm4gdGhpcy5jbGFtcChhLFxuYil9fSgpLGNsYW1wTGVuZ3RoOmZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5sZW5ndGgoKTt0aGlzLm11bHRpcGx5U2NhbGFyKE1hdGgubWF4KGEsTWF0aC5taW4oYixjKSkvYyk7cmV0dXJuIHRoaXN9LGZsb29yOmZ1bmN0aW9uKCl7dGhpcy54PU1hdGguZmxvb3IodGhpcy54KTt0aGlzLnk9TWF0aC5mbG9vcih0aGlzLnkpO3JldHVybiB0aGlzfSxjZWlsOmZ1bmN0aW9uKCl7dGhpcy54PU1hdGguY2VpbCh0aGlzLngpO3RoaXMueT1NYXRoLmNlaWwodGhpcy55KTtyZXR1cm4gdGhpc30scm91bmQ6ZnVuY3Rpb24oKXt0aGlzLng9TWF0aC5yb3VuZCh0aGlzLngpO3RoaXMueT1NYXRoLnJvdW5kKHRoaXMueSk7cmV0dXJuIHRoaXN9LHJvdW5kVG9aZXJvOmZ1bmN0aW9uKCl7dGhpcy54PTA+dGhpcy54P01hdGguY2VpbCh0aGlzLngpOk1hdGguZmxvb3IodGhpcy54KTt0aGlzLnk9MD50aGlzLnk/TWF0aC5jZWlsKHRoaXMueSk6TWF0aC5mbG9vcih0aGlzLnkpO3JldHVybiB0aGlzfSxuZWdhdGU6ZnVuY3Rpb24oKXt0aGlzLng9XG4tdGhpcy54O3RoaXMueT0tdGhpcy55O3JldHVybiB0aGlzfSxkb3Q6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMueCphLngrdGhpcy55KmEueX0sbGVuZ3RoU3E6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy54KnRoaXMueCt0aGlzLnkqdGhpcy55fSxsZW5ndGg6ZnVuY3Rpb24oKXtyZXR1cm4gTWF0aC5zcXJ0KHRoaXMueCp0aGlzLngrdGhpcy55KnRoaXMueSl9LGxlbmd0aE1hbmhhdHRhbjpmdW5jdGlvbigpe3JldHVybiBNYXRoLmFicyh0aGlzLngpK01hdGguYWJzKHRoaXMueSl9LG5vcm1hbGl6ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmRpdmlkZVNjYWxhcih0aGlzLmxlbmd0aCgpKX0sZGlzdGFuY2VUbzpmdW5jdGlvbihhKXtyZXR1cm4gTWF0aC5zcXJ0KHRoaXMuZGlzdGFuY2VUb1NxdWFyZWQoYSkpfSxkaXN0YW5jZVRvU3F1YXJlZDpmdW5jdGlvbihhKXt2YXIgYj10aGlzLngtYS54O2E9dGhpcy55LWEueTtyZXR1cm4gYipiK2EqYX0sc2V0TGVuZ3RoOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLm11bHRpcGx5U2NhbGFyKGEvXG50aGlzLmxlbmd0aCgpKX0sbGVycDpmdW5jdGlvbihhLGIpe3RoaXMueCs9KGEueC10aGlzLngpKmI7dGhpcy55Kz0oYS55LXRoaXMueSkqYjtyZXR1cm4gdGhpc30sbGVycFZlY3RvcnM6ZnVuY3Rpb24oYSxiLGMpe3RoaXMuc3ViVmVjdG9ycyhiLGEpLm11bHRpcGx5U2NhbGFyKGMpLmFkZChhKTtyZXR1cm4gdGhpc30sZXF1YWxzOmZ1bmN0aW9uKGEpe3JldHVybiBhLng9PT10aGlzLngmJmEueT09PXRoaXMueX0sZnJvbUFycmF5OmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9MCk7dGhpcy54PWFbYl07dGhpcy55PWFbYisxXTtyZXR1cm4gdGhpc30sdG9BcnJheTpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWEmJihhPVtdKTt2b2lkIDA9PT1iJiYoYj0wKTthW2JdPXRoaXMueDthW2IrMV09dGhpcy55O3JldHVybiBhfSxmcm9tQXR0cmlidXRlOmZ1bmN0aW9uKGEsYixjKXt2b2lkIDA9PT1jJiYoYz0wKTtiPWIqYS5pdGVtU2l6ZStjO3RoaXMueD1hLmFycmF5W2JdO3RoaXMueT1cbmEuYXJyYXlbYisxXTtyZXR1cm4gdGhpc30scm90YXRlQXJvdW5kOmZ1bmN0aW9uKGEsYil7dmFyIGM9TWF0aC5jb3MoYiksZD1NYXRoLnNpbihiKSxlPXRoaXMueC1hLngsZz10aGlzLnktYS55O3RoaXMueD1lKmMtZypkK2EueDt0aGlzLnk9ZSpkK2cqYythLnk7cmV0dXJuIHRoaXN9fTtUSFJFRS5WZWN0b3IzPWZ1bmN0aW9uKGEsYixjKXt0aGlzLng9YXx8MDt0aGlzLnk9Ynx8MDt0aGlzLno9Y3x8MH07XG5USFJFRS5WZWN0b3IzLnByb3RvdHlwZT17Y29uc3RydWN0b3I6VEhSRUUuVmVjdG9yMyxzZXQ6ZnVuY3Rpb24oYSxiLGMpe3RoaXMueD1hO3RoaXMueT1iO3RoaXMuej1jO3JldHVybiB0aGlzfSxzZXRYOmZ1bmN0aW9uKGEpe3RoaXMueD1hO3JldHVybiB0aGlzfSxzZXRZOmZ1bmN0aW9uKGEpe3RoaXMueT1hO3JldHVybiB0aGlzfSxzZXRaOmZ1bmN0aW9uKGEpe3RoaXMuej1hO3JldHVybiB0aGlzfSxzZXRDb21wb25lbnQ6ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYSl7Y2FzZSAwOnRoaXMueD1iO2JyZWFrO2Nhc2UgMTp0aGlzLnk9YjticmVhaztjYXNlIDI6dGhpcy56PWI7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihcImluZGV4IGlzIG91dCBvZiByYW5nZTogXCIrYSk7fX0sZ2V0Q29tcG9uZW50OmZ1bmN0aW9uKGEpe3N3aXRjaChhKXtjYXNlIDA6cmV0dXJuIHRoaXMueDtjYXNlIDE6cmV0dXJuIHRoaXMueTtjYXNlIDI6cmV0dXJuIHRoaXMuejtkZWZhdWx0OnRocm93IEVycm9yKFwiaW5kZXggaXMgb3V0IG9mIHJhbmdlOiBcIitcbmEpO319LGNsb25lOmZ1bmN0aW9uKCl7cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMueCx0aGlzLnksdGhpcy56KX0sY29weTpmdW5jdGlvbihhKXt0aGlzLng9YS54O3RoaXMueT1hLnk7dGhpcy56PWEuejtyZXR1cm4gdGhpc30sYWRkOmZ1bmN0aW9uKGEsYil7aWYodm9pZCAwIT09YilyZXR1cm4gY29uc29sZS53YXJuKFwiVEhSRUUuVmVjdG9yMzogLmFkZCgpIG5vdyBvbmx5IGFjY2VwdHMgb25lIGFyZ3VtZW50LiBVc2UgLmFkZFZlY3RvcnMoIGEsIGIgKSBpbnN0ZWFkLlwiKSx0aGlzLmFkZFZlY3RvcnMoYSxiKTt0aGlzLngrPWEueDt0aGlzLnkrPWEueTt0aGlzLnorPWEuejtyZXR1cm4gdGhpc30sYWRkU2NhbGFyOmZ1bmN0aW9uKGEpe3RoaXMueCs9YTt0aGlzLnkrPWE7dGhpcy56Kz1hO3JldHVybiB0aGlzfSxhZGRWZWN0b3JzOmZ1bmN0aW9uKGEsYil7dGhpcy54PWEueCtiLng7dGhpcy55PWEueStiLnk7dGhpcy56PWEueitiLno7cmV0dXJuIHRoaXN9LGFkZFNjYWxlZFZlY3RvcjpmdW5jdGlvbihhLFxuYil7dGhpcy54Kz1hLngqYjt0aGlzLnkrPWEueSpiO3RoaXMueis9YS56KmI7cmV0dXJuIHRoaXN9LHN1YjpmdW5jdGlvbihhLGIpe2lmKHZvaWQgMCE9PWIpcmV0dXJuIGNvbnNvbGUud2FybihcIlRIUkVFLlZlY3RvcjM6IC5zdWIoKSBub3cgb25seSBhY2NlcHRzIG9uZSBhcmd1bWVudC4gVXNlIC5zdWJWZWN0b3JzKCBhLCBiICkgaW5zdGVhZC5cIiksdGhpcy5zdWJWZWN0b3JzKGEsYik7dGhpcy54LT1hLng7dGhpcy55LT1hLnk7dGhpcy56LT1hLno7cmV0dXJuIHRoaXN9LHN1YlNjYWxhcjpmdW5jdGlvbihhKXt0aGlzLngtPWE7dGhpcy55LT1hO3RoaXMuei09YTtyZXR1cm4gdGhpc30sc3ViVmVjdG9yczpmdW5jdGlvbihhLGIpe3RoaXMueD1hLngtYi54O3RoaXMueT1hLnktYi55O3RoaXMuej1hLnotYi56O3JldHVybiB0aGlzfSxtdWx0aXBseTpmdW5jdGlvbihhLGIpe2lmKHZvaWQgMCE9PWIpcmV0dXJuIGNvbnNvbGUud2FybihcIlRIUkVFLlZlY3RvcjM6IC5tdWx0aXBseSgpIG5vdyBvbmx5IGFjY2VwdHMgb25lIGFyZ3VtZW50LiBVc2UgLm11bHRpcGx5VmVjdG9ycyggYSwgYiApIGluc3RlYWQuXCIpLFxudGhpcy5tdWx0aXBseVZlY3RvcnMoYSxiKTt0aGlzLngqPWEueDt0aGlzLnkqPWEueTt0aGlzLnoqPWEuejtyZXR1cm4gdGhpc30sbXVsdGlwbHlTY2FsYXI6ZnVuY3Rpb24oYSl7aXNGaW5pdGUoYSk/KHRoaXMueCo9YSx0aGlzLnkqPWEsdGhpcy56Kj1hKTp0aGlzLno9dGhpcy55PXRoaXMueD0wO3JldHVybiB0aGlzfSxtdWx0aXBseVZlY3RvcnM6ZnVuY3Rpb24oYSxiKXt0aGlzLng9YS54KmIueDt0aGlzLnk9YS55KmIueTt0aGlzLno9YS56KmIuejtyZXR1cm4gdGhpc30sYXBwbHlFdWxlcjpmdW5jdGlvbigpe3ZhciBhO3JldHVybiBmdW5jdGlvbihiKXshMT09PWIgaW5zdGFuY2VvZiBUSFJFRS5FdWxlciYmY29uc29sZS5lcnJvcihcIlRIUkVFLlZlY3RvcjM6IC5hcHBseUV1bGVyKCkgbm93IGV4cGVjdHMgYSBFdWxlciByb3RhdGlvbiByYXRoZXIgdGhhbiBhIFZlY3RvcjMgYW5kIG9yZGVyLlwiKTt2b2lkIDA9PT1hJiYoYT1uZXcgVEhSRUUuUXVhdGVybmlvbik7dGhpcy5hcHBseVF1YXRlcm5pb24oYS5zZXRGcm9tRXVsZXIoYikpO1xucmV0dXJuIHRoaXN9fSgpLGFwcGx5QXhpc0FuZ2xlOmZ1bmN0aW9uKCl7dmFyIGE7cmV0dXJuIGZ1bmN0aW9uKGIsYyl7dm9pZCAwPT09YSYmKGE9bmV3IFRIUkVFLlF1YXRlcm5pb24pO3RoaXMuYXBwbHlRdWF0ZXJuaW9uKGEuc2V0RnJvbUF4aXNBbmdsZShiLGMpKTtyZXR1cm4gdGhpc319KCksYXBwbHlNYXRyaXgzOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMueCxjPXRoaXMueSxkPXRoaXMuejthPWEuZWxlbWVudHM7dGhpcy54PWFbMF0qYithWzNdKmMrYVs2XSpkO3RoaXMueT1hWzFdKmIrYVs0XSpjK2FbN10qZDt0aGlzLno9YVsyXSpiK2FbNV0qYythWzhdKmQ7cmV0dXJuIHRoaXN9LGFwcGx5TWF0cml4NDpmdW5jdGlvbihhKXt2YXIgYj10aGlzLngsYz10aGlzLnksZD10aGlzLno7YT1hLmVsZW1lbnRzO3RoaXMueD1hWzBdKmIrYVs0XSpjK2FbOF0qZCthWzEyXTt0aGlzLnk9YVsxXSpiK2FbNV0qYythWzldKmQrYVsxM107dGhpcy56PWFbMl0qYithWzZdKmMrYVsxMF0qZCthWzE0XTtcbnJldHVybiB0aGlzfSxhcHBseVByb2plY3Rpb246ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy54LGM9dGhpcy55LGQ9dGhpcy56O2E9YS5lbGVtZW50czt2YXIgZT0xLyhhWzNdKmIrYVs3XSpjK2FbMTFdKmQrYVsxNV0pO3RoaXMueD0oYVswXSpiK2FbNF0qYythWzhdKmQrYVsxMl0pKmU7dGhpcy55PShhWzFdKmIrYVs1XSpjK2FbOV0qZCthWzEzXSkqZTt0aGlzLno9KGFbMl0qYithWzZdKmMrYVsxMF0qZCthWzE0XSkqZTtyZXR1cm4gdGhpc30sYXBwbHlRdWF0ZXJuaW9uOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMueCxjPXRoaXMueSxkPXRoaXMueixlPWEueCxnPWEueSxmPWEuejthPWEudzt2YXIgaD1hKmIrZypkLWYqYyxsPWEqYytmKmItZSpkLGs9YSpkK2UqYy1nKmIsYj0tZSpiLWcqYy1mKmQ7dGhpcy54PWgqYStiKi1lK2wqLWYtayotZzt0aGlzLnk9bCphK2IqLWcrayotZS1oKi1mO3RoaXMuej1rKmErYiotZitoKi1nLWwqLWU7cmV0dXJuIHRoaXN9LHByb2plY3Q6ZnVuY3Rpb24oKXt2YXIgYTtcbnJldHVybiBmdW5jdGlvbihiKXt2b2lkIDA9PT1hJiYoYT1uZXcgVEhSRUUuTWF0cml4NCk7YS5tdWx0aXBseU1hdHJpY2VzKGIucHJvamVjdGlvbk1hdHJpeCxhLmdldEludmVyc2UoYi5tYXRyaXhXb3JsZCkpO3JldHVybiB0aGlzLmFwcGx5UHJvamVjdGlvbihhKX19KCksdW5wcm9qZWN0OmZ1bmN0aW9uKCl7dmFyIGE7cmV0dXJuIGZ1bmN0aW9uKGIpe3ZvaWQgMD09PWEmJihhPW5ldyBUSFJFRS5NYXRyaXg0KTthLm11bHRpcGx5TWF0cmljZXMoYi5tYXRyaXhXb3JsZCxhLmdldEludmVyc2UoYi5wcm9qZWN0aW9uTWF0cml4KSk7cmV0dXJuIHRoaXMuYXBwbHlQcm9qZWN0aW9uKGEpfX0oKSx0cmFuc2Zvcm1EaXJlY3Rpb246ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy54LGM9dGhpcy55LGQ9dGhpcy56O2E9YS5lbGVtZW50czt0aGlzLng9YVswXSpiK2FbNF0qYythWzhdKmQ7dGhpcy55PWFbMV0qYithWzVdKmMrYVs5XSpkO3RoaXMuej1hWzJdKmIrYVs2XSpjK2FbMTBdKmQ7dGhpcy5ub3JtYWxpemUoKTtcbnJldHVybiB0aGlzfSxkaXZpZGU6ZnVuY3Rpb24oYSl7dGhpcy54Lz1hLng7dGhpcy55Lz1hLnk7dGhpcy56Lz1hLno7cmV0dXJuIHRoaXN9LGRpdmlkZVNjYWxhcjpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5tdWx0aXBseVNjYWxhcigxL2EpfSxtaW46ZnVuY3Rpb24oYSl7dGhpcy54PU1hdGgubWluKHRoaXMueCxhLngpO3RoaXMueT1NYXRoLm1pbih0aGlzLnksYS55KTt0aGlzLno9TWF0aC5taW4odGhpcy56LGEueik7cmV0dXJuIHRoaXN9LG1heDpmdW5jdGlvbihhKXt0aGlzLng9TWF0aC5tYXgodGhpcy54LGEueCk7dGhpcy55PU1hdGgubWF4KHRoaXMueSxhLnkpO3RoaXMuej1NYXRoLm1heCh0aGlzLnosYS56KTtyZXR1cm4gdGhpc30sY2xhbXA6ZnVuY3Rpb24oYSxiKXt0aGlzLng9TWF0aC5tYXgoYS54LE1hdGgubWluKGIueCx0aGlzLngpKTt0aGlzLnk9TWF0aC5tYXgoYS55LE1hdGgubWluKGIueSx0aGlzLnkpKTt0aGlzLno9TWF0aC5tYXgoYS56LE1hdGgubWluKGIueixcbnRoaXMueikpO3JldHVybiB0aGlzfSxjbGFtcFNjYWxhcjpmdW5jdGlvbigpe3ZhciBhLGI7cmV0dXJuIGZ1bmN0aW9uKGMsZCl7dm9pZCAwPT09YSYmKGE9bmV3IFRIUkVFLlZlY3RvcjMsYj1uZXcgVEhSRUUuVmVjdG9yMyk7YS5zZXQoYyxjLGMpO2Iuc2V0KGQsZCxkKTtyZXR1cm4gdGhpcy5jbGFtcChhLGIpfX0oKSxjbGFtcExlbmd0aDpmdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMubGVuZ3RoKCk7dGhpcy5tdWx0aXBseVNjYWxhcihNYXRoLm1heChhLE1hdGgubWluKGIsYykpL2MpO3JldHVybiB0aGlzfSxmbG9vcjpmdW5jdGlvbigpe3RoaXMueD1NYXRoLmZsb29yKHRoaXMueCk7dGhpcy55PU1hdGguZmxvb3IodGhpcy55KTt0aGlzLno9TWF0aC5mbG9vcih0aGlzLnopO3JldHVybiB0aGlzfSxjZWlsOmZ1bmN0aW9uKCl7dGhpcy54PU1hdGguY2VpbCh0aGlzLngpO3RoaXMueT1NYXRoLmNlaWwodGhpcy55KTt0aGlzLno9TWF0aC5jZWlsKHRoaXMueik7cmV0dXJuIHRoaXN9LFxucm91bmQ6ZnVuY3Rpb24oKXt0aGlzLng9TWF0aC5yb3VuZCh0aGlzLngpO3RoaXMueT1NYXRoLnJvdW5kKHRoaXMueSk7dGhpcy56PU1hdGgucm91bmQodGhpcy56KTtyZXR1cm4gdGhpc30scm91bmRUb1plcm86ZnVuY3Rpb24oKXt0aGlzLng9MD50aGlzLng/TWF0aC5jZWlsKHRoaXMueCk6TWF0aC5mbG9vcih0aGlzLngpO3RoaXMueT0wPnRoaXMueT9NYXRoLmNlaWwodGhpcy55KTpNYXRoLmZsb29yKHRoaXMueSk7dGhpcy56PTA+dGhpcy56P01hdGguY2VpbCh0aGlzLnopOk1hdGguZmxvb3IodGhpcy56KTtyZXR1cm4gdGhpc30sbmVnYXRlOmZ1bmN0aW9uKCl7dGhpcy54PS10aGlzLng7dGhpcy55PS10aGlzLnk7dGhpcy56PS10aGlzLno7cmV0dXJuIHRoaXN9LGRvdDpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy54KmEueCt0aGlzLnkqYS55K3RoaXMueiphLnp9LGxlbmd0aFNxOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMueCp0aGlzLngrdGhpcy55KnRoaXMueSt0aGlzLnoqdGhpcy56fSxcbmxlbmd0aDpmdW5jdGlvbigpe3JldHVybiBNYXRoLnNxcnQodGhpcy54KnRoaXMueCt0aGlzLnkqdGhpcy55K3RoaXMueip0aGlzLnopfSxsZW5ndGhNYW5oYXR0YW46ZnVuY3Rpb24oKXtyZXR1cm4gTWF0aC5hYnModGhpcy54KStNYXRoLmFicyh0aGlzLnkpK01hdGguYWJzKHRoaXMueil9LG5vcm1hbGl6ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmRpdmlkZVNjYWxhcih0aGlzLmxlbmd0aCgpKX0sc2V0TGVuZ3RoOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLm11bHRpcGx5U2NhbGFyKGEvdGhpcy5sZW5ndGgoKSl9LGxlcnA6ZnVuY3Rpb24oYSxiKXt0aGlzLngrPShhLngtdGhpcy54KSpiO3RoaXMueSs9KGEueS10aGlzLnkpKmI7dGhpcy56Kz0oYS56LXRoaXMueikqYjtyZXR1cm4gdGhpc30sbGVycFZlY3RvcnM6ZnVuY3Rpb24oYSxiLGMpe3RoaXMuc3ViVmVjdG9ycyhiLGEpLm11bHRpcGx5U2NhbGFyKGMpLmFkZChhKTtyZXR1cm4gdGhpc30sY3Jvc3M6ZnVuY3Rpb24oYSxiKXtpZih2b2lkIDAhPT1cbmIpcmV0dXJuIGNvbnNvbGUud2FybihcIlRIUkVFLlZlY3RvcjM6IC5jcm9zcygpIG5vdyBvbmx5IGFjY2VwdHMgb25lIGFyZ3VtZW50LiBVc2UgLmNyb3NzVmVjdG9ycyggYSwgYiApIGluc3RlYWQuXCIpLHRoaXMuY3Jvc3NWZWN0b3JzKGEsYik7dmFyIGM9dGhpcy54LGQ9dGhpcy55LGU9dGhpcy56O3RoaXMueD1kKmEuei1lKmEueTt0aGlzLnk9ZSphLngtYyphLno7dGhpcy56PWMqYS55LWQqYS54O3JldHVybiB0aGlzfSxjcm9zc1ZlY3RvcnM6ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLngsZD1hLnksZT1hLnosZz1iLngsZj1iLnksaD1iLno7dGhpcy54PWQqaC1lKmY7dGhpcy55PWUqZy1jKmg7dGhpcy56PWMqZi1kKmc7cmV0dXJuIHRoaXN9LHByb2plY3RPblZlY3RvcjpmdW5jdGlvbigpe3ZhciBhLGI7cmV0dXJuIGZ1bmN0aW9uKGMpe3ZvaWQgMD09PWEmJihhPW5ldyBUSFJFRS5WZWN0b3IzKTthLmNvcHkoYykubm9ybWFsaXplKCk7Yj10aGlzLmRvdChhKTtyZXR1cm4gdGhpcy5jb3B5KGEpLm11bHRpcGx5U2NhbGFyKGIpfX0oKSxcbnByb2plY3RPblBsYW5lOmZ1bmN0aW9uKCl7dmFyIGE7cmV0dXJuIGZ1bmN0aW9uKGIpe3ZvaWQgMD09PWEmJihhPW5ldyBUSFJFRS5WZWN0b3IzKTthLmNvcHkodGhpcykucHJvamVjdE9uVmVjdG9yKGIpO3JldHVybiB0aGlzLnN1YihhKX19KCkscmVmbGVjdDpmdW5jdGlvbigpe3ZhciBhO3JldHVybiBmdW5jdGlvbihiKXt2b2lkIDA9PT1hJiYoYT1uZXcgVEhSRUUuVmVjdG9yMyk7cmV0dXJuIHRoaXMuc3ViKGEuY29weShiKS5tdWx0aXBseVNjYWxhcigyKnRoaXMuZG90KGIpKSl9fSgpLGFuZ2xlVG86ZnVuY3Rpb24oYSl7YT10aGlzLmRvdChhKS8odGhpcy5sZW5ndGgoKSphLmxlbmd0aCgpKTtyZXR1cm4gTWF0aC5hY29zKFRIUkVFLk1hdGguY2xhbXAoYSwtMSwxKSl9LGRpc3RhbmNlVG86ZnVuY3Rpb24oYSl7cmV0dXJuIE1hdGguc3FydCh0aGlzLmRpc3RhbmNlVG9TcXVhcmVkKGEpKX0sZGlzdGFuY2VUb1NxdWFyZWQ6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy54LWEueCxjPVxudGhpcy55LWEueTthPXRoaXMuei1hLno7cmV0dXJuIGIqYitjKmMrYSphfSxzZXRFdWxlckZyb21Sb3RhdGlvbk1hdHJpeDpmdW5jdGlvbihhLGIpe2NvbnNvbGUuZXJyb3IoXCJUSFJFRS5WZWN0b3IzOiAuc2V0RXVsZXJGcm9tUm90YXRpb25NYXRyaXgoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgRXVsZXIuc2V0RnJvbVJvdGF0aW9uTWF0cml4KCkgaW5zdGVhZC5cIil9LHNldEV1bGVyRnJvbVF1YXRlcm5pb246ZnVuY3Rpb24oYSxiKXtjb25zb2xlLmVycm9yKFwiVEhSRUUuVmVjdG9yMzogLnNldEV1bGVyRnJvbVF1YXRlcm5pb24oKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgRXVsZXIuc2V0RnJvbVF1YXRlcm5pb24oKSBpbnN0ZWFkLlwiKX0sZ2V0UG9zaXRpb25Gcm9tTWF0cml4OmZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLlZlY3RvcjM6IC5nZXRQb3NpdGlvbkZyb21NYXRyaXgoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5zZXRGcm9tTWF0cml4UG9zaXRpb24oKS5cIik7cmV0dXJuIHRoaXMuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKGEpfSxcbmdldFNjYWxlRnJvbU1hdHJpeDpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5WZWN0b3IzOiAuZ2V0U2NhbGVGcm9tTWF0cml4KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuc2V0RnJvbU1hdHJpeFNjYWxlKCkuXCIpO3JldHVybiB0aGlzLnNldEZyb21NYXRyaXhTY2FsZShhKX0sZ2V0Q29sdW1uRnJvbU1hdHJpeDpmdW5jdGlvbihhLGIpe2NvbnNvbGUud2FybihcIlRIUkVFLlZlY3RvcjM6IC5nZXRDb2x1bW5Gcm9tTWF0cml4KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuc2V0RnJvbU1hdHJpeENvbHVtbigpLlwiKTtyZXR1cm4gdGhpcy5zZXRGcm9tTWF0cml4Q29sdW1uKGEsYil9LHNldEZyb21NYXRyaXhQb3NpdGlvbjpmdW5jdGlvbihhKXt0aGlzLng9YS5lbGVtZW50c1sxMl07dGhpcy55PWEuZWxlbWVudHNbMTNdO3RoaXMuej1hLmVsZW1lbnRzWzE0XTtyZXR1cm4gdGhpc30sc2V0RnJvbU1hdHJpeFNjYWxlOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuc2V0KGEuZWxlbWVudHNbMF0sXG5hLmVsZW1lbnRzWzFdLGEuZWxlbWVudHNbMl0pLmxlbmd0aCgpLGM9dGhpcy5zZXQoYS5lbGVtZW50c1s0XSxhLmVsZW1lbnRzWzVdLGEuZWxlbWVudHNbNl0pLmxlbmd0aCgpO2E9dGhpcy5zZXQoYS5lbGVtZW50c1s4XSxhLmVsZW1lbnRzWzldLGEuZWxlbWVudHNbMTBdKS5sZW5ndGgoKTt0aGlzLng9Yjt0aGlzLnk9Yzt0aGlzLno9YTtyZXR1cm4gdGhpc30sc2V0RnJvbU1hdHJpeENvbHVtbjpmdW5jdGlvbihhLGIpe3ZhciBjPTQqYSxkPWIuZWxlbWVudHM7dGhpcy54PWRbY107dGhpcy55PWRbYysxXTt0aGlzLno9ZFtjKzJdO3JldHVybiB0aGlzfSxlcXVhbHM6ZnVuY3Rpb24oYSl7cmV0dXJuIGEueD09PXRoaXMueCYmYS55PT09dGhpcy55JiZhLno9PT10aGlzLnp9LGZyb21BcnJheTpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPTApO3RoaXMueD1hW2JdO3RoaXMueT1hW2IrMV07dGhpcy56PWFbYisyXTtyZXR1cm4gdGhpc30sdG9BcnJheTpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PVxuYSYmKGE9W10pO3ZvaWQgMD09PWImJihiPTApO2FbYl09dGhpcy54O2FbYisxXT10aGlzLnk7YVtiKzJdPXRoaXMuejtyZXR1cm4gYX0sZnJvbUF0dHJpYnV0ZTpmdW5jdGlvbihhLGIsYyl7dm9pZCAwPT09YyYmKGM9MCk7Yj1iKmEuaXRlbVNpemUrYzt0aGlzLng9YS5hcnJheVtiXTt0aGlzLnk9YS5hcnJheVtiKzFdO3RoaXMuej1hLmFycmF5W2IrMl07cmV0dXJuIHRoaXN9fTtUSFJFRS5WZWN0b3I0PWZ1bmN0aW9uKGEsYixjLGQpe3RoaXMueD1hfHwwO3RoaXMueT1ifHwwO3RoaXMuej1jfHwwO3RoaXMudz12b2lkIDAhPT1kP2Q6MX07XG5USFJFRS5WZWN0b3I0LnByb3RvdHlwZT17Y29uc3RydWN0b3I6VEhSRUUuVmVjdG9yNCxzZXQ6ZnVuY3Rpb24oYSxiLGMsZCl7dGhpcy54PWE7dGhpcy55PWI7dGhpcy56PWM7dGhpcy53PWQ7cmV0dXJuIHRoaXN9LHNldFg6ZnVuY3Rpb24oYSl7dGhpcy54PWE7cmV0dXJuIHRoaXN9LHNldFk6ZnVuY3Rpb24oYSl7dGhpcy55PWE7cmV0dXJuIHRoaXN9LHNldFo6ZnVuY3Rpb24oYSl7dGhpcy56PWE7cmV0dXJuIHRoaXN9LHNldFc6ZnVuY3Rpb24oYSl7dGhpcy53PWE7cmV0dXJuIHRoaXN9LHNldENvbXBvbmVudDpmdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDA6dGhpcy54PWI7YnJlYWs7Y2FzZSAxOnRoaXMueT1iO2JyZWFrO2Nhc2UgMjp0aGlzLno9YjticmVhaztjYXNlIDM6dGhpcy53PWI7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihcImluZGV4IGlzIG91dCBvZiByYW5nZTogXCIrYSk7fX0sZ2V0Q29tcG9uZW50OmZ1bmN0aW9uKGEpe3N3aXRjaChhKXtjYXNlIDA6cmV0dXJuIHRoaXMueDtcbmNhc2UgMTpyZXR1cm4gdGhpcy55O2Nhc2UgMjpyZXR1cm4gdGhpcy56O2Nhc2UgMzpyZXR1cm4gdGhpcy53O2RlZmF1bHQ6dGhyb3cgRXJyb3IoXCJpbmRleCBpcyBvdXQgb2YgcmFuZ2U6IFwiK2EpO319LGNsb25lOmZ1bmN0aW9uKCl7cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMueCx0aGlzLnksdGhpcy56LHRoaXMudyl9LGNvcHk6ZnVuY3Rpb24oYSl7dGhpcy54PWEueDt0aGlzLnk9YS55O3RoaXMuej1hLno7dGhpcy53PXZvaWQgMCE9PWEudz9hLnc6MTtyZXR1cm4gdGhpc30sYWRkOmZ1bmN0aW9uKGEsYil7aWYodm9pZCAwIT09YilyZXR1cm4gY29uc29sZS53YXJuKFwiVEhSRUUuVmVjdG9yNDogLmFkZCgpIG5vdyBvbmx5IGFjY2VwdHMgb25lIGFyZ3VtZW50LiBVc2UgLmFkZFZlY3RvcnMoIGEsIGIgKSBpbnN0ZWFkLlwiKSx0aGlzLmFkZFZlY3RvcnMoYSxiKTt0aGlzLngrPWEueDt0aGlzLnkrPWEueTt0aGlzLnorPWEuejt0aGlzLncrPWEudztyZXR1cm4gdGhpc30sXG5hZGRTY2FsYXI6ZnVuY3Rpb24oYSl7dGhpcy54Kz1hO3RoaXMueSs9YTt0aGlzLnorPWE7dGhpcy53Kz1hO3JldHVybiB0aGlzfSxhZGRWZWN0b3JzOmZ1bmN0aW9uKGEsYil7dGhpcy54PWEueCtiLng7dGhpcy55PWEueStiLnk7dGhpcy56PWEueitiLno7dGhpcy53PWEudytiLnc7cmV0dXJuIHRoaXN9LGFkZFNjYWxlZFZlY3RvcjpmdW5jdGlvbihhLGIpe3RoaXMueCs9YS54KmI7dGhpcy55Kz1hLnkqYjt0aGlzLnorPWEueipiO3RoaXMudys9YS53KmI7cmV0dXJuIHRoaXN9LHN1YjpmdW5jdGlvbihhLGIpe2lmKHZvaWQgMCE9PWIpcmV0dXJuIGNvbnNvbGUud2FybihcIlRIUkVFLlZlY3RvcjQ6IC5zdWIoKSBub3cgb25seSBhY2NlcHRzIG9uZSBhcmd1bWVudC4gVXNlIC5zdWJWZWN0b3JzKCBhLCBiICkgaW5zdGVhZC5cIiksdGhpcy5zdWJWZWN0b3JzKGEsYik7dGhpcy54LT1hLng7dGhpcy55LT1hLnk7dGhpcy56LT1hLno7dGhpcy53LT1hLnc7cmV0dXJuIHRoaXN9LHN1YlNjYWxhcjpmdW5jdGlvbihhKXt0aGlzLngtPVxuYTt0aGlzLnktPWE7dGhpcy56LT1hO3RoaXMudy09YTtyZXR1cm4gdGhpc30sc3ViVmVjdG9yczpmdW5jdGlvbihhLGIpe3RoaXMueD1hLngtYi54O3RoaXMueT1hLnktYi55O3RoaXMuej1hLnotYi56O3RoaXMudz1hLnctYi53O3JldHVybiB0aGlzfSxtdWx0aXBseVNjYWxhcjpmdW5jdGlvbihhKXtpc0Zpbml0ZShhKT8odGhpcy54Kj1hLHRoaXMueSo9YSx0aGlzLnoqPWEsdGhpcy53Kj1hKTp0aGlzLnc9dGhpcy56PXRoaXMueT10aGlzLng9MDtyZXR1cm4gdGhpc30sYXBwbHlNYXRyaXg0OmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMueCxjPXRoaXMueSxkPXRoaXMueixlPXRoaXMudzthPWEuZWxlbWVudHM7dGhpcy54PWFbMF0qYithWzRdKmMrYVs4XSpkK2FbMTJdKmU7dGhpcy55PWFbMV0qYithWzVdKmMrYVs5XSpkK2FbMTNdKmU7dGhpcy56PWFbMl0qYithWzZdKmMrYVsxMF0qZCthWzE0XSplO3RoaXMudz1hWzNdKmIrYVs3XSpjK2FbMTFdKmQrYVsxNV0qZTtyZXR1cm4gdGhpc30sXG5kaXZpZGVTY2FsYXI6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMubXVsdGlwbHlTY2FsYXIoMS9hKX0sc2V0QXhpc0FuZ2xlRnJvbVF1YXRlcm5pb246ZnVuY3Rpb24oYSl7dGhpcy53PTIqTWF0aC5hY29zKGEudyk7dmFyIGI9TWF0aC5zcXJ0KDEtYS53KmEudyk7MUUtND5iPyh0aGlzLng9MSx0aGlzLno9dGhpcy55PTApOih0aGlzLng9YS54L2IsdGhpcy55PWEueS9iLHRoaXMuej1hLnovYik7cmV0dXJuIHRoaXN9LHNldEF4aXNBbmdsZUZyb21Sb3RhdGlvbk1hdHJpeDpmdW5jdGlvbihhKXt2YXIgYixjLGQ7YT1hLmVsZW1lbnRzO3ZhciBlPWFbMF07ZD1hWzRdO3ZhciBnPWFbOF0sZj1hWzFdLGg9YVs1XSxsPWFbOV07Yz1hWzJdO2I9YVs2XTt2YXIgaz1hWzEwXTtpZiguMDE+TWF0aC5hYnMoZC1mKSYmLjAxPk1hdGguYWJzKGctYykmJi4wMT5NYXRoLmFicyhsLWIpKXtpZiguMT5NYXRoLmFicyhkK2YpJiYuMT5NYXRoLmFicyhnK2MpJiYuMT5NYXRoLmFicyhsK2IpJiYuMT5NYXRoLmFicyhlK1xuaCtrLTMpKXJldHVybiB0aGlzLnNldCgxLDAsMCwwKSx0aGlzO2E9TWF0aC5QSTtlPShlKzEpLzI7aD0oaCsxKS8yO2s9KGsrMSkvMjtkPShkK2YpLzQ7Zz0oZytjKS80O2w9KGwrYikvNDtlPmgmJmU+az8uMDE+ZT8oYj0wLGQ9Yz0uNzA3MTA2NzgxKTooYj1NYXRoLnNxcnQoZSksYz1kL2IsZD1nL2IpOmg+az8uMDE+aD8oYj0uNzA3MTA2NzgxLGM9MCxkPS43MDcxMDY3ODEpOihjPU1hdGguc3FydChoKSxiPWQvYyxkPWwvYyk6LjAxPms/KGM9Yj0uNzA3MTA2NzgxLGQ9MCk6KGQ9TWF0aC5zcXJ0KGspLGI9Zy9kLGM9bC9kKTt0aGlzLnNldChiLGMsZCxhKTtyZXR1cm4gdGhpc31hPU1hdGguc3FydCgoYi1sKSooYi1sKSsoZy1jKSooZy1jKSsoZi1kKSooZi1kKSk7LjAwMT5NYXRoLmFicyhhKSYmKGE9MSk7dGhpcy54PShiLWwpL2E7dGhpcy55PShnLWMpL2E7dGhpcy56PShmLWQpL2E7dGhpcy53PU1hdGguYWNvcygoZStoK2stMSkvMik7cmV0dXJuIHRoaXN9LG1pbjpmdW5jdGlvbihhKXt0aGlzLng9XG5NYXRoLm1pbih0aGlzLngsYS54KTt0aGlzLnk9TWF0aC5taW4odGhpcy55LGEueSk7dGhpcy56PU1hdGgubWluKHRoaXMueixhLnopO3RoaXMudz1NYXRoLm1pbih0aGlzLncsYS53KTtyZXR1cm4gdGhpc30sbWF4OmZ1bmN0aW9uKGEpe3RoaXMueD1NYXRoLm1heCh0aGlzLngsYS54KTt0aGlzLnk9TWF0aC5tYXgodGhpcy55LGEueSk7dGhpcy56PU1hdGgubWF4KHRoaXMueixhLnopO3RoaXMudz1NYXRoLm1heCh0aGlzLncsYS53KTtyZXR1cm4gdGhpc30sY2xhbXA6ZnVuY3Rpb24oYSxiKXt0aGlzLng9TWF0aC5tYXgoYS54LE1hdGgubWluKGIueCx0aGlzLngpKTt0aGlzLnk9TWF0aC5tYXgoYS55LE1hdGgubWluKGIueSx0aGlzLnkpKTt0aGlzLno9TWF0aC5tYXgoYS56LE1hdGgubWluKGIueix0aGlzLnopKTt0aGlzLnc9TWF0aC5tYXgoYS53LE1hdGgubWluKGIudyx0aGlzLncpKTtyZXR1cm4gdGhpc30sY2xhbXBTY2FsYXI6ZnVuY3Rpb24oKXt2YXIgYSxiO3JldHVybiBmdW5jdGlvbihjLFxuZCl7dm9pZCAwPT09YSYmKGE9bmV3IFRIUkVFLlZlY3RvcjQsYj1uZXcgVEhSRUUuVmVjdG9yNCk7YS5zZXQoYyxjLGMsYyk7Yi5zZXQoZCxkLGQsZCk7cmV0dXJuIHRoaXMuY2xhbXAoYSxiKX19KCksZmxvb3I6ZnVuY3Rpb24oKXt0aGlzLng9TWF0aC5mbG9vcih0aGlzLngpO3RoaXMueT1NYXRoLmZsb29yKHRoaXMueSk7dGhpcy56PU1hdGguZmxvb3IodGhpcy56KTt0aGlzLnc9TWF0aC5mbG9vcih0aGlzLncpO3JldHVybiB0aGlzfSxjZWlsOmZ1bmN0aW9uKCl7dGhpcy54PU1hdGguY2VpbCh0aGlzLngpO3RoaXMueT1NYXRoLmNlaWwodGhpcy55KTt0aGlzLno9TWF0aC5jZWlsKHRoaXMueik7dGhpcy53PU1hdGguY2VpbCh0aGlzLncpO3JldHVybiB0aGlzfSxyb3VuZDpmdW5jdGlvbigpe3RoaXMueD1NYXRoLnJvdW5kKHRoaXMueCk7dGhpcy55PU1hdGgucm91bmQodGhpcy55KTt0aGlzLno9TWF0aC5yb3VuZCh0aGlzLnopO3RoaXMudz1NYXRoLnJvdW5kKHRoaXMudyk7cmV0dXJuIHRoaXN9LFxucm91bmRUb1plcm86ZnVuY3Rpb24oKXt0aGlzLng9MD50aGlzLng/TWF0aC5jZWlsKHRoaXMueCk6TWF0aC5mbG9vcih0aGlzLngpO3RoaXMueT0wPnRoaXMueT9NYXRoLmNlaWwodGhpcy55KTpNYXRoLmZsb29yKHRoaXMueSk7dGhpcy56PTA+dGhpcy56P01hdGguY2VpbCh0aGlzLnopOk1hdGguZmxvb3IodGhpcy56KTt0aGlzLnc9MD50aGlzLnc/TWF0aC5jZWlsKHRoaXMudyk6TWF0aC5mbG9vcih0aGlzLncpO3JldHVybiB0aGlzfSxuZWdhdGU6ZnVuY3Rpb24oKXt0aGlzLng9LXRoaXMueDt0aGlzLnk9LXRoaXMueTt0aGlzLno9LXRoaXMuejt0aGlzLnc9LXRoaXMudztyZXR1cm4gdGhpc30sZG90OmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLngqYS54K3RoaXMueSphLnkrdGhpcy56KmEueit0aGlzLncqYS53fSxsZW5ndGhTcTpmdW5jdGlvbigpe3JldHVybiB0aGlzLngqdGhpcy54K3RoaXMueSp0aGlzLnkrdGhpcy56KnRoaXMueit0aGlzLncqdGhpcy53fSxsZW5ndGg6ZnVuY3Rpb24oKXtyZXR1cm4gTWF0aC5zcXJ0KHRoaXMueCpcbnRoaXMueCt0aGlzLnkqdGhpcy55K3RoaXMueip0aGlzLnordGhpcy53KnRoaXMudyl9LGxlbmd0aE1hbmhhdHRhbjpmdW5jdGlvbigpe3JldHVybiBNYXRoLmFicyh0aGlzLngpK01hdGguYWJzKHRoaXMueSkrTWF0aC5hYnModGhpcy56KStNYXRoLmFicyh0aGlzLncpfSxub3JtYWxpemU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5kaXZpZGVTY2FsYXIodGhpcy5sZW5ndGgoKSl9LHNldExlbmd0aDpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5tdWx0aXBseVNjYWxhcihhL3RoaXMubGVuZ3RoKCkpfSxsZXJwOmZ1bmN0aW9uKGEsYil7dGhpcy54Kz0oYS54LXRoaXMueCkqYjt0aGlzLnkrPShhLnktdGhpcy55KSpiO3RoaXMueis9KGEuei10aGlzLnopKmI7dGhpcy53Kz0oYS53LXRoaXMudykqYjtyZXR1cm4gdGhpc30sbGVycFZlY3RvcnM6ZnVuY3Rpb24oYSxiLGMpe3RoaXMuc3ViVmVjdG9ycyhiLGEpLm11bHRpcGx5U2NhbGFyKGMpLmFkZChhKTtyZXR1cm4gdGhpc30sZXF1YWxzOmZ1bmN0aW9uKGEpe3JldHVybiBhLng9PT1cbnRoaXMueCYmYS55PT09dGhpcy55JiZhLno9PT10aGlzLnomJmEudz09PXRoaXMud30sZnJvbUFycmF5OmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9MCk7dGhpcy54PWFbYl07dGhpcy55PWFbYisxXTt0aGlzLno9YVtiKzJdO3RoaXMudz1hW2IrM107cmV0dXJuIHRoaXN9LHRvQXJyYXk6ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1hJiYoYT1bXSk7dm9pZCAwPT09YiYmKGI9MCk7YVtiXT10aGlzLng7YVtiKzFdPXRoaXMueTthW2IrMl09dGhpcy56O2FbYiszXT10aGlzLnc7cmV0dXJuIGF9LGZyb21BdHRyaWJ1dGU6ZnVuY3Rpb24oYSxiLGMpe3ZvaWQgMD09PWMmJihjPTApO2I9YiphLml0ZW1TaXplK2M7dGhpcy54PWEuYXJyYXlbYl07dGhpcy55PWEuYXJyYXlbYisxXTt0aGlzLno9YS5hcnJheVtiKzJdO3RoaXMudz1hLmFycmF5W2IrM107cmV0dXJuIHRoaXN9fTtcblRIUkVFLkV1bGVyPWZ1bmN0aW9uKGEsYixjLGQpe3RoaXMuX3g9YXx8MDt0aGlzLl95PWJ8fDA7dGhpcy5fej1jfHwwO3RoaXMuX29yZGVyPWR8fFRIUkVFLkV1bGVyLkRlZmF1bHRPcmRlcn07VEhSRUUuRXVsZXIuUm90YXRpb25PcmRlcnM9XCJYWVogWVpYIFpYWSBYWlkgWVhaIFpZWFwiLnNwbGl0KFwiIFwiKTtUSFJFRS5FdWxlci5EZWZhdWx0T3JkZXI9XCJYWVpcIjtcblRIUkVFLkV1bGVyLnByb3RvdHlwZT17Y29uc3RydWN0b3I6VEhSRUUuRXVsZXIsZ2V0IHgoKXtyZXR1cm4gdGhpcy5feH0sc2V0IHgoYSl7dGhpcy5feD1hO3RoaXMub25DaGFuZ2VDYWxsYmFjaygpfSxnZXQgeSgpe3JldHVybiB0aGlzLl95fSxzZXQgeShhKXt0aGlzLl95PWE7dGhpcy5vbkNoYW5nZUNhbGxiYWNrKCl9LGdldCB6KCl7cmV0dXJuIHRoaXMuX3p9LHNldCB6KGEpe3RoaXMuX3o9YTt0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKX0sZ2V0IG9yZGVyKCl7cmV0dXJuIHRoaXMuX29yZGVyfSxzZXQgb3JkZXIoYSl7dGhpcy5fb3JkZXI9YTt0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKX0sc2V0OmZ1bmN0aW9uKGEsYixjLGQpe3RoaXMuX3g9YTt0aGlzLl95PWI7dGhpcy5fej1jO3RoaXMuX29yZGVyPWR8fHRoaXMuX29yZGVyO3RoaXMub25DaGFuZ2VDYWxsYmFjaygpO3JldHVybiB0aGlzfSxjbG9uZTpmdW5jdGlvbigpe3JldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzLl94LFxudGhpcy5feSx0aGlzLl96LHRoaXMuX29yZGVyKX0sY29weTpmdW5jdGlvbihhKXt0aGlzLl94PWEuX3g7dGhpcy5feT1hLl95O3RoaXMuX3o9YS5fejt0aGlzLl9vcmRlcj1hLl9vcmRlcjt0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKTtyZXR1cm4gdGhpc30sc2V0RnJvbVJvdGF0aW9uTWF0cml4OmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1USFJFRS5NYXRoLmNsYW1wLGU9YS5lbGVtZW50czthPWVbMF07dmFyIGc9ZVs0XSxmPWVbOF0saD1lWzFdLGw9ZVs1XSxrPWVbOV0sbT1lWzJdLHA9ZVs2XSxlPWVbMTBdO2I9Ynx8dGhpcy5fb3JkZXI7XCJYWVpcIj09PWI/KHRoaXMuX3k9TWF0aC5hc2luKGQoZiwtMSwxKSksLjk5OTk5Pk1hdGguYWJzKGYpPyh0aGlzLl94PU1hdGguYXRhbjIoLWssZSksdGhpcy5fej1NYXRoLmF0YW4yKC1nLGEpKToodGhpcy5feD1NYXRoLmF0YW4yKHAsbCksdGhpcy5fej0wKSk6XCJZWFpcIj09PWI/KHRoaXMuX3g9TWF0aC5hc2luKC1kKGssLTEsMSkpLC45OTk5OT5NYXRoLmFicyhrKT9cbih0aGlzLl95PU1hdGguYXRhbjIoZixlKSx0aGlzLl96PU1hdGguYXRhbjIoaCxsKSk6KHRoaXMuX3k9TWF0aC5hdGFuMigtbSxhKSx0aGlzLl96PTApKTpcIlpYWVwiPT09Yj8odGhpcy5feD1NYXRoLmFzaW4oZChwLC0xLDEpKSwuOTk5OTk+TWF0aC5hYnMocCk/KHRoaXMuX3k9TWF0aC5hdGFuMigtbSxlKSx0aGlzLl96PU1hdGguYXRhbjIoLWcsbCkpOih0aGlzLl95PTAsdGhpcy5fej1NYXRoLmF0YW4yKGgsYSkpKTpcIlpZWFwiPT09Yj8odGhpcy5feT1NYXRoLmFzaW4oLWQobSwtMSwxKSksLjk5OTk5Pk1hdGguYWJzKG0pPyh0aGlzLl94PU1hdGguYXRhbjIocCxlKSx0aGlzLl96PU1hdGguYXRhbjIoaCxhKSk6KHRoaXMuX3g9MCx0aGlzLl96PU1hdGguYXRhbjIoLWcsbCkpKTpcIllaWFwiPT09Yj8odGhpcy5fej1NYXRoLmFzaW4oZChoLC0xLDEpKSwuOTk5OTk+TWF0aC5hYnMoaCk/KHRoaXMuX3g9TWF0aC5hdGFuMigtayxsKSx0aGlzLl95PU1hdGguYXRhbjIoLW0sYSkpOih0aGlzLl94PVxuMCx0aGlzLl95PU1hdGguYXRhbjIoZixlKSkpOlwiWFpZXCI9PT1iPyh0aGlzLl96PU1hdGguYXNpbigtZChnLC0xLDEpKSwuOTk5OTk+TWF0aC5hYnMoZyk/KHRoaXMuX3g9TWF0aC5hdGFuMihwLGwpLHRoaXMuX3k9TWF0aC5hdGFuMihmLGEpKToodGhpcy5feD1NYXRoLmF0YW4yKC1rLGUpLHRoaXMuX3k9MCkpOmNvbnNvbGUud2FybihcIlRIUkVFLkV1bGVyOiAuc2V0RnJvbVJvdGF0aW9uTWF0cml4KCkgZ2l2ZW4gdW5zdXBwb3J0ZWQgb3JkZXI6IFwiK2IpO3RoaXMuX29yZGVyPWI7aWYoITEhPT1jKXRoaXMub25DaGFuZ2VDYWxsYmFjaygpO3JldHVybiB0aGlzfSxzZXRGcm9tUXVhdGVybmlvbjpmdW5jdGlvbigpe3ZhciBhO3JldHVybiBmdW5jdGlvbihiLGMsZCl7dm9pZCAwPT09YSYmKGE9bmV3IFRIUkVFLk1hdHJpeDQpO2EubWFrZVJvdGF0aW9uRnJvbVF1YXRlcm5pb24oYik7dGhpcy5zZXRGcm9tUm90YXRpb25NYXRyaXgoYSxjLGQpO3JldHVybiB0aGlzfX0oKSxzZXRGcm9tVmVjdG9yMzpmdW5jdGlvbihhLFxuYil7cmV0dXJuIHRoaXMuc2V0KGEueCxhLnksYS56LGJ8fHRoaXMuX29yZGVyKX0scmVvcmRlcjpmdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5RdWF0ZXJuaW9uO3JldHVybiBmdW5jdGlvbihiKXthLnNldEZyb21FdWxlcih0aGlzKTt0aGlzLnNldEZyb21RdWF0ZXJuaW9uKGEsYil9fSgpLGVxdWFsczpmdW5jdGlvbihhKXtyZXR1cm4gYS5feD09PXRoaXMuX3gmJmEuX3k9PT10aGlzLl95JiZhLl96PT09dGhpcy5feiYmYS5fb3JkZXI9PT10aGlzLl9vcmRlcn0sZnJvbUFycmF5OmZ1bmN0aW9uKGEpe3RoaXMuX3g9YVswXTt0aGlzLl95PWFbMV07dGhpcy5fej1hWzJdO3ZvaWQgMCE9PWFbM10mJih0aGlzLl9vcmRlcj1hWzNdKTt0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKTtyZXR1cm4gdGhpc30sdG9BcnJheTpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWEmJihhPVtdKTt2b2lkIDA9PT1iJiYoYj0wKTthW2JdPXRoaXMuX3g7YVtiKzFdPXRoaXMuX3k7YVtiKzJdPXRoaXMuX3o7YVtiK1xuM109dGhpcy5fb3JkZXI7cmV0dXJuIGF9LHRvVmVjdG9yMzpmdW5jdGlvbihhKXtyZXR1cm4gYT9hLnNldCh0aGlzLl94LHRoaXMuX3ksdGhpcy5feik6bmV3IFRIUkVFLlZlY3RvcjModGhpcy5feCx0aGlzLl95LHRoaXMuX3opfSxvbkNoYW5nZTpmdW5jdGlvbihhKXt0aGlzLm9uQ2hhbmdlQ2FsbGJhY2s9YTtyZXR1cm4gdGhpc30sb25DaGFuZ2VDYWxsYmFjazpmdW5jdGlvbigpe319O1RIUkVFLkxpbmUzPWZ1bmN0aW9uKGEsYil7dGhpcy5zdGFydD12b2lkIDAhPT1hP2E6bmV3IFRIUkVFLlZlY3RvcjM7dGhpcy5lbmQ9dm9pZCAwIT09Yj9iOm5ldyBUSFJFRS5WZWN0b3IzfTtcblRIUkVFLkxpbmUzLnByb3RvdHlwZT17Y29uc3RydWN0b3I6VEhSRUUuTGluZTMsc2V0OmZ1bmN0aW9uKGEsYil7dGhpcy5zdGFydC5jb3B5KGEpO3RoaXMuZW5kLmNvcHkoYik7cmV0dXJuIHRoaXN9LGNsb25lOmZ1bmN0aW9uKCl7cmV0dXJuKG5ldyB0aGlzLmNvbnN0cnVjdG9yKS5jb3B5KHRoaXMpfSxjb3B5OmZ1bmN0aW9uKGEpe3RoaXMuc3RhcnQuY29weShhLnN0YXJ0KTt0aGlzLmVuZC5jb3B5KGEuZW5kKTtyZXR1cm4gdGhpc30sY2VudGVyOmZ1bmN0aW9uKGEpe3JldHVybihhfHxuZXcgVEhSRUUuVmVjdG9yMykuYWRkVmVjdG9ycyh0aGlzLnN0YXJ0LHRoaXMuZW5kKS5tdWx0aXBseVNjYWxhciguNSl9LGRlbHRhOmZ1bmN0aW9uKGEpe3JldHVybihhfHxuZXcgVEhSRUUuVmVjdG9yMykuc3ViVmVjdG9ycyh0aGlzLmVuZCx0aGlzLnN0YXJ0KX0sZGlzdGFuY2VTcTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnN0YXJ0LmRpc3RhbmNlVG9TcXVhcmVkKHRoaXMuZW5kKX0sZGlzdGFuY2U6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zdGFydC5kaXN0YW5jZVRvKHRoaXMuZW5kKX0sXG5hdDpmdW5jdGlvbihhLGIpe3ZhciBjPWJ8fG5ldyBUSFJFRS5WZWN0b3IzO3JldHVybiB0aGlzLmRlbHRhKGMpLm11bHRpcGx5U2NhbGFyKGEpLmFkZCh0aGlzLnN0YXJ0KX0sY2xvc2VzdFBvaW50VG9Qb2ludFBhcmFtZXRlcjpmdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5WZWN0b3IzLGI9bmV3IFRIUkVFLlZlY3RvcjM7cmV0dXJuIGZ1bmN0aW9uKGMsZCl7YS5zdWJWZWN0b3JzKGMsdGhpcy5zdGFydCk7Yi5zdWJWZWN0b3JzKHRoaXMuZW5kLHRoaXMuc3RhcnQpO3ZhciBlPWIuZG90KGIpLGU9Yi5kb3QoYSkvZTtkJiYoZT1USFJFRS5NYXRoLmNsYW1wKGUsMCwxKSk7cmV0dXJuIGV9fSgpLGNsb3Nlc3RQb2ludFRvUG9pbnQ6ZnVuY3Rpb24oYSxiLGMpe2E9dGhpcy5jbG9zZXN0UG9pbnRUb1BvaW50UGFyYW1ldGVyKGEsYik7Yz1jfHxuZXcgVEhSRUUuVmVjdG9yMztyZXR1cm4gdGhpcy5kZWx0YShjKS5tdWx0aXBseVNjYWxhcihhKS5hZGQodGhpcy5zdGFydCl9LGFwcGx5TWF0cml4NDpmdW5jdGlvbihhKXt0aGlzLnN0YXJ0LmFwcGx5TWF0cml4NChhKTtcbnRoaXMuZW5kLmFwcGx5TWF0cml4NChhKTtyZXR1cm4gdGhpc30sZXF1YWxzOmZ1bmN0aW9uKGEpe3JldHVybiBhLnN0YXJ0LmVxdWFscyh0aGlzLnN0YXJ0KSYmYS5lbmQuZXF1YWxzKHRoaXMuZW5kKX19O1RIUkVFLkJveDI9ZnVuY3Rpb24oYSxiKXt0aGlzLm1pbj12b2lkIDAhPT1hP2E6bmV3IFRIUkVFLlZlY3RvcjIoSW5maW5pdHksSW5maW5pdHkpO3RoaXMubWF4PXZvaWQgMCE9PWI/YjpuZXcgVEhSRUUuVmVjdG9yMigtSW5maW5pdHksLUluZmluaXR5KX07XG5USFJFRS5Cb3gyLnByb3RvdHlwZT17Y29uc3RydWN0b3I6VEhSRUUuQm94MixzZXQ6ZnVuY3Rpb24oYSxiKXt0aGlzLm1pbi5jb3B5KGEpO3RoaXMubWF4LmNvcHkoYik7cmV0dXJuIHRoaXN9LHNldEZyb21Qb2ludHM6ZnVuY3Rpb24oYSl7dGhpcy5tYWtlRW1wdHkoKTtmb3IodmFyIGI9MCxjPWEubGVuZ3RoO2I8YztiKyspdGhpcy5leHBhbmRCeVBvaW50KGFbYl0pO3JldHVybiB0aGlzfSxzZXRGcm9tQ2VudGVyQW5kU2l6ZTpmdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5WZWN0b3IyO3JldHVybiBmdW5jdGlvbihiLGMpe3ZhciBkPWEuY29weShjKS5tdWx0aXBseVNjYWxhciguNSk7dGhpcy5taW4uY29weShiKS5zdWIoZCk7dGhpcy5tYXguY29weShiKS5hZGQoZCk7cmV0dXJuIHRoaXN9fSgpLGNsb25lOmZ1bmN0aW9uKCl7cmV0dXJuKG5ldyB0aGlzLmNvbnN0cnVjdG9yKS5jb3B5KHRoaXMpfSxjb3B5OmZ1bmN0aW9uKGEpe3RoaXMubWluLmNvcHkoYS5taW4pO3RoaXMubWF4LmNvcHkoYS5tYXgpO1xucmV0dXJuIHRoaXN9LG1ha2VFbXB0eTpmdW5jdGlvbigpe3RoaXMubWluLng9dGhpcy5taW4ueT1JbmZpbml0eTt0aGlzLm1heC54PXRoaXMubWF4Lnk9LUluZmluaXR5O3JldHVybiB0aGlzfSxlbXB0eTpmdW5jdGlvbigpe3JldHVybiB0aGlzLm1heC54PHRoaXMubWluLnh8fHRoaXMubWF4Lnk8dGhpcy5taW4ueX0sY2VudGVyOmZ1bmN0aW9uKGEpe3JldHVybihhfHxuZXcgVEhSRUUuVmVjdG9yMikuYWRkVmVjdG9ycyh0aGlzLm1pbix0aGlzLm1heCkubXVsdGlwbHlTY2FsYXIoLjUpfSxzaXplOmZ1bmN0aW9uKGEpe3JldHVybihhfHxuZXcgVEhSRUUuVmVjdG9yMikuc3ViVmVjdG9ycyh0aGlzLm1heCx0aGlzLm1pbil9LGV4cGFuZEJ5UG9pbnQ6ZnVuY3Rpb24oYSl7dGhpcy5taW4ubWluKGEpO3RoaXMubWF4Lm1heChhKTtyZXR1cm4gdGhpc30sZXhwYW5kQnlWZWN0b3I6ZnVuY3Rpb24oYSl7dGhpcy5taW4uc3ViKGEpO3RoaXMubWF4LmFkZChhKTtyZXR1cm4gdGhpc30sZXhwYW5kQnlTY2FsYXI6ZnVuY3Rpb24oYSl7dGhpcy5taW4uYWRkU2NhbGFyKC1hKTtcbnRoaXMubWF4LmFkZFNjYWxhcihhKTtyZXR1cm4gdGhpc30sY29udGFpbnNQb2ludDpmdW5jdGlvbihhKXtyZXR1cm4gYS54PHRoaXMubWluLnh8fGEueD50aGlzLm1heC54fHxhLnk8dGhpcy5taW4ueXx8YS55PnRoaXMubWF4Lnk/ITE6ITB9LGNvbnRhaW5zQm94OmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLm1pbi54PD1hLm1pbi54JiZhLm1heC54PD10aGlzLm1heC54JiZ0aGlzLm1pbi55PD1hLm1pbi55JiZhLm1heC55PD10aGlzLm1heC55PyEwOiExfSxnZXRQYXJhbWV0ZXI6ZnVuY3Rpb24oYSxiKXtyZXR1cm4oYnx8bmV3IFRIUkVFLlZlY3RvcjIpLnNldCgoYS54LXRoaXMubWluLngpLyh0aGlzLm1heC54LXRoaXMubWluLngpLChhLnktdGhpcy5taW4ueSkvKHRoaXMubWF4LnktdGhpcy5taW4ueSkpfSxpc0ludGVyc2VjdGlvbkJveDpmdW5jdGlvbihhKXtyZXR1cm4gYS5tYXgueDx0aGlzLm1pbi54fHxhLm1pbi54PnRoaXMubWF4Lnh8fGEubWF4Lnk8dGhpcy5taW4ueXx8YS5taW4ueT5cbnRoaXMubWF4Lnk/ITE6ITB9LGNsYW1wUG9pbnQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4oYnx8bmV3IFRIUkVFLlZlY3RvcjIpLmNvcHkoYSkuY2xhbXAodGhpcy5taW4sdGhpcy5tYXgpfSxkaXN0YW5jZVRvUG9pbnQ6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuVmVjdG9yMjtyZXR1cm4gZnVuY3Rpb24oYil7cmV0dXJuIGEuY29weShiKS5jbGFtcCh0aGlzLm1pbix0aGlzLm1heCkuc3ViKGIpLmxlbmd0aCgpfX0oKSxpbnRlcnNlY3Q6ZnVuY3Rpb24oYSl7dGhpcy5taW4ubWF4KGEubWluKTt0aGlzLm1heC5taW4oYS5tYXgpO3JldHVybiB0aGlzfSx1bmlvbjpmdW5jdGlvbihhKXt0aGlzLm1pbi5taW4oYS5taW4pO3RoaXMubWF4Lm1heChhLm1heCk7cmV0dXJuIHRoaXN9LHRyYW5zbGF0ZTpmdW5jdGlvbihhKXt0aGlzLm1pbi5hZGQoYSk7dGhpcy5tYXguYWRkKGEpO3JldHVybiB0aGlzfSxlcXVhbHM6ZnVuY3Rpb24oYSl7cmV0dXJuIGEubWluLmVxdWFscyh0aGlzLm1pbikmJlxuYS5tYXguZXF1YWxzKHRoaXMubWF4KX19O1RIUkVFLkJveDM9ZnVuY3Rpb24oYSxiKXt0aGlzLm1pbj12b2lkIDAhPT1hP2E6bmV3IFRIUkVFLlZlY3RvcjMoSW5maW5pdHksSW5maW5pdHksSW5maW5pdHkpO3RoaXMubWF4PXZvaWQgMCE9PWI/YjpuZXcgVEhSRUUuVmVjdG9yMygtSW5maW5pdHksLUluZmluaXR5LC1JbmZpbml0eSl9O1xuVEhSRUUuQm94My5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOlRIUkVFLkJveDMsc2V0OmZ1bmN0aW9uKGEsYil7dGhpcy5taW4uY29weShhKTt0aGlzLm1heC5jb3B5KGIpO3JldHVybiB0aGlzfSxzZXRGcm9tUG9pbnRzOmZ1bmN0aW9uKGEpe3RoaXMubWFrZUVtcHR5KCk7Zm9yKHZhciBiPTAsYz1hLmxlbmd0aDtiPGM7YisrKXRoaXMuZXhwYW5kQnlQb2ludChhW2JdKTtyZXR1cm4gdGhpc30sc2V0RnJvbUNlbnRlckFuZFNpemU6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuVmVjdG9yMztyZXR1cm4gZnVuY3Rpb24oYixjKXt2YXIgZD1hLmNvcHkoYykubXVsdGlwbHlTY2FsYXIoLjUpO3RoaXMubWluLmNvcHkoYikuc3ViKGQpO3RoaXMubWF4LmNvcHkoYikuYWRkKGQpO3JldHVybiB0aGlzfX0oKSxzZXRGcm9tT2JqZWN0OmZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlZlY3RvcjM7cmV0dXJuIGZ1bmN0aW9uKGIpe3ZhciBjPXRoaXM7Yi51cGRhdGVNYXRyaXhXb3JsZCghMCk7XG50aGlzLm1ha2VFbXB0eSgpO2IudHJhdmVyc2UoZnVuY3Rpb24oYil7dmFyIGU9Yi5nZW9tZXRyeTtpZih2b2lkIDAhPT1lKWlmKGUgaW5zdGFuY2VvZiBUSFJFRS5HZW9tZXRyeSlmb3IodmFyIGc9ZS52ZXJ0aWNlcyxlPTAsZj1nLmxlbmd0aDtlPGY7ZSsrKWEuY29weShnW2VdKSxhLmFwcGx5TWF0cml4NChiLm1hdHJpeFdvcmxkKSxjLmV4cGFuZEJ5UG9pbnQoYSk7ZWxzZSBpZihlIGluc3RhbmNlb2YgVEhSRUUuQnVmZmVyR2VvbWV0cnkmJnZvaWQgMCE9PWUuYXR0cmlidXRlcy5wb3NpdGlvbilmb3IoZz1lLmF0dHJpYnV0ZXMucG9zaXRpb24uYXJyYXksZT0wLGY9Zy5sZW5ndGg7ZTxmO2UrPTMpYS5zZXQoZ1tlXSxnW2UrMV0sZ1tlKzJdKSxhLmFwcGx5TWF0cml4NChiLm1hdHJpeFdvcmxkKSxjLmV4cGFuZEJ5UG9pbnQoYSl9KTtyZXR1cm4gdGhpc319KCksY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4obmV3IHRoaXMuY29uc3RydWN0b3IpLmNvcHkodGhpcyl9LGNvcHk6ZnVuY3Rpb24oYSl7dGhpcy5taW4uY29weShhLm1pbik7XG50aGlzLm1heC5jb3B5KGEubWF4KTtyZXR1cm4gdGhpc30sbWFrZUVtcHR5OmZ1bmN0aW9uKCl7dGhpcy5taW4ueD10aGlzLm1pbi55PXRoaXMubWluLno9SW5maW5pdHk7dGhpcy5tYXgueD10aGlzLm1heC55PXRoaXMubWF4Lno9LUluZmluaXR5O3JldHVybiB0aGlzfSxlbXB0eTpmdW5jdGlvbigpe3JldHVybiB0aGlzLm1heC54PHRoaXMubWluLnh8fHRoaXMubWF4Lnk8dGhpcy5taW4ueXx8dGhpcy5tYXguejx0aGlzLm1pbi56fSxjZW50ZXI6ZnVuY3Rpb24oYSl7cmV0dXJuKGF8fG5ldyBUSFJFRS5WZWN0b3IzKS5hZGRWZWN0b3JzKHRoaXMubWluLHRoaXMubWF4KS5tdWx0aXBseVNjYWxhciguNSl9LHNpemU6ZnVuY3Rpb24oYSl7cmV0dXJuKGF8fG5ldyBUSFJFRS5WZWN0b3IzKS5zdWJWZWN0b3JzKHRoaXMubWF4LHRoaXMubWluKX0sZXhwYW5kQnlQb2ludDpmdW5jdGlvbihhKXt0aGlzLm1pbi5taW4oYSk7dGhpcy5tYXgubWF4KGEpO3JldHVybiB0aGlzfSxleHBhbmRCeVZlY3RvcjpmdW5jdGlvbihhKXt0aGlzLm1pbi5zdWIoYSk7XG50aGlzLm1heC5hZGQoYSk7cmV0dXJuIHRoaXN9LGV4cGFuZEJ5U2NhbGFyOmZ1bmN0aW9uKGEpe3RoaXMubWluLmFkZFNjYWxhcigtYSk7dGhpcy5tYXguYWRkU2NhbGFyKGEpO3JldHVybiB0aGlzfSxjb250YWluc1BvaW50OmZ1bmN0aW9uKGEpe3JldHVybiBhLng8dGhpcy5taW4ueHx8YS54PnRoaXMubWF4Lnh8fGEueTx0aGlzLm1pbi55fHxhLnk+dGhpcy5tYXgueXx8YS56PHRoaXMubWluLnp8fGEuej50aGlzLm1heC56PyExOiEwfSxjb250YWluc0JveDpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5taW4ueDw9YS5taW4ueCYmYS5tYXgueDw9dGhpcy5tYXgueCYmdGhpcy5taW4ueTw9YS5taW4ueSYmYS5tYXgueTw9dGhpcy5tYXgueSYmdGhpcy5taW4uejw9YS5taW4ueiYmYS5tYXguejw9dGhpcy5tYXguej8hMDohMX0sZ2V0UGFyYW1ldGVyOmZ1bmN0aW9uKGEsYil7cmV0dXJuKGJ8fG5ldyBUSFJFRS5WZWN0b3IzKS5zZXQoKGEueC10aGlzLm1pbi54KS8odGhpcy5tYXgueC1cbnRoaXMubWluLngpLChhLnktdGhpcy5taW4ueSkvKHRoaXMubWF4LnktdGhpcy5taW4ueSksKGEuei10aGlzLm1pbi56KS8odGhpcy5tYXguei10aGlzLm1pbi56KSl9LGlzSW50ZXJzZWN0aW9uQm94OmZ1bmN0aW9uKGEpe3JldHVybiBhLm1heC54PHRoaXMubWluLnh8fGEubWluLng+dGhpcy5tYXgueHx8YS5tYXgueTx0aGlzLm1pbi55fHxhLm1pbi55PnRoaXMubWF4Lnl8fGEubWF4Lno8dGhpcy5taW4uenx8YS5taW4uej50aGlzLm1heC56PyExOiEwfSxjbGFtcFBvaW50OmZ1bmN0aW9uKGEsYil7cmV0dXJuKGJ8fG5ldyBUSFJFRS5WZWN0b3IzKS5jb3B5KGEpLmNsYW1wKHRoaXMubWluLHRoaXMubWF4KX0sZGlzdGFuY2VUb1BvaW50OmZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlZlY3RvcjM7cmV0dXJuIGZ1bmN0aW9uKGIpe3JldHVybiBhLmNvcHkoYikuY2xhbXAodGhpcy5taW4sdGhpcy5tYXgpLnN1YihiKS5sZW5ndGgoKX19KCksZ2V0Qm91bmRpbmdTcGhlcmU6ZnVuY3Rpb24oKXt2YXIgYT1cbm5ldyBUSFJFRS5WZWN0b3IzO3JldHVybiBmdW5jdGlvbihiKXtiPWJ8fG5ldyBUSFJFRS5TcGhlcmU7Yi5jZW50ZXI9dGhpcy5jZW50ZXIoKTtiLnJhZGl1cz0uNSp0aGlzLnNpemUoYSkubGVuZ3RoKCk7cmV0dXJuIGJ9fSgpLGludGVyc2VjdDpmdW5jdGlvbihhKXt0aGlzLm1pbi5tYXgoYS5taW4pO3RoaXMubWF4Lm1pbihhLm1heCk7cmV0dXJuIHRoaXN9LHVuaW9uOmZ1bmN0aW9uKGEpe3RoaXMubWluLm1pbihhLm1pbik7dGhpcy5tYXgubWF4KGEubWF4KTtyZXR1cm4gdGhpc30sYXBwbHlNYXRyaXg0OmZ1bmN0aW9uKCl7dmFyIGE9W25ldyBUSFJFRS5WZWN0b3IzLG5ldyBUSFJFRS5WZWN0b3IzLG5ldyBUSFJFRS5WZWN0b3IzLG5ldyBUSFJFRS5WZWN0b3IzLG5ldyBUSFJFRS5WZWN0b3IzLG5ldyBUSFJFRS5WZWN0b3IzLG5ldyBUSFJFRS5WZWN0b3IzLG5ldyBUSFJFRS5WZWN0b3IzXTtyZXR1cm4gZnVuY3Rpb24oYil7YVswXS5zZXQodGhpcy5taW4ueCx0aGlzLm1pbi55LFxudGhpcy5taW4ueikuYXBwbHlNYXRyaXg0KGIpO2FbMV0uc2V0KHRoaXMubWluLngsdGhpcy5taW4ueSx0aGlzLm1heC56KS5hcHBseU1hdHJpeDQoYik7YVsyXS5zZXQodGhpcy5taW4ueCx0aGlzLm1heC55LHRoaXMubWluLnopLmFwcGx5TWF0cml4NChiKTthWzNdLnNldCh0aGlzLm1pbi54LHRoaXMubWF4LnksdGhpcy5tYXgueikuYXBwbHlNYXRyaXg0KGIpO2FbNF0uc2V0KHRoaXMubWF4LngsdGhpcy5taW4ueSx0aGlzLm1pbi56KS5hcHBseU1hdHJpeDQoYik7YVs1XS5zZXQodGhpcy5tYXgueCx0aGlzLm1pbi55LHRoaXMubWF4LnopLmFwcGx5TWF0cml4NChiKTthWzZdLnNldCh0aGlzLm1heC54LHRoaXMubWF4LnksdGhpcy5taW4ueikuYXBwbHlNYXRyaXg0KGIpO2FbN10uc2V0KHRoaXMubWF4LngsdGhpcy5tYXgueSx0aGlzLm1heC56KS5hcHBseU1hdHJpeDQoYik7dGhpcy5tYWtlRW1wdHkoKTt0aGlzLnNldEZyb21Qb2ludHMoYSk7cmV0dXJuIHRoaXN9fSgpLHRyYW5zbGF0ZTpmdW5jdGlvbihhKXt0aGlzLm1pbi5hZGQoYSk7XG50aGlzLm1heC5hZGQoYSk7cmV0dXJuIHRoaXN9LGVxdWFsczpmdW5jdGlvbihhKXtyZXR1cm4gYS5taW4uZXF1YWxzKHRoaXMubWluKSYmYS5tYXguZXF1YWxzKHRoaXMubWF4KX19O1RIUkVFLk1hdHJpeDM9ZnVuY3Rpb24oKXt0aGlzLmVsZW1lbnRzPW5ldyBGbG9hdDMyQXJyYXkoWzEsMCwwLDAsMSwwLDAsMCwxXSk7MDxhcmd1bWVudHMubGVuZ3RoJiZjb25zb2xlLmVycm9yKFwiVEhSRUUuTWF0cml4MzogdGhlIGNvbnN0cnVjdG9yIG5vIGxvbmdlciByZWFkcyBhcmd1bWVudHMuIHVzZSAuc2V0KCkgaW5zdGVhZC5cIil9O1xuVEhSRUUuTWF0cml4My5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOlRIUkVFLk1hdHJpeDMsc2V0OmZ1bmN0aW9uKGEsYixjLGQsZSxnLGYsaCxsKXt2YXIgaz10aGlzLmVsZW1lbnRzO2tbMF09YTtrWzNdPWI7a1s2XT1jO2tbMV09ZDtrWzRdPWU7a1s3XT1nO2tbMl09ZjtrWzVdPWg7a1s4XT1sO3JldHVybiB0aGlzfSxpZGVudGl0eTpmdW5jdGlvbigpe3RoaXMuc2V0KDEsMCwwLDAsMSwwLDAsMCwxKTtyZXR1cm4gdGhpc30sY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4obmV3IHRoaXMuY29uc3RydWN0b3IpLmZyb21BcnJheSh0aGlzLmVsZW1lbnRzKX0sY29weTpmdW5jdGlvbihhKXthPWEuZWxlbWVudHM7dGhpcy5zZXQoYVswXSxhWzNdLGFbNl0sYVsxXSxhWzRdLGFbN10sYVsyXSxhWzVdLGFbOF0pO3JldHVybiB0aGlzfSxtdWx0aXBseVZlY3RvcjM6ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuTWF0cml4MzogLm11bHRpcGx5VmVjdG9yMygpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSB2ZWN0b3IuYXBwbHlNYXRyaXgzKCBtYXRyaXggKSBpbnN0ZWFkLlwiKTtcbnJldHVybiBhLmFwcGx5TWF0cml4Myh0aGlzKX0sbXVsdGlwbHlWZWN0b3IzQXJyYXk6ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuTWF0cml4MzogLm11bHRpcGx5VmVjdG9yM0FycmF5KCkgaGFzIGJlZW4gcmVuYW1lZC4gVXNlIG1hdHJpeC5hcHBseVRvVmVjdG9yM0FycmF5KCBhcnJheSApIGluc3RlYWQuXCIpO3JldHVybiB0aGlzLmFwcGx5VG9WZWN0b3IzQXJyYXkoYSl9LGFwcGx5VG9WZWN0b3IzQXJyYXk6ZnVuY3Rpb24oKXt2YXIgYTtyZXR1cm4gZnVuY3Rpb24oYixjLGQpe3ZvaWQgMD09PWEmJihhPW5ldyBUSFJFRS5WZWN0b3IzKTt2b2lkIDA9PT1jJiYoYz0wKTt2b2lkIDA9PT1kJiYoZD1iLmxlbmd0aCk7Zm9yKHZhciBlPTA7ZTxkO2UrPTMsYys9MylhLmZyb21BcnJheShiLGMpLGEuYXBwbHlNYXRyaXgzKHRoaXMpLGEudG9BcnJheShiLGMpO3JldHVybiBifX0oKSxhcHBseVRvQnVmZmVyOmZ1bmN0aW9uKCl7dmFyIGE7cmV0dXJuIGZ1bmN0aW9uKGIsYyxkKXt2b2lkIDA9PT1cbmEmJihhPW5ldyBUSFJFRS5WZWN0b3IzKTt2b2lkIDA9PT1jJiYoYz0wKTt2b2lkIDA9PT1kJiYoZD1iLmxlbmd0aC9iLml0ZW1TaXplKTtmb3IodmFyIGU9MDtlPGQ7ZSsrLGMrKylhLng9Yi5nZXRYKGMpLGEueT1iLmdldFkoYyksYS56PWIuZ2V0WihjKSxhLmFwcGx5TWF0cml4Myh0aGlzKSxiLnNldFhZWihhLngsYS55LGEueik7cmV0dXJuIGJ9fSgpLG11bHRpcGx5U2NhbGFyOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuZWxlbWVudHM7YlswXSo9YTtiWzNdKj1hO2JbNl0qPWE7YlsxXSo9YTtiWzRdKj1hO2JbN10qPWE7YlsyXSo9YTtiWzVdKj1hO2JbOF0qPWE7cmV0dXJuIHRoaXN9LGRldGVybWluYW50OmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5lbGVtZW50cyxiPWFbMF0sYz1hWzFdLGQ9YVsyXSxlPWFbM10sZz1hWzRdLGY9YVs1XSxoPWFbNl0sbD1hWzddLGE9YVs4XTtyZXR1cm4gYipnKmEtYipmKmwtYyplKmErYypmKmgrZCplKmwtZCpnKmh9LGdldEludmVyc2U6ZnVuY3Rpb24oYSxcbmIpe3ZhciBjPWEuZWxlbWVudHMsZD10aGlzLmVsZW1lbnRzO2RbMF09Y1sxMF0qY1s1XS1jWzZdKmNbOV07ZFsxXT0tY1sxMF0qY1sxXStjWzJdKmNbOV07ZFsyXT1jWzZdKmNbMV0tY1syXSpjWzVdO2RbM109LWNbMTBdKmNbNF0rY1s2XSpjWzhdO2RbNF09Y1sxMF0qY1swXS1jWzJdKmNbOF07ZFs1XT0tY1s2XSpjWzBdK2NbMl0qY1s0XTtkWzZdPWNbOV0qY1s0XS1jWzVdKmNbOF07ZFs3XT0tY1s5XSpjWzBdK2NbMV0qY1s4XTtkWzhdPWNbNV0qY1swXS1jWzFdKmNbNF07Yz1jWzBdKmRbMF0rY1sxXSpkWzNdK2NbMl0qZFs2XTtpZigwPT09Yyl7aWYoYil0aHJvdyBFcnJvcihcIk1hdHJpeDMuZ2V0SW52ZXJzZSgpOiBjYW4ndCBpbnZlcnQgbWF0cml4LCBkZXRlcm1pbmFudCBpcyAwXCIpO2NvbnNvbGUud2FybihcIk1hdHJpeDMuZ2V0SW52ZXJzZSgpOiBjYW4ndCBpbnZlcnQgbWF0cml4LCBkZXRlcm1pbmFudCBpcyAwXCIpO3RoaXMuaWRlbnRpdHkoKTtyZXR1cm4gdGhpc310aGlzLm11bHRpcGx5U2NhbGFyKDEvXG5jKTtyZXR1cm4gdGhpc30sdHJhbnNwb3NlOmZ1bmN0aW9uKCl7dmFyIGEsYj10aGlzLmVsZW1lbnRzO2E9YlsxXTtiWzFdPWJbM107YlszXT1hO2E9YlsyXTtiWzJdPWJbNl07Yls2XT1hO2E9Yls1XTtiWzVdPWJbN107Yls3XT1hO3JldHVybiB0aGlzfSxmbGF0dGVuVG9BcnJheU9mZnNldDpmdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuZWxlbWVudHM7YVtiXT1jWzBdO2FbYisxXT1jWzFdO2FbYisyXT1jWzJdO2FbYiszXT1jWzNdO2FbYis0XT1jWzRdO2FbYis1XT1jWzVdO2FbYis2XT1jWzZdO2FbYis3XT1jWzddO2FbYis4XT1jWzhdO3JldHVybiBhfSxnZXROb3JtYWxNYXRyaXg6ZnVuY3Rpb24oYSl7dGhpcy5nZXRJbnZlcnNlKGEpLnRyYW5zcG9zZSgpO3JldHVybiB0aGlzfSx0cmFuc3Bvc2VJbnRvQXJyYXk6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5lbGVtZW50czthWzBdPWJbMF07YVsxXT1iWzNdO2FbMl09Yls2XTthWzNdPWJbMV07YVs0XT1iWzRdO2FbNV09Yls3XTthWzZdPVxuYlsyXTthWzddPWJbNV07YVs4XT1iWzhdO3JldHVybiB0aGlzfSxmcm9tQXJyYXk6ZnVuY3Rpb24oYSl7dGhpcy5lbGVtZW50cy5zZXQoYSk7cmV0dXJuIHRoaXN9LHRvQXJyYXk6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmVsZW1lbnRzO3JldHVyblthWzBdLGFbMV0sYVsyXSxhWzNdLGFbNF0sYVs1XSxhWzZdLGFbN10sYVs4XV19fTtUSFJFRS5NYXRyaXg0PWZ1bmN0aW9uKCl7dGhpcy5lbGVtZW50cz1uZXcgRmxvYXQzMkFycmF5KFsxLDAsMCwwLDAsMSwwLDAsMCwwLDEsMCwwLDAsMCwxXSk7MDxhcmd1bWVudHMubGVuZ3RoJiZjb25zb2xlLmVycm9yKFwiVEhSRUUuTWF0cml4NDogdGhlIGNvbnN0cnVjdG9yIG5vIGxvbmdlciByZWFkcyBhcmd1bWVudHMuIHVzZSAuc2V0KCkgaW5zdGVhZC5cIil9O1xuVEhSRUUuTWF0cml4NC5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOlRIUkVFLk1hdHJpeDQsc2V0OmZ1bmN0aW9uKGEsYixjLGQsZSxnLGYsaCxsLGssbSxwLG4scSxzLHQpe3ZhciB2PXRoaXMuZWxlbWVudHM7dlswXT1hO3ZbNF09Yjt2WzhdPWM7dlsxMl09ZDt2WzFdPWU7dls1XT1nO3ZbOV09Zjt2WzEzXT1oO3ZbMl09bDt2WzZdPWs7dlsxMF09bTt2WzE0XT1wO3ZbM109bjt2WzddPXE7dlsxMV09czt2WzE1XT10O3JldHVybiB0aGlzfSxpZGVudGl0eTpmdW5jdGlvbigpe3RoaXMuc2V0KDEsMCwwLDAsMCwxLDAsMCwwLDAsMSwwLDAsMCwwLDEpO3JldHVybiB0aGlzfSxjbG9uZTpmdW5jdGlvbigpe3JldHVybihuZXcgVEhSRUUuTWF0cml4NCkuZnJvbUFycmF5KHRoaXMuZWxlbWVudHMpfSxjb3B5OmZ1bmN0aW9uKGEpe3RoaXMuZWxlbWVudHMuc2V0KGEuZWxlbWVudHMpO3JldHVybiB0aGlzfSxleHRyYWN0UG9zaXRpb246ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuTWF0cml4NDogLmV4dHJhY3RQb3NpdGlvbigpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmNvcHlQb3NpdGlvbigpLlwiKTtcbnJldHVybiB0aGlzLmNvcHlQb3NpdGlvbihhKX0sY29weVBvc2l0aW9uOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuZWxlbWVudHM7YT1hLmVsZW1lbnRzO2JbMTJdPWFbMTJdO2JbMTNdPWFbMTNdO2JbMTRdPWFbMTRdO3JldHVybiB0aGlzfSxleHRyYWN0QmFzaXM6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXRoaXMuZWxlbWVudHM7YS5zZXQoZFswXSxkWzFdLGRbMl0pO2Iuc2V0KGRbNF0sZFs1XSxkWzZdKTtjLnNldChkWzhdLGRbOV0sZFsxMF0pO3JldHVybiB0aGlzfSxtYWtlQmFzaXM6ZnVuY3Rpb24oYSxiLGMpe3RoaXMuc2V0KGEueCxiLngsYy54LDAsYS55LGIueSxjLnksMCxhLnosYi56LGMueiwwLDAsMCwwLDEpO3JldHVybiB0aGlzfSxleHRyYWN0Um90YXRpb246ZnVuY3Rpb24oKXt2YXIgYTtyZXR1cm4gZnVuY3Rpb24oYil7dm9pZCAwPT09YSYmKGE9bmV3IFRIUkVFLlZlY3RvcjMpO3ZhciBjPXRoaXMuZWxlbWVudHM7Yj1iLmVsZW1lbnRzO3ZhciBkPTEvYS5zZXQoYlswXSxcbmJbMV0sYlsyXSkubGVuZ3RoKCksZT0xL2Euc2V0KGJbNF0sYls1XSxiWzZdKS5sZW5ndGgoKSxnPTEvYS5zZXQoYls4XSxiWzldLGJbMTBdKS5sZW5ndGgoKTtjWzBdPWJbMF0qZDtjWzFdPWJbMV0qZDtjWzJdPWJbMl0qZDtjWzRdPWJbNF0qZTtjWzVdPWJbNV0qZTtjWzZdPWJbNl0qZTtjWzhdPWJbOF0qZztjWzldPWJbOV0qZztjWzEwXT1iWzEwXSpnO3JldHVybiB0aGlzfX0oKSxtYWtlUm90YXRpb25Gcm9tRXVsZXI6ZnVuY3Rpb24oYSl7ITE9PT1hIGluc3RhbmNlb2YgVEhSRUUuRXVsZXImJmNvbnNvbGUuZXJyb3IoXCJUSFJFRS5NYXRyaXg6IC5tYWtlUm90YXRpb25Gcm9tRXVsZXIoKSBub3cgZXhwZWN0cyBhIEV1bGVyIHJvdGF0aW9uIHJhdGhlciB0aGFuIGEgVmVjdG9yMyBhbmQgb3JkZXIuXCIpO3ZhciBiPXRoaXMuZWxlbWVudHMsYz1hLngsZD1hLnksZT1hLnosZz1NYXRoLmNvcyhjKSxjPU1hdGguc2luKGMpLGY9TWF0aC5jb3MoZCksZD1NYXRoLnNpbihkKSxoPU1hdGguY29zKGUpLFxuZT1NYXRoLnNpbihlKTtpZihcIlhZWlwiPT09YS5vcmRlcil7YT1nKmg7dmFyIGw9ZyplLGs9YypoLG09YyplO2JbMF09ZipoO2JbNF09LWYqZTtiWzhdPWQ7YlsxXT1sK2sqZDtiWzVdPWEtbSpkO2JbOV09LWMqZjtiWzJdPW0tYSpkO2JbNl09aytsKmQ7YlsxMF09ZypmfWVsc2VcIllYWlwiPT09YS5vcmRlcj8oYT1mKmgsbD1mKmUsaz1kKmgsbT1kKmUsYlswXT1hK20qYyxiWzRdPWsqYy1sLGJbOF09ZypkLGJbMV09ZyplLGJbNV09ZypoLGJbOV09LWMsYlsyXT1sKmMtayxiWzZdPW0rYSpjLGJbMTBdPWcqZik6XCJaWFlcIj09PWEub3JkZXI/KGE9ZipoLGw9ZiplLGs9ZCpoLG09ZCplLGJbMF09YS1tKmMsYls0XT0tZyplLGJbOF09aytsKmMsYlsxXT1sK2sqYyxiWzVdPWcqaCxiWzldPW0tYSpjLGJbMl09LWcqZCxiWzZdPWMsYlsxMF09ZypmKTpcIlpZWFwiPT09YS5vcmRlcj8oYT1nKmgsbD1nKmUsaz1jKmgsbT1jKmUsYlswXT1mKmgsYls0XT1rKmQtbCxiWzhdPWEqZCttLGJbMV09ZiplLGJbNV09XG5tKmQrYSxiWzldPWwqZC1rLGJbMl09LWQsYls2XT1jKmYsYlsxMF09ZypmKTpcIllaWFwiPT09YS5vcmRlcj8oYT1nKmYsbD1nKmQsaz1jKmYsbT1jKmQsYlswXT1mKmgsYls0XT1tLWEqZSxiWzhdPWsqZStsLGJbMV09ZSxiWzVdPWcqaCxiWzldPS1jKmgsYlsyXT0tZCpoLGJbNl09bCplK2ssYlsxMF09YS1tKmUpOlwiWFpZXCI9PT1hLm9yZGVyJiYoYT1nKmYsbD1nKmQsaz1jKmYsbT1jKmQsYlswXT1mKmgsYls0XT0tZSxiWzhdPWQqaCxiWzFdPWEqZSttLGJbNV09ZypoLGJbOV09bCplLWssYlsyXT1rKmUtbCxiWzZdPWMqaCxiWzEwXT1tKmUrYSk7YlszXT0wO2JbN109MDtiWzExXT0wO2JbMTJdPTA7YlsxM109MDtiWzE0XT0wO2JbMTVdPTE7cmV0dXJuIHRoaXN9LHNldFJvdGF0aW9uRnJvbVF1YXRlcm5pb246ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuTWF0cml4NDogLnNldFJvdGF0aW9uRnJvbVF1YXRlcm5pb24oKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5tYWtlUm90YXRpb25Gcm9tUXVhdGVybmlvbigpLlwiKTtcbnJldHVybiB0aGlzLm1ha2VSb3RhdGlvbkZyb21RdWF0ZXJuaW9uKGEpfSxtYWtlUm90YXRpb25Gcm9tUXVhdGVybmlvbjpmdW5jdGlvbihhKXt2YXIgYj10aGlzLmVsZW1lbnRzLGM9YS54LGQ9YS55LGU9YS56LGc9YS53LGY9YytjLGg9ZCtkLGw9ZStlO2E9YypmO3ZhciBrPWMqaCxjPWMqbCxtPWQqaCxkPWQqbCxlPWUqbCxmPWcqZixoPWcqaCxnPWcqbDtiWzBdPTEtKG0rZSk7Yls0XT1rLWc7Yls4XT1jK2g7YlsxXT1rK2c7Yls1XT0xLShhK2UpO2JbOV09ZC1mO2JbMl09Yy1oO2JbNl09ZCtmO2JbMTBdPTEtKGErbSk7YlszXT0wO2JbN109MDtiWzExXT0wO2JbMTJdPTA7YlsxM109MDtiWzE0XT0wO2JbMTVdPTE7cmV0dXJuIHRoaXN9LGxvb2tBdDpmdW5jdGlvbigpe3ZhciBhLGIsYztyZXR1cm4gZnVuY3Rpb24oZCxlLGcpe3ZvaWQgMD09PWEmJihhPW5ldyBUSFJFRS5WZWN0b3IzKTt2b2lkIDA9PT1iJiYoYj1uZXcgVEhSRUUuVmVjdG9yMyk7dm9pZCAwPT09YyYmKGM9bmV3IFRIUkVFLlZlY3RvcjMpO1xudmFyIGY9dGhpcy5lbGVtZW50cztjLnN1YlZlY3RvcnMoZCxlKS5ub3JtYWxpemUoKTswPT09Yy5sZW5ndGhTcSgpJiYoYy56PTEpO2EuY3Jvc3NWZWN0b3JzKGcsYykubm9ybWFsaXplKCk7MD09PWEubGVuZ3RoU3EoKSYmKGMueCs9MUUtNCxhLmNyb3NzVmVjdG9ycyhnLGMpLm5vcm1hbGl6ZSgpKTtiLmNyb3NzVmVjdG9ycyhjLGEpO2ZbMF09YS54O2ZbNF09Yi54O2ZbOF09Yy54O2ZbMV09YS55O2ZbNV09Yi55O2ZbOV09Yy55O2ZbMl09YS56O2ZbNl09Yi56O2ZbMTBdPWMuejtyZXR1cm4gdGhpc319KCksbXVsdGlwbHk6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdm9pZCAwIT09Yj8oY29uc29sZS53YXJuKFwiVEhSRUUuTWF0cml4NDogLm11bHRpcGx5KCkgbm93IG9ubHkgYWNjZXB0cyBvbmUgYXJndW1lbnQuIFVzZSAubXVsdGlwbHlNYXRyaWNlcyggYSwgYiApIGluc3RlYWQuXCIpLHRoaXMubXVsdGlwbHlNYXRyaWNlcyhhLGIpKTp0aGlzLm11bHRpcGx5TWF0cmljZXModGhpcyxhKX0sXG5tdWx0aXBseU1hdHJpY2VzOmZ1bmN0aW9uKGEsYil7dmFyIGM9YS5lbGVtZW50cyxkPWIuZWxlbWVudHMsZT10aGlzLmVsZW1lbnRzLGc9Y1swXSxmPWNbNF0saD1jWzhdLGw9Y1sxMl0saz1jWzFdLG09Y1s1XSxwPWNbOV0sbj1jWzEzXSxxPWNbMl0scz1jWzZdLHQ9Y1sxMF0sdj1jWzE0XSx1PWNbM10sdz1jWzddLEQ9Y1sxMV0sYz1jWzE1XSx4PWRbMF0sQj1kWzRdLHk9ZFs4XSx6PWRbMTJdLEE9ZFsxXSxKPWRbNV0sRj1kWzldLEM9ZFsxM10sTj1kWzJdLEw9ZFs2XSxRPWRbMTBdLE09ZFsxNF0sSz1kWzNdLEU9ZFs3XSxPPWRbMTFdLGQ9ZFsxNV07ZVswXT1nKngrZipBK2gqTitsKks7ZVs0XT1nKkIrZipKK2gqTCtsKkU7ZVs4XT1nKnkrZipGK2gqUStsKk87ZVsxMl09Zyp6K2YqQytoKk0rbCpkO2VbMV09ayp4K20qQStwKk4rbipLO2VbNV09aypCK20qSitwKkwrbipFO2VbOV09ayp5K20qRitwKlErbipPO2VbMTNdPWsqeittKkMrcCpNK24qZDtlWzJdPXEqeCtzKkErdCpOK3YqXG5LO2VbNl09cSpCK3MqSit0KkwrdipFO2VbMTBdPXEqeStzKkYrdCpRK3YqTztlWzE0XT1xKnorcypDK3QqTSt2KmQ7ZVszXT11KngrdypBK0QqTitjKks7ZVs3XT11KkIrdypKK0QqTCtjKkU7ZVsxMV09dSp5K3cqRitEKlErYypPO2VbMTVdPXUqeit3KkMrRCpNK2MqZDtyZXR1cm4gdGhpc30sbXVsdGlwbHlUb0FycmF5OmZ1bmN0aW9uKGEsYixjKXt2YXIgZD10aGlzLmVsZW1lbnRzO3RoaXMubXVsdGlwbHlNYXRyaWNlcyhhLGIpO2NbMF09ZFswXTtjWzFdPWRbMV07Y1syXT1kWzJdO2NbM109ZFszXTtjWzRdPWRbNF07Y1s1XT1kWzVdO2NbNl09ZFs2XTtjWzddPWRbN107Y1s4XT1kWzhdO2NbOV09ZFs5XTtjWzEwXT1kWzEwXTtjWzExXT1kWzExXTtjWzEyXT1kWzEyXTtjWzEzXT1kWzEzXTtjWzE0XT1kWzE0XTtjWzE1XT1kWzE1XTtyZXR1cm4gdGhpc30sbXVsdGlwbHlTY2FsYXI6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5lbGVtZW50cztiWzBdKj1hO2JbNF0qPWE7Yls4XSo9YTtcbmJbMTJdKj1hO2JbMV0qPWE7Yls1XSo9YTtiWzldKj1hO2JbMTNdKj1hO2JbMl0qPWE7Yls2XSo9YTtiWzEwXSo9YTtiWzE0XSo9YTtiWzNdKj1hO2JbN10qPWE7YlsxMV0qPWE7YlsxNV0qPWE7cmV0dXJuIHRoaXN9LG11bHRpcGx5VmVjdG9yMzpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5NYXRyaXg0OiAubXVsdGlwbHlWZWN0b3IzKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIHZlY3Rvci5hcHBseU1hdHJpeDQoIG1hdHJpeCApIG9yIHZlY3Rvci5hcHBseVByb2plY3Rpb24oIG1hdHJpeCApIGluc3RlYWQuXCIpO3JldHVybiBhLmFwcGx5UHJvamVjdGlvbih0aGlzKX0sbXVsdGlwbHlWZWN0b3I0OmZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLk1hdHJpeDQ6IC5tdWx0aXBseVZlY3RvcjQoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgdmVjdG9yLmFwcGx5TWF0cml4NCggbWF0cml4ICkgaW5zdGVhZC5cIik7cmV0dXJuIGEuYXBwbHlNYXRyaXg0KHRoaXMpfSxtdWx0aXBseVZlY3RvcjNBcnJheTpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5NYXRyaXg0OiAubXVsdGlwbHlWZWN0b3IzQXJyYXkoKSBoYXMgYmVlbiByZW5hbWVkLiBVc2UgbWF0cml4LmFwcGx5VG9WZWN0b3IzQXJyYXkoIGFycmF5ICkgaW5zdGVhZC5cIik7XG5yZXR1cm4gdGhpcy5hcHBseVRvVmVjdG9yM0FycmF5KGEpfSxhcHBseVRvVmVjdG9yM0FycmF5OmZ1bmN0aW9uKCl7dmFyIGE7cmV0dXJuIGZ1bmN0aW9uKGIsYyxkKXt2b2lkIDA9PT1hJiYoYT1uZXcgVEhSRUUuVmVjdG9yMyk7dm9pZCAwPT09YyYmKGM9MCk7dm9pZCAwPT09ZCYmKGQ9Yi5sZW5ndGgpO2Zvcih2YXIgZT0wO2U8ZDtlKz0zLGMrPTMpYS5mcm9tQXJyYXkoYixjKSxhLmFwcGx5TWF0cml4NCh0aGlzKSxhLnRvQXJyYXkoYixjKTtyZXR1cm4gYn19KCksYXBwbHlUb0J1ZmZlcjpmdW5jdGlvbigpe3ZhciBhO3JldHVybiBmdW5jdGlvbihiLGMsZCl7dm9pZCAwPT09YSYmKGE9bmV3IFRIUkVFLlZlY3RvcjMpO3ZvaWQgMD09PWMmJihjPTApO3ZvaWQgMD09PWQmJihkPWIubGVuZ3RoL2IuaXRlbVNpemUpO2Zvcih2YXIgZT0wO2U8ZDtlKyssYysrKWEueD1iLmdldFgoYyksYS55PWIuZ2V0WShjKSxhLno9Yi5nZXRaKGMpLGEuYXBwbHlNYXRyaXg0KHRoaXMpLGIuc2V0WFlaKGEueCxcbmEueSxhLnopO3JldHVybiBifX0oKSxyb3RhdGVBeGlzOmZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLk1hdHJpeDQ6IC5yb3RhdGVBeGlzKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFZlY3RvcjMudHJhbnNmb3JtRGlyZWN0aW9uKCBtYXRyaXggKSBpbnN0ZWFkLlwiKTthLnRyYW5zZm9ybURpcmVjdGlvbih0aGlzKX0sY3Jvc3NWZWN0b3I6ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuTWF0cml4NDogLmNyb3NzVmVjdG9yKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIHZlY3Rvci5hcHBseU1hdHJpeDQoIG1hdHJpeCApIGluc3RlYWQuXCIpO3JldHVybiBhLmFwcGx5TWF0cml4NCh0aGlzKX0sZGV0ZXJtaW5hbnQ6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmVsZW1lbnRzLGI9YVswXSxjPWFbNF0sZD1hWzhdLGU9YVsxMl0sZz1hWzFdLGY9YVs1XSxoPWFbOV0sbD1hWzEzXSxrPWFbMl0sbT1hWzZdLHA9YVsxMF0sbj1hWzE0XTtyZXR1cm4gYVszXSooK2UqaCptLWQqbCpcbm0tZSpmKnArYypsKnArZCpmKm4tYypoKm4pK2FbN10qKCtiKmgqbi1iKmwqcCtlKmcqcC1kKmcqbitkKmwqay1lKmgqaykrYVsxMV0qKCtiKmwqbS1iKmYqbi1lKmcqbStjKmcqbitlKmYqay1jKmwqaykrYVsxNV0qKC1kKmYqay1iKmgqbStiKmYqcCtkKmcqbS1jKmcqcCtjKmgqayl9LHRyYW5zcG9zZTpmdW5jdGlvbigpe3ZhciBhPXRoaXMuZWxlbWVudHMsYjtiPWFbMV07YVsxXT1hWzRdO2FbNF09YjtiPWFbMl07YVsyXT1hWzhdO2FbOF09YjtiPWFbNl07YVs2XT1hWzldO2FbOV09YjtiPWFbM107YVszXT1hWzEyXTthWzEyXT1iO2I9YVs3XTthWzddPWFbMTNdO2FbMTNdPWI7Yj1hWzExXTthWzExXT1hWzE0XTthWzE0XT1iO3JldHVybiB0aGlzfSxmbGF0dGVuVG9BcnJheU9mZnNldDpmdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuZWxlbWVudHM7YVtiXT1jWzBdO2FbYisxXT1jWzFdO2FbYisyXT1jWzJdO2FbYiszXT1jWzNdO2FbYis0XT1jWzRdO2FbYis1XT1jWzVdO2FbYis2XT1cbmNbNl07YVtiKzddPWNbN107YVtiKzhdPWNbOF07YVtiKzldPWNbOV07YVtiKzEwXT1jWzEwXTthW2IrMTFdPWNbMTFdO2FbYisxMl09Y1sxMl07YVtiKzEzXT1jWzEzXTthW2IrMTRdPWNbMTRdO2FbYisxNV09Y1sxNV07cmV0dXJuIGF9LGdldFBvc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE7cmV0dXJuIGZ1bmN0aW9uKCl7dm9pZCAwPT09YSYmKGE9bmV3IFRIUkVFLlZlY3RvcjMpO2NvbnNvbGUud2FybihcIlRIUkVFLk1hdHJpeDQ6IC5nZXRQb3NpdGlvbigpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBWZWN0b3IzLnNldEZyb21NYXRyaXhQb3NpdGlvbiggbWF0cml4ICkgaW5zdGVhZC5cIik7dmFyIGI9dGhpcy5lbGVtZW50cztyZXR1cm4gYS5zZXQoYlsxMl0sYlsxM10sYlsxNF0pfX0oKSxzZXRQb3NpdGlvbjpmdW5jdGlvbihhKXt2YXIgYj10aGlzLmVsZW1lbnRzO2JbMTJdPWEueDtiWzEzXT1hLnk7YlsxNF09YS56O3JldHVybiB0aGlzfSxnZXRJbnZlcnNlOmZ1bmN0aW9uKGEsYil7dmFyIGM9XG50aGlzLmVsZW1lbnRzLGQ9YS5lbGVtZW50cyxlPWRbMF0sZz1kWzRdLGY9ZFs4XSxoPWRbMTJdLGw9ZFsxXSxrPWRbNV0sbT1kWzldLHA9ZFsxM10sbj1kWzJdLHE9ZFs2XSxzPWRbMTBdLHQ9ZFsxNF0sdj1kWzNdLHU9ZFs3XSx3PWRbMTFdLGQ9ZFsxNV07Y1swXT1tKnQqdS1wKnMqdStwKnEqdy1rKnQqdy1tKnEqZCtrKnMqZDtjWzRdPWgqcyp1LWYqdCp1LWgqcSp3K2cqdCp3K2YqcSpkLWcqcypkO2NbOF09ZipwKnUtaCptKnUraCprKnctZypwKnctZiprKmQrZyptKmQ7Y1sxMl09aCptKnEtZipwKnEtaCprKnMrZypwKnMrZiprKnQtZyptKnQ7Y1sxXT1wKnMqdi1tKnQqdi1wKm4qdytsKnQqdyttKm4qZC1sKnMqZDtjWzVdPWYqdCp2LWgqcyp2K2gqbip3LWUqdCp3LWYqbipkK2UqcypkO2NbOV09aCptKnYtZipwKnYtaCpsKncrZSpwKncrZipsKmQtZSptKmQ7Y1sxM109ZipwKm4taCptKm4raCpsKnMtZSpwKnMtZipsKnQrZSptKnQ7Y1syXT1rKnQqdi1wKnEqditwKm4qdS1sKnQqXG51LWsqbipkK2wqcSpkO2NbNl09aCpxKnYtZyp0KnYtaCpuKnUrZSp0KnUrZypuKmQtZSpxKmQ7Y1sxMF09ZypwKnYtaCprKnYraCpsKnUtZSpwKnUtZypsKmQrZSprKmQ7Y1sxNF09aCprKm4tZypwKm4taCpsKnErZSpwKnErZypsKnQtZSprKnQ7Y1szXT1tKnEqdi1rKnMqdi1tKm4qdStsKnMqdStrKm4qdy1sKnEqdztjWzddPWcqcyp2LWYqcSp2K2Yqbip1LWUqcyp1LWcqbip3K2UqcSp3O2NbMTFdPWYqayp2LWcqbSp2LWYqbCp1K2UqbSp1K2cqbCp3LWUqayp3O2NbMTVdPWcqbSpuLWYqaypuK2YqbCpxLWUqbSpxLWcqbCpzK2UqaypzO2M9ZSpjWzBdK2wqY1s0XStuKmNbOF0rdipjWzEyXTtpZigwPT09Yyl7aWYoYil0aHJvdyBFcnJvcihcIlRIUkVFLk1hdHJpeDQuZ2V0SW52ZXJzZSgpOiBjYW4ndCBpbnZlcnQgbWF0cml4LCBkZXRlcm1pbmFudCBpcyAwXCIpO2NvbnNvbGUud2FybihcIlRIUkVFLk1hdHJpeDQuZ2V0SW52ZXJzZSgpOiBjYW4ndCBpbnZlcnQgbWF0cml4LCBkZXRlcm1pbmFudCBpcyAwXCIpO1xudGhpcy5pZGVudGl0eSgpO3JldHVybiB0aGlzfXRoaXMubXVsdGlwbHlTY2FsYXIoMS9jKTtyZXR1cm4gdGhpc30sdHJhbnNsYXRlOmZ1bmN0aW9uKGEpe2NvbnNvbGUuZXJyb3IoXCJUSFJFRS5NYXRyaXg0OiAudHJhbnNsYXRlKCkgaGFzIGJlZW4gcmVtb3ZlZC5cIil9LHJvdGF0ZVg6ZnVuY3Rpb24oYSl7Y29uc29sZS5lcnJvcihcIlRIUkVFLk1hdHJpeDQ6IC5yb3RhdGVYKCkgaGFzIGJlZW4gcmVtb3ZlZC5cIil9LHJvdGF0ZVk6ZnVuY3Rpb24oYSl7Y29uc29sZS5lcnJvcihcIlRIUkVFLk1hdHJpeDQ6IC5yb3RhdGVZKCkgaGFzIGJlZW4gcmVtb3ZlZC5cIil9LHJvdGF0ZVo6ZnVuY3Rpb24oYSl7Y29uc29sZS5lcnJvcihcIlRIUkVFLk1hdHJpeDQ6IC5yb3RhdGVaKCkgaGFzIGJlZW4gcmVtb3ZlZC5cIil9LHJvdGF0ZUJ5QXhpczpmdW5jdGlvbihhLGIpe2NvbnNvbGUuZXJyb3IoXCJUSFJFRS5NYXRyaXg0OiAucm90YXRlQnlBeGlzKCkgaGFzIGJlZW4gcmVtb3ZlZC5cIil9LHNjYWxlOmZ1bmN0aW9uKGEpe3ZhciBiPVxudGhpcy5lbGVtZW50cyxjPWEueCxkPWEueTthPWEuejtiWzBdKj1jO2JbNF0qPWQ7Yls4XSo9YTtiWzFdKj1jO2JbNV0qPWQ7Yls5XSo9YTtiWzJdKj1jO2JbNl0qPWQ7YlsxMF0qPWE7YlszXSo9YztiWzddKj1kO2JbMTFdKj1hO3JldHVybiB0aGlzfSxnZXRNYXhTY2FsZU9uQXhpczpmdW5jdGlvbigpe3ZhciBhPXRoaXMuZWxlbWVudHM7cmV0dXJuIE1hdGguc3FydChNYXRoLm1heChhWzBdKmFbMF0rYVsxXSphWzFdK2FbMl0qYVsyXSxhWzRdKmFbNF0rYVs1XSphWzVdK2FbNl0qYVs2XSxhWzhdKmFbOF0rYVs5XSphWzldK2FbMTBdKmFbMTBdKSl9LG1ha2VUcmFuc2xhdGlvbjpmdW5jdGlvbihhLGIsYyl7dGhpcy5zZXQoMSwwLDAsYSwwLDEsMCxiLDAsMCwxLGMsMCwwLDAsMSk7cmV0dXJuIHRoaXN9LG1ha2VSb3RhdGlvblg6ZnVuY3Rpb24oYSl7dmFyIGI9TWF0aC5jb3MoYSk7YT1NYXRoLnNpbihhKTt0aGlzLnNldCgxLDAsMCwwLDAsYiwtYSwwLDAsYSxiLDAsMCwwLDAsMSk7XG5yZXR1cm4gdGhpc30sbWFrZVJvdGF0aW9uWTpmdW5jdGlvbihhKXt2YXIgYj1NYXRoLmNvcyhhKTthPU1hdGguc2luKGEpO3RoaXMuc2V0KGIsMCxhLDAsMCwxLDAsMCwtYSwwLGIsMCwwLDAsMCwxKTtyZXR1cm4gdGhpc30sbWFrZVJvdGF0aW9uWjpmdW5jdGlvbihhKXt2YXIgYj1NYXRoLmNvcyhhKTthPU1hdGguc2luKGEpO3RoaXMuc2V0KGIsLWEsMCwwLGEsYiwwLDAsMCwwLDEsMCwwLDAsMCwxKTtyZXR1cm4gdGhpc30sbWFrZVJvdGF0aW9uQXhpczpmdW5jdGlvbihhLGIpe3ZhciBjPU1hdGguY29zKGIpLGQ9TWF0aC5zaW4oYiksZT0xLWMsZz1hLngsZj1hLnksaD1hLnosbD1lKmcsaz1lKmY7dGhpcy5zZXQobCpnK2MsbCpmLWQqaCxsKmgrZCpmLDAsbCpmK2QqaCxrKmYrYyxrKmgtZCpnLDAsbCpoLWQqZixrKmgrZCpnLGUqaCpoK2MsMCwwLDAsMCwxKTtyZXR1cm4gdGhpc30sbWFrZVNjYWxlOmZ1bmN0aW9uKGEsYixjKXt0aGlzLnNldChhLDAsMCwwLDAsYiwwLDAsMCwwLGMsXG4wLDAsMCwwLDEpO3JldHVybiB0aGlzfSxjb21wb3NlOmZ1bmN0aW9uKGEsYixjKXt0aGlzLm1ha2VSb3RhdGlvbkZyb21RdWF0ZXJuaW9uKGIpO3RoaXMuc2NhbGUoYyk7dGhpcy5zZXRQb3NpdGlvbihhKTtyZXR1cm4gdGhpc30sZGVjb21wb3NlOmZ1bmN0aW9uKCl7dmFyIGEsYjtyZXR1cm4gZnVuY3Rpb24oYyxkLGUpe3ZvaWQgMD09PWEmJihhPW5ldyBUSFJFRS5WZWN0b3IzKTt2b2lkIDA9PT1iJiYoYj1uZXcgVEhSRUUuTWF0cml4NCk7dmFyIGc9dGhpcy5lbGVtZW50cyxmPWEuc2V0KGdbMF0sZ1sxXSxnWzJdKS5sZW5ndGgoKSxoPWEuc2V0KGdbNF0sZ1s1XSxnWzZdKS5sZW5ndGgoKSxsPWEuc2V0KGdbOF0sZ1s5XSxnWzEwXSkubGVuZ3RoKCk7MD50aGlzLmRldGVybWluYW50KCkmJihmPS1mKTtjLng9Z1sxMl07Yy55PWdbMTNdO2Muej1nWzE0XTtiLmVsZW1lbnRzLnNldCh0aGlzLmVsZW1lbnRzKTtjPTEvZjt2YXIgZz0xL2gsaz0xL2w7Yi5lbGVtZW50c1swXSo9YztiLmVsZW1lbnRzWzFdKj1cbmM7Yi5lbGVtZW50c1syXSo9YztiLmVsZW1lbnRzWzRdKj1nO2IuZWxlbWVudHNbNV0qPWc7Yi5lbGVtZW50c1s2XSo9ZztiLmVsZW1lbnRzWzhdKj1rO2IuZWxlbWVudHNbOV0qPWs7Yi5lbGVtZW50c1sxMF0qPWs7ZC5zZXRGcm9tUm90YXRpb25NYXRyaXgoYik7ZS54PWY7ZS55PWg7ZS56PWw7cmV0dXJuIHRoaXN9fSgpLG1ha2VGcnVzdHVtOmZ1bmN0aW9uKGEsYixjLGQsZSxnKXt2YXIgZj10aGlzLmVsZW1lbnRzO2ZbMF09MiplLyhiLWEpO2ZbNF09MDtmWzhdPShiK2EpLyhiLWEpO2ZbMTJdPTA7ZlsxXT0wO2ZbNV09MiplLyhkLWMpO2ZbOV09KGQrYykvKGQtYyk7ZlsxM109MDtmWzJdPTA7Zls2XT0wO2ZbMTBdPS0oZytlKS8oZy1lKTtmWzE0XT0tMipnKmUvKGctZSk7ZlszXT0wO2ZbN109MDtmWzExXT0tMTtmWzE1XT0wO3JldHVybiB0aGlzfSxtYWtlUGVyc3BlY3RpdmU6ZnVuY3Rpb24oYSxiLGMsZCl7YT1jKk1hdGgudGFuKFRIUkVFLk1hdGguZGVnVG9SYWQoLjUqYSkpO1xudmFyIGU9LWE7cmV0dXJuIHRoaXMubWFrZUZydXN0dW0oZSpiLGEqYixlLGEsYyxkKX0sbWFrZU9ydGhvZ3JhcGhpYzpmdW5jdGlvbihhLGIsYyxkLGUsZyl7dmFyIGY9dGhpcy5lbGVtZW50cyxoPWItYSxsPWMtZCxrPWctZTtmWzBdPTIvaDtmWzRdPTA7Zls4XT0wO2ZbMTJdPS0oKGIrYSkvaCk7ZlsxXT0wO2ZbNV09Mi9sO2ZbOV09MDtmWzEzXT0tKChjK2QpL2wpO2ZbMl09MDtmWzZdPTA7ZlsxMF09LTIvaztmWzE0XT0tKChnK2UpL2spO2ZbM109MDtmWzddPTA7ZlsxMV09MDtmWzE1XT0xO3JldHVybiB0aGlzfSxlcXVhbHM6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5lbGVtZW50czthPWEuZWxlbWVudHM7Zm9yKHZhciBjPTA7MTY+YztjKyspaWYoYltjXSE9PWFbY10pcmV0dXJuITE7cmV0dXJuITB9LGZyb21BcnJheTpmdW5jdGlvbihhKXt0aGlzLmVsZW1lbnRzLnNldChhKTtyZXR1cm4gdGhpc30sdG9BcnJheTpmdW5jdGlvbigpe3ZhciBhPXRoaXMuZWxlbWVudHM7cmV0dXJuW2FbMF0sXG5hWzFdLGFbMl0sYVszXSxhWzRdLGFbNV0sYVs2XSxhWzddLGFbOF0sYVs5XSxhWzEwXSxhWzExXSxhWzEyXSxhWzEzXSxhWzE0XSxhWzE1XV19fTtUSFJFRS5SYXk9ZnVuY3Rpb24oYSxiKXt0aGlzLm9yaWdpbj12b2lkIDAhPT1hP2E6bmV3IFRIUkVFLlZlY3RvcjM7dGhpcy5kaXJlY3Rpb249dm9pZCAwIT09Yj9iOm5ldyBUSFJFRS5WZWN0b3IzfTtcblRIUkVFLlJheS5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOlRIUkVFLlJheSxzZXQ6ZnVuY3Rpb24oYSxiKXt0aGlzLm9yaWdpbi5jb3B5KGEpO3RoaXMuZGlyZWN0aW9uLmNvcHkoYik7cmV0dXJuIHRoaXN9LGNsb25lOmZ1bmN0aW9uKCl7cmV0dXJuKG5ldyB0aGlzLmNvbnN0cnVjdG9yKS5jb3B5KHRoaXMpfSxjb3B5OmZ1bmN0aW9uKGEpe3RoaXMub3JpZ2luLmNvcHkoYS5vcmlnaW4pO3RoaXMuZGlyZWN0aW9uLmNvcHkoYS5kaXJlY3Rpb24pO3JldHVybiB0aGlzfSxhdDpmdW5jdGlvbihhLGIpe3JldHVybihifHxuZXcgVEhSRUUuVmVjdG9yMykuY29weSh0aGlzLmRpcmVjdGlvbikubXVsdGlwbHlTY2FsYXIoYSkuYWRkKHRoaXMub3JpZ2luKX0scmVjYXN0OmZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlZlY3RvcjM7cmV0dXJuIGZ1bmN0aW9uKGIpe3RoaXMub3JpZ2luLmNvcHkodGhpcy5hdChiLGEpKTtyZXR1cm4gdGhpc319KCksY2xvc2VzdFBvaW50VG9Qb2ludDpmdW5jdGlvbihhLFxuYil7dmFyIGM9Ynx8bmV3IFRIUkVFLlZlY3RvcjM7Yy5zdWJWZWN0b3JzKGEsdGhpcy5vcmlnaW4pO3ZhciBkPWMuZG90KHRoaXMuZGlyZWN0aW9uKTtyZXR1cm4gMD5kP2MuY29weSh0aGlzLm9yaWdpbik6Yy5jb3B5KHRoaXMuZGlyZWN0aW9uKS5tdWx0aXBseVNjYWxhcihkKS5hZGQodGhpcy5vcmlnaW4pfSxkaXN0YW5jZVRvUG9pbnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIE1hdGguc3FydCh0aGlzLmRpc3RhbmNlU3FUb1BvaW50KGEpKX0sZGlzdGFuY2VTcVRvUG9pbnQ6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuVmVjdG9yMztyZXR1cm4gZnVuY3Rpb24oYil7dmFyIGM9YS5zdWJWZWN0b3JzKGIsdGhpcy5vcmlnaW4pLmRvdCh0aGlzLmRpcmVjdGlvbik7aWYoMD5jKXJldHVybiB0aGlzLm9yaWdpbi5kaXN0YW5jZVRvU3F1YXJlZChiKTthLmNvcHkodGhpcy5kaXJlY3Rpb24pLm11bHRpcGx5U2NhbGFyKGMpLmFkZCh0aGlzLm9yaWdpbik7cmV0dXJuIGEuZGlzdGFuY2VUb1NxdWFyZWQoYil9fSgpLFxuZGlzdGFuY2VTcVRvU2VnbWVudDpmdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5WZWN0b3IzLGI9bmV3IFRIUkVFLlZlY3RvcjMsYz1uZXcgVEhSRUUuVmVjdG9yMztyZXR1cm4gZnVuY3Rpb24oZCxlLGcsZil7YS5jb3B5KGQpLmFkZChlKS5tdWx0aXBseVNjYWxhciguNSk7Yi5jb3B5KGUpLnN1YihkKS5ub3JtYWxpemUoKTtjLmNvcHkodGhpcy5vcmlnaW4pLnN1YihhKTt2YXIgaD0uNSpkLmRpc3RhbmNlVG8oZSksbD0tdGhpcy5kaXJlY3Rpb24uZG90KGIpLGs9Yy5kb3QodGhpcy5kaXJlY3Rpb24pLG09LWMuZG90KGIpLHA9Yy5sZW5ndGhTcSgpLG49TWF0aC5hYnMoMS1sKmwpLHE7MDxuPyhkPWwqbS1rLGU9bCprLW0scT1oKm4sMDw9ZD9lPj0tcT9lPD1xPyhoPTEvbixkKj1oLGUqPWgsbD1kKihkK2wqZSsyKmspK2UqKGwqZCtlKzIqbSkrcCk6KGU9aCxkPU1hdGgubWF4KDAsLShsKmUraykpLGw9LWQqZCtlKihlKzIqbSkrcCk6KGU9LWgsZD1NYXRoLm1heCgwLC0obCplK2spKSxcbmw9LWQqZCtlKihlKzIqbSkrcCk6ZTw9LXE/KGQ9TWF0aC5tYXgoMCwtKC1sKmgraykpLGU9MDxkPy1oOk1hdGgubWluKE1hdGgubWF4KC1oLC1tKSxoKSxsPS1kKmQrZSooZSsyKm0pK3ApOmU8PXE/KGQ9MCxlPU1hdGgubWluKE1hdGgubWF4KC1oLC1tKSxoKSxsPWUqKGUrMiptKStwKTooZD1NYXRoLm1heCgwLC0obCpoK2spKSxlPTA8ZD9oOk1hdGgubWluKE1hdGgubWF4KC1oLC1tKSxoKSxsPS1kKmQrZSooZSsyKm0pK3ApKTooZT0wPGw/LWg6aCxkPU1hdGgubWF4KDAsLShsKmUraykpLGw9LWQqZCtlKihlKzIqbSkrcCk7ZyYmZy5jb3B5KHRoaXMuZGlyZWN0aW9uKS5tdWx0aXBseVNjYWxhcihkKS5hZGQodGhpcy5vcmlnaW4pO2YmJmYuY29weShiKS5tdWx0aXBseVNjYWxhcihlKS5hZGQoYSk7cmV0dXJuIGx9fSgpLGlzSW50ZXJzZWN0aW9uU3BoZXJlOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmRpc3RhbmNlVG9Qb2ludChhLmNlbnRlcik8PWEucmFkaXVzfSxpbnRlcnNlY3RTcGhlcmU6ZnVuY3Rpb24oKXt2YXIgYT1cbm5ldyBUSFJFRS5WZWN0b3IzO3JldHVybiBmdW5jdGlvbihiLGMpe2Euc3ViVmVjdG9ycyhiLmNlbnRlcix0aGlzLm9yaWdpbik7dmFyIGQ9YS5kb3QodGhpcy5kaXJlY3Rpb24pLGU9YS5kb3QoYSktZCpkLGc9Yi5yYWRpdXMqYi5yYWRpdXM7aWYoZT5nKXJldHVybiBudWxsO2c9TWF0aC5zcXJ0KGctZSk7ZT1kLWc7ZCs9ZztyZXR1cm4gMD5lJiYwPmQ/bnVsbDowPmU/dGhpcy5hdChkLGMpOnRoaXMuYXQoZSxjKX19KCksaXNJbnRlcnNlY3Rpb25QbGFuZTpmdW5jdGlvbihhKXt2YXIgYj1hLmRpc3RhbmNlVG9Qb2ludCh0aGlzLm9yaWdpbik7cmV0dXJuIDA9PT1ifHwwPmEubm9ybWFsLmRvdCh0aGlzLmRpcmVjdGlvbikqYj8hMDohMX0sZGlzdGFuY2VUb1BsYW5lOmZ1bmN0aW9uKGEpe3ZhciBiPWEubm9ybWFsLmRvdCh0aGlzLmRpcmVjdGlvbik7aWYoMD09PWIpcmV0dXJuIDA9PT1hLmRpc3RhbmNlVG9Qb2ludCh0aGlzLm9yaWdpbik/MDpudWxsO2E9LSh0aGlzLm9yaWdpbi5kb3QoYS5ub3JtYWwpK1xuYS5jb25zdGFudCkvYjtyZXR1cm4gMDw9YT9hOm51bGx9LGludGVyc2VjdFBsYW5lOmZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5kaXN0YW5jZVRvUGxhbmUoYSk7cmV0dXJuIG51bGw9PT1jP251bGw6dGhpcy5hdChjLGIpfSxpc0ludGVyc2VjdGlvbkJveDpmdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5WZWN0b3IzO3JldHVybiBmdW5jdGlvbihiKXtyZXR1cm4gbnVsbCE9PXRoaXMuaW50ZXJzZWN0Qm94KGIsYSl9fSgpLGludGVyc2VjdEJveDpmdW5jdGlvbihhLGIpe3ZhciBjLGQsZSxnLGY7ZD0xL3RoaXMuZGlyZWN0aW9uLng7Zz0xL3RoaXMuZGlyZWN0aW9uLnk7Zj0xL3RoaXMuZGlyZWN0aW9uLno7dmFyIGg9dGhpcy5vcmlnaW47MDw9ZD8oYz0oYS5taW4ueC1oLngpKmQsZCo9YS5tYXgueC1oLngpOihjPShhLm1heC54LWgueCkqZCxkKj1hLm1pbi54LWgueCk7MDw9Zz8oZT0oYS5taW4ueS1oLnkpKmcsZyo9YS5tYXgueS1oLnkpOihlPShhLm1heC55LWgueSkqZyxnKj1hLm1pbi55LVxuaC55KTtpZihjPmd8fGU+ZClyZXR1cm4gbnVsbDtpZihlPmN8fGMhPT1jKWM9ZTtpZihnPGR8fGQhPT1kKWQ9ZzswPD1mPyhlPShhLm1pbi56LWgueikqZixmKj1hLm1heC56LWgueik6KGU9KGEubWF4LnotaC56KSpmLGYqPWEubWluLnotaC56KTtpZihjPmZ8fGU+ZClyZXR1cm4gbnVsbDtpZihlPmN8fGMhPT1jKWM9ZTtpZihmPGR8fGQhPT1kKWQ9ZjtyZXR1cm4gMD5kP251bGw6dGhpcy5hdCgwPD1jP2M6ZCxiKX0saW50ZXJzZWN0VHJpYW5nbGU6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuVmVjdG9yMyxiPW5ldyBUSFJFRS5WZWN0b3IzLGM9bmV3IFRIUkVFLlZlY3RvcjMsZD1uZXcgVEhSRUUuVmVjdG9yMztyZXR1cm4gZnVuY3Rpb24oZSxnLGYsaCxsKXtiLnN1YlZlY3RvcnMoZyxlKTtjLnN1YlZlY3RvcnMoZixlKTtkLmNyb3NzVmVjdG9ycyhiLGMpO2c9dGhpcy5kaXJlY3Rpb24uZG90KGQpO2lmKDA8Zyl7aWYoaClyZXR1cm4gbnVsbDtoPTF9ZWxzZSBpZigwPmcpaD0tMSxcbmc9LWc7ZWxzZSByZXR1cm4gbnVsbDthLnN1YlZlY3RvcnModGhpcy5vcmlnaW4sZSk7ZT1oKnRoaXMuZGlyZWN0aW9uLmRvdChjLmNyb3NzVmVjdG9ycyhhLGMpKTtpZigwPmUpcmV0dXJuIG51bGw7Zj1oKnRoaXMuZGlyZWN0aW9uLmRvdChiLmNyb3NzKGEpKTtpZigwPmZ8fGUrZj5nKXJldHVybiBudWxsO2U9LWgqYS5kb3QoZCk7cmV0dXJuIDA+ZT9udWxsOnRoaXMuYXQoZS9nLGwpfX0oKSxhcHBseU1hdHJpeDQ6ZnVuY3Rpb24oYSl7dGhpcy5kaXJlY3Rpb24uYWRkKHRoaXMub3JpZ2luKS5hcHBseU1hdHJpeDQoYSk7dGhpcy5vcmlnaW4uYXBwbHlNYXRyaXg0KGEpO3RoaXMuZGlyZWN0aW9uLnN1Yih0aGlzLm9yaWdpbik7dGhpcy5kaXJlY3Rpb24ubm9ybWFsaXplKCk7cmV0dXJuIHRoaXN9LGVxdWFsczpmdW5jdGlvbihhKXtyZXR1cm4gYS5vcmlnaW4uZXF1YWxzKHRoaXMub3JpZ2luKSYmYS5kaXJlY3Rpb24uZXF1YWxzKHRoaXMuZGlyZWN0aW9uKX19O1xuVEhSRUUuU3BoZXJlPWZ1bmN0aW9uKGEsYil7dGhpcy5jZW50ZXI9dm9pZCAwIT09YT9hOm5ldyBUSFJFRS5WZWN0b3IzO3RoaXMucmFkaXVzPXZvaWQgMCE9PWI/YjowfTtcblRIUkVFLlNwaGVyZS5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOlRIUkVFLlNwaGVyZSxzZXQ6ZnVuY3Rpb24oYSxiKXt0aGlzLmNlbnRlci5jb3B5KGEpO3RoaXMucmFkaXVzPWI7cmV0dXJuIHRoaXN9LHNldEZyb21Qb2ludHM6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuQm94MztyZXR1cm4gZnVuY3Rpb24oYixjKXt2YXIgZD10aGlzLmNlbnRlcjt2b2lkIDAhPT1jP2QuY29weShjKTphLnNldEZyb21Qb2ludHMoYikuY2VudGVyKGQpO2Zvcih2YXIgZT0wLGc9MCxmPWIubGVuZ3RoO2c8ZjtnKyspZT1NYXRoLm1heChlLGQuZGlzdGFuY2VUb1NxdWFyZWQoYltnXSkpO3RoaXMucmFkaXVzPU1hdGguc3FydChlKTtyZXR1cm4gdGhpc319KCksY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4obmV3IHRoaXMuY29uc3RydWN0b3IpLmNvcHkodGhpcyl9LGNvcHk6ZnVuY3Rpb24oYSl7dGhpcy5jZW50ZXIuY29weShhLmNlbnRlcik7dGhpcy5yYWRpdXM9YS5yYWRpdXM7cmV0dXJuIHRoaXN9LFxuZW1wdHk6ZnVuY3Rpb24oKXtyZXR1cm4gMD49dGhpcy5yYWRpdXN9LGNvbnRhaW5zUG9pbnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEuZGlzdGFuY2VUb1NxdWFyZWQodGhpcy5jZW50ZXIpPD10aGlzLnJhZGl1cyp0aGlzLnJhZGl1c30sZGlzdGFuY2VUb1BvaW50OmZ1bmN0aW9uKGEpe3JldHVybiBhLmRpc3RhbmNlVG8odGhpcy5jZW50ZXIpLXRoaXMucmFkaXVzfSxpbnRlcnNlY3RzU3BoZXJlOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMucmFkaXVzK2EucmFkaXVzO3JldHVybiBhLmNlbnRlci5kaXN0YW5jZVRvU3F1YXJlZCh0aGlzLmNlbnRlcik8PWIqYn0sY2xhbXBQb2ludDpmdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuY2VudGVyLmRpc3RhbmNlVG9TcXVhcmVkKGEpLGQ9Ynx8bmV3IFRIUkVFLlZlY3RvcjM7ZC5jb3B5KGEpO2M+dGhpcy5yYWRpdXMqdGhpcy5yYWRpdXMmJihkLnN1Yih0aGlzLmNlbnRlcikubm9ybWFsaXplKCksZC5tdWx0aXBseVNjYWxhcih0aGlzLnJhZGl1cykuYWRkKHRoaXMuY2VudGVyKSk7XG5yZXR1cm4gZH0sZ2V0Qm91bmRpbmdCb3g6ZnVuY3Rpb24oYSl7YT1hfHxuZXcgVEhSRUUuQm94MzthLnNldCh0aGlzLmNlbnRlcix0aGlzLmNlbnRlcik7YS5leHBhbmRCeVNjYWxhcih0aGlzLnJhZGl1cyk7cmV0dXJuIGF9LGFwcGx5TWF0cml4NDpmdW5jdGlvbihhKXt0aGlzLmNlbnRlci5hcHBseU1hdHJpeDQoYSk7dGhpcy5yYWRpdXMqPWEuZ2V0TWF4U2NhbGVPbkF4aXMoKTtyZXR1cm4gdGhpc30sdHJhbnNsYXRlOmZ1bmN0aW9uKGEpe3RoaXMuY2VudGVyLmFkZChhKTtyZXR1cm4gdGhpc30sZXF1YWxzOmZ1bmN0aW9uKGEpe3JldHVybiBhLmNlbnRlci5lcXVhbHModGhpcy5jZW50ZXIpJiZhLnJhZGl1cz09PXRoaXMucmFkaXVzfX07XG5USFJFRS5GcnVzdHVtPWZ1bmN0aW9uKGEsYixjLGQsZSxnKXt0aGlzLnBsYW5lcz1bdm9pZCAwIT09YT9hOm5ldyBUSFJFRS5QbGFuZSx2b2lkIDAhPT1iP2I6bmV3IFRIUkVFLlBsYW5lLHZvaWQgMCE9PWM/YzpuZXcgVEhSRUUuUGxhbmUsdm9pZCAwIT09ZD9kOm5ldyBUSFJFRS5QbGFuZSx2b2lkIDAhPT1lP2U6bmV3IFRIUkVFLlBsYW5lLHZvaWQgMCE9PWc/ZzpuZXcgVEhSRUUuUGxhbmVdfTtcblRIUkVFLkZydXN0dW0ucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5GcnVzdHVtLHNldDpmdW5jdGlvbihhLGIsYyxkLGUsZyl7dmFyIGY9dGhpcy5wbGFuZXM7ZlswXS5jb3B5KGEpO2ZbMV0uY29weShiKTtmWzJdLmNvcHkoYyk7ZlszXS5jb3B5KGQpO2ZbNF0uY29weShlKTtmWzVdLmNvcHkoZyk7cmV0dXJuIHRoaXN9LGNsb25lOmZ1bmN0aW9uKCl7cmV0dXJuKG5ldyB0aGlzLmNvbnN0cnVjdG9yKS5jb3B5KHRoaXMpfSxjb3B5OmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj10aGlzLnBsYW5lcyxjPTA7Nj5jO2MrKyliW2NdLmNvcHkoYS5wbGFuZXNbY10pO3JldHVybiB0aGlzfSxzZXRGcm9tTWF0cml4OmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMucGxhbmVzLGM9YS5lbGVtZW50czthPWNbMF07dmFyIGQ9Y1sxXSxlPWNbMl0sZz1jWzNdLGY9Y1s0XSxoPWNbNV0sbD1jWzZdLGs9Y1s3XSxtPWNbOF0scD1jWzldLG49Y1sxMF0scT1jWzExXSxzPWNbMTJdLHQ9Y1sxM10sdj1jWzE0XSxcbmM9Y1sxNV07YlswXS5zZXRDb21wb25lbnRzKGctYSxrLWYscS1tLGMtcykubm9ybWFsaXplKCk7YlsxXS5zZXRDb21wb25lbnRzKGcrYSxrK2YscSttLGMrcykubm9ybWFsaXplKCk7YlsyXS5zZXRDb21wb25lbnRzKGcrZCxrK2gscStwLGMrdCkubm9ybWFsaXplKCk7YlszXS5zZXRDb21wb25lbnRzKGctZCxrLWgscS1wLGMtdCkubm9ybWFsaXplKCk7Yls0XS5zZXRDb21wb25lbnRzKGctZSxrLWwscS1uLGMtdikubm9ybWFsaXplKCk7Yls1XS5zZXRDb21wb25lbnRzKGcrZSxrK2wscStuLGMrdikubm9ybWFsaXplKCk7cmV0dXJuIHRoaXN9LGludGVyc2VjdHNPYmplY3Q6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuU3BoZXJlO3JldHVybiBmdW5jdGlvbihiKXt2YXIgYz1iLmdlb21ldHJ5O251bGw9PT1jLmJvdW5kaW5nU3BoZXJlJiZjLmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO2EuY29weShjLmJvdW5kaW5nU3BoZXJlKTthLmFwcGx5TWF0cml4NChiLm1hdHJpeFdvcmxkKTtcbnJldHVybiB0aGlzLmludGVyc2VjdHNTcGhlcmUoYSl9fSgpLGludGVyc2VjdHNTcGhlcmU6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5wbGFuZXMsYz1hLmNlbnRlcjthPS1hLnJhZGl1cztmb3IodmFyIGQ9MDs2PmQ7ZCsrKWlmKGJbZF0uZGlzdGFuY2VUb1BvaW50KGMpPGEpcmV0dXJuITE7cmV0dXJuITB9LGludGVyc2VjdHNCb3g6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuVmVjdG9yMyxiPW5ldyBUSFJFRS5WZWN0b3IzO3JldHVybiBmdW5jdGlvbihjKXtmb3IodmFyIGQ9dGhpcy5wbGFuZXMsZT0wOzY+ZTtlKyspe3ZhciBnPWRbZV07YS54PTA8Zy5ub3JtYWwueD9jLm1pbi54OmMubWF4Lng7Yi54PTA8Zy5ub3JtYWwueD9jLm1heC54OmMubWluLng7YS55PTA8Zy5ub3JtYWwueT9jLm1pbi55OmMubWF4Lnk7Yi55PTA8Zy5ub3JtYWwueT9jLm1heC55OmMubWluLnk7YS56PTA8Zy5ub3JtYWwuej9jLm1pbi56OmMubWF4Lno7Yi56PTA8Zy5ub3JtYWwuej9jLm1heC56OmMubWluLno7XG52YXIgZj1nLmRpc3RhbmNlVG9Qb2ludChhKSxnPWcuZGlzdGFuY2VUb1BvaW50KGIpO2lmKDA+ZiYmMD5nKXJldHVybiExfXJldHVybiEwfX0oKSxjb250YWluc1BvaW50OmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj10aGlzLnBsYW5lcyxjPTA7Nj5jO2MrKylpZigwPmJbY10uZGlzdGFuY2VUb1BvaW50KGEpKXJldHVybiExO3JldHVybiEwfX07VEhSRUUuUGxhbmU9ZnVuY3Rpb24oYSxiKXt0aGlzLm5vcm1hbD12b2lkIDAhPT1hP2E6bmV3IFRIUkVFLlZlY3RvcjMoMSwwLDApO3RoaXMuY29uc3RhbnQ9dm9pZCAwIT09Yj9iOjB9O1xuVEhSRUUuUGxhbmUucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5QbGFuZSxzZXQ6ZnVuY3Rpb24oYSxiKXt0aGlzLm5vcm1hbC5jb3B5KGEpO3RoaXMuY29uc3RhbnQ9YjtyZXR1cm4gdGhpc30sc2V0Q29tcG9uZW50czpmdW5jdGlvbihhLGIsYyxkKXt0aGlzLm5vcm1hbC5zZXQoYSxiLGMpO3RoaXMuY29uc3RhbnQ9ZDtyZXR1cm4gdGhpc30sc2V0RnJvbU5vcm1hbEFuZENvcGxhbmFyUG9pbnQ6ZnVuY3Rpb24oYSxiKXt0aGlzLm5vcm1hbC5jb3B5KGEpO3RoaXMuY29uc3RhbnQ9LWIuZG90KHRoaXMubm9ybWFsKTtyZXR1cm4gdGhpc30sc2V0RnJvbUNvcGxhbmFyUG9pbnRzOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlZlY3RvcjMsYj1uZXcgVEhSRUUuVmVjdG9yMztyZXR1cm4gZnVuY3Rpb24oYyxkLGUpe2Q9YS5zdWJWZWN0b3JzKGUsZCkuY3Jvc3MoYi5zdWJWZWN0b3JzKGMsZCkpLm5vcm1hbGl6ZSgpO3RoaXMuc2V0RnJvbU5vcm1hbEFuZENvcGxhbmFyUG9pbnQoZCxcbmMpO3JldHVybiB0aGlzfX0oKSxjbG9uZTpmdW5jdGlvbigpe3JldHVybihuZXcgdGhpcy5jb25zdHJ1Y3RvcikuY29weSh0aGlzKX0sY29weTpmdW5jdGlvbihhKXt0aGlzLm5vcm1hbC5jb3B5KGEubm9ybWFsKTt0aGlzLmNvbnN0YW50PWEuY29uc3RhbnQ7cmV0dXJuIHRoaXN9LG5vcm1hbGl6ZTpmdW5jdGlvbigpe3ZhciBhPTEvdGhpcy5ub3JtYWwubGVuZ3RoKCk7dGhpcy5ub3JtYWwubXVsdGlwbHlTY2FsYXIoYSk7dGhpcy5jb25zdGFudCo9YTtyZXR1cm4gdGhpc30sbmVnYXRlOmZ1bmN0aW9uKCl7dGhpcy5jb25zdGFudCo9LTE7dGhpcy5ub3JtYWwubmVnYXRlKCk7cmV0dXJuIHRoaXN9LGRpc3RhbmNlVG9Qb2ludDpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5ub3JtYWwuZG90KGEpK3RoaXMuY29uc3RhbnR9LGRpc3RhbmNlVG9TcGhlcmU6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuZGlzdGFuY2VUb1BvaW50KGEuY2VudGVyKS1hLnJhZGl1c30scHJvamVjdFBvaW50OmZ1bmN0aW9uKGEsXG5iKXtyZXR1cm4gdGhpcy5vcnRob1BvaW50KGEsYikuc3ViKGEpLm5lZ2F0ZSgpfSxvcnRob1BvaW50OmZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5kaXN0YW5jZVRvUG9pbnQoYSk7cmV0dXJuKGJ8fG5ldyBUSFJFRS5WZWN0b3IzKS5jb3B5KHRoaXMubm9ybWFsKS5tdWx0aXBseVNjYWxhcihjKX0saXNJbnRlcnNlY3Rpb25MaW5lOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuZGlzdGFuY2VUb1BvaW50KGEuc3RhcnQpO2E9dGhpcy5kaXN0YW5jZVRvUG9pbnQoYS5lbmQpO3JldHVybiAwPmImJjA8YXx8MD5hJiYwPGJ9LGludGVyc2VjdExpbmU6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuVmVjdG9yMztyZXR1cm4gZnVuY3Rpb24oYixjKXt2YXIgZD1jfHxuZXcgVEhSRUUuVmVjdG9yMyxlPWIuZGVsdGEoYSksZz10aGlzLm5vcm1hbC5kb3QoZSk7aWYoMD09PWcpe2lmKDA9PT10aGlzLmRpc3RhbmNlVG9Qb2ludChiLnN0YXJ0KSlyZXR1cm4gZC5jb3B5KGIuc3RhcnQpfWVsc2UgcmV0dXJuIGc9XG4tKGIuc3RhcnQuZG90KHRoaXMubm9ybWFsKSt0aGlzLmNvbnN0YW50KS9nLDA+Z3x8MTxnP3ZvaWQgMDpkLmNvcHkoZSkubXVsdGlwbHlTY2FsYXIoZykuYWRkKGIuc3RhcnQpfX0oKSxjb3BsYW5hclBvaW50OmZ1bmN0aW9uKGEpe3JldHVybihhfHxuZXcgVEhSRUUuVmVjdG9yMykuY29weSh0aGlzLm5vcm1hbCkubXVsdGlwbHlTY2FsYXIoLXRoaXMuY29uc3RhbnQpfSxhcHBseU1hdHJpeDQ6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuVmVjdG9yMyxiPW5ldyBUSFJFRS5WZWN0b3IzLGM9bmV3IFRIUkVFLk1hdHJpeDM7cmV0dXJuIGZ1bmN0aW9uKGQsZSl7dmFyIGc9ZXx8Yy5nZXROb3JtYWxNYXRyaXgoZCksZz1hLmNvcHkodGhpcy5ub3JtYWwpLmFwcGx5TWF0cml4MyhnKSxmPXRoaXMuY29wbGFuYXJQb2ludChiKTtmLmFwcGx5TWF0cml4NChkKTt0aGlzLnNldEZyb21Ob3JtYWxBbmRDb3BsYW5hclBvaW50KGcsZik7cmV0dXJuIHRoaXN9fSgpLHRyYW5zbGF0ZTpmdW5jdGlvbihhKXt0aGlzLmNvbnN0YW50LT1cbmEuZG90KHRoaXMubm9ybWFsKTtyZXR1cm4gdGhpc30sZXF1YWxzOmZ1bmN0aW9uKGEpe3JldHVybiBhLm5vcm1hbC5lcXVhbHModGhpcy5ub3JtYWwpJiZhLmNvbnN0YW50PT09dGhpcy5jb25zdGFudH19O1xuVEhSRUUuTWF0aD17Z2VuZXJhdGVVVUlEOmZ1bmN0aW9uKCl7dmFyIGE9XCIwMTIzNDU2Nzg5QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5elwiLnNwbGl0KFwiXCIpLGI9QXJyYXkoMzYpLGM9MCxkO3JldHVybiBmdW5jdGlvbigpe2Zvcih2YXIgZT0wOzM2PmU7ZSsrKTg9PT1lfHwxMz09PWV8fDE4PT09ZXx8MjM9PT1lP2JbZV09XCItXCI6MTQ9PT1lP2JbZV09XCI0XCI6KDI+PWMmJihjPTMzNTU0NDMyKzE2Nzc3MjE2Kk1hdGgucmFuZG9tKCl8MCksZD1jJjE1LGM+Pj00LGJbZV09YVsxOT09PWU/ZCYzfDg6ZF0pO3JldHVybiBiLmpvaW4oXCJcIil9fSgpLGNsYW1wOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gTWF0aC5tYXgoYixNYXRoLm1pbihjLGEpKX0sZXVjbGlkZWFuTW9kdWxvOmZ1bmN0aW9uKGEsYil7cmV0dXJuKGElYitiKSVifSxtYXBMaW5lYXI6ZnVuY3Rpb24oYSxiLGMsZCxlKXtyZXR1cm4gZCsoYS1iKSooZS1kKS8oYy1iKX0sc21vb3Roc3RlcDpmdW5jdGlvbihhLFxuYixjKXtpZihhPD1iKXJldHVybiAwO2lmKGE+PWMpcmV0dXJuIDE7YT0oYS1iKS8oYy1iKTtyZXR1cm4gYSphKigzLTIqYSl9LHNtb290aGVyc3RlcDpmdW5jdGlvbihhLGIsYyl7aWYoYTw9YilyZXR1cm4gMDtpZihhPj1jKXJldHVybiAxO2E9KGEtYikvKGMtYik7cmV0dXJuIGEqYSphKihhKig2KmEtMTUpKzEwKX0scmFuZG9tMTY6ZnVuY3Rpb24oKXtyZXR1cm4oNjUyODAqTWF0aC5yYW5kb20oKSsyNTUqTWF0aC5yYW5kb20oKSkvNjU1MzV9LHJhbmRJbnQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYStNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqKGItYSsxKSl9LHJhbmRGbG9hdDpmdW5jdGlvbihhLGIpe3JldHVybiBhK01hdGgucmFuZG9tKCkqKGItYSl9LHJhbmRGbG9hdFNwcmVhZDpmdW5jdGlvbihhKXtyZXR1cm4gYSooLjUtTWF0aC5yYW5kb20oKSl9LGRlZ1RvUmFkOmZ1bmN0aW9uKCl7dmFyIGE9TWF0aC5QSS8xODA7cmV0dXJuIGZ1bmN0aW9uKGIpe3JldHVybiBiKmF9fSgpLFxucmFkVG9EZWc6ZnVuY3Rpb24oKXt2YXIgYT0xODAvTWF0aC5QSTtyZXR1cm4gZnVuY3Rpb24oYil7cmV0dXJuIGIqYX19KCksaXNQb3dlck9mVHdvOmZ1bmN0aW9uKGEpe3JldHVybiAwPT09KGEmYS0xKSYmMCE9PWF9LG5lYXJlc3RQb3dlck9mVHdvOmZ1bmN0aW9uKGEpe3JldHVybiBNYXRoLnBvdygyLE1hdGgucm91bmQoTWF0aC5sb2coYSkvTWF0aC5MTjIpKX0sbmV4dFBvd2VyT2ZUd286ZnVuY3Rpb24oYSl7YS0tO2F8PWE+PjE7YXw9YT4+MjthfD1hPj40O2F8PWE+Pjg7YXw9YT4+MTY7YSsrO3JldHVybiBhfX07XG5USFJFRS5TcGxpbmU9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYihhLGIsYyxkLGUsZyxmKXthPS41KihjLWEpO2Q9LjUqKGQtYik7cmV0dXJuKDIqKGItYykrYStkKSpmKygtMyooYi1jKS0yKmEtZCkqZythKmUrYn10aGlzLnBvaW50cz1hO3ZhciBjPVtdLGQ9e3g6MCx5OjAsejowfSxlLGcsZixoLGwsayxtLHAsbjt0aGlzLmluaXRGcm9tQXJyYXk9ZnVuY3Rpb24oYSl7dGhpcy5wb2ludHM9W107Zm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspdGhpcy5wb2ludHNbYl09e3g6YVtiXVswXSx5OmFbYl1bMV0sejphW2JdWzJdfX07dGhpcy5nZXRQb2ludD1mdW5jdGlvbihhKXtlPSh0aGlzLnBvaW50cy5sZW5ndGgtMSkqYTtnPU1hdGguZmxvb3IoZSk7Zj1lLWc7Y1swXT0wPT09Zz9nOmctMTtjWzFdPWc7Y1syXT1nPnRoaXMucG9pbnRzLmxlbmd0aC0yP3RoaXMucG9pbnRzLmxlbmd0aC0xOmcrMTtjWzNdPWc+dGhpcy5wb2ludHMubGVuZ3RoLTM/dGhpcy5wb2ludHMubGVuZ3RoLTE6ZytcbjI7az10aGlzLnBvaW50c1tjWzBdXTttPXRoaXMucG9pbnRzW2NbMV1dO3A9dGhpcy5wb2ludHNbY1syXV07bj10aGlzLnBvaW50c1tjWzNdXTtoPWYqZjtsPWYqaDtkLng9YihrLngsbS54LHAueCxuLngsZixoLGwpO2QueT1iKGsueSxtLnkscC55LG4ueSxmLGgsbCk7ZC56PWIoay56LG0ueixwLnosbi56LGYsaCxsKTtyZXR1cm4gZH07dGhpcy5nZXRDb250cm9sUG9pbnRzQXJyYXk9ZnVuY3Rpb24oKXt2YXIgYSxiLGM9dGhpcy5wb2ludHMubGVuZ3RoLGQ9W107Zm9yKGE9MDthPGM7YSsrKWI9dGhpcy5wb2ludHNbYV0sZFthXT1bYi54LGIueSxiLnpdO3JldHVybiBkfTt0aGlzLmdldExlbmd0aD1mdW5jdGlvbihhKXt2YXIgYixjLGQsZT1iPWI9MCxnPW5ldyBUSFJFRS5WZWN0b3IzLGY9bmV3IFRIUkVFLlZlY3RvcjMsaD1bXSxsPTA7aFswXT0wO2F8fChhPTEwMCk7Yz10aGlzLnBvaW50cy5sZW5ndGgqYTtnLmNvcHkodGhpcy5wb2ludHNbMF0pO2ZvcihhPTE7YTxjO2ErKyliPVxuYS9jLGQ9dGhpcy5nZXRQb2ludChiKSxmLmNvcHkoZCksbCs9Zi5kaXN0YW5jZVRvKGcpLGcuY29weShkKSxiKj10aGlzLnBvaW50cy5sZW5ndGgtMSxiPU1hdGguZmxvb3IoYiksYiE9PWUmJihoW2JdPWwsZT1iKTtoW2gubGVuZ3RoXT1sO3JldHVybntjaHVua3M6aCx0b3RhbDpsfX07dGhpcy5yZXBhcmFtZXRyaXplQnlBcmNMZW5ndGg9ZnVuY3Rpb24oYSl7dmFyIGIsYyxkLGUsZyxmLGg9W10sbD1uZXcgVEhSRUUuVmVjdG9yMyxrPXRoaXMuZ2V0TGVuZ3RoKCk7aC5wdXNoKGwuY29weSh0aGlzLnBvaW50c1swXSkuY2xvbmUoKSk7Zm9yKGI9MTtiPHRoaXMucG9pbnRzLmxlbmd0aDtiKyspe2M9ay5jaHVua3NbYl0tay5jaHVua3NbYi0xXTtmPU1hdGguY2VpbChhKmMvay50b3RhbCk7ZT0oYi0xKS8odGhpcy5wb2ludHMubGVuZ3RoLTEpO2c9Yi8odGhpcy5wb2ludHMubGVuZ3RoLTEpO2ZvcihjPTE7YzxmLTE7YysrKWQ9ZSsxL2YqYyooZy1lKSxkPXRoaXMuZ2V0UG9pbnQoZCksXG5oLnB1c2gobC5jb3B5KGQpLmNsb25lKCkpO2gucHVzaChsLmNvcHkodGhpcy5wb2ludHNbYl0pLmNsb25lKCkpfXRoaXMucG9pbnRzPWh9fTtUSFJFRS5UcmlhbmdsZT1mdW5jdGlvbihhLGIsYyl7dGhpcy5hPXZvaWQgMCE9PWE/YTpuZXcgVEhSRUUuVmVjdG9yMzt0aGlzLmI9dm9pZCAwIT09Yj9iOm5ldyBUSFJFRS5WZWN0b3IzO3RoaXMuYz12b2lkIDAhPT1jP2M6bmV3IFRIUkVFLlZlY3RvcjN9O1RIUkVFLlRyaWFuZ2xlLm5vcm1hbD1mdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5WZWN0b3IzO3JldHVybiBmdW5jdGlvbihiLGMsZCxlKXtlPWV8fG5ldyBUSFJFRS5WZWN0b3IzO2Uuc3ViVmVjdG9ycyhkLGMpO2Euc3ViVmVjdG9ycyhiLGMpO2UuY3Jvc3MoYSk7Yj1lLmxlbmd0aFNxKCk7cmV0dXJuIDA8Yj9lLm11bHRpcGx5U2NhbGFyKDEvTWF0aC5zcXJ0KGIpKTplLnNldCgwLDAsMCl9fSgpO1xuVEhSRUUuVHJpYW5nbGUuYmFyeWNvb3JkRnJvbVBvaW50PWZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlZlY3RvcjMsYj1uZXcgVEhSRUUuVmVjdG9yMyxjPW5ldyBUSFJFRS5WZWN0b3IzO3JldHVybiBmdW5jdGlvbihkLGUsZyxmLGgpe2Euc3ViVmVjdG9ycyhmLGUpO2Iuc3ViVmVjdG9ycyhnLGUpO2Muc3ViVmVjdG9ycyhkLGUpO2Q9YS5kb3QoYSk7ZT1hLmRvdChiKTtnPWEuZG90KGMpO3ZhciBsPWIuZG90KGIpO2Y9Yi5kb3QoYyk7dmFyIGs9ZCpsLWUqZTtoPWh8fG5ldyBUSFJFRS5WZWN0b3IzO2lmKDA9PT1rKXJldHVybiBoLnNldCgtMiwtMSwtMSk7az0xL2s7bD0obCpnLWUqZikqaztkPShkKmYtZSpnKSprO3JldHVybiBoLnNldCgxLWwtZCxkLGwpfX0oKTtcblRIUkVFLlRyaWFuZ2xlLmNvbnRhaW5zUG9pbnQ9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuVmVjdG9yMztyZXR1cm4gZnVuY3Rpb24oYixjLGQsZSl7Yj1USFJFRS5UcmlhbmdsZS5iYXJ5Y29vcmRGcm9tUG9pbnQoYixjLGQsZSxhKTtyZXR1cm4gMDw9Yi54JiYwPD1iLnkmJjE+PWIueCtiLnl9fSgpO1xuVEhSRUUuVHJpYW5nbGUucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5UcmlhbmdsZSxzZXQ6ZnVuY3Rpb24oYSxiLGMpe3RoaXMuYS5jb3B5KGEpO3RoaXMuYi5jb3B5KGIpO3RoaXMuYy5jb3B5KGMpO3JldHVybiB0aGlzfSxzZXRGcm9tUG9pbnRzQW5kSW5kaWNlczpmdW5jdGlvbihhLGIsYyxkKXt0aGlzLmEuY29weShhW2JdKTt0aGlzLmIuY29weShhW2NdKTt0aGlzLmMuY29weShhW2RdKTtyZXR1cm4gdGhpc30sY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4obmV3IHRoaXMuY29uc3RydWN0b3IpLmNvcHkodGhpcyl9LGNvcHk6ZnVuY3Rpb24oYSl7dGhpcy5hLmNvcHkoYS5hKTt0aGlzLmIuY29weShhLmIpO3RoaXMuYy5jb3B5KGEuYyk7cmV0dXJuIHRoaXN9LGFyZWE6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuVmVjdG9yMyxiPW5ldyBUSFJFRS5WZWN0b3IzO3JldHVybiBmdW5jdGlvbigpe2Euc3ViVmVjdG9ycyh0aGlzLmMsdGhpcy5iKTtiLnN1YlZlY3RvcnModGhpcy5hLFxudGhpcy5iKTtyZXR1cm4uNSphLmNyb3NzKGIpLmxlbmd0aCgpfX0oKSxtaWRwb2ludDpmdW5jdGlvbihhKXtyZXR1cm4oYXx8bmV3IFRIUkVFLlZlY3RvcjMpLmFkZFZlY3RvcnModGhpcy5hLHRoaXMuYikuYWRkKHRoaXMuYykubXVsdGlwbHlTY2FsYXIoMS8zKX0sbm9ybWFsOmZ1bmN0aW9uKGEpe3JldHVybiBUSFJFRS5UcmlhbmdsZS5ub3JtYWwodGhpcy5hLHRoaXMuYix0aGlzLmMsYSl9LHBsYW5lOmZ1bmN0aW9uKGEpe3JldHVybihhfHxuZXcgVEhSRUUuUGxhbmUpLnNldEZyb21Db3BsYW5hclBvaW50cyh0aGlzLmEsdGhpcy5iLHRoaXMuYyl9LGJhcnljb29yZEZyb21Qb2ludDpmdW5jdGlvbihhLGIpe3JldHVybiBUSFJFRS5UcmlhbmdsZS5iYXJ5Y29vcmRGcm9tUG9pbnQoYSx0aGlzLmEsdGhpcy5iLHRoaXMuYyxiKX0sY29udGFpbnNQb2ludDpmdW5jdGlvbihhKXtyZXR1cm4gVEhSRUUuVHJpYW5nbGUuY29udGFpbnNQb2ludChhLHRoaXMuYSx0aGlzLmIsdGhpcy5jKX0sXG5lcXVhbHM6ZnVuY3Rpb24oYSl7cmV0dXJuIGEuYS5lcXVhbHModGhpcy5hKSYmYS5iLmVxdWFscyh0aGlzLmIpJiZhLmMuZXF1YWxzKHRoaXMuYyl9fTtUSFJFRS5DaGFubmVscz1mdW5jdGlvbigpe3RoaXMubWFzaz0xfTtUSFJFRS5DaGFubmVscy5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOlRIUkVFLkNoYW5uZWxzLHNldDpmdW5jdGlvbihhKXt0aGlzLm1hc2s9MTw8YX0sZW5hYmxlOmZ1bmN0aW9uKGEpe3RoaXMubWFza3w9MTw8YX0sdG9nZ2xlOmZ1bmN0aW9uKGEpe3RoaXMubWFza149MTw8YX0sZGlzYWJsZTpmdW5jdGlvbihhKXt0aGlzLm1hc2smPX4oMTw8YSl9fTtUSFJFRS5DbG9jaz1mdW5jdGlvbihhKXt0aGlzLmF1dG9TdGFydD12b2lkIDAhPT1hP2E6ITA7dGhpcy5lbGFwc2VkVGltZT10aGlzLm9sZFRpbWU9dGhpcy5zdGFydFRpbWU9MDt0aGlzLnJ1bm5pbmc9ITF9O1xuVEhSRUUuQ2xvY2sucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5DbG9jayxzdGFydDpmdW5jdGlvbigpe3RoaXMub2xkVGltZT10aGlzLnN0YXJ0VGltZT1zZWxmLnBlcmZvcm1hbmNlLm5vdygpO3RoaXMucnVubmluZz0hMH0sc3RvcDpmdW5jdGlvbigpe3RoaXMuZ2V0RWxhcHNlZFRpbWUoKTt0aGlzLnJ1bm5pbmc9ITF9LGdldEVsYXBzZWRUaW1lOmZ1bmN0aW9uKCl7dGhpcy5nZXREZWx0YSgpO3JldHVybiB0aGlzLmVsYXBzZWRUaW1lfSxnZXREZWx0YTpmdW5jdGlvbigpe3ZhciBhPTA7dGhpcy5hdXRvU3RhcnQmJiF0aGlzLnJ1bm5pbmcmJnRoaXMuc3RhcnQoKTtpZih0aGlzLnJ1bm5pbmcpe3ZhciBiPXNlbGYucGVyZm9ybWFuY2Uubm93KCksYT0uMDAxKihiLXRoaXMub2xkVGltZSk7dGhpcy5vbGRUaW1lPWI7dGhpcy5lbGFwc2VkVGltZSs9YX1yZXR1cm4gYX19O1RIUkVFLkV2ZW50RGlzcGF0Y2hlcj1mdW5jdGlvbigpe307XG5USFJFRS5FdmVudERpc3BhdGNoZXIucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5FdmVudERpc3BhdGNoZXIsYXBwbHk6ZnVuY3Rpb24oYSl7YS5hZGRFdmVudExpc3RlbmVyPVRIUkVFLkV2ZW50RGlzcGF0Y2hlci5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lcjthLmhhc0V2ZW50TGlzdGVuZXI9VEhSRUUuRXZlbnREaXNwYXRjaGVyLnByb3RvdHlwZS5oYXNFdmVudExpc3RlbmVyO2EucmVtb3ZlRXZlbnRMaXN0ZW5lcj1USFJFRS5FdmVudERpc3BhdGNoZXIucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXI7YS5kaXNwYXRjaEV2ZW50PVRIUkVFLkV2ZW50RGlzcGF0Y2hlci5wcm90b3R5cGUuZGlzcGF0Y2hFdmVudH0sYWRkRXZlbnRMaXN0ZW5lcjpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PXRoaXMuX2xpc3RlbmVycyYmKHRoaXMuX2xpc3RlbmVycz17fSk7dmFyIGM9dGhpcy5fbGlzdGVuZXJzO3ZvaWQgMD09PWNbYV0mJihjW2FdPVtdKTstMT09PWNbYV0uaW5kZXhPZihiKSYmXG5jW2FdLnB1c2goYil9LGhhc0V2ZW50TGlzdGVuZXI6ZnVuY3Rpb24oYSxiKXtpZih2b2lkIDA9PT10aGlzLl9saXN0ZW5lcnMpcmV0dXJuITE7dmFyIGM9dGhpcy5fbGlzdGVuZXJzO3JldHVybiB2b2lkIDAhPT1jW2FdJiYtMSE9PWNbYV0uaW5kZXhPZihiKT8hMDohMX0scmVtb3ZlRXZlbnRMaXN0ZW5lcjpmdW5jdGlvbihhLGIpe2lmKHZvaWQgMCE9PXRoaXMuX2xpc3RlbmVycyl7dmFyIGM9dGhpcy5fbGlzdGVuZXJzW2FdO2lmKHZvaWQgMCE9PWMpe3ZhciBkPWMuaW5kZXhPZihiKTstMSE9PWQmJmMuc3BsaWNlKGQsMSl9fX0sZGlzcGF0Y2hFdmVudDpmdW5jdGlvbihhKXtpZih2b2lkIDAhPT10aGlzLl9saXN0ZW5lcnMpe3ZhciBiPXRoaXMuX2xpc3RlbmVyc1thLnR5cGVdO2lmKHZvaWQgMCE9PWIpe2EudGFyZ2V0PXRoaXM7Zm9yKHZhciBjPVtdLGQ9Yi5sZW5ndGgsZT0wO2U8ZDtlKyspY1tlXT1iW2VdO2ZvcihlPTA7ZTxkO2UrKyljW2VdLmNhbGwodGhpcyxhKX19fX07XG4oZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYihhLGIpe3JldHVybiBhLmRpc3RhbmNlLWIuZGlzdGFuY2V9ZnVuY3Rpb24gYyhhLGIsZyxmKXtpZighMSE9PWEudmlzaWJsZSYmKGEucmF5Y2FzdChiLGcpLCEwPT09Zikpe2E9YS5jaGlsZHJlbjtmPTA7Zm9yKHZhciBoPWEubGVuZ3RoO2Y8aDtmKyspYyhhW2ZdLGIsZywhMCl9fWEuUmF5Y2FzdGVyPWZ1bmN0aW9uKGIsYyxnLGYpe3RoaXMucmF5PW5ldyBhLlJheShiLGMpO3RoaXMubmVhcj1nfHwwO3RoaXMuZmFyPWZ8fEluZmluaXR5O3RoaXMucGFyYW1zPXtNZXNoOnt9LExpbmU6e30sTE9EOnt9LFBvaW50czp7dGhyZXNob2xkOjF9LFNwcml0ZTp7fX07T2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcy5wYXJhbXMse1BvaW50Q2xvdWQ6e2dldDpmdW5jdGlvbigpe2NvbnNvbGUud2FybihcIlRIUkVFLlJheWNhc3RlcjogcGFyYW1zLlBvaW50Q2xvdWQgaGFzIGJlZW4gcmVuYW1lZCB0byBwYXJhbXMuUG9pbnRzLlwiKTtyZXR1cm4gdGhpcy5Qb2ludHN9fX0pfTtcbmEuUmF5Y2FzdGVyLnByb3RvdHlwZT17Y29uc3RydWN0b3I6YS5SYXljYXN0ZXIsbGluZVByZWNpc2lvbjoxLHNldDpmdW5jdGlvbihhLGIpe3RoaXMucmF5LnNldChhLGIpfSxzZXRGcm9tQ2FtZXJhOmZ1bmN0aW9uKGIsYyl7YyBpbnN0YW5jZW9mIGEuUGVyc3BlY3RpdmVDYW1lcmE/KHRoaXMucmF5Lm9yaWdpbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oYy5tYXRyaXhXb3JsZCksdGhpcy5yYXkuZGlyZWN0aW9uLnNldChiLngsYi55LC41KS51bnByb2plY3QoYykuc3ViKHRoaXMucmF5Lm9yaWdpbikubm9ybWFsaXplKCkpOmMgaW5zdGFuY2VvZiBhLk9ydGhvZ3JhcGhpY0NhbWVyYT8odGhpcy5yYXkub3JpZ2luLnNldChiLngsYi55LC0xKS51bnByb2plY3QoYyksdGhpcy5yYXkuZGlyZWN0aW9uLnNldCgwLDAsLTEpLnRyYW5zZm9ybURpcmVjdGlvbihjLm1hdHJpeFdvcmxkKSk6Y29uc29sZS5lcnJvcihcIlRIUkVFLlJheWNhc3RlcjogVW5zdXBwb3J0ZWQgY2FtZXJhIHR5cGUuXCIpfSxcbmludGVyc2VjdE9iamVjdDpmdW5jdGlvbihhLGUpe3ZhciBnPVtdO2MoYSx0aGlzLGcsZSk7Zy5zb3J0KGIpO3JldHVybiBnfSxpbnRlcnNlY3RPYmplY3RzOmZ1bmN0aW9uKGEsZSl7dmFyIGc9W107aWYoITE9PT1BcnJheS5pc0FycmF5KGEpKXJldHVybiBjb25zb2xlLndhcm4oXCJUSFJFRS5SYXljYXN0ZXIuaW50ZXJzZWN0T2JqZWN0czogb2JqZWN0cyBpcyBub3QgYW4gQXJyYXkuXCIpLGc7Zm9yKHZhciBmPTAsaD1hLmxlbmd0aDtmPGg7ZisrKWMoYVtmXSx0aGlzLGcsZSk7Zy5zb3J0KGIpO3JldHVybiBnfX19KShUSFJFRSk7XG5USFJFRS5PYmplY3QzRD1mdW5jdGlvbigpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiaWRcIix7dmFsdWU6VEhSRUUuT2JqZWN0M0RJZENvdW50Kyt9KTt0aGlzLnV1aWQ9VEhSRUUuTWF0aC5nZW5lcmF0ZVVVSUQoKTt0aGlzLm5hbWU9XCJcIjt0aGlzLnR5cGU9XCJPYmplY3QzRFwiO3RoaXMucGFyZW50PW51bGw7dGhpcy5jaGFubmVscz1uZXcgVEhSRUUuQ2hhbm5lbHM7dGhpcy5jaGlsZHJlbj1bXTt0aGlzLnVwPVRIUkVFLk9iamVjdDNELkRlZmF1bHRVcC5jbG9uZSgpO3ZhciBhPW5ldyBUSFJFRS5WZWN0b3IzLGI9bmV3IFRIUkVFLkV1bGVyLGM9bmV3IFRIUkVFLlF1YXRlcm5pb24sZD1uZXcgVEhSRUUuVmVjdG9yMygxLDEsMSk7Yi5vbkNoYW5nZShmdW5jdGlvbigpe2Muc2V0RnJvbUV1bGVyKGIsITEpfSk7Yy5vbkNoYW5nZShmdW5jdGlvbigpe2Iuc2V0RnJvbVF1YXRlcm5pb24oYyx2b2lkIDAsITEpfSk7T2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcyx7cG9zaXRpb246e2VudW1lcmFibGU6ITAsXG52YWx1ZTphfSxyb3RhdGlvbjp7ZW51bWVyYWJsZTohMCx2YWx1ZTpifSxxdWF0ZXJuaW9uOntlbnVtZXJhYmxlOiEwLHZhbHVlOmN9LHNjYWxlOntlbnVtZXJhYmxlOiEwLHZhbHVlOmR9LG1vZGVsVmlld01hdHJpeDp7dmFsdWU6bmV3IFRIUkVFLk1hdHJpeDR9LG5vcm1hbE1hdHJpeDp7dmFsdWU6bmV3IFRIUkVFLk1hdHJpeDN9fSk7dGhpcy5yb3RhdGlvbkF1dG9VcGRhdGU9ITA7dGhpcy5tYXRyaXg9bmV3IFRIUkVFLk1hdHJpeDQ7dGhpcy5tYXRyaXhXb3JsZD1uZXcgVEhSRUUuTWF0cml4NDt0aGlzLm1hdHJpeEF1dG9VcGRhdGU9VEhSRUUuT2JqZWN0M0QuRGVmYXVsdE1hdHJpeEF1dG9VcGRhdGU7dGhpcy5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlPSExO3RoaXMudmlzaWJsZT0hMDt0aGlzLnJlY2VpdmVTaGFkb3c9dGhpcy5jYXN0U2hhZG93PSExO3RoaXMuZnJ1c3R1bUN1bGxlZD0hMDt0aGlzLnJlbmRlck9yZGVyPTA7dGhpcy51c2VyRGF0YT17fX07XG5USFJFRS5PYmplY3QzRC5EZWZhdWx0VXA9bmV3IFRIUkVFLlZlY3RvcjMoMCwxLDApO1RIUkVFLk9iamVjdDNELkRlZmF1bHRNYXRyaXhBdXRvVXBkYXRlPSEwO1xuVEhSRUUuT2JqZWN0M0QucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5PYmplY3QzRCxnZXQgZXVsZXJPcmRlcigpe2NvbnNvbGUud2FybihcIlRIUkVFLk9iamVjdDNEOiAuZXVsZXJPcmRlciBpcyBub3cgLnJvdGF0aW9uLm9yZGVyLlwiKTtyZXR1cm4gdGhpcy5yb3RhdGlvbi5vcmRlcn0sc2V0IGV1bGVyT3JkZXIoYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuT2JqZWN0M0Q6IC5ldWxlck9yZGVyIGlzIG5vdyAucm90YXRpb24ub3JkZXIuXCIpO3RoaXMucm90YXRpb24ub3JkZXI9YX0sZ2V0IHVzZVF1YXRlcm5pb24oKXtjb25zb2xlLndhcm4oXCJUSFJFRS5PYmplY3QzRDogLnVzZVF1YXRlcm5pb24gaGFzIGJlZW4gcmVtb3ZlZC4gVGhlIGxpYnJhcnkgbm93IHVzZXMgcXVhdGVybmlvbnMgYnkgZGVmYXVsdC5cIil9LHNldCB1c2VRdWF0ZXJuaW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLk9iamVjdDNEOiAudXNlUXVhdGVybmlvbiBoYXMgYmVlbiByZW1vdmVkLiBUaGUgbGlicmFyeSBub3cgdXNlcyBxdWF0ZXJuaW9ucyBieSBkZWZhdWx0LlwiKX0sc2V0IHJlbmRlckRlcHRoKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLk9iamVjdDNEOiAucmVuZGVyRGVwdGggaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIC5yZW5kZXJPcmRlciwgaW5zdGVhZC5cIil9LFxuYXBwbHlNYXRyaXg6ZnVuY3Rpb24oYSl7dGhpcy5tYXRyaXgubXVsdGlwbHlNYXRyaWNlcyhhLHRoaXMubWF0cml4KTt0aGlzLm1hdHJpeC5kZWNvbXBvc2UodGhpcy5wb3NpdGlvbix0aGlzLnF1YXRlcm5pb24sdGhpcy5zY2FsZSl9LHNldFJvdGF0aW9uRnJvbUF4aXNBbmdsZTpmdW5jdGlvbihhLGIpe3RoaXMucXVhdGVybmlvbi5zZXRGcm9tQXhpc0FuZ2xlKGEsYil9LHNldFJvdGF0aW9uRnJvbUV1bGVyOmZ1bmN0aW9uKGEpe3RoaXMucXVhdGVybmlvbi5zZXRGcm9tRXVsZXIoYSwhMCl9LHNldFJvdGF0aW9uRnJvbU1hdHJpeDpmdW5jdGlvbihhKXt0aGlzLnF1YXRlcm5pb24uc2V0RnJvbVJvdGF0aW9uTWF0cml4KGEpfSxzZXRSb3RhdGlvbkZyb21RdWF0ZXJuaW9uOmZ1bmN0aW9uKGEpe3RoaXMucXVhdGVybmlvbi5jb3B5KGEpfSxyb3RhdGVPbkF4aXM6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuUXVhdGVybmlvbjtyZXR1cm4gZnVuY3Rpb24oYixjKXthLnNldEZyb21BeGlzQW5nbGUoYixcbmMpO3RoaXMucXVhdGVybmlvbi5tdWx0aXBseShhKTtyZXR1cm4gdGhpc319KCkscm90YXRlWDpmdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5WZWN0b3IzKDEsMCwwKTtyZXR1cm4gZnVuY3Rpb24oYil7cmV0dXJuIHRoaXMucm90YXRlT25BeGlzKGEsYil9fSgpLHJvdGF0ZVk6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuVmVjdG9yMygwLDEsMCk7cmV0dXJuIGZ1bmN0aW9uKGIpe3JldHVybiB0aGlzLnJvdGF0ZU9uQXhpcyhhLGIpfX0oKSxyb3RhdGVaOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlZlY3RvcjMoMCwwLDEpO3JldHVybiBmdW5jdGlvbihiKXtyZXR1cm4gdGhpcy5yb3RhdGVPbkF4aXMoYSxiKX19KCksdHJhbnNsYXRlT25BeGlzOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlZlY3RvcjM7cmV0dXJuIGZ1bmN0aW9uKGIsYyl7YS5jb3B5KGIpLmFwcGx5UXVhdGVybmlvbih0aGlzLnF1YXRlcm5pb24pO3RoaXMucG9zaXRpb24uYWRkKGEubXVsdGlwbHlTY2FsYXIoYykpO1xucmV0dXJuIHRoaXN9fSgpLHRyYW5zbGF0ZTpmdW5jdGlvbihhLGIpe2NvbnNvbGUud2FybihcIlRIUkVFLk9iamVjdDNEOiAudHJhbnNsYXRlKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIC50cmFuc2xhdGVPbkF4aXMoIGF4aXMsIGRpc3RhbmNlICkgaW5zdGVhZC5cIik7cmV0dXJuIHRoaXMudHJhbnNsYXRlT25BeGlzKGIsYSl9LHRyYW5zbGF0ZVg6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuVmVjdG9yMygxLDAsMCk7cmV0dXJuIGZ1bmN0aW9uKGIpe3JldHVybiB0aGlzLnRyYW5zbGF0ZU9uQXhpcyhhLGIpfX0oKSx0cmFuc2xhdGVZOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlZlY3RvcjMoMCwxLDApO3JldHVybiBmdW5jdGlvbihiKXtyZXR1cm4gdGhpcy50cmFuc2xhdGVPbkF4aXMoYSxiKX19KCksdHJhbnNsYXRlWjpmdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5WZWN0b3IzKDAsMCwxKTtyZXR1cm4gZnVuY3Rpb24oYil7cmV0dXJuIHRoaXMudHJhbnNsYXRlT25BeGlzKGEsXG5iKX19KCksbG9jYWxUb1dvcmxkOmZ1bmN0aW9uKGEpe3JldHVybiBhLmFwcGx5TWF0cml4NCh0aGlzLm1hdHJpeFdvcmxkKX0sd29ybGRUb0xvY2FsOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLk1hdHJpeDQ7cmV0dXJuIGZ1bmN0aW9uKGIpe3JldHVybiBiLmFwcGx5TWF0cml4NChhLmdldEludmVyc2UodGhpcy5tYXRyaXhXb3JsZCkpfX0oKSxsb29rQXQ6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuTWF0cml4NDtyZXR1cm4gZnVuY3Rpb24oYil7YS5sb29rQXQoYix0aGlzLnBvc2l0aW9uLHRoaXMudXApO3RoaXMucXVhdGVybmlvbi5zZXRGcm9tUm90YXRpb25NYXRyaXgoYSl9fSgpLGFkZDpmdW5jdGlvbihhKXtpZigxPGFyZ3VtZW50cy5sZW5ndGgpe2Zvcih2YXIgYj0wO2I8YXJndW1lbnRzLmxlbmd0aDtiKyspdGhpcy5hZGQoYXJndW1lbnRzW2JdKTtyZXR1cm4gdGhpc31pZihhPT09dGhpcylyZXR1cm4gY29uc29sZS5lcnJvcihcIlRIUkVFLk9iamVjdDNELmFkZDogb2JqZWN0IGNhbid0IGJlIGFkZGVkIGFzIGEgY2hpbGQgb2YgaXRzZWxmLlwiLFxuYSksdGhpczthIGluc3RhbmNlb2YgVEhSRUUuT2JqZWN0M0Q/KG51bGwhPT1hLnBhcmVudCYmYS5wYXJlbnQucmVtb3ZlKGEpLGEucGFyZW50PXRoaXMsYS5kaXNwYXRjaEV2ZW50KHt0eXBlOlwiYWRkZWRcIn0pLHRoaXMuY2hpbGRyZW4ucHVzaChhKSk6Y29uc29sZS5lcnJvcihcIlRIUkVFLk9iamVjdDNELmFkZDogb2JqZWN0IG5vdCBhbiBpbnN0YW5jZSBvZiBUSFJFRS5PYmplY3QzRC5cIixhKTtyZXR1cm4gdGhpc30scmVtb3ZlOmZ1bmN0aW9uKGEpe2lmKDE8YXJndW1lbnRzLmxlbmd0aClmb3IodmFyIGI9MDtiPGFyZ3VtZW50cy5sZW5ndGg7YisrKXRoaXMucmVtb3ZlKGFyZ3VtZW50c1tiXSk7Yj10aGlzLmNoaWxkcmVuLmluZGV4T2YoYSk7LTEhPT1iJiYoYS5wYXJlbnQ9bnVsbCxhLmRpc3BhdGNoRXZlbnQoe3R5cGU6XCJyZW1vdmVkXCJ9KSx0aGlzLmNoaWxkcmVuLnNwbGljZShiLDEpKX0sZ2V0Q2hpbGRCeU5hbWU6ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuT2JqZWN0M0Q6IC5nZXRDaGlsZEJ5TmFtZSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdldE9iamVjdEJ5TmFtZSgpLlwiKTtcbnJldHVybiB0aGlzLmdldE9iamVjdEJ5TmFtZShhKX0sZ2V0T2JqZWN0QnlJZDpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5nZXRPYmplY3RCeVByb3BlcnR5KFwiaWRcIixhKX0sZ2V0T2JqZWN0QnlOYW1lOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmdldE9iamVjdEJ5UHJvcGVydHkoXCJuYW1lXCIsYSl9LGdldE9iamVjdEJ5UHJvcGVydHk6ZnVuY3Rpb24oYSxiKXtpZih0aGlzW2FdPT09YilyZXR1cm4gdGhpcztmb3IodmFyIGM9MCxkPXRoaXMuY2hpbGRyZW4ubGVuZ3RoO2M8ZDtjKyspe3ZhciBlPXRoaXMuY2hpbGRyZW5bY10uZ2V0T2JqZWN0QnlQcm9wZXJ0eShhLGIpO2lmKHZvaWQgMCE9PWUpcmV0dXJuIGV9fSxnZXRXb3JsZFBvc2l0aW9uOmZ1bmN0aW9uKGEpe2E9YXx8bmV3IFRIUkVFLlZlY3RvcjM7dGhpcy51cGRhdGVNYXRyaXhXb3JsZCghMCk7cmV0dXJuIGEuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKHRoaXMubWF0cml4V29ybGQpfSxnZXRXb3JsZFF1YXRlcm5pb246ZnVuY3Rpb24oKXt2YXIgYT1cbm5ldyBUSFJFRS5WZWN0b3IzLGI9bmV3IFRIUkVFLlZlY3RvcjM7cmV0dXJuIGZ1bmN0aW9uKGMpe2M9Y3x8bmV3IFRIUkVFLlF1YXRlcm5pb247dGhpcy51cGRhdGVNYXRyaXhXb3JsZCghMCk7dGhpcy5tYXRyaXhXb3JsZC5kZWNvbXBvc2UoYSxjLGIpO3JldHVybiBjfX0oKSxnZXRXb3JsZFJvdGF0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlF1YXRlcm5pb247cmV0dXJuIGZ1bmN0aW9uKGIpe2I9Ynx8bmV3IFRIUkVFLkV1bGVyO3RoaXMuZ2V0V29ybGRRdWF0ZXJuaW9uKGEpO3JldHVybiBiLnNldEZyb21RdWF0ZXJuaW9uKGEsdGhpcy5yb3RhdGlvbi5vcmRlciwhMSl9fSgpLGdldFdvcmxkU2NhbGU6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuVmVjdG9yMyxiPW5ldyBUSFJFRS5RdWF0ZXJuaW9uO3JldHVybiBmdW5jdGlvbihjKXtjPWN8fG5ldyBUSFJFRS5WZWN0b3IzO3RoaXMudXBkYXRlTWF0cml4V29ybGQoITApO3RoaXMubWF0cml4V29ybGQuZGVjb21wb3NlKGEsXG5iLGMpO3JldHVybiBjfX0oKSxnZXRXb3JsZERpcmVjdGlvbjpmdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5RdWF0ZXJuaW9uO3JldHVybiBmdW5jdGlvbihiKXtiPWJ8fG5ldyBUSFJFRS5WZWN0b3IzO3RoaXMuZ2V0V29ybGRRdWF0ZXJuaW9uKGEpO3JldHVybiBiLnNldCgwLDAsMSkuYXBwbHlRdWF0ZXJuaW9uKGEpfX0oKSxyYXljYXN0OmZ1bmN0aW9uKCl7fSx0cmF2ZXJzZTpmdW5jdGlvbihhKXthKHRoaXMpO2Zvcih2YXIgYj10aGlzLmNoaWxkcmVuLGM9MCxkPWIubGVuZ3RoO2M8ZDtjKyspYltjXS50cmF2ZXJzZShhKX0sdHJhdmVyc2VWaXNpYmxlOmZ1bmN0aW9uKGEpe2lmKCExIT09dGhpcy52aXNpYmxlKXthKHRoaXMpO2Zvcih2YXIgYj10aGlzLmNoaWxkcmVuLGM9MCxkPWIubGVuZ3RoO2M8ZDtjKyspYltjXS50cmF2ZXJzZVZpc2libGUoYSl9fSx0cmF2ZXJzZUFuY2VzdG9yczpmdW5jdGlvbihhKXt2YXIgYj10aGlzLnBhcmVudDtudWxsIT09YiYmKGEoYiksYi50cmF2ZXJzZUFuY2VzdG9ycyhhKSl9LFxudXBkYXRlTWF0cml4OmZ1bmN0aW9uKCl7dGhpcy5tYXRyaXguY29tcG9zZSh0aGlzLnBvc2l0aW9uLHRoaXMucXVhdGVybmlvbix0aGlzLnNjYWxlKTt0aGlzLm1hdHJpeFdvcmxkTmVlZHNVcGRhdGU9ITB9LHVwZGF0ZU1hdHJpeFdvcmxkOmZ1bmN0aW9uKGEpeyEwPT09dGhpcy5tYXRyaXhBdXRvVXBkYXRlJiZ0aGlzLnVwZGF0ZU1hdHJpeCgpO2lmKCEwPT09dGhpcy5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlfHwhMD09PWEpbnVsbD09PXRoaXMucGFyZW50P3RoaXMubWF0cml4V29ybGQuY29weSh0aGlzLm1hdHJpeCk6dGhpcy5tYXRyaXhXb3JsZC5tdWx0aXBseU1hdHJpY2VzKHRoaXMucGFyZW50Lm1hdHJpeFdvcmxkLHRoaXMubWF0cml4KSx0aGlzLm1hdHJpeFdvcmxkTmVlZHNVcGRhdGU9ITEsYT0hMDtmb3IodmFyIGI9MCxjPXRoaXMuY2hpbGRyZW4ubGVuZ3RoO2I8YztiKyspdGhpcy5jaGlsZHJlbltiXS51cGRhdGVNYXRyaXhXb3JsZChhKX0sdG9KU09OOmZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoYSl7dmFyIGI9XG5bXSxjO2ZvcihjIGluIGEpe3ZhciBkPWFbY107ZGVsZXRlIGQubWV0YWRhdGE7Yi5wdXNoKGQpfXJldHVybiBifXZhciBjPXZvaWQgMD09PWEsZD17fTtjJiYoYT17Z2VvbWV0cmllczp7fSxtYXRlcmlhbHM6e30sdGV4dHVyZXM6e30saW1hZ2VzOnt9fSxkLm1ldGFkYXRhPXt2ZXJzaW9uOjQuNCx0eXBlOlwiT2JqZWN0XCIsZ2VuZXJhdG9yOlwiT2JqZWN0M0QudG9KU09OXCJ9KTt2YXIgZT17fTtlLnV1aWQ9dGhpcy51dWlkO2UudHlwZT10aGlzLnR5cGU7XCJcIiE9PXRoaXMubmFtZSYmKGUubmFtZT10aGlzLm5hbWUpO1wie31cIiE9PUpTT04uc3RyaW5naWZ5KHRoaXMudXNlckRhdGEpJiYoZS51c2VyRGF0YT10aGlzLnVzZXJEYXRhKTshMD09PXRoaXMuY2FzdFNoYWRvdyYmKGUuY2FzdFNoYWRvdz0hMCk7ITA9PT10aGlzLnJlY2VpdmVTaGFkb3cmJihlLnJlY2VpdmVTaGFkb3c9ITApOyExPT09dGhpcy52aXNpYmxlJiYoZS52aXNpYmxlPSExKTtlLm1hdHJpeD10aGlzLm1hdHJpeC50b0FycmF5KCk7XG52b2lkIDAhPT10aGlzLmdlb21ldHJ5JiYodm9pZCAwPT09YS5nZW9tZXRyaWVzW3RoaXMuZ2VvbWV0cnkudXVpZF0mJihhLmdlb21ldHJpZXNbdGhpcy5nZW9tZXRyeS51dWlkXT10aGlzLmdlb21ldHJ5LnRvSlNPTihhKSksZS5nZW9tZXRyeT10aGlzLmdlb21ldHJ5LnV1aWQpO3ZvaWQgMCE9PXRoaXMubWF0ZXJpYWwmJih2b2lkIDA9PT1hLm1hdGVyaWFsc1t0aGlzLm1hdGVyaWFsLnV1aWRdJiYoYS5tYXRlcmlhbHNbdGhpcy5tYXRlcmlhbC51dWlkXT10aGlzLm1hdGVyaWFsLnRvSlNPTihhKSksZS5tYXRlcmlhbD10aGlzLm1hdGVyaWFsLnV1aWQpO2lmKDA8dGhpcy5jaGlsZHJlbi5sZW5ndGgpe2UuY2hpbGRyZW49W107Zm9yKHZhciBnPTA7Zzx0aGlzLmNoaWxkcmVuLmxlbmd0aDtnKyspZS5jaGlsZHJlbi5wdXNoKHRoaXMuY2hpbGRyZW5bZ10udG9KU09OKGEpLm9iamVjdCl9aWYoYyl7dmFyIGM9YihhLmdlb21ldHJpZXMpLGc9YihhLm1hdGVyaWFscyksZj1iKGEudGV4dHVyZXMpO1xuYT1iKGEuaW1hZ2VzKTswPGMubGVuZ3RoJiYoZC5nZW9tZXRyaWVzPWMpOzA8Zy5sZW5ndGgmJihkLm1hdGVyaWFscz1nKTswPGYubGVuZ3RoJiYoZC50ZXh0dXJlcz1mKTswPGEubGVuZ3RoJiYoZC5pbWFnZXM9YSl9ZC5vYmplY3Q9ZTtyZXR1cm4gZH0sY2xvbmU6ZnVuY3Rpb24oYSl7cmV0dXJuKG5ldyB0aGlzLmNvbnN0cnVjdG9yKS5jb3B5KHRoaXMsYSl9LGNvcHk6ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj0hMCk7dGhpcy5uYW1lPWEubmFtZTt0aGlzLnVwLmNvcHkoYS51cCk7dGhpcy5wb3NpdGlvbi5jb3B5KGEucG9zaXRpb24pO3RoaXMucXVhdGVybmlvbi5jb3B5KGEucXVhdGVybmlvbik7dGhpcy5zY2FsZS5jb3B5KGEuc2NhbGUpO3RoaXMucm90YXRpb25BdXRvVXBkYXRlPWEucm90YXRpb25BdXRvVXBkYXRlO3RoaXMubWF0cml4LmNvcHkoYS5tYXRyaXgpO3RoaXMubWF0cml4V29ybGQuY29weShhLm1hdHJpeFdvcmxkKTt0aGlzLm1hdHJpeEF1dG9VcGRhdGU9XG5hLm1hdHJpeEF1dG9VcGRhdGU7dGhpcy5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlPWEubWF0cml4V29ybGROZWVkc1VwZGF0ZTt0aGlzLnZpc2libGU9YS52aXNpYmxlO3RoaXMuY2FzdFNoYWRvdz1hLmNhc3RTaGFkb3c7dGhpcy5yZWNlaXZlU2hhZG93PWEucmVjZWl2ZVNoYWRvdzt0aGlzLmZydXN0dW1DdWxsZWQ9YS5mcnVzdHVtQ3VsbGVkO3RoaXMucmVuZGVyT3JkZXI9YS5yZW5kZXJPcmRlcjt0aGlzLnVzZXJEYXRhPUpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoYS51c2VyRGF0YSkpO2lmKCEwPT09Yilmb3IodmFyIGM9MDtjPGEuY2hpbGRyZW4ubGVuZ3RoO2MrKyl0aGlzLmFkZChhLmNoaWxkcmVuW2NdLmNsb25lKCkpO3JldHVybiB0aGlzfX07VEhSRUUuRXZlbnREaXNwYXRjaGVyLnByb3RvdHlwZS5hcHBseShUSFJFRS5PYmplY3QzRC5wcm90b3R5cGUpO1RIUkVFLk9iamVjdDNESWRDb3VudD0wO1xuVEhSRUUuRmFjZTM9ZnVuY3Rpb24oYSxiLGMsZCxlLGcpe3RoaXMuYT1hO3RoaXMuYj1iO3RoaXMuYz1jO3RoaXMubm9ybWFsPWQgaW5zdGFuY2VvZiBUSFJFRS5WZWN0b3IzP2Q6bmV3IFRIUkVFLlZlY3RvcjM7dGhpcy52ZXJ0ZXhOb3JtYWxzPUFycmF5LmlzQXJyYXkoZCk/ZDpbXTt0aGlzLmNvbG9yPWUgaW5zdGFuY2VvZiBUSFJFRS5Db2xvcj9lOm5ldyBUSFJFRS5Db2xvcjt0aGlzLnZlcnRleENvbG9ycz1BcnJheS5pc0FycmF5KGUpP2U6W107dGhpcy5tYXRlcmlhbEluZGV4PXZvaWQgMCE9PWc/ZzowfTtcblRIUkVFLkZhY2UzLnByb3RvdHlwZT17Y29uc3RydWN0b3I6VEhSRUUuRmFjZTMsY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4obmV3IHRoaXMuY29uc3RydWN0b3IpLmNvcHkodGhpcyl9LGNvcHk6ZnVuY3Rpb24oYSl7dGhpcy5hPWEuYTt0aGlzLmI9YS5iO3RoaXMuYz1hLmM7dGhpcy5ub3JtYWwuY29weShhLm5vcm1hbCk7dGhpcy5jb2xvci5jb3B5KGEuY29sb3IpO3RoaXMubWF0ZXJpYWxJbmRleD1hLm1hdGVyaWFsSW5kZXg7Zm9yKHZhciBiPTAsYz1hLnZlcnRleE5vcm1hbHMubGVuZ3RoO2I8YztiKyspdGhpcy52ZXJ0ZXhOb3JtYWxzW2JdPWEudmVydGV4Tm9ybWFsc1tiXS5jbG9uZSgpO2I9MDtmb3IoYz1hLnZlcnRleENvbG9ycy5sZW5ndGg7YjxjO2IrKyl0aGlzLnZlcnRleENvbG9yc1tiXT1hLnZlcnRleENvbG9yc1tiXS5jbG9uZSgpO3JldHVybiB0aGlzfX07XG5USFJFRS5GYWNlND1mdW5jdGlvbihhLGIsYyxkLGUsZyxmKXtjb25zb2xlLndhcm4oXCJUSFJFRS5GYWNlNCBoYXMgYmVlbiByZW1vdmVkLiBBIFRIUkVFLkZhY2UzIHdpbGwgYmUgY3JlYXRlZCBpbnN0ZWFkLlwiKTtyZXR1cm4gbmV3IFRIUkVFLkZhY2UzKGEsYixjLGUsZyxmKX07VEhSRUUuQnVmZmVyQXR0cmlidXRlPWZ1bmN0aW9uKGEsYil7dGhpcy51dWlkPVRIUkVFLk1hdGguZ2VuZXJhdGVVVUlEKCk7dGhpcy5hcnJheT1hO3RoaXMuaXRlbVNpemU9Yjt0aGlzLmR5bmFtaWM9ITE7dGhpcy51cGRhdGVSYW5nZT17b2Zmc2V0OjAsY291bnQ6LTF9O3RoaXMudmVyc2lvbj0wfTtcblRIUkVFLkJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOlRIUkVFLkJ1ZmZlckF0dHJpYnV0ZSxnZXQgbGVuZ3RoKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuQnVmZmVyQXR0cmlidXRlOiAubGVuZ3RoIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgLmNvdW50LlwiKTtyZXR1cm4gdGhpcy5hcnJheS5sZW5ndGh9LGdldCBjb3VudCgpe3JldHVybiB0aGlzLmFycmF5Lmxlbmd0aC90aGlzLml0ZW1TaXplfSxzZXQgbmVlZHNVcGRhdGUoYSl7ITA9PT1hJiZ0aGlzLnZlcnNpb24rK30sc2V0RHluYW1pYzpmdW5jdGlvbihhKXt0aGlzLmR5bmFtaWM9YTtyZXR1cm4gdGhpc30sY29weTpmdW5jdGlvbihhKXt0aGlzLmFycmF5PW5ldyBhLmFycmF5LmNvbnN0cnVjdG9yKGEuYXJyYXkpO3RoaXMuaXRlbVNpemU9YS5pdGVtU2l6ZTt0aGlzLmR5bmFtaWM9YS5keW5hbWljO3JldHVybiB0aGlzfSxjb3B5QXQ6ZnVuY3Rpb24oYSxiLGMpe2EqPXRoaXMuaXRlbVNpemU7XG5jKj1iLml0ZW1TaXplO2Zvcih2YXIgZD0wLGU9dGhpcy5pdGVtU2l6ZTtkPGU7ZCsrKXRoaXMuYXJyYXlbYStkXT1iLmFycmF5W2MrZF07cmV0dXJuIHRoaXN9LGNvcHlBcnJheTpmdW5jdGlvbihhKXt0aGlzLmFycmF5LnNldChhKTtyZXR1cm4gdGhpc30sY29weUNvbG9yc0FycmF5OmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj10aGlzLmFycmF5LGM9MCxkPTAsZT1hLmxlbmd0aDtkPGU7ZCsrKXt2YXIgZz1hW2RdO3ZvaWQgMD09PWcmJihjb25zb2xlLndhcm4oXCJUSFJFRS5CdWZmZXJBdHRyaWJ1dGUuY29weUNvbG9yc0FycmF5KCk6IGNvbG9yIGlzIHVuZGVmaW5lZFwiLGQpLGc9bmV3IFRIUkVFLkNvbG9yKTtiW2MrK109Zy5yO2JbYysrXT1nLmc7YltjKytdPWcuYn1yZXR1cm4gdGhpc30sY29weUluZGljZXNBcnJheTpmdW5jdGlvbihhKXtmb3IodmFyIGI9dGhpcy5hcnJheSxjPTAsZD0wLGU9YS5sZW5ndGg7ZDxlO2QrKyl7dmFyIGc9YVtkXTtiW2MrK109Zy5hO2JbYysrXT1nLmI7YltjKytdPVxuZy5jfXJldHVybiB0aGlzfSxjb3B5VmVjdG9yMnNBcnJheTpmdW5jdGlvbihhKXtmb3IodmFyIGI9dGhpcy5hcnJheSxjPTAsZD0wLGU9YS5sZW5ndGg7ZDxlO2QrKyl7dmFyIGc9YVtkXTt2b2lkIDA9PT1nJiYoY29uc29sZS53YXJuKFwiVEhSRUUuQnVmZmVyQXR0cmlidXRlLmNvcHlWZWN0b3Iyc0FycmF5KCk6IHZlY3RvciBpcyB1bmRlZmluZWRcIixkKSxnPW5ldyBUSFJFRS5WZWN0b3IyKTtiW2MrK109Zy54O2JbYysrXT1nLnl9cmV0dXJuIHRoaXN9LGNvcHlWZWN0b3Izc0FycmF5OmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj10aGlzLmFycmF5LGM9MCxkPTAsZT1hLmxlbmd0aDtkPGU7ZCsrKXt2YXIgZz1hW2RdO3ZvaWQgMD09PWcmJihjb25zb2xlLndhcm4oXCJUSFJFRS5CdWZmZXJBdHRyaWJ1dGUuY29weVZlY3RvcjNzQXJyYXkoKTogdmVjdG9yIGlzIHVuZGVmaW5lZFwiLGQpLGc9bmV3IFRIUkVFLlZlY3RvcjMpO2JbYysrXT1nLng7YltjKytdPWcueTtiW2MrK109Zy56fXJldHVybiB0aGlzfSxcbmNvcHlWZWN0b3I0c0FycmF5OmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj10aGlzLmFycmF5LGM9MCxkPTAsZT1hLmxlbmd0aDtkPGU7ZCsrKXt2YXIgZz1hW2RdO3ZvaWQgMD09PWcmJihjb25zb2xlLndhcm4oXCJUSFJFRS5CdWZmZXJBdHRyaWJ1dGUuY29weVZlY3RvcjRzQXJyYXkoKTogdmVjdG9yIGlzIHVuZGVmaW5lZFwiLGQpLGc9bmV3IFRIUkVFLlZlY3RvcjQpO2JbYysrXT1nLng7YltjKytdPWcueTtiW2MrK109Zy56O2JbYysrXT1nLnd9cmV0dXJuIHRoaXN9LHNldDpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPTApO3RoaXMuYXJyYXkuc2V0KGEsYik7cmV0dXJuIHRoaXN9LGdldFg6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuYXJyYXlbYSp0aGlzLml0ZW1TaXplXX0sc2V0WDpmdW5jdGlvbihhLGIpe3RoaXMuYXJyYXlbYSp0aGlzLml0ZW1TaXplXT1iO3JldHVybiB0aGlzfSxnZXRZOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmFycmF5W2EqdGhpcy5pdGVtU2l6ZSsxXX0sXG5zZXRZOmZ1bmN0aW9uKGEsYil7dGhpcy5hcnJheVthKnRoaXMuaXRlbVNpemUrMV09YjtyZXR1cm4gdGhpc30sZ2V0WjpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5hcnJheVthKnRoaXMuaXRlbVNpemUrMl19LHNldFo6ZnVuY3Rpb24oYSxiKXt0aGlzLmFycmF5W2EqdGhpcy5pdGVtU2l6ZSsyXT1iO3JldHVybiB0aGlzfSxnZXRXOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmFycmF5W2EqdGhpcy5pdGVtU2l6ZSszXX0sc2V0VzpmdW5jdGlvbihhLGIpe3RoaXMuYXJyYXlbYSp0aGlzLml0ZW1TaXplKzNdPWI7cmV0dXJuIHRoaXN9LHNldFhZOmZ1bmN0aW9uKGEsYixjKXthKj10aGlzLml0ZW1TaXplO3RoaXMuYXJyYXlbYSswXT1iO3RoaXMuYXJyYXlbYSsxXT1jO3JldHVybiB0aGlzfSxzZXRYWVo6ZnVuY3Rpb24oYSxiLGMsZCl7YSo9dGhpcy5pdGVtU2l6ZTt0aGlzLmFycmF5W2ErMF09Yjt0aGlzLmFycmF5W2ErMV09Yzt0aGlzLmFycmF5W2ErMl09ZDtyZXR1cm4gdGhpc30sc2V0WFlaVzpmdW5jdGlvbihhLFxuYixjLGQsZSl7YSo9dGhpcy5pdGVtU2l6ZTt0aGlzLmFycmF5W2ErMF09Yjt0aGlzLmFycmF5W2ErMV09Yzt0aGlzLmFycmF5W2ErMl09ZDt0aGlzLmFycmF5W2ErM109ZTtyZXR1cm4gdGhpc30sY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4obmV3IHRoaXMuY29uc3RydWN0b3IpLmNvcHkodGhpcyl9fTtUSFJFRS5JbnQ4QXR0cmlidXRlPWZ1bmN0aW9uKGEsYil7cmV0dXJuIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUobmV3IEludDhBcnJheShhKSxiKX07VEhSRUUuVWludDhBdHRyaWJ1dGU9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShuZXcgVWludDhBcnJheShhKSxiKX07VEhSRUUuVWludDhDbGFtcGVkQXR0cmlidXRlPWZ1bmN0aW9uKGEsYil7cmV0dXJuIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUobmV3IFVpbnQ4Q2xhbXBlZEFycmF5KGEpLGIpfTtcblRIUkVFLkludDE2QXR0cmlidXRlPWZ1bmN0aW9uKGEsYil7cmV0dXJuIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUobmV3IEludDE2QXJyYXkoYSksYil9O1RIUkVFLlVpbnQxNkF0dHJpYnV0ZT1mdW5jdGlvbihhLGIpe3JldHVybiBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKG5ldyBVaW50MTZBcnJheShhKSxiKX07VEhSRUUuSW50MzJBdHRyaWJ1dGU9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShuZXcgSW50MzJBcnJheShhKSxiKX07VEhSRUUuVWludDMyQXR0cmlidXRlPWZ1bmN0aW9uKGEsYil7cmV0dXJuIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUobmV3IFVpbnQzMkFycmF5KGEpLGIpfTtUSFJFRS5GbG9hdDMyQXR0cmlidXRlPWZ1bmN0aW9uKGEsYil7cmV0dXJuIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUobmV3IEZsb2F0MzJBcnJheShhKSxiKX07XG5USFJFRS5GbG9hdDY0QXR0cmlidXRlPWZ1bmN0aW9uKGEsYil7cmV0dXJuIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUobmV3IEZsb2F0NjRBcnJheShhKSxiKX07VEhSRUUuRHluYW1pY0J1ZmZlckF0dHJpYnV0ZT1mdW5jdGlvbihhLGIpe2NvbnNvbGUud2FybihcIlRIUkVFLkR5bmFtaWNCdWZmZXJBdHRyaWJ1dGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoKS5zZXREeW5hbWljKCB0cnVlICkgaW5zdGVhZC5cIik7cmV0dXJuKG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoYSxiKSkuc2V0RHluYW1pYyghMCl9O1RIUkVFLkluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZT1mdW5jdGlvbihhLGIsYyl7VEhSRUUuQnVmZmVyQXR0cmlidXRlLmNhbGwodGhpcyxhLGIpO3RoaXMubWVzaFBlckF0dHJpYnV0ZT1jfHwxfTtUSFJFRS5JbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSk7XG5USFJFRS5JbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLkluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZTtUSFJFRS5JbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlLmNvcHk9ZnVuY3Rpb24oYSl7VEhSRUUuQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcyxhKTt0aGlzLm1lc2hQZXJBdHRyaWJ1dGU9YS5tZXNoUGVyQXR0cmlidXRlO3JldHVybiB0aGlzfTtUSFJFRS5JbnRlcmxlYXZlZEJ1ZmZlcj1mdW5jdGlvbihhLGIpe3RoaXMudXVpZD1USFJFRS5NYXRoLmdlbmVyYXRlVVVJRCgpO3RoaXMuYXJyYXk9YTt0aGlzLnN0cmlkZT1iO3RoaXMuZHluYW1pYz0hMTt0aGlzLnVwZGF0ZVJhbmdlPXtvZmZzZXQ6MCxjb3VudDotMX07dGhpcy52ZXJzaW9uPTB9O1xuVEhSRUUuSW50ZXJsZWF2ZWRCdWZmZXIucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5JbnRlcmxlYXZlZEJ1ZmZlcixnZXQgbGVuZ3RoKCl7cmV0dXJuIHRoaXMuYXJyYXkubGVuZ3RofSxnZXQgY291bnQoKXtyZXR1cm4gdGhpcy5hcnJheS5sZW5ndGgvdGhpcy5zdHJpZGV9LHNldCBuZWVkc1VwZGF0ZShhKXshMD09PWEmJnRoaXMudmVyc2lvbisrfSxzZXREeW5hbWljOmZ1bmN0aW9uKGEpe3RoaXMuZHluYW1pYz1hO3JldHVybiB0aGlzfSxjb3B5OmZ1bmN0aW9uKGEpe3RoaXMuYXJyYXk9bmV3IGEuYXJyYXkuY29uc3RydWN0b3IoYS5hcnJheSk7dGhpcy5zdHJpZGU9YS5zdHJpZGU7dGhpcy5keW5hbWljPWEuZHluYW1pY30sY29weUF0OmZ1bmN0aW9uKGEsYixjKXthKj10aGlzLnN0cmlkZTtjKj1iLnN0cmlkZTtmb3IodmFyIGQ9MCxlPXRoaXMuc3RyaWRlO2Q8ZTtkKyspdGhpcy5hcnJheVthK2RdPWIuYXJyYXlbYytkXTtyZXR1cm4gdGhpc30sc2V0OmZ1bmN0aW9uKGEsXG5iKXt2b2lkIDA9PT1iJiYoYj0wKTt0aGlzLmFycmF5LnNldChhLGIpO3JldHVybiB0aGlzfSxjbG9uZTpmdW5jdGlvbigpe3JldHVybihuZXcgdGhpcy5jb25zdHJ1Y3RvcikuY29weSh0aGlzKX19O1RIUkVFLkluc3RhbmNlZEludGVybGVhdmVkQnVmZmVyPWZ1bmN0aW9uKGEsYixjKXtUSFJFRS5JbnRlcmxlYXZlZEJ1ZmZlci5jYWxsKHRoaXMsYSxiKTt0aGlzLm1lc2hQZXJBdHRyaWJ1dGU9Y3x8MX07VEhSRUUuSW5zdGFuY2VkSW50ZXJsZWF2ZWRCdWZmZXIucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuSW50ZXJsZWF2ZWRCdWZmZXIucHJvdG90eXBlKTtUSFJFRS5JbnN0YW5jZWRJbnRlcmxlYXZlZEJ1ZmZlci5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuSW5zdGFuY2VkSW50ZXJsZWF2ZWRCdWZmZXI7XG5USFJFRS5JbnN0YW5jZWRJbnRlcmxlYXZlZEJ1ZmZlci5wcm90b3R5cGUuY29weT1mdW5jdGlvbihhKXtUSFJFRS5JbnRlcmxlYXZlZEJ1ZmZlci5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsYSk7dGhpcy5tZXNoUGVyQXR0cmlidXRlPWEubWVzaFBlckF0dHJpYnV0ZTtyZXR1cm4gdGhpc307VEhSRUUuSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGU9ZnVuY3Rpb24oYSxiLGMpe3RoaXMudXVpZD1USFJFRS5NYXRoLmdlbmVyYXRlVVVJRCgpO3RoaXMuZGF0YT1hO3RoaXMuaXRlbVNpemU9Yjt0aGlzLm9mZnNldD1jfTtcblRIUkVFLkludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZT17Y29uc3RydWN0b3I6VEhSRUUuSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUsZ2V0IGxlbmd0aCgpe2NvbnNvbGUud2FybihcIlRIUkVFLkJ1ZmZlckF0dHJpYnV0ZTogLmxlbmd0aCBoYXMgYmVlbiBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIC5jb3VudC5cIik7cmV0dXJuIHRoaXMuYXJyYXkubGVuZ3RofSxnZXQgY291bnQoKXtyZXR1cm4gdGhpcy5kYXRhLmFycmF5Lmxlbmd0aC90aGlzLmRhdGEuc3RyaWRlfSxzZXRYOmZ1bmN0aW9uKGEsYil7dGhpcy5kYXRhLmFycmF5W2EqdGhpcy5kYXRhLnN0cmlkZSt0aGlzLm9mZnNldF09YjtyZXR1cm4gdGhpc30sc2V0WTpmdW5jdGlvbihhLGIpe3RoaXMuZGF0YS5hcnJheVthKnRoaXMuZGF0YS5zdHJpZGUrdGhpcy5vZmZzZXQrMV09YjtyZXR1cm4gdGhpc30sc2V0WjpmdW5jdGlvbihhLGIpe3RoaXMuZGF0YS5hcnJheVthKnRoaXMuZGF0YS5zdHJpZGUrdGhpcy5vZmZzZXQrXG4yXT1iO3JldHVybiB0aGlzfSxzZXRXOmZ1bmN0aW9uKGEsYil7dGhpcy5kYXRhLmFycmF5W2EqdGhpcy5kYXRhLnN0cmlkZSt0aGlzLm9mZnNldCszXT1iO3JldHVybiB0aGlzfSxnZXRYOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmRhdGEuYXJyYXlbYSp0aGlzLmRhdGEuc3RyaWRlK3RoaXMub2Zmc2V0XX0sZ2V0WTpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5kYXRhLmFycmF5W2EqdGhpcy5kYXRhLnN0cmlkZSt0aGlzLm9mZnNldCsxXX0sZ2V0WjpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5kYXRhLmFycmF5W2EqdGhpcy5kYXRhLnN0cmlkZSt0aGlzLm9mZnNldCsyXX0sZ2V0VzpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5kYXRhLmFycmF5W2EqdGhpcy5kYXRhLnN0cmlkZSt0aGlzLm9mZnNldCszXX0sc2V0WFk6ZnVuY3Rpb24oYSxiLGMpe2E9YSp0aGlzLmRhdGEuc3RyaWRlK3RoaXMub2Zmc2V0O3RoaXMuZGF0YS5hcnJheVthKzBdPWI7dGhpcy5kYXRhLmFycmF5W2ErMV09YztcbnJldHVybiB0aGlzfSxzZXRYWVo6ZnVuY3Rpb24oYSxiLGMsZCl7YT1hKnRoaXMuZGF0YS5zdHJpZGUrdGhpcy5vZmZzZXQ7dGhpcy5kYXRhLmFycmF5W2ErMF09Yjt0aGlzLmRhdGEuYXJyYXlbYSsxXT1jO3RoaXMuZGF0YS5hcnJheVthKzJdPWQ7cmV0dXJuIHRoaXN9LHNldFhZWlc6ZnVuY3Rpb24oYSxiLGMsZCxlKXthPWEqdGhpcy5kYXRhLnN0cmlkZSt0aGlzLm9mZnNldDt0aGlzLmRhdGEuYXJyYXlbYSswXT1iO3RoaXMuZGF0YS5hcnJheVthKzFdPWM7dGhpcy5kYXRhLmFycmF5W2ErMl09ZDt0aGlzLmRhdGEuYXJyYXlbYSszXT1lO3JldHVybiB0aGlzfX07XG5USFJFRS5HZW9tZXRyeT1mdW5jdGlvbigpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiaWRcIix7dmFsdWU6VEhSRUUuR2VvbWV0cnlJZENvdW50Kyt9KTt0aGlzLnV1aWQ9VEhSRUUuTWF0aC5nZW5lcmF0ZVVVSUQoKTt0aGlzLm5hbWU9XCJcIjt0aGlzLnR5cGU9XCJHZW9tZXRyeVwiO3RoaXMudmVydGljZXM9W107dGhpcy5jb2xvcnM9W107dGhpcy5mYWNlcz1bXTt0aGlzLmZhY2VWZXJ0ZXhVdnM9W1tdXTt0aGlzLm1vcnBoVGFyZ2V0cz1bXTt0aGlzLm1vcnBoTm9ybWFscz1bXTt0aGlzLnNraW5XZWlnaHRzPVtdO3RoaXMuc2tpbkluZGljZXM9W107dGhpcy5saW5lRGlzdGFuY2VzPVtdO3RoaXMuYm91bmRpbmdTcGhlcmU9dGhpcy5ib3VuZGluZ0JveD1udWxsO3RoaXMuZ3JvdXBzTmVlZFVwZGF0ZT10aGlzLmxpbmVEaXN0YW5jZXNOZWVkVXBkYXRlPXRoaXMuY29sb3JzTmVlZFVwZGF0ZT10aGlzLm5vcm1hbHNOZWVkVXBkYXRlPXRoaXMudXZzTmVlZFVwZGF0ZT10aGlzLmVsZW1lbnRzTmVlZFVwZGF0ZT1cbnRoaXMudmVydGljZXNOZWVkVXBkYXRlPSExfTtcblRIUkVFLkdlb21ldHJ5LnByb3RvdHlwZT17Y29uc3RydWN0b3I6VEhSRUUuR2VvbWV0cnksYXBwbHlNYXRyaXg6ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPShuZXcgVEhSRUUuTWF0cml4MykuZ2V0Tm9ybWFsTWF0cml4KGEpLGM9MCxkPXRoaXMudmVydGljZXMubGVuZ3RoO2M8ZDtjKyspdGhpcy52ZXJ0aWNlc1tjXS5hcHBseU1hdHJpeDQoYSk7Yz0wO2ZvcihkPXRoaXMuZmFjZXMubGVuZ3RoO2M8ZDtjKyspe2E9dGhpcy5mYWNlc1tjXTthLm5vcm1hbC5hcHBseU1hdHJpeDMoYikubm9ybWFsaXplKCk7Zm9yKHZhciBlPTAsZz1hLnZlcnRleE5vcm1hbHMubGVuZ3RoO2U8ZztlKyspYS52ZXJ0ZXhOb3JtYWxzW2VdLmFwcGx5TWF0cml4MyhiKS5ub3JtYWxpemUoKX1udWxsIT09dGhpcy5ib3VuZGluZ0JveCYmdGhpcy5jb21wdXRlQm91bmRpbmdCb3goKTtudWxsIT09dGhpcy5ib3VuZGluZ1NwaGVyZSYmdGhpcy5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTt0aGlzLm5vcm1hbHNOZWVkVXBkYXRlPVxudGhpcy52ZXJ0aWNlc05lZWRVcGRhdGU9ITB9LHJvdGF0ZVg6ZnVuY3Rpb24oKXt2YXIgYTtyZXR1cm4gZnVuY3Rpb24oYil7dm9pZCAwPT09YSYmKGE9bmV3IFRIUkVFLk1hdHJpeDQpO2EubWFrZVJvdGF0aW9uWChiKTt0aGlzLmFwcGx5TWF0cml4KGEpO3JldHVybiB0aGlzfX0oKSxyb3RhdGVZOmZ1bmN0aW9uKCl7dmFyIGE7cmV0dXJuIGZ1bmN0aW9uKGIpe3ZvaWQgMD09PWEmJihhPW5ldyBUSFJFRS5NYXRyaXg0KTthLm1ha2VSb3RhdGlvblkoYik7dGhpcy5hcHBseU1hdHJpeChhKTtyZXR1cm4gdGhpc319KCkscm90YXRlWjpmdW5jdGlvbigpe3ZhciBhO3JldHVybiBmdW5jdGlvbihiKXt2b2lkIDA9PT1hJiYoYT1uZXcgVEhSRUUuTWF0cml4NCk7YS5tYWtlUm90YXRpb25aKGIpO3RoaXMuYXBwbHlNYXRyaXgoYSk7cmV0dXJuIHRoaXN9fSgpLHRyYW5zbGF0ZTpmdW5jdGlvbigpe3ZhciBhO3JldHVybiBmdW5jdGlvbihiLGMsZCl7dm9pZCAwPT09YSYmKGE9bmV3IFRIUkVFLk1hdHJpeDQpO1xuYS5tYWtlVHJhbnNsYXRpb24oYixjLGQpO3RoaXMuYXBwbHlNYXRyaXgoYSk7cmV0dXJuIHRoaXN9fSgpLHNjYWxlOmZ1bmN0aW9uKCl7dmFyIGE7cmV0dXJuIGZ1bmN0aW9uKGIsYyxkKXt2b2lkIDA9PT1hJiYoYT1uZXcgVEhSRUUuTWF0cml4NCk7YS5tYWtlU2NhbGUoYixjLGQpO3RoaXMuYXBwbHlNYXRyaXgoYSk7cmV0dXJuIHRoaXN9fSgpLGxvb2tBdDpmdW5jdGlvbigpe3ZhciBhO3JldHVybiBmdW5jdGlvbihiKXt2b2lkIDA9PT1hJiYoYT1uZXcgVEhSRUUuT2JqZWN0M0QpO2EubG9va0F0KGIpO2EudXBkYXRlTWF0cml4KCk7dGhpcy5hcHBseU1hdHJpeChhLm1hdHJpeCl9fSgpLGZyb21CdWZmZXJHZW9tZXRyeTpmdW5jdGlvbihhKXtmdW5jdGlvbiBiKGEsYixkKXt2YXIgZT12b2lkIDAhPT1mP1ttW2FdLmNsb25lKCksbVtiXS5jbG9uZSgpLG1bZF0uY2xvbmUoKV06W10sZz12b2lkIDAhPT1oP1tjLmNvbG9yc1thXS5jbG9uZSgpLGMuY29sb3JzW2JdLmNsb25lKCksYy5jb2xvcnNbZF0uY2xvbmUoKV06XG5bXSxlPW5ldyBUSFJFRS5GYWNlMyhhLGIsZCxlLGcpO2MuZmFjZXMucHVzaChlKTt2b2lkIDAhPT1sJiZjLmZhY2VWZXJ0ZXhVdnNbMF0ucHVzaChbcFthXS5jbG9uZSgpLHBbYl0uY2xvbmUoKSxwW2RdLmNsb25lKCldKTt2b2lkIDAhPT1rJiZjLmZhY2VWZXJ0ZXhVdnNbMV0ucHVzaChbblthXS5jbG9uZSgpLG5bYl0uY2xvbmUoKSxuW2RdLmNsb25lKCldKX12YXIgYz10aGlzLGQ9bnVsbCE9PWEuaW5kZXg/YS5pbmRleC5hcnJheTp2b2lkIDAsZT1hLmF0dHJpYnV0ZXMsZz1lLnBvc2l0aW9uLmFycmF5LGY9dm9pZCAwIT09ZS5ub3JtYWw/ZS5ub3JtYWwuYXJyYXk6dm9pZCAwLGg9dm9pZCAwIT09ZS5jb2xvcj9lLmNvbG9yLmFycmF5OnZvaWQgMCxsPXZvaWQgMCE9PWUudXY/ZS51di5hcnJheTp2b2lkIDAsaz12b2lkIDAhPT1lLnV2Mj9lLnV2Mi5hcnJheTp2b2lkIDA7dm9pZCAwIT09ayYmKHRoaXMuZmFjZVZlcnRleFV2c1sxXT1bXSk7Zm9yKHZhciBtPVtdLHA9W10sbj1bXSxcbnE9ZT0wO2U8Zy5sZW5ndGg7ZSs9MyxxKz0yKWMudmVydGljZXMucHVzaChuZXcgVEhSRUUuVmVjdG9yMyhnW2VdLGdbZSsxXSxnW2UrMl0pKSx2b2lkIDAhPT1mJiZtLnB1c2gobmV3IFRIUkVFLlZlY3RvcjMoZltlXSxmW2UrMV0sZltlKzJdKSksdm9pZCAwIT09aCYmYy5jb2xvcnMucHVzaChuZXcgVEhSRUUuQ29sb3IoaFtlXSxoW2UrMV0saFtlKzJdKSksdm9pZCAwIT09bCYmcC5wdXNoKG5ldyBUSFJFRS5WZWN0b3IyKGxbcV0sbFtxKzFdKSksdm9pZCAwIT09ayYmbi5wdXNoKG5ldyBUSFJFRS5WZWN0b3IyKGtbcV0sa1txKzFdKSk7aWYodm9pZCAwIT09ZClpZihnPWEuZ3JvdXBzLDA8Zy5sZW5ndGgpZm9yKGU9MDtlPGcubGVuZ3RoO2UrKylmb3IodmFyIHE9Z1tlXSxzPXEuc3RhcnQsdD1xLmNvdW50LHE9cyxzPXMrdDtxPHM7cSs9MyliKGRbcV0sZFtxKzFdLGRbcSsyXSk7ZWxzZSBmb3IoZT0wO2U8ZC5sZW5ndGg7ZSs9MyliKGRbZV0sZFtlKzFdLGRbZSsyXSk7ZWxzZSBmb3IoZT1cbjA7ZTxnLmxlbmd0aC8zO2UrPTMpYihlLGUrMSxlKzIpO3RoaXMuY29tcHV0ZUZhY2VOb3JtYWxzKCk7bnVsbCE9PWEuYm91bmRpbmdCb3gmJih0aGlzLmJvdW5kaW5nQm94PWEuYm91bmRpbmdCb3guY2xvbmUoKSk7bnVsbCE9PWEuYm91bmRpbmdTcGhlcmUmJih0aGlzLmJvdW5kaW5nU3BoZXJlPWEuYm91bmRpbmdTcGhlcmUuY2xvbmUoKSk7cmV0dXJuIHRoaXN9LGNlbnRlcjpmdW5jdGlvbigpe3RoaXMuY29tcHV0ZUJvdW5kaW5nQm94KCk7dmFyIGE9dGhpcy5ib3VuZGluZ0JveC5jZW50ZXIoKS5uZWdhdGUoKTt0aGlzLnRyYW5zbGF0ZShhLngsYS55LGEueik7cmV0dXJuIGF9LG5vcm1hbGl6ZTpmdW5jdGlvbigpe3RoaXMuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7dmFyIGE9dGhpcy5ib3VuZGluZ1NwaGVyZS5jZW50ZXIsYj10aGlzLmJvdW5kaW5nU3BoZXJlLnJhZGl1cyxiPTA9PT1iPzE6MS9iLGM9bmV3IFRIUkVFLk1hdHJpeDQ7Yy5zZXQoYiwwLDAsLWIqYS54LDAsYiwwLFxuLWIqYS55LDAsMCxiLC1iKmEueiwwLDAsMCwxKTt0aGlzLmFwcGx5TWF0cml4KGMpO3JldHVybiB0aGlzfSxjb21wdXRlRmFjZU5vcm1hbHM6ZnVuY3Rpb24oKXtmb3IodmFyIGE9bmV3IFRIUkVFLlZlY3RvcjMsYj1uZXcgVEhSRUUuVmVjdG9yMyxjPTAsZD10aGlzLmZhY2VzLmxlbmd0aDtjPGQ7YysrKXt2YXIgZT10aGlzLmZhY2VzW2NdLGc9dGhpcy52ZXJ0aWNlc1tlLmFdLGY9dGhpcy52ZXJ0aWNlc1tlLmJdO2Euc3ViVmVjdG9ycyh0aGlzLnZlcnRpY2VzW2UuY10sZik7Yi5zdWJWZWN0b3JzKGcsZik7YS5jcm9zcyhiKTthLm5vcm1hbGl6ZSgpO2Uubm9ybWFsLmNvcHkoYSl9fSxjb21wdXRlVmVydGV4Tm9ybWFsczpmdW5jdGlvbihhKXt2YXIgYixjLGQ7ZD1BcnJheSh0aGlzLnZlcnRpY2VzLmxlbmd0aCk7Yj0wO2ZvcihjPXRoaXMudmVydGljZXMubGVuZ3RoO2I8YztiKyspZFtiXT1uZXcgVEhSRUUuVmVjdG9yMztpZihhKXt2YXIgZSxnLGYsaD1uZXcgVEhSRUUuVmVjdG9yMyxcbmw9bmV3IFRIUkVFLlZlY3RvcjM7YT0wO2ZvcihiPXRoaXMuZmFjZXMubGVuZ3RoO2E8YjthKyspYz10aGlzLmZhY2VzW2FdLGU9dGhpcy52ZXJ0aWNlc1tjLmFdLGc9dGhpcy52ZXJ0aWNlc1tjLmJdLGY9dGhpcy52ZXJ0aWNlc1tjLmNdLGguc3ViVmVjdG9ycyhmLGcpLGwuc3ViVmVjdG9ycyhlLGcpLGguY3Jvc3MobCksZFtjLmFdLmFkZChoKSxkW2MuYl0uYWRkKGgpLGRbYy5jXS5hZGQoaCl9ZWxzZSBmb3IoYT0wLGI9dGhpcy5mYWNlcy5sZW5ndGg7YTxiO2ErKyljPXRoaXMuZmFjZXNbYV0sZFtjLmFdLmFkZChjLm5vcm1hbCksZFtjLmJdLmFkZChjLm5vcm1hbCksZFtjLmNdLmFkZChjLm5vcm1hbCk7Yj0wO2ZvcihjPXRoaXMudmVydGljZXMubGVuZ3RoO2I8YztiKyspZFtiXS5ub3JtYWxpemUoKTthPTA7Zm9yKGI9dGhpcy5mYWNlcy5sZW5ndGg7YTxiO2ErKyljPXRoaXMuZmFjZXNbYV0sZT1jLnZlcnRleE5vcm1hbHMsMz09PWUubGVuZ3RoPyhlWzBdLmNvcHkoZFtjLmFdKSxcbmVbMV0uY29weShkW2MuYl0pLGVbMl0uY29weShkW2MuY10pKTooZVswXT1kW2MuYV0uY2xvbmUoKSxlWzFdPWRbYy5iXS5jbG9uZSgpLGVbMl09ZFtjLmNdLmNsb25lKCkpfSxjb21wdXRlTW9ycGhOb3JtYWxzOmZ1bmN0aW9uKCl7dmFyIGEsYixjLGQsZTtjPTA7Zm9yKGQ9dGhpcy5mYWNlcy5sZW5ndGg7YzxkO2MrKylmb3IoZT10aGlzLmZhY2VzW2NdLGUuX19vcmlnaW5hbEZhY2VOb3JtYWw/ZS5fX29yaWdpbmFsRmFjZU5vcm1hbC5jb3B5KGUubm9ybWFsKTplLl9fb3JpZ2luYWxGYWNlTm9ybWFsPWUubm9ybWFsLmNsb25lKCksZS5fX29yaWdpbmFsVmVydGV4Tm9ybWFsc3x8KGUuX19vcmlnaW5hbFZlcnRleE5vcm1hbHM9W10pLGE9MCxiPWUudmVydGV4Tm9ybWFscy5sZW5ndGg7YTxiO2ErKyllLl9fb3JpZ2luYWxWZXJ0ZXhOb3JtYWxzW2FdP2UuX19vcmlnaW5hbFZlcnRleE5vcm1hbHNbYV0uY29weShlLnZlcnRleE5vcm1hbHNbYV0pOmUuX19vcmlnaW5hbFZlcnRleE5vcm1hbHNbYV09XG5lLnZlcnRleE5vcm1hbHNbYV0uY2xvbmUoKTt2YXIgZz1uZXcgVEhSRUUuR2VvbWV0cnk7Zy5mYWNlcz10aGlzLmZhY2VzO2E9MDtmb3IoYj10aGlzLm1vcnBoVGFyZ2V0cy5sZW5ndGg7YTxiO2ErKyl7aWYoIXRoaXMubW9ycGhOb3JtYWxzW2FdKXt0aGlzLm1vcnBoTm9ybWFsc1thXT17fTt0aGlzLm1vcnBoTm9ybWFsc1thXS5mYWNlTm9ybWFscz1bXTt0aGlzLm1vcnBoTm9ybWFsc1thXS52ZXJ0ZXhOb3JtYWxzPVtdO2U9dGhpcy5tb3JwaE5vcm1hbHNbYV0uZmFjZU5vcm1hbHM7dmFyIGY9dGhpcy5tb3JwaE5vcm1hbHNbYV0udmVydGV4Tm9ybWFscyxoLGw7Yz0wO2ZvcihkPXRoaXMuZmFjZXMubGVuZ3RoO2M8ZDtjKyspaD1uZXcgVEhSRUUuVmVjdG9yMyxsPXthOm5ldyBUSFJFRS5WZWN0b3IzLGI6bmV3IFRIUkVFLlZlY3RvcjMsYzpuZXcgVEhSRUUuVmVjdG9yM30sZS5wdXNoKGgpLGYucHVzaChsKX1mPXRoaXMubW9ycGhOb3JtYWxzW2FdO2cudmVydGljZXM9dGhpcy5tb3JwaFRhcmdldHNbYV0udmVydGljZXM7XG5nLmNvbXB1dGVGYWNlTm9ybWFscygpO2cuY29tcHV0ZVZlcnRleE5vcm1hbHMoKTtjPTA7Zm9yKGQ9dGhpcy5mYWNlcy5sZW5ndGg7YzxkO2MrKyllPXRoaXMuZmFjZXNbY10saD1mLmZhY2VOb3JtYWxzW2NdLGw9Zi52ZXJ0ZXhOb3JtYWxzW2NdLGguY29weShlLm5vcm1hbCksbC5hLmNvcHkoZS52ZXJ0ZXhOb3JtYWxzWzBdKSxsLmIuY29weShlLnZlcnRleE5vcm1hbHNbMV0pLGwuYy5jb3B5KGUudmVydGV4Tm9ybWFsc1syXSl9Yz0wO2ZvcihkPXRoaXMuZmFjZXMubGVuZ3RoO2M8ZDtjKyspZT10aGlzLmZhY2VzW2NdLGUubm9ybWFsPWUuX19vcmlnaW5hbEZhY2VOb3JtYWwsZS52ZXJ0ZXhOb3JtYWxzPWUuX19vcmlnaW5hbFZlcnRleE5vcm1hbHN9LGNvbXB1dGVUYW5nZW50czpmdW5jdGlvbigpe2NvbnNvbGUud2FybihcIlRIUkVFLkdlb21ldHJ5OiAuY29tcHV0ZVRhbmdlbnRzKCkgaGFzIGJlZW4gcmVtb3ZlZC5cIil9LGNvbXB1dGVMaW5lRGlzdGFuY2VzOmZ1bmN0aW9uKCl7Zm9yKHZhciBhPVxuMCxiPXRoaXMudmVydGljZXMsYz0wLGQ9Yi5sZW5ndGg7YzxkO2MrKykwPGMmJihhKz1iW2NdLmRpc3RhbmNlVG8oYltjLTFdKSksdGhpcy5saW5lRGlzdGFuY2VzW2NdPWF9LGNvbXB1dGVCb3VuZGluZ0JveDpmdW5jdGlvbigpe251bGw9PT10aGlzLmJvdW5kaW5nQm94JiYodGhpcy5ib3VuZGluZ0JveD1uZXcgVEhSRUUuQm94Myk7dGhpcy5ib3VuZGluZ0JveC5zZXRGcm9tUG9pbnRzKHRoaXMudmVydGljZXMpfSxjb21wdXRlQm91bmRpbmdTcGhlcmU6ZnVuY3Rpb24oKXtudWxsPT09dGhpcy5ib3VuZGluZ1NwaGVyZSYmKHRoaXMuYm91bmRpbmdTcGhlcmU9bmV3IFRIUkVFLlNwaGVyZSk7dGhpcy5ib3VuZGluZ1NwaGVyZS5zZXRGcm9tUG9pbnRzKHRoaXMudmVydGljZXMpfSxtZXJnZTpmdW5jdGlvbihhLGIsYyl7aWYoITE9PT1hIGluc3RhbmNlb2YgVEhSRUUuR2VvbWV0cnkpY29uc29sZS5lcnJvcihcIlRIUkVFLkdlb21ldHJ5Lm1lcmdlKCk6IGdlb21ldHJ5IG5vdCBhbiBpbnN0YW5jZSBvZiBUSFJFRS5HZW9tZXRyeS5cIixcbmEpO2Vsc2V7dmFyIGQsZT10aGlzLnZlcnRpY2VzLmxlbmd0aCxnPXRoaXMudmVydGljZXMsZj1hLnZlcnRpY2VzLGg9dGhpcy5mYWNlcyxsPWEuZmFjZXMsaz10aGlzLmZhY2VWZXJ0ZXhVdnNbMF07YT1hLmZhY2VWZXJ0ZXhVdnNbMF07dm9pZCAwPT09YyYmKGM9MCk7dm9pZCAwIT09YiYmKGQ9KG5ldyBUSFJFRS5NYXRyaXgzKS5nZXROb3JtYWxNYXRyaXgoYikpO2Zvcih2YXIgbT0wLHA9Zi5sZW5ndGg7bTxwO20rKyl7dmFyIG49ZlttXS5jbG9uZSgpO3ZvaWQgMCE9PWImJm4uYXBwbHlNYXRyaXg0KGIpO2cucHVzaChuKX1tPTA7Zm9yKHA9bC5sZW5ndGg7bTxwO20rKyl7dmFyIGY9bFttXSxxLHM9Zi52ZXJ0ZXhOb3JtYWxzLHQ9Zi52ZXJ0ZXhDb2xvcnMsbj1uZXcgVEhSRUUuRmFjZTMoZi5hK2UsZi5iK2UsZi5jK2UpO24ubm9ybWFsLmNvcHkoZi5ub3JtYWwpO3ZvaWQgMCE9PWQmJm4ubm9ybWFsLmFwcGx5TWF0cml4MyhkKS5ub3JtYWxpemUoKTtiPTA7Zm9yKGc9cy5sZW5ndGg7Yjxcbmc7YisrKXE9c1tiXS5jbG9uZSgpLHZvaWQgMCE9PWQmJnEuYXBwbHlNYXRyaXgzKGQpLm5vcm1hbGl6ZSgpLG4udmVydGV4Tm9ybWFscy5wdXNoKHEpO24uY29sb3IuY29weShmLmNvbG9yKTtiPTA7Zm9yKGc9dC5sZW5ndGg7YjxnO2IrKylxPXRbYl0sbi52ZXJ0ZXhDb2xvcnMucHVzaChxLmNsb25lKCkpO24ubWF0ZXJpYWxJbmRleD1mLm1hdGVyaWFsSW5kZXgrYztoLnB1c2gobil9bT0wO2ZvcihwPWEubGVuZ3RoO208cDttKyspaWYoYz1hW21dLGQ9W10sdm9pZCAwIT09Yyl7Yj0wO2ZvcihnPWMubGVuZ3RoO2I8ZztiKyspZC5wdXNoKGNbYl0uY2xvbmUoKSk7ay5wdXNoKGQpfX19LG1lcmdlTWVzaDpmdW5jdGlvbihhKXshMT09PWEgaW5zdGFuY2VvZiBUSFJFRS5NZXNoP2NvbnNvbGUuZXJyb3IoXCJUSFJFRS5HZW9tZXRyeS5tZXJnZU1lc2goKTogbWVzaCBub3QgYW4gaW5zdGFuY2Ugb2YgVEhSRUUuTWVzaC5cIixhKTooYS5tYXRyaXhBdXRvVXBkYXRlJiZhLnVwZGF0ZU1hdHJpeCgpLFxudGhpcy5tZXJnZShhLmdlb21ldHJ5LGEubWF0cml4KSl9LG1lcmdlVmVydGljZXM6ZnVuY3Rpb24oKXt2YXIgYT17fSxiPVtdLGM9W10sZCxlPU1hdGgucG93KDEwLDQpLGcsZjtnPTA7Zm9yKGY9dGhpcy52ZXJ0aWNlcy5sZW5ndGg7ZzxmO2crKylkPXRoaXMudmVydGljZXNbZ10sZD1NYXRoLnJvdW5kKGQueCplKStcIl9cIitNYXRoLnJvdW5kKGQueSplKStcIl9cIitNYXRoLnJvdW5kKGQueiplKSx2b2lkIDA9PT1hW2RdPyhhW2RdPWcsYi5wdXNoKHRoaXMudmVydGljZXNbZ10pLGNbZ109Yi5sZW5ndGgtMSk6Y1tnXT1jW2FbZF1dO2E9W107Zz0wO2ZvcihmPXRoaXMuZmFjZXMubGVuZ3RoO2c8ZjtnKyspZm9yKGU9dGhpcy5mYWNlc1tnXSxlLmE9Y1tlLmFdLGUuYj1jW2UuYl0sZS5jPWNbZS5jXSxlPVtlLmEsZS5iLGUuY10sZD0wOzM+ZDtkKyspaWYoZVtkXT09PWVbKGQrMSklM10pe2EucHVzaChnKTticmVha31mb3IoZz1hLmxlbmd0aC0xOzA8PWc7Zy0tKWZvcihlPWFbZ10sdGhpcy5mYWNlcy5zcGxpY2UoZSxcbjEpLGM9MCxmPXRoaXMuZmFjZVZlcnRleFV2cy5sZW5ndGg7YzxmO2MrKyl0aGlzLmZhY2VWZXJ0ZXhVdnNbY10uc3BsaWNlKGUsMSk7Zz10aGlzLnZlcnRpY2VzLmxlbmd0aC1iLmxlbmd0aDt0aGlzLnZlcnRpY2VzPWI7cmV0dXJuIGd9LHNvcnRGYWNlc0J5TWF0ZXJpYWxJbmRleDpmdW5jdGlvbigpe2Zvcih2YXIgYT10aGlzLmZhY2VzLGI9YS5sZW5ndGgsYz0wO2M8YjtjKyspYVtjXS5faWQ9YzthLnNvcnQoZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS5tYXRlcmlhbEluZGV4LWIubWF0ZXJpYWxJbmRleH0pO3ZhciBkPXRoaXMuZmFjZVZlcnRleFV2c1swXSxlPXRoaXMuZmFjZVZlcnRleFV2c1sxXSxnLGY7ZCYmZC5sZW5ndGg9PT1iJiYoZz1bXSk7ZSYmZS5sZW5ndGg9PT1iJiYoZj1bXSk7Zm9yKGM9MDtjPGI7YysrKXt2YXIgaD1hW2NdLl9pZDtnJiZnLnB1c2goZFtoXSk7ZiYmZi5wdXNoKGVbaF0pfWcmJih0aGlzLmZhY2VWZXJ0ZXhVdnNbMF09Zyk7ZiYmKHRoaXMuZmFjZVZlcnRleFV2c1sxXT1cbmYpfSx0b0pTT046ZnVuY3Rpb24oKXtmdW5jdGlvbiBhKGEsYixjKXtyZXR1cm4gYz9hfDE8PGI6YSZ+KDE8PGIpfWZ1bmN0aW9uIGIoYSl7dmFyIGI9YS54LnRvU3RyaW5nKCkrYS55LnRvU3RyaW5nKCkrYS56LnRvU3RyaW5nKCk7aWYodm9pZCAwIT09a1tiXSlyZXR1cm4ga1tiXTtrW2JdPWwubGVuZ3RoLzM7bC5wdXNoKGEueCxhLnksYS56KTtyZXR1cm4ga1tiXX1mdW5jdGlvbiBjKGEpe3ZhciBiPWEuci50b1N0cmluZygpK2EuZy50b1N0cmluZygpK2EuYi50b1N0cmluZygpO2lmKHZvaWQgMCE9PXBbYl0pcmV0dXJuIHBbYl07cFtiXT1tLmxlbmd0aDttLnB1c2goYS5nZXRIZXgoKSk7cmV0dXJuIHBbYl19ZnVuY3Rpb24gZChhKXt2YXIgYj1hLngudG9TdHJpbmcoKSthLnkudG9TdHJpbmcoKTtpZih2b2lkIDAhPT1xW2JdKXJldHVybiBxW2JdO3FbYl09bi5sZW5ndGgvMjtuLnB1c2goYS54LGEueSk7cmV0dXJuIHFbYl19dmFyIGU9e21ldGFkYXRhOnt2ZXJzaW9uOjQuNCx0eXBlOlwiR2VvbWV0cnlcIixcbmdlbmVyYXRvcjpcIkdlb21ldHJ5LnRvSlNPTlwifX07ZS51dWlkPXRoaXMudXVpZDtlLnR5cGU9dGhpcy50eXBlO1wiXCIhPT10aGlzLm5hbWUmJihlLm5hbWU9dGhpcy5uYW1lKTtpZih2b2lkIDAhPT10aGlzLnBhcmFtZXRlcnMpe3ZhciBnPXRoaXMucGFyYW1ldGVycyxmO2ZvcihmIGluIGcpdm9pZCAwIT09Z1tmXSYmKGVbZl09Z1tmXSk7cmV0dXJuIGV9Zz1bXTtmb3IoZj0wO2Y8dGhpcy52ZXJ0aWNlcy5sZW5ndGg7ZisrKXt2YXIgaD10aGlzLnZlcnRpY2VzW2ZdO2cucHVzaChoLngsaC55LGgueil9dmFyIGg9W10sbD1bXSxrPXt9LG09W10scD17fSxuPVtdLHE9e307Zm9yKGY9MDtmPHRoaXMuZmFjZXMubGVuZ3RoO2YrKyl7dmFyIHM9dGhpcy5mYWNlc1tmXSx0PXZvaWQgMCE9PXRoaXMuZmFjZVZlcnRleFV2c1swXVtmXSx2PTA8cy5ub3JtYWwubGVuZ3RoKCksdT0wPHMudmVydGV4Tm9ybWFscy5sZW5ndGgsdz0xIT09cy5jb2xvci5yfHwxIT09cy5jb2xvci5nfHwxIT09cy5jb2xvci5iLFxuRD0wPHMudmVydGV4Q29sb3JzLmxlbmd0aCx4PTAseD1hKHgsMCwwKSx4PWEoeCwxLCExKSx4PWEoeCwyLCExKSx4PWEoeCwzLHQpLHg9YSh4LDQsdikseD1hKHgsNSx1KSx4PWEoeCw2LHcpLHg9YSh4LDcsRCk7aC5wdXNoKHgpO2gucHVzaChzLmEscy5iLHMuYyk7dCYmKHQ9dGhpcy5mYWNlVmVydGV4VXZzWzBdW2ZdLGgucHVzaChkKHRbMF0pLGQodFsxXSksZCh0WzJdKSkpO3YmJmgucHVzaChiKHMubm9ybWFsKSk7dSYmKHY9cy52ZXJ0ZXhOb3JtYWxzLGgucHVzaChiKHZbMF0pLGIodlsxXSksYih2WzJdKSkpO3cmJmgucHVzaChjKHMuY29sb3IpKTtEJiYocz1zLnZlcnRleENvbG9ycyxoLnB1c2goYyhzWzBdKSxjKHNbMV0pLGMoc1syXSkpKX1lLmRhdGE9e307ZS5kYXRhLnZlcnRpY2VzPWc7ZS5kYXRhLm5vcm1hbHM9bDswPG0ubGVuZ3RoJiYoZS5kYXRhLmNvbG9ycz1tKTswPG4ubGVuZ3RoJiYoZS5kYXRhLnV2cz1bbl0pO2UuZGF0YS5mYWNlcz1oO3JldHVybiBlfSxjbG9uZTpmdW5jdGlvbigpe3JldHVybihuZXcgdGhpcy5jb25zdHJ1Y3RvcikuY29weSh0aGlzKX0sXG5jb3B5OmZ1bmN0aW9uKGEpe3RoaXMudmVydGljZXM9W107dGhpcy5mYWNlcz1bXTt0aGlzLmZhY2VWZXJ0ZXhVdnM9W1tdXTtmb3IodmFyIGI9YS52ZXJ0aWNlcyxjPTAsZD1iLmxlbmd0aDtjPGQ7YysrKXRoaXMudmVydGljZXMucHVzaChiW2NdLmNsb25lKCkpO2I9YS5mYWNlcztjPTA7Zm9yKGQ9Yi5sZW5ndGg7YzxkO2MrKyl0aGlzLmZhY2VzLnB1c2goYltjXS5jbG9uZSgpKTtjPTA7Zm9yKGQ9YS5mYWNlVmVydGV4VXZzLmxlbmd0aDtjPGQ7YysrKXtiPWEuZmFjZVZlcnRleFV2c1tjXTt2b2lkIDA9PT10aGlzLmZhY2VWZXJ0ZXhVdnNbY10mJih0aGlzLmZhY2VWZXJ0ZXhVdnNbY109W10pO2Zvcih2YXIgZT0wLGc9Yi5sZW5ndGg7ZTxnO2UrKyl7Zm9yKHZhciBmPWJbZV0saD1bXSxsPTAsaz1mLmxlbmd0aDtsPGs7bCsrKWgucHVzaChmW2xdLmNsb25lKCkpO3RoaXMuZmFjZVZlcnRleFV2c1tjXS5wdXNoKGgpfX1yZXR1cm4gdGhpc30sZGlzcG9zZTpmdW5jdGlvbigpe3RoaXMuZGlzcGF0Y2hFdmVudCh7dHlwZTpcImRpc3Bvc2VcIn0pfX07XG5USFJFRS5FdmVudERpc3BhdGNoZXIucHJvdG90eXBlLmFwcGx5KFRIUkVFLkdlb21ldHJ5LnByb3RvdHlwZSk7VEhSRUUuR2VvbWV0cnlJZENvdW50PTA7XG5USFJFRS5EaXJlY3RHZW9tZXRyeT1mdW5jdGlvbigpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiaWRcIix7dmFsdWU6VEhSRUUuR2VvbWV0cnlJZENvdW50Kyt9KTt0aGlzLnV1aWQ9VEhSRUUuTWF0aC5nZW5lcmF0ZVVVSUQoKTt0aGlzLm5hbWU9XCJcIjt0aGlzLnR5cGU9XCJEaXJlY3RHZW9tZXRyeVwiO3RoaXMuaW5kaWNlcz1bXTt0aGlzLnZlcnRpY2VzPVtdO3RoaXMubm9ybWFscz1bXTt0aGlzLmNvbG9ycz1bXTt0aGlzLnV2cz1bXTt0aGlzLnV2czI9W107dGhpcy5ncm91cHM9W107dGhpcy5tb3JwaFRhcmdldHM9e307dGhpcy5za2luV2VpZ2h0cz1bXTt0aGlzLnNraW5JbmRpY2VzPVtdO3RoaXMuYm91bmRpbmdTcGhlcmU9dGhpcy5ib3VuZGluZ0JveD1udWxsO3RoaXMuZ3JvdXBzTmVlZFVwZGF0ZT10aGlzLnV2c05lZWRVcGRhdGU9dGhpcy5jb2xvcnNOZWVkVXBkYXRlPXRoaXMubm9ybWFsc05lZWRVcGRhdGU9dGhpcy52ZXJ0aWNlc05lZWRVcGRhdGU9ITF9O1xuVEhSRUUuRGlyZWN0R2VvbWV0cnkucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5EaXJlY3RHZW9tZXRyeSxjb21wdXRlQm91bmRpbmdCb3g6VEhSRUUuR2VvbWV0cnkucHJvdG90eXBlLmNvbXB1dGVCb3VuZGluZ0JveCxjb21wdXRlQm91bmRpbmdTcGhlcmU6VEhSRUUuR2VvbWV0cnkucHJvdG90eXBlLmNvbXB1dGVCb3VuZGluZ1NwaGVyZSxjb21wdXRlRmFjZU5vcm1hbHM6ZnVuY3Rpb24oKXtjb25zb2xlLndhcm4oXCJUSFJFRS5EaXJlY3RHZW9tZXRyeTogY29tcHV0ZUZhY2VOb3JtYWxzKCkgaXMgbm90IGEgbWV0aG9kIG9mIHRoaXMgdHlwZSBvZiBnZW9tZXRyeS5cIil9LGNvbXB1dGVWZXJ0ZXhOb3JtYWxzOmZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuRGlyZWN0R2VvbWV0cnk6IGNvbXB1dGVWZXJ0ZXhOb3JtYWxzKCkgaXMgbm90IGEgbWV0aG9kIG9mIHRoaXMgdHlwZSBvZiBnZW9tZXRyeS5cIil9LGNvbXB1dGVHcm91cHM6ZnVuY3Rpb24oYSl7dmFyIGIsYz1bXSxcbmQ7YT1hLmZhY2VzO2Zvcih2YXIgZT0wO2U8YS5sZW5ndGg7ZSsrKXt2YXIgZz1hW2VdO2cubWF0ZXJpYWxJbmRleCE9PWQmJihkPWcubWF0ZXJpYWxJbmRleCx2b2lkIDAhPT1iJiYoYi5jb3VudD0zKmUtYi5zdGFydCxjLnB1c2goYikpLGI9e3N0YXJ0OjMqZSxtYXRlcmlhbEluZGV4OmR9KX12b2lkIDAhPT1iJiYoYi5jb3VudD0zKmUtYi5zdGFydCxjLnB1c2goYikpO3RoaXMuZ3JvdXBzPWN9LGZyb21HZW9tZXRyeTpmdW5jdGlvbihhKXt2YXIgYj1hLmZhY2VzLGM9YS52ZXJ0aWNlcyxkPWEuZmFjZVZlcnRleFV2cyxlPWRbMF0mJjA8ZFswXS5sZW5ndGgsZz1kWzFdJiYwPGRbMV0ubGVuZ3RoLGY9YS5tb3JwaFRhcmdldHMsaD1mLmxlbmd0aDtpZigwPGgpe2Zvcih2YXIgbD1bXSxrPTA7azxoO2srKylsW2tdPVtdO3RoaXMubW9ycGhUYXJnZXRzLnBvc2l0aW9uPWx9dmFyIG09YS5tb3JwaE5vcm1hbHMscD1tLmxlbmd0aDtpZigwPHApe2Zvcih2YXIgbj1bXSxrPTA7azxwO2srKyluW2tdPVxuW107dGhpcy5tb3JwaFRhcmdldHMubm9ybWFsPW59Zm9yKHZhciBxPWEuc2tpbkluZGljZXMscz1hLnNraW5XZWlnaHRzLHQ9cS5sZW5ndGg9PT1jLmxlbmd0aCx2PXMubGVuZ3RoPT09Yy5sZW5ndGgsaz0wO2s8Yi5sZW5ndGg7aysrKXt2YXIgdT1iW2tdO3RoaXMudmVydGljZXMucHVzaChjW3UuYV0sY1t1LmJdLGNbdS5jXSk7dmFyIHc9dS52ZXJ0ZXhOb3JtYWxzOzM9PT13Lmxlbmd0aD90aGlzLm5vcm1hbHMucHVzaCh3WzBdLHdbMV0sd1syXSk6KHc9dS5ub3JtYWwsdGhpcy5ub3JtYWxzLnB1c2godyx3LHcpKTt3PXUudmVydGV4Q29sb3JzOzM9PT13Lmxlbmd0aD90aGlzLmNvbG9ycy5wdXNoKHdbMF0sd1sxXSx3WzJdKToodz11LmNvbG9yLHRoaXMuY29sb3JzLnB1c2godyx3LHcpKTshMD09PWUmJih3PWRbMF1ba10sdm9pZCAwIT09dz90aGlzLnV2cy5wdXNoKHdbMF0sd1sxXSx3WzJdKTooY29uc29sZS53YXJuKFwiVEhSRUUuRGlyZWN0R2VvbWV0cnkuZnJvbUdlb21ldHJ5KCk6IFVuZGVmaW5lZCB2ZXJ0ZXhVdiBcIixcbmspLHRoaXMudXZzLnB1c2gobmV3IFRIUkVFLlZlY3RvcjIsbmV3IFRIUkVFLlZlY3RvcjIsbmV3IFRIUkVFLlZlY3RvcjIpKSk7ITA9PT1nJiYodz1kWzFdW2tdLHZvaWQgMCE9PXc/dGhpcy51dnMyLnB1c2god1swXSx3WzFdLHdbMl0pOihjb25zb2xlLndhcm4oXCJUSFJFRS5EaXJlY3RHZW9tZXRyeS5mcm9tR2VvbWV0cnkoKTogVW5kZWZpbmVkIHZlcnRleFV2MiBcIixrKSx0aGlzLnV2czIucHVzaChuZXcgVEhSRUUuVmVjdG9yMixuZXcgVEhSRUUuVmVjdG9yMixuZXcgVEhSRUUuVmVjdG9yMikpKTtmb3Iodz0wO3c8aDt3Kyspe3ZhciBEPWZbd10udmVydGljZXM7bFt3XS5wdXNoKERbdS5hXSxEW3UuYl0sRFt1LmNdKX1mb3Iodz0wO3c8cDt3KyspRD1tW3ddLnZlcnRleE5vcm1hbHNba10sblt3XS5wdXNoKEQuYSxELmIsRC5jKTt0JiZ0aGlzLnNraW5JbmRpY2VzLnB1c2gocVt1LmFdLHFbdS5iXSxxW3UuY10pO3YmJnRoaXMuc2tpbldlaWdodHMucHVzaChzW3UuYV0sc1t1LmJdLFxuc1t1LmNdKX10aGlzLmNvbXB1dGVHcm91cHMoYSk7dGhpcy52ZXJ0aWNlc05lZWRVcGRhdGU9YS52ZXJ0aWNlc05lZWRVcGRhdGU7dGhpcy5ub3JtYWxzTmVlZFVwZGF0ZT1hLm5vcm1hbHNOZWVkVXBkYXRlO3RoaXMuY29sb3JzTmVlZFVwZGF0ZT1hLmNvbG9yc05lZWRVcGRhdGU7dGhpcy51dnNOZWVkVXBkYXRlPWEudXZzTmVlZFVwZGF0ZTt0aGlzLmdyb3Vwc05lZWRVcGRhdGU9YS5ncm91cHNOZWVkVXBkYXRlO3JldHVybiB0aGlzfSxkaXNwb3NlOmZ1bmN0aW9uKCl7dGhpcy5kaXNwYXRjaEV2ZW50KHt0eXBlOlwiZGlzcG9zZVwifSl9fTtUSFJFRS5FdmVudERpc3BhdGNoZXIucHJvdG90eXBlLmFwcGx5KFRIUkVFLkRpcmVjdEdlb21ldHJ5LnByb3RvdHlwZSk7XG5USFJFRS5CdWZmZXJHZW9tZXRyeT1mdW5jdGlvbigpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiaWRcIix7dmFsdWU6VEhSRUUuR2VvbWV0cnlJZENvdW50Kyt9KTt0aGlzLnV1aWQ9VEhSRUUuTWF0aC5nZW5lcmF0ZVVVSUQoKTt0aGlzLm5hbWU9XCJcIjt0aGlzLnR5cGU9XCJCdWZmZXJHZW9tZXRyeVwiO3RoaXMuaW5kZXg9bnVsbDt0aGlzLmF0dHJpYnV0ZXM9e307dGhpcy5tb3JwaEF0dHJpYnV0ZXM9e307dGhpcy5ncm91cHM9W107dGhpcy5ib3VuZGluZ1NwaGVyZT10aGlzLmJvdW5kaW5nQm94PW51bGw7dGhpcy5kcmF3UmFuZ2U9e3N0YXJ0OjAsY291bnQ6SW5maW5pdHl9fTtcblRIUkVFLkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZT17Y29uc3RydWN0b3I6VEhSRUUuQnVmZmVyR2VvbWV0cnksYWRkSW5kZXg6ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuQnVmZmVyR2VvbWV0cnk6IC5hZGRJbmRleCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLnNldEluZGV4KCkuXCIpO3RoaXMuc2V0SW5kZXgoYSl9LGdldEluZGV4OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaW5kZXh9LHNldEluZGV4OmZ1bmN0aW9uKGEpe3RoaXMuaW5kZXg9YX0sYWRkQXR0cmlidXRlOmZ1bmN0aW9uKGEsYixjKXshMT09PWIgaW5zdGFuY2VvZiBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUmJiExPT09YiBpbnN0YW5jZW9mIFRIUkVFLkludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlPyhjb25zb2xlLndhcm4oXCJUSFJFRS5CdWZmZXJHZW9tZXRyeTogLmFkZEF0dHJpYnV0ZSgpIG5vdyBleHBlY3RzICggbmFtZSwgYXR0cmlidXRlICkuXCIpLHRoaXMuYWRkQXR0cmlidXRlKGEsbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShiLFxuYykpKTpcImluZGV4XCI9PT1hPyhjb25zb2xlLndhcm4oXCJUSFJFRS5CdWZmZXJHZW9tZXRyeS5hZGRBdHRyaWJ1dGU6IFVzZSAuc2V0SW5kZXgoKSBmb3IgaW5kZXggYXR0cmlidXRlLlwiKSx0aGlzLnNldEluZGV4KGIpKTp0aGlzLmF0dHJpYnV0ZXNbYV09Yn0sZ2V0QXR0cmlidXRlOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmF0dHJpYnV0ZXNbYV19LHJlbW92ZUF0dHJpYnV0ZTpmdW5jdGlvbihhKXtkZWxldGUgdGhpcy5hdHRyaWJ1dGVzW2FdfSxnZXQgZHJhd2NhbGxzKCl7Y29uc29sZS5lcnJvcihcIlRIUkVFLkJ1ZmZlckdlb21ldHJ5OiAuZHJhd2NhbGxzIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdyb3Vwcy5cIik7cmV0dXJuIHRoaXMuZ3JvdXBzfSxnZXQgb2Zmc2V0cygpe2NvbnNvbGUud2FybihcIlRIUkVFLkJ1ZmZlckdlb21ldHJ5OiAub2Zmc2V0cyBoYXMgYmVlbiByZW5hbWVkIHRvIC5ncm91cHMuXCIpO3JldHVybiB0aGlzLmdyb3Vwc30sYWRkRHJhd0NhbGw6ZnVuY3Rpb24oYSxcbmIsYyl7dm9pZCAwIT09YyYmY29uc29sZS53YXJuKFwiVEhSRUUuQnVmZmVyR2VvbWV0cnk6IC5hZGREcmF3Q2FsbCgpIG5vIGxvbmdlciBzdXBwb3J0cyBpbmRleE9mZnNldC5cIik7Y29uc29sZS53YXJuKFwiVEhSRUUuQnVmZmVyR2VvbWV0cnk6IC5hZGREcmF3Q2FsbCgpIGlzIG5vdyAuYWRkR3JvdXAoKS5cIik7dGhpcy5hZGRHcm91cChhLGIpfSxjbGVhckRyYXdDYWxsczpmdW5jdGlvbigpe2NvbnNvbGUud2FybihcIlRIUkVFLkJ1ZmZlckdlb21ldHJ5OiAuY2xlYXJEcmF3Q2FsbHMoKSBpcyBub3cgLmNsZWFyR3JvdXBzKCkuXCIpO3RoaXMuY2xlYXJHcm91cHMoKX0sYWRkR3JvdXA6ZnVuY3Rpb24oYSxiLGMpe3RoaXMuZ3JvdXBzLnB1c2goe3N0YXJ0OmEsY291bnQ6YixtYXRlcmlhbEluZGV4OnZvaWQgMCE9PWM/YzowfSl9LGNsZWFyR3JvdXBzOmZ1bmN0aW9uKCl7dGhpcy5ncm91cHM9W119LHNldERyYXdSYW5nZTpmdW5jdGlvbihhLGIpe3RoaXMuZHJhd1JhbmdlLnN0YXJ0PWE7dGhpcy5kcmF3UmFuZ2UuY291bnQ9XG5ifSxhcHBseU1hdHJpeDpmdW5jdGlvbihhKXt2YXIgYj10aGlzLmF0dHJpYnV0ZXMucG9zaXRpb247dm9pZCAwIT09YiYmKGEuYXBwbHlUb1ZlY3RvcjNBcnJheShiLmFycmF5KSxiLm5lZWRzVXBkYXRlPSEwKTtiPXRoaXMuYXR0cmlidXRlcy5ub3JtYWw7dm9pZCAwIT09YiYmKChuZXcgVEhSRUUuTWF0cml4MykuZ2V0Tm9ybWFsTWF0cml4KGEpLmFwcGx5VG9WZWN0b3IzQXJyYXkoYi5hcnJheSksYi5uZWVkc1VwZGF0ZT0hMCk7bnVsbCE9PXRoaXMuYm91bmRpbmdCb3gmJnRoaXMuY29tcHV0ZUJvdW5kaW5nQm94KCk7bnVsbCE9PXRoaXMuYm91bmRpbmdTcGhlcmUmJnRoaXMuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCl9LHJvdGF0ZVg6ZnVuY3Rpb24oKXt2YXIgYTtyZXR1cm4gZnVuY3Rpb24oYil7dm9pZCAwPT09YSYmKGE9bmV3IFRIUkVFLk1hdHJpeDQpO2EubWFrZVJvdGF0aW9uWChiKTt0aGlzLmFwcGx5TWF0cml4KGEpO3JldHVybiB0aGlzfX0oKSxyb3RhdGVZOmZ1bmN0aW9uKCl7dmFyIGE7XG5yZXR1cm4gZnVuY3Rpb24oYil7dm9pZCAwPT09YSYmKGE9bmV3IFRIUkVFLk1hdHJpeDQpO2EubWFrZVJvdGF0aW9uWShiKTt0aGlzLmFwcGx5TWF0cml4KGEpO3JldHVybiB0aGlzfX0oKSxyb3RhdGVaOmZ1bmN0aW9uKCl7dmFyIGE7cmV0dXJuIGZ1bmN0aW9uKGIpe3ZvaWQgMD09PWEmJihhPW5ldyBUSFJFRS5NYXRyaXg0KTthLm1ha2VSb3RhdGlvblooYik7dGhpcy5hcHBseU1hdHJpeChhKTtyZXR1cm4gdGhpc319KCksdHJhbnNsYXRlOmZ1bmN0aW9uKCl7dmFyIGE7cmV0dXJuIGZ1bmN0aW9uKGIsYyxkKXt2b2lkIDA9PT1hJiYoYT1uZXcgVEhSRUUuTWF0cml4NCk7YS5tYWtlVHJhbnNsYXRpb24oYixjLGQpO3RoaXMuYXBwbHlNYXRyaXgoYSk7cmV0dXJuIHRoaXN9fSgpLHNjYWxlOmZ1bmN0aW9uKCl7dmFyIGE7cmV0dXJuIGZ1bmN0aW9uKGIsYyxkKXt2b2lkIDA9PT1hJiYoYT1uZXcgVEhSRUUuTWF0cml4NCk7YS5tYWtlU2NhbGUoYixjLGQpO3RoaXMuYXBwbHlNYXRyaXgoYSk7XG5yZXR1cm4gdGhpc319KCksbG9va0F0OmZ1bmN0aW9uKCl7dmFyIGE7cmV0dXJuIGZ1bmN0aW9uKGIpe3ZvaWQgMD09PWEmJihhPW5ldyBUSFJFRS5PYmplY3QzRCk7YS5sb29rQXQoYik7YS51cGRhdGVNYXRyaXgoKTt0aGlzLmFwcGx5TWF0cml4KGEubWF0cml4KX19KCksY2VudGVyOmZ1bmN0aW9uKCl7dGhpcy5jb21wdXRlQm91bmRpbmdCb3goKTt2YXIgYT10aGlzLmJvdW5kaW5nQm94LmNlbnRlcigpLm5lZ2F0ZSgpO3RoaXMudHJhbnNsYXRlKGEueCxhLnksYS56KTtyZXR1cm4gYX0sc2V0RnJvbU9iamVjdDpmdW5jdGlvbihhKXt2YXIgYj1hLmdlb21ldHJ5O2lmKGEgaW5zdGFuY2VvZiBUSFJFRS5Qb2ludHN8fGEgaW5zdGFuY2VvZiBUSFJFRS5MaW5lKXthPW5ldyBUSFJFRS5GbG9hdDMyQXR0cmlidXRlKDMqYi52ZXJ0aWNlcy5sZW5ndGgsMyk7dmFyIGM9bmV3IFRIUkVFLkZsb2F0MzJBdHRyaWJ1dGUoMypiLmNvbG9ycy5sZW5ndGgsMyk7dGhpcy5hZGRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLFxuYS5jb3B5VmVjdG9yM3NBcnJheShiLnZlcnRpY2VzKSk7dGhpcy5hZGRBdHRyaWJ1dGUoXCJjb2xvclwiLGMuY29weUNvbG9yc0FycmF5KGIuY29sb3JzKSk7Yi5saW5lRGlzdGFuY2VzJiZiLmxpbmVEaXN0YW5jZXMubGVuZ3RoPT09Yi52ZXJ0aWNlcy5sZW5ndGgmJihhPW5ldyBUSFJFRS5GbG9hdDMyQXR0cmlidXRlKGIubGluZURpc3RhbmNlcy5sZW5ndGgsMSksdGhpcy5hZGRBdHRyaWJ1dGUoXCJsaW5lRGlzdGFuY2VcIixhLmNvcHlBcnJheShiLmxpbmVEaXN0YW5jZXMpKSk7bnVsbCE9PWIuYm91bmRpbmdTcGhlcmUmJih0aGlzLmJvdW5kaW5nU3BoZXJlPWIuYm91bmRpbmdTcGhlcmUuY2xvbmUoKSk7bnVsbCE9PWIuYm91bmRpbmdCb3gmJih0aGlzLmJvdW5kaW5nQm94PWIuYm91bmRpbmdCb3guY2xvbmUoKSl9ZWxzZSBhIGluc3RhbmNlb2YgVEhSRUUuTWVzaCYmYiBpbnN0YW5jZW9mIFRIUkVFLkdlb21ldHJ5JiZ0aGlzLmZyb21HZW9tZXRyeShiKTtyZXR1cm4gdGhpc30sdXBkYXRlRnJvbU9iamVjdDpmdW5jdGlvbihhKXt2YXIgYj1cbmEuZ2VvbWV0cnk7aWYoYSBpbnN0YW5jZW9mIFRIUkVFLk1lc2gpe3ZhciBjPWIuX19kaXJlY3RHZW9tZXRyeTtpZih2b2lkIDA9PT1jKXJldHVybiB0aGlzLmZyb21HZW9tZXRyeShiKTtjLnZlcnRpY2VzTmVlZFVwZGF0ZT1iLnZlcnRpY2VzTmVlZFVwZGF0ZTtjLm5vcm1hbHNOZWVkVXBkYXRlPWIubm9ybWFsc05lZWRVcGRhdGU7Yy5jb2xvcnNOZWVkVXBkYXRlPWIuY29sb3JzTmVlZFVwZGF0ZTtjLnV2c05lZWRVcGRhdGU9Yi51dnNOZWVkVXBkYXRlO2MuZ3JvdXBzTmVlZFVwZGF0ZT1iLmdyb3Vwc05lZWRVcGRhdGU7Yi52ZXJ0aWNlc05lZWRVcGRhdGU9ITE7Yi5ub3JtYWxzTmVlZFVwZGF0ZT0hMTtiLmNvbG9yc05lZWRVcGRhdGU9ITE7Yi51dnNOZWVkVXBkYXRlPSExO2IuZ3JvdXBzTmVlZFVwZGF0ZT0hMTtiPWN9ITA9PT1iLnZlcnRpY2VzTmVlZFVwZGF0ZSYmKGM9dGhpcy5hdHRyaWJ1dGVzLnBvc2l0aW9uLHZvaWQgMCE9PWMmJihjLmNvcHlWZWN0b3Izc0FycmF5KGIudmVydGljZXMpLFxuYy5uZWVkc1VwZGF0ZT0hMCksYi52ZXJ0aWNlc05lZWRVcGRhdGU9ITEpOyEwPT09Yi5ub3JtYWxzTmVlZFVwZGF0ZSYmKGM9dGhpcy5hdHRyaWJ1dGVzLm5vcm1hbCx2b2lkIDAhPT1jJiYoYy5jb3B5VmVjdG9yM3NBcnJheShiLm5vcm1hbHMpLGMubmVlZHNVcGRhdGU9ITApLGIubm9ybWFsc05lZWRVcGRhdGU9ITEpOyEwPT09Yi5jb2xvcnNOZWVkVXBkYXRlJiYoYz10aGlzLmF0dHJpYnV0ZXMuY29sb3Isdm9pZCAwIT09YyYmKGMuY29weUNvbG9yc0FycmF5KGIuY29sb3JzKSxjLm5lZWRzVXBkYXRlPSEwKSxiLmNvbG9yc05lZWRVcGRhdGU9ITEpO2IudXZzTmVlZFVwZGF0ZSYmKGM9dGhpcy5hdHRyaWJ1dGVzLnV2LHZvaWQgMCE9PWMmJihjLmNvcHlWZWN0b3Iyc0FycmF5KGIudXZzKSxjLm5lZWRzVXBkYXRlPSEwKSxiLnV2c05lZWRVcGRhdGU9ITEpO2IubGluZURpc3RhbmNlc05lZWRVcGRhdGUmJihjPXRoaXMuYXR0cmlidXRlcy5saW5lRGlzdGFuY2Usdm9pZCAwIT09YyYmXG4oYy5jb3B5QXJyYXkoYi5saW5lRGlzdGFuY2VzKSxjLm5lZWRzVXBkYXRlPSEwKSxiLmxpbmVEaXN0YW5jZXNOZWVkVXBkYXRlPSExKTtiLmdyb3Vwc05lZWRVcGRhdGUmJihiLmNvbXB1dGVHcm91cHMoYS5nZW9tZXRyeSksdGhpcy5ncm91cHM9Yi5ncm91cHMsYi5ncm91cHNOZWVkVXBkYXRlPSExKTtyZXR1cm4gdGhpc30sZnJvbUdlb21ldHJ5OmZ1bmN0aW9uKGEpe2EuX19kaXJlY3RHZW9tZXRyeT0obmV3IFRIUkVFLkRpcmVjdEdlb21ldHJ5KS5mcm9tR2VvbWV0cnkoYSk7cmV0dXJuIHRoaXMuZnJvbURpcmVjdEdlb21ldHJ5KGEuX19kaXJlY3RHZW9tZXRyeSl9LGZyb21EaXJlY3RHZW9tZXRyeTpmdW5jdGlvbihhKXt2YXIgYj1uZXcgRmxvYXQzMkFycmF5KDMqYS52ZXJ0aWNlcy5sZW5ndGgpO3RoaXMuYWRkQXR0cmlidXRlKFwicG9zaXRpb25cIiwobmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShiLDMpKS5jb3B5VmVjdG9yM3NBcnJheShhLnZlcnRpY2VzKSk7MDxhLm5vcm1hbHMubGVuZ3RoJiZcbihiPW5ldyBGbG9hdDMyQXJyYXkoMyphLm5vcm1hbHMubGVuZ3RoKSx0aGlzLmFkZEF0dHJpYnV0ZShcIm5vcm1hbFwiLChuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKGIsMykpLmNvcHlWZWN0b3Izc0FycmF5KGEubm9ybWFscykpKTswPGEuY29sb3JzLmxlbmd0aCYmKGI9bmV3IEZsb2F0MzJBcnJheSgzKmEuY29sb3JzLmxlbmd0aCksdGhpcy5hZGRBdHRyaWJ1dGUoXCJjb2xvclwiLChuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKGIsMykpLmNvcHlDb2xvcnNBcnJheShhLmNvbG9ycykpKTswPGEudXZzLmxlbmd0aCYmKGI9bmV3IEZsb2F0MzJBcnJheSgyKmEudXZzLmxlbmd0aCksdGhpcy5hZGRBdHRyaWJ1dGUoXCJ1dlwiLChuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKGIsMikpLmNvcHlWZWN0b3Iyc0FycmF5KGEudXZzKSkpOzA8YS51dnMyLmxlbmd0aCYmKGI9bmV3IEZsb2F0MzJBcnJheSgyKmEudXZzMi5sZW5ndGgpLHRoaXMuYWRkQXR0cmlidXRlKFwidXYyXCIsKG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoYixcbjIpKS5jb3B5VmVjdG9yMnNBcnJheShhLnV2czIpKSk7MDxhLmluZGljZXMubGVuZ3RoJiYoYj1uZXcgKDY1NTM1PGEudmVydGljZXMubGVuZ3RoP1VpbnQzMkFycmF5OlVpbnQxNkFycmF5KSgzKmEuaW5kaWNlcy5sZW5ndGgpLHRoaXMuc2V0SW5kZXgoKG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoYiwxKSkuY29weUluZGljZXNBcnJheShhLmluZGljZXMpKSk7dGhpcy5ncm91cHM9YS5ncm91cHM7Zm9yKHZhciBjIGluIGEubW9ycGhUYXJnZXRzKXtmb3IodmFyIGI9W10sZD1hLm1vcnBoVGFyZ2V0c1tjXSxlPTAsZz1kLmxlbmd0aDtlPGc7ZSsrKXt2YXIgZj1kW2VdLGg9bmV3IFRIUkVFLkZsb2F0MzJBdHRyaWJ1dGUoMypmLmxlbmd0aCwzKTtiLnB1c2goaC5jb3B5VmVjdG9yM3NBcnJheShmKSl9dGhpcy5tb3JwaEF0dHJpYnV0ZXNbY109Yn0wPGEuc2tpbkluZGljZXMubGVuZ3RoJiYoYz1uZXcgVEhSRUUuRmxvYXQzMkF0dHJpYnV0ZSg0KmEuc2tpbkluZGljZXMubGVuZ3RoLFxuNCksdGhpcy5hZGRBdHRyaWJ1dGUoXCJza2luSW5kZXhcIixjLmNvcHlWZWN0b3I0c0FycmF5KGEuc2tpbkluZGljZXMpKSk7MDxhLnNraW5XZWlnaHRzLmxlbmd0aCYmKGM9bmV3IFRIUkVFLkZsb2F0MzJBdHRyaWJ1dGUoNCphLnNraW5XZWlnaHRzLmxlbmd0aCw0KSx0aGlzLmFkZEF0dHJpYnV0ZShcInNraW5XZWlnaHRcIixjLmNvcHlWZWN0b3I0c0FycmF5KGEuc2tpbldlaWdodHMpKSk7bnVsbCE9PWEuYm91bmRpbmdTcGhlcmUmJih0aGlzLmJvdW5kaW5nU3BoZXJlPWEuYm91bmRpbmdTcGhlcmUuY2xvbmUoKSk7bnVsbCE9PWEuYm91bmRpbmdCb3gmJih0aGlzLmJvdW5kaW5nQm94PWEuYm91bmRpbmdCb3guY2xvbmUoKSk7cmV0dXJuIHRoaXN9LGNvbXB1dGVCb3VuZGluZ0JveDpmdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5WZWN0b3IzO3JldHVybiBmdW5jdGlvbigpe251bGw9PT10aGlzLmJvdW5kaW5nQm94JiYodGhpcy5ib3VuZGluZ0JveD1uZXcgVEhSRUUuQm94Myk7dmFyIGI9XG50aGlzLmF0dHJpYnV0ZXMucG9zaXRpb24uYXJyYXk7aWYoYil7dmFyIGM9dGhpcy5ib3VuZGluZ0JveDtjLm1ha2VFbXB0eSgpO2Zvcih2YXIgZD0wLGU9Yi5sZW5ndGg7ZDxlO2QrPTMpYS5mcm9tQXJyYXkoYixkKSxjLmV4cGFuZEJ5UG9pbnQoYSl9aWYodm9pZCAwPT09Ynx8MD09PWIubGVuZ3RoKXRoaXMuYm91bmRpbmdCb3gubWluLnNldCgwLDAsMCksdGhpcy5ib3VuZGluZ0JveC5tYXguc2V0KDAsMCwwKTsoaXNOYU4odGhpcy5ib3VuZGluZ0JveC5taW4ueCl8fGlzTmFOKHRoaXMuYm91bmRpbmdCb3gubWluLnkpfHxpc05hTih0aGlzLmJvdW5kaW5nQm94Lm1pbi56KSkmJmNvbnNvbGUuZXJyb3IoJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ0JveDogQ29tcHV0ZWQgbWluL21heCBoYXZlIE5hTiB2YWx1ZXMuIFRoZSBcInBvc2l0aW9uXCIgYXR0cmlidXRlIGlzIGxpa2VseSB0byBoYXZlIE5hTiB2YWx1ZXMuJyx0aGlzKX19KCksY29tcHV0ZUJvdW5kaW5nU3BoZXJlOmZ1bmN0aW9uKCl7dmFyIGE9XG5uZXcgVEhSRUUuQm94MyxiPW5ldyBUSFJFRS5WZWN0b3IzO3JldHVybiBmdW5jdGlvbigpe251bGw9PT10aGlzLmJvdW5kaW5nU3BoZXJlJiYodGhpcy5ib3VuZGluZ1NwaGVyZT1uZXcgVEhSRUUuU3BoZXJlKTt2YXIgYz10aGlzLmF0dHJpYnV0ZXMucG9zaXRpb24uYXJyYXk7aWYoYyl7YS5tYWtlRW1wdHkoKTtmb3IodmFyIGQ9dGhpcy5ib3VuZGluZ1NwaGVyZS5jZW50ZXIsZT0wLGc9Yy5sZW5ndGg7ZTxnO2UrPTMpYi5mcm9tQXJyYXkoYyxlKSxhLmV4cGFuZEJ5UG9pbnQoYik7YS5jZW50ZXIoZCk7Zm9yKHZhciBmPTAsZT0wLGc9Yy5sZW5ndGg7ZTxnO2UrPTMpYi5mcm9tQXJyYXkoYyxlKSxmPU1hdGgubWF4KGYsZC5kaXN0YW5jZVRvU3F1YXJlZChiKSk7dGhpcy5ib3VuZGluZ1NwaGVyZS5yYWRpdXM9TWF0aC5zcXJ0KGYpO2lzTmFOKHRoaXMuYm91bmRpbmdTcGhlcmUucmFkaXVzKSYmY29uc29sZS5lcnJvcignVEhSRUUuQnVmZmVyR2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk6IENvbXB1dGVkIHJhZGl1cyBpcyBOYU4uIFRoZSBcInBvc2l0aW9uXCIgYXR0cmlidXRlIGlzIGxpa2VseSB0byBoYXZlIE5hTiB2YWx1ZXMuJyxcbnRoaXMpfX19KCksY29tcHV0ZUZhY2VOb3JtYWxzOmZ1bmN0aW9uKCl7fSxjb21wdXRlVmVydGV4Tm9ybWFsczpmdW5jdGlvbigpe3ZhciBhPXRoaXMuaW5kZXgsYj10aGlzLmF0dHJpYnV0ZXMsYz10aGlzLmdyb3VwcztpZihiLnBvc2l0aW9uKXt2YXIgZD1iLnBvc2l0aW9uLmFycmF5O2lmKHZvaWQgMD09PWIubm9ybWFsKXRoaXMuYWRkQXR0cmlidXRlKFwibm9ybWFsXCIsbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShuZXcgRmxvYXQzMkFycmF5KGQubGVuZ3RoKSwzKSk7ZWxzZSBmb3IodmFyIGU9Yi5ub3JtYWwuYXJyYXksZz0wLGY9ZS5sZW5ndGg7ZzxmO2crKyllW2ddPTA7dmFyIGU9Yi5ub3JtYWwuYXJyYXksaCxsLGssbT1uZXcgVEhSRUUuVmVjdG9yMyxwPW5ldyBUSFJFRS5WZWN0b3IzLG49bmV3IFRIUkVFLlZlY3RvcjMscT1uZXcgVEhSRUUuVmVjdG9yMyxzPW5ldyBUSFJFRS5WZWN0b3IzO2lmKGEpe2E9YS5hcnJheTswPT09Yy5sZW5ndGgmJnRoaXMuYWRkR3JvdXAoMCxhLmxlbmd0aCk7XG5mb3IodmFyIHQ9MCx2PWMubGVuZ3RoO3Q8djsrK3QpZm9yKGc9Y1t0XSxmPWcuc3RhcnQsaD1nLmNvdW50LGc9ZixmKz1oO2c8ZjtnKz0zKWg9MyphW2crMF0sbD0zKmFbZysxXSxrPTMqYVtnKzJdLG0uZnJvbUFycmF5KGQsaCkscC5mcm9tQXJyYXkoZCxsKSxuLmZyb21BcnJheShkLGspLHEuc3ViVmVjdG9ycyhuLHApLHMuc3ViVmVjdG9ycyhtLHApLHEuY3Jvc3MocyksZVtoXSs9cS54LGVbaCsxXSs9cS55LGVbaCsyXSs9cS56LGVbbF0rPXEueCxlW2wrMV0rPXEueSxlW2wrMl0rPXEueixlW2tdKz1xLngsZVtrKzFdKz1xLnksZVtrKzJdKz1xLnp9ZWxzZSBmb3IoZz0wLGY9ZC5sZW5ndGg7ZzxmO2crPTkpbS5mcm9tQXJyYXkoZCxnKSxwLmZyb21BcnJheShkLGcrMyksbi5mcm9tQXJyYXkoZCxnKzYpLHEuc3ViVmVjdG9ycyhuLHApLHMuc3ViVmVjdG9ycyhtLHApLHEuY3Jvc3MocyksZVtnXT1xLngsZVtnKzFdPXEueSxlW2crMl09cS56LGVbZyszXT1xLngsZVtnKzRdPXEueSxcbmVbZys1XT1xLnosZVtnKzZdPXEueCxlW2crN109cS55LGVbZys4XT1xLno7dGhpcy5ub3JtYWxpemVOb3JtYWxzKCk7Yi5ub3JtYWwubmVlZHNVcGRhdGU9ITB9fSxjb21wdXRlVGFuZ2VudHM6ZnVuY3Rpb24oKXtjb25zb2xlLndhcm4oXCJUSFJFRS5CdWZmZXJHZW9tZXRyeTogLmNvbXB1dGVUYW5nZW50cygpIGhhcyBiZWVuIHJlbW92ZWQuXCIpfSxjb21wdXRlT2Zmc2V0czpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5CdWZmZXJHZW9tZXRyeTogLmNvbXB1dGVPZmZzZXRzKCkgaGFzIGJlZW4gcmVtb3ZlZC5cIil9LG1lcmdlOmZ1bmN0aW9uKGEsYil7aWYoITE9PT1hIGluc3RhbmNlb2YgVEhSRUUuQnVmZmVyR2VvbWV0cnkpY29uc29sZS5lcnJvcihcIlRIUkVFLkJ1ZmZlckdlb21ldHJ5Lm1lcmdlKCk6IGdlb21ldHJ5IG5vdCBhbiBpbnN0YW5jZSBvZiBUSFJFRS5CdWZmZXJHZW9tZXRyeS5cIixhKTtlbHNle3ZvaWQgMD09PWImJihiPTApO3ZhciBjPXRoaXMuYXR0cmlidXRlcyxcbmQ7Zm9yKGQgaW4gYylpZih2b2lkIDAhPT1hLmF0dHJpYnV0ZXNbZF0pZm9yKHZhciBlPWNbZF0uYXJyYXksZz1hLmF0dHJpYnV0ZXNbZF0sZj1nLmFycmF5LGg9MCxnPWcuaXRlbVNpemUqYjtoPGYubGVuZ3RoO2grKyxnKyspZVtnXT1mW2hdO3JldHVybiB0aGlzfX0sbm9ybWFsaXplTm9ybWFsczpmdW5jdGlvbigpe2Zvcih2YXIgYT10aGlzLmF0dHJpYnV0ZXMubm9ybWFsLmFycmF5LGIsYyxkLGU9MCxnPWEubGVuZ3RoO2U8ZztlKz0zKWI9YVtlXSxjPWFbZSsxXSxkPWFbZSsyXSxiPTEvTWF0aC5zcXJ0KGIqYitjKmMrZCpkKSxhW2VdKj1iLGFbZSsxXSo9YixhW2UrMl0qPWJ9LHRvSlNPTjpmdW5jdGlvbigpe3ZhciBhPXttZXRhZGF0YTp7dmVyc2lvbjo0LjQsdHlwZTpcIkJ1ZmZlckdlb21ldHJ5XCIsZ2VuZXJhdG9yOlwiQnVmZmVyR2VvbWV0cnkudG9KU09OXCJ9fTthLnV1aWQ9dGhpcy51dWlkO2EudHlwZT10aGlzLnR5cGU7XCJcIiE9PXRoaXMubmFtZSYmKGEubmFtZT10aGlzLm5hbWUpO1xuaWYodm9pZCAwIT09dGhpcy5wYXJhbWV0ZXJzKXt2YXIgYj10aGlzLnBhcmFtZXRlcnMsYztmb3IoYyBpbiBiKXZvaWQgMCE9PWJbY10mJihhW2NdPWJbY10pO3JldHVybiBhfWEuZGF0YT17YXR0cmlidXRlczp7fX07dmFyIGQ9dGhpcy5pbmRleDtudWxsIT09ZCYmKGI9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZC5hcnJheSksYS5kYXRhLmluZGV4PXt0eXBlOmQuYXJyYXkuY29uc3RydWN0b3IubmFtZSxhcnJheTpifSk7ZD10aGlzLmF0dHJpYnV0ZXM7Zm9yKGMgaW4gZCl7dmFyIGU9ZFtjXSxiPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGUuYXJyYXkpO2EuZGF0YS5hdHRyaWJ1dGVzW2NdPXtpdGVtU2l6ZTplLml0ZW1TaXplLHR5cGU6ZS5hcnJheS5jb25zdHJ1Y3Rvci5uYW1lLGFycmF5OmJ9fWM9dGhpcy5ncm91cHM7MDxjLmxlbmd0aCYmKGEuZGF0YS5ncm91cHM9SlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShjKSkpO2M9dGhpcy5ib3VuZGluZ1NwaGVyZTtudWxsIT09XG5jJiYoYS5kYXRhLmJvdW5kaW5nU3BoZXJlPXtjZW50ZXI6Yy5jZW50ZXIudG9BcnJheSgpLHJhZGl1czpjLnJhZGl1c30pO3JldHVybiBhfSxjbG9uZTpmdW5jdGlvbigpe3JldHVybihuZXcgdGhpcy5jb25zdHJ1Y3RvcikuY29weSh0aGlzKX0sY29weTpmdW5jdGlvbihhKXt2YXIgYj1hLmluZGV4O251bGwhPT1iJiZ0aGlzLnNldEluZGV4KGIuY2xvbmUoKSk7dmFyIGI9YS5hdHRyaWJ1dGVzLGM7Zm9yKGMgaW4gYil0aGlzLmFkZEF0dHJpYnV0ZShjLGJbY10uY2xvbmUoKSk7YT1hLmdyb3VwcztjPTA7Zm9yKGI9YS5sZW5ndGg7YzxiO2MrKyl7dmFyIGQ9YVtjXTt0aGlzLmFkZEdyb3VwKGQuc3RhcnQsZC5jb3VudCl9cmV0dXJuIHRoaXN9LGRpc3Bvc2U6ZnVuY3Rpb24oKXt0aGlzLmRpc3BhdGNoRXZlbnQoe3R5cGU6XCJkaXNwb3NlXCJ9KX19O1RIUkVFLkV2ZW50RGlzcGF0Y2hlci5wcm90b3R5cGUuYXBwbHkoVEhSRUUuQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlKTtcblRIUkVFLkJ1ZmZlckdlb21ldHJ5Lk1heEluZGV4PTY1NTM1O1RIUkVFLkluc3RhbmNlZEJ1ZmZlckdlb21ldHJ5PWZ1bmN0aW9uKCl7VEhSRUUuQnVmZmVyR2VvbWV0cnkuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeVwiO3RoaXMubWF4SW5zdGFuY2VkQ291bnQ9dm9pZCAwfTtUSFJFRS5JbnN0YW5jZWRCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5CdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUpO1RIUkVFLkluc3RhbmNlZEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5JbnN0YW5jZWRCdWZmZXJHZW9tZXRyeTtUSFJFRS5JbnN0YW5jZWRCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUuYWRkR3JvdXA9ZnVuY3Rpb24oYSxiLGMpe3RoaXMuZ3JvdXBzLnB1c2goe3N0YXJ0OmEsY291bnQ6YixpbnN0YW5jZXM6Y30pfTtcblRIUkVFLkluc3RhbmNlZEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb3B5PWZ1bmN0aW9uKGEpe3ZhciBiPWEuaW5kZXg7bnVsbCE9PWImJnRoaXMuc2V0SW5kZXgoYi5jbG9uZSgpKTt2YXIgYj1hLmF0dHJpYnV0ZXMsYztmb3IoYyBpbiBiKXRoaXMuYWRkQXR0cmlidXRlKGMsYltjXS5jbG9uZSgpKTthPWEuZ3JvdXBzO2M9MDtmb3IoYj1hLmxlbmd0aDtjPGI7YysrKXt2YXIgZD1hW2NdO3RoaXMuYWRkR3JvdXAoZC5zdGFydCxkLmNvdW50LGQuaW5zdGFuY2VzKX1yZXR1cm4gdGhpc307VEhSRUUuRXZlbnREaXNwYXRjaGVyLnByb3RvdHlwZS5hcHBseShUSFJFRS5JbnN0YW5jZWRCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUpO1xuVEhSRUUuQW5pbWF0aW9uQWN0aW9uPWZ1bmN0aW9uKGEsYixjLGQsZSl7aWYodm9pZCAwPT09YSl0aHJvdyBFcnJvcihcImNsaXAgaXMgbnVsbFwiKTt0aGlzLmNsaXA9YTt0aGlzLmxvY2FsUm9vdD1udWxsO3RoaXMuc3RhcnRUaW1lPWJ8fDA7dGhpcy50aW1lU2NhbGU9Y3x8MTt0aGlzLndlaWdodD1kfHwxO3RoaXMubG9vcD1lfHxUSFJFRS5Mb29wUmVwZWF0O3RoaXMubG9vcENvdW50PTA7dGhpcy5lbmFibGVkPSEwO3RoaXMuYWN0aW9uVGltZT0tdGhpcy5zdGFydFRpbWU7dGhpcy5jbGlwVGltZT0wO3RoaXMucHJvcGVydHlCaW5kaW5ncz1bXX07XG5USFJFRS5BbmltYXRpb25BY3Rpb24ucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5BbmltYXRpb25BY3Rpb24sc2V0TG9jYWxSb290OmZ1bmN0aW9uKGEpe3RoaXMubG9jYWxSb290PWE7cmV0dXJuIHRoaXN9LHVwZGF0ZVRpbWU6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5jbGlwVGltZSxjPXRoaXMubG9vcENvdW50LGQ9dGhpcy5jbGlwLmR1cmF0aW9uO3RoaXMuYWN0aW9uVGltZSs9YTtpZih0aGlzLmxvb3A9PT1USFJFRS5Mb29wT25jZSlyZXR1cm4gdGhpcy5sb29wQ291bnQ9MCx0aGlzLmNsaXBUaW1lPU1hdGgubWluKE1hdGgubWF4KHRoaXMuYWN0aW9uVGltZSwwKSxkKSx0aGlzLmNsaXBUaW1lIT09YiYmKHRoaXMuY2xpcFRpbWU9PT1kP3RoaXMubWl4ZXIuZGlzcGF0Y2hFdmVudCh7dHlwZTpcImZpbmlzaGVkXCIsYWN0aW9uOnRoaXMsZGlyZWN0aW9uOjF9KTowPT09dGhpcy5jbGlwVGltZSYmdGhpcy5taXhlci5kaXNwYXRjaEV2ZW50KHt0eXBlOlwiZmluaXNoZWRcIixhY3Rpb246dGhpcyxcbmRpcmVjdGlvbjotMX0pKSx0aGlzLmNsaXBUaW1lO3RoaXMubG9vcENvdW50PU1hdGguZmxvb3IodGhpcy5hY3Rpb25UaW1lL2QpO2E9dGhpcy5hY3Rpb25UaW1lLXRoaXMubG9vcENvdW50KmQ7YSU9ZDt0aGlzLmxvb3A9PVRIUkVFLkxvb3BQaW5nUG9uZyYmMT09PU1hdGguYWJzKHRoaXMubG9vcENvdW50JTIpJiYoYT1kLWEpO3RoaXMuY2xpcFRpbWU9YTt0aGlzLmxvb3BDb3VudCE9PWMmJnRoaXMubWl4ZXIuZGlzcGF0Y2hFdmVudCh7dHlwZTpcImxvb3BcIixhY3Rpb246dGhpcyxsb29wRGVsdGE6dGhpcy5sb29wQ291bnQtdGhpcy5sb29wQ291bnR9KTtyZXR1cm4gdGhpcy5jbGlwVGltZX0sc3luY1dpdGg6ZnVuY3Rpb24oYSl7dGhpcy5hY3Rpb25UaW1lPWEuYWN0aW9uVGltZTt0aGlzLnRpbWVTY2FsZT1hLnRpbWVTY2FsZTtyZXR1cm4gdGhpc30sd2FycFRvRHVyYXRpb246ZnVuY3Rpb24oYSl7dGhpcy50aW1lU2NhbGU9dGhpcy5jbGlwLmR1cmF0aW9uL2E7cmV0dXJuIHRoaXN9LFxuaW5pdDpmdW5jdGlvbihhKXt0aGlzLmNsaXBUaW1lPWEtdGhpcy5zdGFydFRpbWU7cmV0dXJuIHRoaXN9LHVwZGF0ZTpmdW5jdGlvbihhKXt0aGlzLnVwZGF0ZVRpbWUoYSk7cmV0dXJuIHRoaXMuY2xpcC5nZXRBdCh0aGlzLmNsaXBUaW1lKX0sZ2V0VGltZVNjYWxlQXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMudGltZVNjYWxlLmdldEF0P3RoaXMudGltZVNjYWxlLmdldEF0KGEpOnRoaXMudGltZVNjYWxlfSxnZXRXZWlnaHRBdDpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy53ZWlnaHQuZ2V0QXQ/dGhpcy53ZWlnaHQuZ2V0QXQoYSk6dGhpcy53ZWlnaHR9fTtcblRIUkVFLkFuaW1hdGlvbkNsaXA9ZnVuY3Rpb24oYSxiLGMpe3RoaXMubmFtZT1hO3RoaXMudHJhY2tzPWM7dGhpcy5kdXJhdGlvbj12b2lkIDAhPT1iP2I6LTE7aWYoMD50aGlzLmR1cmF0aW9uKWZvcihhPTA7YTx0aGlzLnRyYWNrcy5sZW5ndGg7YSsrKWI9dGhpcy50cmFja3NbYV0sdGhpcy5kdXJhdGlvbj1NYXRoLm1heChiLmtleXNbYi5rZXlzLmxlbmd0aC0xXS50aW1lKTt0aGlzLnRyaW0oKTt0aGlzLm9wdGltaXplKCk7dGhpcy5yZXN1bHRzPVtdfTtcblRIUkVFLkFuaW1hdGlvbkNsaXAucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5BbmltYXRpb25DbGlwLGdldEF0OmZ1bmN0aW9uKGEpe2E9TWF0aC5tYXgoMCxNYXRoLm1pbihhLHRoaXMuZHVyYXRpb24pKTtmb3IodmFyIGI9MDtiPHRoaXMudHJhY2tzLmxlbmd0aDtiKyspdGhpcy5yZXN1bHRzW2JdPXRoaXMudHJhY2tzW2JdLmdldEF0KGEpO3JldHVybiB0aGlzLnJlc3VsdHN9LHRyaW06ZnVuY3Rpb24oKXtmb3IodmFyIGE9MDthPHRoaXMudHJhY2tzLmxlbmd0aDthKyspdGhpcy50cmFja3NbYV0udHJpbSgwLHRoaXMuZHVyYXRpb24pO3JldHVybiB0aGlzfSxvcHRpbWl6ZTpmdW5jdGlvbigpe2Zvcih2YXIgYT0wO2E8dGhpcy50cmFja3MubGVuZ3RoO2ErKyl0aGlzLnRyYWNrc1thXS5vcHRpbWl6ZSgpO3JldHVybiB0aGlzfX07XG5USFJFRS5BbmltYXRpb25DbGlwLkNyZWF0ZUZyb21Nb3JwaFRhcmdldFNlcXVlbmNlPWZ1bmN0aW9uKGEsYixjKXtmb3IodmFyIGQ9Yi5sZW5ndGgsZT1bXSxnPTA7ZzxkO2crKyl7dmFyIGY9W107Zi5wdXNoKHt0aW1lOihnK2QtMSklZCx2YWx1ZTowfSk7Zi5wdXNoKHt0aW1lOmcsdmFsdWU6MX0pO2YucHVzaCh7dGltZTooZysxKSVkLHZhbHVlOjB9KTtmLnNvcnQoVEhSRUUuS2V5ZnJhbWVUcmFjay5rZXlDb21wYXJlcik7MD09PWZbMF0udGltZSYmZi5wdXNoKHt0aW1lOmQsdmFsdWU6ZlswXS52YWx1ZX0pO2UucHVzaCgobmV3IFRIUkVFLk51bWJlcktleWZyYW1lVHJhY2soXCIubW9ycGhUYXJnZXRJbmZsdWVuY2VzW1wiK2JbZ10ubmFtZStcIl1cIixmKSkuc2NhbGUoMS9jKSl9cmV0dXJuIG5ldyBUSFJFRS5BbmltYXRpb25DbGlwKGEsLTEsZSl9O1xuVEhSRUUuQW5pbWF0aW9uQ2xpcC5maW5kQnlOYW1lPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKyspaWYoYVtjXS5uYW1lPT09YilyZXR1cm4gYVtjXTtyZXR1cm4gbnVsbH07VEhSRUUuQW5pbWF0aW9uQ2xpcC5DcmVhdGVDbGlwc0Zyb21Nb3JwaFRhcmdldFNlcXVlbmNlcz1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz17fSxkPS9eKFtcXHctXSo/KShbXFxkXSspJC8sZT0wLGc9YS5sZW5ndGg7ZTxnO2UrKyl7dmFyIGY9YVtlXSxoPWYubmFtZS5tYXRjaChkKTtpZihoJiYxPGgubGVuZ3RoKXt2YXIgbD1oWzFdOyhoPWNbbF0pfHwoY1tsXT1oPVtdKTtoLnB1c2goZil9fWQ9W107Zm9yKGwgaW4gYylkLnB1c2goVEhSRUUuQW5pbWF0aW9uQ2xpcC5DcmVhdGVGcm9tTW9ycGhUYXJnZXRTZXF1ZW5jZShsLGNbbF0sYikpO3JldHVybiBkfTtcblRIUkVFLkFuaW1hdGlvbkNsaXAucGFyc2U9ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPVtdLGM9MDtjPGEudHJhY2tzLmxlbmd0aDtjKyspYi5wdXNoKFRIUkVFLktleWZyYW1lVHJhY2sucGFyc2UoYS50cmFja3NbY10pLnNjYWxlKDEvYS5mcHMpKTtyZXR1cm4gbmV3IFRIUkVFLkFuaW1hdGlvbkNsaXAoYS5uYW1lLGEuZHVyYXRpb24sYil9O1xuVEhSRUUuQW5pbWF0aW9uQ2xpcC5wYXJzZUFuaW1hdGlvbj1mdW5jdGlvbihhLGIsYyl7aWYoIWEpcmV0dXJuIGNvbnNvbGUuZXJyb3IoXCIgIG5vIGFuaW1hdGlvbiBpbiBKU09OTG9hZGVyIGRhdGFcIiksbnVsbDt2YXIgZD1mdW5jdGlvbihhLGIsYyxkLGUpe2Zvcih2YXIgZz1bXSxmPTA7ZjxiLmxlbmd0aDtmKyspe3ZhciBoPWJbZl07dm9pZCAwIT09aFtjXSYmZy5wdXNoKHt0aW1lOmgudGltZSx2YWx1ZTplKGgpfSl9cmV0dXJuIDA8Zy5sZW5ndGg/bmV3IGQoYSxnKTpudWxsfSxlPVtdLGc9YS5uYW1lfHxcImRlZmF1bHRcIixmPWEubGVuZ3RofHwtMSxoPWEuZnBzfHwzMDthPWEuaGllcmFyY2h5fHxbXTtmb3IodmFyIGw9MDtsPGEubGVuZ3RoO2wrKyl7dmFyIGs9YVtsXS5rZXlzO2lmKGsmJjAhPWsubGVuZ3RoKWlmKGtbMF0ubW9ycGhUYXJnZXRzKXtmb3IodmFyIGY9e30sbT0wO208ay5sZW5ndGg7bSsrKWlmKGtbbV0ubW9ycGhUYXJnZXRzKWZvcih2YXIgcD0wO3A8a1ttXS5tb3JwaFRhcmdldHMubGVuZ3RoO3ArKylmW2tbbV0ubW9ycGhUYXJnZXRzW3BdXT1cbi0xO2Zvcih2YXIgbiBpbiBmKXtmb3IodmFyIHE9W10scD0wO3A8a1ttXS5tb3JwaFRhcmdldHMubGVuZ3RoO3ArKyl7dmFyIHM9a1ttXTtxLnB1c2goe3RpbWU6cy50aW1lLHZhbHVlOnMubW9ycGhUYXJnZXQ9PT1uPzE6MH0pfWUucHVzaChuZXcgVEhSRUUuTnVtYmVyS2V5ZnJhbWVUcmFjayhjK1wiLm1vcnBoVGFyZ2V0SW5mbHVlbmNlW1wiK24rXCJdXCIscSkpfWY9Zi5sZW5ndGgqKGh8fDEpfWVsc2UgbT1jK1wiLmJvbmVzW1wiK2JbbF0ubmFtZStcIl1cIiwocD1kKG0rXCIucG9zaXRpb25cIixrLFwicG9zXCIsVEhSRUUuVmVjdG9yS2V5ZnJhbWVUcmFjayxmdW5jdGlvbihhKXtyZXR1cm4obmV3IFRIUkVFLlZlY3RvcjMpLmZyb21BcnJheShhLnBvcyl9KSkmJmUucHVzaChwKSwocD1kKG0rXCIucXVhdGVybmlvblwiLGssXCJyb3RcIixUSFJFRS5RdWF0ZXJuaW9uS2V5ZnJhbWVUcmFjayxmdW5jdGlvbihhKXtyZXR1cm4gYS5yb3Quc2xlcnA/YS5yb3QuY2xvbmUoKToobmV3IFRIUkVFLlF1YXRlcm5pb24pLmZyb21BcnJheShhLnJvdCl9KSkmJlxuZS5wdXNoKHApLChrPWQobStcIi5zY2FsZVwiLGssXCJzY2xcIixUSFJFRS5WZWN0b3JLZXlmcmFtZVRyYWNrLGZ1bmN0aW9uKGEpe3JldHVybihuZXcgVEhSRUUuVmVjdG9yMykuZnJvbUFycmF5KGEuc2NsKX0pKSYmZS5wdXNoKGspfXJldHVybiAwPT09ZS5sZW5ndGg/bnVsbDpuZXcgVEhSRUUuQW5pbWF0aW9uQ2xpcChnLGYsZSl9O1RIUkVFLkFuaW1hdGlvbk1peGVyPWZ1bmN0aW9uKGEpe3RoaXMucm9vdD1hO3RoaXMudGltZT0wO3RoaXMudGltZVNjYWxlPTE7dGhpcy5hY3Rpb25zPVtdO3RoaXMucHJvcGVydHlCaW5kaW5nTWFwPXt9fTtcblRIUkVFLkFuaW1hdGlvbk1peGVyLnByb3RvdHlwZT17Y29uc3RydWN0b3I6VEhSRUUuQW5pbWF0aW9uTWl4ZXIsYWRkQWN0aW9uOmZ1bmN0aW9uKGEpe3RoaXMuYWN0aW9ucy5wdXNoKGEpO2EuaW5pdCh0aGlzLnRpbWUpO2EubWl4ZXI9dGhpcztmb3IodmFyIGI9YS5jbGlwLnRyYWNrcyxjPWEubG9jYWxSb290fHx0aGlzLnJvb3QsZD0wO2Q8Yi5sZW5ndGg7ZCsrKXt2YXIgZT1iW2RdLGc9Yy51dWlkK1wiLVwiK2UubmFtZSxmPXRoaXMucHJvcGVydHlCaW5kaW5nTWFwW2ddO3ZvaWQgMD09PWYmJihmPW5ldyBUSFJFRS5Qcm9wZXJ0eUJpbmRpbmcoYyxlLm5hbWUpLHRoaXMucHJvcGVydHlCaW5kaW5nTWFwW2ddPWYpO2EucHJvcGVydHlCaW5kaW5ncy5wdXNoKGYpO2YucmVmZXJlbmNlQ291bnQrPTF9fSxyZW1vdmVBbGxBY3Rpb25zOmZ1bmN0aW9uKCl7Zm9yKHZhciBhPTA7YTx0aGlzLmFjdGlvbnMubGVuZ3RoO2ErKyl0aGlzLmFjdGlvbnNbYV0ubWl4ZXI9bnVsbDtmb3IodmFyIGIgaW4gdGhpcy5wcm9wZXJ0eUJpbmRpbmdNYXApdGhpcy5wcm9wZXJ0eUJpbmRpbmdNYXBbYl0udW5iaW5kKCk7XG50aGlzLmFjdGlvbnM9W107dGhpcy5wcm9wZXJ0eUJpbmRpbmdNYXA9e307cmV0dXJuIHRoaXN9LHJlbW92ZUFjdGlvbjpmdW5jdGlvbihhKXt2YXIgYj10aGlzLmFjdGlvbnMuaW5kZXhPZihhKTstMSE9PWImJih0aGlzLmFjdGlvbnMuc3BsaWNlKGIsMSksYS5taXhlcj1udWxsKTtiPWEubG9jYWxSb290fHx0aGlzLnJvb3Q7YT1hLmNsaXAudHJhY2tzO2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7YysrKXt2YXIgZD1iLnV1aWQrXCItXCIrYVtjXS5uYW1lLGU9dGhpcy5wcm9wZXJ0eUJpbmRpbmdNYXBbZF07ZS5yZWZlcmVuY2VDb3VudC09MTswPj1lLnJlZmVyZW5jZUNvdW50JiYoZS51bmJpbmQoKSxkZWxldGUgdGhpcy5wcm9wZXJ0eUJpbmRpbmdNYXBbZF0pfXJldHVybiB0aGlzfSxmaW5kQWN0aW9uQnlOYW1lOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj0wO2I8dGhpcy5hY3Rpb25zLmxlbmd0aDtiKyspaWYodGhpcy5hY3Rpb25zW2JdLm5hbWU9PT1hKXJldHVybiB0aGlzLmFjdGlvbnNbYl07XG5yZXR1cm4gbnVsbH0scGxheTpmdW5jdGlvbihhLGIpe2Euc3RhcnRUaW1lPXRoaXMudGltZTt0aGlzLmFkZEFjdGlvbihhKTtyZXR1cm4gdGhpc30sZmFkZU91dDpmdW5jdGlvbihhLGIpe3ZhciBjPVtdO2MucHVzaCh7dGltZTp0aGlzLnRpbWUsdmFsdWU6MX0pO2MucHVzaCh7dGltZTp0aGlzLnRpbWUrYix2YWx1ZTowfSk7YS53ZWlnaHQ9bmV3IFRIUkVFLk51bWJlcktleWZyYW1lVHJhY2soXCJ3ZWlnaHRcIixjKTtyZXR1cm4gdGhpc30sZmFkZUluOmZ1bmN0aW9uKGEsYil7dmFyIGM9W107Yy5wdXNoKHt0aW1lOnRoaXMudGltZSx2YWx1ZTowfSk7Yy5wdXNoKHt0aW1lOnRoaXMudGltZStiLHZhbHVlOjF9KTthLndlaWdodD1uZXcgVEhSRUUuTnVtYmVyS2V5ZnJhbWVUcmFjayhcIndlaWdodFwiLGMpO3JldHVybiB0aGlzfSx3YXJwOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPVtdO2UucHVzaCh7dGltZTp0aGlzLnRpbWUsdmFsdWU6Yn0pO2UucHVzaCh7dGltZTp0aGlzLnRpbWUrZCx2YWx1ZTpjfSk7XG5hLnRpbWVTY2FsZT1uZXcgVEhSRUUuTnVtYmVyS2V5ZnJhbWVUcmFjayhcInRpbWVTY2FsZVwiLGUpO3JldHVybiB0aGlzfSxjcm9zc0ZhZGU6ZnVuY3Rpb24oYSxiLGMsZCl7dGhpcy5mYWRlT3V0KGEsYyk7dGhpcy5mYWRlSW4oYixjKTtpZihkKXtkPWEuY2xpcC5kdXJhdGlvbi9iLmNsaXAuZHVyYXRpb247dmFyIGU9MS9kO3RoaXMud2FycChhLDEsZCxjKTt0aGlzLndhcnAoYixlLDEsYyl9cmV0dXJuIHRoaXN9LHVwZGF0ZTpmdW5jdGlvbihhKXthKj10aGlzLnRpbWVTY2FsZTt0aGlzLnRpbWUrPWE7Zm9yKHZhciBiPTA7Yjx0aGlzLmFjdGlvbnMubGVuZ3RoO2IrKyl7dmFyIGM9dGhpcy5hY3Rpb25zW2JdLGQ9Yy5nZXRXZWlnaHRBdCh0aGlzLnRpbWUpLGU9Yy5nZXRUaW1lU2NhbGVBdCh0aGlzLnRpbWUpLGU9Yy51cGRhdGUoYSplKTtpZighKDA+PWMud2VpZ2h0KSYmYy5lbmFibGVkKWZvcih2YXIgZz0wO2c8ZS5sZW5ndGg7ZysrKWMucHJvcGVydHlCaW5kaW5nc1tnXS5hY2N1bXVsYXRlKGVbZ10sXG5kKX1mb3IodmFyIGYgaW4gdGhpcy5wcm9wZXJ0eUJpbmRpbmdNYXApdGhpcy5wcm9wZXJ0eUJpbmRpbmdNYXBbZl0uYXBwbHkoKTtyZXR1cm4gdGhpc319O1RIUkVFLkV2ZW50RGlzcGF0Y2hlci5wcm90b3R5cGUuYXBwbHkoVEhSRUUuQW5pbWF0aW9uTWl4ZXIucHJvdG90eXBlKTtcblRIUkVFLkFuaW1hdGlvblV0aWxzPXtnZXRFcXVhbHNGdW5jOmZ1bmN0aW9uKGEpe3JldHVybiBhLmVxdWFscz9mdW5jdGlvbihhLGMpe3JldHVybiBhLmVxdWFscyhjKX06ZnVuY3Rpb24oYSxjKXtyZXR1cm4gYT09PWN9fSxjbG9uZTpmdW5jdGlvbihhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEpe2lmKGEuY2xvbmUpcmV0dXJuIGEuY2xvbmUoKTtjb25zb2xlLmVycm9yKFwiY2FuIG5vdCBmaWd1cmUgb3V0IGhvdyB0byBjb3B5IGV4ZW1wbGFyVmFsdWVcIixhKX1yZXR1cm4gYX0sbGVycDpmdW5jdGlvbihhLGIsYyxkKXtyZXR1cm4gVEhSRUUuQW5pbWF0aW9uVXRpbHMuZ2V0TGVycEZ1bmMoYSxkKShhLGIsYyl9LGxlcnBfb2JqZWN0OmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gYS5sZXJwKGIsYyl9LHNsZXJwX29iamVjdDpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIGEuc2xlcnAoYixjKX0sbGVycF9udW1iZXI6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBhKigxLWMpK2IqY30sbGVycF9ib29sZWFuOmZ1bmN0aW9uKGEsXG5iLGMpe3JldHVybi41PmM/YTpifSxsZXJwX2Jvb2xlYW5faW1tZWRpYXRlOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gYX0sbGVycF9zdHJpbmc6ZnVuY3Rpb24oYSxiLGMpe3JldHVybi41PmM/YTpifSxsZXJwX3N0cmluZ19pbW1lZGlhdGU6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBhfSxnZXRMZXJwRnVuYzpmdW5jdGlvbihhLGIpe2lmKHZvaWQgMD09PWF8fG51bGw9PT1hKXRocm93IEVycm9yKFwiZXhhbXBsYXJWYWx1ZSBpcyBudWxsXCIpO3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcIm9iamVjdFwiOmlmKGEubGVycClyZXR1cm4gVEhSRUUuQW5pbWF0aW9uVXRpbHMubGVycF9vYmplY3Q7aWYoYS5zbGVycClyZXR1cm4gVEhSRUUuQW5pbWF0aW9uVXRpbHMuc2xlcnBfb2JqZWN0O2JyZWFrO2Nhc2UgXCJudW1iZXJcIjpyZXR1cm4gVEhSRUUuQW5pbWF0aW9uVXRpbHMubGVycF9udW1iZXI7Y2FzZSBcImJvb2xlYW5cIjpyZXR1cm4gYj9USFJFRS5BbmltYXRpb25VdGlscy5sZXJwX2Jvb2xlYW46VEhSRUUuQW5pbWF0aW9uVXRpbHMubGVycF9ib29sZWFuX2ltbWVkaWF0ZTtcbmNhc2UgXCJzdHJpbmdcIjpyZXR1cm4gYj9USFJFRS5BbmltYXRpb25VdGlscy5sZXJwX3N0cmluZzpUSFJFRS5BbmltYXRpb25VdGlscy5sZXJwX3N0cmluZ19pbW1lZGlhdGV9fX07VEhSRUUuS2V5ZnJhbWVUcmFjaz1mdW5jdGlvbihhLGIpe2lmKHZvaWQgMD09PWEpdGhyb3cgRXJyb3IoXCJ0cmFjayBuYW1lIGlzIHVuZGVmaW5lZFwiKTtpZih2b2lkIDA9PT1ifHwwPT09Yi5sZW5ndGgpdGhyb3cgRXJyb3IoXCJubyBrZXlzIGluIHRyYWNrIG5hbWVkIFwiK2EpO3RoaXMubmFtZT1hO3RoaXMua2V5cz1iO3RoaXMubGFzdEluZGV4PTA7dGhpcy52YWxpZGF0ZSgpO3RoaXMub3B0aW1pemUoKX07XG5USFJFRS5LZXlmcmFtZVRyYWNrLnByb3RvdHlwZT17Y29uc3RydWN0b3I6VEhSRUUuS2V5ZnJhbWVUcmFjayxnZXRBdDpmdW5jdGlvbihhKXtmb3IoO3RoaXMubGFzdEluZGV4PHRoaXMua2V5cy5sZW5ndGgmJmE+PXRoaXMua2V5c1t0aGlzLmxhc3RJbmRleF0udGltZTspdGhpcy5sYXN0SW5kZXgrKztmb3IoOzA8dGhpcy5sYXN0SW5kZXgmJmE8dGhpcy5rZXlzW3RoaXMubGFzdEluZGV4LTFdLnRpbWU7KXRoaXMubGFzdEluZGV4LS07aWYodGhpcy5sYXN0SW5kZXg+PXRoaXMua2V5cy5sZW5ndGgpcmV0dXJuIHRoaXMuc2V0UmVzdWx0KHRoaXMua2V5c1t0aGlzLmtleXMubGVuZ3RoLTFdLnZhbHVlKSx0aGlzLnJlc3VsdDtpZigwPT09dGhpcy5sYXN0SW5kZXgpcmV0dXJuIHRoaXMuc2V0UmVzdWx0KHRoaXMua2V5c1swXS52YWx1ZSksdGhpcy5yZXN1bHQ7dmFyIGI9dGhpcy5rZXlzW3RoaXMubGFzdEluZGV4LTFdO3RoaXMuc2V0UmVzdWx0KGIudmFsdWUpO2lmKGIuY29uc3RhbnRUb05leHQpcmV0dXJuIHRoaXMucmVzdWx0O1xudmFyIGM9dGhpcy5rZXlzW3RoaXMubGFzdEluZGV4XTtyZXR1cm4gdGhpcy5yZXN1bHQ9dGhpcy5sZXJwVmFsdWVzKHRoaXMucmVzdWx0LGMudmFsdWUsKGEtYi50aW1lKS8oYy50aW1lLWIudGltZSkpfSxzaGlmdDpmdW5jdGlvbihhKXtpZigwIT09YSlmb3IodmFyIGI9MDtiPHRoaXMua2V5cy5sZW5ndGg7YisrKXRoaXMua2V5c1tiXS50aW1lKz1hO3JldHVybiB0aGlzfSxzY2FsZTpmdW5jdGlvbihhKXtpZigxIT09YSlmb3IodmFyIGI9MDtiPHRoaXMua2V5cy5sZW5ndGg7YisrKXRoaXMua2V5c1tiXS50aW1lKj1hO3JldHVybiB0aGlzfSx0cmltOmZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPTAsZD0xO2Q8dGhpcy5rZXlzLmxlbmd0aDtkKyspdGhpcy5rZXlzW2RdPD1hJiZjKys7Zm9yKHZhciBlPTAsZD10aGlzLmtleXMubGVuZ3RoLTI7MDxkO2QrKylpZih0aGlzLmtleXNbZF0+PWIpZSsrO2Vsc2UgYnJlYWs7MDxjK2UmJih0aGlzLmtleXM9dGhpcy5rZXlzLnNwbGljZShjLHRoaXMua2V5cy5sZW5ndGgtXG5lLWMpKTtyZXR1cm4gdGhpc30sdmFsaWRhdGU6ZnVuY3Rpb24oKXt2YXIgYT1udWxsO2lmKDA9PT10aGlzLmtleXMubGVuZ3RoKWNvbnNvbGUuZXJyb3IoXCIgIHRyYWNrIGlzIGVtcHR5LCBubyBrZXlzXCIsdGhpcyk7ZWxzZXtmb3IodmFyIGI9MDtiPHRoaXMua2V5cy5sZW5ndGg7YisrKXt2YXIgYz10aGlzLmtleXNbYl07aWYoIWMpe2NvbnNvbGUuZXJyb3IoXCIgIGtleSBpcyBudWxsIGluIHRyYWNrXCIsdGhpcyxiKTtyZXR1cm59aWYoXCJudW1iZXJcIiE9PXR5cGVvZiBjLnRpbWV8fGlzTmFOKGMudGltZSkpe2NvbnNvbGUuZXJyb3IoXCIgIGtleS50aW1lIGlzIG5vdCBhIHZhbGlkIG51bWJlclwiLHRoaXMsYixjKTtyZXR1cm59aWYodm9pZCAwPT09Yy52YWx1ZXx8bnVsbD09PWMudmFsdWUpe2NvbnNvbGUuZXJyb3IoXCIgIGtleS52YWx1ZSBpcyBudWxsIGluIHRyYWNrXCIsdGhpcyxiLGMpO3JldHVybn1pZihhJiZhLnRpbWU+Yy50aW1lKXtjb25zb2xlLmVycm9yKFwiICBrZXkudGltZSBpcyBsZXNzIHRoYW4gcHJldmlvdXMga2V5IHRpbWUsIG91dCBvZiBvcmRlciBrZXlzXCIsXG50aGlzLGIsYyxhKTtyZXR1cm59YT1jfXJldHVybiB0aGlzfX0sb3B0aW1pemU6ZnVuY3Rpb24oKXt2YXIgYT1bXSxiPXRoaXMua2V5c1swXTthLnB1c2goYik7VEhSRUUuQW5pbWF0aW9uVXRpbHMuZ2V0RXF1YWxzRnVuYyhiLnZhbHVlKTtmb3IodmFyIGM9MTtjPHRoaXMua2V5cy5sZW5ndGgtMTtjKyspe3ZhciBkPXRoaXMua2V5c1tjXSxlPXRoaXMua2V5c1tjKzFdO2IudGltZT09PWQudGltZXx8dGhpcy5jb21wYXJlVmFsdWVzKGIudmFsdWUsZC52YWx1ZSkmJnRoaXMuY29tcGFyZVZhbHVlcyhkLnZhbHVlLGUudmFsdWUpfHwoYi5jb25zdGFudFRvTmV4dD10aGlzLmNvbXBhcmVWYWx1ZXMoYi52YWx1ZSxkLnZhbHVlKSxhLnB1c2goZCksYj1kKX1hLnB1c2godGhpcy5rZXlzW3RoaXMua2V5cy5sZW5ndGgtMV0pO3RoaXMua2V5cz1hO3JldHVybiB0aGlzfX07VEhSRUUuS2V5ZnJhbWVUcmFjay5rZXlDb21wYXJlcj1mdW5jdGlvbihhLGIpe3JldHVybiBhLnRpbWUtYi50aW1lfTtcblRIUkVFLktleWZyYW1lVHJhY2sucGFyc2U9ZnVuY3Rpb24oYSl7aWYodm9pZCAwPT09YS50eXBlKXRocm93IEVycm9yKFwidHJhY2sgdHlwZSB1bmRlZmluZWQsIGNhbiBub3QgcGFyc2VcIik7cmV0dXJuIFRIUkVFLktleWZyYW1lVHJhY2suR2V0VHJhY2tUeXBlRm9yVHlwZU5hbWUoYS50eXBlKS5wYXJzZShhKX07XG5USFJFRS5LZXlmcmFtZVRyYWNrLkdldFRyYWNrVHlwZUZvclR5cGVOYW1lPWZ1bmN0aW9uKGEpe3N3aXRjaChhLnRvTG93ZXJDYXNlKCkpe2Nhc2UgXCJ2ZWN0b3JcIjpjYXNlIFwidmVjdG9yMlwiOmNhc2UgXCJ2ZWN0b3IzXCI6Y2FzZSBcInZlY3RvcjRcIjpyZXR1cm4gVEhSRUUuVmVjdG9yS2V5ZnJhbWVUcmFjaztjYXNlIFwicXVhdGVybmlvblwiOnJldHVybiBUSFJFRS5RdWF0ZXJuaW9uS2V5ZnJhbWVUcmFjaztjYXNlIFwiaW50ZWdlclwiOmNhc2UgXCJzY2FsYXJcIjpjYXNlIFwiZG91YmxlXCI6Y2FzZSBcImZsb2F0XCI6Y2FzZSBcIm51bWJlclwiOnJldHVybiBUSFJFRS5OdW1iZXJLZXlmcmFtZVRyYWNrO2Nhc2UgXCJib29sXCI6Y2FzZSBcImJvb2xlYW5cIjpyZXR1cm4gVEhSRUUuQm9vbGVhbktleWZyYW1lVHJhY2s7Y2FzZSBcInN0cmluZ1wiOnJldHVybiBUSFJFRS5TdHJpbmdLZXlmcmFtZVRyYWNrfXRocm93IEVycm9yKFwiVW5zdXBwb3J0ZWQgdHlwZU5hbWU6IFwiK2EpO307XG5USFJFRS5Qcm9wZXJ0eUJpbmRpbmc9ZnVuY3Rpb24oYSxiKXt0aGlzLnJvb3ROb2RlPWE7dGhpcy50cmFja05hbWU9Yjt0aGlzLnJlZmVyZW5jZUNvdW50PTA7dGhpcy5vcmlnaW5hbFZhbHVlPW51bGw7dmFyIGM9VEhSRUUuUHJvcGVydHlCaW5kaW5nLnBhcnNlVHJhY2tOYW1lKGIpO3RoaXMuZGlyZWN0b3J5TmFtZT1jLmRpcmVjdG9yeU5hbWU7dGhpcy5ub2RlTmFtZT1jLm5vZGVOYW1lO3RoaXMub2JqZWN0TmFtZT1jLm9iamVjdE5hbWU7dGhpcy5vYmplY3RJbmRleD1jLm9iamVjdEluZGV4O3RoaXMucHJvcGVydHlOYW1lPWMucHJvcGVydHlOYW1lO3RoaXMucHJvcGVydHlJbmRleD1jLnByb3BlcnR5SW5kZXg7dGhpcy5ub2RlPVRIUkVFLlByb3BlcnR5QmluZGluZy5maW5kTm9kZShhLHRoaXMubm9kZU5hbWUpfHxhO3RoaXMuY3VtdWxhdGl2ZVZhbHVlPW51bGw7dGhpcy5jdW11bGF0aXZlV2VpZ2h0PTB9O1xuVEhSRUUuUHJvcGVydHlCaW5kaW5nLnByb3RvdHlwZT17Y29uc3RydWN0b3I6VEhSRUUuUHJvcGVydHlCaW5kaW5nLHJlc2V0OmZ1bmN0aW9uKCl7dGhpcy5jdW11bGF0aXZlVmFsdWU9bnVsbDt0aGlzLmN1bXVsYXRpdmVXZWlnaHQ9MH0sYWNjdW11bGF0ZTpmdW5jdGlvbihhLGIpe3RoaXMuaXNCb3VuZHx8dGhpcy5iaW5kKCk7MD09PXRoaXMuY3VtdWxhdGl2ZVdlaWdodD8wPGImJihudWxsPT09dGhpcy5jdW11bGF0aXZlVmFsdWUmJih0aGlzLmN1bXVsYXRpdmVWYWx1ZT1USFJFRS5BbmltYXRpb25VdGlscy5jbG9uZShhKSksdGhpcy5jdW11bGF0aXZlV2VpZ2h0PWIpOih0aGlzLmN1bXVsYXRpdmVWYWx1ZT10aGlzLmxlcnBWYWx1ZSh0aGlzLmN1bXVsYXRpdmVWYWx1ZSxhLGIvKHRoaXMuY3VtdWxhdGl2ZVdlaWdodCtiKSksdGhpcy5jdW11bGF0aXZlV2VpZ2h0Kz1iKX0sdW5iaW5kOmZ1bmN0aW9uKCl7dGhpcy5pc0JvdW5kJiYodGhpcy5zZXRWYWx1ZSh0aGlzLm9yaWdpbmFsVmFsdWUpLFxudGhpcy50cmlnZ2VyRGlydHk9dGhpcy5lcXVhbHNWYWx1ZT10aGlzLmxlcnBWYWx1ZT10aGlzLmdldFZhbHVlPXRoaXMuc2V0VmFsdWU9bnVsbCx0aGlzLmlzQm91bmQ9ITEpfSxiaW5kOmZ1bmN0aW9uKCl7aWYoIXRoaXMuaXNCb3VuZCl7dmFyIGE9dGhpcy5ub2RlO2lmKGEpe2lmKHRoaXMub2JqZWN0TmFtZSl7aWYoXCJtYXRlcmlhbHNcIj09PXRoaXMub2JqZWN0TmFtZSl7aWYoIWEubWF0ZXJpYWwpe2NvbnNvbGUuZXJyb3IoXCIgIGNhbiBub3QgYmluZCB0byBtYXRlcmlhbCBhcyBub2RlIGRvZXMgbm90IGhhdmUgYSBtYXRlcmlhbFwiLHRoaXMpO3JldHVybn1pZighYS5tYXRlcmlhbC5tYXRlcmlhbHMpe2NvbnNvbGUuZXJyb3IoXCIgIGNhbiBub3QgYmluZCB0byBtYXRlcmlhbC5tYXRlcmlhbHMgYXMgbm9kZS5tYXRlcmlhbCBkb2VzIG5vdCBoYXZlIGEgbWF0ZXJpYWxzIGFycmF5XCIsdGhpcyk7cmV0dXJufWE9YS5tYXRlcmlhbC5tYXRlcmlhbHN9ZWxzZSBpZihcImJvbmVzXCI9PT10aGlzLm9iamVjdE5hbWUpe2lmKCFhLnNrZWxldG9uKXtjb25zb2xlLmVycm9yKFwiICBjYW4gbm90IGJpbmQgdG8gYm9uZXMgYXMgbm9kZSBkb2VzIG5vdCBoYXZlIGEgc2tlbGV0b25cIixcbnRoaXMpO3JldHVybn1mb3IodmFyIGE9YS5za2VsZXRvbi5ib25lcyxiPTA7YjxhLmxlbmd0aDtiKyspaWYoYVtiXS5uYW1lPT09dGhpcy5vYmplY3RJbmRleCl7dGhpcy5vYmplY3RJbmRleD1iO2JyZWFrfX1lbHNle2lmKHZvaWQgMD09PWFbdGhpcy5vYmplY3ROYW1lXSl7Y29uc29sZS5lcnJvcihcIiAgY2FuIG5vdCBiaW5kIHRvIG9iamVjdE5hbWUgb2Ygbm9kZSwgdW5kZWZpbmVkXCIsdGhpcyk7cmV0dXJufWE9YVt0aGlzLm9iamVjdE5hbWVdfWlmKHZvaWQgMCE9PXRoaXMub2JqZWN0SW5kZXgpe2lmKHZvaWQgMD09PWFbdGhpcy5vYmplY3RJbmRleF0pe2NvbnNvbGUuZXJyb3IoXCIgIHRyeWluZyB0byBiaW5kIHRvIG9iamVjdEluZGV4IG9mIG9iamVjdE5hbWUsIGJ1dCBpcyB1bmRlZmluZWQ6XCIsdGhpcyxhKTtyZXR1cm59YT1hW3RoaXMub2JqZWN0SW5kZXhdfX12YXIgYz1hW3RoaXMucHJvcGVydHlOYW1lXTtpZihjKXtpZih2b2lkIDAhPT10aGlzLnByb3BlcnR5SW5kZXgpe2lmKFwibW9ycGhUYXJnZXRJbmZsdWVuY2VzXCI9PT1cbnRoaXMucHJvcGVydHlOYW1lKWZvcihhLmdlb21ldHJ5fHxjb25zb2xlLmVycm9yKFwiICBjYW4gbm90IGJpbmQgdG8gbW9ycGhUYXJnZXRJbmZsdWVuY2VzIGJlY2FzdXNlIG5vZGUgZG9lcyBub3QgaGF2ZSBhIGdlb21ldHJ5XCIsdGhpcyksYS5nZW9tZXRyeS5tb3JwaFRhcmdldHN8fGNvbnNvbGUuZXJyb3IoXCIgIGNhbiBub3QgYmluZCB0byBtb3JwaFRhcmdldEluZmx1ZW5jZXMgYmVjYXN1c2Ugbm9kZSBkb2VzIG5vdCBoYXZlIGEgZ2VvbWV0cnkubW9ycGhUYXJnZXRzXCIsdGhpcyksYj0wO2I8dGhpcy5ub2RlLmdlb21ldHJ5Lm1vcnBoVGFyZ2V0cy5sZW5ndGg7YisrKWlmKGEuZ2VvbWV0cnkubW9ycGhUYXJnZXRzW2JdLm5hbWU9PT10aGlzLnByb3BlcnR5SW5kZXgpe3RoaXMucHJvcGVydHlJbmRleD1iO2JyZWFrfXRoaXMuc2V0VmFsdWU9ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuZXF1YWxzVmFsdWUoY1t0aGlzLnByb3BlcnR5SW5kZXhdLGEpPyExOihjW3RoaXMucHJvcGVydHlJbmRleF09XG5hLCEwKX07dGhpcy5nZXRWYWx1ZT1mdW5jdGlvbigpe3JldHVybiBjW3RoaXMucHJvcGVydHlJbmRleF19fWVsc2UgYy5jb3B5Pyh0aGlzLnNldFZhbHVlPWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmVxdWFsc1ZhbHVlKGMsYSk/ITE6KGMuY29weShhKSwhMCl9LHRoaXMuZ2V0VmFsdWU9ZnVuY3Rpb24oKXtyZXR1cm4gY30pOih0aGlzLnNldFZhbHVlPWZ1bmN0aW9uKGIpe3JldHVybiB0aGlzLmVxdWFsc1ZhbHVlKGFbdGhpcy5wcm9wZXJ0eU5hbWVdLGIpPyExOihhW3RoaXMucHJvcGVydHlOYW1lXT1iLCEwKX0sdGhpcy5nZXRWYWx1ZT1mdW5jdGlvbigpe3JldHVybiBhW3RoaXMucHJvcGVydHlOYW1lXX0pO3ZvaWQgMCE9PWEubmVlZHNVcGRhdGU/dGhpcy50cmlnZ2VyRGlydHk9ZnVuY3Rpb24oKXt0aGlzLm5vZGUubmVlZHNVcGRhdGU9ITB9OnZvaWQgMCE9PWEubWF0cml4V29ybGROZWVkc1VwZGF0ZSYmKHRoaXMudHJpZ2dlckRpcnR5PWZ1bmN0aW9uKCl7YS5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlPVxuITB9KTt0aGlzLm9yaWdpbmFsVmFsdWU9dGhpcy5nZXRWYWx1ZSgpO3RoaXMuZXF1YWxzVmFsdWU9VEhSRUUuQW5pbWF0aW9uVXRpbHMuZ2V0RXF1YWxzRnVuYyh0aGlzLm9yaWdpbmFsVmFsdWUpO3RoaXMubGVycFZhbHVlPVRIUkVFLkFuaW1hdGlvblV0aWxzLmdldExlcnBGdW5jKHRoaXMub3JpZ2luYWxWYWx1ZSwhMCk7dGhpcy5pc0JvdW5kPSEwfWVsc2UgY29uc29sZS5lcnJvcihcIiAgdHJ5aW5nIHRvIHVwZGF0ZSBwcm9wZXJ0eSBmb3IgdHJhY2s6IFwiK3RoaXMubm9kZU5hbWUrXCIuXCIrdGhpcy5wcm9wZXJ0eU5hbWUrXCIgYnV0IGl0IHdhc24ndCBmb3VuZC5cIixhKX1lbHNlIGNvbnNvbGUuZXJyb3IoXCIgIHRyeWluZyB0byB1cGRhdGUgbm9kZSBmb3IgdHJhY2s6IFwiK3RoaXMudHJhY2tOYW1lK1wiIGJ1dCBpdCB3YXNuJ3QgZm91bmQuXCIpfX0sYXBwbHk6ZnVuY3Rpb24oKXt0aGlzLmlzQm91bmR8fHRoaXMuYmluZCgpO2lmKDA8dGhpcy5jdW11bGF0aXZlV2VpZ2h0KXtpZigxPnRoaXMuY3VtdWxhdGl2ZVdlaWdodCl7dmFyIGE9XG4xLXRoaXMuY3VtdWxhdGl2ZVdlaWdodDt0aGlzLmN1bXVsYXRpdmVWYWx1ZT10aGlzLmxlcnBWYWx1ZSh0aGlzLmN1bXVsYXRpdmVWYWx1ZSx0aGlzLm9yaWdpbmFsVmFsdWUsYS8odGhpcy5jdW11bGF0aXZlV2VpZ2h0K2EpKX10aGlzLnNldFZhbHVlKHRoaXMuY3VtdWxhdGl2ZVZhbHVlKSYmdGhpcy50cmlnZ2VyRGlydHkmJnRoaXMudHJpZ2dlckRpcnR5KCk7dGhpcy5jdW11bGF0aXZlVmFsdWU9bnVsbDt0aGlzLmN1bXVsYXRpdmVXZWlnaHQ9MH19fTtcblRIUkVFLlByb3BlcnR5QmluZGluZy5wYXJzZVRyYWNrTmFtZT1mdW5jdGlvbihhKXt2YXIgYj0vXigoW1xcd10rXFwvKSopKFtcXHctXFxkXSspPyhcXC4oW1xcd10rKShcXFsoW1xcd1xcZFxcW1xcXVxcXy4gXSspXFxdKT8pPyhcXC4oW1xcdy5dKykoXFxbKFtcXHdcXGRcXFtcXF1cXF8uIF0rKVxcXSk/KSQvLGM9Yi5leGVjKGEpO2lmKCFjKXRocm93IEVycm9yKFwiY2Fubm90IHBhcnNlIHRyYWNrTmFtZSBhdCBhbGw6IFwiK2EpO2MuaW5kZXg9PT1iLmxhc3RJbmRleCYmYi5sYXN0SW5kZXgrKztiPXtkaXJlY3RvcnlOYW1lOmNbMV0sbm9kZU5hbWU6Y1szXSxvYmplY3ROYW1lOmNbNV0sb2JqZWN0SW5kZXg6Y1s3XSxwcm9wZXJ0eU5hbWU6Y1s5XSxwcm9wZXJ0eUluZGV4OmNbMTFdfTtpZihudWxsPT09Yi5wcm9wZXJ0eU5hbWV8fDA9PT1iLnByb3BlcnR5TmFtZS5sZW5ndGgpdGhyb3cgRXJyb3IoXCJjYW4gbm90IHBhcnNlIHByb3BlcnR5TmFtZSBmcm9tIHRyYWNrTmFtZTogXCIrYSk7cmV0dXJuIGJ9O1xuVEhSRUUuUHJvcGVydHlCaW5kaW5nLmZpbmROb2RlPWZ1bmN0aW9uKGEsYil7ZnVuY3Rpb24gYyhhKXtmb3IodmFyIGM9MDtjPGEuYm9uZXMubGVuZ3RoO2MrKyl7dmFyIGQ9YS5ib25lc1tjXTtpZihkLm5hbWU9PT1iKXJldHVybiBkfXJldHVybiBudWxsfWZ1bmN0aW9uIGQoYSl7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKyspe3ZhciBlPWFbY107aWYoZS5uYW1lPT09Ynx8ZS51dWlkPT09Ynx8KGU9ZChlLmNoaWxkcmVuKSkpcmV0dXJuIGV9cmV0dXJuIG51bGx9aWYoIWJ8fFwiXCI9PT1ifHxcInJvb3RcIj09PWJ8fFwiLlwiPT09Ynx8LTE9PT1ifHxiPT09YS5uYW1lfHxiPT09YS51dWlkKXJldHVybiBhO2lmKGEuc2tlbGV0b24pe3ZhciBlPWMoYS5za2VsZXRvbik7aWYoZSlyZXR1cm4gZX1yZXR1cm4gYS5jaGlsZHJlbiYmKGU9ZChhLmNoaWxkcmVuKSk/ZTpudWxsfTtcblRIUkVFLlZlY3RvcktleWZyYW1lVHJhY2s9ZnVuY3Rpb24oYSxiKXtUSFJFRS5LZXlmcmFtZVRyYWNrLmNhbGwodGhpcyxhLGIpO3RoaXMucmVzdWx0PXRoaXMua2V5c1swXS52YWx1ZS5jbG9uZSgpfTtUSFJFRS5WZWN0b3JLZXlmcmFtZVRyYWNrLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLktleWZyYW1lVHJhY2sucHJvdG90eXBlKTtUSFJFRS5WZWN0b3JLZXlmcmFtZVRyYWNrLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5WZWN0b3JLZXlmcmFtZVRyYWNrO1RIUkVFLlZlY3RvcktleWZyYW1lVHJhY2sucHJvdG90eXBlLnNldFJlc3VsdD1mdW5jdGlvbihhKXt0aGlzLnJlc3VsdC5jb3B5KGEpfTtUSFJFRS5WZWN0b3JLZXlmcmFtZVRyYWNrLnByb3RvdHlwZS5sZXJwVmFsdWVzPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gYS5sZXJwKGIsYyl9O1RIUkVFLlZlY3RvcktleWZyYW1lVHJhY2sucHJvdG90eXBlLmNvbXBhcmVWYWx1ZXM9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS5lcXVhbHMoYil9O1xuVEhSRUUuVmVjdG9yS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oKXtmb3IodmFyIGE9W10sYj0wO2I8dGhpcy5rZXlzLmxlbmd0aDtiKyspe3ZhciBjPXRoaXMua2V5c1tiXTthLnB1c2goe3RpbWU6Yy50aW1lLHZhbHVlOmMudmFsdWUuY2xvbmUoKX0pfXJldHVybiBuZXcgVEhSRUUuVmVjdG9yS2V5ZnJhbWVUcmFjayh0aGlzLm5hbWUsYSl9O1RIUkVFLlZlY3RvcktleWZyYW1lVHJhY2sucGFyc2U9ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPVRIUkVFW1wiVmVjdG9yXCIrYS5rZXlzWzBdLnZhbHVlLmxlbmd0aF0sYz1bXSxkPTA7ZDxhLmtleXMubGVuZ3RoO2QrKyl7dmFyIGU9YS5rZXlzW2RdO2MucHVzaCh7dmFsdWU6KG5ldyBiKS5mcm9tQXJyYXkoZS52YWx1ZSksdGltZTplLnRpbWV9KX1yZXR1cm4gbmV3IFRIUkVFLlZlY3RvcktleWZyYW1lVHJhY2soYS5uYW1lLGMpfTtcblRIUkVFLlF1YXRlcm5pb25LZXlmcmFtZVRyYWNrPWZ1bmN0aW9uKGEsYil7VEhSRUUuS2V5ZnJhbWVUcmFjay5jYWxsKHRoaXMsYSxiKTt0aGlzLnJlc3VsdD10aGlzLmtleXNbMF0udmFsdWUuY2xvbmUoKX07VEhSRUUuUXVhdGVybmlvbktleWZyYW1lVHJhY2sucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUpO1RIUkVFLlF1YXRlcm5pb25LZXlmcmFtZVRyYWNrLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5RdWF0ZXJuaW9uS2V5ZnJhbWVUcmFjaztUSFJFRS5RdWF0ZXJuaW9uS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUuc2V0UmVzdWx0PWZ1bmN0aW9uKGEpe3RoaXMucmVzdWx0LmNvcHkoYSl9O1RIUkVFLlF1YXRlcm5pb25LZXlmcmFtZVRyYWNrLnByb3RvdHlwZS5sZXJwVmFsdWVzPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gYS5zbGVycChiLGMpfTtcblRIUkVFLlF1YXRlcm5pb25LZXlmcmFtZVRyYWNrLnByb3RvdHlwZS5jb21wYXJlVmFsdWVzPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGEuZXF1YWxzKGIpfTtUSFJFRS5RdWF0ZXJuaW9uS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUubXVsdGlwbHk9ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPTA7Yjx0aGlzLmtleXMubGVuZ3RoO2IrKyl0aGlzLmtleXNbYl0udmFsdWUubXVsdGlwbHkoYSk7cmV0dXJuIHRoaXN9O1RIUkVFLlF1YXRlcm5pb25LZXlmcmFtZVRyYWNrLnByb3RvdHlwZS5jbG9uZT1mdW5jdGlvbigpe2Zvcih2YXIgYT1bXSxiPTA7Yjx0aGlzLmtleXMubGVuZ3RoO2IrKyl7dmFyIGM9dGhpcy5rZXlzW2JdO2EucHVzaCh7dGltZTpjLnRpbWUsdmFsdWU6Yy52YWx1ZS5jbG9uZSgpfSl9cmV0dXJuIG5ldyBUSFJFRS5RdWF0ZXJuaW9uS2V5ZnJhbWVUcmFjayh0aGlzLm5hbWUsYSl9O1xuVEhSRUUuUXVhdGVybmlvbktleWZyYW1lVHJhY2sucGFyc2U9ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPVtdLGM9MDtjPGEua2V5cy5sZW5ndGg7YysrKXt2YXIgZD1hLmtleXNbY107Yi5wdXNoKHt2YWx1ZToobmV3IFRIUkVFLlF1YXRlcm5pb24pLmZyb21BcnJheShkLnZhbHVlKSx0aW1lOmQudGltZX0pfXJldHVybiBuZXcgVEhSRUUuUXVhdGVybmlvbktleWZyYW1lVHJhY2soYS5uYW1lLGIpfTtUSFJFRS5TdHJpbmdLZXlmcmFtZVRyYWNrPWZ1bmN0aW9uKGEsYil7VEhSRUUuS2V5ZnJhbWVUcmFjay5jYWxsKHRoaXMsYSxiKTt0aGlzLnJlc3VsdD10aGlzLmtleXNbMF0udmFsdWV9O1RIUkVFLlN0cmluZ0tleWZyYW1lVHJhY2sucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUpO1RIUkVFLlN0cmluZ0tleWZyYW1lVHJhY2sucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLlN0cmluZ0tleWZyYW1lVHJhY2s7XG5USFJFRS5TdHJpbmdLZXlmcmFtZVRyYWNrLnByb3RvdHlwZS5zZXRSZXN1bHQ9ZnVuY3Rpb24oYSl7dGhpcy5yZXN1bHQ9YX07VEhSRUUuU3RyaW5nS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUubGVycFZhbHVlcz1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIDE+Yz9hOmJ9O1RIUkVFLlN0cmluZ0tleWZyYW1lVHJhY2sucHJvdG90eXBlLmNvbXBhcmVWYWx1ZXM9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYT09PWJ9O1RIUkVFLlN0cmluZ0tleWZyYW1lVHJhY2sucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7Zm9yKHZhciBhPVtdLGI9MDtiPHRoaXMua2V5cy5sZW5ndGg7YisrKXt2YXIgYz10aGlzLmtleXNbYl07YS5wdXNoKHt0aW1lOmMudGltZSx2YWx1ZTpjLnZhbHVlfSl9cmV0dXJuIG5ldyBUSFJFRS5TdHJpbmdLZXlmcmFtZVRyYWNrKHRoaXMubmFtZSxhKX07XG5USFJFRS5TdHJpbmdLZXlmcmFtZVRyYWNrLnBhcnNlPWZ1bmN0aW9uKGEpe3JldHVybiBuZXcgVEhSRUUuU3RyaW5nS2V5ZnJhbWVUcmFjayhhLm5hbWUsYS5rZXlzKX07VEhSRUUuQm9vbGVhbktleWZyYW1lVHJhY2s9ZnVuY3Rpb24oYSxiKXtUSFJFRS5LZXlmcmFtZVRyYWNrLmNhbGwodGhpcyxhLGIpO3RoaXMucmVzdWx0PXRoaXMua2V5c1swXS52YWx1ZX07VEhSRUUuQm9vbGVhbktleWZyYW1lVHJhY2sucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUpO1RIUkVFLkJvb2xlYW5LZXlmcmFtZVRyYWNrLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5Cb29sZWFuS2V5ZnJhbWVUcmFjaztUSFJFRS5Cb29sZWFuS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUuc2V0UmVzdWx0PWZ1bmN0aW9uKGEpe3RoaXMucmVzdWx0PWF9O1xuVEhSRUUuQm9vbGVhbktleWZyYW1lVHJhY2sucHJvdG90eXBlLmxlcnBWYWx1ZXM9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiAxPmM/YTpifTtUSFJFRS5Cb29sZWFuS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUuY29tcGFyZVZhbHVlcz1mdW5jdGlvbihhLGIpe3JldHVybiBhPT09Yn07VEhSRUUuQm9vbGVhbktleWZyYW1lVHJhY2sucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7Zm9yKHZhciBhPVtdLGI9MDtiPHRoaXMua2V5cy5sZW5ndGg7YisrKXt2YXIgYz10aGlzLmtleXNbYl07YS5wdXNoKHt0aW1lOmMudGltZSx2YWx1ZTpjLnZhbHVlfSl9cmV0dXJuIG5ldyBUSFJFRS5Cb29sZWFuS2V5ZnJhbWVUcmFjayh0aGlzLm5hbWUsYSl9O1RIUkVFLkJvb2xlYW5LZXlmcmFtZVRyYWNrLnBhcnNlPWZ1bmN0aW9uKGEpe3JldHVybiBuZXcgVEhSRUUuQm9vbGVhbktleWZyYW1lVHJhY2soYS5uYW1lLGEua2V5cyl9O1xuVEhSRUUuTnVtYmVyS2V5ZnJhbWVUcmFjaz1mdW5jdGlvbihhLGIpe1RIUkVFLktleWZyYW1lVHJhY2suY2FsbCh0aGlzLGEsYik7dGhpcy5yZXN1bHQ9dGhpcy5rZXlzWzBdLnZhbHVlfTtUSFJFRS5OdW1iZXJLZXlmcmFtZVRyYWNrLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLktleWZyYW1lVHJhY2sucHJvdG90eXBlKTtUSFJFRS5OdW1iZXJLZXlmcmFtZVRyYWNrLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5OdW1iZXJLZXlmcmFtZVRyYWNrO1RIUkVFLk51bWJlcktleWZyYW1lVHJhY2sucHJvdG90eXBlLnNldFJlc3VsdD1mdW5jdGlvbihhKXt0aGlzLnJlc3VsdD1hfTtUSFJFRS5OdW1iZXJLZXlmcmFtZVRyYWNrLnByb3RvdHlwZS5sZXJwVmFsdWVzPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gYSooMS1jKStiKmN9O1RIUkVFLk51bWJlcktleWZyYW1lVHJhY2sucHJvdG90eXBlLmNvbXBhcmVWYWx1ZXM9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYT09PWJ9O1xuVEhSRUUuTnVtYmVyS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oKXtmb3IodmFyIGE9W10sYj0wO2I8dGhpcy5rZXlzLmxlbmd0aDtiKyspe3ZhciBjPXRoaXMua2V5c1tiXTthLnB1c2goe3RpbWU6Yy50aW1lLHZhbHVlOmMudmFsdWV9KX1yZXR1cm4gbmV3IFRIUkVFLk51bWJlcktleWZyYW1lVHJhY2sodGhpcy5uYW1lLGEpfTtUSFJFRS5OdW1iZXJLZXlmcmFtZVRyYWNrLnBhcnNlPWZ1bmN0aW9uKGEpe3JldHVybiBuZXcgVEhSRUUuTnVtYmVyS2V5ZnJhbWVUcmFjayhhLm5hbWUsYS5rZXlzKX07VEhSRUUuQ2FtZXJhPWZ1bmN0aW9uKCl7VEhSRUUuT2JqZWN0M0QuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJDYW1lcmFcIjt0aGlzLm1hdHJpeFdvcmxkSW52ZXJzZT1uZXcgVEhSRUUuTWF0cml4NDt0aGlzLnByb2plY3Rpb25NYXRyaXg9bmV3IFRIUkVFLk1hdHJpeDR9O1RIUkVFLkNhbWVyYS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5PYmplY3QzRC5wcm90b3R5cGUpO1xuVEhSRUUuQ2FtZXJhLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5DYW1lcmE7VEhSRUUuQ2FtZXJhLnByb3RvdHlwZS5nZXRXb3JsZERpcmVjdGlvbj1mdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5RdWF0ZXJuaW9uO3JldHVybiBmdW5jdGlvbihiKXtiPWJ8fG5ldyBUSFJFRS5WZWN0b3IzO3RoaXMuZ2V0V29ybGRRdWF0ZXJuaW9uKGEpO3JldHVybiBiLnNldCgwLDAsLTEpLmFwcGx5UXVhdGVybmlvbihhKX19KCk7VEhSRUUuQ2FtZXJhLnByb3RvdHlwZS5sb29rQXQ9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuTWF0cml4NDtyZXR1cm4gZnVuY3Rpb24oYil7YS5sb29rQXQodGhpcy5wb3NpdGlvbixiLHRoaXMudXApO3RoaXMucXVhdGVybmlvbi5zZXRGcm9tUm90YXRpb25NYXRyaXgoYSl9fSgpO1RIUkVFLkNhbWVyYS5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oKXtyZXR1cm4obmV3IHRoaXMuY29uc3RydWN0b3IpLmNvcHkodGhpcyl9O1xuVEhSRUUuQ2FtZXJhLnByb3RvdHlwZS5jb3B5PWZ1bmN0aW9uKGEpe1RIUkVFLk9iamVjdDNELnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcyxhKTt0aGlzLm1hdHJpeFdvcmxkSW52ZXJzZS5jb3B5KGEubWF0cml4V29ybGRJbnZlcnNlKTt0aGlzLnByb2plY3Rpb25NYXRyaXguY29weShhLnByb2plY3Rpb25NYXRyaXgpO3JldHVybiB0aGlzfTtcblRIUkVFLkN1YmVDYW1lcmE9ZnVuY3Rpb24oYSxiLGMpe1RIUkVFLk9iamVjdDNELmNhbGwodGhpcyk7dGhpcy50eXBlPVwiQ3ViZUNhbWVyYVwiO3ZhciBkPW5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSg5MCwxLGEsYik7ZC51cC5zZXQoMCwtMSwwKTtkLmxvb2tBdChuZXcgVEhSRUUuVmVjdG9yMygxLDAsMCkpO3RoaXMuYWRkKGQpO3ZhciBlPW5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSg5MCwxLGEsYik7ZS51cC5zZXQoMCwtMSwwKTtlLmxvb2tBdChuZXcgVEhSRUUuVmVjdG9yMygtMSwwLDApKTt0aGlzLmFkZChlKTt2YXIgZz1uZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoOTAsMSxhLGIpO2cudXAuc2V0KDAsMCwxKTtnLmxvb2tBdChuZXcgVEhSRUUuVmVjdG9yMygwLDEsMCkpO3RoaXMuYWRkKGcpO3ZhciBmPW5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSg5MCwxLGEsYik7Zi51cC5zZXQoMCwwLC0xKTtmLmxvb2tBdChuZXcgVEhSRUUuVmVjdG9yMygwLC0xLDApKTtcbnRoaXMuYWRkKGYpO3ZhciBoPW5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSg5MCwxLGEsYik7aC51cC5zZXQoMCwtMSwwKTtoLmxvb2tBdChuZXcgVEhSRUUuVmVjdG9yMygwLDAsMSkpO3RoaXMuYWRkKGgpO3ZhciBsPW5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSg5MCwxLGEsYik7bC51cC5zZXQoMCwtMSwwKTtsLmxvb2tBdChuZXcgVEhSRUUuVmVjdG9yMygwLDAsLTEpKTt0aGlzLmFkZChsKTt0aGlzLnJlbmRlclRhcmdldD1uZXcgVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXRDdWJlKGMsYyx7Zm9ybWF0OlRIUkVFLlJHQkZvcm1hdCxtYWdGaWx0ZXI6VEhSRUUuTGluZWFyRmlsdGVyLG1pbkZpbHRlcjpUSFJFRS5MaW5lYXJGaWx0ZXJ9KTt0aGlzLnVwZGF0ZUN1YmVNYXA9ZnVuY3Rpb24oYSxiKXtudWxsPT09dGhpcy5wYXJlbnQmJnRoaXMudXBkYXRlTWF0cml4V29ybGQoKTt2YXIgYz10aGlzLnJlbmRlclRhcmdldCxuPWMudGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHM7Yy50ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcz1cbiExO2MuYWN0aXZlQ3ViZUZhY2U9MDthLnJlbmRlcihiLGQsYyk7Yy5hY3RpdmVDdWJlRmFjZT0xO2EucmVuZGVyKGIsZSxjKTtjLmFjdGl2ZUN1YmVGYWNlPTI7YS5yZW5kZXIoYixnLGMpO2MuYWN0aXZlQ3ViZUZhY2U9MzthLnJlbmRlcihiLGYsYyk7Yy5hY3RpdmVDdWJlRmFjZT00O2EucmVuZGVyKGIsaCxjKTtjLnRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzPW47Yy5hY3RpdmVDdWJlRmFjZT01O2EucmVuZGVyKGIsbCxjKTthLnNldFJlbmRlclRhcmdldChudWxsKX19O1RIUkVFLkN1YmVDYW1lcmEucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuT2JqZWN0M0QucHJvdG90eXBlKTtUSFJFRS5DdWJlQ2FtZXJhLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5DdWJlQ2FtZXJhO1xuVEhSRUUuT3J0aG9ncmFwaGljQ2FtZXJhPWZ1bmN0aW9uKGEsYixjLGQsZSxnKXtUSFJFRS5DYW1lcmEuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJPcnRob2dyYXBoaWNDYW1lcmFcIjt0aGlzLnpvb209MTt0aGlzLmxlZnQ9YTt0aGlzLnJpZ2h0PWI7dGhpcy50b3A9Yzt0aGlzLmJvdHRvbT1kO3RoaXMubmVhcj12b2lkIDAhPT1lP2U6LjE7dGhpcy5mYXI9dm9pZCAwIT09Zz9nOjJFMzt0aGlzLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKX07VEhSRUUuT3J0aG9ncmFwaGljQ2FtZXJhLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkNhbWVyYS5wcm90b3R5cGUpO1RIUkVFLk9ydGhvZ3JhcGhpY0NhbWVyYS5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuT3J0aG9ncmFwaGljQ2FtZXJhO1xuVEhSRUUuT3J0aG9ncmFwaGljQ2FtZXJhLnByb3RvdHlwZS51cGRhdGVQcm9qZWN0aW9uTWF0cml4PWZ1bmN0aW9uKCl7dmFyIGE9KHRoaXMucmlnaHQtdGhpcy5sZWZ0KS8oMip0aGlzLnpvb20pLGI9KHRoaXMudG9wLXRoaXMuYm90dG9tKS8oMip0aGlzLnpvb20pLGM9KHRoaXMucmlnaHQrdGhpcy5sZWZ0KS8yLGQ9KHRoaXMudG9wK3RoaXMuYm90dG9tKS8yO3RoaXMucHJvamVjdGlvbk1hdHJpeC5tYWtlT3J0aG9ncmFwaGljKGMtYSxjK2EsZCtiLGQtYix0aGlzLm5lYXIsdGhpcy5mYXIpfTtUSFJFRS5PcnRob2dyYXBoaWNDYW1lcmEucHJvdG90eXBlLmNvcHk9ZnVuY3Rpb24oYSl7VEhSRUUuQ2FtZXJhLnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcyxhKTt0aGlzLmxlZnQ9YS5sZWZ0O3RoaXMucmlnaHQ9YS5yaWdodDt0aGlzLnRvcD1hLnRvcDt0aGlzLmJvdHRvbT1hLmJvdHRvbTt0aGlzLm5lYXI9YS5uZWFyO3RoaXMuZmFyPWEuZmFyO3RoaXMuem9vbT1hLnpvb207cmV0dXJuIHRoaXN9O1xuVEhSRUUuT3J0aG9ncmFwaGljQ2FtZXJhLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oYSl7YT1USFJFRS5PYmplY3QzRC5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcyxhKTthLm9iamVjdC56b29tPXRoaXMuem9vbTthLm9iamVjdC5sZWZ0PXRoaXMubGVmdDthLm9iamVjdC5yaWdodD10aGlzLnJpZ2h0O2Eub2JqZWN0LnRvcD10aGlzLnRvcDthLm9iamVjdC5ib3R0b209dGhpcy5ib3R0b207YS5vYmplY3QubmVhcj10aGlzLm5lYXI7YS5vYmplY3QuZmFyPXRoaXMuZmFyO3JldHVybiBhfTtUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYT1mdW5jdGlvbihhLGIsYyxkKXtUSFJFRS5DYW1lcmEuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJQZXJzcGVjdGl2ZUNhbWVyYVwiO3RoaXMuem9vbT0xO3RoaXMuZm92PXZvaWQgMCE9PWE/YTo1MDt0aGlzLmFzcGVjdD12b2lkIDAhPT1iP2I6MTt0aGlzLm5lYXI9dm9pZCAwIT09Yz9jOi4xO3RoaXMuZmFyPXZvaWQgMCE9PWQ/ZDoyRTM7dGhpcy51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCl9O1xuVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuQ2FtZXJhLnByb3RvdHlwZSk7VEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhO1RIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhLnByb3RvdHlwZS5zZXRMZW5zPWZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9MjQpO3RoaXMuZm92PTIqVEhSRUUuTWF0aC5yYWRUb0RlZyhNYXRoLmF0YW4oYi8oMiphKSkpO3RoaXMudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpfTtUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYS5wcm90b3R5cGUuc2V0Vmlld09mZnNldD1mdW5jdGlvbihhLGIsYyxkLGUsZyl7dGhpcy5mdWxsV2lkdGg9YTt0aGlzLmZ1bGxIZWlnaHQ9Yjt0aGlzLng9Yzt0aGlzLnk9ZDt0aGlzLndpZHRoPWU7dGhpcy5oZWlnaHQ9Zzt0aGlzLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKX07XG5USFJFRS5QZXJzcGVjdGl2ZUNhbWVyYS5wcm90b3R5cGUudXBkYXRlUHJvamVjdGlvbk1hdHJpeD1mdW5jdGlvbigpe3ZhciBhPVRIUkVFLk1hdGgucmFkVG9EZWcoMipNYXRoLmF0YW4oTWF0aC50YW4oLjUqVEhSRUUuTWF0aC5kZWdUb1JhZCh0aGlzLmZvdikpL3RoaXMuem9vbSkpO2lmKHRoaXMuZnVsbFdpZHRoKXt2YXIgYj10aGlzLmZ1bGxXaWR0aC90aGlzLmZ1bGxIZWlnaHQsYT1NYXRoLnRhbihUSFJFRS5NYXRoLmRlZ1RvUmFkKC41KmEpKSp0aGlzLm5lYXIsYz0tYSxkPWIqYyxiPU1hdGguYWJzKGIqYS1kKSxjPU1hdGguYWJzKGEtYyk7dGhpcy5wcm9qZWN0aW9uTWF0cml4Lm1ha2VGcnVzdHVtKGQrdGhpcy54KmIvdGhpcy5mdWxsV2lkdGgsZCsodGhpcy54K3RoaXMud2lkdGgpKmIvdGhpcy5mdWxsV2lkdGgsYS0odGhpcy55K3RoaXMuaGVpZ2h0KSpjL3RoaXMuZnVsbEhlaWdodCxhLXRoaXMueSpjL3RoaXMuZnVsbEhlaWdodCx0aGlzLm5lYXIsdGhpcy5mYXIpfWVsc2UgdGhpcy5wcm9qZWN0aW9uTWF0cml4Lm1ha2VQZXJzcGVjdGl2ZShhLFxudGhpcy5hc3BlY3QsdGhpcy5uZWFyLHRoaXMuZmFyKX07VEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEucHJvdG90eXBlLmNvcHk9ZnVuY3Rpb24oYSl7VEhSRUUuQ2FtZXJhLnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcyxhKTt0aGlzLmZvdj1hLmZvdjt0aGlzLmFzcGVjdD1hLmFzcGVjdDt0aGlzLm5lYXI9YS5uZWFyO3RoaXMuZmFyPWEuZmFyO3RoaXMuem9vbT1hLnpvb207cmV0dXJuIHRoaXN9O1RIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oYSl7YT1USFJFRS5PYmplY3QzRC5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcyxhKTthLm9iamVjdC56b29tPXRoaXMuem9vbTthLm9iamVjdC5mb3Y9dGhpcy5mb3Y7YS5vYmplY3QuYXNwZWN0PXRoaXMuYXNwZWN0O2Eub2JqZWN0Lm5lYXI9dGhpcy5uZWFyO2Eub2JqZWN0LmZhcj10aGlzLmZhcjtyZXR1cm4gYX07XG5USFJFRS5MaWdodD1mdW5jdGlvbihhKXtUSFJFRS5PYmplY3QzRC5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIkxpZ2h0XCI7dGhpcy5jb2xvcj1uZXcgVEhSRUUuQ29sb3IoYSk7dGhpcy5yZWNlaXZlU2hhZG93PXZvaWQgMH07VEhSRUUuTGlnaHQucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuT2JqZWN0M0QucHJvdG90eXBlKTtUSFJFRS5MaWdodC5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuTGlnaHQ7XG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhUSFJFRS5MaWdodC5wcm90b3R5cGUse29ubHlTaGFkb3c6e3NldDpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5MaWdodDogLm9ubHlTaGFkb3cgaGFzIGJlZW4gcmVtb3ZlZC5cIil9fSxzaGFkb3dDYW1lcmFGb3Y6e3NldDpmdW5jdGlvbihhKXt0aGlzLnNoYWRvdy5jYW1lcmEuZm92PWF9fSxzaGFkb3dDYW1lcmFMZWZ0OntzZXQ6ZnVuY3Rpb24oYSl7dGhpcy5zaGFkb3cuY2FtZXJhLmxlZnQ9YX19LHNoYWRvd0NhbWVyYVJpZ2h0OntzZXQ6ZnVuY3Rpb24oYSl7dGhpcy5zaGFkb3cuY2FtZXJhLnJpZ2h0PWF9fSxzaGFkb3dDYW1lcmFUb3A6e3NldDpmdW5jdGlvbihhKXt0aGlzLnNoYWRvdy5jYW1lcmEudG9wPWF9fSxzaGFkb3dDYW1lcmFCb3R0b206e3NldDpmdW5jdGlvbihhKXt0aGlzLnNoYWRvdy5jYW1lcmEuYm90dG9tPWF9fSxzaGFkb3dDYW1lcmFOZWFyOntzZXQ6ZnVuY3Rpb24oYSl7dGhpcy5zaGFkb3cuY2FtZXJhLm5lYXI9XG5hfX0sc2hhZG93Q2FtZXJhRmFyOntzZXQ6ZnVuY3Rpb24oYSl7dGhpcy5zaGFkb3cuY2FtZXJhLmZhcj1hfX0sc2hhZG93Q2FtZXJhVmlzaWJsZTp7c2V0OmZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLkxpZ2h0OiAuc2hhZG93Q2FtZXJhVmlzaWJsZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbmV3IFRIUkVFLkNhbWVyYUhlbHBlciggbGlnaHQuc2hhZG93ICkgaW5zdGVhZC5cIil9fSxzaGFkb3dCaWFzOntzZXQ6ZnVuY3Rpb24oYSl7dGhpcy5zaGFkb3cuYmlhcz1hfX0sc2hhZG93RGFya25lc3M6e3NldDpmdW5jdGlvbihhKXt0aGlzLnNoYWRvdy5kYXJrbmVzcz1hfX0sc2hhZG93TWFwV2lkdGg6e3NldDpmdW5jdGlvbihhKXt0aGlzLnNoYWRvdy5tYXBTaXplLndpZHRoPWF9fSxzaGFkb3dNYXBIZWlnaHQ6e3NldDpmdW5jdGlvbihhKXt0aGlzLnNoYWRvdy5tYXBTaXplLmhlaWdodD1hfX19KTtcblRIUkVFLkxpZ2h0LnByb3RvdHlwZS5jb3B5PWZ1bmN0aW9uKGEpe1RIUkVFLk9iamVjdDNELnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcyxhKTt0aGlzLmNvbG9yLmNvcHkoYS5jb2xvcik7cmV0dXJuIHRoaXN9O1xuVEhSRUUuTGlnaHQucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbihhKXthPVRIUkVFLk9iamVjdDNELnByb3RvdHlwZS50b0pTT04uY2FsbCh0aGlzLGEpO2Eub2JqZWN0LmNvbG9yPXRoaXMuY29sb3IuZ2V0SGV4KCk7dm9pZCAwIT09dGhpcy5ncm91bmRDb2xvciYmKGEub2JqZWN0Lmdyb3VuZENvbG9yPXRoaXMuZ3JvdW5kQ29sb3IuZ2V0SGV4KCkpO3ZvaWQgMCE9PXRoaXMuaW50ZW5zaXR5JiYoYS5vYmplY3QuaW50ZW5zaXR5PXRoaXMuaW50ZW5zaXR5KTt2b2lkIDAhPT10aGlzLmRpc3RhbmNlJiYoYS5vYmplY3QuZGlzdGFuY2U9dGhpcy5kaXN0YW5jZSk7dm9pZCAwIT09dGhpcy5hbmdsZSYmKGEub2JqZWN0LmFuZ2xlPXRoaXMuYW5nbGUpO3ZvaWQgMCE9PXRoaXMuZGVjYXkmJihhLm9iamVjdC5kZWNheT10aGlzLmRlY2F5KTt2b2lkIDAhPT10aGlzLmV4cG9uZW50JiYoYS5vYmplY3QuZXhwb25lbnQ9dGhpcy5leHBvbmVudCk7cmV0dXJuIGF9O1xuVEhSRUUuTGlnaHRTaGFkb3c9ZnVuY3Rpb24oYSl7dGhpcy5jYW1lcmE9YTt0aGlzLmJpYXM9MDt0aGlzLmRhcmtuZXNzPTE7dGhpcy5tYXBTaXplPW5ldyBUSFJFRS5WZWN0b3IyKDUxMiw1MTIpO3RoaXMubWF0cml4PXRoaXMubWFwPW51bGx9O1RIUkVFLkxpZ2h0U2hhZG93LnByb3RvdHlwZT17Y29uc3RydWN0b3I6VEhSRUUuTGlnaHRTaGFkb3csY29weTpmdW5jdGlvbihhKXt0aGlzLmNhbWVyYT1hLmNhbWVyYS5jbG9uZSgpO3RoaXMuYmlhcz1hLmJpYXM7dGhpcy5kYXJrbmVzcz1hLmRhcmtuZXNzO3RoaXMubWFwU2l6ZS5jb3B5KGEubWFwU2l6ZSl9LGNsb25lOmZ1bmN0aW9uKCl7cmV0dXJuKG5ldyB0aGlzLmNvbnN0cnVjdG9yKS5jb3B5KHRoaXMpfX07VEhSRUUuQW1iaWVudExpZ2h0PWZ1bmN0aW9uKGEpe1RIUkVFLkxpZ2h0LmNhbGwodGhpcyxhKTt0aGlzLnR5cGU9XCJBbWJpZW50TGlnaHRcIjt0aGlzLmNhc3RTaGFkb3c9dm9pZCAwfTtcblRIUkVFLkFtYmllbnRMaWdodC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5MaWdodC5wcm90b3R5cGUpO1RIUkVFLkFtYmllbnRMaWdodC5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuQW1iaWVudExpZ2h0O1RIUkVFLkRpcmVjdGlvbmFsTGlnaHQ9ZnVuY3Rpb24oYSxiKXtUSFJFRS5MaWdodC5jYWxsKHRoaXMsYSk7dGhpcy50eXBlPVwiRGlyZWN0aW9uYWxMaWdodFwiO3RoaXMucG9zaXRpb24uc2V0KDAsMSwwKTt0aGlzLnVwZGF0ZU1hdHJpeCgpO3RoaXMudGFyZ2V0PW5ldyBUSFJFRS5PYmplY3QzRDt0aGlzLmludGVuc2l0eT12b2lkIDAhPT1iP2I6MTt0aGlzLnNoYWRvdz1uZXcgVEhSRUUuTGlnaHRTaGFkb3cobmV3IFRIUkVFLk9ydGhvZ3JhcGhpY0NhbWVyYSgtNTAwLDUwMCw1MDAsLTUwMCw1MCw1RTMpKX07VEhSRUUuRGlyZWN0aW9uYWxMaWdodC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5MaWdodC5wcm90b3R5cGUpO1xuVEhSRUUuRGlyZWN0aW9uYWxMaWdodC5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuRGlyZWN0aW9uYWxMaWdodDtUSFJFRS5EaXJlY3Rpb25hbExpZ2h0LnByb3RvdHlwZS5jb3B5PWZ1bmN0aW9uKGEpe1RIUkVFLkxpZ2h0LnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcyxhKTt0aGlzLmludGVuc2l0eT1hLmludGVuc2l0eTt0aGlzLnRhcmdldD1hLnRhcmdldC5jbG9uZSgpO3RoaXMuc2hhZG93PWEuc2hhZG93LmNsb25lKCk7cmV0dXJuIHRoaXN9O1RIUkVFLkhlbWlzcGhlcmVMaWdodD1mdW5jdGlvbihhLGIsYyl7VEhSRUUuTGlnaHQuY2FsbCh0aGlzLGEpO3RoaXMudHlwZT1cIkhlbWlzcGhlcmVMaWdodFwiO3RoaXMuY2FzdFNoYWRvdz12b2lkIDA7dGhpcy5wb3NpdGlvbi5zZXQoMCwxLDApO3RoaXMudXBkYXRlTWF0cml4KCk7dGhpcy5ncm91bmRDb2xvcj1uZXcgVEhSRUUuQ29sb3IoYik7dGhpcy5pbnRlbnNpdHk9dm9pZCAwIT09Yz9jOjF9O1xuVEhSRUUuSGVtaXNwaGVyZUxpZ2h0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkxpZ2h0LnByb3RvdHlwZSk7VEhSRUUuSGVtaXNwaGVyZUxpZ2h0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5IZW1pc3BoZXJlTGlnaHQ7VEhSRUUuSGVtaXNwaGVyZUxpZ2h0LnByb3RvdHlwZS5jb3B5PWZ1bmN0aW9uKGEpe1RIUkVFLkxpZ2h0LnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcyxhKTt0aGlzLmdyb3VuZENvbG9yLmNvcHkoYS5ncm91bmRDb2xvcik7dGhpcy5pbnRlbnNpdHk9YS5pbnRlbnNpdHk7cmV0dXJuIHRoaXN9O1xuVEhSRUUuUG9pbnRMaWdodD1mdW5jdGlvbihhLGIsYyxkKXtUSFJFRS5MaWdodC5jYWxsKHRoaXMsYSk7dGhpcy50eXBlPVwiUG9pbnRMaWdodFwiO3RoaXMuaW50ZW5zaXR5PXZvaWQgMCE9PWI/YjoxO3RoaXMuZGlzdGFuY2U9dm9pZCAwIT09Yz9jOjA7dGhpcy5kZWNheT12b2lkIDAhPT1kP2Q6MTt0aGlzLnNoYWRvdz1uZXcgVEhSRUUuTGlnaHRTaGFkb3cobmV3IFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKDkwLDEsMSw1MDApKX07VEhSRUUuUG9pbnRMaWdodC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5MaWdodC5wcm90b3R5cGUpO1RIUkVFLlBvaW50TGlnaHQucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLlBvaW50TGlnaHQ7XG5USFJFRS5Qb2ludExpZ2h0LnByb3RvdHlwZS5jb3B5PWZ1bmN0aW9uKGEpe1RIUkVFLkxpZ2h0LnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcyxhKTt0aGlzLmludGVuc2l0eT1hLmludGVuc2l0eTt0aGlzLmRpc3RhbmNlPWEuZGlzdGFuY2U7dGhpcy5kZWNheT1hLmRlY2F5O3RoaXMuc2hhZG93PWEuc2hhZG93LmNsb25lKCk7cmV0dXJuIHRoaXN9O1xuVEhSRUUuU3BvdExpZ2h0PWZ1bmN0aW9uKGEsYixjLGQsZSxnKXtUSFJFRS5MaWdodC5jYWxsKHRoaXMsYSk7dGhpcy50eXBlPVwiU3BvdExpZ2h0XCI7dGhpcy5wb3NpdGlvbi5zZXQoMCwxLDApO3RoaXMudXBkYXRlTWF0cml4KCk7dGhpcy50YXJnZXQ9bmV3IFRIUkVFLk9iamVjdDNEO3RoaXMuaW50ZW5zaXR5PXZvaWQgMCE9PWI/YjoxO3RoaXMuZGlzdGFuY2U9dm9pZCAwIT09Yz9jOjA7dGhpcy5hbmdsZT12b2lkIDAhPT1kP2Q6TWF0aC5QSS8zO3RoaXMuZXhwb25lbnQ9dm9pZCAwIT09ZT9lOjEwO3RoaXMuZGVjYXk9dm9pZCAwIT09Zz9nOjE7dGhpcy5zaGFkb3c9bmV3IFRIUkVFLkxpZ2h0U2hhZG93KG5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSg1MCwxLDUwLDVFMykpfTtUSFJFRS5TcG90TGlnaHQucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuTGlnaHQucHJvdG90eXBlKTtUSFJFRS5TcG90TGlnaHQucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLlNwb3RMaWdodDtcblRIUkVFLlNwb3RMaWdodC5wcm90b3R5cGUuY29weT1mdW5jdGlvbihhKXtUSFJFRS5MaWdodC5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsYSk7dGhpcy5pbnRlbnNpdHk9YS5pbnRlbnNpdHk7dGhpcy5kaXN0YW5jZT1hLmRpc3RhbmNlO3RoaXMuYW5nbGU9YS5hbmdsZTt0aGlzLmV4cG9uZW50PWEuZXhwb25lbnQ7dGhpcy5kZWNheT1hLmRlY2F5O3RoaXMudGFyZ2V0PWEudGFyZ2V0LmNsb25lKCk7dGhpcy5zaGFkb3c9YS5zaGFkb3cuY2xvbmUoKTtyZXR1cm4gdGhpc307VEhSRUUuQ2FjaGU9e2VuYWJsZWQ6ITEsZmlsZXM6e30sYWRkOmZ1bmN0aW9uKGEsYil7ITEhPT10aGlzLmVuYWJsZWQmJih0aGlzLmZpbGVzW2FdPWIpfSxnZXQ6ZnVuY3Rpb24oYSl7aWYoITEhPT10aGlzLmVuYWJsZWQpcmV0dXJuIHRoaXMuZmlsZXNbYV19LHJlbW92ZTpmdW5jdGlvbihhKXtkZWxldGUgdGhpcy5maWxlc1thXX0sY2xlYXI6ZnVuY3Rpb24oKXt0aGlzLmZpbGVzPXt9fX07XG5USFJFRS5Mb2FkZXI9ZnVuY3Rpb24oKXt0aGlzLm9uTG9hZFN0YXJ0PWZ1bmN0aW9uKCl7fTt0aGlzLm9uTG9hZFByb2dyZXNzPWZ1bmN0aW9uKCl7fTt0aGlzLm9uTG9hZENvbXBsZXRlPWZ1bmN0aW9uKCl7fX07XG5USFJFRS5Mb2FkZXIucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5Mb2FkZXIsY3Jvc3NPcmlnaW46dm9pZCAwLGV4dHJhY3RVcmxCYXNlOmZ1bmN0aW9uKGEpe2E9YS5zcGxpdChcIi9cIik7aWYoMT09PWEubGVuZ3RoKXJldHVyblwiLi9cIjthLnBvcCgpO3JldHVybiBhLmpvaW4oXCIvXCIpK1wiL1wifSxpbml0TWF0ZXJpYWxzOmZ1bmN0aW9uKGEsYixjKXtmb3IodmFyIGQ9W10sZT0wO2U8YS5sZW5ndGg7KytlKWRbZV09dGhpcy5jcmVhdGVNYXRlcmlhbChhW2VdLGIsYyk7cmV0dXJuIGR9LGNyZWF0ZU1hdGVyaWFsOmZ1bmN0aW9uKCl7dmFyIGEsYixjO3JldHVybiBmdW5jdGlvbihkLGUsZyl7ZnVuY3Rpb24gZihhLGMsZCxmLGwpe2E9ZSthO3ZhciBrPVRIUkVFLkxvYWRlci5IYW5kbGVycy5nZXQoYSk7bnVsbCE9PWs/YT1rLmxvYWQoYSk6KGIuc2V0Q3Jvc3NPcmlnaW4oZyksYT1iLmxvYWQoYSkpO3ZvaWQgMCE9PWMmJihhLnJlcGVhdC5mcm9tQXJyYXkoYyksMSE9PWNbMF0mJihhLndyYXBTPVxuVEhSRUUuUmVwZWF0V3JhcHBpbmcpLDEhPT1jWzFdJiYoYS53cmFwVD1USFJFRS5SZXBlYXRXcmFwcGluZykpO3ZvaWQgMCE9PWQmJmEub2Zmc2V0LmZyb21BcnJheShkKTt2b2lkIDAhPT1mJiYoXCJyZXBlYXRcIj09PWZbMF0mJihhLndyYXBTPVRIUkVFLlJlcGVhdFdyYXBwaW5nKSxcIm1pcnJvclwiPT09ZlswXSYmKGEud3JhcFM9VEhSRUUuTWlycm9yZWRSZXBlYXRXcmFwcGluZyksXCJyZXBlYXRcIj09PWZbMV0mJihhLndyYXBUPVRIUkVFLlJlcGVhdFdyYXBwaW5nKSxcIm1pcnJvclwiPT09ZlsxXSYmKGEud3JhcFQ9VEhSRUUuTWlycm9yZWRSZXBlYXRXcmFwcGluZykpO3ZvaWQgMCE9PWwmJihhLmFuaXNvdHJvcHk9bCk7Yz1USFJFRS5NYXRoLmdlbmVyYXRlVVVJRCgpO2hbY109YTtyZXR1cm4gY312b2lkIDA9PT1hJiYoYT1uZXcgVEhSRUUuQ29sb3IpO3ZvaWQgMD09PWImJihiPW5ldyBUSFJFRS5UZXh0dXJlTG9hZGVyKTt2b2lkIDA9PT1jJiYoYz1uZXcgVEhSRUUuTWF0ZXJpYWxMb2FkZXIpO1xudmFyIGg9e30sbD17dXVpZDpUSFJFRS5NYXRoLmdlbmVyYXRlVVVJRCgpLHR5cGU6XCJNZXNoTGFtYmVydE1hdGVyaWFsXCJ9LGs7Zm9yKGsgaW4gZCl7dmFyIG09ZFtrXTtzd2l0Y2goayl7Y2FzZSBcIkRiZ0NvbG9yXCI6bC5jb2xvcj1tO2JyZWFrO2Nhc2UgXCJEYmdJbmRleFwiOmNhc2UgXCJvcHRpY2FsRGVuc2l0eVwiOmNhc2UgXCJpbGx1bWluYXRpb25cIjpicmVhaztjYXNlIFwiRGJnTmFtZVwiOmwubmFtZT1tO2JyZWFrO2Nhc2UgXCJibGVuZGluZ1wiOmwuYmxlbmRpbmc9VEhSRUVbbV07YnJlYWs7Y2FzZSBcImNvbG9yRGlmZnVzZVwiOmwuY29sb3I9YS5mcm9tQXJyYXkobSkuZ2V0SGV4KCk7YnJlYWs7Y2FzZSBcImNvbG9yU3BlY3VsYXJcIjpsLnNwZWN1bGFyPWEuZnJvbUFycmF5KG0pLmdldEhleCgpO2JyZWFrO2Nhc2UgXCJjb2xvckVtaXNzaXZlXCI6bC5lbWlzc2l2ZT1hLmZyb21BcnJheShtKS5nZXRIZXgoKTticmVhaztjYXNlIFwic3BlY3VsYXJDb2VmXCI6bC5zaGluaW5lc3M9bTticmVhaztjYXNlIFwic2hhZGluZ1wiOlwiYmFzaWNcIj09PVxubS50b0xvd2VyQ2FzZSgpJiYobC50eXBlPVwiTWVzaEJhc2ljTWF0ZXJpYWxcIik7XCJwaG9uZ1wiPT09bS50b0xvd2VyQ2FzZSgpJiYobC50eXBlPVwiTWVzaFBob25nTWF0ZXJpYWxcIik7YnJlYWs7Y2FzZSBcIm1hcERpZmZ1c2VcIjpsLm1hcD1mKG0sZC5tYXBEaWZmdXNlUmVwZWF0LGQubWFwRGlmZnVzZU9mZnNldCxkLm1hcERpZmZ1c2VXcmFwLGQubWFwRGlmZnVzZUFuaXNvdHJvcHkpO2JyZWFrO2Nhc2UgXCJtYXBEaWZmdXNlUmVwZWF0XCI6Y2FzZSBcIm1hcERpZmZ1c2VPZmZzZXRcIjpjYXNlIFwibWFwRGlmZnVzZVdyYXBcIjpjYXNlIFwibWFwRGlmZnVzZUFuaXNvdHJvcHlcIjpicmVhaztjYXNlIFwibWFwTGlnaHRcIjpsLmxpZ2h0TWFwPWYobSxkLm1hcExpZ2h0UmVwZWF0LGQubWFwTGlnaHRPZmZzZXQsZC5tYXBMaWdodFdyYXAsZC5tYXBMaWdodEFuaXNvdHJvcHkpO2JyZWFrO2Nhc2UgXCJtYXBMaWdodFJlcGVhdFwiOmNhc2UgXCJtYXBMaWdodE9mZnNldFwiOmNhc2UgXCJtYXBMaWdodFdyYXBcIjpjYXNlIFwibWFwTGlnaHRBbmlzb3Ryb3B5XCI6YnJlYWs7XG5jYXNlIFwibWFwQU9cIjpsLmFvTWFwPWYobSxkLm1hcEFPUmVwZWF0LGQubWFwQU9PZmZzZXQsZC5tYXBBT1dyYXAsZC5tYXBBT0FuaXNvdHJvcHkpO2JyZWFrO2Nhc2UgXCJtYXBBT1JlcGVhdFwiOmNhc2UgXCJtYXBBT09mZnNldFwiOmNhc2UgXCJtYXBBT1dyYXBcIjpjYXNlIFwibWFwQU9Bbmlzb3Ryb3B5XCI6YnJlYWs7Y2FzZSBcIm1hcEJ1bXBcIjpsLmJ1bXBNYXA9ZihtLGQubWFwQnVtcFJlcGVhdCxkLm1hcEJ1bXBPZmZzZXQsZC5tYXBCdW1wV3JhcCxkLm1hcEJ1bXBBbmlzb3Ryb3B5KTticmVhaztjYXNlIFwibWFwQnVtcFNjYWxlXCI6bC5idW1wU2NhbGU9bTticmVhaztjYXNlIFwibWFwQnVtcFJlcGVhdFwiOmNhc2UgXCJtYXBCdW1wT2Zmc2V0XCI6Y2FzZSBcIm1hcEJ1bXBXcmFwXCI6Y2FzZSBcIm1hcEJ1bXBBbmlzb3Ryb3B5XCI6YnJlYWs7Y2FzZSBcIm1hcE5vcm1hbFwiOmwubm9ybWFsTWFwPWYobSxkLm1hcE5vcm1hbFJlcGVhdCxkLm1hcE5vcm1hbE9mZnNldCxkLm1hcE5vcm1hbFdyYXAsZC5tYXBOb3JtYWxBbmlzb3Ryb3B5KTtcbmJyZWFrO2Nhc2UgXCJtYXBOb3JtYWxGYWN0b3JcIjpsLm5vcm1hbFNjYWxlPVttLG1dO2JyZWFrO2Nhc2UgXCJtYXBOb3JtYWxSZXBlYXRcIjpjYXNlIFwibWFwTm9ybWFsT2Zmc2V0XCI6Y2FzZSBcIm1hcE5vcm1hbFdyYXBcIjpjYXNlIFwibWFwTm9ybWFsQW5pc290cm9weVwiOmJyZWFrO2Nhc2UgXCJtYXBTcGVjdWxhclwiOmwuc3BlY3VsYXJNYXA9ZihtLGQubWFwU3BlY3VsYXJSZXBlYXQsZC5tYXBTcGVjdWxhck9mZnNldCxkLm1hcFNwZWN1bGFyV3JhcCxkLm1hcFNwZWN1bGFyQW5pc290cm9weSk7YnJlYWs7Y2FzZSBcIm1hcFNwZWN1bGFyUmVwZWF0XCI6Y2FzZSBcIm1hcFNwZWN1bGFyT2Zmc2V0XCI6Y2FzZSBcIm1hcFNwZWN1bGFyV3JhcFwiOmNhc2UgXCJtYXBTcGVjdWxhckFuaXNvdHJvcHlcIjpicmVhaztjYXNlIFwibWFwQWxwaGFcIjpsLmFscGhhTWFwPWYobSxkLm1hcEFscGhhUmVwZWF0LGQubWFwQWxwaGFPZmZzZXQsZC5tYXBBbHBoYVdyYXAsZC5tYXBBbHBoYUFuaXNvdHJvcHkpO2JyZWFrO2Nhc2UgXCJtYXBBbHBoYVJlcGVhdFwiOmNhc2UgXCJtYXBBbHBoYU9mZnNldFwiOmNhc2UgXCJtYXBBbHBoYVdyYXBcIjpjYXNlIFwibWFwQWxwaGFBbmlzb3Ryb3B5XCI6YnJlYWs7XG5jYXNlIFwiZmxpcFNpZGVkXCI6bC5zaWRlPVRIUkVFLkJhY2tTaWRlO2JyZWFrO2Nhc2UgXCJkb3VibGVTaWRlZFwiOmwuc2lkZT1USFJFRS5Eb3VibGVTaWRlO2JyZWFrO2Nhc2UgXCJ0cmFuc3BhcmVuY3lcIjpjb25zb2xlLndhcm4oXCJUSFJFRS5Mb2FkZXI6IHRyYW5zcGFyZW5jeSBoYXMgYmVlbiByZW5hbWVkIHRvIG9wYWNpdHlcIik7bC5vcGFjaXR5PW07YnJlYWs7Y2FzZSBcIm9wYWNpdHlcIjpjYXNlIFwidHJhbnNwYXJlbnRcIjpjYXNlIFwiZGVwdGhUZXN0XCI6Y2FzZSBcImRlcHRoV3JpdGVcIjpjYXNlIFwidHJhbnNwYXJlbnRcIjpjYXNlIFwidmlzaWJsZVwiOmNhc2UgXCJ3aXJlZnJhbWVcIjpsW2tdPW07YnJlYWs7Y2FzZSBcInZlcnRleENvbG9yc1wiOiEwPT09bSYmKGwudmVydGV4Q29sb3JzPVRIUkVFLlZlcnRleENvbG9ycyk7XCJmYWNlXCI9PT1tJiYobC52ZXJ0ZXhDb2xvcnM9VEhSRUUuRmFjZUNvbG9ycyk7YnJlYWs7ZGVmYXVsdDpjb25zb2xlLmVycm9yKFwiTG9hZGVyLmNyZWF0ZU1hdGVyaWFsOiBVbnN1cHBvcnRlZFwiLFxuayxtKX19XCJNZXNoUGhvbmdNYXRlcmlhbFwiIT09bC50eXBlJiZkZWxldGUgbC5zcGVjdWxhcjsxPmwub3BhY2l0eSYmKGwudHJhbnNwYXJlbnQ9ITApO2Muc2V0VGV4dHVyZXMoaCk7cmV0dXJuIGMucGFyc2UobCl9fSgpfTtUSFJFRS5Mb2FkZXIuSGFuZGxlcnM9e2hhbmRsZXJzOltdLGFkZDpmdW5jdGlvbihhLGIpe3RoaXMuaGFuZGxlcnMucHVzaChhLGIpfSxnZXQ6ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPXRoaXMuaGFuZGxlcnMsYz0wLGQ9Yi5sZW5ndGg7YzxkO2MrPTIpe3ZhciBlPWJbYysxXTtpZihiW2NdLnRlc3QoYSkpcmV0dXJuIGV9cmV0dXJuIG51bGx9fTtUSFJFRS5YSFJMb2FkZXI9ZnVuY3Rpb24oYSl7dGhpcy5tYW5hZ2VyPXZvaWQgMCE9PWE/YTpUSFJFRS5EZWZhdWx0TG9hZGluZ01hbmFnZXJ9O1xuVEhSRUUuWEhSTG9hZGVyLnByb3RvdHlwZT17Y29uc3RydWN0b3I6VEhSRUUuWEhSTG9hZGVyLGxvYWQ6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9dGhpcyxnPVRIUkVFLkNhY2hlLmdldChhKTtpZih2b2lkIDAhPT1nKXJldHVybiBiJiZzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7YihnKX0sMCksZzt2YXIgZj1uZXcgWE1MSHR0cFJlcXVlc3Q7Zi5vcGVuKFwiR0VUXCIsYSwhMCk7Zi5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLGZ1bmN0aW9uKGMpe2M9Yy50YXJnZXQucmVzcG9uc2U7VEhSRUUuQ2FjaGUuYWRkKGEsYyk7YiYmYihjKTtlLm1hbmFnZXIuaXRlbUVuZChhKX0sITEpO3ZvaWQgMCE9PWMmJmYuYWRkRXZlbnRMaXN0ZW5lcihcInByb2dyZXNzXCIsZnVuY3Rpb24oYSl7YyhhKX0sITEpO2YuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsZnVuY3Rpb24oYil7ZCYmZChiKTtlLm1hbmFnZXIuaXRlbUVycm9yKGEpfSwhMSk7dm9pZCAwIT09dGhpcy5jcm9zc09yaWdpbiYmKGYuY3Jvc3NPcmlnaW49XG50aGlzLmNyb3NzT3JpZ2luKTt2b2lkIDAhPT10aGlzLnJlc3BvbnNlVHlwZSYmKGYucmVzcG9uc2VUeXBlPXRoaXMucmVzcG9uc2VUeXBlKTt2b2lkIDAhPT10aGlzLndpdGhDcmVkZW50aWFscyYmKGYud2l0aENyZWRlbnRpYWxzPXRoaXMud2l0aENyZWRlbnRpYWxzKTtmLnNlbmQobnVsbCk7ZS5tYW5hZ2VyLml0ZW1TdGFydChhKTtyZXR1cm4gZn0sc2V0UmVzcG9uc2VUeXBlOmZ1bmN0aW9uKGEpe3RoaXMucmVzcG9uc2VUeXBlPWF9LHNldENyb3NzT3JpZ2luOmZ1bmN0aW9uKGEpe3RoaXMuY3Jvc3NPcmlnaW49YX0sc2V0V2l0aENyZWRlbnRpYWxzOmZ1bmN0aW9uKGEpe3RoaXMud2l0aENyZWRlbnRpYWxzPWF9fTtUSFJFRS5JbWFnZUxvYWRlcj1mdW5jdGlvbihhKXt0aGlzLm1hbmFnZXI9dm9pZCAwIT09YT9hOlRIUkVFLkRlZmF1bHRMb2FkaW5nTWFuYWdlcn07XG5USFJFRS5JbWFnZUxvYWRlci5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOlRIUkVFLkltYWdlTG9hZGVyLGxvYWQ6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9dGhpcyxnPVRIUkVFLkNhY2hlLmdldChhKTtpZih2b2lkIDAhPT1nKXJldHVybiBlLm1hbmFnZXIuaXRlbVN0YXJ0KGEpLGI/c2V0VGltZW91dChmdW5jdGlvbigpe2IoZyk7ZS5tYW5hZ2VyLml0ZW1FbmQoYSl9LDApOmUubWFuYWdlci5pdGVtRW5kKGEpLGc7dmFyIGY9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtmLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsZnVuY3Rpb24oYyl7VEhSRUUuQ2FjaGUuYWRkKGEsdGhpcyk7YiYmYih0aGlzKTtlLm1hbmFnZXIuaXRlbUVuZChhKX0sITEpO3ZvaWQgMCE9PWMmJmYuYWRkRXZlbnRMaXN0ZW5lcihcInByb2dyZXNzXCIsZnVuY3Rpb24oYSl7YyhhKX0sITEpO2YuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsZnVuY3Rpb24oYil7ZCYmZChiKTtlLm1hbmFnZXIuaXRlbUVycm9yKGEpfSxcbiExKTt2b2lkIDAhPT10aGlzLmNyb3NzT3JpZ2luJiYoZi5jcm9zc09yaWdpbj10aGlzLmNyb3NzT3JpZ2luKTtlLm1hbmFnZXIuaXRlbVN0YXJ0KGEpO2Yuc3JjPWE7cmV0dXJuIGZ9LHNldENyb3NzT3JpZ2luOmZ1bmN0aW9uKGEpe3RoaXMuY3Jvc3NPcmlnaW49YX19O1RIUkVFLkpTT05Mb2FkZXI9ZnVuY3Rpb24oYSl7XCJib29sZWFuXCI9PT10eXBlb2YgYSYmKGNvbnNvbGUud2FybihcIlRIUkVFLkpTT05Mb2FkZXI6IHNob3dTdGF0dXMgcGFyYW1ldGVyIGhhcyBiZWVuIHJlbW92ZWQgZnJvbSBjb25zdHJ1Y3Rvci5cIiksYT12b2lkIDApO3RoaXMubWFuYWdlcj12b2lkIDAhPT1hP2E6VEhSRUUuRGVmYXVsdExvYWRpbmdNYW5hZ2VyO3RoaXMud2l0aENyZWRlbnRpYWxzPSExfTtcblRIUkVFLkpTT05Mb2FkZXIucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5KU09OTG9hZGVyLGdldCBzdGF0dXNEb21FbGVtZW50KCl7dm9pZCAwPT09dGhpcy5fc3RhdHVzRG9tRWxlbWVudCYmKHRoaXMuX3N0YXR1c0RvbUVsZW1lbnQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSk7Y29uc29sZS53YXJuKFwiVEhSRUUuSlNPTkxvYWRlcjogLnN0YXR1c0RvbUVsZW1lbnQgaGFzIGJlZW4gcmVtb3ZlZC5cIik7cmV0dXJuIHRoaXMuX3N0YXR1c0RvbUVsZW1lbnR9LGxvYWQ6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9dGhpcyxnPXRoaXMudGV4dHVyZVBhdGgmJlwic3RyaW5nXCI9PT10eXBlb2YgdGhpcy50ZXh0dXJlUGF0aD90aGlzLnRleHR1cmVQYXRoOlRIUkVFLkxvYWRlci5wcm90b3R5cGUuZXh0cmFjdFVybEJhc2UoYSk7Yz1uZXcgVEhSRUUuWEhSTG9hZGVyKHRoaXMubWFuYWdlcik7Yy5zZXRDcm9zc09yaWdpbih0aGlzLmNyb3NzT3JpZ2luKTtjLnNldFdpdGhDcmVkZW50aWFscyh0aGlzLndpdGhDcmVkZW50aWFscyk7XG5jLmxvYWQoYSxmdW5jdGlvbihjKXtjPUpTT04ucGFyc2UoYyk7dmFyIGQ9Yy5tZXRhZGF0YTtpZih2b2lkIDAhPT1kKXtpZihcIm9iamVjdFwiPT09ZC50eXBlKXtjb25zb2xlLmVycm9yKFwiVEhSRUUuSlNPTkxvYWRlcjogXCIrYStcIiBzaG91bGQgYmUgbG9hZGVkIHdpdGggVEhSRUUuT2JqZWN0TG9hZGVyIGluc3RlYWQuXCIpO3JldHVybn1pZihcInNjZW5lXCI9PT1kLnR5cGUpe2NvbnNvbGUuZXJyb3IoXCJUSFJFRS5KU09OTG9hZGVyOiBcIithK1wiIHNob3VsZCBiZSBsb2FkZWQgd2l0aCBUSFJFRS5TY2VuZUxvYWRlciBpbnN0ZWFkLlwiKTtyZXR1cm59fWM9ZS5wYXJzZShjLGcpO2IoYy5nZW9tZXRyeSxjLm1hdGVyaWFscyl9KX0sc2V0Q3Jvc3NPcmlnaW46ZnVuY3Rpb24oYSl7dGhpcy5jcm9zc09yaWdpbj1hfSxzZXRUZXh0dXJlUGF0aDpmdW5jdGlvbihhKXt0aGlzLnRleHR1cmVQYXRoPWF9LHBhcnNlOmZ1bmN0aW9uKGEsYil7dmFyIGM9bmV3IFRIUkVFLkdlb21ldHJ5LGQ9dm9pZCAwIT09XG5hLnNjYWxlPzEvYS5zY2FsZToxOyhmdW5jdGlvbihiKXt2YXIgZCxmLGgsbCxrLG0scCxuLHEscyx0LHYsdSx3PWEuZmFjZXM7bT1hLnZlcnRpY2VzO3ZhciBEPWEubm9ybWFscyx4PWEuY29sb3JzLEI9MDtpZih2b2lkIDAhPT1hLnV2cyl7Zm9yKGQ9MDtkPGEudXZzLmxlbmd0aDtkKyspYS51dnNbZF0ubGVuZ3RoJiZCKys7Zm9yKGQ9MDtkPEI7ZCsrKWMuZmFjZVZlcnRleFV2c1tkXT1bXX1sPTA7Zm9yKGs9bS5sZW5ndGg7bDxrOylkPW5ldyBUSFJFRS5WZWN0b3IzLGQueD1tW2wrK10qYixkLnk9bVtsKytdKmIsZC56PW1bbCsrXSpiLGMudmVydGljZXMucHVzaChkKTtsPTA7Zm9yKGs9dy5sZW5ndGg7bDxrOylpZihiPXdbbCsrXSxxPWImMSxoPWImMixkPWImOCxwPWImMTYscz1iJjMyLG09YiY2NCxiJj0xMjgscSl7cT1uZXcgVEhSRUUuRmFjZTM7cS5hPXdbbF07cS5iPXdbbCsxXTtxLmM9d1tsKzNdO3Q9bmV3IFRIUkVFLkZhY2UzO3QuYT13W2wrMV07dC5iPXdbbCsyXTt0LmM9XG53W2wrM107bCs9NDtoJiYoaD13W2wrK10scS5tYXRlcmlhbEluZGV4PWgsdC5tYXRlcmlhbEluZGV4PWgpO2g9Yy5mYWNlcy5sZW5ndGg7aWYoZClmb3IoZD0wO2Q8QjtkKyspZm9yKHY9YS51dnNbZF0sYy5mYWNlVmVydGV4VXZzW2RdW2hdPVtdLGMuZmFjZVZlcnRleFV2c1tkXVtoKzFdPVtdLGY9MDs0PmY7ZisrKW49d1tsKytdLHU9dlsyKm5dLG49dlsyKm4rMV0sdT1uZXcgVEhSRUUuVmVjdG9yMih1LG4pLDIhPT1mJiZjLmZhY2VWZXJ0ZXhVdnNbZF1baF0ucHVzaCh1KSwwIT09ZiYmYy5mYWNlVmVydGV4VXZzW2RdW2grMV0ucHVzaCh1KTtwJiYocD0zKndbbCsrXSxxLm5vcm1hbC5zZXQoRFtwKytdLERbcCsrXSxEW3BdKSx0Lm5vcm1hbC5jb3B5KHEubm9ybWFsKSk7aWYocylmb3IoZD0wOzQ+ZDtkKyspcD0zKndbbCsrXSxzPW5ldyBUSFJFRS5WZWN0b3IzKERbcCsrXSxEW3ArK10sRFtwXSksMiE9PWQmJnEudmVydGV4Tm9ybWFscy5wdXNoKHMpLDAhPT1kJiZ0LnZlcnRleE5vcm1hbHMucHVzaChzKTtcbm0mJihtPXdbbCsrXSxtPXhbbV0scS5jb2xvci5zZXRIZXgobSksdC5jb2xvci5zZXRIZXgobSkpO2lmKGIpZm9yKGQ9MDs0PmQ7ZCsrKW09d1tsKytdLG09eFttXSwyIT09ZCYmcS52ZXJ0ZXhDb2xvcnMucHVzaChuZXcgVEhSRUUuQ29sb3IobSkpLDAhPT1kJiZ0LnZlcnRleENvbG9ycy5wdXNoKG5ldyBUSFJFRS5Db2xvcihtKSk7Yy5mYWNlcy5wdXNoKHEpO2MuZmFjZXMucHVzaCh0KX1lbHNle3E9bmV3IFRIUkVFLkZhY2UzO3EuYT13W2wrK107cS5iPXdbbCsrXTtxLmM9d1tsKytdO2gmJihoPXdbbCsrXSxxLm1hdGVyaWFsSW5kZXg9aCk7aD1jLmZhY2VzLmxlbmd0aDtpZihkKWZvcihkPTA7ZDxCO2QrKylmb3Iodj1hLnV2c1tkXSxjLmZhY2VWZXJ0ZXhVdnNbZF1baF09W10sZj0wOzM+ZjtmKyspbj13W2wrK10sdT12WzIqbl0sbj12WzIqbisxXSx1PW5ldyBUSFJFRS5WZWN0b3IyKHUsbiksYy5mYWNlVmVydGV4VXZzW2RdW2hdLnB1c2godSk7cCYmKHA9Myp3W2wrK10scS5ub3JtYWwuc2V0KERbcCsrXSxcbkRbcCsrXSxEW3BdKSk7aWYocylmb3IoZD0wOzM+ZDtkKyspcD0zKndbbCsrXSxzPW5ldyBUSFJFRS5WZWN0b3IzKERbcCsrXSxEW3ArK10sRFtwXSkscS52ZXJ0ZXhOb3JtYWxzLnB1c2gocyk7bSYmKG09d1tsKytdLHEuY29sb3Iuc2V0SGV4KHhbbV0pKTtpZihiKWZvcihkPTA7Mz5kO2QrKyltPXdbbCsrXSxxLnZlcnRleENvbG9ycy5wdXNoKG5ldyBUSFJFRS5Db2xvcih4W21dKSk7Yy5mYWNlcy5wdXNoKHEpfX0pKGQpOyhmdW5jdGlvbigpe3ZhciBiPXZvaWQgMCE9PWEuaW5mbHVlbmNlc1BlclZlcnRleD9hLmluZmx1ZW5jZXNQZXJWZXJ0ZXg6MjtpZihhLnNraW5XZWlnaHRzKWZvcih2YXIgZD0wLGY9YS5za2luV2VpZ2h0cy5sZW5ndGg7ZDxmO2QrPWIpYy5za2luV2VpZ2h0cy5wdXNoKG5ldyBUSFJFRS5WZWN0b3I0KGEuc2tpbldlaWdodHNbZF0sMTxiP2Euc2tpbldlaWdodHNbZCsxXTowLDI8Yj9hLnNraW5XZWlnaHRzW2QrMl06MCwzPGI/YS5za2luV2VpZ2h0c1tkKzNdOlxuMCkpO2lmKGEuc2tpbkluZGljZXMpZm9yKGQ9MCxmPWEuc2tpbkluZGljZXMubGVuZ3RoO2Q8ZjtkKz1iKWMuc2tpbkluZGljZXMucHVzaChuZXcgVEhSRUUuVmVjdG9yNChhLnNraW5JbmRpY2VzW2RdLDE8Yj9hLnNraW5JbmRpY2VzW2QrMV06MCwyPGI/YS5za2luSW5kaWNlc1tkKzJdOjAsMzxiP2Euc2tpbkluZGljZXNbZCszXTowKSk7Yy5ib25lcz1hLmJvbmVzO2MuYm9uZXMmJjA8Yy5ib25lcy5sZW5ndGgmJihjLnNraW5XZWlnaHRzLmxlbmd0aCE9PWMuc2tpbkluZGljZXMubGVuZ3RofHxjLnNraW5JbmRpY2VzLmxlbmd0aCE9PWMudmVydGljZXMubGVuZ3RoKSYmY29uc29sZS53YXJuKFwiV2hlbiBza2lubmluZywgbnVtYmVyIG9mIHZlcnRpY2VzIChcIitjLnZlcnRpY2VzLmxlbmd0aCtcIiksIHNraW5JbmRpY2VzIChcIitjLnNraW5JbmRpY2VzLmxlbmd0aCtcIiksIGFuZCBza2luV2VpZ2h0cyAoXCIrYy5za2luV2VpZ2h0cy5sZW5ndGgrXCIpIHNob3VsZCBtYXRjaC5cIil9KSgpOyhmdW5jdGlvbihiKXtpZih2b2lkIDAhPT1cbmEubW9ycGhUYXJnZXRzKWZvcih2YXIgZD0wLGY9YS5tb3JwaFRhcmdldHMubGVuZ3RoO2Q8ZjtkKyspe2MubW9ycGhUYXJnZXRzW2RdPXt9O2MubW9ycGhUYXJnZXRzW2RdLm5hbWU9YS5tb3JwaFRhcmdldHNbZF0ubmFtZTtjLm1vcnBoVGFyZ2V0c1tkXS52ZXJ0aWNlcz1bXTtmb3IodmFyIGg9Yy5tb3JwaFRhcmdldHNbZF0udmVydGljZXMsbD1hLm1vcnBoVGFyZ2V0c1tkXS52ZXJ0aWNlcyxrPTAsbT1sLmxlbmd0aDtrPG07ays9Myl7dmFyIHA9bmV3IFRIUkVFLlZlY3RvcjM7cC54PWxba10qYjtwLnk9bFtrKzFdKmI7cC56PWxbaysyXSpiO2gucHVzaChwKX19aWYodm9pZCAwIT09YS5tb3JwaENvbG9ycyYmMDxhLm1vcnBoQ29sb3JzLmxlbmd0aClmb3IoY29uc29sZS53YXJuKCdUSFJFRS5KU09OTG9hZGVyOiBcIm1vcnBoQ29sb3JzXCIgbm8gbG9uZ2VyIHN1cHBvcnRlZC4gVXNpbmcgdGhlbSBhcyBmYWNlIGNvbG9ycy4nKSxiPWMuZmFjZXMsaD1hLm1vcnBoQ29sb3JzWzBdLmNvbG9ycyxcbmQ9MCxmPWIubGVuZ3RoO2Q8ZjtkKyspYltkXS5jb2xvci5mcm9tQXJyYXkoaCwzKmQpfSkoZCk7KGZ1bmN0aW9uKCl7dmFyIGI9W10sZD1bXTt2b2lkIDAhPT1hLmFuaW1hdGlvbiYmZC5wdXNoKGEuYW5pbWF0aW9uKTt2b2lkIDAhPT1hLmFuaW1hdGlvbnMmJihhLmFuaW1hdGlvbnMubGVuZ3RoP2Q9ZC5jb25jYXQoYS5hbmltYXRpb25zKTpkLnB1c2goYS5hbmltYXRpb25zKSk7Zm9yKHZhciBmPTA7ZjxkLmxlbmd0aDtmKyspe3ZhciBoPVRIUkVFLkFuaW1hdGlvbkNsaXAucGFyc2VBbmltYXRpb24oZFtmXSxjLmJvbmVzKTtoJiZiLnB1c2goaCl9Yy5tb3JwaFRhcmdldHMmJihkPVRIUkVFLkFuaW1hdGlvbkNsaXAuQ3JlYXRlQ2xpcHNGcm9tTW9ycGhUYXJnZXRTZXF1ZW5jZXMoYy5tb3JwaFRhcmdldHMsMTApLGI9Yi5jb25jYXQoZCkpOzA8Yi5sZW5ndGgmJihjLmFuaW1hdGlvbnM9Yil9KSgpO2MuY29tcHV0ZUZhY2VOb3JtYWxzKCk7Yy5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcbmlmKHZvaWQgMD09PWEubWF0ZXJpYWxzfHwwPT09YS5tYXRlcmlhbHMubGVuZ3RoKXJldHVybntnZW9tZXRyeTpjfTtkPVRIUkVFLkxvYWRlci5wcm90b3R5cGUuaW5pdE1hdGVyaWFscyhhLm1hdGVyaWFscyxiLHRoaXMuY3Jvc3NPcmlnaW4pO3JldHVybntnZW9tZXRyeTpjLG1hdGVyaWFsczpkfX19O1xuVEhSRUUuTG9hZGluZ01hbmFnZXI9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXRoaXMsZT0hMSxnPTAsZj0wO3RoaXMub25TdGFydD12b2lkIDA7dGhpcy5vbkxvYWQ9YTt0aGlzLm9uUHJvZ3Jlc3M9Yjt0aGlzLm9uRXJyb3I9Yzt0aGlzLml0ZW1TdGFydD1mdW5jdGlvbihhKXtmKys7aWYoITE9PT1lJiZ2b2lkIDAhPT1kLm9uU3RhcnQpZC5vblN0YXJ0KGEsZyxmKTtlPSEwfTt0aGlzLml0ZW1FbmQ9ZnVuY3Rpb24oYSl7ZysrO2lmKHZvaWQgMCE9PWQub25Qcm9ncmVzcylkLm9uUHJvZ3Jlc3MoYSxnLGYpO2lmKGc9PT1mJiYoZT0hMSx2b2lkIDAhPT1kLm9uTG9hZCkpZC5vbkxvYWQoKX07dGhpcy5pdGVtRXJyb3I9ZnVuY3Rpb24oYSl7aWYodm9pZCAwIT09ZC5vbkVycm9yKWQub25FcnJvcihhKX19O1RIUkVFLkRlZmF1bHRMb2FkaW5nTWFuYWdlcj1uZXcgVEhSRUUuTG9hZGluZ01hbmFnZXI7XG5USFJFRS5CdWZmZXJHZW9tZXRyeUxvYWRlcj1mdW5jdGlvbihhKXt0aGlzLm1hbmFnZXI9dm9pZCAwIT09YT9hOlRIUkVFLkRlZmF1bHRMb2FkaW5nTWFuYWdlcn07XG5USFJFRS5CdWZmZXJHZW9tZXRyeUxvYWRlci5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOlRIUkVFLkJ1ZmZlckdlb21ldHJ5TG9hZGVyLGxvYWQ6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9dGhpcyxnPW5ldyBUSFJFRS5YSFJMb2FkZXIoZS5tYW5hZ2VyKTtnLnNldENyb3NzT3JpZ2luKHRoaXMuY3Jvc3NPcmlnaW4pO2cubG9hZChhLGZ1bmN0aW9uKGEpe2IoZS5wYXJzZShKU09OLnBhcnNlKGEpKSl9LGMsZCl9LHNldENyb3NzT3JpZ2luOmZ1bmN0aW9uKGEpe3RoaXMuY3Jvc3NPcmlnaW49YX0scGFyc2U6ZnVuY3Rpb24oYSl7dmFyIGI9bmV3IFRIUkVFLkJ1ZmZlckdlb21ldHJ5LGM9YS5kYXRhLmluZGV4O3ZvaWQgMCE9PWMmJihjPW5ldyBzZWxmW2MudHlwZV0oYy5hcnJheSksYi5zZXRJbmRleChuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKGMsMSkpKTt2YXIgZD1hLmRhdGEuYXR0cmlidXRlcyxlO2ZvcihlIGluIGQpe3ZhciBnPWRbZV0sYz1uZXcgc2VsZltnLnR5cGVdKGcuYXJyYXkpO1xuYi5hZGRBdHRyaWJ1dGUoZSxuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKGMsZy5pdGVtU2l6ZSkpfWU9YS5kYXRhLmdyb3Vwc3x8YS5kYXRhLmRyYXdjYWxsc3x8YS5kYXRhLm9mZnNldHM7aWYodm9pZCAwIT09ZSlmb3IoYz0wLGQ9ZS5sZW5ndGg7YyE9PWQ7KytjKWc9ZVtjXSxiLmFkZEdyb3VwKGcuc3RhcnQsZy5jb3VudCk7YT1hLmRhdGEuYm91bmRpbmdTcGhlcmU7dm9pZCAwIT09YSYmKGU9bmV3IFRIUkVFLlZlY3RvcjMsdm9pZCAwIT09YS5jZW50ZXImJmUuZnJvbUFycmF5KGEuY2VudGVyKSxiLmJvdW5kaW5nU3BoZXJlPW5ldyBUSFJFRS5TcGhlcmUoZSxhLnJhZGl1cykpO3JldHVybiBifX07VEhSRUUuTWF0ZXJpYWxMb2FkZXI9ZnVuY3Rpb24oYSl7dGhpcy5tYW5hZ2VyPXZvaWQgMCE9PWE/YTpUSFJFRS5EZWZhdWx0TG9hZGluZ01hbmFnZXI7dGhpcy50ZXh0dXJlcz17fX07XG5USFJFRS5NYXRlcmlhbExvYWRlci5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOlRIUkVFLk1hdGVyaWFsTG9hZGVyLGxvYWQ6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9dGhpcyxnPW5ldyBUSFJFRS5YSFJMb2FkZXIoZS5tYW5hZ2VyKTtnLnNldENyb3NzT3JpZ2luKHRoaXMuY3Jvc3NPcmlnaW4pO2cubG9hZChhLGZ1bmN0aW9uKGEpe2IoZS5wYXJzZShKU09OLnBhcnNlKGEpKSl9LGMsZCl9LHNldENyb3NzT3JpZ2luOmZ1bmN0aW9uKGEpe3RoaXMuY3Jvc3NPcmlnaW49YX0sc2V0VGV4dHVyZXM6ZnVuY3Rpb24oYSl7dGhpcy50ZXh0dXJlcz1hfSxnZXRUZXh0dXJlOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMudGV4dHVyZXM7dm9pZCAwPT09YlthXSYmY29uc29sZS53YXJuKFwiVEhSRUUuTWF0ZXJpYWxMb2FkZXI6IFVuZGVmaW5lZCB0ZXh0dXJlXCIsYSk7cmV0dXJuIGJbYV19LHBhcnNlOmZ1bmN0aW9uKGEpe3ZhciBiPW5ldyBUSFJFRVthLnR5cGVdO2IudXVpZD1hLnV1aWQ7dm9pZCAwIT09XG5hLm5hbWUmJihiLm5hbWU9YS5uYW1lKTt2b2lkIDAhPT1hLmNvbG9yJiZiLmNvbG9yLnNldEhleChhLmNvbG9yKTt2b2lkIDAhPT1hLmVtaXNzaXZlJiZiLmVtaXNzaXZlLnNldEhleChhLmVtaXNzaXZlKTt2b2lkIDAhPT1hLnNwZWN1bGFyJiZiLnNwZWN1bGFyLnNldEhleChhLnNwZWN1bGFyKTt2b2lkIDAhPT1hLnNoaW5pbmVzcyYmKGIuc2hpbmluZXNzPWEuc2hpbmluZXNzKTt2b2lkIDAhPT1hLnVuaWZvcm1zJiYoYi51bmlmb3Jtcz1hLnVuaWZvcm1zKTt2b2lkIDAhPT1hLnZlcnRleFNoYWRlciYmKGIudmVydGV4U2hhZGVyPWEudmVydGV4U2hhZGVyKTt2b2lkIDAhPT1hLmZyYWdtZW50U2hhZGVyJiYoYi5mcmFnbWVudFNoYWRlcj1hLmZyYWdtZW50U2hhZGVyKTt2b2lkIDAhPT1hLnZlcnRleENvbG9ycyYmKGIudmVydGV4Q29sb3JzPWEudmVydGV4Q29sb3JzKTt2b2lkIDAhPT1hLnNoYWRpbmcmJihiLnNoYWRpbmc9YS5zaGFkaW5nKTt2b2lkIDAhPT1hLmJsZW5kaW5nJiZcbihiLmJsZW5kaW5nPWEuYmxlbmRpbmcpO3ZvaWQgMCE9PWEuc2lkZSYmKGIuc2lkZT1hLnNpZGUpO3ZvaWQgMCE9PWEub3BhY2l0eSYmKGIub3BhY2l0eT1hLm9wYWNpdHkpO3ZvaWQgMCE9PWEudHJhbnNwYXJlbnQmJihiLnRyYW5zcGFyZW50PWEudHJhbnNwYXJlbnQpO3ZvaWQgMCE9PWEuYWxwaGFUZXN0JiYoYi5hbHBoYVRlc3Q9YS5hbHBoYVRlc3QpO3ZvaWQgMCE9PWEuZGVwdGhUZXN0JiYoYi5kZXB0aFRlc3Q9YS5kZXB0aFRlc3QpO3ZvaWQgMCE9PWEuZGVwdGhXcml0ZSYmKGIuZGVwdGhXcml0ZT1hLmRlcHRoV3JpdGUpO3ZvaWQgMCE9PWEud2lyZWZyYW1lJiYoYi53aXJlZnJhbWU9YS53aXJlZnJhbWUpO3ZvaWQgMCE9PWEud2lyZWZyYW1lTGluZXdpZHRoJiYoYi53aXJlZnJhbWVMaW5ld2lkdGg9YS53aXJlZnJhbWVMaW5ld2lkdGgpO3ZvaWQgMCE9PWEuc2l6ZSYmKGIuc2l6ZT1hLnNpemUpO3ZvaWQgMCE9PWEuc2l6ZUF0dGVudWF0aW9uJiYoYi5zaXplQXR0ZW51YXRpb249XG5hLnNpemVBdHRlbnVhdGlvbik7dm9pZCAwIT09YS5tYXAmJihiLm1hcD10aGlzLmdldFRleHR1cmUoYS5tYXApKTt2b2lkIDAhPT1hLmFscGhhTWFwJiYoYi5hbHBoYU1hcD10aGlzLmdldFRleHR1cmUoYS5hbHBoYU1hcCksYi50cmFuc3BhcmVudD0hMCk7dm9pZCAwIT09YS5idW1wTWFwJiYoYi5idW1wTWFwPXRoaXMuZ2V0VGV4dHVyZShhLmJ1bXBNYXApKTt2b2lkIDAhPT1hLmJ1bXBTY2FsZSYmKGIuYnVtcFNjYWxlPWEuYnVtcFNjYWxlKTt2b2lkIDAhPT1hLm5vcm1hbE1hcCYmKGIubm9ybWFsTWFwPXRoaXMuZ2V0VGV4dHVyZShhLm5vcm1hbE1hcCkpO2Eubm9ybWFsU2NhbGUmJihiLm5vcm1hbFNjYWxlPW5ldyBUSFJFRS5WZWN0b3IyKGEubm9ybWFsU2NhbGUsYS5ub3JtYWxTY2FsZSkpO3ZvaWQgMCE9PWEuZGlzcGxhY2VtZW50TWFwJiYoYi5kaXNwbGFjZW1lbnRNYXA9dGhpcy5nZXRUZXh0dXJlKGEuZGlzcGxhY2VtZW50TWFwKSk7dm9pZCAwIT09YS5kaXNwbGFjZW1lbnRTY2FsZSYmXG4oYi5kaXNwbGFjZW1lbnRTY2FsZT1hLmRpc3BsYWNlbWVudFNjYWxlKTt2b2lkIDAhPT1hLmRpc3BsYWNlbWVudEJpYXMmJihiLmRpc3BsYWNlbWVudEJpYXM9YS5kaXNwbGFjZW1lbnRCaWFzKTt2b2lkIDAhPT1hLnNwZWN1bGFyTWFwJiYoYi5zcGVjdWxhck1hcD10aGlzLmdldFRleHR1cmUoYS5zcGVjdWxhck1hcCkpO3ZvaWQgMCE9PWEuZW52TWFwJiYoYi5lbnZNYXA9dGhpcy5nZXRUZXh0dXJlKGEuZW52TWFwKSxiLmNvbWJpbmU9VEhSRUUuTXVsdGlwbHlPcGVyYXRpb24pO2EucmVmbGVjdGl2aXR5JiYoYi5yZWZsZWN0aXZpdHk9YS5yZWZsZWN0aXZpdHkpO3ZvaWQgMCE9PWEubGlnaHRNYXAmJihiLmxpZ2h0TWFwPXRoaXMuZ2V0VGV4dHVyZShhLmxpZ2h0TWFwKSk7dm9pZCAwIT09YS5saWdodE1hcEludGVuc2l0eSYmKGIubGlnaHRNYXBJbnRlbnNpdHk9YS5saWdodE1hcEludGVuc2l0eSk7dm9pZCAwIT09YS5hb01hcCYmKGIuYW9NYXA9dGhpcy5nZXRUZXh0dXJlKGEuYW9NYXApKTtcbnZvaWQgMCE9PWEuYW9NYXBJbnRlbnNpdHkmJihiLmFvTWFwSW50ZW5zaXR5PWEuYW9NYXBJbnRlbnNpdHkpO2lmKHZvaWQgMCE9PWEubWF0ZXJpYWxzKWZvcih2YXIgYz0wLGQ9YS5tYXRlcmlhbHMubGVuZ3RoO2M8ZDtjKyspYi5tYXRlcmlhbHMucHVzaCh0aGlzLnBhcnNlKGEubWF0ZXJpYWxzW2NdKSk7cmV0dXJuIGJ9fTtUSFJFRS5PYmplY3RMb2FkZXI9ZnVuY3Rpb24oYSl7dGhpcy5tYW5hZ2VyPXZvaWQgMCE9PWE/YTpUSFJFRS5EZWZhdWx0TG9hZGluZ01hbmFnZXI7dGhpcy50ZXh0dXJlUGF0aD1cIlwifTtcblRIUkVFLk9iamVjdExvYWRlci5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOlRIUkVFLk9iamVjdExvYWRlcixsb2FkOmZ1bmN0aW9uKGEsYixjLGQpe1wiXCI9PT10aGlzLnRleHR1cmVQYXRoJiYodGhpcy50ZXh0dXJlUGF0aD1hLnN1YnN0cmluZygwLGEubGFzdEluZGV4T2YoXCIvXCIpKzEpKTt2YXIgZT10aGlzLGc9bmV3IFRIUkVFLlhIUkxvYWRlcihlLm1hbmFnZXIpO2cuc2V0Q3Jvc3NPcmlnaW4odGhpcy5jcm9zc09yaWdpbik7Zy5sb2FkKGEsZnVuY3Rpb24oYSl7ZS5wYXJzZShKU09OLnBhcnNlKGEpLGIpfSxjLGQpfSxzZXRUZXh0dXJlUGF0aDpmdW5jdGlvbihhKXt0aGlzLnRleHR1cmVQYXRoPWF9LHNldENyb3NzT3JpZ2luOmZ1bmN0aW9uKGEpe3RoaXMuY3Jvc3NPcmlnaW49YX0scGFyc2U6ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLnBhcnNlR2VvbWV0cmllcyhhLmdlb21ldHJpZXMpLGQ9dGhpcy5wYXJzZUltYWdlcyhhLmltYWdlcyxmdW5jdGlvbigpe3ZvaWQgMCE9PWImJmIoZSl9KSxcbmQ9dGhpcy5wYXJzZVRleHR1cmVzKGEudGV4dHVyZXMsZCksZD10aGlzLnBhcnNlTWF0ZXJpYWxzKGEubWF0ZXJpYWxzLGQpLGU9dGhpcy5wYXJzZU9iamVjdChhLm9iamVjdCxjLGQpO2EuYW5pbWF0aW9ucyYmKGUuYW5pbWF0aW9ucz10aGlzLnBhcnNlQW5pbWF0aW9ucyhhLmFuaW1hdGlvbnMpKTt2b2lkIDAhPT1hLmltYWdlcyYmMCE9PWEuaW1hZ2VzLmxlbmd0aHx8dm9pZCAwPT09Ynx8YihlKTtyZXR1cm4gZX0scGFyc2VHZW9tZXRyaWVzOmZ1bmN0aW9uKGEpe3ZhciBiPXt9O2lmKHZvaWQgMCE9PWEpZm9yKHZhciBjPW5ldyBUSFJFRS5KU09OTG9hZGVyLGQ9bmV3IFRIUkVFLkJ1ZmZlckdlb21ldHJ5TG9hZGVyLGU9MCxnPWEubGVuZ3RoO2U8ZztlKyspe3ZhciBmLGg9YVtlXTtzd2l0Y2goaC50eXBlKXtjYXNlIFwiUGxhbmVHZW9tZXRyeVwiOmNhc2UgXCJQbGFuZUJ1ZmZlckdlb21ldHJ5XCI6Zj1uZXcgVEhSRUVbaC50eXBlXShoLndpZHRoLGguaGVpZ2h0LGgud2lkdGhTZWdtZW50cyxcbmguaGVpZ2h0U2VnbWVudHMpO2JyZWFrO2Nhc2UgXCJCb3hHZW9tZXRyeVwiOmNhc2UgXCJDdWJlR2VvbWV0cnlcIjpmPW5ldyBUSFJFRS5Cb3hHZW9tZXRyeShoLndpZHRoLGguaGVpZ2h0LGguZGVwdGgsaC53aWR0aFNlZ21lbnRzLGguaGVpZ2h0U2VnbWVudHMsaC5kZXB0aFNlZ21lbnRzKTticmVhaztjYXNlIFwiQ2lyY2xlQnVmZmVyR2VvbWV0cnlcIjpmPW5ldyBUSFJFRS5DaXJjbGVCdWZmZXJHZW9tZXRyeShoLnJhZGl1cyxoLnNlZ21lbnRzLGgudGhldGFTdGFydCxoLnRoZXRhTGVuZ3RoKTticmVhaztjYXNlIFwiQ2lyY2xlR2VvbWV0cnlcIjpmPW5ldyBUSFJFRS5DaXJjbGVHZW9tZXRyeShoLnJhZGl1cyxoLnNlZ21lbnRzLGgudGhldGFTdGFydCxoLnRoZXRhTGVuZ3RoKTticmVhaztjYXNlIFwiQ3lsaW5kZXJHZW9tZXRyeVwiOmY9bmV3IFRIUkVFLkN5bGluZGVyR2VvbWV0cnkoaC5yYWRpdXNUb3AsaC5yYWRpdXNCb3R0b20saC5oZWlnaHQsaC5yYWRpYWxTZWdtZW50cyxoLmhlaWdodFNlZ21lbnRzLFxuaC5vcGVuRW5kZWQsaC50aGV0YVN0YXJ0LGgudGhldGFMZW5ndGgpO2JyZWFrO2Nhc2UgXCJTcGhlcmVHZW9tZXRyeVwiOmY9bmV3IFRIUkVFLlNwaGVyZUdlb21ldHJ5KGgucmFkaXVzLGgud2lkdGhTZWdtZW50cyxoLmhlaWdodFNlZ21lbnRzLGgucGhpU3RhcnQsaC5waGlMZW5ndGgsaC50aGV0YVN0YXJ0LGgudGhldGFMZW5ndGgpO2JyZWFrO2Nhc2UgXCJTcGhlcmVCdWZmZXJHZW9tZXRyeVwiOmY9bmV3IFRIUkVFLlNwaGVyZUJ1ZmZlckdlb21ldHJ5KGgucmFkaXVzLGgud2lkdGhTZWdtZW50cyxoLmhlaWdodFNlZ21lbnRzLGgucGhpU3RhcnQsaC5waGlMZW5ndGgsaC50aGV0YVN0YXJ0LGgudGhldGFMZW5ndGgpO2JyZWFrO2Nhc2UgXCJEb2RlY2FoZWRyb25HZW9tZXRyeVwiOmY9bmV3IFRIUkVFLkRvZGVjYWhlZHJvbkdlb21ldHJ5KGgucmFkaXVzLGguZGV0YWlsKTticmVhaztjYXNlIFwiSWNvc2FoZWRyb25HZW9tZXRyeVwiOmY9bmV3IFRIUkVFLkljb3NhaGVkcm9uR2VvbWV0cnkoaC5yYWRpdXMsXG5oLmRldGFpbCk7YnJlYWs7Y2FzZSBcIk9jdGFoZWRyb25HZW9tZXRyeVwiOmY9bmV3IFRIUkVFLk9jdGFoZWRyb25HZW9tZXRyeShoLnJhZGl1cyxoLmRldGFpbCk7YnJlYWs7Y2FzZSBcIlRldHJhaGVkcm9uR2VvbWV0cnlcIjpmPW5ldyBUSFJFRS5UZXRyYWhlZHJvbkdlb21ldHJ5KGgucmFkaXVzLGguZGV0YWlsKTticmVhaztjYXNlIFwiUmluZ0dlb21ldHJ5XCI6Zj1uZXcgVEhSRUUuUmluZ0dlb21ldHJ5KGguaW5uZXJSYWRpdXMsaC5vdXRlclJhZGl1cyxoLnRoZXRhU2VnbWVudHMsaC5waGlTZWdtZW50cyxoLnRoZXRhU3RhcnQsaC50aGV0YUxlbmd0aCk7YnJlYWs7Y2FzZSBcIlRvcnVzR2VvbWV0cnlcIjpmPW5ldyBUSFJFRS5Ub3J1c0dlb21ldHJ5KGgucmFkaXVzLGgudHViZSxoLnJhZGlhbFNlZ21lbnRzLGgudHVidWxhclNlZ21lbnRzLGguYXJjKTticmVhaztjYXNlIFwiVG9ydXNLbm90R2VvbWV0cnlcIjpmPW5ldyBUSFJFRS5Ub3J1c0tub3RHZW9tZXRyeShoLnJhZGl1cyxoLnR1YmUsXG5oLnJhZGlhbFNlZ21lbnRzLGgudHVidWxhclNlZ21lbnRzLGgucCxoLnEsaC5oZWlnaHRTY2FsZSk7YnJlYWs7Y2FzZSBcIkJ1ZmZlckdlb21ldHJ5XCI6Zj1kLnBhcnNlKGgpO2JyZWFrO2Nhc2UgXCJHZW9tZXRyeVwiOmY9Yy5wYXJzZShoLmRhdGEsdGhpcy50ZXh0dXJlUGF0aCkuZ2VvbWV0cnk7YnJlYWs7ZGVmYXVsdDpjb25zb2xlLndhcm4oJ1RIUkVFLk9iamVjdExvYWRlcjogVW5zdXBwb3J0ZWQgZ2VvbWV0cnkgdHlwZSBcIicraC50eXBlKydcIicpO2NvbnRpbnVlfWYudXVpZD1oLnV1aWQ7dm9pZCAwIT09aC5uYW1lJiYoZi5uYW1lPWgubmFtZSk7YltoLnV1aWRdPWZ9cmV0dXJuIGJ9LHBhcnNlTWF0ZXJpYWxzOmZ1bmN0aW9uKGEsYil7dmFyIGM9e307aWYodm9pZCAwIT09YSl7dmFyIGQ9bmV3IFRIUkVFLk1hdGVyaWFsTG9hZGVyO2Quc2V0VGV4dHVyZXMoYik7Zm9yKHZhciBlPTAsZz1hLmxlbmd0aDtlPGc7ZSsrKXt2YXIgZj1kLnBhcnNlKGFbZV0pO2NbZi51dWlkXT1mfX1yZXR1cm4gY30sXG5wYXJzZUFuaW1hdGlvbnM6ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPVtdLGM9MDtjPGEubGVuZ3RoO2MrKyl7dmFyIGQ9VEhSRUUuQW5pbWF0aW9uQ2xpcC5wYXJzZShhW2NdKTtiLnB1c2goZCl9cmV0dXJuIGJ9LHBhcnNlSW1hZ2VzOmZ1bmN0aW9uKGEsYil7ZnVuY3Rpb24gYyhhKXtkLm1hbmFnZXIuaXRlbVN0YXJ0KGEpO3JldHVybiBmLmxvYWQoYSxmdW5jdGlvbigpe2QubWFuYWdlci5pdGVtRW5kKGEpfSl9dmFyIGQ9dGhpcyxlPXt9O2lmKHZvaWQgMCE9PWEmJjA8YS5sZW5ndGgpe3ZhciBnPW5ldyBUSFJFRS5Mb2FkaW5nTWFuYWdlcihiKSxmPW5ldyBUSFJFRS5JbWFnZUxvYWRlcihnKTtmLnNldENyb3NzT3JpZ2luKHRoaXMuY3Jvc3NPcmlnaW4pO2Zvcih2YXIgZz0wLGg9YS5sZW5ndGg7ZzxoO2crKyl7dmFyIGw9YVtnXSxrPS9eKFxcL1xcLyl8KFthLXpdKzooXFwvXFwvKT8pL2kudGVzdChsLnVybCk/bC51cmw6ZC50ZXh0dXJlUGF0aCtsLnVybDtlW2wudXVpZF09YyhrKX19cmV0dXJuIGV9LFxucGFyc2VUZXh0dXJlczpmdW5jdGlvbihhLGIpe2Z1bmN0aW9uIGMoYSl7aWYoXCJudW1iZXJcIj09PXR5cGVvZiBhKXJldHVybiBhO2NvbnNvbGUud2FybihcIlRIUkVFLk9iamVjdExvYWRlci5wYXJzZVRleHR1cmU6IENvbnN0YW50IHNob3VsZCBiZSBpbiBudW1lcmljIGZvcm0uXCIsYSk7cmV0dXJuIFRIUkVFW2FdfXZhciBkPXt9O2lmKHZvaWQgMCE9PWEpZm9yKHZhciBlPTAsZz1hLmxlbmd0aDtlPGc7ZSsrKXt2YXIgZj1hW2VdO3ZvaWQgMD09PWYuaW1hZ2UmJmNvbnNvbGUud2FybignVEhSRUUuT2JqZWN0TG9hZGVyOiBObyBcImltYWdlXCIgc3BlY2lmaWVkIGZvcicsZi51dWlkKTt2b2lkIDA9PT1iW2YuaW1hZ2VdJiZjb25zb2xlLndhcm4oXCJUSFJFRS5PYmplY3RMb2FkZXI6IFVuZGVmaW5lZCBpbWFnZVwiLGYuaW1hZ2UpO3ZhciBoPW5ldyBUSFJFRS5UZXh0dXJlKGJbZi5pbWFnZV0pO2gubmVlZHNVcGRhdGU9ITA7aC51dWlkPWYudXVpZDt2b2lkIDAhPT1mLm5hbWUmJihoLm5hbWU9XG5mLm5hbWUpO3ZvaWQgMCE9PWYubWFwcGluZyYmKGgubWFwcGluZz1jKGYubWFwcGluZykpO3ZvaWQgMCE9PWYub2Zmc2V0JiYoaC5vZmZzZXQ9bmV3IFRIUkVFLlZlY3RvcjIoZi5vZmZzZXRbMF0sZi5vZmZzZXRbMV0pKTt2b2lkIDAhPT1mLnJlcGVhdCYmKGgucmVwZWF0PW5ldyBUSFJFRS5WZWN0b3IyKGYucmVwZWF0WzBdLGYucmVwZWF0WzFdKSk7dm9pZCAwIT09Zi5taW5GaWx0ZXImJihoLm1pbkZpbHRlcj1jKGYubWluRmlsdGVyKSk7dm9pZCAwIT09Zi5tYWdGaWx0ZXImJihoLm1hZ0ZpbHRlcj1jKGYubWFnRmlsdGVyKSk7dm9pZCAwIT09Zi5hbmlzb3Ryb3B5JiYoaC5hbmlzb3Ryb3B5PWYuYW5pc290cm9weSk7QXJyYXkuaXNBcnJheShmLndyYXApJiYoaC53cmFwUz1jKGYud3JhcFswXSksaC53cmFwVD1jKGYud3JhcFsxXSkpO2RbZi51dWlkXT1ofXJldHVybiBkfSxwYXJzZU9iamVjdDpmdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5NYXRyaXg0O3JldHVybiBmdW5jdGlvbihiLFxuYyxkKXtmdW5jdGlvbiBlKGEpe3ZvaWQgMD09PWNbYV0mJmNvbnNvbGUud2FybihcIlRIUkVFLk9iamVjdExvYWRlcjogVW5kZWZpbmVkIGdlb21ldHJ5XCIsYSk7cmV0dXJuIGNbYV19ZnVuY3Rpb24gZyhhKXtpZih2b2lkIDAhPT1hKXJldHVybiB2b2lkIDA9PT1kW2FdJiZjb25zb2xlLndhcm4oXCJUSFJFRS5PYmplY3RMb2FkZXI6IFVuZGVmaW5lZCBtYXRlcmlhbFwiLGEpLGRbYV19dmFyIGY7c3dpdGNoKGIudHlwZSl7Y2FzZSBcIlNjZW5lXCI6Zj1uZXcgVEhSRUUuU2NlbmU7YnJlYWs7Y2FzZSBcIlBlcnNwZWN0aXZlQ2FtZXJhXCI6Zj1uZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoYi5mb3YsYi5hc3BlY3QsYi5uZWFyLGIuZmFyKTticmVhaztjYXNlIFwiT3J0aG9ncmFwaGljQ2FtZXJhXCI6Zj1uZXcgVEhSRUUuT3J0aG9ncmFwaGljQ2FtZXJhKGIubGVmdCxiLnJpZ2h0LGIudG9wLGIuYm90dG9tLGIubmVhcixiLmZhcik7YnJlYWs7Y2FzZSBcIkFtYmllbnRMaWdodFwiOmY9bmV3IFRIUkVFLkFtYmllbnRMaWdodChiLmNvbG9yKTtcbmJyZWFrO2Nhc2UgXCJEaXJlY3Rpb25hbExpZ2h0XCI6Zj1uZXcgVEhSRUUuRGlyZWN0aW9uYWxMaWdodChiLmNvbG9yLGIuaW50ZW5zaXR5KTticmVhaztjYXNlIFwiUG9pbnRMaWdodFwiOmY9bmV3IFRIUkVFLlBvaW50TGlnaHQoYi5jb2xvcixiLmludGVuc2l0eSxiLmRpc3RhbmNlLGIuZGVjYXkpO2JyZWFrO2Nhc2UgXCJTcG90TGlnaHRcIjpmPW5ldyBUSFJFRS5TcG90TGlnaHQoYi5jb2xvcixiLmludGVuc2l0eSxiLmRpc3RhbmNlLGIuYW5nbGUsYi5leHBvbmVudCxiLmRlY2F5KTticmVhaztjYXNlIFwiSGVtaXNwaGVyZUxpZ2h0XCI6Zj1uZXcgVEhSRUUuSGVtaXNwaGVyZUxpZ2h0KGIuY29sb3IsYi5ncm91bmRDb2xvcixiLmludGVuc2l0eSk7YnJlYWs7Y2FzZSBcIk1lc2hcIjpmPW5ldyBUSFJFRS5NZXNoKGUoYi5nZW9tZXRyeSksZyhiLm1hdGVyaWFsKSk7YnJlYWs7Y2FzZSBcIkxPRFwiOmY9bmV3IFRIUkVFLkxPRDticmVhaztjYXNlIFwiTGluZVwiOmY9bmV3IFRIUkVFLkxpbmUoZShiLmdlb21ldHJ5KSxcbmcoYi5tYXRlcmlhbCksYi5tb2RlKTticmVhaztjYXNlIFwiUG9pbnRDbG91ZFwiOmNhc2UgXCJQb2ludHNcIjpmPW5ldyBUSFJFRS5Qb2ludHMoZShiLmdlb21ldHJ5KSxnKGIubWF0ZXJpYWwpKTticmVhaztjYXNlIFwiU3ByaXRlXCI6Zj1uZXcgVEhSRUUuU3ByaXRlKGcoYi5tYXRlcmlhbCkpO2JyZWFrO2Nhc2UgXCJHcm91cFwiOmY9bmV3IFRIUkVFLkdyb3VwO2JyZWFrO2RlZmF1bHQ6Zj1uZXcgVEhSRUUuT2JqZWN0M0R9Zi51dWlkPWIudXVpZDt2b2lkIDAhPT1iLm5hbWUmJihmLm5hbWU9Yi5uYW1lKTt2b2lkIDAhPT1iLm1hdHJpeD8oYS5mcm9tQXJyYXkoYi5tYXRyaXgpLGEuZGVjb21wb3NlKGYucG9zaXRpb24sZi5xdWF0ZXJuaW9uLGYuc2NhbGUpKToodm9pZCAwIT09Yi5wb3NpdGlvbiYmZi5wb3NpdGlvbi5mcm9tQXJyYXkoYi5wb3NpdGlvbiksdm9pZCAwIT09Yi5yb3RhdGlvbiYmZi5yb3RhdGlvbi5mcm9tQXJyYXkoYi5yb3RhdGlvbiksdm9pZCAwIT09Yi5zY2FsZSYmZi5zY2FsZS5mcm9tQXJyYXkoYi5zY2FsZSkpO1xudm9pZCAwIT09Yi5jYXN0U2hhZG93JiYoZi5jYXN0U2hhZG93PWIuY2FzdFNoYWRvdyk7dm9pZCAwIT09Yi5yZWNlaXZlU2hhZG93JiYoZi5yZWNlaXZlU2hhZG93PWIucmVjZWl2ZVNoYWRvdyk7dm9pZCAwIT09Yi52aXNpYmxlJiYoZi52aXNpYmxlPWIudmlzaWJsZSk7dm9pZCAwIT09Yi51c2VyRGF0YSYmKGYudXNlckRhdGE9Yi51c2VyRGF0YSk7aWYodm9pZCAwIT09Yi5jaGlsZHJlbilmb3IodmFyIGggaW4gYi5jaGlsZHJlbilmLmFkZCh0aGlzLnBhcnNlT2JqZWN0KGIuY2hpbGRyZW5baF0sYyxkKSk7aWYoXCJMT0RcIj09PWIudHlwZSl7Yj1iLmxldmVscztmb3IodmFyIGw9MDtsPGIubGVuZ3RoO2wrKyl7dmFyIGs9YltsXTtoPWYuZ2V0T2JqZWN0QnlQcm9wZXJ0eShcInV1aWRcIixrLm9iamVjdCk7dm9pZCAwIT09aCYmZi5hZGRMZXZlbChoLGsuZGlzdGFuY2UpfX1yZXR1cm4gZn19KCl9O1xuVEhSRUUuVGV4dHVyZUxvYWRlcj1mdW5jdGlvbihhKXt0aGlzLm1hbmFnZXI9dm9pZCAwIT09YT9hOlRIUkVFLkRlZmF1bHRMb2FkaW5nTWFuYWdlcn07VEhSRUUuVGV4dHVyZUxvYWRlci5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOlRIUkVFLlRleHR1cmVMb2FkZXIsbG9hZDpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1uZXcgVEhSRUUuVGV4dHVyZSxnPW5ldyBUSFJFRS5JbWFnZUxvYWRlcih0aGlzLm1hbmFnZXIpO2cuc2V0Q3Jvc3NPcmlnaW4odGhpcy5jcm9zc09yaWdpbik7Zy5sb2FkKGEsZnVuY3Rpb24oYSl7ZS5pbWFnZT1hO2UubmVlZHNVcGRhdGU9ITA7dm9pZCAwIT09YiYmYihlKX0sYyxkKTtyZXR1cm4gZX0sc2V0Q3Jvc3NPcmlnaW46ZnVuY3Rpb24oYSl7dGhpcy5jcm9zc09yaWdpbj1hfX07VEhSRUUuQ3ViZVRleHR1cmVMb2FkZXI9ZnVuY3Rpb24oYSl7dGhpcy5tYW5hZ2VyPXZvaWQgMCE9PWE/YTpUSFJFRS5EZWZhdWx0TG9hZGluZ01hbmFnZXJ9O1xuVEhSRUUuQ3ViZVRleHR1cmVMb2FkZXIucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5DdWJlVGV4dHVyZUxvYWRlcixsb2FkOmZ1bmN0aW9uKGEsYixjLGQpe2Z1bmN0aW9uIGUoYyl7Zi5sb2FkKGFbY10sZnVuY3Rpb24oYSl7Zy5pbWFnZXNbY109YTtoKys7Nj09PWgmJihnLm5lZWRzVXBkYXRlPSEwLGImJmIoZykpfSx2b2lkIDAsZCl9dmFyIGc9bmV3IFRIUkVFLkN1YmVUZXh0dXJlKFtdKSxmPW5ldyBUSFJFRS5JbWFnZUxvYWRlcjtmLnNldENyb3NzT3JpZ2luKHRoaXMuY3Jvc3NPcmlnaW4pO3ZhciBoPTA7Zm9yKGM9MDtjPGEubGVuZ3RoOysrYyllKGMpO3JldHVybiBnfSxzZXRDcm9zc09yaWdpbjpmdW5jdGlvbihhKXt0aGlzLmNyb3NzT3JpZ2luPWF9fTtcblRIUkVFLkRhdGFUZXh0dXJlTG9hZGVyPVRIUkVFLkJpbmFyeVRleHR1cmVMb2FkZXI9ZnVuY3Rpb24oYSl7dGhpcy5tYW5hZ2VyPXZvaWQgMCE9PWE/YTpUSFJFRS5EZWZhdWx0TG9hZGluZ01hbmFnZXI7dGhpcy5fcGFyc2VyPW51bGx9O1xuVEhSRUUuQmluYXJ5VGV4dHVyZUxvYWRlci5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOlRIUkVFLkJpbmFyeVRleHR1cmVMb2FkZXIsbG9hZDpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT10aGlzLGc9bmV3IFRIUkVFLkRhdGFUZXh0dXJlLGY9bmV3IFRIUkVFLlhIUkxvYWRlcih0aGlzLm1hbmFnZXIpO2Yuc2V0Q3Jvc3NPcmlnaW4odGhpcy5jcm9zc09yaWdpbik7Zi5zZXRSZXNwb25zZVR5cGUoXCJhcnJheWJ1ZmZlclwiKTtmLmxvYWQoYSxmdW5jdGlvbihhKXtpZihhPWUuX3BhcnNlcihhKSl2b2lkIDAhPT1hLmltYWdlP2cuaW1hZ2U9YS5pbWFnZTp2b2lkIDAhPT1hLmRhdGEmJihnLmltYWdlLndpZHRoPWEud2lkdGgsZy5pbWFnZS5oZWlnaHQ9YS5oZWlnaHQsZy5pbWFnZS5kYXRhPWEuZGF0YSksZy53cmFwUz12b2lkIDAhPT1hLndyYXBTP2Eud3JhcFM6VEhSRUUuQ2xhbXBUb0VkZ2VXcmFwcGluZyxnLndyYXBUPXZvaWQgMCE9PWEud3JhcFQ/YS53cmFwVDpUSFJFRS5DbGFtcFRvRWRnZVdyYXBwaW5nLFxuZy5tYWdGaWx0ZXI9dm9pZCAwIT09YS5tYWdGaWx0ZXI/YS5tYWdGaWx0ZXI6VEhSRUUuTGluZWFyRmlsdGVyLGcubWluRmlsdGVyPXZvaWQgMCE9PWEubWluRmlsdGVyP2EubWluRmlsdGVyOlRIUkVFLkxpbmVhck1pcE1hcExpbmVhckZpbHRlcixnLmFuaXNvdHJvcHk9dm9pZCAwIT09YS5hbmlzb3Ryb3B5P2EuYW5pc290cm9weToxLHZvaWQgMCE9PWEuZm9ybWF0JiYoZy5mb3JtYXQ9YS5mb3JtYXQpLHZvaWQgMCE9PWEudHlwZSYmKGcudHlwZT1hLnR5cGUpLHZvaWQgMCE9PWEubWlwbWFwcyYmKGcubWlwbWFwcz1hLm1pcG1hcHMpLDE9PT1hLm1pcG1hcENvdW50JiYoZy5taW5GaWx0ZXI9VEhSRUUuTGluZWFyRmlsdGVyKSxnLm5lZWRzVXBkYXRlPSEwLGImJmIoZyxhKX0sYyxkKTtyZXR1cm4gZ30sc2V0Q3Jvc3NPcmlnaW46ZnVuY3Rpb24oYSl7dGhpcy5jcm9zc09yaWdpbj1hfX07XG5USFJFRS5Db21wcmVzc2VkVGV4dHVyZUxvYWRlcj1mdW5jdGlvbihhKXt0aGlzLm1hbmFnZXI9dm9pZCAwIT09YT9hOlRIUkVFLkRlZmF1bHRMb2FkaW5nTWFuYWdlcjt0aGlzLl9wYXJzZXI9bnVsbH07XG5USFJFRS5Db21wcmVzc2VkVGV4dHVyZUxvYWRlci5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOlRIUkVFLkNvbXByZXNzZWRUZXh0dXJlTG9hZGVyLGxvYWQ6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9dGhpcyxnPVtdLGY9bmV3IFRIUkVFLkNvbXByZXNzZWRUZXh0dXJlO2YuaW1hZ2U9Zzt2YXIgaD1uZXcgVEhSRUUuWEhSTG9hZGVyKHRoaXMubWFuYWdlcik7aC5zZXRDcm9zc09yaWdpbih0aGlzLmNyb3NzT3JpZ2luKTtoLnNldFJlc3BvbnNlVHlwZShcImFycmF5YnVmZmVyXCIpO2lmKEFycmF5LmlzQXJyYXkoYSkpZm9yKHZhciBsPTAsaz1mdW5jdGlvbihrKXtoLmxvYWQoYVtrXSxmdW5jdGlvbihhKXthPWUuX3BhcnNlcihhLCEwKTtnW2tdPXt3aWR0aDphLndpZHRoLGhlaWdodDphLmhlaWdodCxmb3JtYXQ6YS5mb3JtYXQsbWlwbWFwczphLm1pcG1hcHN9O2wrPTE7Nj09PWwmJigxPT09YS5taXBtYXBDb3VudCYmKGYubWluRmlsdGVyPVRIUkVFLkxpbmVhckZpbHRlciksZi5mb3JtYXQ9XG5hLmZvcm1hdCxmLm5lZWRzVXBkYXRlPSEwLGImJmIoZikpfSxjLGQpfSxtPTAscD1hLmxlbmd0aDttPHA7KyttKWsobSk7ZWxzZSBoLmxvYWQoYSxmdW5jdGlvbihhKXthPWUuX3BhcnNlcihhLCEwKTtpZihhLmlzQ3ViZW1hcClmb3IodmFyIGM9YS5taXBtYXBzLmxlbmd0aC9hLm1pcG1hcENvdW50LGQ9MDtkPGM7ZCsrKXtnW2RdPXttaXBtYXBzOltdfTtmb3IodmFyIGg9MDtoPGEubWlwbWFwQ291bnQ7aCsrKWdbZF0ubWlwbWFwcy5wdXNoKGEubWlwbWFwc1tkKmEubWlwbWFwQ291bnQraF0pLGdbZF0uZm9ybWF0PWEuZm9ybWF0LGdbZF0ud2lkdGg9YS53aWR0aCxnW2RdLmhlaWdodD1hLmhlaWdodH1lbHNlIGYuaW1hZ2Uud2lkdGg9YS53aWR0aCxmLmltYWdlLmhlaWdodD1hLmhlaWdodCxmLm1pcG1hcHM9YS5taXBtYXBzOzE9PT1hLm1pcG1hcENvdW50JiYoZi5taW5GaWx0ZXI9VEhSRUUuTGluZWFyRmlsdGVyKTtmLmZvcm1hdD1hLmZvcm1hdDtmLm5lZWRzVXBkYXRlPSEwO2ImJlxuYihmKX0sYyxkKTtyZXR1cm4gZn0sc2V0Q3Jvc3NPcmlnaW46ZnVuY3Rpb24oYSl7dGhpcy5jcm9zc09yaWdpbj1hfX07XG5USFJFRS5NYXRlcmlhbD1mdW5jdGlvbigpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiaWRcIix7dmFsdWU6VEhSRUUuTWF0ZXJpYWxJZENvdW50Kyt9KTt0aGlzLnV1aWQ9VEhSRUUuTWF0aC5nZW5lcmF0ZVVVSUQoKTt0aGlzLm5hbWU9XCJcIjt0aGlzLnR5cGU9XCJNYXRlcmlhbFwiO3RoaXMuc2lkZT1USFJFRS5Gcm9udFNpZGU7dGhpcy5vcGFjaXR5PTE7dGhpcy50cmFuc3BhcmVudD0hMTt0aGlzLmJsZW5kaW5nPVRIUkVFLk5vcm1hbEJsZW5kaW5nO3RoaXMuYmxlbmRTcmM9VEhSRUUuU3JjQWxwaGFGYWN0b3I7dGhpcy5ibGVuZERzdD1USFJFRS5PbmVNaW51c1NyY0FscGhhRmFjdG9yO3RoaXMuYmxlbmRFcXVhdGlvbj1USFJFRS5BZGRFcXVhdGlvbjt0aGlzLmJsZW5kRXF1YXRpb25BbHBoYT10aGlzLmJsZW5kRHN0QWxwaGE9dGhpcy5ibGVuZFNyY0FscGhhPW51bGw7dGhpcy5kZXB0aEZ1bmM9VEhSRUUuTGVzc0VxdWFsRGVwdGg7dGhpcy5jb2xvcldyaXRlPXRoaXMuZGVwdGhXcml0ZT1cbnRoaXMuZGVwdGhUZXN0PSEwO3RoaXMucHJlY2lzaW9uPW51bGw7dGhpcy5wb2x5Z29uT2Zmc2V0PSExO3RoaXMub3ZlcmRyYXc9dGhpcy5hbHBoYVRlc3Q9dGhpcy5wb2x5Z29uT2Zmc2V0VW5pdHM9dGhpcy5wb2x5Z29uT2Zmc2V0RmFjdG9yPTA7dGhpcy5fbmVlZHNVcGRhdGU9dGhpcy52aXNpYmxlPSEwfTtcblRIUkVFLk1hdGVyaWFsLnByb3RvdHlwZT17Y29uc3RydWN0b3I6VEhSRUUuTWF0ZXJpYWwsZ2V0IG5lZWRzVXBkYXRlKCl7cmV0dXJuIHRoaXMuX25lZWRzVXBkYXRlfSxzZXQgbmVlZHNVcGRhdGUoYSl7ITA9PT1hJiZ0aGlzLnVwZGF0ZSgpO3RoaXMuX25lZWRzVXBkYXRlPWF9LHNldFZhbHVlczpmdW5jdGlvbihhKXtpZih2b2lkIDAhPT1hKWZvcih2YXIgYiBpbiBhKXt2YXIgYz1hW2JdO2lmKHZvaWQgMD09PWMpY29uc29sZS53YXJuKFwiVEhSRUUuTWF0ZXJpYWw6ICdcIitiK1wiJyBwYXJhbWV0ZXIgaXMgdW5kZWZpbmVkLlwiKTtlbHNle3ZhciBkPXRoaXNbYl07dm9pZCAwPT09ZD9jb25zb2xlLndhcm4oXCJUSFJFRS5cIit0aGlzLnR5cGUrXCI6ICdcIitiK1wiJyBpcyBub3QgYSBwcm9wZXJ0eSBvZiB0aGlzIG1hdGVyaWFsLlwiKTpkIGluc3RhbmNlb2YgVEhSRUUuQ29sb3I/ZC5zZXQoYyk6ZCBpbnN0YW5jZW9mIFRIUkVFLlZlY3RvcjMmJmMgaW5zdGFuY2VvZiBUSFJFRS5WZWN0b3IzP2QuY29weShjKTpcbnRoaXNbYl09XCJvdmVyZHJhd1wiPT09Yj9OdW1iZXIoYyk6Y319fSx0b0pTT046ZnVuY3Rpb24oYSl7dmFyIGI9e21ldGFkYXRhOnt2ZXJzaW9uOjQuNCx0eXBlOlwiTWF0ZXJpYWxcIixnZW5lcmF0b3I6XCJNYXRlcmlhbC50b0pTT05cIn19O2IudXVpZD10aGlzLnV1aWQ7Yi50eXBlPXRoaXMudHlwZTtcIlwiIT09dGhpcy5uYW1lJiYoYi5uYW1lPXRoaXMubmFtZSk7dGhpcy5jb2xvciBpbnN0YW5jZW9mIFRIUkVFLkNvbG9yJiYoYi5jb2xvcj10aGlzLmNvbG9yLmdldEhleCgpKTt0aGlzLmVtaXNzaXZlIGluc3RhbmNlb2YgVEhSRUUuQ29sb3ImJihiLmVtaXNzaXZlPXRoaXMuZW1pc3NpdmUuZ2V0SGV4KCkpO3RoaXMuc3BlY3VsYXIgaW5zdGFuY2VvZiBUSFJFRS5Db2xvciYmKGIuc3BlY3VsYXI9dGhpcy5zcGVjdWxhci5nZXRIZXgoKSk7dm9pZCAwIT09dGhpcy5zaGluaW5lc3MmJihiLnNoaW5pbmVzcz10aGlzLnNoaW5pbmVzcyk7dGhpcy5tYXAgaW5zdGFuY2VvZiBUSFJFRS5UZXh0dXJlJiZcbihiLm1hcD10aGlzLm1hcC50b0pTT04oYSkudXVpZCk7dGhpcy5hbHBoYU1hcCBpbnN0YW5jZW9mIFRIUkVFLlRleHR1cmUmJihiLmFscGhhTWFwPXRoaXMuYWxwaGFNYXAudG9KU09OKGEpLnV1aWQpO3RoaXMubGlnaHRNYXAgaW5zdGFuY2VvZiBUSFJFRS5UZXh0dXJlJiYoYi5saWdodE1hcD10aGlzLmxpZ2h0TWFwLnRvSlNPTihhKS51dWlkKTt0aGlzLmJ1bXBNYXAgaW5zdGFuY2VvZiBUSFJFRS5UZXh0dXJlJiYoYi5idW1wTWFwPXRoaXMuYnVtcE1hcC50b0pTT04oYSkudXVpZCxiLmJ1bXBTY2FsZT10aGlzLmJ1bXBTY2FsZSk7dGhpcy5ub3JtYWxNYXAgaW5zdGFuY2VvZiBUSFJFRS5UZXh0dXJlJiYoYi5ub3JtYWxNYXA9dGhpcy5ub3JtYWxNYXAudG9KU09OKGEpLnV1aWQsYi5ub3JtYWxTY2FsZT10aGlzLm5vcm1hbFNjYWxlKTt0aGlzLmRpc3BsYWNlbWVudE1hcCBpbnN0YW5jZW9mIFRIUkVFLlRleHR1cmUmJihiLmRpc3BsYWNlbWVudE1hcD10aGlzLmRpc3BsYWNlbWVudE1hcC50b0pTT04oYSkudXVpZCxcbmIuZGlzcGxhY2VtZW50U2NhbGU9dGhpcy5kaXNwbGFjZW1lbnRTY2FsZSxiLmRpc3BsYWNlbWVudEJpYXM9dGhpcy5kaXNwbGFjZW1lbnRCaWFzKTt0aGlzLnNwZWN1bGFyTWFwIGluc3RhbmNlb2YgVEhSRUUuVGV4dHVyZSYmKGIuc3BlY3VsYXJNYXA9dGhpcy5zcGVjdWxhck1hcC50b0pTT04oYSkudXVpZCk7dGhpcy5lbnZNYXAgaW5zdGFuY2VvZiBUSFJFRS5UZXh0dXJlJiYoYi5lbnZNYXA9dGhpcy5lbnZNYXAudG9KU09OKGEpLnV1aWQsYi5yZWZsZWN0aXZpdHk9dGhpcy5yZWZsZWN0aXZpdHkpO3ZvaWQgMCE9PXRoaXMuc2l6ZSYmKGIuc2l6ZT10aGlzLnNpemUpO3ZvaWQgMCE9PXRoaXMuc2l6ZUF0dGVudWF0aW9uJiYoYi5zaXplQXR0ZW51YXRpb249dGhpcy5zaXplQXR0ZW51YXRpb24pO3ZvaWQgMCE9PXRoaXMudmVydGV4Q29sb3JzJiZ0aGlzLnZlcnRleENvbG9ycyE9PVRIUkVFLk5vQ29sb3JzJiYoYi52ZXJ0ZXhDb2xvcnM9dGhpcy52ZXJ0ZXhDb2xvcnMpO3ZvaWQgMCE9PVxudGhpcy5zaGFkaW5nJiZ0aGlzLnNoYWRpbmchPT1USFJFRS5TbW9vdGhTaGFkaW5nJiYoYi5zaGFkaW5nPXRoaXMuc2hhZGluZyk7dm9pZCAwIT09dGhpcy5ibGVuZGluZyYmdGhpcy5ibGVuZGluZyE9PVRIUkVFLk5vcm1hbEJsZW5kaW5nJiYoYi5ibGVuZGluZz10aGlzLmJsZW5kaW5nKTt2b2lkIDAhPT10aGlzLnNpZGUmJnRoaXMuc2lkZSE9PVRIUkVFLkZyb250U2lkZSYmKGIuc2lkZT10aGlzLnNpZGUpOzE+dGhpcy5vcGFjaXR5JiYoYi5vcGFjaXR5PXRoaXMub3BhY2l0eSk7ITA9PT10aGlzLnRyYW5zcGFyZW50JiYoYi50cmFuc3BhcmVudD10aGlzLnRyYW5zcGFyZW50KTswPHRoaXMuYWxwaGFUZXN0JiYoYi5hbHBoYVRlc3Q9dGhpcy5hbHBoYVRlc3QpOyEwPT09dGhpcy53aXJlZnJhbWUmJihiLndpcmVmcmFtZT10aGlzLndpcmVmcmFtZSk7MTx0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCYmKGIud2lyZWZyYW1lTGluZXdpZHRoPXRoaXMud2lyZWZyYW1lTGluZXdpZHRoKTtyZXR1cm4gYn0sXG5jbG9uZTpmdW5jdGlvbigpe3JldHVybihuZXcgdGhpcy5jb25zdHJ1Y3RvcikuY29weSh0aGlzKX0sY29weTpmdW5jdGlvbihhKXt0aGlzLm5hbWU9YS5uYW1lO3RoaXMuc2lkZT1hLnNpZGU7dGhpcy5vcGFjaXR5PWEub3BhY2l0eTt0aGlzLnRyYW5zcGFyZW50PWEudHJhbnNwYXJlbnQ7dGhpcy5ibGVuZGluZz1hLmJsZW5kaW5nO3RoaXMuYmxlbmRTcmM9YS5ibGVuZFNyYzt0aGlzLmJsZW5kRHN0PWEuYmxlbmREc3Q7dGhpcy5ibGVuZEVxdWF0aW9uPWEuYmxlbmRFcXVhdGlvbjt0aGlzLmJsZW5kU3JjQWxwaGE9YS5ibGVuZFNyY0FscGhhO3RoaXMuYmxlbmREc3RBbHBoYT1hLmJsZW5kRHN0QWxwaGE7dGhpcy5ibGVuZEVxdWF0aW9uQWxwaGE9YS5ibGVuZEVxdWF0aW9uQWxwaGE7dGhpcy5kZXB0aEZ1bmM9YS5kZXB0aEZ1bmM7dGhpcy5kZXB0aFRlc3Q9YS5kZXB0aFRlc3Q7dGhpcy5kZXB0aFdyaXRlPWEuZGVwdGhXcml0ZTt0aGlzLnByZWNpc2lvbj1hLnByZWNpc2lvbjt0aGlzLnBvbHlnb25PZmZzZXQ9XG5hLnBvbHlnb25PZmZzZXQ7dGhpcy5wb2x5Z29uT2Zmc2V0RmFjdG9yPWEucG9seWdvbk9mZnNldEZhY3Rvcjt0aGlzLnBvbHlnb25PZmZzZXRVbml0cz1hLnBvbHlnb25PZmZzZXRVbml0czt0aGlzLmFscGhhVGVzdD1hLmFscGhhVGVzdDt0aGlzLm92ZXJkcmF3PWEub3ZlcmRyYXc7dGhpcy52aXNpYmxlPWEudmlzaWJsZTtyZXR1cm4gdGhpc30sdXBkYXRlOmZ1bmN0aW9uKCl7dGhpcy5kaXNwYXRjaEV2ZW50KHt0eXBlOlwidXBkYXRlXCJ9KX0sZGlzcG9zZTpmdW5jdGlvbigpe3RoaXMuZGlzcGF0Y2hFdmVudCh7dHlwZTpcImRpc3Bvc2VcIn0pfSxnZXQgd3JhcEFyb3VuZCgpe2NvbnNvbGUud2FybihcIlRIUkVFLlwiK3RoaXMudHlwZStcIjogLndyYXBBcm91bmQgaGFzIGJlZW4gcmVtb3ZlZC5cIil9LHNldCB3cmFwQXJvdW5kKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLlwiK3RoaXMudHlwZStcIjogLndyYXBBcm91bmQgaGFzIGJlZW4gcmVtb3ZlZC5cIil9LGdldCB3cmFwUkdCKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuXCIrXG50aGlzLnR5cGUrXCI6IC53cmFwUkdCIGhhcyBiZWVuIHJlbW92ZWQuXCIpO3JldHVybiBuZXcgVEhSRUUuQ29sb3J9fTtUSFJFRS5FdmVudERpc3BhdGNoZXIucHJvdG90eXBlLmFwcGx5KFRIUkVFLk1hdGVyaWFsLnByb3RvdHlwZSk7VEhSRUUuTWF0ZXJpYWxJZENvdW50PTA7VEhSRUUuTGluZUJhc2ljTWF0ZXJpYWw9ZnVuY3Rpb24oYSl7VEhSRUUuTWF0ZXJpYWwuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJMaW5lQmFzaWNNYXRlcmlhbFwiO3RoaXMuY29sb3I9bmV3IFRIUkVFLkNvbG9yKDE2Nzc3MjE1KTt0aGlzLmxpbmV3aWR0aD0xO3RoaXMubGluZWpvaW49dGhpcy5saW5lY2FwPVwicm91bmRcIjt0aGlzLnZlcnRleENvbG9ycz1USFJFRS5Ob0NvbG9yczt0aGlzLmZvZz0hMDt0aGlzLnNldFZhbHVlcyhhKX07VEhSRUUuTGluZUJhc2ljTWF0ZXJpYWwucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuTWF0ZXJpYWwucHJvdG90eXBlKTtcblRIUkVFLkxpbmVCYXNpY01hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5MaW5lQmFzaWNNYXRlcmlhbDtUSFJFRS5MaW5lQmFzaWNNYXRlcmlhbC5wcm90b3R5cGUuY29weT1mdW5jdGlvbihhKXtUSFJFRS5NYXRlcmlhbC5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsYSk7dGhpcy5jb2xvci5jb3B5KGEuY29sb3IpO3RoaXMubGluZXdpZHRoPWEubGluZXdpZHRoO3RoaXMubGluZWNhcD1hLmxpbmVjYXA7dGhpcy5saW5lam9pbj1hLmxpbmVqb2luO3RoaXMudmVydGV4Q29sb3JzPWEudmVydGV4Q29sb3JzO3RoaXMuZm9nPWEuZm9nO3JldHVybiB0aGlzfTtcblRIUkVFLkxpbmVEYXNoZWRNYXRlcmlhbD1mdW5jdGlvbihhKXtUSFJFRS5NYXRlcmlhbC5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIkxpbmVEYXNoZWRNYXRlcmlhbFwiO3RoaXMuY29sb3I9bmV3IFRIUkVFLkNvbG9yKDE2Nzc3MjE1KTt0aGlzLnNjYWxlPXRoaXMubGluZXdpZHRoPTE7dGhpcy5kYXNoU2l6ZT0zO3RoaXMuZ2FwU2l6ZT0xO3RoaXMudmVydGV4Q29sb3JzPSExO3RoaXMuZm9nPSEwO3RoaXMuc2V0VmFsdWVzKGEpfTtUSFJFRS5MaW5lRGFzaGVkTWF0ZXJpYWwucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuTWF0ZXJpYWwucHJvdG90eXBlKTtUSFJFRS5MaW5lRGFzaGVkTWF0ZXJpYWwucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLkxpbmVEYXNoZWRNYXRlcmlhbDtcblRIUkVFLkxpbmVEYXNoZWRNYXRlcmlhbC5wcm90b3R5cGUuY29weT1mdW5jdGlvbihhKXtUSFJFRS5NYXRlcmlhbC5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsYSk7dGhpcy5jb2xvci5jb3B5KGEuY29sb3IpO3RoaXMubGluZXdpZHRoPWEubGluZXdpZHRoO3RoaXMuc2NhbGU9YS5zY2FsZTt0aGlzLmRhc2hTaXplPWEuZGFzaFNpemU7dGhpcy5nYXBTaXplPWEuZ2FwU2l6ZTt0aGlzLnZlcnRleENvbG9ycz1hLnZlcnRleENvbG9yczt0aGlzLmZvZz1hLmZvZztyZXR1cm4gdGhpc307XG5USFJFRS5NZXNoQmFzaWNNYXRlcmlhbD1mdW5jdGlvbihhKXtUSFJFRS5NYXRlcmlhbC5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIk1lc2hCYXNpY01hdGVyaWFsXCI7dGhpcy5jb2xvcj1uZXcgVEhSRUUuQ29sb3IoMTY3NzcyMTUpO3RoaXMuYW9NYXA9dGhpcy5tYXA9bnVsbDt0aGlzLmFvTWFwSW50ZW5zaXR5PTE7dGhpcy5lbnZNYXA9dGhpcy5hbHBoYU1hcD10aGlzLnNwZWN1bGFyTWFwPW51bGw7dGhpcy5jb21iaW5lPVRIUkVFLk11bHRpcGx5T3BlcmF0aW9uO3RoaXMucmVmbGVjdGl2aXR5PTE7dGhpcy5yZWZyYWN0aW9uUmF0aW89Ljk4O3RoaXMuZm9nPSEwO3RoaXMuc2hhZGluZz1USFJFRS5TbW9vdGhTaGFkaW5nO3RoaXMud2lyZWZyYW1lPSExO3RoaXMud2lyZWZyYW1lTGluZXdpZHRoPTE7dGhpcy53aXJlZnJhbWVMaW5lam9pbj10aGlzLndpcmVmcmFtZUxpbmVjYXA9XCJyb3VuZFwiO3RoaXMudmVydGV4Q29sb3JzPVRIUkVFLk5vQ29sb3JzO3RoaXMubW9ycGhUYXJnZXRzPXRoaXMuc2tpbm5pbmc9XG4hMTt0aGlzLnNldFZhbHVlcyhhKX07VEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuTWF0ZXJpYWwucHJvdG90eXBlKTtUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbC5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWw7XG5USFJFRS5NZXNoQmFzaWNNYXRlcmlhbC5wcm90b3R5cGUuY29weT1mdW5jdGlvbihhKXtUSFJFRS5NYXRlcmlhbC5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsYSk7dGhpcy5jb2xvci5jb3B5KGEuY29sb3IpO3RoaXMubWFwPWEubWFwO3RoaXMuYW9NYXA9YS5hb01hcDt0aGlzLmFvTWFwSW50ZW5zaXR5PWEuYW9NYXBJbnRlbnNpdHk7dGhpcy5zcGVjdWxhck1hcD1hLnNwZWN1bGFyTWFwO3RoaXMuYWxwaGFNYXA9YS5hbHBoYU1hcDt0aGlzLmVudk1hcD1hLmVudk1hcDt0aGlzLmNvbWJpbmU9YS5jb21iaW5lO3RoaXMucmVmbGVjdGl2aXR5PWEucmVmbGVjdGl2aXR5O3RoaXMucmVmcmFjdGlvblJhdGlvPWEucmVmcmFjdGlvblJhdGlvO3RoaXMuZm9nPWEuZm9nO3RoaXMuc2hhZGluZz1hLnNoYWRpbmc7dGhpcy53aXJlZnJhbWU9YS53aXJlZnJhbWU7dGhpcy53aXJlZnJhbWVMaW5ld2lkdGg9YS53aXJlZnJhbWVMaW5ld2lkdGg7dGhpcy53aXJlZnJhbWVMaW5lY2FwPWEud2lyZWZyYW1lTGluZWNhcDtcbnRoaXMud2lyZWZyYW1lTGluZWpvaW49YS53aXJlZnJhbWVMaW5lam9pbjt0aGlzLnZlcnRleENvbG9ycz1hLnZlcnRleENvbG9yczt0aGlzLnNraW5uaW5nPWEuc2tpbm5pbmc7dGhpcy5tb3JwaFRhcmdldHM9YS5tb3JwaFRhcmdldHM7cmV0dXJuIHRoaXN9O1xuVEhSRUUuTWVzaExhbWJlcnRNYXRlcmlhbD1mdW5jdGlvbihhKXtUSFJFRS5NYXRlcmlhbC5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIk1lc2hMYW1iZXJ0TWF0ZXJpYWxcIjt0aGlzLmNvbG9yPW5ldyBUSFJFRS5Db2xvcigxNjc3NzIxNSk7dGhpcy5lbWlzc2l2ZT1uZXcgVEhSRUUuQ29sb3IoMCk7dGhpcy5lbnZNYXA9dGhpcy5hbHBoYU1hcD10aGlzLnNwZWN1bGFyTWFwPXRoaXMubWFwPW51bGw7dGhpcy5jb21iaW5lPVRIUkVFLk11bHRpcGx5T3BlcmF0aW9uO3RoaXMucmVmbGVjdGl2aXR5PTE7dGhpcy5yZWZyYWN0aW9uUmF0aW89Ljk4O3RoaXMuZm9nPSEwO3RoaXMud2lyZWZyYW1lPSExO3RoaXMud2lyZWZyYW1lTGluZXdpZHRoPTE7dGhpcy53aXJlZnJhbWVMaW5lam9pbj10aGlzLndpcmVmcmFtZUxpbmVjYXA9XCJyb3VuZFwiO3RoaXMudmVydGV4Q29sb3JzPVRIUkVFLk5vQ29sb3JzO3RoaXMubW9ycGhOb3JtYWxzPXRoaXMubW9ycGhUYXJnZXRzPXRoaXMuc2tpbm5pbmc9ITE7dGhpcy5zZXRWYWx1ZXMoYSl9O1xuVEhSRUUuTWVzaExhbWJlcnRNYXRlcmlhbC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5NYXRlcmlhbC5wcm90b3R5cGUpO1RIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWwucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWw7XG5USFJFRS5NZXNoTGFtYmVydE1hdGVyaWFsLnByb3RvdHlwZS5jb3B5PWZ1bmN0aW9uKGEpe1RIUkVFLk1hdGVyaWFsLnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcyxhKTt0aGlzLmNvbG9yLmNvcHkoYS5jb2xvcik7dGhpcy5lbWlzc2l2ZS5jb3B5KGEuZW1pc3NpdmUpO3RoaXMubWFwPWEubWFwO3RoaXMuc3BlY3VsYXJNYXA9YS5zcGVjdWxhck1hcDt0aGlzLmFscGhhTWFwPWEuYWxwaGFNYXA7dGhpcy5lbnZNYXA9YS5lbnZNYXA7dGhpcy5jb21iaW5lPWEuY29tYmluZTt0aGlzLnJlZmxlY3Rpdml0eT1hLnJlZmxlY3Rpdml0eTt0aGlzLnJlZnJhY3Rpb25SYXRpbz1hLnJlZnJhY3Rpb25SYXRpbzt0aGlzLmZvZz1hLmZvZzt0aGlzLndpcmVmcmFtZT1hLndpcmVmcmFtZTt0aGlzLndpcmVmcmFtZUxpbmV3aWR0aD1hLndpcmVmcmFtZUxpbmV3aWR0aDt0aGlzLndpcmVmcmFtZUxpbmVjYXA9YS53aXJlZnJhbWVMaW5lY2FwO3RoaXMud2lyZWZyYW1lTGluZWpvaW49YS53aXJlZnJhbWVMaW5lam9pbjtcbnRoaXMudmVydGV4Q29sb3JzPWEudmVydGV4Q29sb3JzO3RoaXMuc2tpbm5pbmc9YS5za2lubmluZzt0aGlzLm1vcnBoVGFyZ2V0cz1hLm1vcnBoVGFyZ2V0czt0aGlzLm1vcnBoTm9ybWFscz1hLm1vcnBoTm9ybWFscztyZXR1cm4gdGhpc307XG5USFJFRS5NZXNoUGhvbmdNYXRlcmlhbD1mdW5jdGlvbihhKXtUSFJFRS5NYXRlcmlhbC5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIk1lc2hQaG9uZ01hdGVyaWFsXCI7dGhpcy5jb2xvcj1uZXcgVEhSRUUuQ29sb3IoMTY3NzcyMTUpO3RoaXMuZW1pc3NpdmU9bmV3IFRIUkVFLkNvbG9yKDApO3RoaXMuc3BlY3VsYXI9bmV3IFRIUkVFLkNvbG9yKDExMTg0ODEpO3RoaXMuc2hpbmluZXNzPTMwO3RoaXMubWV0YWw9ITE7dGhpcy5saWdodE1hcD10aGlzLm1hcD1udWxsO3RoaXMubGlnaHRNYXBJbnRlbnNpdHk9MTt0aGlzLmFvTWFwPW51bGw7dGhpcy5hb01hcEludGVuc2l0eT0xO3RoaXMuYnVtcE1hcD10aGlzLmVtaXNzaXZlTWFwPW51bGw7dGhpcy5idW1wU2NhbGU9MTt0aGlzLm5vcm1hbE1hcD1udWxsO3RoaXMubm9ybWFsU2NhbGU9bmV3IFRIUkVFLlZlY3RvcjIoMSwxKTt0aGlzLmRpc3BsYWNlbWVudE1hcD1udWxsO3RoaXMuZGlzcGxhY2VtZW50U2NhbGU9MTt0aGlzLmRpc3BsYWNlbWVudEJpYXM9XG4wO3RoaXMuZW52TWFwPXRoaXMuYWxwaGFNYXA9dGhpcy5zcGVjdWxhck1hcD1udWxsO3RoaXMuY29tYmluZT1USFJFRS5NdWx0aXBseU9wZXJhdGlvbjt0aGlzLnJlZmxlY3Rpdml0eT0xO3RoaXMucmVmcmFjdGlvblJhdGlvPS45ODt0aGlzLmZvZz0hMDt0aGlzLnNoYWRpbmc9VEhSRUUuU21vb3RoU2hhZGluZzt0aGlzLndpcmVmcmFtZT0hMTt0aGlzLndpcmVmcmFtZUxpbmV3aWR0aD0xO3RoaXMud2lyZWZyYW1lTGluZWpvaW49dGhpcy53aXJlZnJhbWVMaW5lY2FwPVwicm91bmRcIjt0aGlzLnZlcnRleENvbG9ycz1USFJFRS5Ob0NvbG9yczt0aGlzLm1vcnBoTm9ybWFscz10aGlzLm1vcnBoVGFyZ2V0cz10aGlzLnNraW5uaW5nPSExO3RoaXMuc2V0VmFsdWVzKGEpfTtUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5NYXRlcmlhbC5wcm90b3R5cGUpO1RIUkVFLk1lc2hQaG9uZ01hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5NZXNoUGhvbmdNYXRlcmlhbDtcblRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsLnByb3RvdHlwZS5jb3B5PWZ1bmN0aW9uKGEpe1RIUkVFLk1hdGVyaWFsLnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcyxhKTt0aGlzLmNvbG9yLmNvcHkoYS5jb2xvcik7dGhpcy5lbWlzc2l2ZS5jb3B5KGEuZW1pc3NpdmUpO3RoaXMuc3BlY3VsYXIuY29weShhLnNwZWN1bGFyKTt0aGlzLnNoaW5pbmVzcz1hLnNoaW5pbmVzczt0aGlzLm1ldGFsPWEubWV0YWw7dGhpcy5tYXA9YS5tYXA7dGhpcy5saWdodE1hcD1hLmxpZ2h0TWFwO3RoaXMubGlnaHRNYXBJbnRlbnNpdHk9YS5saWdodE1hcEludGVuc2l0eTt0aGlzLmFvTWFwPWEuYW9NYXA7dGhpcy5hb01hcEludGVuc2l0eT1hLmFvTWFwSW50ZW5zaXR5O3RoaXMuZW1pc3NpdmVNYXA9YS5lbWlzc2l2ZU1hcDt0aGlzLmJ1bXBNYXA9YS5idW1wTWFwO3RoaXMuYnVtcFNjYWxlPWEuYnVtcFNjYWxlO3RoaXMubm9ybWFsTWFwPWEubm9ybWFsTWFwO3RoaXMubm9ybWFsU2NhbGUuY29weShhLm5vcm1hbFNjYWxlKTtcbnRoaXMuZGlzcGxhY2VtZW50TWFwPWEuZGlzcGxhY2VtZW50TWFwO3RoaXMuZGlzcGxhY2VtZW50U2NhbGU9YS5kaXNwbGFjZW1lbnRTY2FsZTt0aGlzLmRpc3BsYWNlbWVudEJpYXM9YS5kaXNwbGFjZW1lbnRCaWFzO3RoaXMuc3BlY3VsYXJNYXA9YS5zcGVjdWxhck1hcDt0aGlzLmFscGhhTWFwPWEuYWxwaGFNYXA7dGhpcy5lbnZNYXA9YS5lbnZNYXA7dGhpcy5jb21iaW5lPWEuY29tYmluZTt0aGlzLnJlZmxlY3Rpdml0eT1hLnJlZmxlY3Rpdml0eTt0aGlzLnJlZnJhY3Rpb25SYXRpbz1hLnJlZnJhY3Rpb25SYXRpbzt0aGlzLmZvZz1hLmZvZzt0aGlzLnNoYWRpbmc9YS5zaGFkaW5nO3RoaXMud2lyZWZyYW1lPWEud2lyZWZyYW1lO3RoaXMud2lyZWZyYW1lTGluZXdpZHRoPWEud2lyZWZyYW1lTGluZXdpZHRoO3RoaXMud2lyZWZyYW1lTGluZWNhcD1hLndpcmVmcmFtZUxpbmVjYXA7dGhpcy53aXJlZnJhbWVMaW5lam9pbj1hLndpcmVmcmFtZUxpbmVqb2luO3RoaXMudmVydGV4Q29sb3JzPVxuYS52ZXJ0ZXhDb2xvcnM7dGhpcy5za2lubmluZz1hLnNraW5uaW5nO3RoaXMubW9ycGhUYXJnZXRzPWEubW9ycGhUYXJnZXRzO3RoaXMubW9ycGhOb3JtYWxzPWEubW9ycGhOb3JtYWxzO3JldHVybiB0aGlzfTtUSFJFRS5NZXNoRGVwdGhNYXRlcmlhbD1mdW5jdGlvbihhKXtUSFJFRS5NYXRlcmlhbC5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIk1lc2hEZXB0aE1hdGVyaWFsXCI7dGhpcy53aXJlZnJhbWU9dGhpcy5tb3JwaFRhcmdldHM9ITE7dGhpcy53aXJlZnJhbWVMaW5ld2lkdGg9MTt0aGlzLnNldFZhbHVlcyhhKX07VEhSRUUuTWVzaERlcHRoTWF0ZXJpYWwucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuTWF0ZXJpYWwucHJvdG90eXBlKTtUSFJFRS5NZXNoRGVwdGhNYXRlcmlhbC5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuTWVzaERlcHRoTWF0ZXJpYWw7XG5USFJFRS5NZXNoRGVwdGhNYXRlcmlhbC5wcm90b3R5cGUuY29weT1mdW5jdGlvbihhKXtUSFJFRS5NYXRlcmlhbC5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsYSk7dGhpcy53aXJlZnJhbWU9YS53aXJlZnJhbWU7dGhpcy53aXJlZnJhbWVMaW5ld2lkdGg9YS53aXJlZnJhbWVMaW5ld2lkdGg7cmV0dXJuIHRoaXN9O1RIUkVFLk1lc2hOb3JtYWxNYXRlcmlhbD1mdW5jdGlvbihhKXtUSFJFRS5NYXRlcmlhbC5jYWxsKHRoaXMsYSk7dGhpcy50eXBlPVwiTWVzaE5vcm1hbE1hdGVyaWFsXCI7dGhpcy53aXJlZnJhbWU9ITE7dGhpcy53aXJlZnJhbWVMaW5ld2lkdGg9MTt0aGlzLm1vcnBoVGFyZ2V0cz0hMTt0aGlzLnNldFZhbHVlcyhhKX07VEhSRUUuTWVzaE5vcm1hbE1hdGVyaWFsLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLk1hdGVyaWFsLnByb3RvdHlwZSk7VEhSRUUuTWVzaE5vcm1hbE1hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5NZXNoTm9ybWFsTWF0ZXJpYWw7XG5USFJFRS5NZXNoTm9ybWFsTWF0ZXJpYWwucHJvdG90eXBlLmNvcHk9ZnVuY3Rpb24oYSl7VEhSRUUuTWF0ZXJpYWwucHJvdG90eXBlLmNvcHkuY2FsbCh0aGlzLGEpO3RoaXMud2lyZWZyYW1lPWEud2lyZWZyYW1lO3RoaXMud2lyZWZyYW1lTGluZXdpZHRoPWEud2lyZWZyYW1lTGluZXdpZHRoO3JldHVybiB0aGlzfTtUSFJFRS5NdWx0aU1hdGVyaWFsPWZ1bmN0aW9uKGEpe3RoaXMudXVpZD1USFJFRS5NYXRoLmdlbmVyYXRlVVVJRCgpO3RoaXMudHlwZT1cIk11bHRpTWF0ZXJpYWxcIjt0aGlzLm1hdGVyaWFscz1hIGluc3RhbmNlb2YgQXJyYXk/YTpbXTt0aGlzLnZpc2libGU9ITB9O1xuVEhSRUUuTXVsdGlNYXRlcmlhbC5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOlRIUkVFLk11bHRpTWF0ZXJpYWwsdG9KU09OOmZ1bmN0aW9uKCl7Zm9yKHZhciBhPXttZXRhZGF0YTp7dmVyc2lvbjo0LjIsdHlwZTpcIm1hdGVyaWFsXCIsZ2VuZXJhdG9yOlwiTWF0ZXJpYWxFeHBvcnRlclwifSx1dWlkOnRoaXMudXVpZCx0eXBlOnRoaXMudHlwZSxtYXRlcmlhbHM6W119LGI9MCxjPXRoaXMubWF0ZXJpYWxzLmxlbmd0aDtiPGM7YisrKWEubWF0ZXJpYWxzLnB1c2godGhpcy5tYXRlcmlhbHNbYl0udG9KU09OKCkpO2EudmlzaWJsZT10aGlzLnZpc2libGU7cmV0dXJuIGF9LGNsb25lOmZ1bmN0aW9uKCl7Zm9yKHZhciBhPW5ldyB0aGlzLmNvbnN0cnVjdG9yLGI9MDtiPHRoaXMubWF0ZXJpYWxzLmxlbmd0aDtiKyspYS5tYXRlcmlhbHMucHVzaCh0aGlzLm1hdGVyaWFsc1tiXS5jbG9uZSgpKTthLnZpc2libGU9dGhpcy52aXNpYmxlO3JldHVybiBhfX07VEhSRUUuTWVzaEZhY2VNYXRlcmlhbD1USFJFRS5NdWx0aU1hdGVyaWFsO1xuVEhSRUUuUG9pbnRzTWF0ZXJpYWw9ZnVuY3Rpb24oYSl7VEhSRUUuTWF0ZXJpYWwuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJQb2ludHNNYXRlcmlhbFwiO3RoaXMuY29sb3I9bmV3IFRIUkVFLkNvbG9yKDE2Nzc3MjE1KTt0aGlzLm1hcD1udWxsO3RoaXMuc2l6ZT0xO3RoaXMuc2l6ZUF0dGVudWF0aW9uPSEwO3RoaXMudmVydGV4Q29sb3JzPVRIUkVFLk5vQ29sb3JzO3RoaXMuZm9nPSEwO3RoaXMuc2V0VmFsdWVzKGEpfTtUSFJFRS5Qb2ludHNNYXRlcmlhbC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5NYXRlcmlhbC5wcm90b3R5cGUpO1RIUkVFLlBvaW50c01hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5Qb2ludHNNYXRlcmlhbDtcblRIUkVFLlBvaW50c01hdGVyaWFsLnByb3RvdHlwZS5jb3B5PWZ1bmN0aW9uKGEpe1RIUkVFLk1hdGVyaWFsLnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcyxhKTt0aGlzLmNvbG9yLmNvcHkoYS5jb2xvcik7dGhpcy5tYXA9YS5tYXA7dGhpcy5zaXplPWEuc2l6ZTt0aGlzLnNpemVBdHRlbnVhdGlvbj1hLnNpemVBdHRlbnVhdGlvbjt0aGlzLnZlcnRleENvbG9ycz1hLnZlcnRleENvbG9yczt0aGlzLmZvZz1hLmZvZztyZXR1cm4gdGhpc307VEhSRUUuUG9pbnRDbG91ZE1hdGVyaWFsPWZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLlBvaW50Q2xvdWRNYXRlcmlhbCBoYXMgYmVlbiByZW5hbWVkIHRvIFRIUkVFLlBvaW50c01hdGVyaWFsLlwiKTtyZXR1cm4gbmV3IFRIUkVFLlBvaW50c01hdGVyaWFsKGEpfTtcblRIUkVFLlBhcnRpY2xlQmFzaWNNYXRlcmlhbD1mdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5QYXJ0aWNsZUJhc2ljTWF0ZXJpYWwgaGFzIGJlZW4gcmVuYW1lZCB0byBUSFJFRS5Qb2ludHNNYXRlcmlhbC5cIik7cmV0dXJuIG5ldyBUSFJFRS5Qb2ludHNNYXRlcmlhbChhKX07VEhSRUUuUGFydGljbGVTeXN0ZW1NYXRlcmlhbD1mdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5QYXJ0aWNsZVN5c3RlbU1hdGVyaWFsIGhhcyBiZWVuIHJlbmFtZWQgdG8gVEhSRUUuUG9pbnRzTWF0ZXJpYWwuXCIpO3JldHVybiBuZXcgVEhSRUUuUG9pbnRzTWF0ZXJpYWwoYSl9O1xuVEhSRUUuU2hhZGVyTWF0ZXJpYWw9ZnVuY3Rpb24oYSl7VEhSRUUuTWF0ZXJpYWwuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJTaGFkZXJNYXRlcmlhbFwiO3RoaXMuZGVmaW5lcz17fTt0aGlzLnVuaWZvcm1zPXt9O3RoaXMudmVydGV4U2hhZGVyPVwidm9pZCBtYWluKCkge1xcblxcdGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG1vZGVsVmlld01hdHJpeCAqIHZlYzQoIHBvc2l0aW9uLCAxLjAgKTtcXG59XCI7dGhpcy5mcmFnbWVudFNoYWRlcj1cInZvaWQgbWFpbigpIHtcXG5cXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCAxLjAsIDAuMCwgMC4wLCAxLjAgKTtcXG59XCI7dGhpcy5zaGFkaW5nPVRIUkVFLlNtb290aFNoYWRpbmc7dGhpcy5saW5ld2lkdGg9MTt0aGlzLndpcmVmcmFtZT0hMTt0aGlzLndpcmVmcmFtZUxpbmV3aWR0aD0xO3RoaXMubGlnaHRzPXRoaXMuZm9nPSExO3RoaXMudmVydGV4Q29sb3JzPVRIUkVFLk5vQ29sb3JzO3RoaXMuZGVyaXZhdGl2ZXM9dGhpcy5tb3JwaE5vcm1hbHM9XG50aGlzLm1vcnBoVGFyZ2V0cz10aGlzLnNraW5uaW5nPSExO3RoaXMuZGVmYXVsdEF0dHJpYnV0ZVZhbHVlcz17Y29sb3I6WzEsMSwxXSx1djpbMCwwXSx1djI6WzAsMF19O3RoaXMuaW5kZXgwQXR0cmlidXRlTmFtZT12b2lkIDA7dm9pZCAwIT09YSYmKHZvaWQgMCE9PWEuYXR0cmlidXRlcyYmY29uc29sZS5lcnJvcihcIlRIUkVFLlNoYWRlck1hdGVyaWFsOiBhdHRyaWJ1dGVzIHNob3VsZCBub3cgYmUgZGVmaW5lZCBpbiBUSFJFRS5CdWZmZXJHZW9tZXRyeSBpbnN0ZWFkLlwiKSx0aGlzLnNldFZhbHVlcyhhKSl9O1RIUkVFLlNoYWRlck1hdGVyaWFsLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLk1hdGVyaWFsLnByb3RvdHlwZSk7VEhSRUUuU2hhZGVyTWF0ZXJpYWwucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLlNoYWRlck1hdGVyaWFsO1xuVEhSRUUuU2hhZGVyTWF0ZXJpYWwucHJvdG90eXBlLmNvcHk9ZnVuY3Rpb24oYSl7VEhSRUUuTWF0ZXJpYWwucHJvdG90eXBlLmNvcHkuY2FsbCh0aGlzLGEpO3RoaXMuZnJhZ21lbnRTaGFkZXI9YS5mcmFnbWVudFNoYWRlcjt0aGlzLnZlcnRleFNoYWRlcj1hLnZlcnRleFNoYWRlcjt0aGlzLnVuaWZvcm1zPVRIUkVFLlVuaWZvcm1zVXRpbHMuY2xvbmUoYS51bmlmb3Jtcyk7dGhpcy5hdHRyaWJ1dGVzPWEuYXR0cmlidXRlczt0aGlzLmRlZmluZXM9YS5kZWZpbmVzO3RoaXMuc2hhZGluZz1hLnNoYWRpbmc7dGhpcy53aXJlZnJhbWU9YS53aXJlZnJhbWU7dGhpcy53aXJlZnJhbWVMaW5ld2lkdGg9YS53aXJlZnJhbWVMaW5ld2lkdGg7dGhpcy5mb2c9YS5mb2c7dGhpcy5saWdodHM9YS5saWdodHM7dGhpcy52ZXJ0ZXhDb2xvcnM9YS52ZXJ0ZXhDb2xvcnM7dGhpcy5za2lubmluZz1hLnNraW5uaW5nO3RoaXMubW9ycGhUYXJnZXRzPWEubW9ycGhUYXJnZXRzO3RoaXMubW9ycGhOb3JtYWxzPVxuYS5tb3JwaE5vcm1hbHM7dGhpcy5kZXJpdmF0aXZlcz1hLmRlcml2YXRpdmVzO3JldHVybiB0aGlzfTtUSFJFRS5TaGFkZXJNYXRlcmlhbC5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKGEpe2E9VEhSRUUuTWF0ZXJpYWwucHJvdG90eXBlLnRvSlNPTi5jYWxsKHRoaXMsYSk7YS51bmlmb3Jtcz10aGlzLnVuaWZvcm1zO2EuYXR0cmlidXRlcz10aGlzLmF0dHJpYnV0ZXM7YS52ZXJ0ZXhTaGFkZXI9dGhpcy52ZXJ0ZXhTaGFkZXI7YS5mcmFnbWVudFNoYWRlcj10aGlzLmZyYWdtZW50U2hhZGVyO3JldHVybiBhfTtUSFJFRS5SYXdTaGFkZXJNYXRlcmlhbD1mdW5jdGlvbihhKXtUSFJFRS5TaGFkZXJNYXRlcmlhbC5jYWxsKHRoaXMsYSk7dGhpcy50eXBlPVwiUmF3U2hhZGVyTWF0ZXJpYWxcIn07VEhSRUUuUmF3U2hhZGVyTWF0ZXJpYWwucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuU2hhZGVyTWF0ZXJpYWwucHJvdG90eXBlKTtcblRIUkVFLlJhd1NoYWRlck1hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5SYXdTaGFkZXJNYXRlcmlhbDtUSFJFRS5TcHJpdGVNYXRlcmlhbD1mdW5jdGlvbihhKXtUSFJFRS5NYXRlcmlhbC5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIlNwcml0ZU1hdGVyaWFsXCI7dGhpcy5jb2xvcj1uZXcgVEhSRUUuQ29sb3IoMTY3NzcyMTUpO3RoaXMubWFwPW51bGw7dGhpcy5yb3RhdGlvbj0wO3RoaXMuZm9nPSExO3RoaXMuc2V0VmFsdWVzKGEpfTtUSFJFRS5TcHJpdGVNYXRlcmlhbC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5NYXRlcmlhbC5wcm90b3R5cGUpO1RIUkVFLlNwcml0ZU1hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5TcHJpdGVNYXRlcmlhbDtcblRIUkVFLlNwcml0ZU1hdGVyaWFsLnByb3RvdHlwZS5jb3B5PWZ1bmN0aW9uKGEpe1RIUkVFLk1hdGVyaWFsLnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcyxhKTt0aGlzLmNvbG9yLmNvcHkoYS5jb2xvcik7dGhpcy5tYXA9YS5tYXA7dGhpcy5yb3RhdGlvbj1hLnJvdGF0aW9uO3RoaXMuZm9nPWEuZm9nO3JldHVybiB0aGlzfTtcblRIUkVFLlRleHR1cmU9ZnVuY3Rpb24oYSxiLGMsZCxlLGcsZixoLGwpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiaWRcIix7dmFsdWU6VEhSRUUuVGV4dHVyZUlkQ291bnQrK30pO3RoaXMudXVpZD1USFJFRS5NYXRoLmdlbmVyYXRlVVVJRCgpO3RoaXMuc291cmNlRmlsZT10aGlzLm5hbWU9XCJcIjt0aGlzLmltYWdlPXZvaWQgMCE9PWE/YTpUSFJFRS5UZXh0dXJlLkRFRkFVTFRfSU1BR0U7dGhpcy5taXBtYXBzPVtdO3RoaXMubWFwcGluZz12b2lkIDAhPT1iP2I6VEhSRUUuVGV4dHVyZS5ERUZBVUxUX01BUFBJTkc7dGhpcy53cmFwUz12b2lkIDAhPT1jP2M6VEhSRUUuQ2xhbXBUb0VkZ2VXcmFwcGluZzt0aGlzLndyYXBUPXZvaWQgMCE9PWQ/ZDpUSFJFRS5DbGFtcFRvRWRnZVdyYXBwaW5nO3RoaXMubWFnRmlsdGVyPXZvaWQgMCE9PWU/ZTpUSFJFRS5MaW5lYXJGaWx0ZXI7dGhpcy5taW5GaWx0ZXI9dm9pZCAwIT09Zz9nOlRIUkVFLkxpbmVhck1pcE1hcExpbmVhckZpbHRlcjtcbnRoaXMuYW5pc290cm9weT12b2lkIDAhPT1sP2w6MTt0aGlzLmZvcm1hdD12b2lkIDAhPT1mP2Y6VEhSRUUuUkdCQUZvcm1hdDt0aGlzLnR5cGU9dm9pZCAwIT09aD9oOlRIUkVFLlVuc2lnbmVkQnl0ZVR5cGU7dGhpcy5vZmZzZXQ9bmV3IFRIUkVFLlZlY3RvcjIoMCwwKTt0aGlzLnJlcGVhdD1uZXcgVEhSRUUuVmVjdG9yMigxLDEpO3RoaXMuZ2VuZXJhdGVNaXBtYXBzPSEwO3RoaXMucHJlbXVsdGlwbHlBbHBoYT0hMTt0aGlzLmZsaXBZPSEwO3RoaXMudW5wYWNrQWxpZ25tZW50PTQ7dGhpcy52ZXJzaW9uPTA7dGhpcy5vblVwZGF0ZT1udWxsfTtUSFJFRS5UZXh0dXJlLkRFRkFVTFRfSU1BR0U9dm9pZCAwO1RIUkVFLlRleHR1cmUuREVGQVVMVF9NQVBQSU5HPVRIUkVFLlVWTWFwcGluZztcblRIUkVFLlRleHR1cmUucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5UZXh0dXJlLHNldCBuZWVkc1VwZGF0ZShhKXshMD09PWEmJnRoaXMudmVyc2lvbisrfSxjbG9uZTpmdW5jdGlvbigpe3JldHVybihuZXcgdGhpcy5jb25zdHJ1Y3RvcikuY29weSh0aGlzKX0sY29weTpmdW5jdGlvbihhKXt0aGlzLmltYWdlPWEuaW1hZ2U7dGhpcy5taXBtYXBzPWEubWlwbWFwcy5zbGljZSgwKTt0aGlzLm1hcHBpbmc9YS5tYXBwaW5nO3RoaXMud3JhcFM9YS53cmFwUzt0aGlzLndyYXBUPWEud3JhcFQ7dGhpcy5tYWdGaWx0ZXI9YS5tYWdGaWx0ZXI7dGhpcy5taW5GaWx0ZXI9YS5taW5GaWx0ZXI7dGhpcy5hbmlzb3Ryb3B5PWEuYW5pc290cm9weTt0aGlzLmZvcm1hdD1hLmZvcm1hdDt0aGlzLnR5cGU9YS50eXBlO3RoaXMub2Zmc2V0LmNvcHkoYS5vZmZzZXQpO3RoaXMucmVwZWF0LmNvcHkoYS5yZXBlYXQpO3RoaXMuZ2VuZXJhdGVNaXBtYXBzPWEuZ2VuZXJhdGVNaXBtYXBzO3RoaXMucHJlbXVsdGlwbHlBbHBoYT1cbmEucHJlbXVsdGlwbHlBbHBoYTt0aGlzLmZsaXBZPWEuZmxpcFk7dGhpcy51bnBhY2tBbGlnbm1lbnQ9YS51bnBhY2tBbGlnbm1lbnQ7cmV0dXJuIHRoaXN9LHRvSlNPTjpmdW5jdGlvbihhKXtpZih2b2lkIDAhPT1hLnRleHR1cmVzW3RoaXMudXVpZF0pcmV0dXJuIGEudGV4dHVyZXNbdGhpcy51dWlkXTt2YXIgYj17bWV0YWRhdGE6e3ZlcnNpb246NC40LHR5cGU6XCJUZXh0dXJlXCIsZ2VuZXJhdG9yOlwiVGV4dHVyZS50b0pTT05cIn0sdXVpZDp0aGlzLnV1aWQsbmFtZTp0aGlzLm5hbWUsbWFwcGluZzp0aGlzLm1hcHBpbmcscmVwZWF0Olt0aGlzLnJlcGVhdC54LHRoaXMucmVwZWF0LnldLG9mZnNldDpbdGhpcy5vZmZzZXQueCx0aGlzLm9mZnNldC55XSx3cmFwOlt0aGlzLndyYXBTLHRoaXMud3JhcFRdLG1pbkZpbHRlcjp0aGlzLm1pbkZpbHRlcixtYWdGaWx0ZXI6dGhpcy5tYWdGaWx0ZXIsYW5pc290cm9weTp0aGlzLmFuaXNvdHJvcHl9O2lmKHZvaWQgMCE9PXRoaXMuaW1hZ2Upe3ZhciBjPVxudGhpcy5pbWFnZTt2b2lkIDA9PT1jLnV1aWQmJihjLnV1aWQ9VEhSRUUuTWF0aC5nZW5lcmF0ZVVVSUQoKSk7aWYodm9pZCAwPT09YS5pbWFnZXNbYy51dWlkXSl7dmFyIGQ9YS5pbWFnZXMsZT1jLnV1aWQsZz1jLnV1aWQsZjt2b2lkIDAhPT1jLnRvRGF0YVVSTD9mPWM6KGY9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKSxmLndpZHRoPWMud2lkdGgsZi5oZWlnaHQ9Yy5oZWlnaHQsZi5nZXRDb250ZXh0KFwiMmRcIikuZHJhd0ltYWdlKGMsMCwwLGMud2lkdGgsYy5oZWlnaHQpKTtmPTIwNDg8Zi53aWR0aHx8MjA0ODxmLmhlaWdodD9mLnRvRGF0YVVSTChcImltYWdlL2pwZWdcIiwuNik6Zi50b0RhdGFVUkwoXCJpbWFnZS9wbmdcIik7ZFtlXT17dXVpZDpnLHVybDpmfX1iLmltYWdlPWMudXVpZH1yZXR1cm4gYS50ZXh0dXJlc1t0aGlzLnV1aWRdPWJ9LGRpc3Bvc2U6ZnVuY3Rpb24oKXt0aGlzLmRpc3BhdGNoRXZlbnQoe3R5cGU6XCJkaXNwb3NlXCJ9KX0sdHJhbnNmb3JtVXY6ZnVuY3Rpb24oYSl7aWYodGhpcy5tYXBwaW5nPT09XG5USFJFRS5VVk1hcHBpbmcpe2EubXVsdGlwbHkodGhpcy5yZXBlYXQpO2EuYWRkKHRoaXMub2Zmc2V0KTtpZigwPmEueHx8MTxhLngpc3dpdGNoKHRoaXMud3JhcFMpe2Nhc2UgVEhSRUUuUmVwZWF0V3JhcHBpbmc6YS54LT1NYXRoLmZsb29yKGEueCk7YnJlYWs7Y2FzZSBUSFJFRS5DbGFtcFRvRWRnZVdyYXBwaW5nOmEueD0wPmEueD8wOjE7YnJlYWs7Y2FzZSBUSFJFRS5NaXJyb3JlZFJlcGVhdFdyYXBwaW5nOjE9PT1NYXRoLmFicyhNYXRoLmZsb29yKGEueCklMik/YS54PU1hdGguY2VpbChhLngpLWEueDphLngtPU1hdGguZmxvb3IoYS54KX1pZigwPmEueXx8MTxhLnkpc3dpdGNoKHRoaXMud3JhcFQpe2Nhc2UgVEhSRUUuUmVwZWF0V3JhcHBpbmc6YS55LT1NYXRoLmZsb29yKGEueSk7YnJlYWs7Y2FzZSBUSFJFRS5DbGFtcFRvRWRnZVdyYXBwaW5nOmEueT0wPmEueT8wOjE7YnJlYWs7Y2FzZSBUSFJFRS5NaXJyb3JlZFJlcGVhdFdyYXBwaW5nOjE9PT1NYXRoLmFicyhNYXRoLmZsb29yKGEueSklXG4yKT9hLnk9TWF0aC5jZWlsKGEueSktYS55OmEueS09TWF0aC5mbG9vcihhLnkpfXRoaXMuZmxpcFkmJihhLnk9MS1hLnkpfX19O1RIUkVFLkV2ZW50RGlzcGF0Y2hlci5wcm90b3R5cGUuYXBwbHkoVEhSRUUuVGV4dHVyZS5wcm90b3R5cGUpO1RIUkVFLlRleHR1cmVJZENvdW50PTA7VEhSRUUuQ2FudmFzVGV4dHVyZT1mdW5jdGlvbihhLGIsYyxkLGUsZyxmLGgsbCl7VEhSRUUuVGV4dHVyZS5jYWxsKHRoaXMsYSxiLGMsZCxlLGcsZixoLGwpO3RoaXMubmVlZHNVcGRhdGU9ITB9O1RIUkVFLkNhbnZhc1RleHR1cmUucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuVGV4dHVyZS5wcm90b3R5cGUpO1RIUkVFLkNhbnZhc1RleHR1cmUucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLkNhbnZhc1RleHR1cmU7XG5USFJFRS5DdWJlVGV4dHVyZT1mdW5jdGlvbihhLGIsYyxkLGUsZyxmLGgsbCl7Yj12b2lkIDAhPT1iP2I6VEhSRUUuQ3ViZVJlZmxlY3Rpb25NYXBwaW5nO1RIUkVFLlRleHR1cmUuY2FsbCh0aGlzLGEsYixjLGQsZSxnLGYsaCxsKTt0aGlzLmltYWdlcz1hO3RoaXMuZmxpcFk9ITF9O1RIUkVFLkN1YmVUZXh0dXJlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLlRleHR1cmUucHJvdG90eXBlKTtUSFJFRS5DdWJlVGV4dHVyZS5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuQ3ViZVRleHR1cmU7VEhSRUUuQ3ViZVRleHR1cmUucHJvdG90eXBlLmNvcHk9ZnVuY3Rpb24oYSl7VEhSRUUuVGV4dHVyZS5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsYSk7dGhpcy5pbWFnZXM9YS5pbWFnZXM7cmV0dXJuIHRoaXN9O1xuVEhSRUUuQ29tcHJlc3NlZFRleHR1cmU9ZnVuY3Rpb24oYSxiLGMsZCxlLGcsZixoLGwsayxtKXtUSFJFRS5UZXh0dXJlLmNhbGwodGhpcyxudWxsLGcsZixoLGwsayxkLGUsbSk7dGhpcy5pbWFnZT17d2lkdGg6YixoZWlnaHQ6Y307dGhpcy5taXBtYXBzPWE7dGhpcy5nZW5lcmF0ZU1pcG1hcHM9dGhpcy5mbGlwWT0hMX07VEhSRUUuQ29tcHJlc3NlZFRleHR1cmUucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuVGV4dHVyZS5wcm90b3R5cGUpO1RIUkVFLkNvbXByZXNzZWRUZXh0dXJlLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5Db21wcmVzc2VkVGV4dHVyZTtcblRIUkVFLkRhdGFUZXh0dXJlPWZ1bmN0aW9uKGEsYixjLGQsZSxnLGYsaCxsLGssbSl7VEhSRUUuVGV4dHVyZS5jYWxsKHRoaXMsbnVsbCxnLGYsaCxsLGssZCxlLG0pO3RoaXMuaW1hZ2U9e2RhdGE6YSx3aWR0aDpiLGhlaWdodDpjfTt0aGlzLm1hZ0ZpbHRlcj12b2lkIDAhPT1sP2w6VEhSRUUuTmVhcmVzdEZpbHRlcjt0aGlzLm1pbkZpbHRlcj12b2lkIDAhPT1rP2s6VEhSRUUuTmVhcmVzdEZpbHRlcjt0aGlzLmdlbmVyYXRlTWlwbWFwcz10aGlzLmZsaXBZPSExfTtUSFJFRS5EYXRhVGV4dHVyZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5UZXh0dXJlLnByb3RvdHlwZSk7VEhSRUUuRGF0YVRleHR1cmUucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLkRhdGFUZXh0dXJlO1xuVEhSRUUuVmlkZW9UZXh0dXJlPWZ1bmN0aW9uKGEsYixjLGQsZSxnLGYsaCxsKXtmdW5jdGlvbiBrKCl7cmVxdWVzdEFuaW1hdGlvbkZyYW1lKGspO2EucmVhZHlTdGF0ZT09PWEuSEFWRV9FTk9VR0hfREFUQSYmKG0ubmVlZHNVcGRhdGU9ITApfVRIUkVFLlRleHR1cmUuY2FsbCh0aGlzLGEsYixjLGQsZSxnLGYsaCxsKTt0aGlzLmdlbmVyYXRlTWlwbWFwcz0hMTt2YXIgbT10aGlzO2soKX07VEhSRUUuVmlkZW9UZXh0dXJlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLlRleHR1cmUucHJvdG90eXBlKTtUSFJFRS5WaWRlb1RleHR1cmUucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLlZpZGVvVGV4dHVyZTtUSFJFRS5Hcm91cD1mdW5jdGlvbigpe1RIUkVFLk9iamVjdDNELmNhbGwodGhpcyk7dGhpcy50eXBlPVwiR3JvdXBcIn07VEhSRUUuR3JvdXAucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuT2JqZWN0M0QucHJvdG90eXBlKTtcblRIUkVFLkdyb3VwLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5Hcm91cDtUSFJFRS5Qb2ludHM9ZnVuY3Rpb24oYSxiKXtUSFJFRS5PYmplY3QzRC5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIlBvaW50c1wiO3RoaXMuZ2VvbWV0cnk9dm9pZCAwIT09YT9hOm5ldyBUSFJFRS5HZW9tZXRyeTt0aGlzLm1hdGVyaWFsPXZvaWQgMCE9PWI/YjpuZXcgVEhSRUUuUG9pbnRzTWF0ZXJpYWwoe2NvbG9yOjE2Nzc3MjE1Kk1hdGgucmFuZG9tKCl9KX07VEhSRUUuUG9pbnRzLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLk9iamVjdDNELnByb3RvdHlwZSk7VEhSRUUuUG9pbnRzLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5Qb2ludHM7XG5USFJFRS5Qb2ludHMucHJvdG90eXBlLnJheWNhc3Q9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuTWF0cml4NCxiPW5ldyBUSFJFRS5SYXk7cmV0dXJuIGZ1bmN0aW9uKGMsZCl7ZnVuY3Rpb24gZShhLGUpe3ZhciBmPWIuZGlzdGFuY2VTcVRvUG9pbnQoYSk7aWYoZjxsKXt2YXIgaD1iLmNsb3Nlc3RQb2ludFRvUG9pbnQoYSk7aC5hcHBseU1hdHJpeDQoZy5tYXRyaXhXb3JsZCk7dmFyIGs9Yy5yYXkub3JpZ2luLmRpc3RhbmNlVG8oaCk7azxjLm5lYXJ8fGs+Yy5mYXJ8fGQucHVzaCh7ZGlzdGFuY2U6ayxkaXN0YW5jZVRvUmF5Ok1hdGguc3FydChmKSxwb2ludDpoLmNsb25lKCksaW5kZXg6ZSxmYWNlOm51bGwsb2JqZWN0Omd9KX19dmFyIGc9dGhpcyxmPWcuZ2VvbWV0cnksaD1jLnBhcmFtcy5Qb2ludHMudGhyZXNob2xkO2EuZ2V0SW52ZXJzZSh0aGlzLm1hdHJpeFdvcmxkKTtiLmNvcHkoYy5yYXkpLmFwcGx5TWF0cml4NChhKTtpZihudWxsPT09Zi5ib3VuZGluZ0JveHx8ITEhPT1cbmIuaXNJbnRlcnNlY3Rpb25Cb3goZi5ib3VuZGluZ0JveCkpe3ZhciBoPWgvKCh0aGlzLnNjYWxlLngrdGhpcy5zY2FsZS55K3RoaXMuc2NhbGUueikvMyksbD1oKmgsaD1uZXcgVEhSRUUuVmVjdG9yMztpZihmIGluc3RhbmNlb2YgVEhSRUUuQnVmZmVyR2VvbWV0cnkpe3ZhciBrPWYuaW5kZXgsZj1mLmF0dHJpYnV0ZXMucG9zaXRpb24uYXJyYXk7aWYobnVsbCE9PWspZm9yKHZhciBtPWsuYXJyYXksaz0wLHA9bS5sZW5ndGg7azxwO2srKyl7dmFyIG49bVtrXTtoLmZyb21BcnJheShmLDMqbik7ZShoLG4pfWVsc2UgZm9yKGs9MCxtPWYubGVuZ3RoLzM7azxtO2srKyloLmZyb21BcnJheShmLDMqayksZShoLGspfWVsc2UgZm9yKGg9Zi52ZXJ0aWNlcyxrPTAsbT1oLmxlbmd0aDtrPG07aysrKWUoaFtrXSxrKX19fSgpO1RIUkVFLlBvaW50cy5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oKXtyZXR1cm4obmV3IHRoaXMuY29uc3RydWN0b3IodGhpcy5nZW9tZXRyeSx0aGlzLm1hdGVyaWFsKSkuY29weSh0aGlzKX07XG5USFJFRS5Qb2ludENsb3VkPWZ1bmN0aW9uKGEsYil7Y29uc29sZS53YXJuKFwiVEhSRUUuUG9pbnRDbG91ZCBoYXMgYmVlbiByZW5hbWVkIHRvIFRIUkVFLlBvaW50cy5cIik7cmV0dXJuIG5ldyBUSFJFRS5Qb2ludHMoYSxiKX07VEhSRUUuUGFydGljbGVTeXN0ZW09ZnVuY3Rpb24oYSxiKXtjb25zb2xlLndhcm4oXCJUSFJFRS5QYXJ0aWNsZVN5c3RlbSBoYXMgYmVlbiByZW5hbWVkIHRvIFRIUkVFLlBvaW50cy5cIik7cmV0dXJuIG5ldyBUSFJFRS5Qb2ludHMoYSxiKX07XG5USFJFRS5MaW5lPWZ1bmN0aW9uKGEsYixjKXtpZigxPT09YylyZXR1cm4gY29uc29sZS53YXJuKFwiVEhSRUUuTGluZTogcGFyYW1ldGVyIFRIUkVFLkxpbmVQaWVjZXMgbm8gbG9uZ2VyIHN1cHBvcnRlZC4gQ3JlYXRlZCBUSFJFRS5MaW5lU2VnbWVudHMgaW5zdGVhZC5cIiksbmV3IFRIUkVFLkxpbmVTZWdtZW50cyhhLGIpO1RIUkVFLk9iamVjdDNELmNhbGwodGhpcyk7dGhpcy50eXBlPVwiTGluZVwiO3RoaXMuZ2VvbWV0cnk9dm9pZCAwIT09YT9hOm5ldyBUSFJFRS5HZW9tZXRyeTt0aGlzLm1hdGVyaWFsPXZvaWQgMCE9PWI/YjpuZXcgVEhSRUUuTGluZUJhc2ljTWF0ZXJpYWwoe2NvbG9yOjE2Nzc3MjE1Kk1hdGgucmFuZG9tKCl9KX07VEhSRUUuTGluZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5PYmplY3QzRC5wcm90b3R5cGUpO1RIUkVFLkxpbmUucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLkxpbmU7XG5USFJFRS5MaW5lLnByb3RvdHlwZS5yYXljYXN0PWZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLk1hdHJpeDQsYj1uZXcgVEhSRUUuUmF5LGM9bmV3IFRIUkVFLlNwaGVyZTtyZXR1cm4gZnVuY3Rpb24oZCxlKXt2YXIgZz1kLmxpbmVQcmVjaXNpb24sZz1nKmcsZj10aGlzLmdlb21ldHJ5O251bGw9PT1mLmJvdW5kaW5nU3BoZXJlJiZmLmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO2MuY29weShmLmJvdW5kaW5nU3BoZXJlKTtjLmFwcGx5TWF0cml4NCh0aGlzLm1hdHJpeFdvcmxkKTtpZighMSE9PWQucmF5LmlzSW50ZXJzZWN0aW9uU3BoZXJlKGMpKXthLmdldEludmVyc2UodGhpcy5tYXRyaXhXb3JsZCk7Yi5jb3B5KGQucmF5KS5hcHBseU1hdHJpeDQoYSk7dmFyIGg9bmV3IFRIUkVFLlZlY3RvcjMsbD1uZXcgVEhSRUUuVmVjdG9yMyxrPW5ldyBUSFJFRS5WZWN0b3IzLG09bmV3IFRIUkVFLlZlY3RvcjMscD10aGlzIGluc3RhbmNlb2YgVEhSRUUuTGluZVNlZ21lbnRzPzI6MTtpZihmIGluc3RhbmNlb2ZcblRIUkVFLkJ1ZmZlckdlb21ldHJ5KXt2YXIgbj1mLmluZGV4LHE9Zi5hdHRyaWJ1dGVzO2lmKG51bGwhPT1uKWZvcih2YXIgZj1uLmFycmF5LHE9cS5wb3NpdGlvbi5hcnJheSxuPTAscz1mLmxlbmd0aC0xO248cztuKz1wKXt2YXIgdD1mW24rMV07aC5mcm9tQXJyYXkocSwzKmZbbl0pO2wuZnJvbUFycmF5KHEsMyp0KTt0PWIuZGlzdGFuY2VTcVRvU2VnbWVudChoLGwsbSxrKTt0Pmd8fChtLmFwcGx5TWF0cml4NCh0aGlzLm1hdHJpeFdvcmxkKSx0PWQucmF5Lm9yaWdpbi5kaXN0YW5jZVRvKG0pLHQ8ZC5uZWFyfHx0PmQuZmFyfHxlLnB1c2goe2Rpc3RhbmNlOnQscG9pbnQ6ay5jbG9uZSgpLmFwcGx5TWF0cml4NCh0aGlzLm1hdHJpeFdvcmxkKSxpbmRleDpuLGZhY2U6bnVsbCxmYWNlSW5kZXg6bnVsbCxvYmplY3Q6dGhpc30pKX1lbHNlIGZvcihxPXEucG9zaXRpb24uYXJyYXksbj0wLHM9cS5sZW5ndGgvMy0xO248cztuKz1wKWguZnJvbUFycmF5KHEsMypuKSxsLmZyb21BcnJheShxLFxuMypuKzMpLHQ9Yi5kaXN0YW5jZVNxVG9TZWdtZW50KGgsbCxtLGspLHQ+Z3x8KG0uYXBwbHlNYXRyaXg0KHRoaXMubWF0cml4V29ybGQpLHQ9ZC5yYXkub3JpZ2luLmRpc3RhbmNlVG8obSksdDxkLm5lYXJ8fHQ+ZC5mYXJ8fGUucHVzaCh7ZGlzdGFuY2U6dCxwb2ludDprLmNsb25lKCkuYXBwbHlNYXRyaXg0KHRoaXMubWF0cml4V29ybGQpLGluZGV4Om4sZmFjZTpudWxsLGZhY2VJbmRleDpudWxsLG9iamVjdDp0aGlzfSkpfWVsc2UgaWYoZiBpbnN0YW5jZW9mIFRIUkVFLkdlb21ldHJ5KWZvcihoPWYudmVydGljZXMsbD1oLmxlbmd0aCxuPTA7bjxsLTE7bis9cCl0PWIuZGlzdGFuY2VTcVRvU2VnbWVudChoW25dLGhbbisxXSxtLGspLHQ+Z3x8KG0uYXBwbHlNYXRyaXg0KHRoaXMubWF0cml4V29ybGQpLHQ9ZC5yYXkub3JpZ2luLmRpc3RhbmNlVG8obSksdDxkLm5lYXJ8fHQ+ZC5mYXJ8fGUucHVzaCh7ZGlzdGFuY2U6dCxwb2ludDprLmNsb25lKCkuYXBwbHlNYXRyaXg0KHRoaXMubWF0cml4V29ybGQpLFxuaW5kZXg6bixmYWNlOm51bGwsZmFjZUluZGV4Om51bGwsb2JqZWN0OnRoaXN9KSl9fX0oKTtUSFJFRS5MaW5lLnByb3RvdHlwZS5jbG9uZT1mdW5jdGlvbigpe3JldHVybihuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzLmdlb21ldHJ5LHRoaXMubWF0ZXJpYWwpKS5jb3B5KHRoaXMpfTtUSFJFRS5MaW5lU3RyaXA9MDtUSFJFRS5MaW5lUGllY2VzPTE7VEhSRUUuTGluZVNlZ21lbnRzPWZ1bmN0aW9uKGEsYil7VEhSRUUuTGluZS5jYWxsKHRoaXMsYSxiKTt0aGlzLnR5cGU9XCJMaW5lU2VnbWVudHNcIn07VEhSRUUuTGluZVNlZ21lbnRzLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkxpbmUucHJvdG90eXBlKTtUSFJFRS5MaW5lU2VnbWVudHMucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLkxpbmVTZWdtZW50cztcblRIUkVFLk1lc2g9ZnVuY3Rpb24oYSxiKXtUSFJFRS5PYmplY3QzRC5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIk1lc2hcIjt0aGlzLmdlb21ldHJ5PXZvaWQgMCE9PWE/YTpuZXcgVEhSRUUuR2VvbWV0cnk7dGhpcy5tYXRlcmlhbD12b2lkIDAhPT1iP2I6bmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKHtjb2xvcjoxNjc3NzIxNSpNYXRoLnJhbmRvbSgpfSk7dGhpcy51cGRhdGVNb3JwaFRhcmdldHMoKX07VEhSRUUuTWVzaC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5PYmplY3QzRC5wcm90b3R5cGUpO1RIUkVFLk1lc2gucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLk1lc2g7XG5USFJFRS5NZXNoLnByb3RvdHlwZS51cGRhdGVNb3JwaFRhcmdldHM9ZnVuY3Rpb24oKXtpZih2b2lkIDAhPT10aGlzLmdlb21ldHJ5Lm1vcnBoVGFyZ2V0cyYmMDx0aGlzLmdlb21ldHJ5Lm1vcnBoVGFyZ2V0cy5sZW5ndGgpe3RoaXMubW9ycGhUYXJnZXRCYXNlPS0xO3RoaXMubW9ycGhUYXJnZXRJbmZsdWVuY2VzPVtdO3RoaXMubW9ycGhUYXJnZXREaWN0aW9uYXJ5PXt9O2Zvcih2YXIgYT0wLGI9dGhpcy5nZW9tZXRyeS5tb3JwaFRhcmdldHMubGVuZ3RoO2E8YjthKyspdGhpcy5tb3JwaFRhcmdldEluZmx1ZW5jZXMucHVzaCgwKSx0aGlzLm1vcnBoVGFyZ2V0RGljdGlvbmFyeVt0aGlzLmdlb21ldHJ5Lm1vcnBoVGFyZ2V0c1thXS5uYW1lXT1hfX07XG5USFJFRS5NZXNoLnByb3RvdHlwZS5nZXRNb3JwaFRhcmdldEluZGV4QnlOYW1lPWZ1bmN0aW9uKGEpe2lmKHZvaWQgMCE9PXRoaXMubW9ycGhUYXJnZXREaWN0aW9uYXJ5W2FdKXJldHVybiB0aGlzLm1vcnBoVGFyZ2V0RGljdGlvbmFyeVthXTtjb25zb2xlLndhcm4oXCJUSFJFRS5NZXNoLmdldE1vcnBoVGFyZ2V0SW5kZXhCeU5hbWU6IG1vcnBoIHRhcmdldCBcIithK1wiIGRvZXMgbm90IGV4aXN0LiBSZXR1cm5pbmcgMC5cIik7cmV0dXJuIDB9O1xuVEhSRUUuTWVzaC5wcm90b3R5cGUucmF5Y2FzdD1mdW5jdGlvbigpe2Z1bmN0aW9uIGEoYSxiLGMsZCxlLGYsZyl7VEhSRUUuVHJpYW5nbGUuYmFyeWNvb3JkRnJvbVBvaW50KGEsYixjLGQsdCk7ZS5tdWx0aXBseVNjYWxhcih0LngpO2YubXVsdGlwbHlTY2FsYXIodC55KTtnLm11bHRpcGx5U2NhbGFyKHQueik7ZS5hZGQoZikuYWRkKGcpO3JldHVybiBlLmNsb25lKCl9ZnVuY3Rpb24gYihhLGIsYyxkLGUsZixnKXt2YXIgaD1hLm1hdGVyaWFsO2lmKG51bGw9PT0oaC5zaWRlPT09VEhSRUUuQmFja1NpZGU/Yy5pbnRlcnNlY3RUcmlhbmdsZShmLGUsZCwhMCxnKTpjLmludGVyc2VjdFRyaWFuZ2xlKGQsZSxmLGguc2lkZSE9PVRIUkVFLkRvdWJsZVNpZGUsZykpKXJldHVybiBudWxsO3UuY29weShnKTt1LmFwcGx5TWF0cml4NChhLm1hdHJpeFdvcmxkKTtjPWIucmF5Lm9yaWdpbi5kaXN0YW5jZVRvKHUpO3JldHVybiBjPGIubmVhcnx8Yz5iLmZhcj9udWxsOntkaXN0YW5jZTpjLHBvaW50OnUuY2xvbmUoKSxcbm9iamVjdDphfX1mdW5jdGlvbiBjKGMsZCxlLGcsayxtLHAsdSl7Zi5mcm9tQXJyYXkoZywzKm0pO2guZnJvbUFycmF5KGcsMypwKTtsLmZyb21BcnJheShnLDMqdSk7aWYoYz1iKGMsZCxlLGYsaCxsLHYpKWsmJihuLmZyb21BcnJheShrLDIqbSkscS5mcm9tQXJyYXkoaywyKnApLHMuZnJvbUFycmF5KGssMip1KSxjLnV2PWEodixmLGgsbCxuLHEscykpLGMuZmFjZT1uZXcgVEhSRUUuRmFjZTMobSxwLHUsVEhSRUUuVHJpYW5nbGUubm9ybWFsKGYsaCxsKSksYy5mYWNlSW5kZXg9bTtyZXR1cm4gY312YXIgZD1uZXcgVEhSRUUuTWF0cml4NCxlPW5ldyBUSFJFRS5SYXksZz1uZXcgVEhSRUUuU3BoZXJlLGY9bmV3IFRIUkVFLlZlY3RvcjMsaD1uZXcgVEhSRUUuVmVjdG9yMyxsPW5ldyBUSFJFRS5WZWN0b3IzLGs9bmV3IFRIUkVFLlZlY3RvcjMsbT1uZXcgVEhSRUUuVmVjdG9yMyxwPW5ldyBUSFJFRS5WZWN0b3IzLG49bmV3IFRIUkVFLlZlY3RvcjIscT1uZXcgVEhSRUUuVmVjdG9yMixcbnM9bmV3IFRIUkVFLlZlY3RvcjIsdD1uZXcgVEhSRUUuVmVjdG9yMyx2PW5ldyBUSFJFRS5WZWN0b3IzLHU9bmV3IFRIUkVFLlZlY3RvcjM7cmV0dXJuIGZ1bmN0aW9uKHUsdCl7dmFyIHg9dGhpcy5nZW9tZXRyeSxCPXRoaXMubWF0ZXJpYWw7aWYodm9pZCAwIT09Qil7bnVsbD09PXguYm91bmRpbmdTcGhlcmUmJnguY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7dmFyIHk9dGhpcy5tYXRyaXhXb3JsZDtnLmNvcHkoeC5ib3VuZGluZ1NwaGVyZSk7Zy5hcHBseU1hdHJpeDQoeSk7aWYoITEhPT11LnJheS5pc0ludGVyc2VjdGlvblNwaGVyZShnKSYmKGQuZ2V0SW52ZXJzZSh5KSxlLmNvcHkodS5yYXkpLmFwcGx5TWF0cml4NChkKSxudWxsPT09eC5ib3VuZGluZ0JveHx8ITEhPT1lLmlzSW50ZXJzZWN0aW9uQm94KHguYm91bmRpbmdCb3gpKSl7dmFyIHosQTtpZih4IGluc3RhbmNlb2YgVEhSRUUuQnVmZmVyR2VvbWV0cnkpe3ZhciBKLEYsQj14LmluZGV4LHk9eC5hdHRyaWJ1dGVzLHg9eS5wb3NpdGlvbi5hcnJheTtcbnZvaWQgMCE9PXkudXYmJih6PXkudXYuYXJyYXkpO2lmKG51bGwhPT1CKWZvcih2YXIgeT1CLmFycmF5LEM9MCxOPXkubGVuZ3RoO0M8TjtDKz0zKXtpZihCPXlbQ10sSj15W0MrMV0sRj15W0MrMl0sQT1jKHRoaXMsdSxlLHgseixCLEosRikpQS5mYWNlSW5kZXg9TWF0aC5mbG9vcihDLzMpLHQucHVzaChBKX1lbHNlIGZvcihDPTAsTj14Lmxlbmd0aDtDPE47Qys9OSlpZihCPUMvMyxKPUIrMSxGPUIrMixBPWModGhpcyx1LGUseCx6LEIsSixGKSlBLmluZGV4PUIsdC5wdXNoKEEpfWVsc2UgaWYoeCBpbnN0YW5jZW9mIFRIUkVFLkdlb21ldHJ5KXt2YXIgTCxRLHk9QiBpbnN0YW5jZW9mIFRIUkVFLk1lc2hGYWNlTWF0ZXJpYWwsQz0hMD09PXk/Qi5tYXRlcmlhbHM6bnVsbCxOPXgudmVydGljZXM7Sj14LmZhY2VzO0Y9eC5mYWNlVmVydGV4VXZzWzBdOzA8Ri5sZW5ndGgmJih6PUYpO2Zvcih2YXIgTT0wLEs9Si5sZW5ndGg7TTxLO00rKyl7dmFyIEU9SltNXTtBPSEwPT09eT9DW0UubWF0ZXJpYWxJbmRleF06XG5CO2lmKHZvaWQgMCE9PUEpe0Y9TltFLmFdO0w9TltFLmJdO1E9TltFLmNdO2lmKCEwPT09QS5tb3JwaFRhcmdldHMpe0E9eC5tb3JwaFRhcmdldHM7dmFyIE89dGhpcy5tb3JwaFRhcmdldEluZmx1ZW5jZXM7Zi5zZXQoMCwwLDApO2guc2V0KDAsMCwwKTtsLnNldCgwLDAsMCk7Zm9yKHZhciBUPTAsSD1BLmxlbmd0aDtUPEg7VCsrKXt2YXIgUj1PW1RdO2lmKDAhPT1SKXt2YXIgRz1BW1RdLnZlcnRpY2VzO2YuYWRkU2NhbGVkVmVjdG9yKGsuc3ViVmVjdG9ycyhHW0UuYV0sRiksUik7aC5hZGRTY2FsZWRWZWN0b3IobS5zdWJWZWN0b3JzKEdbRS5iXSxMKSxSKTtsLmFkZFNjYWxlZFZlY3RvcihwLnN1YlZlY3RvcnMoR1tFLmNdLFEpLFIpfX1mLmFkZChGKTtoLmFkZChMKTtsLmFkZChRKTtGPWY7TD1oO1E9bH1pZihBPWIodGhpcyx1LGUsRixMLFEsdikpeiYmKE89eltNXSxuLmNvcHkoT1swXSkscS5jb3B5KE9bMV0pLHMuY29weShPWzJdKSxBLnV2PWEodixGLEwsUSxuLHEscykpLEEuZmFjZT1cbkUsQS5mYWNlSW5kZXg9TSx0LnB1c2goQSl9fX19fX19KCk7VEhSRUUuTWVzaC5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oKXtyZXR1cm4obmV3IHRoaXMuY29uc3RydWN0b3IodGhpcy5nZW9tZXRyeSx0aGlzLm1hdGVyaWFsKSkuY29weSh0aGlzKX07VEhSRUUuQm9uZT1mdW5jdGlvbihhKXtUSFJFRS5PYmplY3QzRC5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIkJvbmVcIjt0aGlzLnNraW49YX07VEhSRUUuQm9uZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5PYmplY3QzRC5wcm90b3R5cGUpO1RIUkVFLkJvbmUucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLkJvbmU7VEhSRUUuQm9uZS5wcm90b3R5cGUuY29weT1mdW5jdGlvbihhKXtUSFJFRS5PYmplY3QzRC5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsYSk7dGhpcy5za2luPWEuc2tpbjtyZXR1cm4gdGhpc307XG5USFJFRS5Ta2VsZXRvbj1mdW5jdGlvbihhLGIsYyl7dGhpcy51c2VWZXJ0ZXhUZXh0dXJlPXZvaWQgMCE9PWM/YzohMDt0aGlzLmlkZW50aXR5TWF0cml4PW5ldyBUSFJFRS5NYXRyaXg0O2E9YXx8W107dGhpcy5ib25lcz1hLnNsaWNlKDApO3RoaXMudXNlVmVydGV4VGV4dHVyZT8oYT1NYXRoLnNxcnQoNCp0aGlzLmJvbmVzLmxlbmd0aCksYT1USFJFRS5NYXRoLm5leHRQb3dlck9mVHdvKE1hdGguY2VpbChhKSksdGhpcy5ib25lVGV4dHVyZUhlaWdodD10aGlzLmJvbmVUZXh0dXJlV2lkdGg9YT1NYXRoLm1heChhLDQpLHRoaXMuYm9uZU1hdHJpY2VzPW5ldyBGbG9hdDMyQXJyYXkodGhpcy5ib25lVGV4dHVyZVdpZHRoKnRoaXMuYm9uZVRleHR1cmVIZWlnaHQqNCksdGhpcy5ib25lVGV4dHVyZT1uZXcgVEhSRUUuRGF0YVRleHR1cmUodGhpcy5ib25lTWF0cmljZXMsdGhpcy5ib25lVGV4dHVyZVdpZHRoLHRoaXMuYm9uZVRleHR1cmVIZWlnaHQsVEhSRUUuUkdCQUZvcm1hdCxUSFJFRS5GbG9hdFR5cGUpKTpcbnRoaXMuYm9uZU1hdHJpY2VzPW5ldyBGbG9hdDMyQXJyYXkoMTYqdGhpcy5ib25lcy5sZW5ndGgpO2lmKHZvaWQgMD09PWIpdGhpcy5jYWxjdWxhdGVJbnZlcnNlcygpO2Vsc2UgaWYodGhpcy5ib25lcy5sZW5ndGg9PT1iLmxlbmd0aCl0aGlzLmJvbmVJbnZlcnNlcz1iLnNsaWNlKDApO2Vsc2UgZm9yKGNvbnNvbGUud2FybihcIlRIUkVFLlNrZWxldG9uIGJvbkludmVyc2VzIGlzIHRoZSB3cm9uZyBsZW5ndGguXCIpLHRoaXMuYm9uZUludmVyc2VzPVtdLGI9MCxhPXRoaXMuYm9uZXMubGVuZ3RoO2I8YTtiKyspdGhpcy5ib25lSW52ZXJzZXMucHVzaChuZXcgVEhSRUUuTWF0cml4NCl9O1xuVEhSRUUuU2tlbGV0b24ucHJvdG90eXBlLmNhbGN1bGF0ZUludmVyc2VzPWZ1bmN0aW9uKCl7dGhpcy5ib25lSW52ZXJzZXM9W107Zm9yKHZhciBhPTAsYj10aGlzLmJvbmVzLmxlbmd0aDthPGI7YSsrKXt2YXIgYz1uZXcgVEhSRUUuTWF0cml4NDt0aGlzLmJvbmVzW2FdJiZjLmdldEludmVyc2UodGhpcy5ib25lc1thXS5tYXRyaXhXb3JsZCk7dGhpcy5ib25lSW52ZXJzZXMucHVzaChjKX19O1xuVEhSRUUuU2tlbGV0b24ucHJvdG90eXBlLnBvc2U9ZnVuY3Rpb24oKXtmb3IodmFyIGEsYj0wLGM9dGhpcy5ib25lcy5sZW5ndGg7YjxjO2IrKykoYT10aGlzLmJvbmVzW2JdKSYmYS5tYXRyaXhXb3JsZC5nZXRJbnZlcnNlKHRoaXMuYm9uZUludmVyc2VzW2JdKTtiPTA7Zm9yKGM9dGhpcy5ib25lcy5sZW5ndGg7YjxjO2IrKylpZihhPXRoaXMuYm9uZXNbYl0pYS5wYXJlbnQ/KGEubWF0cml4LmdldEludmVyc2UoYS5wYXJlbnQubWF0cml4V29ybGQpLGEubWF0cml4Lm11bHRpcGx5KGEubWF0cml4V29ybGQpKTphLm1hdHJpeC5jb3B5KGEubWF0cml4V29ybGQpLGEubWF0cml4LmRlY29tcG9zZShhLnBvc2l0aW9uLGEucXVhdGVybmlvbixhLnNjYWxlKX07XG5USFJFRS5Ta2VsZXRvbi5wcm90b3R5cGUudXBkYXRlPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLk1hdHJpeDQ7cmV0dXJuIGZ1bmN0aW9uKCl7Zm9yKHZhciBiPTAsYz10aGlzLmJvbmVzLmxlbmd0aDtiPGM7YisrKWEubXVsdGlwbHlNYXRyaWNlcyh0aGlzLmJvbmVzW2JdP3RoaXMuYm9uZXNbYl0ubWF0cml4V29ybGQ6dGhpcy5pZGVudGl0eU1hdHJpeCx0aGlzLmJvbmVJbnZlcnNlc1tiXSksYS5mbGF0dGVuVG9BcnJheU9mZnNldCh0aGlzLmJvbmVNYXRyaWNlcywxNipiKTt0aGlzLnVzZVZlcnRleFRleHR1cmUmJih0aGlzLmJvbmVUZXh0dXJlLm5lZWRzVXBkYXRlPSEwKX19KCk7VEhSRUUuU2tlbGV0b24ucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBUSFJFRS5Ta2VsZXRvbih0aGlzLmJvbmVzLHRoaXMuYm9uZUludmVyc2VzLHRoaXMudXNlVmVydGV4VGV4dHVyZSl9O1xuVEhSRUUuU2tpbm5lZE1lc2g9ZnVuY3Rpb24oYSxiLGMpe1RIUkVFLk1lc2guY2FsbCh0aGlzLGEsYik7dGhpcy50eXBlPVwiU2tpbm5lZE1lc2hcIjt0aGlzLmJpbmRNb2RlPVwiYXR0YWNoZWRcIjt0aGlzLmJpbmRNYXRyaXg9bmV3IFRIUkVFLk1hdHJpeDQ7dGhpcy5iaW5kTWF0cml4SW52ZXJzZT1uZXcgVEhSRUUuTWF0cml4NDthPVtdO2lmKHRoaXMuZ2VvbWV0cnkmJnZvaWQgMCE9PXRoaXMuZ2VvbWV0cnkuYm9uZXMpe2Zvcih2YXIgZCxlPTAsZz10aGlzLmdlb21ldHJ5LmJvbmVzLmxlbmd0aDtlPGc7KytlKWQ9dGhpcy5nZW9tZXRyeS5ib25lc1tlXSxiPW5ldyBUSFJFRS5Cb25lKHRoaXMpLGEucHVzaChiKSxiLm5hbWU9ZC5uYW1lLGIucG9zaXRpb24uZnJvbUFycmF5KGQucG9zKSxiLnF1YXRlcm5pb24uZnJvbUFycmF5KGQucm90cSksdm9pZCAwIT09ZC5zY2wmJmIuc2NhbGUuZnJvbUFycmF5KGQuc2NsKTtlPTA7Zm9yKGc9dGhpcy5nZW9tZXRyeS5ib25lcy5sZW5ndGg7ZTxnOysrZSlkPVxudGhpcy5nZW9tZXRyeS5ib25lc1tlXSwtMSE9PWQucGFyZW50JiZudWxsIT09ZC5wYXJlbnQ/YVtkLnBhcmVudF0uYWRkKGFbZV0pOnRoaXMuYWRkKGFbZV0pfXRoaXMubm9ybWFsaXplU2tpbldlaWdodHMoKTt0aGlzLnVwZGF0ZU1hdHJpeFdvcmxkKCEwKTt0aGlzLmJpbmQobmV3IFRIUkVFLlNrZWxldG9uKGEsdm9pZCAwLGMpLHRoaXMubWF0cml4V29ybGQpfTtUSFJFRS5Ta2lubmVkTWVzaC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5NZXNoLnByb3RvdHlwZSk7VEhSRUUuU2tpbm5lZE1lc2gucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLlNraW5uZWRNZXNoO1xuVEhSRUUuU2tpbm5lZE1lc2gucHJvdG90eXBlLmJpbmQ9ZnVuY3Rpb24oYSxiKXt0aGlzLnNrZWxldG9uPWE7dm9pZCAwPT09YiYmKHRoaXMudXBkYXRlTWF0cml4V29ybGQoITApLHRoaXMuc2tlbGV0b24uY2FsY3VsYXRlSW52ZXJzZXMoKSxiPXRoaXMubWF0cml4V29ybGQpO3RoaXMuYmluZE1hdHJpeC5jb3B5KGIpO3RoaXMuYmluZE1hdHJpeEludmVyc2UuZ2V0SW52ZXJzZShiKX07VEhSRUUuU2tpbm5lZE1lc2gucHJvdG90eXBlLnBvc2U9ZnVuY3Rpb24oKXt0aGlzLnNrZWxldG9uLnBvc2UoKX07XG5USFJFRS5Ta2lubmVkTWVzaC5wcm90b3R5cGUubm9ybWFsaXplU2tpbldlaWdodHM9ZnVuY3Rpb24oKXtpZih0aGlzLmdlb21ldHJ5IGluc3RhbmNlb2YgVEhSRUUuR2VvbWV0cnkpZm9yKHZhciBhPTA7YTx0aGlzLmdlb21ldHJ5LnNraW5JbmRpY2VzLmxlbmd0aDthKyspe3ZhciBiPXRoaXMuZ2VvbWV0cnkuc2tpbldlaWdodHNbYV0sYz0xL2IubGVuZ3RoTWFuaGF0dGFuKCk7SW5maW5pdHkhPT1jP2IubXVsdGlwbHlTY2FsYXIoYyk6Yi5zZXQoMSl9fTtcblRIUkVFLlNraW5uZWRNZXNoLnByb3RvdHlwZS51cGRhdGVNYXRyaXhXb3JsZD1mdW5jdGlvbihhKXtUSFJFRS5NZXNoLnByb3RvdHlwZS51cGRhdGVNYXRyaXhXb3JsZC5jYWxsKHRoaXMsITApO1wiYXR0YWNoZWRcIj09PXRoaXMuYmluZE1vZGU/dGhpcy5iaW5kTWF0cml4SW52ZXJzZS5nZXRJbnZlcnNlKHRoaXMubWF0cml4V29ybGQpOlwiZGV0YWNoZWRcIj09PXRoaXMuYmluZE1vZGU/dGhpcy5iaW5kTWF0cml4SW52ZXJzZS5nZXRJbnZlcnNlKHRoaXMuYmluZE1hdHJpeCk6Y29uc29sZS53YXJuKFwiVEhSRUUuU2tpbm5lZE1lc2ggdW5yZWNvZ25pemVkIGJpbmRNb2RlOiBcIit0aGlzLmJpbmRNb2RlKX07VEhSRUUuU2tpbm5lZE1lc2gucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7cmV0dXJuKG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMuZ2VvbWV0cnksdGhpcy5tYXRlcmlhbCx0aGlzLnVzZVZlcnRleFRleHR1cmUpKS5jb3B5KHRoaXMpfTtcblRIUkVFLkxPRD1mdW5jdGlvbigpe1RIUkVFLk9iamVjdDNELmNhbGwodGhpcyk7dGhpcy50eXBlPVwiTE9EXCI7T2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcyx7bGV2ZWxzOntlbnVtZXJhYmxlOiEwLHZhbHVlOltdfSxvYmplY3RzOntnZXQ6ZnVuY3Rpb24oKXtjb25zb2xlLndhcm4oXCJUSFJFRS5MT0Q6IC5vYmplY3RzIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmxldmVscy5cIik7cmV0dXJuIHRoaXMubGV2ZWxzfX19KX07VEhSRUUuTE9ELnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLk9iamVjdDNELnByb3RvdHlwZSk7VEhSRUUuTE9ELnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5MT0Q7XG5USFJFRS5MT0QucHJvdG90eXBlLmFkZExldmVsPWZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9MCk7Yj1NYXRoLmFicyhiKTtmb3IodmFyIGM9dGhpcy5sZXZlbHMsZD0wO2Q8Yy5sZW5ndGgmJiEoYjxjW2RdLmRpc3RhbmNlKTtkKyspO2Muc3BsaWNlKGQsMCx7ZGlzdGFuY2U6YixvYmplY3Q6YX0pO3RoaXMuYWRkKGEpfTtUSFJFRS5MT0QucHJvdG90eXBlLmdldE9iamVjdEZvckRpc3RhbmNlPWZ1bmN0aW9uKGEpe2Zvcih2YXIgYj10aGlzLmxldmVscyxjPTEsZD1iLmxlbmd0aDtjPGQmJiEoYTxiW2NdLmRpc3RhbmNlKTtjKyspO3JldHVybiBiW2MtMV0ub2JqZWN0fTtcblRIUkVFLkxPRC5wcm90b3R5cGUucmF5Y2FzdD1mdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5WZWN0b3IzO3JldHVybiBmdW5jdGlvbihiLGMpe2Euc2V0RnJvbU1hdHJpeFBvc2l0aW9uKHRoaXMubWF0cml4V29ybGQpO3ZhciBkPWIucmF5Lm9yaWdpbi5kaXN0YW5jZVRvKGEpO3RoaXMuZ2V0T2JqZWN0Rm9yRGlzdGFuY2UoZCkucmF5Y2FzdChiLGMpfX0oKTtcblRIUkVFLkxPRC5wcm90b3R5cGUudXBkYXRlPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlZlY3RvcjMsYj1uZXcgVEhSRUUuVmVjdG9yMztyZXR1cm4gZnVuY3Rpb24oYyl7dmFyIGQ9dGhpcy5sZXZlbHM7aWYoMTxkLmxlbmd0aCl7YS5zZXRGcm9tTWF0cml4UG9zaXRpb24oYy5tYXRyaXhXb3JsZCk7Yi5zZXRGcm9tTWF0cml4UG9zaXRpb24odGhpcy5tYXRyaXhXb3JsZCk7Yz1hLmRpc3RhbmNlVG8oYik7ZFswXS5vYmplY3QudmlzaWJsZT0hMDtmb3IodmFyIGU9MSxnPWQubGVuZ3RoO2U8ZztlKyspaWYoYz49ZFtlXS5kaXN0YW5jZSlkW2UtMV0ub2JqZWN0LnZpc2libGU9ITEsZFtlXS5vYmplY3QudmlzaWJsZT0hMDtlbHNlIGJyZWFrO2Zvcig7ZTxnO2UrKylkW2VdLm9iamVjdC52aXNpYmxlPSExfX19KCk7XG5USFJFRS5MT0QucHJvdG90eXBlLmNvcHk9ZnVuY3Rpb24oYSl7VEhSRUUuT2JqZWN0M0QucHJvdG90eXBlLmNvcHkuY2FsbCh0aGlzLGEsITEpO2E9YS5sZXZlbHM7Zm9yKHZhciBiPTAsYz1hLmxlbmd0aDtiPGM7YisrKXt2YXIgZD1hW2JdO3RoaXMuYWRkTGV2ZWwoZC5vYmplY3QuY2xvbmUoKSxkLmRpc3RhbmNlKX1yZXR1cm4gdGhpc307VEhSRUUuTE9ELnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oYSl7YT1USFJFRS5PYmplY3QzRC5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcyxhKTthLm9iamVjdC5sZXZlbHM9W107Zm9yKHZhciBiPXRoaXMubGV2ZWxzLGM9MCxkPWIubGVuZ3RoO2M8ZDtjKyspe3ZhciBlPWJbY107YS5vYmplY3QubGV2ZWxzLnB1c2goe29iamVjdDplLm9iamVjdC51dWlkLGRpc3RhbmNlOmUuZGlzdGFuY2V9KX1yZXR1cm4gYX07XG5USFJFRS5TcHJpdGU9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVWludDE2QXJyYXkoWzAsMSwyLDAsMiwzXSksYj1uZXcgRmxvYXQzMkFycmF5KFstLjUsLS41LDAsLjUsLS41LDAsLjUsLjUsMCwtLjUsLjUsMF0pLGM9bmV3IEZsb2F0MzJBcnJheShbMCwwLDEsMCwxLDEsMCwxXSksZD1uZXcgVEhSRUUuQnVmZmVyR2VvbWV0cnk7ZC5zZXRJbmRleChuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKGEsMSkpO2QuYWRkQXR0cmlidXRlKFwicG9zaXRpb25cIixuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKGIsMykpO2QuYWRkQXR0cmlidXRlKFwidXZcIixuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKGMsMikpO3JldHVybiBmdW5jdGlvbihhKXtUSFJFRS5PYmplY3QzRC5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIlNwcml0ZVwiO3RoaXMuZ2VvbWV0cnk9ZDt0aGlzLm1hdGVyaWFsPXZvaWQgMCE9PWE/YTpuZXcgVEhSRUUuU3ByaXRlTWF0ZXJpYWx9fSgpO1RIUkVFLlNwcml0ZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5PYmplY3QzRC5wcm90b3R5cGUpO1xuVEhSRUUuU3ByaXRlLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5TcHJpdGU7VEhSRUUuU3ByaXRlLnByb3RvdHlwZS5yYXljYXN0PWZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlZlY3RvcjM7cmV0dXJuIGZ1bmN0aW9uKGIsYyl7YS5zZXRGcm9tTWF0cml4UG9zaXRpb24odGhpcy5tYXRyaXhXb3JsZCk7dmFyIGQ9Yi5yYXkuZGlzdGFuY2VTcVRvUG9pbnQoYSk7ZD50aGlzLnNjYWxlLngqdGhpcy5zY2FsZS55fHxjLnB1c2goe2Rpc3RhbmNlOk1hdGguc3FydChkKSxwb2ludDp0aGlzLnBvc2l0aW9uLGZhY2U6bnVsbCxvYmplY3Q6dGhpc30pfX0oKTtUSFJFRS5TcHJpdGUucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7cmV0dXJuKG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMubWF0ZXJpYWwpKS5jb3B5KHRoaXMpfTtUSFJFRS5QYXJ0aWNsZT1USFJFRS5TcHJpdGU7XG5USFJFRS5MZW5zRmxhcmU9ZnVuY3Rpb24oYSxiLGMsZCxlKXtUSFJFRS5PYmplY3QzRC5jYWxsKHRoaXMpO3RoaXMubGVuc0ZsYXJlcz1bXTt0aGlzLnBvc2l0aW9uU2NyZWVuPW5ldyBUSFJFRS5WZWN0b3IzO3RoaXMuY3VzdG9tVXBkYXRlQ2FsbGJhY2s9dm9pZCAwO3ZvaWQgMCE9PWEmJnRoaXMuYWRkKGEsYixjLGQsZSl9O1RIUkVFLkxlbnNGbGFyZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5PYmplY3QzRC5wcm90b3R5cGUpO1RIUkVFLkxlbnNGbGFyZS5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuTGVuc0ZsYXJlO1xuVEhSRUUuTGVuc0ZsYXJlLnByb3RvdHlwZS5hZGQ9ZnVuY3Rpb24oYSxiLGMsZCxlLGcpe3ZvaWQgMD09PWImJihiPS0xKTt2b2lkIDA9PT1jJiYoYz0wKTt2b2lkIDA9PT1nJiYoZz0xKTt2b2lkIDA9PT1lJiYoZT1uZXcgVEhSRUUuQ29sb3IoMTY3NzcyMTUpKTt2b2lkIDA9PT1kJiYoZD1USFJFRS5Ob3JtYWxCbGVuZGluZyk7Yz1NYXRoLm1pbihjLE1hdGgubWF4KDAsYykpO3RoaXMubGVuc0ZsYXJlcy5wdXNoKHt0ZXh0dXJlOmEsc2l6ZTpiLGRpc3RhbmNlOmMseDowLHk6MCx6OjAsc2NhbGU6MSxyb3RhdGlvbjowLG9wYWNpdHk6Zyxjb2xvcjplLGJsZW5kaW5nOmR9KX07XG5USFJFRS5MZW5zRmxhcmUucHJvdG90eXBlLnVwZGF0ZUxlbnNGbGFyZXM9ZnVuY3Rpb24oKXt2YXIgYSxiPXRoaXMubGVuc0ZsYXJlcy5sZW5ndGgsYyxkPTIqLXRoaXMucG9zaXRpb25TY3JlZW4ueCxlPTIqLXRoaXMucG9zaXRpb25TY3JlZW4ueTtmb3IoYT0wO2E8YjthKyspYz10aGlzLmxlbnNGbGFyZXNbYV0sYy54PXRoaXMucG9zaXRpb25TY3JlZW4ueCtkKmMuZGlzdGFuY2UsYy55PXRoaXMucG9zaXRpb25TY3JlZW4ueStlKmMuZGlzdGFuY2UsYy53YW50ZWRSb3RhdGlvbj1jLngqTWF0aC5QSSouMjUsYy5yb3RhdGlvbis9LjI1KihjLndhbnRlZFJvdGF0aW9uLWMucm90YXRpb24pfTtcblRIUkVFLkxlbnNGbGFyZS5wcm90b3R5cGUuY29weT1mdW5jdGlvbihhKXtUSFJFRS5PYmplY3QzRC5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsYSk7dGhpcy5wb3NpdGlvblNjcmVlbi5jb3B5KGEucG9zaXRpb25TY3JlZW4pO3RoaXMuY3VzdG9tVXBkYXRlQ2FsbGJhY2s9YS5jdXN0b21VcGRhdGVDYWxsYmFjaztmb3IodmFyIGI9MCxjPWEubGVuc0ZsYXJlcy5sZW5ndGg7YjxjO2IrKyl0aGlzLmxlbnNGbGFyZXMucHVzaChhLmxlbnNGbGFyZXNbYl0pO3JldHVybiB0aGlzfTtUSFJFRS5TY2VuZT1mdW5jdGlvbigpe1RIUkVFLk9iamVjdDNELmNhbGwodGhpcyk7dGhpcy50eXBlPVwiU2NlbmVcIjt0aGlzLm92ZXJyaWRlTWF0ZXJpYWw9dGhpcy5mb2c9bnVsbDt0aGlzLmF1dG9VcGRhdGU9ITB9O1RIUkVFLlNjZW5lLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLk9iamVjdDNELnByb3RvdHlwZSk7VEhSRUUuU2NlbmUucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLlNjZW5lO1xuVEhSRUUuU2NlbmUucHJvdG90eXBlLmNvcHk9ZnVuY3Rpb24oYSl7VEhSRUUuT2JqZWN0M0QucHJvdG90eXBlLmNvcHkuY2FsbCh0aGlzLGEpO251bGwhPT1hLmZvZyYmKHRoaXMuZm9nPWEuZm9nLmNsb25lKCkpO251bGwhPT1hLm92ZXJyaWRlTWF0ZXJpYWwmJih0aGlzLm92ZXJyaWRlTWF0ZXJpYWw9YS5vdmVycmlkZU1hdGVyaWFsLmNsb25lKCkpO3RoaXMuYXV0b1VwZGF0ZT1hLmF1dG9VcGRhdGU7dGhpcy5tYXRyaXhBdXRvVXBkYXRlPWEubWF0cml4QXV0b1VwZGF0ZTtyZXR1cm4gdGhpc307VEhSRUUuRm9nPWZ1bmN0aW9uKGEsYixjKXt0aGlzLm5hbWU9XCJcIjt0aGlzLmNvbG9yPW5ldyBUSFJFRS5Db2xvcihhKTt0aGlzLm5lYXI9dm9pZCAwIT09Yj9iOjE7dGhpcy5mYXI9dm9pZCAwIT09Yz9jOjFFM307VEhSRUUuRm9nLnByb3RvdHlwZS5jbG9uZT1mdW5jdGlvbigpe3JldHVybiBuZXcgVEhSRUUuRm9nKHRoaXMuY29sb3IuZ2V0SGV4KCksdGhpcy5uZWFyLHRoaXMuZmFyKX07XG5USFJFRS5Gb2dFeHAyPWZ1bmN0aW9uKGEsYil7dGhpcy5uYW1lPVwiXCI7dGhpcy5jb2xvcj1uZXcgVEhSRUUuQ29sb3IoYSk7dGhpcy5kZW5zaXR5PXZvaWQgMCE9PWI/YjoyLjVFLTR9O1RIUkVFLkZvZ0V4cDIucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBUSFJFRS5Gb2dFeHAyKHRoaXMuY29sb3IuZ2V0SGV4KCksdGhpcy5kZW5zaXR5KX07VEhSRUUuU2hhZGVyQ2h1bms9e307VEhSRUUuU2hhZGVyQ2h1bmsuYWxwaGFtYXBfZnJhZ21lbnQ9XCIjaWZkZWYgVVNFX0FMUEhBTUFQXFxuXFxuXFx0ZGlmZnVzZUNvbG9yLmEgKj0gdGV4dHVyZTJEKCBhbHBoYU1hcCwgdlV2ICkuZztcXG5cXG4jZW5kaWZcXG5cIjtUSFJFRS5TaGFkZXJDaHVuay5hbHBoYW1hcF9wYXJzX2ZyYWdtZW50PVwiI2lmZGVmIFVTRV9BTFBIQU1BUFxcblxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIGFscGhhTWFwO1xcblxcbiNlbmRpZlxcblwiO1RIUkVFLlNoYWRlckNodW5rLmFscGhhdGVzdF9mcmFnbWVudD1cIiNpZmRlZiBBTFBIQVRFU1RcXG5cXG5cXHRpZiAoIGRpZmZ1c2VDb2xvci5hIDwgQUxQSEFURVNUICkgZGlzY2FyZDtcXG5cXG4jZW5kaWZcXG5cIjtcblRIUkVFLlNoYWRlckNodW5rLmFvbWFwX2ZyYWdtZW50PVwiI2lmZGVmIFVTRV9BT01BUFxcblxcblxcdHRvdGFsQW1iaWVudExpZ2h0ICo9ICggdGV4dHVyZTJEKCBhb01hcCwgdlV2MiApLnIgLSAxLjAgKSAqIGFvTWFwSW50ZW5zaXR5ICsgMS4wO1xcblxcbiNlbmRpZlxcblwiO1RIUkVFLlNoYWRlckNodW5rLmFvbWFwX3BhcnNfZnJhZ21lbnQ9XCIjaWZkZWYgVVNFX0FPTUFQXFxuXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgYW9NYXA7XFxuXFx0dW5pZm9ybSBmbG9hdCBhb01hcEludGVuc2l0eTtcXG5cXG4jZW5kaWZcIjtUSFJFRS5TaGFkZXJDaHVuay5iZWdpbl92ZXJ0ZXg9XCJcXG52ZWMzIHRyYW5zZm9ybWVkID0gdmVjMyggcG9zaXRpb24gKTtcXG5cIjtUSFJFRS5TaGFkZXJDaHVuay5iZWdpbm5vcm1hbF92ZXJ0ZXg9XCJcXG52ZWMzIG9iamVjdE5vcm1hbCA9IHZlYzMoIG5vcm1hbCApO1xcblwiO1RIUkVFLlNoYWRlckNodW5rLmJ1bXBtYXBfcGFyc19mcmFnbWVudD1cIiNpZmRlZiBVU0VfQlVNUE1BUFxcblxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIGJ1bXBNYXA7XFxuXFx0dW5pZm9ybSBmbG9hdCBidW1wU2NhbGU7XFxuXFxuXFxuXFxuXFx0dmVjMiBkSGR4eV9md2QoKSB7XFxuXFxuXFx0XFx0dmVjMiBkU1RkeCA9IGRGZHgoIHZVdiApO1xcblxcdFxcdHZlYzIgZFNUZHkgPSBkRmR5KCB2VXYgKTtcXG5cXG5cXHRcXHRmbG9hdCBIbGwgPSBidW1wU2NhbGUgKiB0ZXh0dXJlMkQoIGJ1bXBNYXAsIHZVdiApLng7XFxuXFx0XFx0ZmxvYXQgZEJ4ID0gYnVtcFNjYWxlICogdGV4dHVyZTJEKCBidW1wTWFwLCB2VXYgKyBkU1RkeCApLnggLSBIbGw7XFxuXFx0XFx0ZmxvYXQgZEJ5ID0gYnVtcFNjYWxlICogdGV4dHVyZTJEKCBidW1wTWFwLCB2VXYgKyBkU1RkeSApLnggLSBIbGw7XFxuXFxuXFx0XFx0cmV0dXJuIHZlYzIoIGRCeCwgZEJ5ICk7XFxuXFxuXFx0fVxcblxcblxcdHZlYzMgcGVydHVyYk5vcm1hbEFyYiggdmVjMyBzdXJmX3BvcywgdmVjMyBzdXJmX25vcm0sIHZlYzIgZEhkeHkgKSB7XFxuXFxuXFx0XFx0dmVjMyB2U2lnbWFYID0gZEZkeCggc3VyZl9wb3MgKTtcXG5cXHRcXHR2ZWMzIHZTaWdtYVkgPSBkRmR5KCBzdXJmX3BvcyApO1xcblxcdFxcdHZlYzMgdk4gPSBzdXJmX25vcm07XFxuXFx0XFx0dmVjMyBSMSA9IGNyb3NzKCB2U2lnbWFZLCB2TiApO1xcblxcdFxcdHZlYzMgUjIgPSBjcm9zcyggdk4sIHZTaWdtYVggKTtcXG5cXG5cXHRcXHRmbG9hdCBmRGV0ID0gZG90KCB2U2lnbWFYLCBSMSApO1xcblxcblxcdFxcdHZlYzMgdkdyYWQgPSBzaWduKCBmRGV0ICkgKiAoIGRIZHh5LnggKiBSMSArIGRIZHh5LnkgKiBSMiApO1xcblxcdFxcdHJldHVybiBub3JtYWxpemUoIGFicyggZkRldCApICogc3VyZl9ub3JtIC0gdkdyYWQgKTtcXG5cXG5cXHR9XFxuXFxuI2VuZGlmXFxuXCI7XG5USFJFRS5TaGFkZXJDaHVuay5jb2xvcl9mcmFnbWVudD1cIiNpZmRlZiBVU0VfQ09MT1JcXG5cXG5cXHRkaWZmdXNlQ29sb3IucmdiICo9IHZDb2xvcjtcXG5cXG4jZW5kaWZcIjtUSFJFRS5TaGFkZXJDaHVuay5jb2xvcl9wYXJzX2ZyYWdtZW50PVwiI2lmZGVmIFVTRV9DT0xPUlxcblxcblxcdHZhcnlpbmcgdmVjMyB2Q29sb3I7XFxuXFxuI2VuZGlmXFxuXCI7VEhSRUUuU2hhZGVyQ2h1bmsuY29sb3JfcGFyc192ZXJ0ZXg9XCIjaWZkZWYgVVNFX0NPTE9SXFxuXFxuXFx0dmFyeWluZyB2ZWMzIHZDb2xvcjtcXG5cXG4jZW5kaWZcIjtUSFJFRS5TaGFkZXJDaHVuay5jb2xvcl92ZXJ0ZXg9XCIjaWZkZWYgVVNFX0NPTE9SXFxuXFxuXFx0dkNvbG9yLnh5eiA9IGNvbG9yLnh5ejtcXG5cXG4jZW5kaWZcIjtUSFJFRS5TaGFkZXJDaHVuay5jb21tb249XCIjZGVmaW5lIFBJIDMuMTQxNTlcXG4jZGVmaW5lIFBJMiA2LjI4MzE4XFxuI2RlZmluZSBSRUNJUFJPQ0FMX1BJMiAwLjE1OTE1NDk0XFxuI2RlZmluZSBMT0cyIDEuNDQyNjk1XFxuI2RlZmluZSBFUFNJTE9OIDFlLTZcXG5cXG4jZGVmaW5lIHNhdHVyYXRlKGEpIGNsYW1wKCBhLCAwLjAsIDEuMCApXFxuI2RlZmluZSB3aGl0ZUNvbXBsaW1lbnQoYSkgKCAxLjAgLSBzYXR1cmF0ZSggYSApIClcXG5cXG52ZWMzIHRyYW5zZm9ybURpcmVjdGlvbiggaW4gdmVjMyBub3JtYWwsIGluIG1hdDQgbWF0cml4ICkge1xcblxcblxcdHJldHVybiBub3JtYWxpemUoICggbWF0cml4ICogdmVjNCggbm9ybWFsLCAwLjAgKSApLnh5eiApO1xcblxcbn1cXG5cXG52ZWMzIGludmVyc2VUcmFuc2Zvcm1EaXJlY3Rpb24oIGluIHZlYzMgbm9ybWFsLCBpbiBtYXQ0IG1hdHJpeCApIHtcXG5cXG5cXHRyZXR1cm4gbm9ybWFsaXplKCAoIHZlYzQoIG5vcm1hbCwgMC4wICkgKiBtYXRyaXggKS54eXogKTtcXG5cXG59XFxuXFxudmVjMyBwcm9qZWN0T25QbGFuZShpbiB2ZWMzIHBvaW50LCBpbiB2ZWMzIHBvaW50T25QbGFuZSwgaW4gdmVjMyBwbGFuZU5vcm1hbCApIHtcXG5cXG5cXHRmbG9hdCBkaXN0YW5jZSA9IGRvdCggcGxhbmVOb3JtYWwsIHBvaW50IC0gcG9pbnRPblBsYW5lICk7XFxuXFxuXFx0cmV0dXJuIC0gZGlzdGFuY2UgKiBwbGFuZU5vcm1hbCArIHBvaW50O1xcblxcbn1cXG5cXG5mbG9hdCBzaWRlT2ZQbGFuZSggaW4gdmVjMyBwb2ludCwgaW4gdmVjMyBwb2ludE9uUGxhbmUsIGluIHZlYzMgcGxhbmVOb3JtYWwgKSB7XFxuXFxuXFx0cmV0dXJuIHNpZ24oIGRvdCggcG9pbnQgLSBwb2ludE9uUGxhbmUsIHBsYW5lTm9ybWFsICkgKTtcXG5cXG59XFxuXFxudmVjMyBsaW5lUGxhbmVJbnRlcnNlY3QoIGluIHZlYzMgcG9pbnRPbkxpbmUsIGluIHZlYzMgbGluZURpcmVjdGlvbiwgaW4gdmVjMyBwb2ludE9uUGxhbmUsIGluIHZlYzMgcGxhbmVOb3JtYWwgKSB7XFxuXFxuXFx0cmV0dXJuIGxpbmVEaXJlY3Rpb24gKiAoIGRvdCggcGxhbmVOb3JtYWwsIHBvaW50T25QbGFuZSAtIHBvaW50T25MaW5lICkgLyBkb3QoIHBsYW5lTm9ybWFsLCBsaW5lRGlyZWN0aW9uICkgKSArIHBvaW50T25MaW5lO1xcblxcbn1cXG5cXG5mbG9hdCBjYWxjTGlnaHRBdHRlbnVhdGlvbiggZmxvYXQgbGlnaHREaXN0YW5jZSwgZmxvYXQgY3V0b2ZmRGlzdGFuY2UsIGZsb2F0IGRlY2F5RXhwb25lbnQgKSB7XFxuXFxuXFx0aWYgKCBkZWNheUV4cG9uZW50ID4gMC4wICkge1xcblxcblxcdCAgcmV0dXJuIHBvdyggc2F0dXJhdGUoIC1saWdodERpc3RhbmNlIC8gY3V0b2ZmRGlzdGFuY2UgKyAxLjAgKSwgZGVjYXlFeHBvbmVudCApO1xcblxcblxcdH1cXG5cXG5cXHRyZXR1cm4gMS4wO1xcblxcbn1cXG5cXG52ZWMzIEZfU2NobGljayggaW4gdmVjMyBzcGVjdWxhckNvbG9yLCBpbiBmbG9hdCBkb3RMSCApIHtcXG5cXG5cXG5cXHRmbG9hdCBmcmVzbmVsID0gZXhwMiggKCAtNS41NTQzNyAqIGRvdExIIC0gNi45ODMxNiApICogZG90TEggKTtcXG5cXG5cXHRyZXR1cm4gKCAxLjAgLSBzcGVjdWxhckNvbG9yICkgKiBmcmVzbmVsICsgc3BlY3VsYXJDb2xvcjtcXG5cXG59XFxuXFxuZmxvYXQgR19CbGlublBob25nX0ltcGxpY2l0KCAvKiBpbiBmbG9hdCBkb3ROTCwgaW4gZmxvYXQgZG90TlYgKi8gKSB7XFxuXFxuXFxuXFx0cmV0dXJuIDAuMjU7XFxuXFxufVxcblxcbmZsb2F0IERfQmxpbm5QaG9uZyggaW4gZmxvYXQgc2hpbmluZXNzLCBpbiBmbG9hdCBkb3ROSCApIHtcXG5cXG5cXG5cXHRyZXR1cm4gKCBzaGluaW5lc3MgKiAwLjUgKyAxLjAgKSAqIHBvdyggZG90TkgsIHNoaW5pbmVzcyApO1xcblxcbn1cXG5cXG52ZWMzIEJSREZfQmxpbm5QaG9uZyggaW4gdmVjMyBzcGVjdWxhckNvbG9yLCBpbiBmbG9hdCBzaGluaW5lc3MsIGluIHZlYzMgbm9ybWFsLCBpbiB2ZWMzIGxpZ2h0RGlyLCBpbiB2ZWMzIHZpZXdEaXIgKSB7XFxuXFxuXFx0dmVjMyBoYWxmRGlyID0gbm9ybWFsaXplKCBsaWdodERpciArIHZpZXdEaXIgKTtcXG5cXG5cXHRmbG9hdCBkb3ROSCA9IHNhdHVyYXRlKCBkb3QoIG5vcm1hbCwgaGFsZkRpciApICk7XFxuXFx0ZmxvYXQgZG90TEggPSBzYXR1cmF0ZSggZG90KCBsaWdodERpciwgaGFsZkRpciApICk7XFxuXFxuXFx0dmVjMyBGID0gRl9TY2hsaWNrKCBzcGVjdWxhckNvbG9yLCBkb3RMSCApO1xcblxcblxcdGZsb2F0IEcgPSBHX0JsaW5uUGhvbmdfSW1wbGljaXQoIC8qIGRvdE5MLCBkb3ROViAqLyApO1xcblxcblxcdGZsb2F0IEQgPSBEX0JsaW5uUGhvbmcoIHNoaW5pbmVzcywgZG90TkggKTtcXG5cXG5cXHRyZXR1cm4gRiAqIEcgKiBEO1xcblxcbn1cXG5cXG52ZWMzIGlucHV0VG9MaW5lYXIoIGluIHZlYzMgYSApIHtcXG5cXG5cXHQjaWZkZWYgR0FNTUFfSU5QVVRcXG5cXG5cXHRcXHRyZXR1cm4gcG93KCBhLCB2ZWMzKCBmbG9hdCggR0FNTUFfRkFDVE9SICkgKSApO1xcblxcblxcdCNlbHNlXFxuXFxuXFx0XFx0cmV0dXJuIGE7XFxuXFxuXFx0I2VuZGlmXFxuXFxufVxcblxcbnZlYzMgbGluZWFyVG9PdXRwdXQoIGluIHZlYzMgYSApIHtcXG5cXG5cXHQjaWZkZWYgR0FNTUFfT1VUUFVUXFxuXFxuXFx0XFx0cmV0dXJuIHBvdyggYSwgdmVjMyggMS4wIC8gZmxvYXQoIEdBTU1BX0ZBQ1RPUiApICkgKTtcXG5cXG5cXHQjZWxzZVxcblxcblxcdFxcdHJldHVybiBhO1xcblxcblxcdCNlbmRpZlxcblxcbn1cXG5cIjtcblRIUkVFLlNoYWRlckNodW5rLmRlZmF1bHRub3JtYWxfdmVydGV4PVwiI2lmZGVmIEZMSVBfU0lERURcXG5cXG5cXHRvYmplY3ROb3JtYWwgPSAtb2JqZWN0Tm9ybWFsO1xcblxcbiNlbmRpZlxcblxcbnZlYzMgdHJhbnNmb3JtZWROb3JtYWwgPSBub3JtYWxNYXRyaXggKiBvYmplY3ROb3JtYWw7XFxuXCI7VEhSRUUuU2hhZGVyQ2h1bmsuZGlzcGxhY2VtZW50bWFwX3ZlcnRleD1cIiNpZmRlZiBVU0VfRElTUExBQ0VNRU5UTUFQXFxuXFxuXFx0dHJhbnNmb3JtZWQgKz0gbm9ybWFsICogKCB0ZXh0dXJlMkQoIGRpc3BsYWNlbWVudE1hcCwgdXYgKS54ICogZGlzcGxhY2VtZW50U2NhbGUgKyBkaXNwbGFjZW1lbnRCaWFzICk7XFxuXFxuI2VuZGlmXFxuXCI7VEhSRUUuU2hhZGVyQ2h1bmsuZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4PVwiI2lmZGVmIFVTRV9ESVNQTEFDRU1FTlRNQVBcXG5cXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBkaXNwbGFjZW1lbnRNYXA7XFxuXFx0dW5pZm9ybSBmbG9hdCBkaXNwbGFjZW1lbnRTY2FsZTtcXG5cXHR1bmlmb3JtIGZsb2F0IGRpc3BsYWNlbWVudEJpYXM7XFxuXFxuI2VuZGlmXFxuXCI7XG5USFJFRS5TaGFkZXJDaHVuay5lbWlzc2l2ZW1hcF9mcmFnbWVudD1cIiNpZmRlZiBVU0VfRU1JU1NJVkVNQVBcXG5cXG5cXHR2ZWM0IGVtaXNzaXZlQ29sb3IgPSB0ZXh0dXJlMkQoIGVtaXNzaXZlTWFwLCB2VXYgKTtcXG5cXG5cXHRlbWlzc2l2ZUNvbG9yLnJnYiA9IGlucHV0VG9MaW5lYXIoIGVtaXNzaXZlQ29sb3IucmdiICk7XFxuXFxuXFx0dG90YWxFbWlzc2l2ZUxpZ2h0ICo9IGVtaXNzaXZlQ29sb3IucmdiO1xcblxcbiNlbmRpZlxcblwiO1RIUkVFLlNoYWRlckNodW5rLmVtaXNzaXZlbWFwX3BhcnNfZnJhZ21lbnQ9XCIjaWZkZWYgVVNFX0VNSVNTSVZFTUFQXFxuXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgZW1pc3NpdmVNYXA7XFxuXFxuI2VuZGlmXFxuXCI7VEhSRUUuU2hhZGVyQ2h1bmsuZW52bWFwX2ZyYWdtZW50PVwiI2lmZGVmIFVTRV9FTlZNQVBcXG5cXG5cXHQjaWYgZGVmaW5lZCggVVNFX0JVTVBNQVAgKSB8fCBkZWZpbmVkKCBVU0VfTk9STUFMTUFQICkgfHwgZGVmaW5lZCggUEhPTkcgKVxcblxcblxcdFxcdHZlYzMgY2FtZXJhVG9WZXJ0ZXggPSBub3JtYWxpemUoIHZXb3JsZFBvc2l0aW9uIC0gY2FtZXJhUG9zaXRpb24gKTtcXG5cXG5cXHRcXHR2ZWMzIHdvcmxkTm9ybWFsID0gaW52ZXJzZVRyYW5zZm9ybURpcmVjdGlvbiggbm9ybWFsLCB2aWV3TWF0cml4ICk7XFxuXFxuXFx0XFx0I2lmZGVmIEVOVk1BUF9NT0RFX1JFRkxFQ1RJT05cXG5cXG5cXHRcXHRcXHR2ZWMzIHJlZmxlY3RWZWMgPSByZWZsZWN0KCBjYW1lcmFUb1ZlcnRleCwgd29ybGROb3JtYWwgKTtcXG5cXG5cXHRcXHQjZWxzZVxcblxcblxcdFxcdFxcdHZlYzMgcmVmbGVjdFZlYyA9IHJlZnJhY3QoIGNhbWVyYVRvVmVydGV4LCB3b3JsZE5vcm1hbCwgcmVmcmFjdGlvblJhdGlvICk7XFxuXFxuXFx0XFx0I2VuZGlmXFxuXFxuXFx0I2Vsc2VcXG5cXG5cXHRcXHR2ZWMzIHJlZmxlY3RWZWMgPSB2UmVmbGVjdDtcXG5cXG5cXHQjZW5kaWZcXG5cXG5cXHQjaWZkZWYgRE9VQkxFX1NJREVEXFxuXFx0XFx0ZmxvYXQgZmxpcE5vcm1hbCA9ICggZmxvYXQoIGdsX0Zyb250RmFjaW5nICkgKiAyLjAgLSAxLjAgKTtcXG5cXHQjZWxzZVxcblxcdFxcdGZsb2F0IGZsaXBOb3JtYWwgPSAxLjA7XFxuXFx0I2VuZGlmXFxuXFxuXFx0I2lmZGVmIEVOVk1BUF9UWVBFX0NVQkVcXG5cXHRcXHR2ZWM0IGVudkNvbG9yID0gdGV4dHVyZUN1YmUoIGVudk1hcCwgZmxpcE5vcm1hbCAqIHZlYzMoIGZsaXBFbnZNYXAgKiByZWZsZWN0VmVjLngsIHJlZmxlY3RWZWMueXogKSApO1xcblxcblxcdCNlbGlmIGRlZmluZWQoIEVOVk1BUF9UWVBFX0VRVUlSRUMgKVxcblxcdFxcdHZlYzIgc2FtcGxlVVY7XFxuXFx0XFx0c2FtcGxlVVYueSA9IHNhdHVyYXRlKCBmbGlwTm9ybWFsICogcmVmbGVjdFZlYy55ICogMC41ICsgMC41ICk7XFxuXFx0XFx0c2FtcGxlVVYueCA9IGF0YW4oIGZsaXBOb3JtYWwgKiByZWZsZWN0VmVjLnosIGZsaXBOb3JtYWwgKiByZWZsZWN0VmVjLnggKSAqIFJFQ0lQUk9DQUxfUEkyICsgMC41O1xcblxcdFxcdHZlYzQgZW52Q29sb3IgPSB0ZXh0dXJlMkQoIGVudk1hcCwgc2FtcGxlVVYgKTtcXG5cXG5cXHQjZWxpZiBkZWZpbmVkKCBFTlZNQVBfVFlQRV9TUEhFUkUgKVxcblxcdFxcdHZlYzMgcmVmbGVjdFZpZXcgPSBmbGlwTm9ybWFsICogbm9ybWFsaXplKCh2aWV3TWF0cml4ICogdmVjNCggcmVmbGVjdFZlYywgMC4wICkpLnh5eiArIHZlYzMoMC4wLDAuMCwxLjApKTtcXG5cXHRcXHR2ZWM0IGVudkNvbG9yID0gdGV4dHVyZTJEKCBlbnZNYXAsIHJlZmxlY3RWaWV3Lnh5ICogMC41ICsgMC41ICk7XFxuXFx0I2VuZGlmXFxuXFxuXFx0ZW52Q29sb3IueHl6ID0gaW5wdXRUb0xpbmVhciggZW52Q29sb3IueHl6ICk7XFxuXFxuXFx0I2lmZGVmIEVOVk1BUF9CTEVORElOR19NVUxUSVBMWVxcblxcblxcdFxcdG91dGdvaW5nTGlnaHQgPSBtaXgoIG91dGdvaW5nTGlnaHQsIG91dGdvaW5nTGlnaHQgKiBlbnZDb2xvci54eXosIHNwZWN1bGFyU3RyZW5ndGggKiByZWZsZWN0aXZpdHkgKTtcXG5cXG5cXHQjZWxpZiBkZWZpbmVkKCBFTlZNQVBfQkxFTkRJTkdfTUlYIClcXG5cXG5cXHRcXHRvdXRnb2luZ0xpZ2h0ID0gbWl4KCBvdXRnb2luZ0xpZ2h0LCBlbnZDb2xvci54eXosIHNwZWN1bGFyU3RyZW5ndGggKiByZWZsZWN0aXZpdHkgKTtcXG5cXG5cXHQjZWxpZiBkZWZpbmVkKCBFTlZNQVBfQkxFTkRJTkdfQUREIClcXG5cXG5cXHRcXHRvdXRnb2luZ0xpZ2h0ICs9IGVudkNvbG9yLnh5eiAqIHNwZWN1bGFyU3RyZW5ndGggKiByZWZsZWN0aXZpdHk7XFxuXFxuXFx0I2VuZGlmXFxuXFxuI2VuZGlmXFxuXCI7XG5USFJFRS5TaGFkZXJDaHVuay5lbnZtYXBfcGFyc19mcmFnbWVudD1cIiNpZmRlZiBVU0VfRU5WTUFQXFxuXFxuXFx0dW5pZm9ybSBmbG9hdCByZWZsZWN0aXZpdHk7XFxuXFx0I2lmZGVmIEVOVk1BUF9UWVBFX0NVQkVcXG5cXHRcXHR1bmlmb3JtIHNhbXBsZXJDdWJlIGVudk1hcDtcXG5cXHQjZWxzZVxcblxcdFxcdHVuaWZvcm0gc2FtcGxlcjJEIGVudk1hcDtcXG5cXHQjZW5kaWZcXG5cXHR1bmlmb3JtIGZsb2F0IGZsaXBFbnZNYXA7XFxuXFxuXFx0I2lmIGRlZmluZWQoIFVTRV9CVU1QTUFQICkgfHwgZGVmaW5lZCggVVNFX05PUk1BTE1BUCApIHx8IGRlZmluZWQoIFBIT05HIClcXG5cXG5cXHRcXHR1bmlmb3JtIGZsb2F0IHJlZnJhY3Rpb25SYXRpbztcXG5cXG5cXHQjZWxzZVxcblxcblxcdFxcdHZhcnlpbmcgdmVjMyB2UmVmbGVjdDtcXG5cXG5cXHQjZW5kaWZcXG5cXG4jZW5kaWZcXG5cIjtUSFJFRS5TaGFkZXJDaHVuay5lbnZtYXBfcGFyc192ZXJ0ZXg9XCIjaWYgZGVmaW5lZCggVVNFX0VOVk1BUCApICYmICEgZGVmaW5lZCggVVNFX0JVTVBNQVAgKSAmJiAhIGRlZmluZWQoIFVTRV9OT1JNQUxNQVAgKSAmJiAhIGRlZmluZWQoIFBIT05HIClcXG5cXG5cXHR2YXJ5aW5nIHZlYzMgdlJlZmxlY3Q7XFxuXFxuXFx0dW5pZm9ybSBmbG9hdCByZWZyYWN0aW9uUmF0aW87XFxuXFxuI2VuZGlmXFxuXCI7XG5USFJFRS5TaGFkZXJDaHVuay5lbnZtYXBfdmVydGV4PVwiI2lmIGRlZmluZWQoIFVTRV9FTlZNQVAgKSAmJiAhIGRlZmluZWQoIFVTRV9CVU1QTUFQICkgJiYgISBkZWZpbmVkKCBVU0VfTk9STUFMTUFQICkgJiYgISBkZWZpbmVkKCBQSE9ORyApXFxuXFxuXFx0dmVjMyBjYW1lcmFUb1ZlcnRleCA9IG5vcm1hbGl6ZSggd29ybGRQb3NpdGlvbi54eXogLSBjYW1lcmFQb3NpdGlvbiApO1xcblxcblxcdHZlYzMgd29ybGROb3JtYWwgPSBpbnZlcnNlVHJhbnNmb3JtRGlyZWN0aW9uKCB0cmFuc2Zvcm1lZE5vcm1hbCwgdmlld01hdHJpeCApO1xcblxcblxcdCNpZmRlZiBFTlZNQVBfTU9ERV9SRUZMRUNUSU9OXFxuXFxuXFx0XFx0dlJlZmxlY3QgPSByZWZsZWN0KCBjYW1lcmFUb1ZlcnRleCwgd29ybGROb3JtYWwgKTtcXG5cXG5cXHQjZWxzZVxcblxcblxcdFxcdHZSZWZsZWN0ID0gcmVmcmFjdCggY2FtZXJhVG9WZXJ0ZXgsIHdvcmxkTm9ybWFsLCByZWZyYWN0aW9uUmF0aW8gKTtcXG5cXG5cXHQjZW5kaWZcXG5cXG4jZW5kaWZcXG5cIjtcblRIUkVFLlNoYWRlckNodW5rLmZvZ19mcmFnbWVudD1cIiNpZmRlZiBVU0VfRk9HXFxuXFxuXFx0I2lmZGVmIFVTRV9MT0dERVBUSEJVRl9FWFRcXG5cXG5cXHRcXHRmbG9hdCBkZXB0aCA9IGdsX0ZyYWdEZXB0aEVYVCAvIGdsX0ZyYWdDb29yZC53O1xcblxcblxcdCNlbHNlXFxuXFxuXFx0XFx0ZmxvYXQgZGVwdGggPSBnbF9GcmFnQ29vcmQueiAvIGdsX0ZyYWdDb29yZC53O1xcblxcblxcdCNlbmRpZlxcblxcblxcdCNpZmRlZiBGT0dfRVhQMlxcblxcblxcdFxcdGZsb2F0IGZvZ0ZhY3RvciA9IHdoaXRlQ29tcGxpbWVudCggZXhwMiggLSBmb2dEZW5zaXR5ICogZm9nRGVuc2l0eSAqIGRlcHRoICogZGVwdGggKiBMT0cyICkgKTtcXG5cXG5cXHQjZWxzZVxcblxcblxcdFxcdGZsb2F0IGZvZ0ZhY3RvciA9IHNtb290aHN0ZXAoIGZvZ05lYXIsIGZvZ0ZhciwgZGVwdGggKTtcXG5cXG5cXHQjZW5kaWZcXG5cXHRcXG5cXHRvdXRnb2luZ0xpZ2h0ID0gbWl4KCBvdXRnb2luZ0xpZ2h0LCBmb2dDb2xvciwgZm9nRmFjdG9yICk7XFxuXFxuI2VuZGlmXCI7XG5USFJFRS5TaGFkZXJDaHVuay5mb2dfcGFyc19mcmFnbWVudD1cIiNpZmRlZiBVU0VfRk9HXFxuXFxuXFx0dW5pZm9ybSB2ZWMzIGZvZ0NvbG9yO1xcblxcblxcdCNpZmRlZiBGT0dfRVhQMlxcblxcblxcdFxcdHVuaWZvcm0gZmxvYXQgZm9nRGVuc2l0eTtcXG5cXG5cXHQjZWxzZVxcblxcblxcdFxcdHVuaWZvcm0gZmxvYXQgZm9nTmVhcjtcXG5cXHRcXHR1bmlmb3JtIGZsb2F0IGZvZ0ZhcjtcXG5cXHQjZW5kaWZcXG5cXG4jZW5kaWZcIjtUSFJFRS5TaGFkZXJDaHVuay5oZW1pbGlnaHRfZnJhZ21lbnQ9XCIjaWYgTUFYX0hFTUlfTElHSFRTID4gMFxcblxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE1BWF9IRU1JX0xJR0hUUzsgaSArKyApIHtcXG5cXG5cXHRcXHR2ZWMzIGxpZ2h0RGlyID0gaGVtaXNwaGVyZUxpZ2h0RGlyZWN0aW9uWyBpIF07XFxuXFxuXFx0XFx0ZmxvYXQgZG90UHJvZHVjdCA9IGRvdCggbm9ybWFsLCBsaWdodERpciApO1xcblxcblxcdFxcdGZsb2F0IGhlbWlEaWZmdXNlV2VpZ2h0ID0gMC41ICogZG90UHJvZHVjdCArIDAuNTtcXG5cXG5cXHRcXHR2ZWMzIGxpZ2h0Q29sb3IgPSBtaXgoIGhlbWlzcGhlcmVMaWdodEdyb3VuZENvbG9yWyBpIF0sIGhlbWlzcGhlcmVMaWdodFNreUNvbG9yWyBpIF0sIGhlbWlEaWZmdXNlV2VpZ2h0ICk7XFxuXFxuXFx0XFx0dG90YWxBbWJpZW50TGlnaHQgKz0gbGlnaHRDb2xvcjtcXG5cXG5cXHR9XFxuXFxuI2VuZGlmXFxuXFxuXCI7XG5USFJFRS5TaGFkZXJDaHVuay5saWdodG1hcF9mcmFnbWVudD1cIiNpZmRlZiBVU0VfTElHSFRNQVBcXG5cXG5cXHR0b3RhbEFtYmllbnRMaWdodCArPSB0ZXh0dXJlMkQoIGxpZ2h0TWFwLCB2VXYyICkueHl6ICogbGlnaHRNYXBJbnRlbnNpdHk7XFxuXFxuI2VuZGlmXFxuXCI7VEhSRUUuU2hhZGVyQ2h1bmsubGlnaHRtYXBfcGFyc19mcmFnbWVudD1cIiNpZmRlZiBVU0VfTElHSFRNQVBcXG5cXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBsaWdodE1hcDtcXG5cXHR1bmlmb3JtIGZsb2F0IGxpZ2h0TWFwSW50ZW5zaXR5O1xcblxcbiNlbmRpZlwiO1RIUkVFLlNoYWRlckNodW5rLmxpZ2h0c19sYW1iZXJ0X3BhcnNfdmVydGV4PVwiI2lmIE1BWF9ESVJfTElHSFRTID4gMFxcblxcblxcdHVuaWZvcm0gdmVjMyBkaXJlY3Rpb25hbExpZ2h0Q29sb3JbIE1BWF9ESVJfTElHSFRTIF07XFxuXFx0dW5pZm9ybSB2ZWMzIGRpcmVjdGlvbmFsTGlnaHREaXJlY3Rpb25bIE1BWF9ESVJfTElHSFRTIF07XFxuXFxuI2VuZGlmXFxuXFxuI2lmIE1BWF9IRU1JX0xJR0hUUyA+IDBcXG5cXG5cXHR1bmlmb3JtIHZlYzMgaGVtaXNwaGVyZUxpZ2h0U2t5Q29sb3JbIE1BWF9IRU1JX0xJR0hUUyBdO1xcblxcdHVuaWZvcm0gdmVjMyBoZW1pc3BoZXJlTGlnaHRHcm91bmRDb2xvclsgTUFYX0hFTUlfTElHSFRTIF07XFxuXFx0dW5pZm9ybSB2ZWMzIGhlbWlzcGhlcmVMaWdodERpcmVjdGlvblsgTUFYX0hFTUlfTElHSFRTIF07XFxuXFxuI2VuZGlmXFxuXFxuI2lmIE1BWF9QT0lOVF9MSUdIVFMgPiAwXFxuXFxuXFx0dW5pZm9ybSB2ZWMzIHBvaW50TGlnaHRDb2xvclsgTUFYX1BPSU5UX0xJR0hUUyBdO1xcblxcdHVuaWZvcm0gdmVjMyBwb2ludExpZ2h0UG9zaXRpb25bIE1BWF9QT0lOVF9MSUdIVFMgXTtcXG5cXHR1bmlmb3JtIGZsb2F0IHBvaW50TGlnaHREaXN0YW5jZVsgTUFYX1BPSU5UX0xJR0hUUyBdO1xcblxcdHVuaWZvcm0gZmxvYXQgcG9pbnRMaWdodERlY2F5WyBNQVhfUE9JTlRfTElHSFRTIF07XFxuXFxuI2VuZGlmXFxuXFxuI2lmIE1BWF9TUE9UX0xJR0hUUyA+IDBcXG5cXG5cXHR1bmlmb3JtIHZlYzMgc3BvdExpZ2h0Q29sb3JbIE1BWF9TUE9UX0xJR0hUUyBdO1xcblxcdHVuaWZvcm0gdmVjMyBzcG90TGlnaHRQb3NpdGlvblsgTUFYX1NQT1RfTElHSFRTIF07XFxuXFx0dW5pZm9ybSB2ZWMzIHNwb3RMaWdodERpcmVjdGlvblsgTUFYX1NQT1RfTElHSFRTIF07XFxuXFx0dW5pZm9ybSBmbG9hdCBzcG90TGlnaHREaXN0YW5jZVsgTUFYX1NQT1RfTElHSFRTIF07XFxuXFx0dW5pZm9ybSBmbG9hdCBzcG90TGlnaHRBbmdsZUNvc1sgTUFYX1NQT1RfTElHSFRTIF07XFxuXFx0dW5pZm9ybSBmbG9hdCBzcG90TGlnaHRFeHBvbmVudFsgTUFYX1NQT1RfTElHSFRTIF07XFxuXFx0dW5pZm9ybSBmbG9hdCBzcG90TGlnaHREZWNheVsgTUFYX1NQT1RfTElHSFRTIF07XFxuXFxuI2VuZGlmXFxuXCI7XG5USFJFRS5TaGFkZXJDaHVuay5saWdodHNfbGFtYmVydF92ZXJ0ZXg9XCJ2TGlnaHRGcm9udCA9IHZlYzMoIDAuMCApO1xcblxcbiNpZmRlZiBET1VCTEVfU0lERURcXG5cXG5cXHR2TGlnaHRCYWNrID0gdmVjMyggMC4wICk7XFxuXFxuI2VuZGlmXFxuXFxudmVjMyBub3JtYWwgPSBub3JtYWxpemUoIHRyYW5zZm9ybWVkTm9ybWFsICk7XFxuXFxuI2lmIE1BWF9QT0lOVF9MSUdIVFMgPiAwXFxuXFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTUFYX1BPSU5UX0xJR0hUUzsgaSArKyApIHtcXG5cXG5cXHRcXHR2ZWMzIGxpZ2h0Q29sb3IgPSBwb2ludExpZ2h0Q29sb3JbIGkgXTtcXG5cXG5cXHRcXHR2ZWMzIGxWZWN0b3IgPSBwb2ludExpZ2h0UG9zaXRpb25bIGkgXSAtIG12UG9zaXRpb24ueHl6O1xcblxcdFxcdHZlYzMgbGlnaHREaXIgPSBub3JtYWxpemUoIGxWZWN0b3IgKTtcXG5cXG5cXG5cXHRcXHRmbG9hdCBhdHRlbnVhdGlvbiA9IGNhbGNMaWdodEF0dGVudWF0aW9uKCBsZW5ndGgoIGxWZWN0b3IgKSwgcG9pbnRMaWdodERpc3RhbmNlWyBpIF0sIHBvaW50TGlnaHREZWNheVsgaSBdICk7XFxuXFxuXFxuXFx0XFx0ZmxvYXQgZG90UHJvZHVjdCA9IGRvdCggbm9ybWFsLCBsaWdodERpciApO1xcblxcblxcdFxcdHZMaWdodEZyb250ICs9IGxpZ2h0Q29sb3IgKiBhdHRlbnVhdGlvbiAqIHNhdHVyYXRlKCBkb3RQcm9kdWN0ICk7XFxuXFxuXFx0XFx0I2lmZGVmIERPVUJMRV9TSURFRFxcblxcblxcdFxcdFxcdHZMaWdodEJhY2sgKz0gbGlnaHRDb2xvciAqIGF0dGVudWF0aW9uICogc2F0dXJhdGUoIC0gZG90UHJvZHVjdCApO1xcblxcblxcdFxcdCNlbmRpZlxcblxcblxcdH1cXG5cXG4jZW5kaWZcXG5cXG4jaWYgTUFYX1NQT1RfTElHSFRTID4gMFxcblxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE1BWF9TUE9UX0xJR0hUUzsgaSArKyApIHtcXG5cXG5cXHRcXHR2ZWMzIGxpZ2h0Q29sb3IgPSBzcG90TGlnaHRDb2xvclsgaSBdO1xcblxcblxcdFxcdHZlYzMgbGlnaHRQb3NpdGlvbiA9IHNwb3RMaWdodFBvc2l0aW9uWyBpIF07XFxuXFx0XFx0dmVjMyBsVmVjdG9yID0gbGlnaHRQb3NpdGlvbiAtIG12UG9zaXRpb24ueHl6O1xcblxcdFxcdHZlYzMgbGlnaHREaXIgPSBub3JtYWxpemUoIGxWZWN0b3IgKTtcXG5cXG5cXHRcXHRmbG9hdCBzcG90RWZmZWN0ID0gZG90KCBzcG90TGlnaHREaXJlY3Rpb25bIGkgXSwgbGlnaHREaXIgKTtcXG5cXG5cXHRcXHRpZiAoIHNwb3RFZmZlY3QgPiBzcG90TGlnaHRBbmdsZUNvc1sgaSBdICkge1xcblxcblxcdFxcdFxcdHNwb3RFZmZlY3QgPSBzYXR1cmF0ZSggcG93KCBzYXR1cmF0ZSggc3BvdEVmZmVjdCApLCBzcG90TGlnaHRFeHBvbmVudFsgaSBdICkgKTtcXG5cXG5cXG5cXHRcXHRcXHRmbG9hdCBhdHRlbnVhdGlvbiA9IGNhbGNMaWdodEF0dGVudWF0aW9uKCBsZW5ndGgoIGxWZWN0b3IgKSwgc3BvdExpZ2h0RGlzdGFuY2VbIGkgXSwgc3BvdExpZ2h0RGVjYXlbIGkgXSApO1xcblxcblxcdFxcdFxcdGF0dGVudWF0aW9uICo9IHNwb3RFZmZlY3Q7XFxuXFxuXFxuXFx0XFx0XFx0ZmxvYXQgZG90UHJvZHVjdCA9IGRvdCggbm9ybWFsLCBsaWdodERpciApO1xcblxcblxcdFxcdFxcdHZMaWdodEZyb250ICs9IGxpZ2h0Q29sb3IgKiBhdHRlbnVhdGlvbiAqIHNhdHVyYXRlKCBkb3RQcm9kdWN0ICk7XFxuXFxuXFx0XFx0XFx0I2lmZGVmIERPVUJMRV9TSURFRFxcblxcblxcdFxcdFxcdFxcdHZMaWdodEJhY2sgKz0gbGlnaHRDb2xvciAqIGF0dGVudWF0aW9uICogc2F0dXJhdGUoIC0gZG90UHJvZHVjdCApO1xcblxcblxcdFxcdFxcdCNlbmRpZlxcblxcblxcdFxcdH1cXG5cXG5cXHR9XFxuXFxuI2VuZGlmXFxuXFxuI2lmIE1BWF9ESVJfTElHSFRTID4gMFxcblxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE1BWF9ESVJfTElHSFRTOyBpICsrICkge1xcblxcblxcdFxcdHZlYzMgbGlnaHRDb2xvciA9IGRpcmVjdGlvbmFsTGlnaHRDb2xvclsgaSBdO1xcblxcblxcdFxcdHZlYzMgbGlnaHREaXIgPSBkaXJlY3Rpb25hbExpZ2h0RGlyZWN0aW9uWyBpIF07XFxuXFxuXFxuXFx0XFx0ZmxvYXQgZG90UHJvZHVjdCA9IGRvdCggbm9ybWFsLCBsaWdodERpciApO1xcblxcblxcdFxcdHZMaWdodEZyb250ICs9IGxpZ2h0Q29sb3IgKiBzYXR1cmF0ZSggZG90UHJvZHVjdCApO1xcblxcblxcdFxcdCNpZmRlZiBET1VCTEVfU0lERURcXG5cXG5cXHRcXHRcXHR2TGlnaHRCYWNrICs9IGxpZ2h0Q29sb3IgKiBzYXR1cmF0ZSggLSBkb3RQcm9kdWN0ICk7XFxuXFxuXFx0XFx0I2VuZGlmXFxuXFxuXFx0fVxcblxcbiNlbmRpZlxcblxcbiNpZiBNQVhfSEVNSV9MSUdIVFMgPiAwXFxuXFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTUFYX0hFTUlfTElHSFRTOyBpICsrICkge1xcblxcblxcdFxcdHZlYzMgbGlnaHREaXIgPSBoZW1pc3BoZXJlTGlnaHREaXJlY3Rpb25bIGkgXTtcXG5cXG5cXG5cXHRcXHRmbG9hdCBkb3RQcm9kdWN0ID0gZG90KCBub3JtYWwsIGxpZ2h0RGlyICk7XFxuXFxuXFx0XFx0ZmxvYXQgaGVtaURpZmZ1c2VXZWlnaHQgPSAwLjUgKiBkb3RQcm9kdWN0ICsgMC41O1xcblxcblxcdFxcdHZMaWdodEZyb250ICs9IG1peCggaGVtaXNwaGVyZUxpZ2h0R3JvdW5kQ29sb3JbIGkgXSwgaGVtaXNwaGVyZUxpZ2h0U2t5Q29sb3JbIGkgXSwgaGVtaURpZmZ1c2VXZWlnaHQgKTtcXG5cXG5cXHRcXHQjaWZkZWYgRE9VQkxFX1NJREVEXFxuXFxuXFx0XFx0XFx0ZmxvYXQgaGVtaURpZmZ1c2VXZWlnaHRCYWNrID0gLSAwLjUgKiBkb3RQcm9kdWN0ICsgMC41O1xcblxcblxcdFxcdFxcdHZMaWdodEJhY2sgKz0gbWl4KCBoZW1pc3BoZXJlTGlnaHRHcm91bmRDb2xvclsgaSBdLCBoZW1pc3BoZXJlTGlnaHRTa3lDb2xvclsgaSBdLCBoZW1pRGlmZnVzZVdlaWdodEJhY2sgKTtcXG5cXG5cXHRcXHQjZW5kaWZcXG5cXG5cXHR9XFxuXFxuI2VuZGlmXFxuXCI7XG5USFJFRS5TaGFkZXJDaHVuay5saWdodHNfcGhvbmdfZnJhZ21lbnQ9XCJ2ZWMzIHZpZXdEaXIgPSBub3JtYWxpemUoIHZWaWV3UG9zaXRpb24gKTtcXG5cXG52ZWMzIHRvdGFsRGlmZnVzZUxpZ2h0ID0gdmVjMyggMC4wICk7XFxudmVjMyB0b3RhbFNwZWN1bGFyTGlnaHQgPSB2ZWMzKCAwLjAgKTtcXG5cXG4jaWYgTUFYX1BPSU5UX0xJR0hUUyA+IDBcXG5cXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBNQVhfUE9JTlRfTElHSFRTOyBpICsrICkge1xcblxcblxcdFxcdHZlYzMgbGlnaHRDb2xvciA9IHBvaW50TGlnaHRDb2xvclsgaSBdO1xcblxcblxcdFxcdHZlYzMgbGlnaHRQb3NpdGlvbiA9IHBvaW50TGlnaHRQb3NpdGlvblsgaSBdO1xcblxcdFxcdHZlYzMgbFZlY3RvciA9IGxpZ2h0UG9zaXRpb24gKyB2Vmlld1Bvc2l0aW9uLnh5ejtcXG5cXHRcXHR2ZWMzIGxpZ2h0RGlyID0gbm9ybWFsaXplKCBsVmVjdG9yICk7XFxuXFxuXFxuXFx0XFx0ZmxvYXQgYXR0ZW51YXRpb24gPSBjYWxjTGlnaHRBdHRlbnVhdGlvbiggbGVuZ3RoKCBsVmVjdG9yICksIHBvaW50TGlnaHREaXN0YW5jZVsgaSBdLCBwb2ludExpZ2h0RGVjYXlbIGkgXSApO1xcblxcblxcblxcdFxcdGZsb2F0IGNvc2luZVRlcm0gPSBzYXR1cmF0ZSggZG90KCBub3JtYWwsIGxpZ2h0RGlyICkgKTtcXG5cXG5cXHRcXHR0b3RhbERpZmZ1c2VMaWdodCArPSBsaWdodENvbG9yICogYXR0ZW51YXRpb24gKiBjb3NpbmVUZXJtO1xcblxcblxcblxcdFxcdHZlYzMgYnJkZiA9IEJSREZfQmxpbm5QaG9uZyggc3BlY3VsYXIsIHNoaW5pbmVzcywgbm9ybWFsLCBsaWdodERpciwgdmlld0RpciApO1xcblxcblxcdFxcdHRvdGFsU3BlY3VsYXJMaWdodCArPSBicmRmICogc3BlY3VsYXJTdHJlbmd0aCAqIGxpZ2h0Q29sb3IgKiBhdHRlbnVhdGlvbiAqIGNvc2luZVRlcm07XFxuXFxuXFxuXFx0fVxcblxcbiNlbmRpZlxcblxcbiNpZiBNQVhfU1BPVF9MSUdIVFMgPiAwXFxuXFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTUFYX1NQT1RfTElHSFRTOyBpICsrICkge1xcblxcblxcdFxcdHZlYzMgbGlnaHRDb2xvciA9IHNwb3RMaWdodENvbG9yWyBpIF07XFxuXFxuXFx0XFx0dmVjMyBsaWdodFBvc2l0aW9uID0gc3BvdExpZ2h0UG9zaXRpb25bIGkgXTtcXG5cXHRcXHR2ZWMzIGxWZWN0b3IgPSBsaWdodFBvc2l0aW9uICsgdlZpZXdQb3NpdGlvbi54eXo7XFxuXFx0XFx0dmVjMyBsaWdodERpciA9IG5vcm1hbGl6ZSggbFZlY3RvciApO1xcblxcblxcdFxcdGZsb2F0IHNwb3RFZmZlY3QgPSBkb3QoIHNwb3RMaWdodERpcmVjdGlvblsgaSBdLCBsaWdodERpciApO1xcblxcblxcdFxcdGlmICggc3BvdEVmZmVjdCA+IHNwb3RMaWdodEFuZ2xlQ29zWyBpIF0gKSB7XFxuXFxuXFx0XFx0XFx0c3BvdEVmZmVjdCA9IHNhdHVyYXRlKCBwb3coIHNhdHVyYXRlKCBzcG90RWZmZWN0ICksIHNwb3RMaWdodEV4cG9uZW50WyBpIF0gKSApO1xcblxcblxcblxcdFxcdFxcdGZsb2F0IGF0dGVudWF0aW9uID0gY2FsY0xpZ2h0QXR0ZW51YXRpb24oIGxlbmd0aCggbFZlY3RvciApLCBzcG90TGlnaHREaXN0YW5jZVsgaSBdLCBzcG90TGlnaHREZWNheVsgaSBdICk7XFxuXFxuXFx0XFx0XFx0YXR0ZW51YXRpb24gKj0gc3BvdEVmZmVjdDtcXG5cXG5cXG5cXHRcXHRcXHRmbG9hdCBjb3NpbmVUZXJtID0gc2F0dXJhdGUoIGRvdCggbm9ybWFsLCBsaWdodERpciApICk7XFxuXFxuXFx0XFx0XFx0dG90YWxEaWZmdXNlTGlnaHQgKz0gbGlnaHRDb2xvciAqIGF0dGVudWF0aW9uICogY29zaW5lVGVybTtcXG5cXG5cXG5cXHRcXHRcXHR2ZWMzIGJyZGYgPSBCUkRGX0JsaW5uUGhvbmcoIHNwZWN1bGFyLCBzaGluaW5lc3MsIG5vcm1hbCwgbGlnaHREaXIsIHZpZXdEaXIgKTtcXG5cXG5cXHRcXHRcXHR0b3RhbFNwZWN1bGFyTGlnaHQgKz0gYnJkZiAqIHNwZWN1bGFyU3RyZW5ndGggKiBsaWdodENvbG9yICogYXR0ZW51YXRpb24gKiBjb3NpbmVUZXJtO1xcblxcblxcdFxcdH1cXG5cXG5cXHR9XFxuXFxuI2VuZGlmXFxuXFxuI2lmIE1BWF9ESVJfTElHSFRTID4gMFxcblxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE1BWF9ESVJfTElHSFRTOyBpICsrICkge1xcblxcblxcdFxcdHZlYzMgbGlnaHRDb2xvciA9IGRpcmVjdGlvbmFsTGlnaHRDb2xvclsgaSBdO1xcblxcblxcdFxcdHZlYzMgbGlnaHREaXIgPSBkaXJlY3Rpb25hbExpZ2h0RGlyZWN0aW9uWyBpIF07XFxuXFxuXFxuXFx0XFx0ZmxvYXQgY29zaW5lVGVybSA9IHNhdHVyYXRlKCBkb3QoIG5vcm1hbCwgbGlnaHREaXIgKSApO1xcblxcblxcdFxcdHRvdGFsRGlmZnVzZUxpZ2h0ICs9IGxpZ2h0Q29sb3IgKiBjb3NpbmVUZXJtO1xcblxcblxcblxcdFxcdHZlYzMgYnJkZiA9IEJSREZfQmxpbm5QaG9uZyggc3BlY3VsYXIsIHNoaW5pbmVzcywgbm9ybWFsLCBsaWdodERpciwgdmlld0RpciApO1xcblxcblxcdFxcdHRvdGFsU3BlY3VsYXJMaWdodCArPSBicmRmICogc3BlY3VsYXJTdHJlbmd0aCAqIGxpZ2h0Q29sb3IgKiBjb3NpbmVUZXJtO1xcblxcblxcdH1cXG5cXG4jZW5kaWZcXG5cIjtcblRIUkVFLlNoYWRlckNodW5rLmxpZ2h0c19waG9uZ19wYXJzX2ZyYWdtZW50PVwidW5pZm9ybSB2ZWMzIGFtYmllbnRMaWdodENvbG9yO1xcblxcbiNpZiBNQVhfRElSX0xJR0hUUyA+IDBcXG5cXG5cXHR1bmlmb3JtIHZlYzMgZGlyZWN0aW9uYWxMaWdodENvbG9yWyBNQVhfRElSX0xJR0hUUyBdO1xcblxcdHVuaWZvcm0gdmVjMyBkaXJlY3Rpb25hbExpZ2h0RGlyZWN0aW9uWyBNQVhfRElSX0xJR0hUUyBdO1xcblxcbiNlbmRpZlxcblxcbiNpZiBNQVhfSEVNSV9MSUdIVFMgPiAwXFxuXFxuXFx0dW5pZm9ybSB2ZWMzIGhlbWlzcGhlcmVMaWdodFNreUNvbG9yWyBNQVhfSEVNSV9MSUdIVFMgXTtcXG5cXHR1bmlmb3JtIHZlYzMgaGVtaXNwaGVyZUxpZ2h0R3JvdW5kQ29sb3JbIE1BWF9IRU1JX0xJR0hUUyBdO1xcblxcdHVuaWZvcm0gdmVjMyBoZW1pc3BoZXJlTGlnaHREaXJlY3Rpb25bIE1BWF9IRU1JX0xJR0hUUyBdO1xcblxcbiNlbmRpZlxcblxcbiNpZiBNQVhfUE9JTlRfTElHSFRTID4gMFxcblxcblxcdHVuaWZvcm0gdmVjMyBwb2ludExpZ2h0Q29sb3JbIE1BWF9QT0lOVF9MSUdIVFMgXTtcXG5cXG5cXHR1bmlmb3JtIHZlYzMgcG9pbnRMaWdodFBvc2l0aW9uWyBNQVhfUE9JTlRfTElHSFRTIF07XFxuXFx0dW5pZm9ybSBmbG9hdCBwb2ludExpZ2h0RGlzdGFuY2VbIE1BWF9QT0lOVF9MSUdIVFMgXTtcXG5cXHR1bmlmb3JtIGZsb2F0IHBvaW50TGlnaHREZWNheVsgTUFYX1BPSU5UX0xJR0hUUyBdO1xcblxcbiNlbmRpZlxcblxcbiNpZiBNQVhfU1BPVF9MSUdIVFMgPiAwXFxuXFxuXFx0dW5pZm9ybSB2ZWMzIHNwb3RMaWdodENvbG9yWyBNQVhfU1BPVF9MSUdIVFMgXTtcXG5cXHR1bmlmb3JtIHZlYzMgc3BvdExpZ2h0UG9zaXRpb25bIE1BWF9TUE9UX0xJR0hUUyBdO1xcblxcdHVuaWZvcm0gdmVjMyBzcG90TGlnaHREaXJlY3Rpb25bIE1BWF9TUE9UX0xJR0hUUyBdO1xcblxcdHVuaWZvcm0gZmxvYXQgc3BvdExpZ2h0QW5nbGVDb3NbIE1BWF9TUE9UX0xJR0hUUyBdO1xcblxcdHVuaWZvcm0gZmxvYXQgc3BvdExpZ2h0RXhwb25lbnRbIE1BWF9TUE9UX0xJR0hUUyBdO1xcblxcdHVuaWZvcm0gZmxvYXQgc3BvdExpZ2h0RGlzdGFuY2VbIE1BWF9TUE9UX0xJR0hUUyBdO1xcblxcdHVuaWZvcm0gZmxvYXQgc3BvdExpZ2h0RGVjYXlbIE1BWF9TUE9UX0xJR0hUUyBdO1xcblxcbiNlbmRpZlxcblxcbiNpZiBNQVhfU1BPVF9MSUdIVFMgPiAwIHx8IGRlZmluZWQoIFVTRV9FTlZNQVAgKVxcblxcblxcdHZhcnlpbmcgdmVjMyB2V29ybGRQb3NpdGlvbjtcXG5cXG4jZW5kaWZcXG5cXG52YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcXG5cXG4jaWZuZGVmIEZMQVRfU0hBREVEXFxuXFxuXFx0dmFyeWluZyB2ZWMzIHZOb3JtYWw7XFxuXFxuI2VuZGlmXFxuXCI7XG5USFJFRS5TaGFkZXJDaHVuay5saWdodHNfcGhvbmdfcGFyc192ZXJ0ZXg9XCIjaWYgTUFYX1NQT1RfTElHSFRTID4gMCB8fCBkZWZpbmVkKCBVU0VfRU5WTUFQIClcXG5cXG5cXHR2YXJ5aW5nIHZlYzMgdldvcmxkUG9zaXRpb247XFxuXFxuI2VuZGlmXFxuXFxuI2lmIE1BWF9QT0lOVF9MSUdIVFMgPiAwXFxuXFxuXFx0dW5pZm9ybSB2ZWMzIHBvaW50TGlnaHRQb3NpdGlvblsgTUFYX1BPSU5UX0xJR0hUUyBdO1xcblxcbiNlbmRpZlxcblwiO1RIUkVFLlNoYWRlckNodW5rLmxpZ2h0c19waG9uZ192ZXJ0ZXg9XCIjaWYgTUFYX1NQT1RfTElHSFRTID4gMCB8fCBkZWZpbmVkKCBVU0VfRU5WTUFQIClcXG5cXG5cXHR2V29ybGRQb3NpdGlvbiA9IHdvcmxkUG9zaXRpb24ueHl6O1xcblxcbiNlbmRpZlxcblwiO1RIUkVFLlNoYWRlckNodW5rLmxpbmVhcl90b19nYW1tYV9mcmFnbWVudD1cIlxcblxcdG91dGdvaW5nTGlnaHQgPSBsaW5lYXJUb091dHB1dCggb3V0Z29pbmdMaWdodCApO1xcblwiO1xuVEhSRUUuU2hhZGVyQ2h1bmsubG9nZGVwdGhidWZfZnJhZ21lbnQ9XCIjaWYgZGVmaW5lZChVU0VfTE9HREVQVEhCVUYpICYmIGRlZmluZWQoVVNFX0xPR0RFUFRIQlVGX0VYVClcXG5cXG5cXHRnbF9GcmFnRGVwdGhFWFQgPSBsb2cyKHZGcmFnRGVwdGgpICogbG9nRGVwdGhCdWZGQyAqIDAuNTtcXG5cXG4jZW5kaWZcIjtUSFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PVwiI2lmZGVmIFVTRV9MT0dERVBUSEJVRlxcblxcblxcdHVuaWZvcm0gZmxvYXQgbG9nRGVwdGhCdWZGQztcXG5cXG5cXHQjaWZkZWYgVVNFX0xPR0RFUFRIQlVGX0VYVFxcblxcblxcdFxcdHZhcnlpbmcgZmxvYXQgdkZyYWdEZXB0aDtcXG5cXG5cXHQjZW5kaWZcXG5cXG4jZW5kaWZcXG5cIjtUSFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD1cIiNpZmRlZiBVU0VfTE9HREVQVEhCVUZcXG5cXG5cXHQjaWZkZWYgVVNFX0xPR0RFUFRIQlVGX0VYVFxcblxcblxcdFxcdHZhcnlpbmcgZmxvYXQgdkZyYWdEZXB0aDtcXG5cXG5cXHQjZW5kaWZcXG5cXG5cXHR1bmlmb3JtIGZsb2F0IGxvZ0RlcHRoQnVmRkM7XFxuXFxuI2VuZGlmXCI7XG5USFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl92ZXJ0ZXg9XCIjaWZkZWYgVVNFX0xPR0RFUFRIQlVGXFxuXFxuXFx0Z2xfUG9zaXRpb24ueiA9IGxvZzIobWF4KCBFUFNJTE9OLCBnbF9Qb3NpdGlvbi53ICsgMS4wICkpICogbG9nRGVwdGhCdWZGQztcXG5cXG5cXHQjaWZkZWYgVVNFX0xPR0RFUFRIQlVGX0VYVFxcblxcblxcdFxcdHZGcmFnRGVwdGggPSAxLjAgKyBnbF9Qb3NpdGlvbi53O1xcblxcbiNlbHNlXFxuXFxuXFx0XFx0Z2xfUG9zaXRpb24ueiA9IChnbF9Qb3NpdGlvbi56IC0gMS4wKSAqIGdsX1Bvc2l0aW9uLnc7XFxuXFxuXFx0I2VuZGlmXFxuXFxuI2VuZGlmXCI7VEhSRUUuU2hhZGVyQ2h1bmsubWFwX2ZyYWdtZW50PVwiI2lmZGVmIFVTRV9NQVBcXG5cXG5cXHR2ZWM0IHRleGVsQ29sb3IgPSB0ZXh0dXJlMkQoIG1hcCwgdlV2ICk7XFxuXFxuXFx0dGV4ZWxDb2xvci54eXogPSBpbnB1dFRvTGluZWFyKCB0ZXhlbENvbG9yLnh5eiApO1xcblxcblxcdGRpZmZ1c2VDb2xvciAqPSB0ZXhlbENvbG9yO1xcblxcbiNlbmRpZlxcblwiO1xuVEhSRUUuU2hhZGVyQ2h1bmsubWFwX3BhcnNfZnJhZ21lbnQ9XCIjaWZkZWYgVVNFX01BUFxcblxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIG1hcDtcXG5cXG4jZW5kaWZcIjtUSFJFRS5TaGFkZXJDaHVuay5tYXBfcGFydGljbGVfZnJhZ21lbnQ9XCIjaWZkZWYgVVNFX01BUFxcblxcblxcdGRpZmZ1c2VDb2xvciAqPSB0ZXh0dXJlMkQoIG1hcCwgdmVjMiggZ2xfUG9pbnRDb29yZC54LCAxLjAgLSBnbF9Qb2ludENvb3JkLnkgKSAqIG9mZnNldFJlcGVhdC56dyArIG9mZnNldFJlcGVhdC54eSApO1xcblxcbiNlbmRpZlxcblwiO1RIUkVFLlNoYWRlckNodW5rLm1hcF9wYXJ0aWNsZV9wYXJzX2ZyYWdtZW50PVwiI2lmZGVmIFVTRV9NQVBcXG5cXG5cXHR1bmlmb3JtIHZlYzQgb2Zmc2V0UmVwZWF0O1xcblxcdHVuaWZvcm0gc2FtcGxlcjJEIG1hcDtcXG5cXG4jZW5kaWZcXG5cIjtUSFJFRS5TaGFkZXJDaHVuay5tb3JwaG5vcm1hbF92ZXJ0ZXg9XCIjaWZkZWYgVVNFX01PUlBITk9STUFMU1xcblxcblxcdG9iamVjdE5vcm1hbCArPSAoIG1vcnBoTm9ybWFsMCAtIG5vcm1hbCApICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyAwIF07XFxuXFx0b2JqZWN0Tm9ybWFsICs9ICggbW9ycGhOb3JtYWwxIC0gbm9ybWFsICkgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDEgXTtcXG5cXHRvYmplY3ROb3JtYWwgKz0gKCBtb3JwaE5vcm1hbDIgLSBub3JtYWwgKSAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgMiBdO1xcblxcdG9iamVjdE5vcm1hbCArPSAoIG1vcnBoTm9ybWFsMyAtIG5vcm1hbCApICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyAzIF07XFxuXFxuI2VuZGlmXFxuXCI7XG5USFJFRS5TaGFkZXJDaHVuay5tb3JwaHRhcmdldF9wYXJzX3ZlcnRleD1cIiNpZmRlZiBVU0VfTU9SUEhUQVJHRVRTXFxuXFxuXFx0I2lmbmRlZiBVU0VfTU9SUEhOT1JNQUxTXFxuXFxuXFx0dW5pZm9ybSBmbG9hdCBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDggXTtcXG5cXG5cXHQjZWxzZVxcblxcblxcdHVuaWZvcm0gZmxvYXQgbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyA0IF07XFxuXFxuXFx0I2VuZGlmXFxuXFxuI2VuZGlmXCI7VEhSRUUuU2hhZGVyQ2h1bmsubW9ycGh0YXJnZXRfdmVydGV4PVwiI2lmZGVmIFVTRV9NT1JQSFRBUkdFVFNcXG5cXG5cXHR0cmFuc2Zvcm1lZCArPSAoIG1vcnBoVGFyZ2V0MCAtIHBvc2l0aW9uICkgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDAgXTtcXG5cXHR0cmFuc2Zvcm1lZCArPSAoIG1vcnBoVGFyZ2V0MSAtIHBvc2l0aW9uICkgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDEgXTtcXG5cXHR0cmFuc2Zvcm1lZCArPSAoIG1vcnBoVGFyZ2V0MiAtIHBvc2l0aW9uICkgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDIgXTtcXG5cXHR0cmFuc2Zvcm1lZCArPSAoIG1vcnBoVGFyZ2V0MyAtIHBvc2l0aW9uICkgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDMgXTtcXG5cXG5cXHQjaWZuZGVmIFVTRV9NT1JQSE5PUk1BTFNcXG5cXG5cXHR0cmFuc2Zvcm1lZCArPSAoIG1vcnBoVGFyZ2V0NCAtIHBvc2l0aW9uICkgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDQgXTtcXG5cXHR0cmFuc2Zvcm1lZCArPSAoIG1vcnBoVGFyZ2V0NSAtIHBvc2l0aW9uICkgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDUgXTtcXG5cXHR0cmFuc2Zvcm1lZCArPSAoIG1vcnBoVGFyZ2V0NiAtIHBvc2l0aW9uICkgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDYgXTtcXG5cXHR0cmFuc2Zvcm1lZCArPSAoIG1vcnBoVGFyZ2V0NyAtIHBvc2l0aW9uICkgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDcgXTtcXG5cXG5cXHQjZW5kaWZcXG5cXG4jZW5kaWZcXG5cIjtcblRIUkVFLlNoYWRlckNodW5rLm5vcm1hbF9waG9uZ19mcmFnbWVudD1cIiNpZm5kZWYgRkxBVF9TSEFERURcXG5cXG5cXHR2ZWMzIG5vcm1hbCA9IG5vcm1hbGl6ZSggdk5vcm1hbCApO1xcblxcblxcdCNpZmRlZiBET1VCTEVfU0lERURcXG5cXG5cXHRcXHRub3JtYWwgPSBub3JtYWwgKiAoIC0xLjAgKyAyLjAgKiBmbG9hdCggZ2xfRnJvbnRGYWNpbmcgKSApO1xcblxcblxcdCNlbmRpZlxcblxcbiNlbHNlXFxuXFxuXFx0dmVjMyBmZHggPSBkRmR4KCB2Vmlld1Bvc2l0aW9uICk7XFxuXFx0dmVjMyBmZHkgPSBkRmR5KCB2Vmlld1Bvc2l0aW9uICk7XFxuXFx0dmVjMyBub3JtYWwgPSBub3JtYWxpemUoIGNyb3NzKCBmZHgsIGZkeSApICk7XFxuXFxuI2VuZGlmXFxuXFxuI2lmZGVmIFVTRV9OT1JNQUxNQVBcXG5cXG5cXHRub3JtYWwgPSBwZXJ0dXJiTm9ybWFsMkFyYiggLXZWaWV3UG9zaXRpb24sIG5vcm1hbCApO1xcblxcbiNlbGlmIGRlZmluZWQoIFVTRV9CVU1QTUFQIClcXG5cXG5cXHRub3JtYWwgPSBwZXJ0dXJiTm9ybWFsQXJiKCAtdlZpZXdQb3NpdGlvbiwgbm9ybWFsLCBkSGR4eV9md2QoKSApO1xcblxcbiNlbmRpZlxcblxcblwiO1xuVEhSRUUuU2hhZGVyQ2h1bmsubm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQ9XCIjaWZkZWYgVVNFX05PUk1BTE1BUFxcblxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIG5vcm1hbE1hcDtcXG5cXHR1bmlmb3JtIHZlYzIgbm9ybWFsU2NhbGU7XFxuXFxuXFxuXFx0dmVjMyBwZXJ0dXJiTm9ybWFsMkFyYiggdmVjMyBleWVfcG9zLCB2ZWMzIHN1cmZfbm9ybSApIHtcXG5cXG5cXHRcXHR2ZWMzIHEwID0gZEZkeCggZXllX3Bvcy54eXogKTtcXG5cXHRcXHR2ZWMzIHExID0gZEZkeSggZXllX3Bvcy54eXogKTtcXG5cXHRcXHR2ZWMyIHN0MCA9IGRGZHgoIHZVdi5zdCApO1xcblxcdFxcdHZlYzIgc3QxID0gZEZkeSggdlV2LnN0ICk7XFxuXFxuXFx0XFx0dmVjMyBTID0gbm9ybWFsaXplKCBxMCAqIHN0MS50IC0gcTEgKiBzdDAudCApO1xcblxcdFxcdHZlYzMgVCA9IG5vcm1hbGl6ZSggLXEwICogc3QxLnMgKyBxMSAqIHN0MC5zICk7XFxuXFx0XFx0dmVjMyBOID0gbm9ybWFsaXplKCBzdXJmX25vcm0gKTtcXG5cXG5cXHRcXHR2ZWMzIG1hcE4gPSB0ZXh0dXJlMkQoIG5vcm1hbE1hcCwgdlV2ICkueHl6ICogMi4wIC0gMS4wO1xcblxcdFxcdG1hcE4ueHkgPSBub3JtYWxTY2FsZSAqIG1hcE4ueHk7XFxuXFx0XFx0bWF0MyB0c24gPSBtYXQzKCBTLCBULCBOICk7XFxuXFx0XFx0cmV0dXJuIG5vcm1hbGl6ZSggdHNuICogbWFwTiApO1xcblxcblxcdH1cXG5cXG4jZW5kaWZcXG5cIjtcblRIUkVFLlNoYWRlckNodW5rLnByb2plY3RfdmVydGV4PVwiI2lmZGVmIFVTRV9TS0lOTklOR1xcblxcblxcdHZlYzQgbXZQb3NpdGlvbiA9IG1vZGVsVmlld01hdHJpeCAqIHNraW5uZWQ7XFxuXFxuI2Vsc2VcXG5cXG5cXHR2ZWM0IG12UG9zaXRpb24gPSBtb2RlbFZpZXdNYXRyaXggKiB2ZWM0KCB0cmFuc2Zvcm1lZCwgMS4wICk7XFxuXFxuI2VuZGlmXFxuXFxuZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbXZQb3NpdGlvbjtcXG5cIjtUSFJFRS5TaGFkZXJDaHVuay5zaGFkb3dtYXBfZnJhZ21lbnQ9XCIjaWZkZWYgVVNFX1NIQURPV01BUFxcblxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE1BWF9TSEFET1dTOyBpICsrICkge1xcblxcblxcdFxcdGZsb2F0IHRleGVsU2l6ZVkgPSAgMS4wIC8gc2hhZG93TWFwU2l6ZVsgaSBdLnk7XFxuXFxuXFx0XFx0ZmxvYXQgc2hhZG93ID0gMC4wO1xcblxcbiNpZiBkZWZpbmVkKCBQT0lOVF9MSUdIVF9TSEFET1dTIClcXG5cXG5cXHRcXHRib29sIGlzUG9pbnRMaWdodCA9IHNoYWRvd0RhcmtuZXNzWyBpIF0gPCAwLjA7XFxuXFxuXFx0XFx0aWYgKCBpc1BvaW50TGlnaHQgKSB7XFxuXFxuXFx0XFx0XFx0ZmxvYXQgcmVhbFNoYWRvd0RhcmtuZXNzID0gYWJzKCBzaGFkb3dEYXJrbmVzc1sgaSBdICk7XFxuXFxuXFx0XFx0XFx0dmVjMyBsaWdodFRvUG9zaXRpb24gPSB2U2hhZG93Q29vcmRbIGkgXS54eXo7XFxuXFxuXFx0I2lmIGRlZmluZWQoIFNIQURPV01BUF9UWVBFX1BDRiApIHx8IGRlZmluZWQoIFNIQURPV01BUF9UWVBFX1BDRl9TT0ZUIClcXG5cXG5cXHRcXHRcXHR2ZWMzIGJkM0QgPSBub3JtYWxpemUoIGxpZ2h0VG9Qb3NpdGlvbiApO1xcblxcdFxcdFxcdGZsb2F0IGRwID0gbGVuZ3RoKCBsaWdodFRvUG9zaXRpb24gKTtcXG5cXG5cXHRcXHRcXHRhZGp1c3RTaGFkb3dWYWx1ZTFLKCBkcCwgdGV4dHVyZTJEKCBzaGFkb3dNYXBbIGkgXSwgY3ViZVRvVVYoIGJkM0QsIHRleGVsU2l6ZVkgKSApLCBzaGFkb3dCaWFzWyBpIF0sIHNoYWRvdyApO1xcblxcblxcblxcdCNpZiBkZWZpbmVkKCBTSEFET1dNQVBfVFlQRV9QQ0YgKVxcblxcdFxcdFxcdGNvbnN0IGZsb2F0IERyID0gMS4yNTtcXG5cXHQjZWxpZiBkZWZpbmVkKCBTSEFET1dNQVBfVFlQRV9QQ0ZfU09GVCApXFxuXFx0XFx0XFx0Y29uc3QgZmxvYXQgRHIgPSAyLjI1O1xcblxcdCNlbmRpZlxcblxcblxcdFxcdFxcdGZsb2F0IG9zID0gRHIgKiAgMi4wICogdGV4ZWxTaXplWTtcXG5cXG5cXHRcXHRcXHRjb25zdCB2ZWMzIEdzZCA9IHZlYzMoIC0gMSwgMCwgMSApO1xcblxcblxcdFxcdFxcdGFkanVzdFNoYWRvd1ZhbHVlMUsoIGRwLCB0ZXh0dXJlMkQoIHNoYWRvd01hcFsgaSBdLCBjdWJlVG9VViggYmQzRCArIEdzZC56enogKiBvcywgdGV4ZWxTaXplWSApICksIHNoYWRvd0JpYXNbIGkgXSwgc2hhZG93ICk7XFxuXFx0XFx0XFx0YWRqdXN0U2hhZG93VmFsdWUxSyggZHAsIHRleHR1cmUyRCggc2hhZG93TWFwWyBpIF0sIGN1YmVUb1VWKCBiZDNEICsgR3NkLnp4eiAqIG9zLCB0ZXhlbFNpemVZICkgKSwgc2hhZG93Qmlhc1sgaSBdLCBzaGFkb3cgKTtcXG5cXHRcXHRcXHRhZGp1c3RTaGFkb3dWYWx1ZTFLKCBkcCwgdGV4dHVyZTJEKCBzaGFkb3dNYXBbIGkgXSwgY3ViZVRvVVYoIGJkM0QgKyBHc2QueHh6ICogb3MsIHRleGVsU2l6ZVkgKSApLCBzaGFkb3dCaWFzWyBpIF0sIHNoYWRvdyApO1xcblxcdFxcdFxcdGFkanVzdFNoYWRvd1ZhbHVlMUsoIGRwLCB0ZXh0dXJlMkQoIHNoYWRvd01hcFsgaSBdLCBjdWJlVG9VViggYmQzRCArIEdzZC54enogKiBvcywgdGV4ZWxTaXplWSApICksIHNoYWRvd0JpYXNbIGkgXSwgc2hhZG93ICk7XFxuXFx0XFx0XFx0YWRqdXN0U2hhZG93VmFsdWUxSyggZHAsIHRleHR1cmUyRCggc2hhZG93TWFwWyBpIF0sIGN1YmVUb1VWKCBiZDNEICsgR3NkLnp6eCAqIG9zLCB0ZXhlbFNpemVZICkgKSwgc2hhZG93Qmlhc1sgaSBdLCBzaGFkb3cgKTtcXG5cXHRcXHRcXHRhZGp1c3RTaGFkb3dWYWx1ZTFLKCBkcCwgdGV4dHVyZTJEKCBzaGFkb3dNYXBbIGkgXSwgY3ViZVRvVVYoIGJkM0QgKyBHc2Quenh4ICogb3MsIHRleGVsU2l6ZVkgKSApLCBzaGFkb3dCaWFzWyBpIF0sIHNoYWRvdyApO1xcblxcdFxcdFxcdGFkanVzdFNoYWRvd1ZhbHVlMUsoIGRwLCB0ZXh0dXJlMkQoIHNoYWRvd01hcFsgaSBdLCBjdWJlVG9VViggYmQzRCArIEdzZC54eHggKiBvcywgdGV4ZWxTaXplWSApICksIHNoYWRvd0JpYXNbIGkgXSwgc2hhZG93ICk7XFxuXFx0XFx0XFx0YWRqdXN0U2hhZG93VmFsdWUxSyggZHAsIHRleHR1cmUyRCggc2hhZG93TWFwWyBpIF0sIGN1YmVUb1VWKCBiZDNEICsgR3NkLnh6eCAqIG9zLCB0ZXhlbFNpemVZICkgKSwgc2hhZG93Qmlhc1sgaSBdLCBzaGFkb3cgKTtcXG5cXHRcXHRcXHRhZGp1c3RTaGFkb3dWYWx1ZTFLKCBkcCwgdGV4dHVyZTJEKCBzaGFkb3dNYXBbIGkgXSwgY3ViZVRvVVYoIGJkM0QgKyBHc2Quenp5ICogb3MsIHRleGVsU2l6ZVkgKSApLCBzaGFkb3dCaWFzWyBpIF0sIHNoYWRvdyApO1xcblxcdFxcdFxcdGFkanVzdFNoYWRvd1ZhbHVlMUsoIGRwLCB0ZXh0dXJlMkQoIHNoYWRvd01hcFsgaSBdLCBjdWJlVG9VViggYmQzRCArIEdzZC56eHkgKiBvcywgdGV4ZWxTaXplWSApICksIHNoYWRvd0JpYXNbIGkgXSwgc2hhZG93ICk7XFxuXFxuXFx0XFx0XFx0YWRqdXN0U2hhZG93VmFsdWUxSyggZHAsIHRleHR1cmUyRCggc2hhZG93TWFwWyBpIF0sIGN1YmVUb1VWKCBiZDNEICsgR3NkLnh4eSAqIG9zLCB0ZXhlbFNpemVZICkgKSwgc2hhZG93Qmlhc1sgaSBdLCBzaGFkb3cgKTtcXG5cXHRcXHRcXHRhZGp1c3RTaGFkb3dWYWx1ZTFLKCBkcCwgdGV4dHVyZTJEKCBzaGFkb3dNYXBbIGkgXSwgY3ViZVRvVVYoIGJkM0QgKyBHc2QueHp5ICogb3MsIHRleGVsU2l6ZVkgKSApLCBzaGFkb3dCaWFzWyBpIF0sIHNoYWRvdyApO1xcblxcdFxcdFxcdGFkanVzdFNoYWRvd1ZhbHVlMUsoIGRwLCB0ZXh0dXJlMkQoIHNoYWRvd01hcFsgaSBdLCBjdWJlVG9VViggYmQzRCArIEdzZC56eXogKiBvcywgdGV4ZWxTaXplWSApICksIHNoYWRvd0JpYXNbIGkgXSwgc2hhZG93ICk7XFxuXFx0XFx0XFx0YWRqdXN0U2hhZG93VmFsdWUxSyggZHAsIHRleHR1cmUyRCggc2hhZG93TWFwWyBpIF0sIGN1YmVUb1VWKCBiZDNEICsgR3NkLnh5eiAqIG9zLCB0ZXhlbFNpemVZICkgKSwgc2hhZG93Qmlhc1sgaSBdLCBzaGFkb3cgKTtcXG5cXHRcXHRcXHRhZGp1c3RTaGFkb3dWYWx1ZTFLKCBkcCwgdGV4dHVyZTJEKCBzaGFkb3dNYXBbIGkgXSwgY3ViZVRvVVYoIGJkM0QgKyBHc2Quenl4ICogb3MsIHRleGVsU2l6ZVkgKSApLCBzaGFkb3dCaWFzWyBpIF0sIHNoYWRvdyApO1xcblxcdFxcdFxcdGFkanVzdFNoYWRvd1ZhbHVlMUsoIGRwLCB0ZXh0dXJlMkQoIHNoYWRvd01hcFsgaSBdLCBjdWJlVG9VViggYmQzRCArIEdzZC54eXggKiBvcywgdGV4ZWxTaXplWSApICksIHNoYWRvd0JpYXNbIGkgXSwgc2hhZG93ICk7XFxuXFx0XFx0XFx0YWRqdXN0U2hhZG93VmFsdWUxSyggZHAsIHRleHR1cmUyRCggc2hhZG93TWFwWyBpIF0sIGN1YmVUb1VWKCBiZDNEICsgR3NkLnl6eiAqIG9zLCB0ZXhlbFNpemVZICkgKSwgc2hhZG93Qmlhc1sgaSBdLCBzaGFkb3cgKTtcXG5cXHRcXHRcXHRhZGp1c3RTaGFkb3dWYWx1ZTFLKCBkcCwgdGV4dHVyZTJEKCBzaGFkb3dNYXBbIGkgXSwgY3ViZVRvVVYoIGJkM0QgKyBHc2QueXh6ICogb3MsIHRleGVsU2l6ZVkgKSApLCBzaGFkb3dCaWFzWyBpIF0sIHNoYWRvdyApO1xcblxcdFxcdFxcdGFkanVzdFNoYWRvd1ZhbHVlMUsoIGRwLCB0ZXh0dXJlMkQoIHNoYWRvd01hcFsgaSBdLCBjdWJlVG9VViggYmQzRCArIEdzZC55eHggKiBvcywgdGV4ZWxTaXplWSApICksIHNoYWRvd0JpYXNbIGkgXSwgc2hhZG93ICk7XFxuXFx0XFx0XFx0YWRqdXN0U2hhZG93VmFsdWUxSyggZHAsIHRleHR1cmUyRCggc2hhZG93TWFwWyBpIF0sIGN1YmVUb1VWKCBiZDNEICsgR3NkLnl6eCAqIG9zLCB0ZXhlbFNpemVZICkgKSwgc2hhZG93Qmlhc1sgaSBdLCBzaGFkb3cgKTtcXG5cXG5cXHRcXHRcXHRzaGFkb3cgKj0gcmVhbFNoYWRvd0RhcmtuZXNzICogKCAxLjAgLyAyMS4wICk7XFxuXFxuXFx0I2Vsc2UgXFxuXFx0XFx0XFx0dmVjMyBiZDNEID0gbm9ybWFsaXplKCBsaWdodFRvUG9zaXRpb24gKTtcXG5cXHRcXHRcXHRmbG9hdCBkcCA9IGxlbmd0aCggbGlnaHRUb1Bvc2l0aW9uICk7XFxuXFxuXFx0XFx0XFx0YWRqdXN0U2hhZG93VmFsdWUxSyggZHAsIHRleHR1cmUyRCggc2hhZG93TWFwWyBpIF0sIGN1YmVUb1VWKCBiZDNELCB0ZXhlbFNpemVZICkgKSwgc2hhZG93Qmlhc1sgaSBdLCBzaGFkb3cgKTtcXG5cXG5cXHRcXHRcXHRzaGFkb3cgKj0gcmVhbFNoYWRvd0RhcmtuZXNzO1xcblxcblxcdCNlbmRpZlxcblxcblxcdFxcdH0gZWxzZSB7XFxuXFxuI2VuZGlmIFxcblxcdFxcdFxcdGZsb2F0IHRleGVsU2l6ZVggPSAgMS4wIC8gc2hhZG93TWFwU2l6ZVsgaSBdLng7XFxuXFxuXFx0XFx0XFx0dmVjMyBzaGFkb3dDb29yZCA9IHZTaGFkb3dDb29yZFsgaSBdLnh5eiAvIHZTaGFkb3dDb29yZFsgaSBdLnc7XFxuXFxuXFxuXFx0XFx0XFx0YnZlYzQgaW5GcnVzdHVtVmVjID0gYnZlYzQgKCBzaGFkb3dDb29yZC54ID49IDAuMCwgc2hhZG93Q29vcmQueCA8PSAxLjAsIHNoYWRvd0Nvb3JkLnkgPj0gMC4wLCBzaGFkb3dDb29yZC55IDw9IDEuMCApO1xcblxcdFxcdFxcdGJvb2wgaW5GcnVzdHVtID0gYWxsKCBpbkZydXN0dW1WZWMgKTtcXG5cXG5cXHRcXHRcXHRidmVjMiBmcnVzdHVtVGVzdFZlYyA9IGJ2ZWMyKCBpbkZydXN0dW0sIHNoYWRvd0Nvb3JkLnogPD0gMS4wICk7XFxuXFxuXFx0XFx0XFx0Ym9vbCBmcnVzdHVtVGVzdCA9IGFsbCggZnJ1c3R1bVRlc3RWZWMgKTtcXG5cXG5cXHRcXHRcXHRpZiAoIGZydXN0dW1UZXN0ICkge1xcblxcblxcdCNpZiBkZWZpbmVkKCBTSEFET1dNQVBfVFlQRV9QQ0YgKVxcblxcblxcblxcdFxcdFxcdFxcdC8qXFxuXFx0XFx0XFx0XFx0XFx0Zm9yICggZmxvYXQgeSA9IC0xLjI1OyB5IDw9IDEuMjU7IHkgKz0gMS4yNSApXFxuXFx0XFx0XFx0XFx0XFx0XFx0Zm9yICggZmxvYXQgeCA9IC0xLjI1OyB4IDw9IDEuMjU7IHggKz0gMS4yNSApIHtcXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHR2ZWM0IHJnYmFEZXB0aCA9IHRleHR1cmUyRCggc2hhZG93TWFwWyBpIF0sIHZlYzIoIHggKiB4UGl4ZWxPZmZzZXQsIHkgKiB5UGl4ZWxPZmZzZXQgKSArIHNoYWRvd0Nvb3JkLnh5ICk7XFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0ZmxvYXQgZkRlcHRoID0gdW5wYWNrRGVwdGgoIHJnYmFEZXB0aCApO1xcblxcdFxcdFxcdFxcdFxcdFxcdFxcdGlmICggZkRlcHRoIDwgc2hhZG93Q29vcmQueiApXFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0c2hhZG93ICs9IDEuMDtcXG5cXHRcXHRcXHRcXHRcXHR9XFxuXFx0XFx0XFx0XFx0XFx0c2hhZG93IC89IDkuMDtcXG5cXHRcXHRcXHRcXHQqL1xcblxcblxcdFxcdFxcdFxcdHNoYWRvd0Nvb3JkLnogKz0gc2hhZG93Qmlhc1sgaSBdO1xcblxcblxcdFxcdFxcdFxcdGNvbnN0IGZsb2F0IFNoYWRvd0RlbHRhID0gMS4wIC8gOS4wO1xcblxcblxcdFxcdFxcdFxcdGZsb2F0IHhQaXhlbE9mZnNldCA9IHRleGVsU2l6ZVg7XFxuXFx0XFx0XFx0XFx0ZmxvYXQgeVBpeGVsT2Zmc2V0ID0gdGV4ZWxTaXplWTtcXG5cXG5cXHRcXHRcXHRcXHRmbG9hdCBkeDAgPSAtIDEuMjUgKiB4UGl4ZWxPZmZzZXQ7XFxuXFx0XFx0XFx0XFx0ZmxvYXQgZHkwID0gLSAxLjI1ICogeVBpeGVsT2Zmc2V0O1xcblxcdFxcdFxcdFxcdGZsb2F0IGR4MSA9IDEuMjUgKiB4UGl4ZWxPZmZzZXQ7XFxuXFx0XFx0XFx0XFx0ZmxvYXQgZHkxID0gMS4yNSAqIHlQaXhlbE9mZnNldDtcXG5cXG5cXHRcXHRcXHRcXHRmbG9hdCBmRGVwdGggPSB1bnBhY2tEZXB0aCggdGV4dHVyZTJEKCBzaGFkb3dNYXBbIGkgXSwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDAsIGR5MCApICkgKTtcXG5cXHRcXHRcXHRcXHRpZiAoIGZEZXB0aCA8IHNoYWRvd0Nvb3JkLnogKSBzaGFkb3cgKz0gU2hhZG93RGVsdGE7XFxuXFxuXFx0XFx0XFx0XFx0ZkRlcHRoID0gdW5wYWNrRGVwdGgoIHRleHR1cmUyRCggc2hhZG93TWFwWyBpIF0sIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggMC4wLCBkeTAgKSApICk7XFxuXFx0XFx0XFx0XFx0aWYgKCBmRGVwdGggPCBzaGFkb3dDb29yZC56ICkgc2hhZG93ICs9IFNoYWRvd0RlbHRhO1xcblxcblxcdFxcdFxcdFxcdGZEZXB0aCA9IHVucGFja0RlcHRoKCB0ZXh0dXJlMkQoIHNoYWRvd01hcFsgaSBdLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MSwgZHkwICkgKSApO1xcblxcdFxcdFxcdFxcdGlmICggZkRlcHRoIDwgc2hhZG93Q29vcmQueiApIHNoYWRvdyArPSBTaGFkb3dEZWx0YTtcXG5cXG5cXHRcXHRcXHRcXHRmRGVwdGggPSB1bnBhY2tEZXB0aCggdGV4dHVyZTJEKCBzaGFkb3dNYXBbIGkgXSwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDAsIDAuMCApICkgKTtcXG5cXHRcXHRcXHRcXHRpZiAoIGZEZXB0aCA8IHNoYWRvd0Nvb3JkLnogKSBzaGFkb3cgKz0gU2hhZG93RGVsdGE7XFxuXFxuXFx0XFx0XFx0XFx0ZkRlcHRoID0gdW5wYWNrRGVwdGgoIHRleHR1cmUyRCggc2hhZG93TWFwWyBpIF0sIHNoYWRvd0Nvb3JkLnh5ICkgKTtcXG5cXHRcXHRcXHRcXHRpZiAoIGZEZXB0aCA8IHNoYWRvd0Nvb3JkLnogKSBzaGFkb3cgKz0gU2hhZG93RGVsdGE7XFxuXFxuXFx0XFx0XFx0XFx0ZkRlcHRoID0gdW5wYWNrRGVwdGgoIHRleHR1cmUyRCggc2hhZG93TWFwWyBpIF0sIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgxLCAwLjAgKSApICk7XFxuXFx0XFx0XFx0XFx0aWYgKCBmRGVwdGggPCBzaGFkb3dDb29yZC56ICkgc2hhZG93ICs9IFNoYWRvd0RlbHRhO1xcblxcblxcdFxcdFxcdFxcdGZEZXB0aCA9IHVucGFja0RlcHRoKCB0ZXh0dXJlMkQoIHNoYWRvd01hcFsgaSBdLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MCwgZHkxICkgKSApO1xcblxcdFxcdFxcdFxcdGlmICggZkRlcHRoIDwgc2hhZG93Q29vcmQueiApIHNoYWRvdyArPSBTaGFkb3dEZWx0YTtcXG5cXG5cXHRcXHRcXHRcXHRmRGVwdGggPSB1bnBhY2tEZXB0aCggdGV4dHVyZTJEKCBzaGFkb3dNYXBbIGkgXSwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCAwLjAsIGR5MSApICkgKTtcXG5cXHRcXHRcXHRcXHRpZiAoIGZEZXB0aCA8IHNoYWRvd0Nvb3JkLnogKSBzaGFkb3cgKz0gU2hhZG93RGVsdGE7XFxuXFxuXFx0XFx0XFx0XFx0ZkRlcHRoID0gdW5wYWNrRGVwdGgoIHRleHR1cmUyRCggc2hhZG93TWFwWyBpIF0sIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgxLCBkeTEgKSApICk7XFxuXFx0XFx0XFx0XFx0aWYgKCBmRGVwdGggPCBzaGFkb3dDb29yZC56ICkgc2hhZG93ICs9IFNoYWRvd0RlbHRhO1xcblxcblxcdFxcdFxcdFxcdHNoYWRvdyAqPSBzaGFkb3dEYXJrbmVzc1sgaSBdO1xcblxcblxcdCNlbGlmIGRlZmluZWQoIFNIQURPV01BUF9UWVBFX1BDRl9TT0ZUIClcXG5cXG5cXG5cXHRcXHRcXHRcXHRzaGFkb3dDb29yZC56ICs9IHNoYWRvd0JpYXNbIGkgXTtcXG5cXG5cXHRcXHRcXHRcXHRmbG9hdCB4UGl4ZWxPZmZzZXQgPSB0ZXhlbFNpemVYO1xcblxcdFxcdFxcdFxcdGZsb2F0IHlQaXhlbE9mZnNldCA9IHRleGVsU2l6ZVk7XFxuXFxuXFx0XFx0XFx0XFx0ZmxvYXQgZHgwID0gLSAxLjAgKiB4UGl4ZWxPZmZzZXQ7XFxuXFx0XFx0XFx0XFx0ZmxvYXQgZHkwID0gLSAxLjAgKiB5UGl4ZWxPZmZzZXQ7XFxuXFx0XFx0XFx0XFx0ZmxvYXQgZHgxID0gMS4wICogeFBpeGVsT2Zmc2V0O1xcblxcdFxcdFxcdFxcdGZsb2F0IGR5MSA9IDEuMCAqIHlQaXhlbE9mZnNldDtcXG5cXG5cXHRcXHRcXHRcXHRtYXQzIHNoYWRvd0tlcm5lbDtcXG5cXHRcXHRcXHRcXHRtYXQzIGRlcHRoS2VybmVsO1xcblxcblxcdFxcdFxcdFxcdGRlcHRoS2VybmVsWyAwIF1bIDAgXSA9IHVucGFja0RlcHRoKCB0ZXh0dXJlMkQoIHNoYWRvd01hcFsgaSBdLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MCwgZHkwICkgKSApO1xcblxcdFxcdFxcdFxcdGRlcHRoS2VybmVsWyAwIF1bIDEgXSA9IHVucGFja0RlcHRoKCB0ZXh0dXJlMkQoIHNoYWRvd01hcFsgaSBdLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MCwgMC4wICkgKSApO1xcblxcdFxcdFxcdFxcdGRlcHRoS2VybmVsWyAwIF1bIDIgXSA9IHVucGFja0RlcHRoKCB0ZXh0dXJlMkQoIHNoYWRvd01hcFsgaSBdLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MCwgZHkxICkgKSApO1xcblxcdFxcdFxcdFxcdGRlcHRoS2VybmVsWyAxIF1bIDAgXSA9IHVucGFja0RlcHRoKCB0ZXh0dXJlMkQoIHNoYWRvd01hcFsgaSBdLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIDAuMCwgZHkwICkgKSApO1xcblxcdFxcdFxcdFxcdGRlcHRoS2VybmVsWyAxIF1bIDEgXSA9IHVucGFja0RlcHRoKCB0ZXh0dXJlMkQoIHNoYWRvd01hcFsgaSBdLCBzaGFkb3dDb29yZC54eSApICk7XFxuXFx0XFx0XFx0XFx0ZGVwdGhLZXJuZWxbIDEgXVsgMiBdID0gdW5wYWNrRGVwdGgoIHRleHR1cmUyRCggc2hhZG93TWFwWyBpIF0sIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggMC4wLCBkeTEgKSApICk7XFxuXFx0XFx0XFx0XFx0ZGVwdGhLZXJuZWxbIDIgXVsgMCBdID0gdW5wYWNrRGVwdGgoIHRleHR1cmUyRCggc2hhZG93TWFwWyBpIF0sIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgxLCBkeTAgKSApICk7XFxuXFx0XFx0XFx0XFx0ZGVwdGhLZXJuZWxbIDIgXVsgMSBdID0gdW5wYWNrRGVwdGgoIHRleHR1cmUyRCggc2hhZG93TWFwWyBpIF0sIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgxLCAwLjAgKSApICk7XFxuXFx0XFx0XFx0XFx0ZGVwdGhLZXJuZWxbIDIgXVsgMiBdID0gdW5wYWNrRGVwdGgoIHRleHR1cmUyRCggc2hhZG93TWFwWyBpIF0sIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgxLCBkeTEgKSApICk7XFxuXFxuXFx0XFx0XFx0XFx0dmVjMyBzaGFkb3daID0gdmVjMyggc2hhZG93Q29vcmQueiApO1xcblxcdFxcdFxcdFxcdHNoYWRvd0tlcm5lbFsgMCBdID0gdmVjMyggbGVzc1RoYW4oIGRlcHRoS2VybmVsWyAwIF0sIHNoYWRvd1ogKSApO1xcblxcdFxcdFxcdFxcdHNoYWRvd0tlcm5lbFsgMCBdICo9IHZlYzMoIDAuMjUgKTtcXG5cXG5cXHRcXHRcXHRcXHRzaGFkb3dLZXJuZWxbIDEgXSA9IHZlYzMoIGxlc3NUaGFuKCBkZXB0aEtlcm5lbFsgMSBdLCBzaGFkb3daICkgKTtcXG5cXHRcXHRcXHRcXHRzaGFkb3dLZXJuZWxbIDEgXSAqPSB2ZWMzKCAwLjI1ICk7XFxuXFxuXFx0XFx0XFx0XFx0c2hhZG93S2VybmVsWyAyIF0gPSB2ZWMzKCBsZXNzVGhhbiggZGVwdGhLZXJuZWxbIDIgXSwgc2hhZG93WiApICk7XFxuXFx0XFx0XFx0XFx0c2hhZG93S2VybmVsWyAyIF0gKj0gdmVjMyggMC4yNSApO1xcblxcblxcdFxcdFxcdFxcdHZlYzIgZnJhY3Rpb25hbENvb3JkID0gMS4wIC0gZnJhY3QoIHNoYWRvd0Nvb3JkLnh5ICogc2hhZG93TWFwU2l6ZVsgaSBdLnh5ICk7XFxuXFxuXFx0XFx0XFx0XFx0c2hhZG93S2VybmVsWyAwIF0gPSBtaXgoIHNoYWRvd0tlcm5lbFsgMSBdLCBzaGFkb3dLZXJuZWxbIDAgXSwgZnJhY3Rpb25hbENvb3JkLnggKTtcXG5cXHRcXHRcXHRcXHRzaGFkb3dLZXJuZWxbIDEgXSA9IG1peCggc2hhZG93S2VybmVsWyAyIF0sIHNoYWRvd0tlcm5lbFsgMSBdLCBmcmFjdGlvbmFsQ29vcmQueCApO1xcblxcblxcdFxcdFxcdFxcdHZlYzQgc2hhZG93VmFsdWVzO1xcblxcdFxcdFxcdFxcdHNoYWRvd1ZhbHVlcy54ID0gbWl4KCBzaGFkb3dLZXJuZWxbIDAgXVsgMSBdLCBzaGFkb3dLZXJuZWxbIDAgXVsgMCBdLCBmcmFjdGlvbmFsQ29vcmQueSApO1xcblxcdFxcdFxcdFxcdHNoYWRvd1ZhbHVlcy55ID0gbWl4KCBzaGFkb3dLZXJuZWxbIDAgXVsgMiBdLCBzaGFkb3dLZXJuZWxbIDAgXVsgMSBdLCBmcmFjdGlvbmFsQ29vcmQueSApO1xcblxcdFxcdFxcdFxcdHNoYWRvd1ZhbHVlcy56ID0gbWl4KCBzaGFkb3dLZXJuZWxbIDEgXVsgMSBdLCBzaGFkb3dLZXJuZWxbIDEgXVsgMCBdLCBmcmFjdGlvbmFsQ29vcmQueSApO1xcblxcdFxcdFxcdFxcdHNoYWRvd1ZhbHVlcy53ID0gbWl4KCBzaGFkb3dLZXJuZWxbIDEgXVsgMiBdLCBzaGFkb3dLZXJuZWxbIDEgXVsgMSBdLCBmcmFjdGlvbmFsQ29vcmQueSApO1xcblxcblxcdFxcdFxcdFxcdHNoYWRvdyA9IGRvdCggc2hhZG93VmFsdWVzLCB2ZWM0KCAxLjAgKSApICogc2hhZG93RGFya25lc3NbIGkgXTtcXG5cXG5cXHQjZWxzZSBcXG5cXHRcXHRcXHRcXHRzaGFkb3dDb29yZC56ICs9IHNoYWRvd0JpYXNbIGkgXTtcXG5cXG5cXHRcXHRcXHRcXHR2ZWM0IHJnYmFEZXB0aCA9IHRleHR1cmUyRCggc2hhZG93TWFwWyBpIF0sIHNoYWRvd0Nvb3JkLnh5ICk7XFxuXFx0XFx0XFx0XFx0ZmxvYXQgZkRlcHRoID0gdW5wYWNrRGVwdGgoIHJnYmFEZXB0aCApO1xcblxcblxcdFxcdFxcdFxcdGlmICggZkRlcHRoIDwgc2hhZG93Q29vcmQueiApXFxuXFx0XFx0XFx0XFx0XFx0c2hhZG93ID0gc2hhZG93RGFya25lc3NbIGkgXTtcXG5cXG5cXHQjZW5kaWZcXG5cXG5cXHRcXHRcXHR9XFxuXFxuI2lmZGVmIFNIQURPV01BUF9ERUJVR1xcblxcblxcdFxcdFxcdGlmICggaW5GcnVzdHVtICkge1xcblxcblxcdFxcdFxcdFxcdGlmICggaSA9PSAwICkge1xcblxcblxcdFxcdFxcdFxcdFxcdG91dGdvaW5nTGlnaHQgKj0gdmVjMyggMS4wLCAwLjUsIDAuMCApO1xcblxcblxcdFxcdFxcdFxcdH0gZWxzZSBpZiAoIGkgPT0gMSApIHtcXG5cXG5cXHRcXHRcXHRcXHRcXHRvdXRnb2luZ0xpZ2h0ICo9IHZlYzMoIDAuMCwgMS4wLCAwLjggKTtcXG5cXG5cXHRcXHRcXHRcXHR9IGVsc2Uge1xcblxcblxcdFxcdFxcdFxcdFxcdG91dGdvaW5nTGlnaHQgKj0gdmVjMyggMC4wLCAwLjUsIDEuMCApO1xcblxcblxcdFxcdFxcdFxcdH1cXG5cXG5cXHRcXHRcXHR9XFxuXFxuI2VuZGlmXFxuXFxuI2lmIGRlZmluZWQoIFBPSU5UX0xJR0hUX1NIQURPV1MgKVxcblxcblxcdFxcdH1cXG5cXG4jZW5kaWZcXG5cXG5cXHRcXHRzaGFkb3dNYXNrID0gc2hhZG93TWFzayAqIHZlYzMoIDEuMCAtIHNoYWRvdyApO1xcblxcblxcdH1cXG5cXG4jZW5kaWZcXG5cIjtcblRIUkVFLlNoYWRlckNodW5rLnNoYWRvd21hcF9wYXJzX2ZyYWdtZW50PVwiI2lmZGVmIFVTRV9TSEFET1dNQVBcXG5cXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBzaGFkb3dNYXBbIE1BWF9TSEFET1dTIF07XFxuXFx0dW5pZm9ybSB2ZWMyIHNoYWRvd01hcFNpemVbIE1BWF9TSEFET1dTIF07XFxuXFxuXFx0dW5pZm9ybSBmbG9hdCBzaGFkb3dEYXJrbmVzc1sgTUFYX1NIQURPV1MgXTtcXG5cXHR1bmlmb3JtIGZsb2F0IHNoYWRvd0JpYXNbIE1BWF9TSEFET1dTIF07XFxuXFxuXFx0dmFyeWluZyB2ZWM0IHZTaGFkb3dDb29yZFsgTUFYX1NIQURPV1MgXTtcXG5cXG5cXHRmbG9hdCB1bnBhY2tEZXB0aCggY29uc3QgaW4gdmVjNCByZ2JhX2RlcHRoICkge1xcblxcblxcdFxcdGNvbnN0IHZlYzQgYml0X3NoaWZ0ID0gdmVjNCggMS4wIC8gKCAyNTYuMCAqIDI1Ni4wICogMjU2LjAgKSwgMS4wIC8gKCAyNTYuMCAqIDI1Ni4wICksIDEuMCAvIDI1Ni4wLCAxLjAgKTtcXG5cXHRcXHRmbG9hdCBkZXB0aCA9IGRvdCggcmdiYV9kZXB0aCwgYml0X3NoaWZ0ICk7XFxuXFx0XFx0cmV0dXJuIGRlcHRoO1xcblxcblxcdH1cXG5cXG5cXHQjaWYgZGVmaW5lZChQT0lOVF9MSUdIVF9TSEFET1dTKVxcblxcblxcblxcdFxcdHZvaWQgYWRqdXN0U2hhZG93VmFsdWUxSyggY29uc3QgZmxvYXQgdGVzdERlcHRoLCBjb25zdCB2ZWM0IHRleHR1cmVEYXRhLCBjb25zdCBmbG9hdCBiaWFzLCBpbm91dCBmbG9hdCBzaGFkb3dWYWx1ZSApIHtcXG5cXG5cXHRcXHRcXHRjb25zdCB2ZWM0IGJpdFNoID0gdmVjNCggMS4wIC8gKCAyNTYuMCAqIDI1Ni4wICogMjU2LjAgKSwgMS4wIC8gKCAyNTYuMCAqIDI1Ni4wICksIDEuMCAvIDI1Ni4wLCAxLjAgKTtcXG5cXHRcXHRcXHRpZiAoIHRlc3REZXB0aCA+PSBkb3QoIHRleHR1cmVEYXRhLCBiaXRTaCApICogMTAwMC4wICsgYmlhcyApXFxuXFx0XFx0XFx0XFx0c2hhZG93VmFsdWUgKz0gMS4wO1xcblxcblxcdFxcdH1cXG5cXG5cXG5cXHRcXHR2ZWMyIGN1YmVUb1VWKCB2ZWMzIHYsIGZsb2F0IHRleGVsU2l6ZVkgKSB7XFxuXFxuXFxuXFx0XFx0XFx0dmVjMyBhYnNWID0gYWJzKCB2ICk7XFxuXFxuXFxuXFx0XFx0XFx0ZmxvYXQgc2NhbGVUb0N1YmUgPSAxLjAgLyBtYXgoIGFic1YueCwgbWF4KCBhYnNWLnksIGFic1YueiApICk7XFxuXFx0XFx0XFx0YWJzViAqPSBzY2FsZVRvQ3ViZTtcXG5cXG5cXG5cXHRcXHRcXHR2ICo9IHNjYWxlVG9DdWJlICogKCAxLjAgLSAyLjAgKiB0ZXhlbFNpemVZICk7XFxuXFxuXFxuXFxuXFx0XFx0XFx0dmVjMiBwbGFuYXIgPSB2Lnh5O1xcblxcblxcdFxcdFxcdGZsb2F0IGFsbW9zdEFUZXhlbCA9IDEuNSAqIHRleGVsU2l6ZVk7XFxuXFx0XFx0XFx0ZmxvYXQgYWxtb3N0T25lID0gMS4wIC0gYWxtb3N0QVRleGVsO1xcblxcblxcdFxcdFxcdGlmICggYWJzVi56ID49IGFsbW9zdE9uZSApIHtcXG5cXG5cXHRcXHRcXHRcXHRpZiAoIHYueiA+IDAuMCApXFxuXFx0XFx0XFx0XFx0XFx0cGxhbmFyLnggPSA0LjAgLSB2Lng7XFxuXFxuXFx0XFx0XFx0fSBlbHNlIGlmICggYWJzVi54ID49IGFsbW9zdE9uZSApIHtcXG5cXG5cXHRcXHRcXHRcXHRmbG9hdCBzaWduWCA9IHNpZ24oIHYueCApO1xcblxcdFxcdFxcdFxcdHBsYW5hci54ID0gdi56ICogc2lnblggKyAyLjAgKiBzaWduWDtcXG5cXG5cXHRcXHRcXHR9IGVsc2UgaWYgKCBhYnNWLnkgPj0gYWxtb3N0T25lICkge1xcblxcblxcdFxcdFxcdFxcdGZsb2F0IHNpZ25ZID0gc2lnbiggdi55ICk7XFxuXFx0XFx0XFx0XFx0cGxhbmFyLnggPSB2LnggKyAyLjAgKiBzaWduWSArIDIuMDtcXG5cXHRcXHRcXHRcXHRwbGFuYXIueSA9IHYueiAqIHNpZ25ZIC0gMi4wO1xcblxcblxcdFxcdFxcdH1cXG5cXG5cXG5cXHRcXHRcXHRyZXR1cm4gdmVjMiggMC4xMjUsIDAuMjUgKSAqIHBsYW5hciArIHZlYzIoIDAuMzc1LCAwLjc1ICk7XFxuXFxuXFx0XFx0fVxcblxcblxcdCNlbmRpZlxcblxcbiNlbmRpZlxcblwiO1xuVEhSRUUuU2hhZGVyQ2h1bmsuc2hhZG93bWFwX3BhcnNfdmVydGV4PVwiI2lmZGVmIFVTRV9TSEFET1dNQVBcXG5cXG5cXHR1bmlmb3JtIGZsb2F0IHNoYWRvd0RhcmtuZXNzWyBNQVhfU0hBRE9XUyBdO1xcblxcdHVuaWZvcm0gbWF0NCBzaGFkb3dNYXRyaXhbIE1BWF9TSEFET1dTIF07XFxuXFx0dmFyeWluZyB2ZWM0IHZTaGFkb3dDb29yZFsgTUFYX1NIQURPV1MgXTtcXG5cXG4jZW5kaWZcIjtUSFJFRS5TaGFkZXJDaHVuay5zaGFkb3dtYXBfdmVydGV4PVwiI2lmZGVmIFVTRV9TSEFET1dNQVBcXG5cXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBNQVhfU0hBRE9XUzsgaSArKyApIHtcXG5cXG5cXHRcXHRcXHR2U2hhZG93Q29vcmRbIGkgXSA9IHNoYWRvd01hdHJpeFsgaSBdICogd29ybGRQb3NpdGlvbjtcXG5cXG5cXHR9XFxuXFxuI2VuZGlmXCI7VEhSRUUuU2hhZGVyQ2h1bmsuc2tpbmJhc2VfdmVydGV4PVwiI2lmZGVmIFVTRV9TS0lOTklOR1xcblxcblxcdG1hdDQgYm9uZU1hdFggPSBnZXRCb25lTWF0cml4KCBza2luSW5kZXgueCApO1xcblxcdG1hdDQgYm9uZU1hdFkgPSBnZXRCb25lTWF0cml4KCBza2luSW5kZXgueSApO1xcblxcdG1hdDQgYm9uZU1hdFogPSBnZXRCb25lTWF0cml4KCBza2luSW5kZXgueiApO1xcblxcdG1hdDQgYm9uZU1hdFcgPSBnZXRCb25lTWF0cml4KCBza2luSW5kZXgudyApO1xcblxcbiNlbmRpZlwiO1xuVEhSRUUuU2hhZGVyQ2h1bmsuc2tpbm5pbmdfcGFyc192ZXJ0ZXg9XCIjaWZkZWYgVVNFX1NLSU5OSU5HXFxuXFxuXFx0dW5pZm9ybSBtYXQ0IGJpbmRNYXRyaXg7XFxuXFx0dW5pZm9ybSBtYXQ0IGJpbmRNYXRyaXhJbnZlcnNlO1xcblxcblxcdCNpZmRlZiBCT05FX1RFWFRVUkVcXG5cXG5cXHRcXHR1bmlmb3JtIHNhbXBsZXIyRCBib25lVGV4dHVyZTtcXG5cXHRcXHR1bmlmb3JtIGludCBib25lVGV4dHVyZVdpZHRoO1xcblxcdFxcdHVuaWZvcm0gaW50IGJvbmVUZXh0dXJlSGVpZ2h0O1xcblxcblxcdFxcdG1hdDQgZ2V0Qm9uZU1hdHJpeCggY29uc3QgaW4gZmxvYXQgaSApIHtcXG5cXG5cXHRcXHRcXHRmbG9hdCBqID0gaSAqIDQuMDtcXG5cXHRcXHRcXHRmbG9hdCB4ID0gbW9kKCBqLCBmbG9hdCggYm9uZVRleHR1cmVXaWR0aCApICk7XFxuXFx0XFx0XFx0ZmxvYXQgeSA9IGZsb29yKCBqIC8gZmxvYXQoIGJvbmVUZXh0dXJlV2lkdGggKSApO1xcblxcblxcdFxcdFxcdGZsb2F0IGR4ID0gMS4wIC8gZmxvYXQoIGJvbmVUZXh0dXJlV2lkdGggKTtcXG5cXHRcXHRcXHRmbG9hdCBkeSA9IDEuMCAvIGZsb2F0KCBib25lVGV4dHVyZUhlaWdodCApO1xcblxcblxcdFxcdFxcdHkgPSBkeSAqICggeSArIDAuNSApO1xcblxcblxcdFxcdFxcdHZlYzQgdjEgPSB0ZXh0dXJlMkQoIGJvbmVUZXh0dXJlLCB2ZWMyKCBkeCAqICggeCArIDAuNSApLCB5ICkgKTtcXG5cXHRcXHRcXHR2ZWM0IHYyID0gdGV4dHVyZTJEKCBib25lVGV4dHVyZSwgdmVjMiggZHggKiAoIHggKyAxLjUgKSwgeSApICk7XFxuXFx0XFx0XFx0dmVjNCB2MyA9IHRleHR1cmUyRCggYm9uZVRleHR1cmUsIHZlYzIoIGR4ICogKCB4ICsgMi41ICksIHkgKSApO1xcblxcdFxcdFxcdHZlYzQgdjQgPSB0ZXh0dXJlMkQoIGJvbmVUZXh0dXJlLCB2ZWMyKCBkeCAqICggeCArIDMuNSApLCB5ICkgKTtcXG5cXG5cXHRcXHRcXHRtYXQ0IGJvbmUgPSBtYXQ0KCB2MSwgdjIsIHYzLCB2NCApO1xcblxcblxcdFxcdFxcdHJldHVybiBib25lO1xcblxcblxcdFxcdH1cXG5cXG5cXHQjZWxzZVxcblxcblxcdFxcdHVuaWZvcm0gbWF0NCBib25lR2xvYmFsTWF0cmljZXNbIE1BWF9CT05FUyBdO1xcblxcblxcdFxcdG1hdDQgZ2V0Qm9uZU1hdHJpeCggY29uc3QgaW4gZmxvYXQgaSApIHtcXG5cXG5cXHRcXHRcXHRtYXQ0IGJvbmUgPSBib25lR2xvYmFsTWF0cmljZXNbIGludChpKSBdO1xcblxcdFxcdFxcdHJldHVybiBib25lO1xcblxcblxcdFxcdH1cXG5cXG5cXHQjZW5kaWZcXG5cXG4jZW5kaWZcXG5cIjtcblRIUkVFLlNoYWRlckNodW5rLnNraW5uaW5nX3ZlcnRleD1cIiNpZmRlZiBVU0VfU0tJTk5JTkdcXG5cXG5cXHR2ZWM0IHNraW5WZXJ0ZXggPSBiaW5kTWF0cml4ICogdmVjNCggdHJhbnNmb3JtZWQsIDEuMCApO1xcblxcblxcdHZlYzQgc2tpbm5lZCA9IHZlYzQoIDAuMCApO1xcblxcdHNraW5uZWQgKz0gYm9uZU1hdFggKiBza2luVmVydGV4ICogc2tpbldlaWdodC54O1xcblxcdHNraW5uZWQgKz0gYm9uZU1hdFkgKiBza2luVmVydGV4ICogc2tpbldlaWdodC55O1xcblxcdHNraW5uZWQgKz0gYm9uZU1hdFogKiBza2luVmVydGV4ICogc2tpbldlaWdodC56O1xcblxcdHNraW5uZWQgKz0gYm9uZU1hdFcgKiBza2luVmVydGV4ICogc2tpbldlaWdodC53O1xcblxcdHNraW5uZWQgID0gYmluZE1hdHJpeEludmVyc2UgKiBza2lubmVkO1xcblxcbiNlbmRpZlxcblwiO1RIUkVFLlNoYWRlckNodW5rLnNraW5ub3JtYWxfdmVydGV4PVwiI2lmZGVmIFVTRV9TS0lOTklOR1xcblxcblxcdG1hdDQgc2tpbk1hdHJpeCA9IG1hdDQoIDAuMCApO1xcblxcdHNraW5NYXRyaXggKz0gc2tpbldlaWdodC54ICogYm9uZU1hdFg7XFxuXFx0c2tpbk1hdHJpeCArPSBza2luV2VpZ2h0LnkgKiBib25lTWF0WTtcXG5cXHRza2luTWF0cml4ICs9IHNraW5XZWlnaHQueiAqIGJvbmVNYXRaO1xcblxcdHNraW5NYXRyaXggKz0gc2tpbldlaWdodC53ICogYm9uZU1hdFc7XFxuXFx0c2tpbk1hdHJpeCAgPSBiaW5kTWF0cml4SW52ZXJzZSAqIHNraW5NYXRyaXggKiBiaW5kTWF0cml4O1xcblxcblxcdG9iamVjdE5vcm1hbCA9IHZlYzQoIHNraW5NYXRyaXggKiB2ZWM0KCBvYmplY3ROb3JtYWwsIDAuMCApICkueHl6O1xcblxcbiNlbmRpZlxcblwiO1xuVEhSRUUuU2hhZGVyQ2h1bmsuc3BlY3VsYXJtYXBfZnJhZ21lbnQ9XCJmbG9hdCBzcGVjdWxhclN0cmVuZ3RoO1xcblxcbiNpZmRlZiBVU0VfU1BFQ1VMQVJNQVBcXG5cXG5cXHR2ZWM0IHRleGVsU3BlY3VsYXIgPSB0ZXh0dXJlMkQoIHNwZWN1bGFyTWFwLCB2VXYgKTtcXG5cXHRzcGVjdWxhclN0cmVuZ3RoID0gdGV4ZWxTcGVjdWxhci5yO1xcblxcbiNlbHNlXFxuXFxuXFx0c3BlY3VsYXJTdHJlbmd0aCA9IDEuMDtcXG5cXG4jZW5kaWZcIjtUSFJFRS5TaGFkZXJDaHVuay5zcGVjdWxhcm1hcF9wYXJzX2ZyYWdtZW50PVwiI2lmZGVmIFVTRV9TUEVDVUxBUk1BUFxcblxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIHNwZWN1bGFyTWFwO1xcblxcbiNlbmRpZlwiO1RIUkVFLlNoYWRlckNodW5rLnV2Ml9wYXJzX2ZyYWdtZW50PVwiI2lmIGRlZmluZWQoIFVTRV9MSUdIVE1BUCApIHx8IGRlZmluZWQoIFVTRV9BT01BUCApXFxuXFxuXFx0dmFyeWluZyB2ZWMyIHZVdjI7XFxuXFxuI2VuZGlmXCI7XG5USFJFRS5TaGFkZXJDaHVuay51djJfcGFyc192ZXJ0ZXg9XCIjaWYgZGVmaW5lZCggVVNFX0xJR0hUTUFQICkgfHwgZGVmaW5lZCggVVNFX0FPTUFQIClcXG5cXG5cXHRhdHRyaWJ1dGUgdmVjMiB1djI7XFxuXFx0dmFyeWluZyB2ZWMyIHZVdjI7XFxuXFxuI2VuZGlmXCI7VEhSRUUuU2hhZGVyQ2h1bmsudXYyX3ZlcnRleD1cIiNpZiBkZWZpbmVkKCBVU0VfTElHSFRNQVAgKSB8fCBkZWZpbmVkKCBVU0VfQU9NQVAgKVxcblxcblxcdHZVdjIgPSB1djI7XFxuXFxuI2VuZGlmXCI7VEhSRUUuU2hhZGVyQ2h1bmsudXZfcGFyc19mcmFnbWVudD1cIiNpZiBkZWZpbmVkKCBVU0VfTUFQICkgfHwgZGVmaW5lZCggVVNFX0JVTVBNQVAgKSB8fCBkZWZpbmVkKCBVU0VfTk9STUFMTUFQICkgfHwgZGVmaW5lZCggVVNFX1NQRUNVTEFSTUFQICkgfHwgZGVmaW5lZCggVVNFX0FMUEhBTUFQICkgfHwgZGVmaW5lZCggVVNFX0VNSVNTSVZFTUFQIClcXG5cXG5cXHR2YXJ5aW5nIHZlYzIgdlV2O1xcblxcbiNlbmRpZlwiO1xuVEhSRUUuU2hhZGVyQ2h1bmsudXZfcGFyc192ZXJ0ZXg9XCIjaWYgZGVmaW5lZCggVVNFX01BUCApIHx8IGRlZmluZWQoIFVTRV9CVU1QTUFQICkgfHwgZGVmaW5lZCggVVNFX05PUk1BTE1BUCApIHx8IGRlZmluZWQoIFVTRV9TUEVDVUxBUk1BUCApIHx8IGRlZmluZWQoIFVTRV9BTFBIQU1BUCApIHx8IGRlZmluZWQoIFVTRV9FTUlTU0lWRU1BUCApXFxuXFxuXFx0dmFyeWluZyB2ZWMyIHZVdjtcXG5cXHR1bmlmb3JtIHZlYzQgb2Zmc2V0UmVwZWF0O1xcblxcbiNlbmRpZlxcblwiO1RIUkVFLlNoYWRlckNodW5rLnV2X3ZlcnRleD1cIiNpZiBkZWZpbmVkKCBVU0VfTUFQICkgfHwgZGVmaW5lZCggVVNFX0JVTVBNQVAgKSB8fCBkZWZpbmVkKCBVU0VfTk9STUFMTUFQICkgfHwgZGVmaW5lZCggVVNFX1NQRUNVTEFSTUFQICkgfHwgZGVmaW5lZCggVVNFX0FMUEhBTUFQICkgfHwgZGVmaW5lZCggVVNFX0VNSVNTSVZFTUFQIClcXG5cXG5cXHR2VXYgPSB1diAqIG9mZnNldFJlcGVhdC56dyArIG9mZnNldFJlcGVhdC54eTtcXG5cXG4jZW5kaWZcIjtcblRIUkVFLlNoYWRlckNodW5rLndvcmxkcG9zX3ZlcnRleD1cIiNpZiBkZWZpbmVkKCBVU0VfRU5WTUFQICkgfHwgZGVmaW5lZCggUEhPTkcgKSB8fCBkZWZpbmVkKCBMQU1CRVJUICkgfHwgZGVmaW5lZCAoIFVTRV9TSEFET1dNQVAgKVxcblxcblxcdCNpZmRlZiBVU0VfU0tJTk5JTkdcXG5cXG5cXHRcXHR2ZWM0IHdvcmxkUG9zaXRpb24gPSBtb2RlbE1hdHJpeCAqIHNraW5uZWQ7XFxuXFxuXFx0I2Vsc2VcXG5cXG5cXHRcXHR2ZWM0IHdvcmxkUG9zaXRpb24gPSBtb2RlbE1hdHJpeCAqIHZlYzQoIHRyYW5zZm9ybWVkLCAxLjAgKTtcXG5cXG5cXHQjZW5kaWZcXG5cXG4jZW5kaWZcXG5cIjtcblRIUkVFLlVuaWZvcm1zVXRpbHM9e21lcmdlOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj17fSxjPTA7YzxhLmxlbmd0aDtjKyspe3ZhciBkPXRoaXMuY2xvbmUoYVtjXSksZTtmb3IoZSBpbiBkKWJbZV09ZFtlXX1yZXR1cm4gYn0sY2xvbmU6ZnVuY3Rpb24oYSl7dmFyIGI9e30sYztmb3IoYyBpbiBhKXtiW2NdPXt9O2Zvcih2YXIgZCBpbiBhW2NdKXt2YXIgZT1hW2NdW2RdO2UgaW5zdGFuY2VvZiBUSFJFRS5Db2xvcnx8ZSBpbnN0YW5jZW9mIFRIUkVFLlZlY3RvcjJ8fGUgaW5zdGFuY2VvZiBUSFJFRS5WZWN0b3IzfHxlIGluc3RhbmNlb2YgVEhSRUUuVmVjdG9yNHx8ZSBpbnN0YW5jZW9mIFRIUkVFLk1hdHJpeDN8fGUgaW5zdGFuY2VvZiBUSFJFRS5NYXRyaXg0fHxlIGluc3RhbmNlb2YgVEhSRUUuVGV4dHVyZT9iW2NdW2RdPWUuY2xvbmUoKTpBcnJheS5pc0FycmF5KGUpP2JbY11bZF09ZS5zbGljZSgpOmJbY11bZF09ZX19cmV0dXJuIGJ9fTtcblRIUkVFLlVuaWZvcm1zTGliPXtjb21tb246e2RpZmZ1c2U6e3R5cGU6XCJjXCIsdmFsdWU6bmV3IFRIUkVFLkNvbG9yKDE1NjU4NzM0KX0sb3BhY2l0eTp7dHlwZTpcImZcIix2YWx1ZToxfSxtYXA6e3R5cGU6XCJ0XCIsdmFsdWU6bnVsbH0sb2Zmc2V0UmVwZWF0Ont0eXBlOlwidjRcIix2YWx1ZTpuZXcgVEhSRUUuVmVjdG9yNCgwLDAsMSwxKX0sc3BlY3VsYXJNYXA6e3R5cGU6XCJ0XCIsdmFsdWU6bnVsbH0sYWxwaGFNYXA6e3R5cGU6XCJ0XCIsdmFsdWU6bnVsbH0sZW52TWFwOnt0eXBlOlwidFwiLHZhbHVlOm51bGx9LGZsaXBFbnZNYXA6e3R5cGU6XCJmXCIsdmFsdWU6LTF9LHJlZmxlY3Rpdml0eTp7dHlwZTpcImZcIix2YWx1ZToxfSxyZWZyYWN0aW9uUmF0aW86e3R5cGU6XCJmXCIsdmFsdWU6Ljk4fX0sYW9tYXA6e2FvTWFwOnt0eXBlOlwidFwiLHZhbHVlOm51bGx9LGFvTWFwSW50ZW5zaXR5Ont0eXBlOlwiZlwiLHZhbHVlOjF9fSxsaWdodG1hcDp7bGlnaHRNYXA6e3R5cGU6XCJ0XCIsdmFsdWU6bnVsbH0sbGlnaHRNYXBJbnRlbnNpdHk6e3R5cGU6XCJmXCIsXG52YWx1ZToxfX0sZW1pc3NpdmVtYXA6e2VtaXNzaXZlTWFwOnt0eXBlOlwidFwiLHZhbHVlOm51bGx9fSxidW1wbWFwOntidW1wTWFwOnt0eXBlOlwidFwiLHZhbHVlOm51bGx9LGJ1bXBTY2FsZTp7dHlwZTpcImZcIix2YWx1ZToxfX0sbm9ybWFsbWFwOntub3JtYWxNYXA6e3R5cGU6XCJ0XCIsdmFsdWU6bnVsbH0sbm9ybWFsU2NhbGU6e3R5cGU6XCJ2MlwiLHZhbHVlOm5ldyBUSFJFRS5WZWN0b3IyKDEsMSl9fSxkaXNwbGFjZW1lbnRtYXA6e2Rpc3BsYWNlbWVudE1hcDp7dHlwZTpcInRcIix2YWx1ZTpudWxsfSxkaXNwbGFjZW1lbnRTY2FsZTp7dHlwZTpcImZcIix2YWx1ZToxfSxkaXNwbGFjZW1lbnRCaWFzOnt0eXBlOlwiZlwiLHZhbHVlOjB9fSxmb2c6e2ZvZ0RlbnNpdHk6e3R5cGU6XCJmXCIsdmFsdWU6Mi41RS00fSxmb2dOZWFyOnt0eXBlOlwiZlwiLHZhbHVlOjF9LGZvZ0Zhcjp7dHlwZTpcImZcIix2YWx1ZToyRTN9LGZvZ0NvbG9yOnt0eXBlOlwiY1wiLHZhbHVlOm5ldyBUSFJFRS5Db2xvcigxNjc3NzIxNSl9fSxcbmxpZ2h0czp7YW1iaWVudExpZ2h0Q29sb3I6e3R5cGU6XCJmdlwiLHZhbHVlOltdfSxkaXJlY3Rpb25hbExpZ2h0RGlyZWN0aW9uOnt0eXBlOlwiZnZcIix2YWx1ZTpbXX0sZGlyZWN0aW9uYWxMaWdodENvbG9yOnt0eXBlOlwiZnZcIix2YWx1ZTpbXX0saGVtaXNwaGVyZUxpZ2h0RGlyZWN0aW9uOnt0eXBlOlwiZnZcIix2YWx1ZTpbXX0saGVtaXNwaGVyZUxpZ2h0U2t5Q29sb3I6e3R5cGU6XCJmdlwiLHZhbHVlOltdfSxoZW1pc3BoZXJlTGlnaHRHcm91bmRDb2xvcjp7dHlwZTpcImZ2XCIsdmFsdWU6W119LHBvaW50TGlnaHRDb2xvcjp7dHlwZTpcImZ2XCIsdmFsdWU6W119LHBvaW50TGlnaHRQb3NpdGlvbjp7dHlwZTpcImZ2XCIsdmFsdWU6W119LHBvaW50TGlnaHREaXN0YW5jZTp7dHlwZTpcImZ2MVwiLHZhbHVlOltdfSxwb2ludExpZ2h0RGVjYXk6e3R5cGU6XCJmdjFcIix2YWx1ZTpbXX0sc3BvdExpZ2h0Q29sb3I6e3R5cGU6XCJmdlwiLHZhbHVlOltdfSxzcG90TGlnaHRQb3NpdGlvbjp7dHlwZTpcImZ2XCIsdmFsdWU6W119LFxuc3BvdExpZ2h0RGlyZWN0aW9uOnt0eXBlOlwiZnZcIix2YWx1ZTpbXX0sc3BvdExpZ2h0RGlzdGFuY2U6e3R5cGU6XCJmdjFcIix2YWx1ZTpbXX0sc3BvdExpZ2h0QW5nbGVDb3M6e3R5cGU6XCJmdjFcIix2YWx1ZTpbXX0sc3BvdExpZ2h0RXhwb25lbnQ6e3R5cGU6XCJmdjFcIix2YWx1ZTpbXX0sc3BvdExpZ2h0RGVjYXk6e3R5cGU6XCJmdjFcIix2YWx1ZTpbXX19LHBvaW50czp7cHNDb2xvcjp7dHlwZTpcImNcIix2YWx1ZTpuZXcgVEhSRUUuQ29sb3IoMTU2NTg3MzQpfSxvcGFjaXR5Ont0eXBlOlwiZlwiLHZhbHVlOjF9LHNpemU6e3R5cGU6XCJmXCIsdmFsdWU6MX0sc2NhbGU6e3R5cGU6XCJmXCIsdmFsdWU6MX0sbWFwOnt0eXBlOlwidFwiLHZhbHVlOm51bGx9LG9mZnNldFJlcGVhdDp7dHlwZTpcInY0XCIsdmFsdWU6bmV3IFRIUkVFLlZlY3RvcjQoMCwwLDEsMSl9LGZvZ0RlbnNpdHk6e3R5cGU6XCJmXCIsdmFsdWU6Mi41RS00fSxmb2dOZWFyOnt0eXBlOlwiZlwiLHZhbHVlOjF9LGZvZ0Zhcjp7dHlwZTpcImZcIix2YWx1ZToyRTN9LFxuZm9nQ29sb3I6e3R5cGU6XCJjXCIsdmFsdWU6bmV3IFRIUkVFLkNvbG9yKDE2Nzc3MjE1KX19LHNoYWRvd21hcDp7c2hhZG93TWFwOnt0eXBlOlwidHZcIix2YWx1ZTpbXX0sc2hhZG93TWFwU2l6ZTp7dHlwZTpcInYydlwiLHZhbHVlOltdfSxzaGFkb3dCaWFzOnt0eXBlOlwiZnYxXCIsdmFsdWU6W119LHNoYWRvd0RhcmtuZXNzOnt0eXBlOlwiZnYxXCIsdmFsdWU6W119LHNoYWRvd01hdHJpeDp7dHlwZTpcIm00dlwiLHZhbHVlOltdfX19O1xuVEhSRUUuU2hhZGVyTGliPXtiYXNpYzp7dW5pZm9ybXM6VEhSRUUuVW5pZm9ybXNVdGlscy5tZXJnZShbVEhSRUUuVW5pZm9ybXNMaWIuY29tbW9uLFRIUkVFLlVuaWZvcm1zTGliLmFvbWFwLFRIUkVFLlVuaWZvcm1zTGliLmZvZyxUSFJFRS5Vbmlmb3Jtc0xpYi5zaGFkb3dtYXBdKSx2ZXJ0ZXhTaGFkZXI6W1RIUkVFLlNoYWRlckNodW5rLmNvbW1vbixUSFJFRS5TaGFkZXJDaHVuay51dl9wYXJzX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay51djJfcGFyc192ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsuZW52bWFwX3BhcnNfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLmNvbG9yX3BhcnNfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLm1vcnBodGFyZ2V0X3BhcnNfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLnNraW5uaW5nX3BhcnNfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLnNoYWRvd21hcF9wYXJzX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleCxcblwidm9pZCBtYWluKCkge1wiLFRIUkVFLlNoYWRlckNodW5rLnV2X3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay51djJfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLmNvbG9yX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5za2luYmFzZV92ZXJ0ZXgsXCJcXHQjaWZkZWYgVVNFX0VOVk1BUFwiLFRIUkVFLlNoYWRlckNodW5rLmJlZ2lubm9ybWFsX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5tb3JwaG5vcm1hbF92ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsuc2tpbm5vcm1hbF92ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsuZGVmYXVsdG5vcm1hbF92ZXJ0ZXgsXCJcXHQjZW5kaWZcIixUSFJFRS5TaGFkZXJDaHVuay5iZWdpbl92ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsubW9ycGh0YXJnZXRfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLnNraW5uaW5nX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5wcm9qZWN0X3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl92ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsud29ybGRwb3NfdmVydGV4LFxuVEhSRUUuU2hhZGVyQ2h1bmsuZW52bWFwX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5zaGFkb3dtYXBfdmVydGV4LFwifVwiXS5qb2luKFwiXFxuXCIpLGZyYWdtZW50U2hhZGVyOltcInVuaWZvcm0gdmVjMyBkaWZmdXNlO1xcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcIixUSFJFRS5TaGFkZXJDaHVuay5jb21tb24sVEhSRUUuU2hhZGVyQ2h1bmsuY29sb3JfcGFyc19mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay51dl9wYXJzX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLnV2Ml9wYXJzX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLm1hcF9wYXJzX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLmFscGhhbWFwX3BhcnNfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsuYW9tYXBfcGFyc19mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5lbnZtYXBfcGFyc19mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5mb2dfcGFyc19mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5zaGFkb3dtYXBfcGFyc19mcmFnbWVudCxcblRIUkVFLlNoYWRlckNodW5rLnNwZWN1bGFybWFwX3BhcnNfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsubG9nZGVwdGhidWZfcGFyc19mcmFnbWVudCxcInZvaWQgbWFpbigpIHtcXG5cXHR2ZWMzIG91dGdvaW5nTGlnaHQgPSB2ZWMzKCAwLjAgKTtcXG5cXHR2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIGRpZmZ1c2UsIG9wYWNpdHkgKTtcXG5cXHR2ZWMzIHRvdGFsQW1iaWVudExpZ2h0ID0gdmVjMyggMS4wICk7XFxuXFx0dmVjMyBzaGFkb3dNYXNrID0gdmVjMyggMS4wICk7XCIsVEhSRUUuU2hhZGVyQ2h1bmsubG9nZGVwdGhidWZfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsubWFwX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLmNvbG9yX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLmFscGhhbWFwX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLmFscGhhdGVzdF9mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5zcGVjdWxhcm1hcF9mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5hb21hcF9mcmFnbWVudCxcblRIUkVFLlNoYWRlckNodW5rLnNoYWRvd21hcF9mcmFnbWVudCxcIlxcdG91dGdvaW5nTGlnaHQgPSBkaWZmdXNlQ29sb3IucmdiICogdG90YWxBbWJpZW50TGlnaHQgKiBzaGFkb3dNYXNrO1wiLFRIUkVFLlNoYWRlckNodW5rLmVudm1hcF9mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5saW5lYXJfdG9fZ2FtbWFfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsuZm9nX2ZyYWdtZW50LFwiXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggb3V0Z29pbmdMaWdodCwgZGlmZnVzZUNvbG9yLmEgKTtcXG59XCJdLmpvaW4oXCJcXG5cIil9LGxhbWJlcnQ6e3VuaWZvcm1zOlRIUkVFLlVuaWZvcm1zVXRpbHMubWVyZ2UoW1RIUkVFLlVuaWZvcm1zTGliLmNvbW1vbixUSFJFRS5Vbmlmb3Jtc0xpYi5mb2csVEhSRUUuVW5pZm9ybXNMaWIubGlnaHRzLFRIUkVFLlVuaWZvcm1zTGliLnNoYWRvd21hcCx7ZW1pc3NpdmU6e3R5cGU6XCJjXCIsdmFsdWU6bmV3IFRIUkVFLkNvbG9yKDApfX1dKSx2ZXJ0ZXhTaGFkZXI6W1wiI2RlZmluZSBMQU1CRVJUXFxudmFyeWluZyB2ZWMzIHZMaWdodEZyb250O1xcbiNpZmRlZiBET1VCTEVfU0lERURcXG5cXHR2YXJ5aW5nIHZlYzMgdkxpZ2h0QmFjaztcXG4jZW5kaWZcIixcblRIUkVFLlNoYWRlckNodW5rLmNvbW1vbixUSFJFRS5TaGFkZXJDaHVuay51dl9wYXJzX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay51djJfcGFyc192ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsuZW52bWFwX3BhcnNfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLmxpZ2h0c19sYW1iZXJ0X3BhcnNfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLmNvbG9yX3BhcnNfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLm1vcnBodGFyZ2V0X3BhcnNfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLnNraW5uaW5nX3BhcnNfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLnNoYWRvd21hcF9wYXJzX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleCxcInZvaWQgbWFpbigpIHtcIixUSFJFRS5TaGFkZXJDaHVuay51dl92ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsudXYyX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5jb2xvcl92ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsuYmVnaW5ub3JtYWxfdmVydGV4LFxuVEhSRUUuU2hhZGVyQ2h1bmsubW9ycGhub3JtYWxfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLnNraW5iYXNlX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5za2lubm9ybWFsX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5kZWZhdWx0bm9ybWFsX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5iZWdpbl92ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsubW9ycGh0YXJnZXRfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLnNraW5uaW5nX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5wcm9qZWN0X3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl92ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsud29ybGRwb3NfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLmVudm1hcF92ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsubGlnaHRzX2xhbWJlcnRfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLnNoYWRvd21hcF92ZXJ0ZXgsXCJ9XCJdLmpvaW4oXCJcXG5cIiksZnJhZ21lbnRTaGFkZXI6W1widW5pZm9ybSB2ZWMzIGRpZmZ1c2U7XFxudW5pZm9ybSB2ZWMzIGVtaXNzaXZlO1xcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcXG51bmlmb3JtIHZlYzMgYW1iaWVudExpZ2h0Q29sb3I7XFxudmFyeWluZyB2ZWMzIHZMaWdodEZyb250O1xcbiNpZmRlZiBET1VCTEVfU0lERURcXG5cXHR2YXJ5aW5nIHZlYzMgdkxpZ2h0QmFjaztcXG4jZW5kaWZcIixcblRIUkVFLlNoYWRlckNodW5rLmNvbW1vbixUSFJFRS5TaGFkZXJDaHVuay5jb2xvcl9wYXJzX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLnV2X3BhcnNfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsudXYyX3BhcnNfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsubWFwX3BhcnNfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsuYWxwaGFtYXBfcGFyc19mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5lbnZtYXBfcGFyc19mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5mb2dfcGFyc19mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5zaGFkb3dtYXBfcGFyc19mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5zcGVjdWxhcm1hcF9wYXJzX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLmxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQsXCJ2b2lkIG1haW4oKSB7XFxuXFx0dmVjMyBvdXRnb2luZ0xpZ2h0ID0gdmVjMyggMC4wICk7XFxuXFx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCBkaWZmdXNlLCBvcGFjaXR5ICk7XFxuXFx0dmVjMyB0b3RhbEFtYmllbnRMaWdodCA9IGFtYmllbnRMaWdodENvbG9yO1xcblxcdHZlYzMgc2hhZG93TWFzayA9IHZlYzMoIDEuMCApO1wiLFxuVEhSRUUuU2hhZGVyQ2h1bmsubG9nZGVwdGhidWZfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsubWFwX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLmNvbG9yX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLmFscGhhbWFwX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLmFscGhhdGVzdF9mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5zcGVjdWxhcm1hcF9mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5zaGFkb3dtYXBfZnJhZ21lbnQsXCJcXHQjaWZkZWYgRE9VQkxFX1NJREVEXFxuXFx0XFx0aWYgKCBnbF9Gcm9udEZhY2luZyApXFxuXFx0XFx0XFx0b3V0Z29pbmdMaWdodCArPSBkaWZmdXNlQ29sb3IucmdiICogKCB2TGlnaHRGcm9udCAqIHNoYWRvd01hc2sgKyB0b3RhbEFtYmllbnRMaWdodCApICsgZW1pc3NpdmU7XFxuXFx0XFx0ZWxzZVxcblxcdFxcdFxcdG91dGdvaW5nTGlnaHQgKz0gZGlmZnVzZUNvbG9yLnJnYiAqICggdkxpZ2h0QmFjayAqIHNoYWRvd01hc2sgKyB0b3RhbEFtYmllbnRMaWdodCApICsgZW1pc3NpdmU7XFxuXFx0I2Vsc2VcXG5cXHRcXHRvdXRnb2luZ0xpZ2h0ICs9IGRpZmZ1c2VDb2xvci5yZ2IgKiAoIHZMaWdodEZyb250ICogc2hhZG93TWFzayArIHRvdGFsQW1iaWVudExpZ2h0ICkgKyBlbWlzc2l2ZTtcXG5cXHQjZW5kaWZcIixcblRIUkVFLlNoYWRlckNodW5rLmVudm1hcF9mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5saW5lYXJfdG9fZ2FtbWFfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsuZm9nX2ZyYWdtZW50LFwiXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggb3V0Z29pbmdMaWdodCwgZGlmZnVzZUNvbG9yLmEgKTtcXG59XCJdLmpvaW4oXCJcXG5cIil9LHBob25nOnt1bmlmb3JtczpUSFJFRS5Vbmlmb3Jtc1V0aWxzLm1lcmdlKFtUSFJFRS5Vbmlmb3Jtc0xpYi5jb21tb24sVEhSRUUuVW5pZm9ybXNMaWIuYW9tYXAsVEhSRUUuVW5pZm9ybXNMaWIubGlnaHRtYXAsVEhSRUUuVW5pZm9ybXNMaWIuZW1pc3NpdmVtYXAsVEhSRUUuVW5pZm9ybXNMaWIuYnVtcG1hcCxUSFJFRS5Vbmlmb3Jtc0xpYi5ub3JtYWxtYXAsVEhSRUUuVW5pZm9ybXNMaWIuZGlzcGxhY2VtZW50bWFwLFRIUkVFLlVuaWZvcm1zTGliLmZvZyxUSFJFRS5Vbmlmb3Jtc0xpYi5saWdodHMsVEhSRUUuVW5pZm9ybXNMaWIuc2hhZG93bWFwLHtlbWlzc2l2ZTp7dHlwZTpcImNcIixcbnZhbHVlOm5ldyBUSFJFRS5Db2xvcigwKX0sc3BlY3VsYXI6e3R5cGU6XCJjXCIsdmFsdWU6bmV3IFRIUkVFLkNvbG9yKDExMTg0ODEpfSxzaGluaW5lc3M6e3R5cGU6XCJmXCIsdmFsdWU6MzB9fV0pLHZlcnRleFNoYWRlcjpbXCIjZGVmaW5lIFBIT05HXFxudmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XFxuI2lmbmRlZiBGTEFUX1NIQURFRFxcblxcdHZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xcbiNlbmRpZlwiLFRIUkVFLlNoYWRlckNodW5rLmNvbW1vbixUSFJFRS5TaGFkZXJDaHVuay51dl9wYXJzX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay51djJfcGFyc192ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsuZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLmVudm1hcF9wYXJzX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5saWdodHNfcGhvbmdfcGFyc192ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsuY29sb3JfcGFyc192ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsubW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXgsXG5USFJFRS5TaGFkZXJDaHVuay5za2lubmluZ19wYXJzX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5zaGFkb3dtYXBfcGFyc192ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsubG9nZGVwdGhidWZfcGFyc192ZXJ0ZXgsXCJ2b2lkIG1haW4oKSB7XCIsVEhSRUUuU2hhZGVyQ2h1bmsudXZfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLnV2Ml92ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsuY29sb3JfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLmJlZ2lubm9ybWFsX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5tb3JwaG5vcm1hbF92ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsuc2tpbmJhc2VfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLnNraW5ub3JtYWxfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLmRlZmF1bHRub3JtYWxfdmVydGV4LFwiI2lmbmRlZiBGTEFUX1NIQURFRFxcblxcdHZOb3JtYWwgPSBub3JtYWxpemUoIHRyYW5zZm9ybWVkTm9ybWFsICk7XFxuI2VuZGlmXCIsVEhSRUUuU2hhZGVyQ2h1bmsuYmVnaW5fdmVydGV4LFxuVEhSRUUuU2hhZGVyQ2h1bmsuZGlzcGxhY2VtZW50bWFwX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5tb3JwaHRhcmdldF92ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsuc2tpbm5pbmdfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLnByb2plY3RfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLmxvZ2RlcHRoYnVmX3ZlcnRleCxcIlxcdHZWaWV3UG9zaXRpb24gPSAtIG12UG9zaXRpb24ueHl6O1wiLFRIUkVFLlNoYWRlckNodW5rLndvcmxkcG9zX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5lbnZtYXBfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLmxpZ2h0c19waG9uZ192ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsuc2hhZG93bWFwX3ZlcnRleCxcIn1cIl0uam9pbihcIlxcblwiKSxmcmFnbWVudFNoYWRlcjpbXCIjZGVmaW5lIFBIT05HXFxudW5pZm9ybSB2ZWMzIGRpZmZ1c2U7XFxudW5pZm9ybSB2ZWMzIGVtaXNzaXZlO1xcbnVuaWZvcm0gdmVjMyBzcGVjdWxhcjtcXG51bmlmb3JtIGZsb2F0IHNoaW5pbmVzcztcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XCIsXG5USFJFRS5TaGFkZXJDaHVuay5jb21tb24sVEhSRUUuU2hhZGVyQ2h1bmsuY29sb3JfcGFyc19mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay51dl9wYXJzX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLnV2Ml9wYXJzX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLm1hcF9wYXJzX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLmFscGhhbWFwX3BhcnNfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsuYW9tYXBfcGFyc19mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5saWdodG1hcF9wYXJzX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLmVtaXNzaXZlbWFwX3BhcnNfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsuZW52bWFwX3BhcnNfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsuZm9nX3BhcnNfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsubGlnaHRzX3Bob25nX3BhcnNfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsuc2hhZG93bWFwX3BhcnNfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsuYnVtcG1hcF9wYXJzX2ZyYWdtZW50LFxuVEhSRUUuU2hhZGVyQ2h1bmsubm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsuc3BlY3VsYXJtYXBfcGFyc19mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50LFwidm9pZCBtYWluKCkge1xcblxcdHZlYzMgb3V0Z29pbmdMaWdodCA9IHZlYzMoIDAuMCApO1xcblxcdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggZGlmZnVzZSwgb3BhY2l0eSApO1xcblxcdHZlYzMgdG90YWxBbWJpZW50TGlnaHQgPSBhbWJpZW50TGlnaHRDb2xvcjtcXG5cXHR2ZWMzIHRvdGFsRW1pc3NpdmVMaWdodCA9IGVtaXNzaXZlO1xcblxcdHZlYzMgc2hhZG93TWFzayA9IHZlYzMoIDEuMCApO1wiLFRIUkVFLlNoYWRlckNodW5rLmxvZ2RlcHRoYnVmX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLm1hcF9mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5jb2xvcl9mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5hbHBoYW1hcF9mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5hbHBoYXRlc3RfZnJhZ21lbnQsXG5USFJFRS5TaGFkZXJDaHVuay5zcGVjdWxhcm1hcF9mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5ub3JtYWxfcGhvbmdfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsubGlnaHRtYXBfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsuaGVtaWxpZ2h0X2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLmFvbWFwX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLmVtaXNzaXZlbWFwX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLmxpZ2h0c19waG9uZ19mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5zaGFkb3dtYXBfZnJhZ21lbnQsXCJ0b3RhbERpZmZ1c2VMaWdodCAqPSBzaGFkb3dNYXNrO1xcbnRvdGFsU3BlY3VsYXJMaWdodCAqPSBzaGFkb3dNYXNrO1xcbiNpZmRlZiBNRVRBTFxcblxcdG91dGdvaW5nTGlnaHQgKz0gZGlmZnVzZUNvbG9yLnJnYiAqICggdG90YWxEaWZmdXNlTGlnaHQgKyB0b3RhbEFtYmllbnRMaWdodCApICogc3BlY3VsYXIgKyB0b3RhbFNwZWN1bGFyTGlnaHQgKyB0b3RhbEVtaXNzaXZlTGlnaHQ7XFxuI2Vsc2VcXG5cXHRvdXRnb2luZ0xpZ2h0ICs9IGRpZmZ1c2VDb2xvci5yZ2IgKiAoIHRvdGFsRGlmZnVzZUxpZ2h0ICsgdG90YWxBbWJpZW50TGlnaHQgKSArIHRvdGFsU3BlY3VsYXJMaWdodCArIHRvdGFsRW1pc3NpdmVMaWdodDtcXG4jZW5kaWZcIixcblRIUkVFLlNoYWRlckNodW5rLmVudm1hcF9mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5saW5lYXJfdG9fZ2FtbWFfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsuZm9nX2ZyYWdtZW50LFwiXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggb3V0Z29pbmdMaWdodCwgZGlmZnVzZUNvbG9yLmEgKTtcXG59XCJdLmpvaW4oXCJcXG5cIil9LHBvaW50czp7dW5pZm9ybXM6VEhSRUUuVW5pZm9ybXNVdGlscy5tZXJnZShbVEhSRUUuVW5pZm9ybXNMaWIucG9pbnRzLFRIUkVFLlVuaWZvcm1zTGliLnNoYWRvd21hcF0pLHZlcnRleFNoYWRlcjpbXCJ1bmlmb3JtIGZsb2F0IHNpemU7XFxudW5pZm9ybSBmbG9hdCBzY2FsZTtcIixUSFJFRS5TaGFkZXJDaHVuay5jb21tb24sVEhSRUUuU2hhZGVyQ2h1bmsuY29sb3JfcGFyc192ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsuc2hhZG93bWFwX3BhcnNfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLmxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4LFwidm9pZCBtYWluKCkge1wiLFRIUkVFLlNoYWRlckNodW5rLmNvbG9yX3ZlcnRleCxcblwiXFx0dmVjNCBtdlBvc2l0aW9uID0gbW9kZWxWaWV3TWF0cml4ICogdmVjNCggcG9zaXRpb24sIDEuMCApO1xcblxcdCNpZmRlZiBVU0VfU0laRUFUVEVOVUFUSU9OXFxuXFx0XFx0Z2xfUG9pbnRTaXplID0gc2l6ZSAqICggc2NhbGUgLyBsZW5ndGgoIG12UG9zaXRpb24ueHl6ICkgKTtcXG5cXHQjZWxzZVxcblxcdFxcdGdsX1BvaW50U2l6ZSA9IHNpemU7XFxuXFx0I2VuZGlmXFxuXFx0Z2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbXZQb3NpdGlvbjtcIixUSFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl92ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsud29ybGRwb3NfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLnNoYWRvd21hcF92ZXJ0ZXgsXCJ9XCJdLmpvaW4oXCJcXG5cIiksZnJhZ21lbnRTaGFkZXI6W1widW5pZm9ybSB2ZWMzIHBzQ29sb3I7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1wiLFRIUkVFLlNoYWRlckNodW5rLmNvbW1vbixUSFJFRS5TaGFkZXJDaHVuay5jb2xvcl9wYXJzX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLm1hcF9wYXJ0aWNsZV9wYXJzX2ZyYWdtZW50LFxuVEhSRUUuU2hhZGVyQ2h1bmsuZm9nX3BhcnNfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsuc2hhZG93bWFwX3BhcnNfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsubG9nZGVwdGhidWZfcGFyc19mcmFnbWVudCxcInZvaWQgbWFpbigpIHtcXG5cXHR2ZWMzIG91dGdvaW5nTGlnaHQgPSB2ZWMzKCAwLjAgKTtcXG5cXHR2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIHBzQ29sb3IsIG9wYWNpdHkgKTtcXG5cXHR2ZWMzIHNoYWRvd01hc2sgPSB2ZWMzKCAxLjAgKTtcIixUSFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl9mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5tYXBfcGFydGljbGVfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsuY29sb3JfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsuYWxwaGF0ZXN0X2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLnNoYWRvd21hcF9mcmFnbWVudCxcIlxcdG91dGdvaW5nTGlnaHQgPSBkaWZmdXNlQ29sb3IucmdiICogc2hhZG93TWFzaztcIixUSFJFRS5TaGFkZXJDaHVuay5mb2dfZnJhZ21lbnQsXG5cIlxcdGdsX0ZyYWdDb2xvciA9IHZlYzQoIG91dGdvaW5nTGlnaHQsIGRpZmZ1c2VDb2xvci5hICk7XFxufVwiXS5qb2luKFwiXFxuXCIpfSxkYXNoZWQ6e3VuaWZvcm1zOlRIUkVFLlVuaWZvcm1zVXRpbHMubWVyZ2UoW1RIUkVFLlVuaWZvcm1zTGliLmNvbW1vbixUSFJFRS5Vbmlmb3Jtc0xpYi5mb2cse3NjYWxlOnt0eXBlOlwiZlwiLHZhbHVlOjF9LGRhc2hTaXplOnt0eXBlOlwiZlwiLHZhbHVlOjF9LHRvdGFsU2l6ZTp7dHlwZTpcImZcIix2YWx1ZToyfX1dKSx2ZXJ0ZXhTaGFkZXI6W1widW5pZm9ybSBmbG9hdCBzY2FsZTtcXG5hdHRyaWJ1dGUgZmxvYXQgbGluZURpc3RhbmNlO1xcbnZhcnlpbmcgZmxvYXQgdkxpbmVEaXN0YW5jZTtcIixUSFJFRS5TaGFkZXJDaHVuay5jb21tb24sVEhSRUUuU2hhZGVyQ2h1bmsuY29sb3JfcGFyc192ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsubG9nZGVwdGhidWZfcGFyc192ZXJ0ZXgsXCJ2b2lkIG1haW4oKSB7XCIsVEhSRUUuU2hhZGVyQ2h1bmsuY29sb3JfdmVydGV4LFwiXFx0dkxpbmVEaXN0YW5jZSA9IHNjYWxlICogbGluZURpc3RhbmNlO1xcblxcdHZlYzQgbXZQb3NpdGlvbiA9IG1vZGVsVmlld01hdHJpeCAqIHZlYzQoIHBvc2l0aW9uLCAxLjAgKTtcXG5cXHRnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiBtdlBvc2l0aW9uO1wiLFxuVEhSRUUuU2hhZGVyQ2h1bmsubG9nZGVwdGhidWZfdmVydGV4LFwifVwiXS5qb2luKFwiXFxuXCIpLGZyYWdtZW50U2hhZGVyOltcInVuaWZvcm0gdmVjMyBkaWZmdXNlO1xcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcXG51bmlmb3JtIGZsb2F0IGRhc2hTaXplO1xcbnVuaWZvcm0gZmxvYXQgdG90YWxTaXplO1xcbnZhcnlpbmcgZmxvYXQgdkxpbmVEaXN0YW5jZTtcIixUSFJFRS5TaGFkZXJDaHVuay5jb21tb24sVEhSRUUuU2hhZGVyQ2h1bmsuY29sb3JfcGFyc19mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5mb2dfcGFyc19mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50LFwidm9pZCBtYWluKCkge1xcblxcdGlmICggbW9kKCB2TGluZURpc3RhbmNlLCB0b3RhbFNpemUgKSA+IGRhc2hTaXplICkge1xcblxcdFxcdGRpc2NhcmQ7XFxuXFx0fVxcblxcdHZlYzMgb3V0Z29pbmdMaWdodCA9IHZlYzMoIDAuMCApO1xcblxcdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggZGlmZnVzZSwgb3BhY2l0eSApO1wiLFxuVEhSRUUuU2hhZGVyQ2h1bmsubG9nZGVwdGhidWZfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsuY29sb3JfZnJhZ21lbnQsXCJcXHRvdXRnb2luZ0xpZ2h0ID0gZGlmZnVzZUNvbG9yLnJnYjtcIixUSFJFRS5TaGFkZXJDaHVuay5mb2dfZnJhZ21lbnQsXCJcXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCBvdXRnb2luZ0xpZ2h0LCBkaWZmdXNlQ29sb3IuYSApO1xcbn1cIl0uam9pbihcIlxcblwiKX0sZGVwdGg6e3VuaWZvcm1zOnttTmVhcjp7dHlwZTpcImZcIix2YWx1ZToxfSxtRmFyOnt0eXBlOlwiZlwiLHZhbHVlOjJFM30sb3BhY2l0eTp7dHlwZTpcImZcIix2YWx1ZToxfX0sdmVydGV4U2hhZGVyOltUSFJFRS5TaGFkZXJDaHVuay5jb21tb24sVEhSRUUuU2hhZGVyQ2h1bmsubW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsubG9nZGVwdGhidWZfcGFyc192ZXJ0ZXgsXCJ2b2lkIG1haW4oKSB7XCIsVEhSRUUuU2hhZGVyQ2h1bmsuYmVnaW5fdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLm1vcnBodGFyZ2V0X3ZlcnRleCxcblRIUkVFLlNoYWRlckNodW5rLnByb2plY3RfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLmxvZ2RlcHRoYnVmX3ZlcnRleCxcIn1cIl0uam9pbihcIlxcblwiKSxmcmFnbWVudFNoYWRlcjpbXCJ1bmlmb3JtIGZsb2F0IG1OZWFyO1xcbnVuaWZvcm0gZmxvYXQgbUZhcjtcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XCIsVEhSRUUuU2hhZGVyQ2h1bmsuY29tbW9uLFRIUkVFLlNoYWRlckNodW5rLmxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQsXCJ2b2lkIG1haW4oKSB7XCIsVEhSRUUuU2hhZGVyQ2h1bmsubG9nZGVwdGhidWZfZnJhZ21lbnQsXCJcXHQjaWZkZWYgVVNFX0xPR0RFUFRIQlVGX0VYVFxcblxcdFxcdGZsb2F0IGRlcHRoID0gZ2xfRnJhZ0RlcHRoRVhUIC8gZ2xfRnJhZ0Nvb3JkLnc7XFxuXFx0I2Vsc2VcXG5cXHRcXHRmbG9hdCBkZXB0aCA9IGdsX0ZyYWdDb29yZC56IC8gZ2xfRnJhZ0Nvb3JkLnc7XFxuXFx0I2VuZGlmXFxuXFx0ZmxvYXQgY29sb3IgPSAxLjAgLSBzbW9vdGhzdGVwKCBtTmVhciwgbUZhciwgZGVwdGggKTtcXG5cXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCB2ZWMzKCBjb2xvciApLCBvcGFjaXR5ICk7XFxufVwiXS5qb2luKFwiXFxuXCIpfSxcbm5vcm1hbDp7dW5pZm9ybXM6e29wYWNpdHk6e3R5cGU6XCJmXCIsdmFsdWU6MX19LHZlcnRleFNoYWRlcjpbXCJ2YXJ5aW5nIHZlYzMgdk5vcm1hbDtcIixUSFJFRS5TaGFkZXJDaHVuay5jb21tb24sVEhSRUUuU2hhZGVyQ2h1bmsubW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsubG9nZGVwdGhidWZfcGFyc192ZXJ0ZXgsXCJ2b2lkIG1haW4oKSB7XFxuXFx0dk5vcm1hbCA9IG5vcm1hbGl6ZSggbm9ybWFsTWF0cml4ICogbm9ybWFsICk7XCIsVEhSRUUuU2hhZGVyQ2h1bmsuYmVnaW5fdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLm1vcnBodGFyZ2V0X3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5wcm9qZWN0X3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl92ZXJ0ZXgsXCJ9XCJdLmpvaW4oXCJcXG5cIiksZnJhZ21lbnRTaGFkZXI6W1widW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbnZhcnlpbmcgdmVjMyB2Tm9ybWFsO1wiLFRIUkVFLlNoYWRlckNodW5rLmNvbW1vbixcblRIUkVFLlNoYWRlckNodW5rLmxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQsXCJ2b2lkIG1haW4oKSB7XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggMC41ICogbm9ybWFsaXplKCB2Tm9ybWFsICkgKyAwLjUsIG9wYWNpdHkgKTtcIixUSFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl9mcmFnbWVudCxcIn1cIl0uam9pbihcIlxcblwiKX0sY3ViZTp7dW5pZm9ybXM6e3RDdWJlOnt0eXBlOlwidFwiLHZhbHVlOm51bGx9LHRGbGlwOnt0eXBlOlwiZlwiLHZhbHVlOi0xfX0sdmVydGV4U2hhZGVyOltcInZhcnlpbmcgdmVjMyB2V29ybGRQb3NpdGlvbjtcIixUSFJFRS5TaGFkZXJDaHVuay5jb21tb24sVEhSRUUuU2hhZGVyQ2h1bmsubG9nZGVwdGhidWZfcGFyc192ZXJ0ZXgsXCJ2b2lkIG1haW4oKSB7XFxuXFx0dldvcmxkUG9zaXRpb24gPSB0cmFuc2Zvcm1EaXJlY3Rpb24oIHBvc2l0aW9uLCBtb2RlbE1hdHJpeCApO1xcblxcdGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG1vZGVsVmlld01hdHJpeCAqIHZlYzQoIHBvc2l0aW9uLCAxLjAgKTtcIixcblRIUkVFLlNoYWRlckNodW5rLmxvZ2RlcHRoYnVmX3ZlcnRleCxcIn1cIl0uam9pbihcIlxcblwiKSxmcmFnbWVudFNoYWRlcjpbXCJ1bmlmb3JtIHNhbXBsZXJDdWJlIHRDdWJlO1xcbnVuaWZvcm0gZmxvYXQgdEZsaXA7XFxudmFyeWluZyB2ZWMzIHZXb3JsZFBvc2l0aW9uO1wiLFRIUkVFLlNoYWRlckNodW5rLmNvbW1vbixUSFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50LFwidm9pZCBtYWluKCkge1xcblxcdGdsX0ZyYWdDb2xvciA9IHRleHR1cmVDdWJlKCB0Q3ViZSwgdmVjMyggdEZsaXAgKiB2V29ybGRQb3NpdGlvbi54LCB2V29ybGRQb3NpdGlvbi55eiApICk7XCIsVEhSRUUuU2hhZGVyQ2h1bmsubG9nZGVwdGhidWZfZnJhZ21lbnQsXCJ9XCJdLmpvaW4oXCJcXG5cIil9LGVxdWlyZWN0Ont1bmlmb3Jtczp7dEVxdWlyZWN0Ont0eXBlOlwidFwiLHZhbHVlOm51bGx9LHRGbGlwOnt0eXBlOlwiZlwiLHZhbHVlOi0xfX0sdmVydGV4U2hhZGVyOltcInZhcnlpbmcgdmVjMyB2V29ybGRQb3NpdGlvbjtcIixcblRIUkVFLlNoYWRlckNodW5rLmNvbW1vbixUSFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleCxcInZvaWQgbWFpbigpIHtcXG5cXHR2V29ybGRQb3NpdGlvbiA9IHRyYW5zZm9ybURpcmVjdGlvbiggcG9zaXRpb24sIG1vZGVsTWF0cml4ICk7XFxuXFx0Z2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbW9kZWxWaWV3TWF0cml4ICogdmVjNCggcG9zaXRpb24sIDEuMCApO1wiLFRIUkVFLlNoYWRlckNodW5rLmxvZ2RlcHRoYnVmX3ZlcnRleCxcIn1cIl0uam9pbihcIlxcblwiKSxmcmFnbWVudFNoYWRlcjpbXCJ1bmlmb3JtIHNhbXBsZXIyRCB0RXF1aXJlY3Q7XFxudW5pZm9ybSBmbG9hdCB0RmxpcDtcXG52YXJ5aW5nIHZlYzMgdldvcmxkUG9zaXRpb247XCIsVEhSRUUuU2hhZGVyQ2h1bmsuY29tbW9uLFRIUkVFLlNoYWRlckNodW5rLmxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQsXCJ2b2lkIG1haW4oKSB7XFxudmVjMyBkaXJlY3Rpb24gPSBub3JtYWxpemUoIHZXb3JsZFBvc2l0aW9uICk7XFxudmVjMiBzYW1wbGVVVjtcXG5zYW1wbGVVVi55ID0gc2F0dXJhdGUoIHRGbGlwICogZGlyZWN0aW9uLnkgKiAtMC41ICsgMC41ICk7XFxuc2FtcGxlVVYueCA9IGF0YW4oIGRpcmVjdGlvbi56LCBkaXJlY3Rpb24ueCApICogUkVDSVBST0NBTF9QSTIgKyAwLjU7XFxuZ2xfRnJhZ0NvbG9yID0gdGV4dHVyZTJEKCB0RXF1aXJlY3QsIHNhbXBsZVVWICk7XCIsXG5USFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl9mcmFnbWVudCxcIn1cIl0uam9pbihcIlxcblwiKX0sZGVwdGhSR0JBOnt1bmlmb3Jtczp7fSx2ZXJ0ZXhTaGFkZXI6W1RIUkVFLlNoYWRlckNodW5rLmNvbW1vbixUSFJFRS5TaGFkZXJDaHVuay5tb3JwaHRhcmdldF9wYXJzX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5za2lubmluZ19wYXJzX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleCxcInZvaWQgbWFpbigpIHtcIixUSFJFRS5TaGFkZXJDaHVuay5za2luYmFzZV92ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsuYmVnaW5fdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLm1vcnBodGFyZ2V0X3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5za2lubmluZ192ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsucHJvamVjdF92ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsubG9nZGVwdGhidWZfdmVydGV4LFwifVwiXS5qb2luKFwiXFxuXCIpLGZyYWdtZW50U2hhZGVyOltUSFJFRS5TaGFkZXJDaHVuay5jb21tb24sXG5USFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50LFwidmVjNCBwYWNrX2RlcHRoKCBjb25zdCBpbiBmbG9hdCBkZXB0aCApIHtcXG5cXHRjb25zdCB2ZWM0IGJpdF9zaGlmdCA9IHZlYzQoIDI1Ni4wICogMjU2LjAgKiAyNTYuMCwgMjU2LjAgKiAyNTYuMCwgMjU2LjAsIDEuMCApO1xcblxcdGNvbnN0IHZlYzQgYml0X21hc2sgPSB2ZWM0KCAwLjAsIDEuMCAvIDI1Ni4wLCAxLjAgLyAyNTYuMCwgMS4wIC8gMjU2LjAgKTtcXG5cXHR2ZWM0IHJlcyA9IG1vZCggZGVwdGggKiBiaXRfc2hpZnQgKiB2ZWM0KCAyNTUgKSwgdmVjNCggMjU2ICkgKSAvIHZlYzQoIDI1NSApO1xcblxcdHJlcyAtPSByZXMueHh5eiAqIGJpdF9tYXNrO1xcblxcdHJldHVybiByZXM7XFxufVxcbnZvaWQgbWFpbigpIHtcIixUSFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl9mcmFnbWVudCxcIlxcdCNpZmRlZiBVU0VfTE9HREVQVEhCVUZfRVhUXFxuXFx0XFx0Z2xfRnJhZ0RhdGFbIDAgXSA9IHBhY2tfZGVwdGgoIGdsX0ZyYWdEZXB0aEVYVCApO1xcblxcdCNlbHNlXFxuXFx0XFx0Z2xfRnJhZ0RhdGFbIDAgXSA9IHBhY2tfZGVwdGgoIGdsX0ZyYWdDb29yZC56ICk7XFxuXFx0I2VuZGlmXFxufVwiXS5qb2luKFwiXFxuXCIpfSxcbmRpc3RhbmNlUkdCQTp7dW5pZm9ybXM6e2xpZ2h0UG9zOnt0eXBlOlwidjNcIix2YWx1ZTpuZXcgVEhSRUUuVmVjdG9yMygwLDAsMCl9fSx2ZXJ0ZXhTaGFkZXI6W1widmFyeWluZyB2ZWM0IHZXb3JsZFBvc2l0aW9uO1wiLFRIUkVFLlNoYWRlckNodW5rLmNvbW1vbixUSFJFRS5TaGFkZXJDaHVuay5tb3JwaHRhcmdldF9wYXJzX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5za2lubmluZ19wYXJzX3ZlcnRleCxcInZvaWQgbWFpbigpIHtcIixUSFJFRS5TaGFkZXJDaHVuay5za2luYmFzZV92ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsuYmVnaW5fdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLm1vcnBodGFyZ2V0X3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5za2lubmluZ192ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsucHJvamVjdF92ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsud29ybGRwb3NfdmVydGV4LFwidldvcmxkUG9zaXRpb24gPSB3b3JsZFBvc2l0aW9uO1xcbn1cIl0uam9pbihcIlxcblwiKSxmcmFnbWVudFNoYWRlcjpbXCJ1bmlmb3JtIHZlYzMgbGlnaHRQb3M7XFxudmFyeWluZyB2ZWM0IHZXb3JsZFBvc2l0aW9uO1wiLFxuVEhSRUUuU2hhZGVyQ2h1bmsuY29tbW9uLFwidmVjNCBwYWNrMUsgKCBmbG9hdCBkZXB0aCApIHtcXG4gICBkZXB0aCAvPSAxMDAwLjA7XFxuICAgY29uc3QgdmVjNCBiaXRTaCA9IHZlYzQoIDI1Ni4wICogMjU2LjAgKiAyNTYuMCwgMjU2LjAgKiAyNTYuMCwgMjU2LjAsIDEuMCApO1xcblxcdGNvbnN0IHZlYzQgYml0TXNrID0gdmVjNCggMC4wLCAxLjAgLyAyNTYuMCwgMS4wIC8gMjU2LjAsIDEuMCAvIDI1Ni4wICk7XFxuXFx0dmVjNCByZXMgPSBmcmFjdCggZGVwdGggKiBiaXRTaCApO1xcblxcdHJlcyAtPSByZXMueHh5eiAqIGJpdE1zaztcXG5cXHRyZXR1cm4gcmVzOyBcXG59XFxuZmxvYXQgdW5wYWNrMUsgKCB2ZWM0IGNvbG9yICkge1xcblxcdGNvbnN0IHZlYzQgYml0U2ggPSB2ZWM0KCAxLjAgLyAoIDI1Ni4wICogMjU2LjAgKiAyNTYuMCApLCAxLjAgLyAoIDI1Ni4wICogMjU2LjAgKSwgMS4wIC8gMjU2LjAsIDEuMCApO1xcblxcdHJldHVybiBkb3QoIGNvbG9yLCBiaXRTaCApICogMTAwMC4wO1xcbn1cXG52b2lkIG1haW4gKCkge1xcblxcdGdsX0ZyYWdDb2xvciA9IHBhY2sxSyggbGVuZ3RoKCB2V29ybGRQb3NpdGlvbi54eXogLSBsaWdodFBvcy54eXogKSApO1xcbn1cIl0uam9pbihcIlxcblwiKX19O1xuVEhSRUUuV2ViR0xSZW5kZXJlcj1mdW5jdGlvbihhKXtmdW5jdGlvbiBiKGEsYixjLGQpeyEwPT09RyYmKGEqPWQsYio9ZCxjKj1kKTtyLmNsZWFyQ29sb3IoYSxiLGMsZCl9ZnVuY3Rpb24gYygpe0kuaW5pdCgpO3Iudmlld3BvcnQobmEsb2EscGEscWEpO2IoVS5yLFUuZyxVLmIsWCl9ZnVuY3Rpb24gZCgpe3JhPUFhPW51bGw7c2E9XCJcIjt0YT0tMTt3YT0hMDtJLnJlc2V0KCl9ZnVuY3Rpb24gZShhKXthLnByZXZlbnREZWZhdWx0KCk7ZCgpO2MoKTtXLmNsZWFyKCl9ZnVuY3Rpb24gZyhhKXthPWEudGFyZ2V0O2EucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImRpc3Bvc2VcIixnKTthOnt2YXIgYj1XLmdldChhKTtpZihhLmltYWdlJiZiLl9faW1hZ2VfX3dlYmdsVGV4dHVyZUN1YmUpci5kZWxldGVUZXh0dXJlKGIuX19pbWFnZV9fd2ViZ2xUZXh0dXJlQ3ViZSk7ZWxzZXtpZih2b2lkIDA9PT1iLl9fd2ViZ2xJbml0KWJyZWFrIGE7ci5kZWxldGVUZXh0dXJlKGIuX193ZWJnbFRleHR1cmUpfVcuZGVsZXRlKGEpfWxhLnRleHR1cmVzLS19XG5mdW5jdGlvbiBmKGEpe2E9YS50YXJnZXQ7YS5yZW1vdmVFdmVudExpc3RlbmVyKFwiZGlzcG9zZVwiLGYpO3ZhciBiPVcuZ2V0KGEpLGM9Vy5nZXQoYS50ZXh0dXJlKTtpZihhJiZ2b2lkIDAhPT1jLl9fd2ViZ2xUZXh0dXJlKXtyLmRlbGV0ZVRleHR1cmUoYy5fX3dlYmdsVGV4dHVyZSk7aWYoYSBpbnN0YW5jZW9mIFRIUkVFLldlYkdMUmVuZGVyVGFyZ2V0Q3ViZSlmb3IoYz0wOzY+YztjKyspci5kZWxldGVGcmFtZWJ1ZmZlcihiLl9fd2ViZ2xGcmFtZWJ1ZmZlcltjXSksci5kZWxldGVSZW5kZXJidWZmZXIoYi5fX3dlYmdsUmVuZGVyYnVmZmVyW2NdKTtlbHNlIHIuZGVsZXRlRnJhbWVidWZmZXIoYi5fX3dlYmdsRnJhbWVidWZmZXIpLHIuZGVsZXRlUmVuZGVyYnVmZmVyKGIuX193ZWJnbFJlbmRlcmJ1ZmZlcik7Vy5kZWxldGUoYS50ZXh0dXJlKTtXLmRlbGV0ZShhKX1sYS50ZXh0dXJlcy0tfWZ1bmN0aW9uIGgoYSl7YT1hLnRhcmdldDthLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJkaXNwb3NlXCIsXG5oKTtsKGEpO1cuZGVsZXRlKGEpfWZ1bmN0aW9uIGwoYSl7dmFyIGI9Vy5nZXQoYSkucHJvZ3JhbTthLnByb2dyYW09dm9pZCAwO3ZvaWQgMCE9PWImJnVhLnJlbGVhc2VQcm9ncmFtKGIpfWZ1bmN0aW9uIGsoYSxiKXtyZXR1cm4gYlswXS1hWzBdfWZ1bmN0aW9uIG0oYSxiKXtyZXR1cm4gYS5vYmplY3QucmVuZGVyT3JkZXIhPT1iLm9iamVjdC5yZW5kZXJPcmRlcj9hLm9iamVjdC5yZW5kZXJPcmRlci1iLm9iamVjdC5yZW5kZXJPcmRlcjphLm1hdGVyaWFsLmlkIT09Yi5tYXRlcmlhbC5pZD9hLm1hdGVyaWFsLmlkLWIubWF0ZXJpYWwuaWQ6YS56IT09Yi56P2Euei1iLno6YS5pZC1iLmlkfWZ1bmN0aW9uIHAoYSxiKXtyZXR1cm4gYS5vYmplY3QucmVuZGVyT3JkZXIhPT1iLm9iamVjdC5yZW5kZXJPcmRlcj9hLm9iamVjdC5yZW5kZXJPcmRlci1iLm9iamVjdC5yZW5kZXJPcmRlcjphLnohPT1iLno/Yi56LWEuejphLmlkLWIuaWR9ZnVuY3Rpb24gbihhLGIsYyxkLGUpe3ZhciBmO2MudHJhbnNwYXJlbnQ/XG4oZD1aLGY9KytmYSk6KGQ9Y2EsZj0rK2dhKTtmPWRbZl07dm9pZCAwIT09Zj8oZi5pZD1hLmlkLGYub2JqZWN0PWEsZi5nZW9tZXRyeT1iLGYubWF0ZXJpYWw9YyxmLno9Vi56LGYuZ3JvdXA9ZSk6KGY9e2lkOmEuaWQsb2JqZWN0OmEsZ2VvbWV0cnk6YixtYXRlcmlhbDpjLHo6Vi56LGdyb3VwOmV9LGQucHVzaChmKSl9ZnVuY3Rpb24gcShhLGIpe2lmKCExIT09YS52aXNpYmxlKXtpZigwIT09KGEuY2hhbm5lbHMubWFzayZiLmNoYW5uZWxzLm1hc2spKWlmKGEgaW5zdGFuY2VvZiBUSFJFRS5MaWdodClkYS5wdXNoKGEpO2Vsc2UgaWYoYSBpbnN0YW5jZW9mIFRIUkVFLlNwcml0ZSllYS5wdXNoKGEpO2Vsc2UgaWYoYSBpbnN0YW5jZW9mIFRIUkVFLkxlbnNGbGFyZSlqYS5wdXNoKGEpO2Vsc2UgaWYoYSBpbnN0YW5jZW9mIFRIUkVFLkltbWVkaWF0ZVJlbmRlck9iamVjdCkhMD09PWFhLnNvcnRPYmplY3RzJiYoVi5zZXRGcm9tTWF0cml4UG9zaXRpb24oYS5tYXRyaXhXb3JsZCksVi5hcHBseVByb2plY3Rpb24oeGEpKSxcbm4oYSxudWxsLGEubWF0ZXJpYWwsVi56LG51bGwpO2Vsc2UgaWYoYSBpbnN0YW5jZW9mIFRIUkVFLk1lc2h8fGEgaW5zdGFuY2VvZiBUSFJFRS5MaW5lfHxhIGluc3RhbmNlb2YgVEhSRUUuUG9pbnRzKWlmKGEgaW5zdGFuY2VvZiBUSFJFRS5Ta2lubmVkTWVzaCYmYS5za2VsZXRvbi51cGRhdGUoKSwhMT09PWEuZnJ1c3R1bUN1bGxlZHx8ITA9PT1CYS5pbnRlcnNlY3RzT2JqZWN0KGEpKXt2YXIgYz1hLm1hdGVyaWFsO2lmKCEwPT09Yy52aXNpYmxlKXshMD09PWFhLnNvcnRPYmplY3RzJiYoVi5zZXRGcm9tTWF0cml4UG9zaXRpb24oYS5tYXRyaXhXb3JsZCksVi5hcHBseVByb2plY3Rpb24oeGEpKTt2YXIgZD12YS51cGRhdGUoYSk7aWYoYyBpbnN0YW5jZW9mIFRIUkVFLk1lc2hGYWNlTWF0ZXJpYWwpZm9yKHZhciBlPWQuZ3JvdXBzLGY9Yy5tYXRlcmlhbHMsYz0wLGc9ZS5sZW5ndGg7YzxnO2MrKyl7dmFyIGg9ZVtjXSxsPWZbaC5tYXRlcmlhbEluZGV4XTshMD09PWwudmlzaWJsZSYmXG5uKGEsZCxsLFYueixoKX1lbHNlIG4oYSxkLGMsVi56LG51bGwpfX1kPWEuY2hpbGRyZW47Yz0wO2ZvcihnPWQubGVuZ3RoO2M8ZztjKyspcShkW2NdLGIpfX1mdW5jdGlvbiBzKGEsYixjLGQsZSl7Zm9yKHZhciBmPTAsZz1hLmxlbmd0aDtmPGc7ZisrKXt2YXIgaD1hW2ZdLGw9aC5vYmplY3Qsaz1oLmdlb21ldHJ5LG49dm9pZCAwPT09ZT9oLm1hdGVyaWFsOmUsaD1oLmdyb3VwO2wubW9kZWxWaWV3TWF0cml4Lm11bHRpcGx5TWF0cmljZXMoYi5tYXRyaXhXb3JsZEludmVyc2UsbC5tYXRyaXhXb3JsZCk7bC5ub3JtYWxNYXRyaXguZ2V0Tm9ybWFsTWF0cml4KGwubW9kZWxWaWV3TWF0cml4KTtpZihsIGluc3RhbmNlb2YgVEhSRUUuSW1tZWRpYXRlUmVuZGVyT2JqZWN0KXt0KG4pO3ZhciBtPXYoYixjLGQsbixsKTtzYT1cIlwiO2wucmVuZGVyKGZ1bmN0aW9uKGEpe2FhLnJlbmRlckJ1ZmZlckltbWVkaWF0ZShhLG0sbil9KX1lbHNlIGFhLnJlbmRlckJ1ZmZlckRpcmVjdChiLGMsZCxrLFxubixsLGgpfX1mdW5jdGlvbiB0KGEpe2Euc2lkZSE9PVRIUkVFLkRvdWJsZVNpZGU/SS5lbmFibGUoci5DVUxMX0ZBQ0UpOkkuZGlzYWJsZShyLkNVTExfRkFDRSk7SS5zZXRGbGlwU2lkZWQoYS5zaWRlPT09VEhSRUUuQmFja1NpZGUpOyEwPT09YS50cmFuc3BhcmVudD9JLnNldEJsZW5kaW5nKGEuYmxlbmRpbmcsYS5ibGVuZEVxdWF0aW9uLGEuYmxlbmRTcmMsYS5ibGVuZERzdCxhLmJsZW5kRXF1YXRpb25BbHBoYSxhLmJsZW5kU3JjQWxwaGEsYS5ibGVuZERzdEFscGhhKTpJLnNldEJsZW5kaW5nKFRIUkVFLk5vQmxlbmRpbmcpO0kuc2V0RGVwdGhGdW5jKGEuZGVwdGhGdW5jKTtJLnNldERlcHRoVGVzdChhLmRlcHRoVGVzdCk7SS5zZXREZXB0aFdyaXRlKGEuZGVwdGhXcml0ZSk7SS5zZXRDb2xvcldyaXRlKGEuY29sb3JXcml0ZSk7SS5zZXRQb2x5Z29uT2Zmc2V0KGEucG9seWdvbk9mZnNldCxhLnBvbHlnb25PZmZzZXRGYWN0b3IsYS5wb2x5Z29uT2Zmc2V0VW5pdHMpfWZ1bmN0aW9uIHYoYSxcbmIsYyxkLGUpe3lhPTA7dmFyIGY9Vy5nZXQoZCk7aWYoZC5uZWVkc1VwZGF0ZXx8IWYucHJvZ3JhbSl7YTp7dmFyIGc9Vy5nZXQoZCksaz11YS5nZXRQYXJhbWV0ZXJzKGQsYixjLGUpLG49dWEuZ2V0UHJvZ3JhbUNvZGUoZCxrKSxtPWcucHJvZ3JhbSxxPSEwO2lmKHZvaWQgMD09PW0pZC5hZGRFdmVudExpc3RlbmVyKFwiZGlzcG9zZVwiLGgpO2Vsc2UgaWYobS5jb2RlIT09bilsKGQpO2Vsc2UgaWYodm9pZCAwIT09ay5zaGFkZXJJRClicmVhayBhO2Vsc2UgcT0hMTtxJiYoay5zaGFkZXJJRD8obT1USFJFRS5TaGFkZXJMaWJbay5zaGFkZXJJRF0sZy5fX3dlYmdsU2hhZGVyPXtuYW1lOmQudHlwZSx1bmlmb3JtczpUSFJFRS5Vbmlmb3Jtc1V0aWxzLmNsb25lKG0udW5pZm9ybXMpLHZlcnRleFNoYWRlcjptLnZlcnRleFNoYWRlcixmcmFnbWVudFNoYWRlcjptLmZyYWdtZW50U2hhZGVyfSk6Zy5fX3dlYmdsU2hhZGVyPXtuYW1lOmQudHlwZSx1bmlmb3JtczpkLnVuaWZvcm1zLHZlcnRleFNoYWRlcjpkLnZlcnRleFNoYWRlcixcbmZyYWdtZW50U2hhZGVyOmQuZnJhZ21lbnRTaGFkZXJ9LGQuX193ZWJnbFNoYWRlcj1nLl9fd2ViZ2xTaGFkZXIsbT11YS5hY3F1aXJlUHJvZ3JhbShkLGssbiksZy5wcm9ncmFtPW0sZC5wcm9ncmFtPW0pO2s9bS5nZXRBdHRyaWJ1dGVzKCk7aWYoZC5tb3JwaFRhcmdldHMpZm9yKG49ZC5udW1TdXBwb3J0ZWRNb3JwaFRhcmdldHM9MDtuPGFhLm1heE1vcnBoVGFyZ2V0cztuKyspMDw9a1tcIm1vcnBoVGFyZ2V0XCIrbl0mJmQubnVtU3VwcG9ydGVkTW9ycGhUYXJnZXRzKys7aWYoZC5tb3JwaE5vcm1hbHMpZm9yKG49ZC5udW1TdXBwb3J0ZWRNb3JwaE5vcm1hbHM9MDtuPGFhLm1heE1vcnBoTm9ybWFscztuKyspMDw9a1tcIm1vcnBoTm9ybWFsXCIrbl0mJmQubnVtU3VwcG9ydGVkTW9ycGhOb3JtYWxzKys7Zy51bmlmb3Jtc0xpc3Q9W107dmFyIGs9Zy5wcm9ncmFtLmdldFVuaWZvcm1zKCkscDtmb3IocCBpbiBnLl9fd2ViZ2xTaGFkZXIudW5pZm9ybXMpKG49a1twXSkmJmcudW5pZm9ybXNMaXN0LnB1c2goW2cuX193ZWJnbFNoYWRlci51bmlmb3Jtc1twXSxcbm5dKX1kLm5lZWRzVXBkYXRlPSExfW49bT1xPSExO2c9Zi5wcm9ncmFtO3A9Zy5nZXRVbmlmb3JtcygpO2s9Zi5fX3dlYmdsU2hhZGVyLnVuaWZvcm1zO2cuaWQhPT1BYSYmKHIudXNlUHJvZ3JhbShnLnByb2dyYW0pLEFhPWcuaWQsbj1tPXE9ITApO2QuaWQhPT10YSYmKC0xPT09dGEmJihuPSEwKSx0YT1kLmlkLG09ITApO2lmKHF8fGEhPT1yYSlyLnVuaWZvcm1NYXRyaXg0ZnYocC5wcm9qZWN0aW9uTWF0cml4LCExLGEucHJvamVjdGlvbk1hdHJpeC5lbGVtZW50cyksaGEubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlciYmci51bmlmb3JtMWYocC5sb2dEZXB0aEJ1ZkZDLDIvKE1hdGgubG9nKGEuZmFyKzEpL01hdGguTE4yKSksYSE9PXJhJiYocmE9YSksKGQgaW5zdGFuY2VvZiBUSFJFRS5TaGFkZXJNYXRlcmlhbHx8ZCBpbnN0YW5jZW9mIFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsfHxkLmVudk1hcCkmJnZvaWQgMCE9PXAuY2FtZXJhUG9zaXRpb24mJihWLnNldEZyb21NYXRyaXhQb3NpdGlvbihhLm1hdHJpeFdvcmxkKSxcbnIudW5pZm9ybTNmKHAuY2FtZXJhUG9zaXRpb24sVi54LFYueSxWLnopKSwoZCBpbnN0YW5jZW9mIFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsfHxkIGluc3RhbmNlb2YgVEhSRUUuTWVzaExhbWJlcnRNYXRlcmlhbHx8ZCBpbnN0YW5jZW9mIFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsfHxkIGluc3RhbmNlb2YgVEhSRUUuU2hhZGVyTWF0ZXJpYWx8fGQuc2tpbm5pbmcpJiZ2b2lkIDAhPT1wLnZpZXdNYXRyaXgmJnIudW5pZm9ybU1hdHJpeDRmdihwLnZpZXdNYXRyaXgsITEsYS5tYXRyaXhXb3JsZEludmVyc2UuZWxlbWVudHMpO2Quc2tpbm5pbmcmJihlLmJpbmRNYXRyaXgmJnZvaWQgMCE9PXAuYmluZE1hdHJpeCYmci51bmlmb3JtTWF0cml4NGZ2KHAuYmluZE1hdHJpeCwhMSxlLmJpbmRNYXRyaXguZWxlbWVudHMpLGUuYmluZE1hdHJpeEludmVyc2UmJnZvaWQgMCE9PXAuYmluZE1hdHJpeEludmVyc2UmJnIudW5pZm9ybU1hdHJpeDRmdihwLmJpbmRNYXRyaXhJbnZlcnNlLCExLGUuYmluZE1hdHJpeEludmVyc2UuZWxlbWVudHMpLFxuaGEuZmxvYXRWZXJ0ZXhUZXh0dXJlcyYmZS5za2VsZXRvbiYmZS5za2VsZXRvbi51c2VWZXJ0ZXhUZXh0dXJlPyh2b2lkIDAhPT1wLmJvbmVUZXh0dXJlJiYocT13KCksci51bmlmb3JtMWkocC5ib25lVGV4dHVyZSxxKSxhYS5zZXRUZXh0dXJlKGUuc2tlbGV0b24uYm9uZVRleHR1cmUscSkpLHZvaWQgMCE9PXAuYm9uZVRleHR1cmVXaWR0aCYmci51bmlmb3JtMWkocC5ib25lVGV4dHVyZVdpZHRoLGUuc2tlbGV0b24uYm9uZVRleHR1cmVXaWR0aCksdm9pZCAwIT09cC5ib25lVGV4dHVyZUhlaWdodCYmci51bmlmb3JtMWkocC5ib25lVGV4dHVyZUhlaWdodCxlLnNrZWxldG9uLmJvbmVUZXh0dXJlSGVpZ2h0KSk6ZS5za2VsZXRvbiYmZS5za2VsZXRvbi5ib25lTWF0cmljZXMmJnZvaWQgMCE9PXAuYm9uZUdsb2JhbE1hdHJpY2VzJiZyLnVuaWZvcm1NYXRyaXg0ZnYocC5ib25lR2xvYmFsTWF0cmljZXMsITEsZS5za2VsZXRvbi5ib25lTWF0cmljZXMpKTtpZihtKXtjJiZkLmZvZyYmXG4oay5mb2dDb2xvci52YWx1ZT1jLmNvbG9yLGMgaW5zdGFuY2VvZiBUSFJFRS5Gb2c/KGsuZm9nTmVhci52YWx1ZT1jLm5lYXIsay5mb2dGYXIudmFsdWU9Yy5mYXIpOmMgaW5zdGFuY2VvZiBUSFJFRS5Gb2dFeHAyJiYoay5mb2dEZW5zaXR5LnZhbHVlPWMuZGVuc2l0eSkpO2lmKGQgaW5zdGFuY2VvZiBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbHx8ZCBpbnN0YW5jZW9mIFRIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWx8fGQubGlnaHRzKXtpZih3YSl7dmFyIG49ITAscyx0PXE9MCx4PTAsdixGLEMseT1DYSxFPWEubWF0cml4V29ybGRJbnZlcnNlLEI9eS5kaXJlY3Rpb25hbC5jb2xvcnMsSz15LmRpcmVjdGlvbmFsLnBvc2l0aW9ucyxPPXkucG9pbnQuY29sb3JzLE49eS5wb2ludC5wb3NpdGlvbnMsTT15LnBvaW50LmRpc3RhbmNlcyxHPXkucG9pbnQuZGVjYXlzLEo9eS5zcG90LmNvbG9ycyxIPXkuc3BvdC5wb3NpdGlvbnMsUT15LnNwb3QuZGlzdGFuY2VzLEk9eS5zcG90LmRpcmVjdGlvbnMsXG5kYT15LnNwb3QuYW5nbGVzQ29zLFQ9eS5zcG90LmV4cG9uZW50cyxSPXkuc3BvdC5kZWNheXMsWj15LmhlbWkuc2t5Q29sb3JzLGdhPXkuaGVtaS5ncm91bmRDb2xvcnMsUz15LmhlbWkucG9zaXRpb25zLGNhPTAsVT0wLGVhPTAsZmE9MCxqYT0wLG1hPTAsWD0wLCQ9MCxiYT1zPTA7Yz1DPWJhPTA7Zm9yKG09Yi5sZW5ndGg7YzxtO2MrKylzPWJbY10sdj1zLmNvbG9yLEY9cy5pbnRlbnNpdHksQz1zLmRpc3RhbmNlLHMgaW5zdGFuY2VvZiBUSFJFRS5BbWJpZW50TGlnaHQ/cy52aXNpYmxlJiYocSs9di5yLHQrPXYuZyx4Kz12LmIpOnMgaW5zdGFuY2VvZiBUSFJFRS5EaXJlY3Rpb25hbExpZ2h0PyhqYSs9MSxzLnZpc2libGUmJihZLnNldEZyb21NYXRyaXhQb3NpdGlvbihzLm1hdHJpeFdvcmxkKSxWLnNldEZyb21NYXRyaXhQb3NpdGlvbihzLnRhcmdldC5tYXRyaXhXb3JsZCksWS5zdWIoViksWS50cmFuc2Zvcm1EaXJlY3Rpb24oRSkscz0zKmNhLEtbcyswXT1ZLngsS1tzKzFdPVkueSxcbktbcysyXT1ZLnosRChCLHMsdixGKSxjYSs9MSkpOnMgaW5zdGFuY2VvZiBUSFJFRS5Qb2ludExpZ2h0PyhtYSs9MSxzLnZpc2libGUmJihiYT0zKlUsRChPLGJhLHYsRiksVi5zZXRGcm9tTWF0cml4UG9zaXRpb24ocy5tYXRyaXhXb3JsZCksVi5hcHBseU1hdHJpeDQoRSksTltiYSswXT1WLngsTltiYSsxXT1WLnksTltiYSsyXT1WLnosTVtVXT1DLEdbVV09MD09PXMuZGlzdGFuY2U/MDpzLmRlY2F5LFUrPTEpKTpzIGluc3RhbmNlb2YgVEhSRUUuU3BvdExpZ2h0PyhYKz0xLHMudmlzaWJsZSYmKGJhPTMqZWEsRChKLGJhLHYsRiksWS5zZXRGcm9tTWF0cml4UG9zaXRpb24ocy5tYXRyaXhXb3JsZCksVi5jb3B5KFkpLmFwcGx5TWF0cml4NChFKSxIW2JhKzBdPVYueCxIW2JhKzFdPVYueSxIW2JhKzJdPVYueixRW2VhXT1DLFYuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKHMudGFyZ2V0Lm1hdHJpeFdvcmxkKSxZLnN1YihWKSxZLnRyYW5zZm9ybURpcmVjdGlvbihFKSxJW2JhKzBdPVkueCxcbklbYmErMV09WS55LElbYmErMl09WS56LGRhW2VhXT1NYXRoLmNvcyhzLmFuZ2xlKSxUW2VhXT1zLmV4cG9uZW50LFJbZWFdPTA9PT1zLmRpc3RhbmNlPzA6cy5kZWNheSxlYSs9MSkpOnMgaW5zdGFuY2VvZiBUSFJFRS5IZW1pc3BoZXJlTGlnaHQmJigkKz0xLHMudmlzaWJsZSYmKFkuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKHMubWF0cml4V29ybGQpLFkudHJhbnNmb3JtRGlyZWN0aW9uKEUpLEM9MypmYSxTW0MrMF09WS54LFNbQysxXT1ZLnksU1tDKzJdPVkueix2PXMuY29sb3Iscz1zLmdyb3VuZENvbG9yLEQoWixDLHYsRiksRChnYSxDLHMsRiksZmErPTEpKTtjPTMqY2E7Zm9yKG09TWF0aC5tYXgoQi5sZW5ndGgsMypqYSk7YzxtO2MrKylCW2NdPTA7Yz0zKlU7Zm9yKG09TWF0aC5tYXgoTy5sZW5ndGgsMyptYSk7YzxtO2MrKylPW2NdPTA7Yz0zKmVhO2ZvcihtPU1hdGgubWF4KEoubGVuZ3RoLDMqWCk7YzxtO2MrKylKW2NdPTA7Yz0zKmZhO2ZvcihtPU1hdGgubWF4KFoubGVuZ3RoLFxuMyokKTtjPG07YysrKVpbY109MDtjPTMqZmE7Zm9yKG09TWF0aC5tYXgoZ2EubGVuZ3RoLDMqJCk7YzxtO2MrKylnYVtjXT0wO3kuZGlyZWN0aW9uYWwubGVuZ3RoPWNhO3kucG9pbnQubGVuZ3RoPVU7eS5zcG90Lmxlbmd0aD1lYTt5LmhlbWkubGVuZ3RoPWZhO3kuYW1iaWVudFswXT1xO3kuYW1iaWVudFsxXT10O3kuYW1iaWVudFsyXT14O3dhPSExfW4/KG49Q2Esay5hbWJpZW50TGlnaHRDb2xvci52YWx1ZT1uLmFtYmllbnQsay5kaXJlY3Rpb25hbExpZ2h0Q29sb3IudmFsdWU9bi5kaXJlY3Rpb25hbC5jb2xvcnMsay5kaXJlY3Rpb25hbExpZ2h0RGlyZWN0aW9uLnZhbHVlPW4uZGlyZWN0aW9uYWwucG9zaXRpb25zLGsucG9pbnRMaWdodENvbG9yLnZhbHVlPW4ucG9pbnQuY29sb3JzLGsucG9pbnRMaWdodFBvc2l0aW9uLnZhbHVlPW4ucG9pbnQucG9zaXRpb25zLGsucG9pbnRMaWdodERpc3RhbmNlLnZhbHVlPW4ucG9pbnQuZGlzdGFuY2VzLGsucG9pbnRMaWdodERlY2F5LnZhbHVlPVxubi5wb2ludC5kZWNheXMsay5zcG90TGlnaHRDb2xvci52YWx1ZT1uLnNwb3QuY29sb3JzLGsuc3BvdExpZ2h0UG9zaXRpb24udmFsdWU9bi5zcG90LnBvc2l0aW9ucyxrLnNwb3RMaWdodERpc3RhbmNlLnZhbHVlPW4uc3BvdC5kaXN0YW5jZXMsay5zcG90TGlnaHREaXJlY3Rpb24udmFsdWU9bi5zcG90LmRpcmVjdGlvbnMsay5zcG90TGlnaHRBbmdsZUNvcy52YWx1ZT1uLnNwb3QuYW5nbGVzQ29zLGsuc3BvdExpZ2h0RXhwb25lbnQudmFsdWU9bi5zcG90LmV4cG9uZW50cyxrLnNwb3RMaWdodERlY2F5LnZhbHVlPW4uc3BvdC5kZWNheXMsay5oZW1pc3BoZXJlTGlnaHRTa3lDb2xvci52YWx1ZT1uLmhlbWkuc2t5Q29sb3JzLGsuaGVtaXNwaGVyZUxpZ2h0R3JvdW5kQ29sb3IudmFsdWU9bi5oZW1pLmdyb3VuZENvbG9ycyxrLmhlbWlzcGhlcmVMaWdodERpcmVjdGlvbi52YWx1ZT1uLmhlbWkucG9zaXRpb25zLHUoaywhMCkpOnUoaywhMSl9aWYoZCBpbnN0YW5jZW9mIFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsfHxcbmQgaW5zdGFuY2VvZiBUSFJFRS5NZXNoTGFtYmVydE1hdGVyaWFsfHxkIGluc3RhbmNlb2YgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwpe2sub3BhY2l0eS52YWx1ZT1kLm9wYWNpdHk7ay5kaWZmdXNlLnZhbHVlPWQuY29sb3I7ZC5lbWlzc2l2ZSYmKGsuZW1pc3NpdmUudmFsdWU9ZC5lbWlzc2l2ZSk7ay5tYXAudmFsdWU9ZC5tYXA7ay5zcGVjdWxhck1hcC52YWx1ZT1kLnNwZWN1bGFyTWFwO2suYWxwaGFNYXAudmFsdWU9ZC5hbHBoYU1hcDtkLmFvTWFwJiYoay5hb01hcC52YWx1ZT1kLmFvTWFwLGsuYW9NYXBJbnRlbnNpdHkudmFsdWU9ZC5hb01hcEludGVuc2l0eSk7dmFyIFA7ZC5tYXA/UD1kLm1hcDpkLnNwZWN1bGFyTWFwP1A9ZC5zcGVjdWxhck1hcDpkLmRpc3BsYWNlbWVudE1hcD9QPWQuZGlzcGxhY2VtZW50TWFwOmQubm9ybWFsTWFwP1A9ZC5ub3JtYWxNYXA6ZC5idW1wTWFwP1A9ZC5idW1wTWFwOmQuYWxwaGFNYXA/UD1kLmFscGhhTWFwOmQuZW1pc3NpdmVNYXAmJihQPVxuZC5lbWlzc2l2ZU1hcCk7dm9pZCAwIT09UCYmKFAgaW5zdGFuY2VvZiBUSFJFRS5XZWJHTFJlbmRlclRhcmdldCYmKFA9UC50ZXh0dXJlKSxuPVAub2Zmc2V0LFA9UC5yZXBlYXQsay5vZmZzZXRSZXBlYXQudmFsdWUuc2V0KG4ueCxuLnksUC54LFAueSkpO2suZW52TWFwLnZhbHVlPWQuZW52TWFwO2suZmxpcEVudk1hcC52YWx1ZT1kLmVudk1hcCBpbnN0YW5jZW9mIFRIUkVFLldlYkdMUmVuZGVyVGFyZ2V0Q3ViZT8xOi0xO2sucmVmbGVjdGl2aXR5LnZhbHVlPWQucmVmbGVjdGl2aXR5O2sucmVmcmFjdGlvblJhdGlvLnZhbHVlPWQucmVmcmFjdGlvblJhdGlvfWQgaW5zdGFuY2VvZiBUSFJFRS5MaW5lQmFzaWNNYXRlcmlhbD8oay5kaWZmdXNlLnZhbHVlPWQuY29sb3Isay5vcGFjaXR5LnZhbHVlPWQub3BhY2l0eSk6ZCBpbnN0YW5jZW9mIFRIUkVFLkxpbmVEYXNoZWRNYXRlcmlhbD8oay5kaWZmdXNlLnZhbHVlPWQuY29sb3Isay5vcGFjaXR5LnZhbHVlPWQub3BhY2l0eSxrLmRhc2hTaXplLnZhbHVlPVxuZC5kYXNoU2l6ZSxrLnRvdGFsU2l6ZS52YWx1ZT1kLmRhc2hTaXplK2QuZ2FwU2l6ZSxrLnNjYWxlLnZhbHVlPWQuc2NhbGUpOmQgaW5zdGFuY2VvZiBUSFJFRS5Qb2ludHNNYXRlcmlhbD8oay5wc0NvbG9yLnZhbHVlPWQuY29sb3Isay5vcGFjaXR5LnZhbHVlPWQub3BhY2l0eSxrLnNpemUudmFsdWU9ZC5zaXplLGsuc2NhbGUudmFsdWU9TC5oZWlnaHQvMixrLm1hcC52YWx1ZT1kLm1hcCxudWxsIT09ZC5tYXAmJihhPWQubWFwLm9mZnNldCxQPWQubWFwLnJlcGVhdCxrLm9mZnNldFJlcGVhdC52YWx1ZS5zZXQoYS54LGEueSxQLngsUC55KSkpOmQgaW5zdGFuY2VvZiBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbD8oay5zcGVjdWxhci52YWx1ZT1kLnNwZWN1bGFyLGsuc2hpbmluZXNzLnZhbHVlPU1hdGgubWF4KGQuc2hpbmluZXNzLDFFLTQpLGQubGlnaHRNYXAmJihrLmxpZ2h0TWFwLnZhbHVlPWQubGlnaHRNYXAsay5saWdodE1hcEludGVuc2l0eS52YWx1ZT1kLmxpZ2h0TWFwSW50ZW5zaXR5KSxcbmQuZW1pc3NpdmVNYXAmJihrLmVtaXNzaXZlTWFwLnZhbHVlPWQuZW1pc3NpdmVNYXApLGQuYnVtcE1hcCYmKGsuYnVtcE1hcC52YWx1ZT1kLmJ1bXBNYXAsay5idW1wU2NhbGUudmFsdWU9ZC5idW1wU2NhbGUpLGQubm9ybWFsTWFwJiYoay5ub3JtYWxNYXAudmFsdWU9ZC5ub3JtYWxNYXAsay5ub3JtYWxTY2FsZS52YWx1ZS5jb3B5KGQubm9ybWFsU2NhbGUpKSxkLmRpc3BsYWNlbWVudE1hcCYmKGsuZGlzcGxhY2VtZW50TWFwLnZhbHVlPWQuZGlzcGxhY2VtZW50TWFwLGsuZGlzcGxhY2VtZW50U2NhbGUudmFsdWU9ZC5kaXNwbGFjZW1lbnRTY2FsZSxrLmRpc3BsYWNlbWVudEJpYXMudmFsdWU9ZC5kaXNwbGFjZW1lbnRCaWFzKSk6ZCBpbnN0YW5jZW9mIFRIUkVFLk1lc2hEZXB0aE1hdGVyaWFsPyhrLm1OZWFyLnZhbHVlPWEubmVhcixrLm1GYXIudmFsdWU9YS5mYXIsay5vcGFjaXR5LnZhbHVlPWQub3BhY2l0eSk6ZCBpbnN0YW5jZW9mIFRIUkVFLk1lc2hOb3JtYWxNYXRlcmlhbCYmXG4oay5vcGFjaXR5LnZhbHVlPWQub3BhY2l0eSk7aWYoZS5yZWNlaXZlU2hhZG93JiYhZC5fc2hhZG93UGFzcyYmay5zaGFkb3dNYXRyaXgpZm9yKGE9ZD0wLFA9Yi5sZW5ndGg7YTxQO2ErKyluPWJbYV0sITA9PT1uLmNhc3RTaGFkb3cmJihuIGluc3RhbmNlb2YgVEhSRUUuUG9pbnRMaWdodHx8biBpbnN0YW5jZW9mIFRIUkVFLlNwb3RMaWdodHx8biBpbnN0YW5jZW9mIFRIUkVFLkRpcmVjdGlvbmFsTGlnaHQpJiYoYz1uLnNoYWRvdyxuIGluc3RhbmNlb2YgVEhSRUUuUG9pbnRMaWdodD8oVi5zZXRGcm9tTWF0cml4UG9zaXRpb24obi5tYXRyaXhXb3JsZCkubmVnYXRlKCksYy5tYXRyaXguaWRlbnRpdHkoKS5zZXRQb3NpdGlvbihWKSxrLnNoYWRvd0RhcmtuZXNzLnZhbHVlW2RdPS1jLmRhcmtuZXNzKTprLnNoYWRvd0RhcmtuZXNzLnZhbHVlW2RdPWMuZGFya25lc3Msay5zaGFkb3dNYXRyaXgudmFsdWVbZF09Yy5tYXRyaXgsay5zaGFkb3dNYXAudmFsdWVbZF09Yy5tYXAsay5zaGFkb3dNYXBTaXplLnZhbHVlW2RdPVxuYy5tYXBTaXplLGsuc2hhZG93Qmlhcy52YWx1ZVtkXT1jLmJpYXMsZCsrKTtiPWYudW5pZm9ybXNMaXN0O2Y9MDtmb3IoZD1iLmxlbmd0aDtmPGQ7ZisrKWlmKGE9YltmXVswXSwhMSE9PWEubmVlZHNVcGRhdGUpc3dpdGNoKGs9YS50eXBlLGM9YS52YWx1ZSxQPWJbZl1bMV0sayl7Y2FzZSBcIjFpXCI6ci51bmlmb3JtMWkoUCxjKTticmVhaztjYXNlIFwiMWZcIjpyLnVuaWZvcm0xZihQLGMpO2JyZWFrO2Nhc2UgXCIyZlwiOnIudW5pZm9ybTJmKFAsY1swXSxjWzFdKTticmVhaztjYXNlIFwiM2ZcIjpyLnVuaWZvcm0zZihQLGNbMF0sY1sxXSxjWzJdKTticmVhaztjYXNlIFwiNGZcIjpyLnVuaWZvcm00ZihQLGNbMF0sY1sxXSxjWzJdLGNbM10pO2JyZWFrO2Nhc2UgXCIxaXZcIjpyLnVuaWZvcm0xaXYoUCxjKTticmVhaztjYXNlIFwiM2l2XCI6ci51bmlmb3JtM2l2KFAsYyk7YnJlYWs7Y2FzZSBcIjFmdlwiOnIudW5pZm9ybTFmdihQLGMpO2JyZWFrO2Nhc2UgXCIyZnZcIjpyLnVuaWZvcm0yZnYoUCxjKTticmVhaztcbmNhc2UgXCIzZnZcIjpyLnVuaWZvcm0zZnYoUCxjKTticmVhaztjYXNlIFwiNGZ2XCI6ci51bmlmb3JtNGZ2KFAsYyk7YnJlYWs7Y2FzZSBcIk1hdHJpeDNmdlwiOnIudW5pZm9ybU1hdHJpeDNmdihQLCExLGMpO2JyZWFrO2Nhc2UgXCJNYXRyaXg0ZnZcIjpyLnVuaWZvcm1NYXRyaXg0ZnYoUCwhMSxjKTticmVhaztjYXNlIFwiaVwiOnIudW5pZm9ybTFpKFAsYyk7YnJlYWs7Y2FzZSBcImZcIjpyLnVuaWZvcm0xZihQLGMpO2JyZWFrO2Nhc2UgXCJ2MlwiOnIudW5pZm9ybTJmKFAsYy54LGMueSk7YnJlYWs7Y2FzZSBcInYzXCI6ci51bmlmb3JtM2YoUCxjLngsYy55LGMueik7YnJlYWs7Y2FzZSBcInY0XCI6ci51bmlmb3JtNGYoUCxjLngsYy55LGMueixjLncpO2JyZWFrO2Nhc2UgXCJjXCI6ci51bmlmb3JtM2YoUCxjLnIsYy5nLGMuYik7YnJlYWs7Y2FzZSBcIml2MVwiOnIudW5pZm9ybTFpdihQLGMpO2JyZWFrO2Nhc2UgXCJpdlwiOnIudW5pZm9ybTNpdihQLGMpO2JyZWFrO2Nhc2UgXCJmdjFcIjpyLnVuaWZvcm0xZnYoUCxjKTtcbmJyZWFrO2Nhc2UgXCJmdlwiOnIudW5pZm9ybTNmdihQLGMpO2JyZWFrO2Nhc2UgXCJ2MnZcIjp2b2lkIDA9PT1hLl9hcnJheSYmKGEuX2FycmF5PW5ldyBGbG9hdDMyQXJyYXkoMipjLmxlbmd0aCkpO209az0wO2ZvcihuPWMubGVuZ3RoO2s8bjtrKyssbSs9MilhLl9hcnJheVttKzBdPWNba10ueCxhLl9hcnJheVttKzFdPWNba10ueTtyLnVuaWZvcm0yZnYoUCxhLl9hcnJheSk7YnJlYWs7Y2FzZSBcInYzdlwiOnZvaWQgMD09PWEuX2FycmF5JiYoYS5fYXJyYXk9bmV3IEZsb2F0MzJBcnJheSgzKmMubGVuZ3RoKSk7bT1rPTA7Zm9yKG49Yy5sZW5ndGg7azxuO2srKyxtKz0zKWEuX2FycmF5W20rMF09Y1trXS54LGEuX2FycmF5W20rMV09Y1trXS55LGEuX2FycmF5W20rMl09Y1trXS56O3IudW5pZm9ybTNmdihQLGEuX2FycmF5KTticmVhaztjYXNlIFwidjR2XCI6dm9pZCAwPT09YS5fYXJyYXkmJihhLl9hcnJheT1uZXcgRmxvYXQzMkFycmF5KDQqYy5sZW5ndGgpKTttPWs9MDtmb3Iobj1jLmxlbmd0aDtrPFxubjtrKyssbSs9NClhLl9hcnJheVttKzBdPWNba10ueCxhLl9hcnJheVttKzFdPWNba10ueSxhLl9hcnJheVttKzJdPWNba10ueixhLl9hcnJheVttKzNdPWNba10udztyLnVuaWZvcm00ZnYoUCxhLl9hcnJheSk7YnJlYWs7Y2FzZSBcIm0zXCI6ci51bmlmb3JtTWF0cml4M2Z2KFAsITEsYy5lbGVtZW50cyk7YnJlYWs7Y2FzZSBcIm0zdlwiOnZvaWQgMD09PWEuX2FycmF5JiYoYS5fYXJyYXk9bmV3IEZsb2F0MzJBcnJheSg5KmMubGVuZ3RoKSk7az0wO2ZvcihuPWMubGVuZ3RoO2s8bjtrKyspY1trXS5mbGF0dGVuVG9BcnJheU9mZnNldChhLl9hcnJheSw5KmspO3IudW5pZm9ybU1hdHJpeDNmdihQLCExLGEuX2FycmF5KTticmVhaztjYXNlIFwibTRcIjpyLnVuaWZvcm1NYXRyaXg0ZnYoUCwhMSxjLmVsZW1lbnRzKTticmVhaztjYXNlIFwibTR2XCI6dm9pZCAwPT09YS5fYXJyYXkmJihhLl9hcnJheT1uZXcgRmxvYXQzMkFycmF5KDE2KmMubGVuZ3RoKSk7az0wO2ZvcihuPWMubGVuZ3RoO2s8bjtrKyspY1trXS5mbGF0dGVuVG9BcnJheU9mZnNldChhLl9hcnJheSxcbjE2KmspO3IudW5pZm9ybU1hdHJpeDRmdihQLCExLGEuX2FycmF5KTticmVhaztjYXNlIFwidFwiOm09dygpO3IudW5pZm9ybTFpKFAsbSk7aWYoIWMpY29udGludWU7YyBpbnN0YW5jZW9mIFRIUkVFLkN1YmVUZXh0dXJlfHxBcnJheS5pc0FycmF5KGMuaW1hZ2UpJiY2PT09Yy5pbWFnZS5sZW5ndGg/eihjLG0pOmMgaW5zdGFuY2VvZiBUSFJFRS5XZWJHTFJlbmRlclRhcmdldEN1YmU/QShjLnRleHR1cmUsbSk6YyBpbnN0YW5jZW9mIFRIUkVFLldlYkdMUmVuZGVyVGFyZ2V0P2FhLnNldFRleHR1cmUoYy50ZXh0dXJlLG0pOmFhLnNldFRleHR1cmUoYyxtKTticmVhaztjYXNlIFwidHZcIjp2b2lkIDA9PT1hLl9hcnJheSYmKGEuX2FycmF5PVtdKTtrPTA7Zm9yKG49YS52YWx1ZS5sZW5ndGg7azxuO2srKylhLl9hcnJheVtrXT13KCk7ci51bmlmb3JtMWl2KFAsYS5fYXJyYXkpO2s9MDtmb3Iobj1hLnZhbHVlLmxlbmd0aDtrPG47aysrKWM9YS52YWx1ZVtrXSxtPWEuX2FycmF5W2tdLGMmJihjIGluc3RhbmNlb2ZcblRIUkVFLkN1YmVUZXh0dXJlfHxjLmltYWdlIGluc3RhbmNlb2YgQXJyYXkmJjY9PT1jLmltYWdlLmxlbmd0aD96KGMsbSk6YyBpbnN0YW5jZW9mIFRIUkVFLldlYkdMUmVuZGVyVGFyZ2V0P2FhLnNldFRleHR1cmUoYy50ZXh0dXJlLG0pOmMgaW5zdGFuY2VvZiBUSFJFRS5XZWJHTFJlbmRlclRhcmdldEN1YmU/QShjLnRleHR1cmUsbSk6YWEuc2V0VGV4dHVyZShjLG0pKTticmVhaztkZWZhdWx0OmNvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyZXI6IFVua25vd24gdW5pZm9ybSB0eXBlOiBcIitrKX19ci51bmlmb3JtTWF0cml4NGZ2KHAubW9kZWxWaWV3TWF0cml4LCExLGUubW9kZWxWaWV3TWF0cml4LmVsZW1lbnRzKTtwLm5vcm1hbE1hdHJpeCYmci51bmlmb3JtTWF0cml4M2Z2KHAubm9ybWFsTWF0cml4LCExLGUubm9ybWFsTWF0cml4LmVsZW1lbnRzKTt2b2lkIDAhPT1wLm1vZGVsTWF0cml4JiZyLnVuaWZvcm1NYXRyaXg0ZnYocC5tb2RlbE1hdHJpeCwhMSxlLm1hdHJpeFdvcmxkLmVsZW1lbnRzKTtcbnJldHVybiBnfWZ1bmN0aW9uIHUoYSxiKXthLmFtYmllbnRMaWdodENvbG9yLm5lZWRzVXBkYXRlPWI7YS5kaXJlY3Rpb25hbExpZ2h0Q29sb3IubmVlZHNVcGRhdGU9YjthLmRpcmVjdGlvbmFsTGlnaHREaXJlY3Rpb24ubmVlZHNVcGRhdGU9YjthLnBvaW50TGlnaHRDb2xvci5uZWVkc1VwZGF0ZT1iO2EucG9pbnRMaWdodFBvc2l0aW9uLm5lZWRzVXBkYXRlPWI7YS5wb2ludExpZ2h0RGlzdGFuY2UubmVlZHNVcGRhdGU9YjthLnBvaW50TGlnaHREZWNheS5uZWVkc1VwZGF0ZT1iO2Euc3BvdExpZ2h0Q29sb3IubmVlZHNVcGRhdGU9YjthLnNwb3RMaWdodFBvc2l0aW9uLm5lZWRzVXBkYXRlPWI7YS5zcG90TGlnaHREaXN0YW5jZS5uZWVkc1VwZGF0ZT1iO2Euc3BvdExpZ2h0RGlyZWN0aW9uLm5lZWRzVXBkYXRlPWI7YS5zcG90TGlnaHRBbmdsZUNvcy5uZWVkc1VwZGF0ZT1iO2Euc3BvdExpZ2h0RXhwb25lbnQubmVlZHNVcGRhdGU9YjthLnNwb3RMaWdodERlY2F5Lm5lZWRzVXBkYXRlPVxuYjthLmhlbWlzcGhlcmVMaWdodFNreUNvbG9yLm5lZWRzVXBkYXRlPWI7YS5oZW1pc3BoZXJlTGlnaHRHcm91bmRDb2xvci5uZWVkc1VwZGF0ZT1iO2EuaGVtaXNwaGVyZUxpZ2h0RGlyZWN0aW9uLm5lZWRzVXBkYXRlPWJ9ZnVuY3Rpb24gdygpe3ZhciBhPXlhO2E+PWhhLm1heFRleHR1cmVzJiZjb25zb2xlLndhcm4oXCJXZWJHTFJlbmRlcmVyOiB0cnlpbmcgdG8gdXNlIFwiK2ErXCIgdGV4dHVyZSB1bml0cyB3aGlsZSB0aGlzIEdQVSBzdXBwb3J0cyBvbmx5IFwiK2hhLm1heFRleHR1cmVzKTt5YSs9MTtyZXR1cm4gYX1mdW5jdGlvbiBEKGEsYixjLGQpe2FbYiswXT1jLnIqZDthW2IrMV09Yy5nKmQ7YVtiKzJdPWMuYipkfWZ1bmN0aW9uIHgoYSxiLGMpe2M/KHIudGV4UGFyYW1ldGVyaShhLHIuVEVYVFVSRV9XUkFQX1MsTihiLndyYXBTKSksci50ZXhQYXJhbWV0ZXJpKGEsci5URVhUVVJFX1dSQVBfVCxOKGIud3JhcFQpKSxyLnRleFBhcmFtZXRlcmkoYSxyLlRFWFRVUkVfTUFHX0ZJTFRFUixcbk4oYi5tYWdGaWx0ZXIpKSxyLnRleFBhcmFtZXRlcmkoYSxyLlRFWFRVUkVfTUlOX0ZJTFRFUixOKGIubWluRmlsdGVyKSkpOihyLnRleFBhcmFtZXRlcmkoYSxyLlRFWFRVUkVfV1JBUF9TLHIuQ0xBTVBfVE9fRURHRSksci50ZXhQYXJhbWV0ZXJpKGEsci5URVhUVVJFX1dSQVBfVCxyLkNMQU1QX1RPX0VER0UpLGIud3JhcFM9PT1USFJFRS5DbGFtcFRvRWRnZVdyYXBwaW5nJiZiLndyYXBUPT09VEhSRUUuQ2xhbXBUb0VkZ2VXcmFwcGluZ3x8Y29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogVGV4dHVyZSBpcyBub3QgcG93ZXIgb2YgdHdvLiBUZXh0dXJlLndyYXBTIGFuZCBUZXh0dXJlLndyYXBUIHNob3VsZCBiZSBzZXQgdG8gVEhSRUUuQ2xhbXBUb0VkZ2VXcmFwcGluZy5cIixiKSxyLnRleFBhcmFtZXRlcmkoYSxyLlRFWFRVUkVfTUFHX0ZJTFRFUixDKGIubWFnRmlsdGVyKSksci50ZXhQYXJhbWV0ZXJpKGEsci5URVhUVVJFX01JTl9GSUxURVIsQyhiLm1pbkZpbHRlcikpLFxuYi5taW5GaWx0ZXIhPT1USFJFRS5OZWFyZXN0RmlsdGVyJiZiLm1pbkZpbHRlciE9PVRIUkVFLkxpbmVhckZpbHRlciYmY29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogVGV4dHVyZSBpcyBub3QgcG93ZXIgb2YgdHdvLiBUZXh0dXJlLm1pbkZpbHRlciBzaG91bGQgYmUgc2V0IHRvIFRIUkVFLk5lYXJlc3RGaWx0ZXIgb3IgVEhSRUUuTGluZWFyRmlsdGVyLlwiLGIpKTshKGM9Uy5nZXQoXCJFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWNcIikpfHxiLnR5cGU9PT1USFJFRS5GbG9hdFR5cGUmJm51bGw9PT1TLmdldChcIk9FU190ZXh0dXJlX2Zsb2F0X2xpbmVhclwiKXx8Yi50eXBlPT09VEhSRUUuSGFsZkZsb2F0VHlwZSYmbnVsbD09PVMuZ2V0KFwiT0VTX3RleHR1cmVfaGFsZl9mbG9hdF9saW5lYXJcIil8fCEoMTxiLmFuaXNvdHJvcHl8fFcuZ2V0KGIpLl9fY3VycmVudEFuaXNvdHJvcHkpfHwoci50ZXhQYXJhbWV0ZXJmKGEsYy5URVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCxcbk1hdGgubWluKGIuYW5pc290cm9weSxhYS5nZXRNYXhBbmlzb3Ryb3B5KCkpKSxXLmdldChiKS5fX2N1cnJlbnRBbmlzb3Ryb3B5PWIuYW5pc290cm9weSl9ZnVuY3Rpb24gQihhLGIpe2lmKGEud2lkdGg+Ynx8YS5oZWlnaHQ+Yil7dmFyIGM9Yi9NYXRoLm1heChhLndpZHRoLGEuaGVpZ2h0KSxkPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7ZC53aWR0aD1NYXRoLmZsb29yKGEud2lkdGgqYyk7ZC5oZWlnaHQ9TWF0aC5mbG9vcihhLmhlaWdodCpjKTtkLmdldENvbnRleHQoXCIyZFwiKS5kcmF3SW1hZ2UoYSwwLDAsYS53aWR0aCxhLmhlaWdodCwwLDAsZC53aWR0aCxkLmhlaWdodCk7Y29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogaW1hZ2UgaXMgdG9vIGJpZyAoXCIrYS53aWR0aCtcInhcIithLmhlaWdodCtcIikuIFJlc2l6ZWQgdG8gXCIrZC53aWR0aCtcInhcIitkLmhlaWdodCxhKTtyZXR1cm4gZH1yZXR1cm4gYX1mdW5jdGlvbiB5KGEpe3JldHVybiBUSFJFRS5NYXRoLmlzUG93ZXJPZlR3byhhLndpZHRoKSYmXG5USFJFRS5NYXRoLmlzUG93ZXJPZlR3byhhLmhlaWdodCl9ZnVuY3Rpb24geihhLGIpe3ZhciBjPVcuZ2V0KGEpO2lmKDY9PT1hLmltYWdlLmxlbmd0aClpZigwPGEudmVyc2lvbiYmYy5fX3ZlcnNpb24hPT1hLnZlcnNpb24pe2MuX19pbWFnZV9fd2ViZ2xUZXh0dXJlQ3ViZXx8KGEuYWRkRXZlbnRMaXN0ZW5lcihcImRpc3Bvc2VcIixnKSxjLl9faW1hZ2VfX3dlYmdsVGV4dHVyZUN1YmU9ci5jcmVhdGVUZXh0dXJlKCksbGEudGV4dHVyZXMrKyk7SS5hY3RpdmVUZXh0dXJlKHIuVEVYVFVSRTArYik7SS5iaW5kVGV4dHVyZShyLlRFWFRVUkVfQ1VCRV9NQVAsYy5fX2ltYWdlX193ZWJnbFRleHR1cmVDdWJlKTtyLnBpeGVsU3RvcmVpKHIuVU5QQUNLX0ZMSVBfWV9XRUJHTCxhLmZsaXBZKTtmb3IodmFyIGQ9YSBpbnN0YW5jZW9mIFRIUkVFLkNvbXByZXNzZWRUZXh0dXJlLGU9YS5pbWFnZVswXWluc3RhbmNlb2YgVEhSRUUuRGF0YVRleHR1cmUsZj1bXSxoPTA7Nj5oO2grKylmW2hdPSFhYS5hdXRvU2NhbGVDdWJlbWFwc3x8XG5kfHxlP2U/YS5pbWFnZVtoXS5pbWFnZTphLmltYWdlW2hdOkIoYS5pbWFnZVtoXSxoYS5tYXhDdWJlbWFwU2l6ZSk7dmFyIGs9eShmWzBdKSxsPU4oYS5mb3JtYXQpLG49TihhLnR5cGUpO3goci5URVhUVVJFX0NVQkVfTUFQLGEsayk7Zm9yKGg9MDs2Pmg7aCsrKWlmKGQpZm9yKHZhciBtLHE9ZltoXS5taXBtYXBzLHA9MCxzPXEubGVuZ3RoO3A8cztwKyspbT1xW3BdLGEuZm9ybWF0IT09VEhSRUUuUkdCQUZvcm1hdCYmYS5mb3JtYXQhPT1USFJFRS5SR0JGb3JtYXQ/LTE8SS5nZXRDb21wcmVzc2VkVGV4dHVyZUZvcm1hdHMoKS5pbmRleE9mKGwpP0kuY29tcHJlc3NlZFRleEltYWdlMkQoci5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1graCxwLGwsbS53aWR0aCxtLmhlaWdodCwwLG0uZGF0YSk6Y29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogQXR0ZW1wdCB0byBsb2FkIHVuc3VwcG9ydGVkIGNvbXByZXNzZWQgdGV4dHVyZSBmb3JtYXQgaW4gLnNldEN1YmVUZXh0dXJlKClcIik6XG5JLnRleEltYWdlMkQoci5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1graCxwLGwsbS53aWR0aCxtLmhlaWdodCwwLGwsbixtLmRhdGEpO2Vsc2UgZT9JLnRleEltYWdlMkQoci5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1graCwwLGwsZltoXS53aWR0aCxmW2hdLmhlaWdodCwwLGwsbixmW2hdLmRhdGEpOkkudGV4SW1hZ2UyRChyLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCtoLDAsbCxsLG4sZltoXSk7YS5nZW5lcmF0ZU1pcG1hcHMmJmsmJnIuZ2VuZXJhdGVNaXBtYXAoci5URVhUVVJFX0NVQkVfTUFQKTtjLl9fdmVyc2lvbj1hLnZlcnNpb247aWYoYS5vblVwZGF0ZSlhLm9uVXBkYXRlKGEpfWVsc2UgSS5hY3RpdmVUZXh0dXJlKHIuVEVYVFVSRTArYiksSS5iaW5kVGV4dHVyZShyLlRFWFRVUkVfQ1VCRV9NQVAsYy5fX2ltYWdlX193ZWJnbFRleHR1cmVDdWJlKX1mdW5jdGlvbiBBKGEsYil7SS5hY3RpdmVUZXh0dXJlKHIuVEVYVFVSRTArYik7SS5iaW5kVGV4dHVyZShyLlRFWFRVUkVfQ1VCRV9NQVAsXG5XLmdldChhKS5fX3dlYmdsVGV4dHVyZSl9ZnVuY3Rpb24gSihhLGIsYyl7ci5iaW5kRnJhbWVidWZmZXIoci5GUkFNRUJVRkZFUixhKTtyLmZyYW1lYnVmZmVyVGV4dHVyZTJEKHIuRlJBTUVCVUZGRVIsci5DT0xPUl9BVFRBQ0hNRU5UMCxjLFcuZ2V0KGIudGV4dHVyZSkuX193ZWJnbFRleHR1cmUsMCl9ZnVuY3Rpb24gRihhLGIpe3IuYmluZFJlbmRlcmJ1ZmZlcihyLlJFTkRFUkJVRkZFUixhKTtiLmRlcHRoQnVmZmVyJiYhYi5zdGVuY2lsQnVmZmVyPyhyLnJlbmRlcmJ1ZmZlclN0b3JhZ2Uoci5SRU5ERVJCVUZGRVIsci5ERVBUSF9DT01QT05FTlQxNixiLndpZHRoLGIuaGVpZ2h0KSxyLmZyYW1lYnVmZmVyUmVuZGVyYnVmZmVyKHIuRlJBTUVCVUZGRVIsci5ERVBUSF9BVFRBQ0hNRU5ULHIuUkVOREVSQlVGRkVSLGEpKTpiLmRlcHRoQnVmZmVyJiZiLnN0ZW5jaWxCdWZmZXI/KHIucmVuZGVyYnVmZmVyU3RvcmFnZShyLlJFTkRFUkJVRkZFUixyLkRFUFRIX1NURU5DSUwsYi53aWR0aCxcbmIuaGVpZ2h0KSxyLmZyYW1lYnVmZmVyUmVuZGVyYnVmZmVyKHIuRlJBTUVCVUZGRVIsci5ERVBUSF9TVEVOQ0lMX0FUVEFDSE1FTlQsci5SRU5ERVJCVUZGRVIsYSkpOnIucmVuZGVyYnVmZmVyU3RvcmFnZShyLlJFTkRFUkJVRkZFUixyLlJHQkE0LGIud2lkdGgsYi5oZWlnaHQpfWZ1bmN0aW9uIEMoYSl7cmV0dXJuIGE9PT1USFJFRS5OZWFyZXN0RmlsdGVyfHxhPT09VEhSRUUuTmVhcmVzdE1pcE1hcE5lYXJlc3RGaWx0ZXJ8fGE9PT1USFJFRS5OZWFyZXN0TWlwTWFwTGluZWFyRmlsdGVyP3IuTkVBUkVTVDpyLkxJTkVBUn1mdW5jdGlvbiBOKGEpe3ZhciBiO2lmKGE9PT1USFJFRS5SZXBlYXRXcmFwcGluZylyZXR1cm4gci5SRVBFQVQ7aWYoYT09PVRIUkVFLkNsYW1wVG9FZGdlV3JhcHBpbmcpcmV0dXJuIHIuQ0xBTVBfVE9fRURHRTtpZihhPT09VEhSRUUuTWlycm9yZWRSZXBlYXRXcmFwcGluZylyZXR1cm4gci5NSVJST1JFRF9SRVBFQVQ7aWYoYT09PVRIUkVFLk5lYXJlc3RGaWx0ZXIpcmV0dXJuIHIuTkVBUkVTVDtcbmlmKGE9PT1USFJFRS5OZWFyZXN0TWlwTWFwTmVhcmVzdEZpbHRlcilyZXR1cm4gci5ORUFSRVNUX01JUE1BUF9ORUFSRVNUO2lmKGE9PT1USFJFRS5OZWFyZXN0TWlwTWFwTGluZWFyRmlsdGVyKXJldHVybiByLk5FQVJFU1RfTUlQTUFQX0xJTkVBUjtpZihhPT09VEhSRUUuTGluZWFyRmlsdGVyKXJldHVybiByLkxJTkVBUjtpZihhPT09VEhSRUUuTGluZWFyTWlwTWFwTmVhcmVzdEZpbHRlcilyZXR1cm4gci5MSU5FQVJfTUlQTUFQX05FQVJFU1Q7aWYoYT09PVRIUkVFLkxpbmVhck1pcE1hcExpbmVhckZpbHRlcilyZXR1cm4gci5MSU5FQVJfTUlQTUFQX0xJTkVBUjtpZihhPT09VEhSRUUuVW5zaWduZWRCeXRlVHlwZSlyZXR1cm4gci5VTlNJR05FRF9CWVRFO2lmKGE9PT1USFJFRS5VbnNpZ25lZFNob3J0NDQ0NFR5cGUpcmV0dXJuIHIuVU5TSUdORURfU0hPUlRfNF80XzRfNDtpZihhPT09VEhSRUUuVW5zaWduZWRTaG9ydDU1NTFUeXBlKXJldHVybiByLlVOU0lHTkVEX1NIT1JUXzVfNV81XzE7XG5pZihhPT09VEhSRUUuVW5zaWduZWRTaG9ydDU2NVR5cGUpcmV0dXJuIHIuVU5TSUdORURfU0hPUlRfNV82XzU7aWYoYT09PVRIUkVFLkJ5dGVUeXBlKXJldHVybiByLkJZVEU7aWYoYT09PVRIUkVFLlNob3J0VHlwZSlyZXR1cm4gci5TSE9SVDtpZihhPT09VEhSRUUuVW5zaWduZWRTaG9ydFR5cGUpcmV0dXJuIHIuVU5TSUdORURfU0hPUlQ7aWYoYT09PVRIUkVFLkludFR5cGUpcmV0dXJuIHIuSU5UO2lmKGE9PT1USFJFRS5VbnNpZ25lZEludFR5cGUpcmV0dXJuIHIuVU5TSUdORURfSU5UO2lmKGE9PT1USFJFRS5GbG9hdFR5cGUpcmV0dXJuIHIuRkxPQVQ7Yj1TLmdldChcIk9FU190ZXh0dXJlX2hhbGZfZmxvYXRcIik7aWYobnVsbCE9PWImJmE9PT1USFJFRS5IYWxmRmxvYXRUeXBlKXJldHVybiBiLkhBTEZfRkxPQVRfT0VTO2lmKGE9PT1USFJFRS5BbHBoYUZvcm1hdClyZXR1cm4gci5BTFBIQTtpZihhPT09VEhSRUUuUkdCRm9ybWF0KXJldHVybiByLlJHQjtpZihhPT09VEhSRUUuUkdCQUZvcm1hdClyZXR1cm4gci5SR0JBO1xuaWYoYT09PVRIUkVFLkx1bWluYW5jZUZvcm1hdClyZXR1cm4gci5MVU1JTkFOQ0U7aWYoYT09PVRIUkVFLkx1bWluYW5jZUFscGhhRm9ybWF0KXJldHVybiByLkxVTUlOQU5DRV9BTFBIQTtpZihhPT09VEhSRUUuQWRkRXF1YXRpb24pcmV0dXJuIHIuRlVOQ19BREQ7aWYoYT09PVRIUkVFLlN1YnRyYWN0RXF1YXRpb24pcmV0dXJuIHIuRlVOQ19TVUJUUkFDVDtpZihhPT09VEhSRUUuUmV2ZXJzZVN1YnRyYWN0RXF1YXRpb24pcmV0dXJuIHIuRlVOQ19SRVZFUlNFX1NVQlRSQUNUO2lmKGE9PT1USFJFRS5aZXJvRmFjdG9yKXJldHVybiByLlpFUk87aWYoYT09PVRIUkVFLk9uZUZhY3RvcilyZXR1cm4gci5PTkU7aWYoYT09PVRIUkVFLlNyY0NvbG9yRmFjdG9yKXJldHVybiByLlNSQ19DT0xPUjtpZihhPT09VEhSRUUuT25lTWludXNTcmNDb2xvckZhY3RvcilyZXR1cm4gci5PTkVfTUlOVVNfU1JDX0NPTE9SO2lmKGE9PT1USFJFRS5TcmNBbHBoYUZhY3RvcilyZXR1cm4gci5TUkNfQUxQSEE7XG5pZihhPT09VEhSRUUuT25lTWludXNTcmNBbHBoYUZhY3RvcilyZXR1cm4gci5PTkVfTUlOVVNfU1JDX0FMUEhBO2lmKGE9PT1USFJFRS5Ec3RBbHBoYUZhY3RvcilyZXR1cm4gci5EU1RfQUxQSEE7aWYoYT09PVRIUkVFLk9uZU1pbnVzRHN0QWxwaGFGYWN0b3IpcmV0dXJuIHIuT05FX01JTlVTX0RTVF9BTFBIQTtpZihhPT09VEhSRUUuRHN0Q29sb3JGYWN0b3IpcmV0dXJuIHIuRFNUX0NPTE9SO2lmKGE9PT1USFJFRS5PbmVNaW51c0RzdENvbG9yRmFjdG9yKXJldHVybiByLk9ORV9NSU5VU19EU1RfQ09MT1I7aWYoYT09PVRIUkVFLlNyY0FscGhhU2F0dXJhdGVGYWN0b3IpcmV0dXJuIHIuU1JDX0FMUEhBX1NBVFVSQVRFO2I9Uy5nZXQoXCJXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0Y1wiKTtpZihudWxsIT09Yil7aWYoYT09PVRIUkVFLlJHQl9TM1RDX0RYVDFfRm9ybWF0KXJldHVybiBiLkNPTVBSRVNTRURfUkdCX1MzVENfRFhUMV9FWFQ7aWYoYT09PVRIUkVFLlJHQkFfUzNUQ19EWFQxX0Zvcm1hdClyZXR1cm4gYi5DT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQxX0VYVDtcbmlmKGE9PT1USFJFRS5SR0JBX1MzVENfRFhUM19Gb3JtYXQpcmV0dXJuIGIuQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUM19FWFQ7aWYoYT09PVRIUkVFLlJHQkFfUzNUQ19EWFQ1X0Zvcm1hdClyZXR1cm4gYi5DT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQ1X0VYVH1iPVMuZ2V0KFwiV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjXCIpO2lmKG51bGwhPT1iKXtpZihhPT09VEhSRUUuUkdCX1BWUlRDXzRCUFBWMV9Gb3JtYXQpcmV0dXJuIGIuQ09NUFJFU1NFRF9SR0JfUFZSVENfNEJQUFYxX0lNRztpZihhPT09VEhSRUUuUkdCX1BWUlRDXzJCUFBWMV9Gb3JtYXQpcmV0dXJuIGIuQ09NUFJFU1NFRF9SR0JfUFZSVENfMkJQUFYxX0lNRztpZihhPT09VEhSRUUuUkdCQV9QVlJUQ180QlBQVjFfRm9ybWF0KXJldHVybiBiLkNPTVBSRVNTRURfUkdCQV9QVlJUQ180QlBQVjFfSU1HO2lmKGE9PT1USFJFRS5SR0JBX1BWUlRDXzJCUFBWMV9Gb3JtYXQpcmV0dXJuIGIuQ09NUFJFU1NFRF9SR0JBX1BWUlRDXzJCUFBWMV9JTUd9Yj1cblMuZ2V0KFwiRVhUX2JsZW5kX21pbm1heFwiKTtpZihudWxsIT09Yil7aWYoYT09PVRIUkVFLk1pbkVxdWF0aW9uKXJldHVybiBiLk1JTl9FWFQ7aWYoYT09PVRIUkVFLk1heEVxdWF0aW9uKXJldHVybiBiLk1BWF9FWFR9cmV0dXJuIDB9Y29uc29sZS5sb2coXCJUSFJFRS5XZWJHTFJlbmRlcmVyXCIsVEhSRUUuUkVWSVNJT04pO2E9YXx8e307dmFyIEw9dm9pZCAwIT09YS5jYW52YXM/YS5jYW52YXM6ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKSxRPXZvaWQgMCE9PWEuY29udGV4dD9hLmNvbnRleHQ6bnVsbCxNPUwud2lkdGgsSz1MLmhlaWdodCxFPTEsTz12b2lkIDAhPT1hLmFscGhhP2EuYWxwaGE6ITEsVD12b2lkIDAhPT1hLmRlcHRoP2EuZGVwdGg6ITAsSD12b2lkIDAhPT1hLnN0ZW5jaWw/YS5zdGVuY2lsOiEwLFI9dm9pZCAwIT09YS5hbnRpYWxpYXM/YS5hbnRpYWxpYXM6ITEsRz12b2lkIDAhPT1hLnByZW11bHRpcGxpZWRBbHBoYT9hLnByZW11bHRpcGxpZWRBbHBoYTpcbiEwLGlhPXZvaWQgMCE9PWEucHJlc2VydmVEcmF3aW5nQnVmZmVyP2EucHJlc2VydmVEcmF3aW5nQnVmZmVyOiExLFU9bmV3IFRIUkVFLkNvbG9yKDApLFg9MCxkYT1bXSxjYT1bXSxnYT0tMSxaPVtdLGZhPS0xLG1hPW5ldyBGbG9hdDMyQXJyYXkoOCksZWE9W10samE9W107dGhpcy5kb21FbGVtZW50PUw7dGhpcy5jb250ZXh0PW51bGw7dGhpcy5zb3J0T2JqZWN0cz10aGlzLmF1dG9DbGVhclN0ZW5jaWw9dGhpcy5hdXRvQ2xlYXJEZXB0aD10aGlzLmF1dG9DbGVhckNvbG9yPXRoaXMuYXV0b0NsZWFyPSEwO3RoaXMuZ2FtbWFGYWN0b3I9Mjt0aGlzLmdhbW1hT3V0cHV0PXRoaXMuZ2FtbWFJbnB1dD0hMTt0aGlzLm1heE1vcnBoVGFyZ2V0cz04O3RoaXMubWF4TW9ycGhOb3JtYWxzPTQ7dGhpcy5hdXRvU2NhbGVDdWJlbWFwcz0hMDt2YXIgYWE9dGhpcyxBYT1udWxsLHphPW51bGwsdGE9LTEsc2E9XCJcIixyYT1udWxsLHlhPTAsbmE9MCxvYT0wLHBhPUwud2lkdGgscWE9TC5oZWlnaHQsXG5EYT0wLEVhPTAsQmE9bmV3IFRIUkVFLkZydXN0dW0seGE9bmV3IFRIUkVFLk1hdHJpeDQsVj1uZXcgVEhSRUUuVmVjdG9yMyxZPW5ldyBUSFJFRS5WZWN0b3IzLHdhPSEwLENhPXthbWJpZW50OlswLDAsMF0sZGlyZWN0aW9uYWw6e2xlbmd0aDowLGNvbG9yczpbXSxwb3NpdGlvbnM6W119LHBvaW50OntsZW5ndGg6MCxjb2xvcnM6W10scG9zaXRpb25zOltdLGRpc3RhbmNlczpbXSxkZWNheXM6W119LHNwb3Q6e2xlbmd0aDowLGNvbG9yczpbXSxwb3NpdGlvbnM6W10sZGlzdGFuY2VzOltdLGRpcmVjdGlvbnM6W10sYW5nbGVzQ29zOltdLGV4cG9uZW50czpbXSxkZWNheXM6W119LGhlbWk6e2xlbmd0aDowLHNreUNvbG9yczpbXSxncm91bmRDb2xvcnM6W10scG9zaXRpb25zOltdfX0sbGE9e2dlb21ldHJpZXM6MCx0ZXh0dXJlczowfSxrYT17Y2FsbHM6MCx2ZXJ0aWNlczowLGZhY2VzOjAscG9pbnRzOjB9O3RoaXMuaW5mbz17cmVuZGVyOmthLG1lbW9yeTpsYSxwcm9ncmFtczpudWxsfTtcbnZhciByO3RyeXtPPXthbHBoYTpPLGRlcHRoOlQsc3RlbmNpbDpILGFudGlhbGlhczpSLHByZW11bHRpcGxpZWRBbHBoYTpHLHByZXNlcnZlRHJhd2luZ0J1ZmZlcjppYX07cj1RfHxMLmdldENvbnRleHQoXCJ3ZWJnbFwiLE8pfHxMLmdldENvbnRleHQoXCJleHBlcmltZW50YWwtd2ViZ2xcIixPKTtpZihudWxsPT09cil7aWYobnVsbCE9PUwuZ2V0Q29udGV4dChcIndlYmdsXCIpKXRocm93XCJFcnJvciBjcmVhdGluZyBXZWJHTCBjb250ZXh0IHdpdGggeW91ciBzZWxlY3RlZCBhdHRyaWJ1dGVzLlwiO3Rocm93XCJFcnJvciBjcmVhdGluZyBXZWJHTCBjb250ZXh0LlwiO31MLmFkZEV2ZW50TGlzdGVuZXIoXCJ3ZWJnbGNvbnRleHRsb3N0XCIsZSwhMSl9Y2F0Y2goRmEpe2NvbnNvbGUuZXJyb3IoXCJUSFJFRS5XZWJHTFJlbmRlcmVyOiBcIitGYSl9dmFyIFM9bmV3IFRIUkVFLldlYkdMRXh0ZW5zaW9ucyhyKTtTLmdldChcIk9FU190ZXh0dXJlX2Zsb2F0XCIpO1MuZ2V0KFwiT0VTX3RleHR1cmVfZmxvYXRfbGluZWFyXCIpO1xuUy5nZXQoXCJPRVNfdGV4dHVyZV9oYWxmX2Zsb2F0XCIpO1MuZ2V0KFwiT0VTX3RleHR1cmVfaGFsZl9mbG9hdF9saW5lYXJcIik7Uy5nZXQoXCJPRVNfc3RhbmRhcmRfZGVyaXZhdGl2ZXNcIik7Uy5nZXQoXCJBTkdMRV9pbnN0YW5jZWRfYXJyYXlzXCIpO1MuZ2V0KFwiT0VTX2VsZW1lbnRfaW5kZXhfdWludFwiKSYmKFRIUkVFLkJ1ZmZlckdlb21ldHJ5Lk1heEluZGV4PTQyOTQ5NjcyOTYpO3ZhciBoYT1uZXcgVEhSRUUuV2ViR0xDYXBhYmlsaXRpZXMocixTLGEpLEk9bmV3IFRIUkVFLldlYkdMU3RhdGUocixTLE4pLFc9bmV3IFRIUkVFLldlYkdMUHJvcGVydGllcyx2YT1uZXcgVEhSRUUuV2ViR0xPYmplY3RzKHIsVyx0aGlzLmluZm8pLHVhPW5ldyBUSFJFRS5XZWJHTFByb2dyYW1zKHRoaXMsaGEpO3RoaXMuaW5mby5wcm9ncmFtcz11YS5wcm9ncmFtczt2YXIgR2E9bmV3IFRIUkVFLldlYkdMQnVmZmVyUmVuZGVyZXIocixTLGthKSxIYT1uZXcgVEhSRUUuV2ViR0xJbmRleGVkQnVmZmVyUmVuZGVyZXIocixcblMsa2EpO2MoKTt0aGlzLmNvbnRleHQ9cjt0aGlzLmNhcGFiaWxpdGllcz1oYTt0aGlzLmV4dGVuc2lvbnM9Uzt0aGlzLnN0YXRlPUk7dmFyICQ9bmV3IFRIUkVFLldlYkdMU2hhZG93TWFwKHRoaXMsZGEsdmEpO3RoaXMuc2hhZG93TWFwPSQ7dmFyIElhPW5ldyBUSFJFRS5TcHJpdGVQbHVnaW4odGhpcyxlYSksSmE9bmV3IFRIUkVFLkxlbnNGbGFyZVBsdWdpbih0aGlzLGphKTt0aGlzLmdldENvbnRleHQ9ZnVuY3Rpb24oKXtyZXR1cm4gcn07dGhpcy5nZXRDb250ZXh0QXR0cmlidXRlcz1mdW5jdGlvbigpe3JldHVybiByLmdldENvbnRleHRBdHRyaWJ1dGVzKCl9O3RoaXMuZm9yY2VDb250ZXh0TG9zcz1mdW5jdGlvbigpe1MuZ2V0KFwiV0VCR0xfbG9zZV9jb250ZXh0XCIpLmxvc2VDb250ZXh0KCl9O3RoaXMuZ2V0TWF4QW5pc290cm9weT1mdW5jdGlvbigpe3ZhciBhO3JldHVybiBmdW5jdGlvbigpe2lmKHZvaWQgMCE9PWEpcmV0dXJuIGE7dmFyIGI9Uy5nZXQoXCJFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWNcIik7XG5yZXR1cm4gYT1udWxsIT09Yj9yLmdldFBhcmFtZXRlcihiLk1BWF9URVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCk6MH19KCk7dGhpcy5nZXRQcmVjaXNpb249ZnVuY3Rpb24oKXtyZXR1cm4gaGEucHJlY2lzaW9ufTt0aGlzLmdldFBpeGVsUmF0aW89ZnVuY3Rpb24oKXtyZXR1cm4gRX07dGhpcy5zZXRQaXhlbFJhdGlvPWZ1bmN0aW9uKGEpe3ZvaWQgMCE9PWEmJihFPWEpfTt0aGlzLmdldFNpemU9ZnVuY3Rpb24oKXtyZXR1cm57d2lkdGg6TSxoZWlnaHQ6S319O3RoaXMuc2V0U2l6ZT1mdW5jdGlvbihhLGIsYyl7TT1hO0s9YjtMLndpZHRoPWEqRTtMLmhlaWdodD1iKkU7ITEhPT1jJiYoTC5zdHlsZS53aWR0aD1hK1wicHhcIixMLnN0eWxlLmhlaWdodD1iK1wicHhcIik7dGhpcy5zZXRWaWV3cG9ydCgwLDAsYSxiKX07dGhpcy5zZXRWaWV3cG9ydD1mdW5jdGlvbihhLGIsYyxkKXtuYT1hKkU7b2E9YipFO3BhPWMqRTtxYT1kKkU7ci52aWV3cG9ydChuYSxvYSxwYSxxYSl9O3RoaXMuZ2V0Vmlld3BvcnQ9XG5mdW5jdGlvbihhKXthLng9bmEvRTthLnk9b2EvRTthLno9cGEvRTthLnc9cWEvRX07dGhpcy5zZXRTY2lzc29yPWZ1bmN0aW9uKGEsYixjLGQpe3Iuc2Npc3NvcihhKkUsYipFLGMqRSxkKkUpfTt0aGlzLmVuYWJsZVNjaXNzb3JUZXN0PWZ1bmN0aW9uKGEpe0kuc2V0U2Npc3NvclRlc3QoYSl9O3RoaXMuZ2V0Q2xlYXJDb2xvcj1mdW5jdGlvbigpe3JldHVybiBVfTt0aGlzLnNldENsZWFyQ29sb3I9ZnVuY3Rpb24oYSxjKXtVLnNldChhKTtYPXZvaWQgMCE9PWM/YzoxO2IoVS5yLFUuZyxVLmIsWCl9O3RoaXMuZ2V0Q2xlYXJBbHBoYT1mdW5jdGlvbigpe3JldHVybiBYfTt0aGlzLnNldENsZWFyQWxwaGE9ZnVuY3Rpb24oYSl7WD1hO2IoVS5yLFUuZyxVLmIsWCl9O3RoaXMuY2xlYXI9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPTA7aWYodm9pZCAwPT09YXx8YSlkfD1yLkNPTE9SX0JVRkZFUl9CSVQ7aWYodm9pZCAwPT09Ynx8YilkfD1yLkRFUFRIX0JVRkZFUl9CSVQ7aWYodm9pZCAwPT09XG5jfHxjKWR8PXIuU1RFTkNJTF9CVUZGRVJfQklUO3IuY2xlYXIoZCl9O3RoaXMuY2xlYXJDb2xvcj1mdW5jdGlvbigpe3IuY2xlYXIoci5DT0xPUl9CVUZGRVJfQklUKX07dGhpcy5jbGVhckRlcHRoPWZ1bmN0aW9uKCl7ci5jbGVhcihyLkRFUFRIX0JVRkZFUl9CSVQpfTt0aGlzLmNsZWFyU3RlbmNpbD1mdW5jdGlvbigpe3IuY2xlYXIoci5TVEVOQ0lMX0JVRkZFUl9CSVQpfTt0aGlzLmNsZWFyVGFyZ2V0PWZ1bmN0aW9uKGEsYixjLGQpe3RoaXMuc2V0UmVuZGVyVGFyZ2V0KGEpO3RoaXMuY2xlYXIoYixjLGQpfTt0aGlzLnJlc2V0R0xTdGF0ZT1kO3RoaXMuZGlzcG9zZT1mdW5jdGlvbigpe0wucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIndlYmdsY29udGV4dGxvc3RcIixlLCExKX07dGhpcy5yZW5kZXJCdWZmZXJJbW1lZGlhdGU9ZnVuY3Rpb24oYSxiLGMpe0kuaW5pdEF0dHJpYnV0ZXMoKTt2YXIgZD1XLmdldChhKTthLmhhc1Bvc2l0aW9ucyYmIWQucG9zaXRpb24mJihkLnBvc2l0aW9uPVxuci5jcmVhdGVCdWZmZXIoKSk7YS5oYXNOb3JtYWxzJiYhZC5ub3JtYWwmJihkLm5vcm1hbD1yLmNyZWF0ZUJ1ZmZlcigpKTthLmhhc1V2cyYmIWQudXYmJihkLnV2PXIuY3JlYXRlQnVmZmVyKCkpO2EuaGFzQ29sb3JzJiYhZC5jb2xvciYmKGQuY29sb3I9ci5jcmVhdGVCdWZmZXIoKSk7Yj1iLmdldEF0dHJpYnV0ZXMoKTthLmhhc1Bvc2l0aW9ucyYmKHIuYmluZEJ1ZmZlcihyLkFSUkFZX0JVRkZFUixkLnBvc2l0aW9uKSxyLmJ1ZmZlckRhdGEoci5BUlJBWV9CVUZGRVIsYS5wb3NpdGlvbkFycmF5LHIuRFlOQU1JQ19EUkFXKSxJLmVuYWJsZUF0dHJpYnV0ZShiLnBvc2l0aW9uKSxyLnZlcnRleEF0dHJpYlBvaW50ZXIoYi5wb3NpdGlvbiwzLHIuRkxPQVQsITEsMCwwKSk7aWYoYS5oYXNOb3JtYWxzKXtyLmJpbmRCdWZmZXIoci5BUlJBWV9CVUZGRVIsZC5ub3JtYWwpO2lmKFwiTWVzaFBob25nTWF0ZXJpYWxcIiE9PWMudHlwZSYmYy5zaGFkaW5nPT09VEhSRUUuRmxhdFNoYWRpbmcpZm9yKHZhciBlPVxuMCxmPTMqYS5jb3VudDtlPGY7ZSs9OSl7dmFyIGc9YS5ub3JtYWxBcnJheSxoPShnW2UrMF0rZ1tlKzNdK2dbZSs2XSkvMyxrPShnW2UrMV0rZ1tlKzRdK2dbZSs3XSkvMyxsPShnW2UrMl0rZ1tlKzVdK2dbZSs4XSkvMztnW2UrMF09aDtnW2UrMV09aztnW2UrMl09bDtnW2UrM109aDtnW2UrNF09aztnW2UrNV09bDtnW2UrNl09aDtnW2UrN109aztnW2UrOF09bH1yLmJ1ZmZlckRhdGEoci5BUlJBWV9CVUZGRVIsYS5ub3JtYWxBcnJheSxyLkRZTkFNSUNfRFJBVyk7SS5lbmFibGVBdHRyaWJ1dGUoYi5ub3JtYWwpO3IudmVydGV4QXR0cmliUG9pbnRlcihiLm5vcm1hbCwzLHIuRkxPQVQsITEsMCwwKX1hLmhhc1V2cyYmYy5tYXAmJihyLmJpbmRCdWZmZXIoci5BUlJBWV9CVUZGRVIsZC51diksci5idWZmZXJEYXRhKHIuQVJSQVlfQlVGRkVSLGEudXZBcnJheSxyLkRZTkFNSUNfRFJBVyksSS5lbmFibGVBdHRyaWJ1dGUoYi51diksci52ZXJ0ZXhBdHRyaWJQb2ludGVyKGIudXYsMixyLkZMT0FULFxuITEsMCwwKSk7YS5oYXNDb2xvcnMmJmMudmVydGV4Q29sb3JzIT09VEhSRUUuTm9Db2xvcnMmJihyLmJpbmRCdWZmZXIoci5BUlJBWV9CVUZGRVIsZC5jb2xvciksci5idWZmZXJEYXRhKHIuQVJSQVlfQlVGRkVSLGEuY29sb3JBcnJheSxyLkRZTkFNSUNfRFJBVyksSS5lbmFibGVBdHRyaWJ1dGUoYi5jb2xvciksci52ZXJ0ZXhBdHRyaWJQb2ludGVyKGIuY29sb3IsMyxyLkZMT0FULCExLDAsMCkpO0kuZGlzYWJsZVVudXNlZEF0dHJpYnV0ZXMoKTtyLmRyYXdBcnJheXMoci5UUklBTkdMRVMsMCxhLmNvdW50KTthLmNvdW50PTB9O3RoaXMucmVuZGVyQnVmZmVyRGlyZWN0PWZ1bmN0aW9uKGEsYixjLGQsZSxmLGcpe3QoZSk7dmFyIGg9dihhLGIsYyxlLGYpLGw9ITE7YT1kLmlkK1wiX1wiK2guaWQrXCJfXCIrZS53aXJlZnJhbWU7YSE9PXNhJiYoc2E9YSxsPSEwKTtiPWYubW9ycGhUYXJnZXRJbmZsdWVuY2VzO2lmKHZvaWQgMCE9PWIpe2E9W107Yz0wO2ZvcihsPWIubGVuZ3RoO2M8bDtjKyspe3ZhciBuPVxuYltjXTthLnB1c2goW24sY10pfWEuc29ydChrKTs4PGEubGVuZ3RoJiYoYS5sZW5ndGg9OCk7dmFyIG09ZC5tb3JwaEF0dHJpYnV0ZXM7Yz0wO2ZvcihsPWEubGVuZ3RoO2M8bDtjKyspbj1hW2NdLG1hW2NdPW5bMF0sMCE9PW5bMF0/KGI9blsxXSwhMD09PWUubW9ycGhUYXJnZXRzJiZtLnBvc2l0aW9uJiZkLmFkZEF0dHJpYnV0ZShcIm1vcnBoVGFyZ2V0XCIrYyxtLnBvc2l0aW9uW2JdKSwhMD09PWUubW9ycGhOb3JtYWxzJiZtLm5vcm1hbCYmZC5hZGRBdHRyaWJ1dGUoXCJtb3JwaE5vcm1hbFwiK2MsbS5ub3JtYWxbYl0pKTooITA9PT1lLm1vcnBoVGFyZ2V0cyYmZC5yZW1vdmVBdHRyaWJ1dGUoXCJtb3JwaFRhcmdldFwiK2MpLCEwPT09ZS5tb3JwaE5vcm1hbHMmJmQucmVtb3ZlQXR0cmlidXRlKFwibW9ycGhOb3JtYWxcIitjKSk7YT1oLmdldFVuaWZvcm1zKCk7bnVsbCE9PWEubW9ycGhUYXJnZXRJbmZsdWVuY2VzJiZyLnVuaWZvcm0xZnYoYS5tb3JwaFRhcmdldEluZmx1ZW5jZXMsbWEpO2w9XG4hMH1iPWQuaW5kZXg7Yz1kLmF0dHJpYnV0ZXMucG9zaXRpb247ITA9PT1lLndpcmVmcmFtZSYmKGI9dmEuZ2V0V2lyZWZyYW1lQXR0cmlidXRlKGQpKTtudWxsIT09Yj8oYT1IYSxhLnNldEluZGV4KGIpKTphPUdhO2lmKGwpe2E6e3ZhciBsPXZvaWQgMCxxO2lmKGQgaW5zdGFuY2VvZiBUSFJFRS5JbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSYmKHE9Uy5nZXQoXCJBTkdMRV9pbnN0YW5jZWRfYXJyYXlzXCIpLG51bGw9PT1xKSl7Y29uc29sZS5lcnJvcihcIlRIUkVFLldlYkdMUmVuZGVyZXIuc2V0dXBWZXJ0ZXhBdHRyaWJ1dGVzOiB1c2luZyBUSFJFRS5JbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSBidXQgaGFyZHdhcmUgZG9lcyBub3Qgc3VwcG9ydCBleHRlbnNpb24gQU5HTEVfaW5zdGFuY2VkX2FycmF5cy5cIik7YnJlYWsgYX12b2lkIDA9PT1sJiYobD0wKTtJLmluaXRBdHRyaWJ1dGVzKCk7dmFyIG49ZC5hdHRyaWJ1dGVzLGg9aC5nZXRBdHRyaWJ1dGVzKCksbT1lLmRlZmF1bHRBdHRyaWJ1dGVWYWx1ZXMsXG5wO2ZvcihwIGluIGgpe3ZhciBzPWhbcF07aWYoMDw9cyl7dmFyIHU9bltwXTtpZih2b2lkIDAhPT11KXt2YXIgdz11Lml0ZW1TaXplLHg9dmEuZ2V0QXR0cmlidXRlQnVmZmVyKHUpO2lmKHUgaW5zdGFuY2VvZiBUSFJFRS5JbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSl7dmFyIEY9dS5kYXRhLEQ9Ri5zdHJpZGUsdT11Lm9mZnNldDtGIGluc3RhbmNlb2YgVEhSRUUuSW5zdGFuY2VkSW50ZXJsZWF2ZWRCdWZmZXI/KEkuZW5hYmxlQXR0cmlidXRlQW5kRGl2aXNvcihzLEYubWVzaFBlckF0dHJpYnV0ZSxxKSx2b2lkIDA9PT1kLm1heEluc3RhbmNlZENvdW50JiYoZC5tYXhJbnN0YW5jZWRDb3VudD1GLm1lc2hQZXJBdHRyaWJ1dGUqRi5jb3VudCkpOkkuZW5hYmxlQXR0cmlidXRlKHMpO3IuYmluZEJ1ZmZlcihyLkFSUkFZX0JVRkZFUix4KTtyLnZlcnRleEF0dHJpYlBvaW50ZXIocyx3LHIuRkxPQVQsITEsRCpGLmFycmF5LkJZVEVTX1BFUl9FTEVNRU5ULChsKkQrdSkqRi5hcnJheS5CWVRFU19QRVJfRUxFTUVOVCl9ZWxzZSB1IGluc3RhbmNlb2ZcblRIUkVFLkluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZT8oSS5lbmFibGVBdHRyaWJ1dGVBbmREaXZpc29yKHMsdS5tZXNoUGVyQXR0cmlidXRlLHEpLHZvaWQgMD09PWQubWF4SW5zdGFuY2VkQ291bnQmJihkLm1heEluc3RhbmNlZENvdW50PXUubWVzaFBlckF0dHJpYnV0ZSp1LmNvdW50KSk6SS5lbmFibGVBdHRyaWJ1dGUocyksci5iaW5kQnVmZmVyKHIuQVJSQVlfQlVGRkVSLHgpLHIudmVydGV4QXR0cmliUG9pbnRlcihzLHcsci5GTE9BVCwhMSwwLGwqdyo0KX1lbHNlIGlmKHZvaWQgMCE9PW0mJih3PW1bcF0sdm9pZCAwIT09dykpc3dpdGNoKHcubGVuZ3RoKXtjYXNlIDI6ci52ZXJ0ZXhBdHRyaWIyZnYocyx3KTticmVhaztjYXNlIDM6ci52ZXJ0ZXhBdHRyaWIzZnYocyx3KTticmVhaztjYXNlIDQ6ci52ZXJ0ZXhBdHRyaWI0ZnYocyx3KTticmVhaztkZWZhdWx0OnIudmVydGV4QXR0cmliMWZ2KHMsdyl9fX1JLmRpc2FibGVVbnVzZWRBdHRyaWJ1dGVzKCl9bnVsbCE9PWImJnIuYmluZEJ1ZmZlcihyLkVMRU1FTlRfQVJSQVlfQlVGRkVSLFxudmEuZ2V0QXR0cmlidXRlQnVmZmVyKGIpKX1xPUluZmluaXR5O251bGwhPT1iP3E9Yi5jb3VudDp2b2lkIDAhPT1jJiYocT1jLmNvdW50KTtwPWQuZHJhd1JhbmdlLnN0YXJ0O2I9ZC5kcmF3UmFuZ2UuY291bnQ7Yz1udWxsIT09Zz9nLnN0YXJ0OjA7bD1udWxsIT09Zz9nLmNvdW50OkluZmluaXR5O2c9TWF0aC5tYXgoMCxwLGMpO3E9TWF0aC5taW4oMCtxLHArYixjK2wpLTE7cT1NYXRoLm1heCgwLHEtZysxKTtmIGluc3RhbmNlb2YgVEhSRUUuTWVzaD8oITA9PT1lLndpcmVmcmFtZT8oSS5zZXRMaW5lV2lkdGgoZS53aXJlZnJhbWVMaW5ld2lkdGgqRSksYS5zZXRNb2RlKHIuTElORVMpKTphLnNldE1vZGUoci5UUklBTkdMRVMpLGQgaW5zdGFuY2VvZiBUSFJFRS5JbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSYmMDxkLm1heEluc3RhbmNlZENvdW50P2EucmVuZGVySW5zdGFuY2VzKGQpOmEucmVuZGVyKGcscSkpOmYgaW5zdGFuY2VvZiBUSFJFRS5MaW5lPyhkPWUubGluZXdpZHRoLHZvaWQgMD09PVxuZCYmKGQ9MSksSS5zZXRMaW5lV2lkdGgoZCpFKSxmIGluc3RhbmNlb2YgVEhSRUUuTGluZVNlZ21lbnRzP2Euc2V0TW9kZShyLkxJTkVTKTphLnNldE1vZGUoci5MSU5FX1NUUklQKSxhLnJlbmRlcihnLHEpKTpmIGluc3RhbmNlb2YgVEhSRUUuUG9pbnRzJiYoYS5zZXRNb2RlKHIuUE9JTlRTKSxhLnJlbmRlcihnLHEpKX07dGhpcy5yZW5kZXI9ZnVuY3Rpb24oYSxiLGMsZCl7aWYoITE9PT1iIGluc3RhbmNlb2YgVEhSRUUuQ2FtZXJhKWNvbnNvbGUuZXJyb3IoXCJUSFJFRS5XZWJHTFJlbmRlcmVyLnJlbmRlcjogY2FtZXJhIGlzIG5vdCBhbiBpbnN0YW5jZSBvZiBUSFJFRS5DYW1lcmEuXCIpO2Vsc2V7dmFyIGU9YS5mb2c7c2E9XCJcIjt0YT0tMTtyYT1udWxsO3dhPSEwOyEwPT09YS5hdXRvVXBkYXRlJiZhLnVwZGF0ZU1hdHJpeFdvcmxkKCk7bnVsbD09PWIucGFyZW50JiZiLnVwZGF0ZU1hdHJpeFdvcmxkKCk7Yi5tYXRyaXhXb3JsZEludmVyc2UuZ2V0SW52ZXJzZShiLm1hdHJpeFdvcmxkKTtcbnhhLm11bHRpcGx5TWF0cmljZXMoYi5wcm9qZWN0aW9uTWF0cml4LGIubWF0cml4V29ybGRJbnZlcnNlKTtCYS5zZXRGcm9tTWF0cml4KHhhKTtkYS5sZW5ndGg9MDtmYT1nYT0tMTtlYS5sZW5ndGg9MDtqYS5sZW5ndGg9MDtxKGEsYik7Y2EubGVuZ3RoPWdhKzE7Wi5sZW5ndGg9ZmErMTshMD09PWFhLnNvcnRPYmplY3RzJiYoY2Euc29ydChtKSxaLnNvcnQocCkpOyQucmVuZGVyKGEpO2thLmNhbGxzPTA7a2EudmVydGljZXM9MDtrYS5mYWNlcz0wO2thLnBvaW50cz0wO3RoaXMuc2V0UmVuZGVyVGFyZ2V0KGMpOyh0aGlzLmF1dG9DbGVhcnx8ZCkmJnRoaXMuY2xlYXIodGhpcy5hdXRvQ2xlYXJDb2xvcix0aGlzLmF1dG9DbGVhckRlcHRoLHRoaXMuYXV0b0NsZWFyU3RlbmNpbCk7YS5vdmVycmlkZU1hdGVyaWFsPyhkPWEub3ZlcnJpZGVNYXRlcmlhbCxzKGNhLGIsZGEsZSxkKSxzKFosYixkYSxlLGQpKTooSS5zZXRCbGVuZGluZyhUSFJFRS5Ob0JsZW5kaW5nKSxzKGNhLGIsZGEsZSksXG5zKFosYixkYSxlKSk7SWEucmVuZGVyKGEsYik7SmEucmVuZGVyKGEsYixEYSxFYSk7YyYmKGE9Yy50ZXh0dXJlLGI9eShjKSxhLmdlbmVyYXRlTWlwbWFwcyYmYiYmYS5taW5GaWx0ZXIhPT1USFJFRS5OZWFyZXN0RmlsdGVyJiZhLm1pbkZpbHRlciE9PVRIUkVFLkxpbmVhckZpbHRlciYmKGE9YyBpbnN0YW5jZW9mIFRIUkVFLldlYkdMUmVuZGVyVGFyZ2V0Q3ViZT9yLlRFWFRVUkVfQ1VCRV9NQVA6ci5URVhUVVJFXzJELGM9Vy5nZXQoYy50ZXh0dXJlKS5fX3dlYmdsVGV4dHVyZSxJLmJpbmRUZXh0dXJlKGEsYyksci5nZW5lcmF0ZU1pcG1hcChhKSxJLmJpbmRUZXh0dXJlKGEsbnVsbCkpKTtJLnNldERlcHRoVGVzdCghMCk7SS5zZXREZXB0aFdyaXRlKCEwKTtJLnNldENvbG9yV3JpdGUoITApfX07dGhpcy5zZXRGYWNlQ3VsbGluZz1mdW5jdGlvbihhLGIpe2E9PT1USFJFRS5DdWxsRmFjZU5vbmU/SS5kaXNhYmxlKHIuQ1VMTF9GQUNFKTooYj09PVRIUkVFLkZyb250RmFjZURpcmVjdGlvbkNXP1xuci5mcm9udEZhY2Uoci5DVyk6ci5mcm9udEZhY2Uoci5DQ1cpLGE9PT1USFJFRS5DdWxsRmFjZUJhY2s/ci5jdWxsRmFjZShyLkJBQ0spOmE9PT1USFJFRS5DdWxsRmFjZUZyb250P3IuY3VsbEZhY2Uoci5GUk9OVCk6ci5jdWxsRmFjZShyLkZST05UX0FORF9CQUNLKSxJLmVuYWJsZShyLkNVTExfRkFDRSkpfTt0aGlzLnNldFRleHR1cmU9ZnVuY3Rpb24oYSxiKXt2YXIgYz1XLmdldChhKTtpZigwPGEudmVyc2lvbiYmYy5fX3ZlcnNpb24hPT1hLnZlcnNpb24pe3ZhciBkPWEuaW1hZ2U7aWYodm9pZCAwPT09ZCljb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlcmVyOiBUZXh0dXJlIG1hcmtlZCBmb3IgdXBkYXRlIGJ1dCBpbWFnZSBpcyB1bmRlZmluZWRcIixhKTtlbHNlIGlmKCExPT09ZC5jb21wbGV0ZSljb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlcmVyOiBUZXh0dXJlIG1hcmtlZCBmb3IgdXBkYXRlIGJ1dCBpbWFnZSBpcyBpbmNvbXBsZXRlXCIsYSk7ZWxzZXt2b2lkIDA9PT1cbmMuX193ZWJnbEluaXQmJihjLl9fd2ViZ2xJbml0PSEwLGEuYWRkRXZlbnRMaXN0ZW5lcihcImRpc3Bvc2VcIixnKSxjLl9fd2ViZ2xUZXh0dXJlPXIuY3JlYXRlVGV4dHVyZSgpLGxhLnRleHR1cmVzKyspO0kuYWN0aXZlVGV4dHVyZShyLlRFWFRVUkUwK2IpO0kuYmluZFRleHR1cmUoci5URVhUVVJFXzJELGMuX193ZWJnbFRleHR1cmUpO3IucGl4ZWxTdG9yZWkoci5VTlBBQ0tfRkxJUF9ZX1dFQkdMLGEuZmxpcFkpO3IucGl4ZWxTdG9yZWkoci5VTlBBQ0tfUFJFTVVMVElQTFlfQUxQSEFfV0VCR0wsYS5wcmVtdWx0aXBseUFscGhhKTtyLnBpeGVsU3RvcmVpKHIuVU5QQUNLX0FMSUdOTUVOVCxhLnVucGFja0FsaWdubWVudCk7YS5pbWFnZT1CKGEuaW1hZ2UsaGEubWF4VGV4dHVyZVNpemUpO2lmKChhLndyYXBTIT09VEhSRUUuQ2xhbXBUb0VkZ2VXcmFwcGluZ3x8YS53cmFwVCE9PVRIUkVFLkNsYW1wVG9FZGdlV3JhcHBpbmd8fGEubWluRmlsdGVyIT09VEhSRUUuTmVhcmVzdEZpbHRlciYmXG5hLm1pbkZpbHRlciE9PVRIUkVFLkxpbmVhckZpbHRlcikmJiExPT09eShhLmltYWdlKSl7ZD1hLmltYWdlO2lmKGQgaW5zdGFuY2VvZiBIVE1MSW1hZ2VFbGVtZW50fHxkIGluc3RhbmNlb2YgSFRNTENhbnZhc0VsZW1lbnQpe3ZhciBlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7ZS53aWR0aD1USFJFRS5NYXRoLm5lYXJlc3RQb3dlck9mVHdvKGQud2lkdGgpO2UuaGVpZ2h0PVRIUkVFLk1hdGgubmVhcmVzdFBvd2VyT2ZUd28oZC5oZWlnaHQpO2UuZ2V0Q29udGV4dChcIjJkXCIpLmRyYXdJbWFnZShkLDAsMCxlLndpZHRoLGUuaGVpZ2h0KTtjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlcmVyOiBpbWFnZSBpcyBub3QgcG93ZXIgb2YgdHdvIChcIitkLndpZHRoK1wieFwiK2QuaGVpZ2h0K1wiKS4gUmVzaXplZCB0byBcIitlLndpZHRoK1wieFwiK2UuaGVpZ2h0LGQpO2Q9ZX1hLmltYWdlPWR9dmFyIGY9YS5pbWFnZSxkPXkoZiksZT1OKGEuZm9ybWF0KSxoPU4oYS50eXBlKTtcbngoci5URVhUVVJFXzJELGEsZCk7dmFyIGs9YS5taXBtYXBzO2lmKGEgaW5zdGFuY2VvZiBUSFJFRS5EYXRhVGV4dHVyZSlpZigwPGsubGVuZ3RoJiZkKXtmb3IodmFyIGw9MCxuPWsubGVuZ3RoO2w8bjtsKyspZj1rW2xdLEkudGV4SW1hZ2UyRChyLlRFWFRVUkVfMkQsbCxlLGYud2lkdGgsZi5oZWlnaHQsMCxlLGgsZi5kYXRhKTthLmdlbmVyYXRlTWlwbWFwcz0hMX1lbHNlIEkudGV4SW1hZ2UyRChyLlRFWFRVUkVfMkQsMCxlLGYud2lkdGgsZi5oZWlnaHQsMCxlLGgsZi5kYXRhKTtlbHNlIGlmKGEgaW5zdGFuY2VvZiBUSFJFRS5Db21wcmVzc2VkVGV4dHVyZSlmb3IobD0wLG49ay5sZW5ndGg7bDxuO2wrKylmPWtbbF0sYS5mb3JtYXQhPT1USFJFRS5SR0JBRm9ybWF0JiZhLmZvcm1hdCE9PVRIUkVFLlJHQkZvcm1hdD8tMTxJLmdldENvbXByZXNzZWRUZXh0dXJlRm9ybWF0cygpLmluZGV4T2YoZSk/SS5jb21wcmVzc2VkVGV4SW1hZ2UyRChyLlRFWFRVUkVfMkQsbCxlLGYud2lkdGgsXG5mLmhlaWdodCwwLGYuZGF0YSk6Y29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogQXR0ZW1wdCB0byBsb2FkIHVuc3VwcG9ydGVkIGNvbXByZXNzZWQgdGV4dHVyZSBmb3JtYXQgaW4gLnVwbG9hZFRleHR1cmUoKVwiKTpJLnRleEltYWdlMkQoci5URVhUVVJFXzJELGwsZSxmLndpZHRoLGYuaGVpZ2h0LDAsZSxoLGYuZGF0YSk7ZWxzZSBpZigwPGsubGVuZ3RoJiZkKXtsPTA7Zm9yKG49ay5sZW5ndGg7bDxuO2wrKylmPWtbbF0sSS50ZXhJbWFnZTJEKHIuVEVYVFVSRV8yRCxsLGUsZSxoLGYpO2EuZ2VuZXJhdGVNaXBtYXBzPSExfWVsc2UgSS50ZXhJbWFnZTJEKHIuVEVYVFVSRV8yRCwwLGUsZSxoLGEuaW1hZ2UpO2EuZ2VuZXJhdGVNaXBtYXBzJiZkJiZyLmdlbmVyYXRlTWlwbWFwKHIuVEVYVFVSRV8yRCk7Yy5fX3ZlcnNpb249YS52ZXJzaW9uO2lmKGEub25VcGRhdGUpYS5vblVwZGF0ZShhKX19ZWxzZSBJLmFjdGl2ZVRleHR1cmUoci5URVhUVVJFMCtiKSxJLmJpbmRUZXh0dXJlKHIuVEVYVFVSRV8yRCxcbmMuX193ZWJnbFRleHR1cmUpfTt0aGlzLnNldFJlbmRlclRhcmdldD1mdW5jdGlvbihhKXt2YXIgYj1hIGluc3RhbmNlb2YgVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXRDdWJlO2lmKGEmJnZvaWQgMD09PVcuZ2V0KGEpLl9fd2ViZ2xGcmFtZWJ1ZmZlcil7dmFyIGM9Vy5nZXQoYSksZD1XLmdldChhLnRleHR1cmUpO3ZvaWQgMD09PWEuZGVwdGhCdWZmZXImJihhLmRlcHRoQnVmZmVyPSEwKTt2b2lkIDA9PT1hLnN0ZW5jaWxCdWZmZXImJihhLnN0ZW5jaWxCdWZmZXI9ITApO2EuYWRkRXZlbnRMaXN0ZW5lcihcImRpc3Bvc2VcIixmKTtkLl9fd2ViZ2xUZXh0dXJlPXIuY3JlYXRlVGV4dHVyZSgpO2xhLnRleHR1cmVzKys7dmFyIGU9eShhKSxnPU4oYS50ZXh0dXJlLmZvcm1hdCksaD1OKGEudGV4dHVyZS50eXBlKTtpZihiKXtjLl9fd2ViZ2xGcmFtZWJ1ZmZlcj1bXTtjLl9fd2ViZ2xSZW5kZXJidWZmZXI9W107SS5iaW5kVGV4dHVyZShyLlRFWFRVUkVfQ1VCRV9NQVAsZC5fX3dlYmdsVGV4dHVyZSk7XG54KHIuVEVYVFVSRV9DVUJFX01BUCxhLnRleHR1cmUsZSk7Zm9yKGQ9MDs2PmQ7ZCsrKWMuX193ZWJnbEZyYW1lYnVmZmVyW2RdPXIuY3JlYXRlRnJhbWVidWZmZXIoKSxjLl9fd2ViZ2xSZW5kZXJidWZmZXJbZF09ci5jcmVhdGVSZW5kZXJidWZmZXIoKSxJLnRleEltYWdlMkQoci5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1grZCwwLGcsYS53aWR0aCxhLmhlaWdodCwwLGcsaCxudWxsKSxKKGMuX193ZWJnbEZyYW1lYnVmZmVyW2RdLGEsci5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1grZCksRihjLl9fd2ViZ2xSZW5kZXJidWZmZXJbZF0sYSk7YS50ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcyYmZSYmci5nZW5lcmF0ZU1pcG1hcChyLlRFWFRVUkVfQ1VCRV9NQVApfWVsc2UgYy5fX3dlYmdsRnJhbWVidWZmZXI9ci5jcmVhdGVGcmFtZWJ1ZmZlcigpLGMuX193ZWJnbFJlbmRlcmJ1ZmZlcj1hLnNoYXJlRGVwdGhGcm9tP2Euc2hhcmVEZXB0aEZyb20uX193ZWJnbFJlbmRlcmJ1ZmZlcjpcbnIuY3JlYXRlUmVuZGVyYnVmZmVyKCksSS5iaW5kVGV4dHVyZShyLlRFWFRVUkVfMkQsZC5fX3dlYmdsVGV4dHVyZSkseChyLlRFWFRVUkVfMkQsYS50ZXh0dXJlLGUpLEkudGV4SW1hZ2UyRChyLlRFWFRVUkVfMkQsMCxnLGEud2lkdGgsYS5oZWlnaHQsMCxnLGgsbnVsbCksSihjLl9fd2ViZ2xGcmFtZWJ1ZmZlcixhLHIuVEVYVFVSRV8yRCksYS5zaGFyZURlcHRoRnJvbT9hLmRlcHRoQnVmZmVyJiYhYS5zdGVuY2lsQnVmZmVyP3IuZnJhbWVidWZmZXJSZW5kZXJidWZmZXIoci5GUkFNRUJVRkZFUixyLkRFUFRIX0FUVEFDSE1FTlQsci5SRU5ERVJCVUZGRVIsYy5fX3dlYmdsUmVuZGVyYnVmZmVyKTphLmRlcHRoQnVmZmVyJiZhLnN0ZW5jaWxCdWZmZXImJnIuZnJhbWVidWZmZXJSZW5kZXJidWZmZXIoci5GUkFNRUJVRkZFUixyLkRFUFRIX1NURU5DSUxfQVRUQUNITUVOVCxyLlJFTkRFUkJVRkZFUixjLl9fd2ViZ2xSZW5kZXJidWZmZXIpOkYoYy5fX3dlYmdsUmVuZGVyYnVmZmVyLFxuYSksYS50ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcyYmZSYmci5nZW5lcmF0ZU1pcG1hcChyLlRFWFRVUkVfMkQpO2I/SS5iaW5kVGV4dHVyZShyLlRFWFRVUkVfQ1VCRV9NQVAsbnVsbCk6SS5iaW5kVGV4dHVyZShyLlRFWFRVUkVfMkQsbnVsbCk7ci5iaW5kUmVuZGVyYnVmZmVyKHIuUkVOREVSQlVGRkVSLG51bGwpO3IuYmluZEZyYW1lYnVmZmVyKHIuRlJBTUVCVUZGRVIsbnVsbCl9YT8oYz1XLmdldChhKSxkPWI/Yy5fX3dlYmdsRnJhbWVidWZmZXJbYS5hY3RpdmVDdWJlRmFjZV06Yy5fX3dlYmdsRnJhbWVidWZmZXIsYz1hLndpZHRoLGU9YS5oZWlnaHQsaD1nPTApOihkPW51bGwsYz1wYSxlPXFhLGc9bmEsaD1vYSk7ZCE9PXphJiYoci5iaW5kRnJhbWVidWZmZXIoci5GUkFNRUJVRkZFUixkKSxyLnZpZXdwb3J0KGcsaCxjLGUpLHphPWQpO2ImJihkPVcuZ2V0KGEudGV4dHVyZSksci5mcmFtZWJ1ZmZlclRleHR1cmUyRChyLkZSQU1FQlVGRkVSLHIuQ09MT1JfQVRUQUNITUVOVDAsXG5yLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCthLmFjdGl2ZUN1YmVGYWNlLGQuX193ZWJnbFRleHR1cmUsMCkpO0RhPWM7RWE9ZX07dGhpcy5yZWFkUmVuZGVyVGFyZ2V0UGl4ZWxzPWZ1bmN0aW9uKGEsYixjLGQsZSxmKXtpZighMT09PWEgaW5zdGFuY2VvZiBUSFJFRS5XZWJHTFJlbmRlclRhcmdldCljb25zb2xlLmVycm9yKFwiVEhSRUUuV2ViR0xSZW5kZXJlci5yZWFkUmVuZGVyVGFyZ2V0UGl4ZWxzOiByZW5kZXJUYXJnZXQgaXMgbm90IFRIUkVFLldlYkdMUmVuZGVyVGFyZ2V0LlwiKTtlbHNle3ZhciBnPVcuZ2V0KGEpLl9fd2ViZ2xGcmFtZWJ1ZmZlcjtpZihnKXt2YXIgaD0hMTtnIT09emEmJihyLmJpbmRGcmFtZWJ1ZmZlcihyLkZSQU1FQlVGRkVSLGcpLGg9ITApO3RyeXt2YXIgaz1hLnRleHR1cmU7ay5mb3JtYXQhPT1USFJFRS5SR0JBRm9ybWF0JiZOKGsuZm9ybWF0KSE9PXIuZ2V0UGFyYW1ldGVyKHIuSU1QTEVNRU5UQVRJT05fQ09MT1JfUkVBRF9GT1JNQVQpP2NvbnNvbGUuZXJyb3IoXCJUSFJFRS5XZWJHTFJlbmRlcmVyLnJlYWRSZW5kZXJUYXJnZXRQaXhlbHM6IHJlbmRlclRhcmdldCBpcyBub3QgaW4gUkdCQSBvciBpbXBsZW1lbnRhdGlvbiBkZWZpbmVkIGZvcm1hdC5cIik6XG5rLnR5cGU9PT1USFJFRS5VbnNpZ25lZEJ5dGVUeXBlfHxOKGsudHlwZSk9PT1yLmdldFBhcmFtZXRlcihyLklNUExFTUVOVEFUSU9OX0NPTE9SX1JFQURfVFlQRSl8fGsudHlwZT09PVRIUkVFLkZsb2F0VHlwZSYmUy5nZXQoXCJXRUJHTF9jb2xvcl9idWZmZXJfZmxvYXRcIil8fGsudHlwZT09PVRIUkVFLkhhbGZGbG9hdFR5cGUmJlMuZ2V0KFwiRVhUX2NvbG9yX2J1ZmZlcl9oYWxmX2Zsb2F0XCIpP3IuY2hlY2tGcmFtZWJ1ZmZlclN0YXR1cyhyLkZSQU1FQlVGRkVSKT09PXIuRlJBTUVCVUZGRVJfQ09NUExFVEU/ci5yZWFkUGl4ZWxzKGIsYyxkLGUsTihrLmZvcm1hdCksTihrLnR5cGUpLGYpOmNvbnNvbGUuZXJyb3IoXCJUSFJFRS5XZWJHTFJlbmRlcmVyLnJlYWRSZW5kZXJUYXJnZXRQaXhlbHM6IHJlYWRQaXhlbHMgZnJvbSByZW5kZXJUYXJnZXQgZmFpbGVkLiBGcmFtZWJ1ZmZlciBub3QgY29tcGxldGUuXCIpOmNvbnNvbGUuZXJyb3IoXCJUSFJFRS5XZWJHTFJlbmRlcmVyLnJlYWRSZW5kZXJUYXJnZXRQaXhlbHM6IHJlbmRlclRhcmdldCBpcyBub3QgaW4gVW5zaWduZWRCeXRlVHlwZSBvciBpbXBsZW1lbnRhdGlvbiBkZWZpbmVkIHR5cGUuXCIpfWZpbmFsbHl7aCYmXG5yLmJpbmRGcmFtZWJ1ZmZlcihyLkZSQU1FQlVGRkVSLHphKX19fX07dGhpcy5zdXBwb3J0c0Zsb2F0VGV4dHVyZXM9ZnVuY3Rpb24oKXtjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc3VwcG9ydHNGbG9hdFRleHR1cmVzKCkgaXMgbm93IC5leHRlbnNpb25zLmdldCggJ09FU190ZXh0dXJlX2Zsb2F0JyApLlwiKTtyZXR1cm4gUy5nZXQoXCJPRVNfdGV4dHVyZV9mbG9hdFwiKX07dGhpcy5zdXBwb3J0c0hhbGZGbG9hdFRleHR1cmVzPWZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogLnN1cHBvcnRzSGFsZkZsb2F0VGV4dHVyZXMoKSBpcyBub3cgLmV4dGVuc2lvbnMuZ2V0KCAnT0VTX3RleHR1cmVfaGFsZl9mbG9hdCcgKS5cIik7cmV0dXJuIFMuZ2V0KFwiT0VTX3RleHR1cmVfaGFsZl9mbG9hdFwiKX07dGhpcy5zdXBwb3J0c1N0YW5kYXJkRGVyaXZhdGl2ZXM9ZnVuY3Rpb24oKXtjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc3VwcG9ydHNTdGFuZGFyZERlcml2YXRpdmVzKCkgaXMgbm93IC5leHRlbnNpb25zLmdldCggJ09FU19zdGFuZGFyZF9kZXJpdmF0aXZlcycgKS5cIik7XG5yZXR1cm4gUy5nZXQoXCJPRVNfc3RhbmRhcmRfZGVyaXZhdGl2ZXNcIil9O3RoaXMuc3VwcG9ydHNDb21wcmVzc2VkVGV4dHVyZVMzVEM9ZnVuY3Rpb24oKXtjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc3VwcG9ydHNDb21wcmVzc2VkVGV4dHVyZVMzVEMoKSBpcyBub3cgLmV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGMnICkuXCIpO3JldHVybiBTLmdldChcIldFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjXCIpfTt0aGlzLnN1cHBvcnRzQ29tcHJlc3NlZFRleHR1cmVQVlJUQz1mdW5jdGlvbigpe2NvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyZXI6IC5zdXBwb3J0c0NvbXByZXNzZWRUZXh0dXJlUFZSVEMoKSBpcyBub3cgLmV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjJyApLlwiKTtyZXR1cm4gUy5nZXQoXCJXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGNcIil9O3RoaXMuc3VwcG9ydHNCbGVuZE1pbk1heD1cbmZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogLnN1cHBvcnRzQmxlbmRNaW5NYXgoKSBpcyBub3cgLmV4dGVuc2lvbnMuZ2V0KCAnRVhUX2JsZW5kX21pbm1heCcgKS5cIik7cmV0dXJuIFMuZ2V0KFwiRVhUX2JsZW5kX21pbm1heFwiKX07dGhpcy5zdXBwb3J0c1ZlcnRleFRleHR1cmVzPWZ1bmN0aW9uKCl7cmV0dXJuIGhhLnZlcnRleFRleHR1cmVzfTt0aGlzLnN1cHBvcnRzSW5zdGFuY2VkQXJyYXlzPWZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogLnN1cHBvcnRzSW5zdGFuY2VkQXJyYXlzKCkgaXMgbm93IC5leHRlbnNpb25zLmdldCggJ0FOR0xFX2luc3RhbmNlZF9hcnJheXMnICkuXCIpO3JldHVybiBTLmdldChcIkFOR0xFX2luc3RhbmNlZF9hcnJheXNcIil9O3RoaXMuaW5pdE1hdGVyaWFsPWZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogLmluaXRNYXRlcmlhbCgpIGhhcyBiZWVuIHJlbW92ZWQuXCIpfTtcbnRoaXMuYWRkUHJlUGx1Z2luPWZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogLmFkZFByZVBsdWdpbigpIGhhcyBiZWVuIHJlbW92ZWQuXCIpfTt0aGlzLmFkZFBvc3RQbHVnaW49ZnVuY3Rpb24oKXtjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlcmVyOiAuYWRkUG9zdFBsdWdpbigpIGhhcyBiZWVuIHJlbW92ZWQuXCIpfTt0aGlzLnVwZGF0ZVNoYWRvd01hcD1mdW5jdGlvbigpe2NvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyZXI6IC51cGRhdGVTaGFkb3dNYXAoKSBoYXMgYmVlbiByZW1vdmVkLlwiKX07T2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcyx7c2hhZG93TWFwRW5hYmxlZDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuICQuZW5hYmxlZH0sc2V0OmZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyZXI6IC5zaGFkb3dNYXBFbmFibGVkIGlzIG5vdyAuc2hhZG93TWFwLmVuYWJsZWQuXCIpOyQuZW5hYmxlZD1hfX0sXG5zaGFkb3dNYXBUeXBlOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gJC50eXBlfSxzZXQ6ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogLnNoYWRvd01hcFR5cGUgaXMgbm93IC5zaGFkb3dNYXAudHlwZS5cIik7JC50eXBlPWF9fSxzaGFkb3dNYXBDdWxsRmFjZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuICQuY3VsbEZhY2V9LHNldDpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc2hhZG93TWFwQ3VsbEZhY2UgaXMgbm93IC5zaGFkb3dNYXAuY3VsbEZhY2UuXCIpOyQuY3VsbEZhY2U9YX19LHNoYWRvd01hcERlYnVnOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gJC5kZWJ1Z30sc2V0OmZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyZXI6IC5zaGFkb3dNYXBEZWJ1ZyBpcyBub3cgLnNoYWRvd01hcC5kZWJ1Zy5cIik7JC5kZWJ1Zz1hfX19KX07XG5USFJFRS5XZWJHTFJlbmRlclRhcmdldD1mdW5jdGlvbihhLGIsYyl7dGhpcy51dWlkPVRIUkVFLk1hdGguZ2VuZXJhdGVVVUlEKCk7dGhpcy53aWR0aD1hO3RoaXMuaGVpZ2h0PWI7Yz1jfHx7fTt2b2lkIDA9PT1jLm1pbkZpbHRlciYmKGMubWluRmlsdGVyPVRIUkVFLkxpbmVhckZpbHRlcik7dGhpcy50ZXh0dXJlPW5ldyBUSFJFRS5UZXh0dXJlKHZvaWQgMCx2b2lkIDAsYy53cmFwUyxjLndyYXBULGMubWFnRmlsdGVyLGMubWluRmlsdGVyLGMuZm9ybWF0LGMudHlwZSxjLmFuaXNvdHJvcHkpO3RoaXMuZGVwdGhCdWZmZXI9dm9pZCAwIT09Yy5kZXB0aEJ1ZmZlcj9jLmRlcHRoQnVmZmVyOiEwO3RoaXMuc3RlbmNpbEJ1ZmZlcj12b2lkIDAhPT1jLnN0ZW5jaWxCdWZmZXI/Yy5zdGVuY2lsQnVmZmVyOiEwO3RoaXMuc2hhcmVEZXB0aEZyb209dm9pZCAwIT09Yy5zaGFyZURlcHRoRnJvbT9jLnNoYXJlRGVwdGhGcm9tOm51bGx9O1xuVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5XZWJHTFJlbmRlclRhcmdldCxnZXQgd3JhcFMoKXtjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLndyYXBTIGlzIG5vdyAudGV4dHVyZS53cmFwUy5cIik7cmV0dXJuIHRoaXMudGV4dHVyZS53cmFwU30sc2V0IHdyYXBTKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAud3JhcFMgaXMgbm93IC50ZXh0dXJlLndyYXBTLlwiKTt0aGlzLnRleHR1cmUud3JhcFM9YX0sZ2V0IHdyYXBUKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC53cmFwVCBpcyBub3cgLnRleHR1cmUud3JhcFQuXCIpO3JldHVybiB0aGlzLnRleHR1cmUud3JhcFR9LHNldCB3cmFwVChhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLndyYXBUIGlzIG5vdyAudGV4dHVyZS53cmFwVC5cIik7dGhpcy50ZXh0dXJlLndyYXBUPWF9LFxuZ2V0IG1hZ0ZpbHRlcigpe2NvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAubWFnRmlsdGVyIGlzIG5vdyAudGV4dHVyZS5tYWdGaWx0ZXIuXCIpO3JldHVybiB0aGlzLnRleHR1cmUubWFnRmlsdGVyfSxzZXQgbWFnRmlsdGVyKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAubWFnRmlsdGVyIGlzIG5vdyAudGV4dHVyZS5tYWdGaWx0ZXIuXCIpO3RoaXMudGV4dHVyZS5tYWdGaWx0ZXI9YX0sZ2V0IG1pbkZpbHRlcigpe2NvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAubWluRmlsdGVyIGlzIG5vdyAudGV4dHVyZS5taW5GaWx0ZXIuXCIpO3JldHVybiB0aGlzLnRleHR1cmUubWluRmlsdGVyfSxzZXQgbWluRmlsdGVyKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAubWluRmlsdGVyIGlzIG5vdyAudGV4dHVyZS5taW5GaWx0ZXIuXCIpO3RoaXMudGV4dHVyZS5taW5GaWx0ZXI9YX0sZ2V0IGFuaXNvdHJvcHkoKXtjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLmFuaXNvdHJvcHkgaXMgbm93IC50ZXh0dXJlLmFuaXNvdHJvcHkuXCIpO1xucmV0dXJuIHRoaXMudGV4dHVyZS5hbmlzb3Ryb3B5fSxzZXQgYW5pc290cm9weShhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLmFuaXNvdHJvcHkgaXMgbm93IC50ZXh0dXJlLmFuaXNvdHJvcHkuXCIpO3RoaXMudGV4dHVyZS5hbmlzb3Ryb3B5PWF9LGdldCBvZmZzZXQoKXtjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLm9mZnNldCBpcyBub3cgLnRleHR1cmUub2Zmc2V0LlwiKTtyZXR1cm4gdGhpcy50ZXh0dXJlLm9mZnNldH0sc2V0IG9mZnNldChhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLm9mZnNldCBpcyBub3cgLnRleHR1cmUub2Zmc2V0LlwiKTt0aGlzLnRleHR1cmUub2Zmc2V0PWF9LGdldCByZXBlYXQoKXtjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLnJlcGVhdCBpcyBub3cgLnRleHR1cmUucmVwZWF0LlwiKTtyZXR1cm4gdGhpcy50ZXh0dXJlLnJlcGVhdH0sc2V0IHJlcGVhdChhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLnJlcGVhdCBpcyBub3cgLnRleHR1cmUucmVwZWF0LlwiKTtcbnRoaXMudGV4dHVyZS5yZXBlYXQ9YX0sZ2V0IGZvcm1hdCgpe2NvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAuZm9ybWF0IGlzIG5vdyAudGV4dHVyZS5mb3JtYXQuXCIpO3JldHVybiB0aGlzLnRleHR1cmUuZm9ybWF0fSxzZXQgZm9ybWF0KGEpe2NvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAuZm9ybWF0IGlzIG5vdyAudGV4dHVyZS5mb3JtYXQuXCIpO3RoaXMudGV4dHVyZS5mb3JtYXQ9YX0sZ2V0IHR5cGUoKXtjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLnR5cGUgaXMgbm93IC50ZXh0dXJlLnR5cGUuXCIpO3JldHVybiB0aGlzLnRleHR1cmUudHlwZX0sc2V0IHR5cGUoYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC50eXBlIGlzIG5vdyAudGV4dHVyZS50eXBlLlwiKTt0aGlzLnRleHR1cmUudHlwZT1hfSxnZXQgZ2VuZXJhdGVNaXBtYXBzKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5nZW5lcmF0ZU1pcG1hcHMgaXMgbm93IC50ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcy5cIik7XG5yZXR1cm4gdGhpcy50ZXh0dXJlLmdlbmVyYXRlTWlwbWFwc30sc2V0IGdlbmVyYXRlTWlwbWFwcyhhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLmdlbmVyYXRlTWlwbWFwcyBpcyBub3cgLnRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzLlwiKTt0aGlzLnRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzPWF9LHNldFNpemU6ZnVuY3Rpb24oYSxiKXtpZih0aGlzLndpZHRoIT09YXx8dGhpcy5oZWlnaHQhPT1iKXRoaXMud2lkdGg9YSx0aGlzLmhlaWdodD1iLHRoaXMuZGlzcG9zZSgpfSxjbG9uZTpmdW5jdGlvbigpe3JldHVybihuZXcgdGhpcy5jb25zdHJ1Y3RvcikuY29weSh0aGlzKX0sY29weTpmdW5jdGlvbihhKXt0aGlzLndpZHRoPWEud2lkdGg7dGhpcy5oZWlnaHQ9YS5oZWlnaHQ7dGhpcy50ZXh0dXJlPWEudGV4dHVyZS5jbG9uZSgpO3RoaXMuZGVwdGhCdWZmZXI9YS5kZXB0aEJ1ZmZlcjt0aGlzLnN0ZW5jaWxCdWZmZXI9YS5zdGVuY2lsQnVmZmVyO3RoaXMuc2hhcmVEZXB0aEZyb209XG5hLnNoYXJlRGVwdGhGcm9tO3JldHVybiB0aGlzfSxkaXNwb3NlOmZ1bmN0aW9uKCl7dGhpcy5kaXNwYXRjaEV2ZW50KHt0eXBlOlwiZGlzcG9zZVwifSl9fTtUSFJFRS5FdmVudERpc3BhdGNoZXIucHJvdG90eXBlLmFwcGx5KFRIUkVFLldlYkdMUmVuZGVyVGFyZ2V0LnByb3RvdHlwZSk7VEhSRUUuV2ViR0xSZW5kZXJUYXJnZXRDdWJlPWZ1bmN0aW9uKGEsYixjKXtUSFJFRS5XZWJHTFJlbmRlclRhcmdldC5jYWxsKHRoaXMsYSxiLGMpO3RoaXMuYWN0aXZlQ3ViZUZhY2U9MH07VEhSRUUuV2ViR0xSZW5kZXJUYXJnZXRDdWJlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLldlYkdMUmVuZGVyVGFyZ2V0LnByb3RvdHlwZSk7VEhSRUUuV2ViR0xSZW5kZXJUYXJnZXRDdWJlLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5XZWJHTFJlbmRlclRhcmdldEN1YmU7XG5USFJFRS5XZWJHTEJ1ZmZlclJlbmRlcmVyPWZ1bmN0aW9uKGEsYixjKXt2YXIgZDt0aGlzLnNldE1vZGU9ZnVuY3Rpb24oYSl7ZD1hfTt0aGlzLnJlbmRlcj1mdW5jdGlvbihiLGcpe2EuZHJhd0FycmF5cyhkLGIsZyk7Yy5jYWxscysrO2MudmVydGljZXMrPWc7ZD09PWEuVFJJQU5HTEVTJiYoYy5mYWNlcys9Zy8zKX07dGhpcy5yZW5kZXJJbnN0YW5jZXM9ZnVuY3Rpb24oYSl7dmFyIGM9Yi5nZXQoXCJBTkdMRV9pbnN0YW5jZWRfYXJyYXlzXCIpO2lmKG51bGw9PT1jKWNvbnNvbGUuZXJyb3IoXCJUSFJFRS5XZWJHTEJ1ZmZlclJlbmRlcmVyOiB1c2luZyBUSFJFRS5JbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSBidXQgaGFyZHdhcmUgZG9lcyBub3Qgc3VwcG9ydCBleHRlbnNpb24gQU5HTEVfaW5zdGFuY2VkX2FycmF5cy5cIik7ZWxzZXt2YXIgZj1hLmF0dHJpYnV0ZXMucG9zaXRpb247ZiBpbnN0YW5jZW9mIFRIUkVFLkludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlP2MuZHJhd0FycmF5c0luc3RhbmNlZEFOR0xFKGQsXG4wLGYuZGF0YS5jb3VudCxhLm1heEluc3RhbmNlZENvdW50KTpjLmRyYXdBcnJheXNJbnN0YW5jZWRBTkdMRShkLDAsZi5jb3VudCxhLm1heEluc3RhbmNlZENvdW50KX19fTtcblRIUkVFLldlYkdMSW5kZXhlZEJ1ZmZlclJlbmRlcmVyPWZ1bmN0aW9uKGEsYixjKXt2YXIgZCxlLGc7dGhpcy5zZXRNb2RlPWZ1bmN0aW9uKGEpe2Q9YX07dGhpcy5zZXRJbmRleD1mdW5jdGlvbihjKXtjLmFycmF5IGluc3RhbmNlb2YgVWludDMyQXJyYXkmJmIuZ2V0KFwiT0VTX2VsZW1lbnRfaW5kZXhfdWludFwiKT8oZT1hLlVOU0lHTkVEX0lOVCxnPTQpOihlPWEuVU5TSUdORURfU0hPUlQsZz0yKX07dGhpcy5yZW5kZXI9ZnVuY3Rpb24oYixoKXthLmRyYXdFbGVtZW50cyhkLGgsZSxiKmcpO2MuY2FsbHMrKztjLnZlcnRpY2VzKz1oO2Q9PT1hLlRSSUFOR0xFUyYmKGMuZmFjZXMrPWgvMyl9O3RoaXMucmVuZGVySW5zdGFuY2VzPWZ1bmN0aW9uKGEpe3ZhciBjPWIuZ2V0KFwiQU5HTEVfaW5zdGFuY2VkX2FycmF5c1wiKTtudWxsPT09Yz9jb25zb2xlLmVycm9yKFwiVEhSRUUuV2ViR0xCdWZmZXJSZW5kZXJlcjogdXNpbmcgVEhSRUUuSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnkgYnV0IGhhcmR3YXJlIGRvZXMgbm90IHN1cHBvcnQgZXh0ZW5zaW9uIEFOR0xFX2luc3RhbmNlZF9hcnJheXMuXCIpOlxuYy5kcmF3RWxlbWVudHNJbnN0YW5jZWRBTkdMRShkLGEuaW5kZXguYXJyYXkubGVuZ3RoLGUsMCxhLm1heEluc3RhbmNlZENvdW50KX19O1xuVEhSRUUuV2ViR0xFeHRlbnNpb25zPWZ1bmN0aW9uKGEpe3ZhciBiPXt9O3RoaXMuZ2V0PWZ1bmN0aW9uKGMpe2lmKHZvaWQgMCE9PWJbY10pcmV0dXJuIGJbY107dmFyIGQ7c3dpdGNoKGMpe2Nhc2UgXCJFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWNcIjpkPWEuZ2V0RXh0ZW5zaW9uKFwiRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljXCIpfHxhLmdldEV4dGVuc2lvbihcIk1PWl9FWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWNcIil8fGEuZ2V0RXh0ZW5zaW9uKFwiV0VCS0lUX0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpY1wiKTticmVhaztjYXNlIFwiV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGNcIjpkPWEuZ2V0RXh0ZW5zaW9uKFwiV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGNcIil8fGEuZ2V0RXh0ZW5zaW9uKFwiTU9aX1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjXCIpfHxhLmdldEV4dGVuc2lvbihcIldFQktJVF9XRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0Y1wiKTtcbmJyZWFrO2Nhc2UgXCJXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGNcIjpkPWEuZ2V0RXh0ZW5zaW9uKFwiV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjXCIpfHxhLmdldEV4dGVuc2lvbihcIldFQktJVF9XRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGNcIik7YnJlYWs7ZGVmYXVsdDpkPWEuZ2V0RXh0ZW5zaW9uKGMpfW51bGw9PT1kJiZjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlcmVyOiBcIitjK1wiIGV4dGVuc2lvbiBub3Qgc3VwcG9ydGVkLlwiKTtyZXR1cm4gYltjXT1kfX07XG5USFJFRS5XZWJHTENhcGFiaWxpdGllcz1mdW5jdGlvbihhLGIsYyl7ZnVuY3Rpb24gZChiKXtpZihcImhpZ2hwXCI9PT1iKXtpZigwPGEuZ2V0U2hhZGVyUHJlY2lzaW9uRm9ybWF0KGEuVkVSVEVYX1NIQURFUixhLkhJR0hfRkxPQVQpLnByZWNpc2lvbiYmMDxhLmdldFNoYWRlclByZWNpc2lvbkZvcm1hdChhLkZSQUdNRU5UX1NIQURFUixhLkhJR0hfRkxPQVQpLnByZWNpc2lvbilyZXR1cm5cImhpZ2hwXCI7Yj1cIm1lZGl1bXBcIn1yZXR1cm5cIm1lZGl1bXBcIj09PWImJjA8YS5nZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQoYS5WRVJURVhfU0hBREVSLGEuTUVESVVNX0ZMT0FUKS5wcmVjaXNpb24mJjA8YS5nZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQoYS5GUkFHTUVOVF9TSEFERVIsYS5NRURJVU1fRkxPQVQpLnByZWNpc2lvbj9cIm1lZGl1bXBcIjpcImxvd3BcIn10aGlzLmdldE1heFByZWNpc2lvbj1kO3RoaXMucHJlY2lzaW9uPXZvaWQgMCE9PWMucHJlY2lzaW9uP2MucHJlY2lzaW9uOlwiaGlnaHBcIjtcbnRoaXMubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlcj12b2lkIDAhPT1jLmxvZ2FyaXRobWljRGVwdGhCdWZmZXI/Yy5sb2dhcml0aG1pY0RlcHRoQnVmZmVyOiExO3RoaXMubWF4VGV4dHVyZXM9YS5nZXRQYXJhbWV0ZXIoYS5NQVhfVEVYVFVSRV9JTUFHRV9VTklUUyk7dGhpcy5tYXhWZXJ0ZXhUZXh0dXJlcz1hLmdldFBhcmFtZXRlcihhLk1BWF9WRVJURVhfVEVYVFVSRV9JTUFHRV9VTklUUyk7dGhpcy5tYXhUZXh0dXJlU2l6ZT1hLmdldFBhcmFtZXRlcihhLk1BWF9URVhUVVJFX1NJWkUpO3RoaXMubWF4Q3ViZW1hcFNpemU9YS5nZXRQYXJhbWV0ZXIoYS5NQVhfQ1VCRV9NQVBfVEVYVFVSRV9TSVpFKTt0aGlzLm1heEF0dHJpYnV0ZXM9YS5nZXRQYXJhbWV0ZXIoYS5NQVhfVkVSVEVYX0FUVFJJQlMpO3RoaXMubWF4VmVydGV4VW5pZm9ybXM9YS5nZXRQYXJhbWV0ZXIoYS5NQVhfVkVSVEVYX1VOSUZPUk1fVkVDVE9SUyk7dGhpcy5tYXhWYXJ5aW5ncz1hLmdldFBhcmFtZXRlcihhLk1BWF9WQVJZSU5HX1ZFQ1RPUlMpO1xudGhpcy5tYXhGcmFnbWVudFVuaWZvcm1zPWEuZ2V0UGFyYW1ldGVyKGEuTUFYX0ZSQUdNRU5UX1VOSUZPUk1fVkVDVE9SUyk7dGhpcy52ZXJ0ZXhUZXh0dXJlcz0wPHRoaXMubWF4VmVydGV4VGV4dHVyZXM7dGhpcy5mbG9hdEZyYWdtZW50VGV4dHVyZXM9ISFiLmdldChcIk9FU190ZXh0dXJlX2Zsb2F0XCIpO3RoaXMuZmxvYXRWZXJ0ZXhUZXh0dXJlcz10aGlzLnZlcnRleFRleHR1cmVzJiZ0aGlzLmZsb2F0RnJhZ21lbnRUZXh0dXJlcztjPWQodGhpcy5wcmVjaXNpb24pO2MhPT10aGlzLnByZWNpc2lvbiYmKGNvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyZXI6XCIsdGhpcy5wcmVjaXNpb24sXCJub3Qgc3VwcG9ydGVkLCB1c2luZ1wiLGMsXCJpbnN0ZWFkLlwiKSx0aGlzLnByZWNpc2lvbj1jKTt0aGlzLmxvZ2FyaXRobWljRGVwdGhCdWZmZXImJih0aGlzLmxvZ2FyaXRobWljRGVwdGhCdWZmZXI9ISFiLmdldChcIkVYVF9mcmFnX2RlcHRoXCIpKX07XG5USFJFRS5XZWJHTEdlb21ldHJpZXM9ZnVuY3Rpb24oYSxiLGMpe2Z1bmN0aW9uIGQoYSl7YT1hLnRhcmdldDt2YXIgaD1nW2EuaWRdLmF0dHJpYnV0ZXMsbDtmb3IobCBpbiBoKWUoaFtsXSk7YS5yZW1vdmVFdmVudExpc3RlbmVyKFwiZGlzcG9zZVwiLGQpO2RlbGV0ZSBnW2EuaWRdO2w9Yi5nZXQoYSk7bC53aXJlZnJhbWUmJmUobC53aXJlZnJhbWUpO2MubWVtb3J5Lmdlb21ldHJpZXMtLX1mdW5jdGlvbiBlKGMpe3ZhciBkO2Q9YyBpbnN0YW5jZW9mIFRIUkVFLkludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlP2IuZ2V0KGMuZGF0YSkuX193ZWJnbEJ1ZmZlcjpiLmdldChjKS5fX3dlYmdsQnVmZmVyO3ZvaWQgMCE9PWQmJihhLmRlbGV0ZUJ1ZmZlcihkKSxjIGluc3RhbmNlb2YgVEhSRUUuSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGU/Yi5kZWxldGUoYy5kYXRhKTpiLmRlbGV0ZShjKSl9dmFyIGc9e307dGhpcy5nZXQ9ZnVuY3Rpb24oYSl7dmFyIGI9YS5nZW9tZXRyeTtpZih2b2lkIDAhPT1cbmdbYi5pZF0pcmV0dXJuIGdbYi5pZF07Yi5hZGRFdmVudExpc3RlbmVyKFwiZGlzcG9zZVwiLGQpO3ZhciBlO2IgaW5zdGFuY2VvZiBUSFJFRS5CdWZmZXJHZW9tZXRyeT9lPWI6YiBpbnN0YW5jZW9mIFRIUkVFLkdlb21ldHJ5JiYodm9pZCAwPT09Yi5fYnVmZmVyR2VvbWV0cnkmJihiLl9idWZmZXJHZW9tZXRyeT0obmV3IFRIUkVFLkJ1ZmZlckdlb21ldHJ5KS5zZXRGcm9tT2JqZWN0KGEpKSxlPWIuX2J1ZmZlckdlb21ldHJ5KTtnW2IuaWRdPWU7Yy5tZW1vcnkuZ2VvbWV0cmllcysrO3JldHVybiBlfX07XG5USFJFRS5XZWJHTE9iamVjdHM9ZnVuY3Rpb24oYSxiLGMpe2Z1bmN0aW9uIGQoYyxkKXt2YXIgZT1jIGluc3RhbmNlb2YgVEhSRUUuSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGU/Yy5kYXRhOmMsZz1iLmdldChlKTt2b2lkIDA9PT1nLl9fd2ViZ2xCdWZmZXI/KGcuX193ZWJnbEJ1ZmZlcj1hLmNyZWF0ZUJ1ZmZlcigpLGEuYmluZEJ1ZmZlcihkLGcuX193ZWJnbEJ1ZmZlciksYS5idWZmZXJEYXRhKGQsZS5hcnJheSxlLmR5bmFtaWM/YS5EWU5BTUlDX0RSQVc6YS5TVEFUSUNfRFJBVyksZy52ZXJzaW9uPWUudmVyc2lvbik6Zy52ZXJzaW9uIT09ZS52ZXJzaW9uJiYoYS5iaW5kQnVmZmVyKGQsZy5fX3dlYmdsQnVmZmVyKSwhMT09PWUuZHluYW1pY3x8LTE9PT1lLnVwZGF0ZVJhbmdlLmNvdW50P2EuYnVmZmVyU3ViRGF0YShkLDAsZS5hcnJheSk6MD09PWUudXBkYXRlUmFuZ2UuY291bnQ/Y29uc29sZS5lcnJvcihcIlRIUkVFLldlYkdMT2JqZWN0cy51cGRhdGVCdWZmZXI6IGR5bmFtaWMgVEhSRUUuQnVmZmVyQXR0cmlidXRlIG1hcmtlZCBhcyBuZWVkc1VwZGF0ZSBidXQgdXBkYXRlUmFuZ2UuY291bnQgaXMgMCwgZW5zdXJlIHlvdSBhcmUgdXNpbmcgc2V0IG1ldGhvZHMgb3IgdXBkYXRpbmcgbWFudWFsbHkuXCIpOlxuKGEuYnVmZmVyU3ViRGF0YShkLGUudXBkYXRlUmFuZ2Uub2Zmc2V0KmUuYXJyYXkuQllURVNfUEVSX0VMRU1FTlQsZS5hcnJheS5zdWJhcnJheShlLnVwZGF0ZVJhbmdlLm9mZnNldCxlLnVwZGF0ZVJhbmdlLm9mZnNldCtlLnVwZGF0ZVJhbmdlLmNvdW50KSksZS51cGRhdGVSYW5nZS5jb3VudD0wKSxnLnZlcnNpb249ZS52ZXJzaW9uKX1mdW5jdGlvbiBlKGEsYixjKXtpZihiPmMpe3ZhciBkPWI7Yj1jO2M9ZH1kPWFbYl07cmV0dXJuIHZvaWQgMD09PWQ/KGFbYl09W2NdLCEwKTotMT09PWQuaW5kZXhPZihjKT8oZC5wdXNoKGMpLCEwKTohMX12YXIgZz1uZXcgVEhSRUUuV2ViR0xHZW9tZXRyaWVzKGEsYixjKTt0aGlzLmdldEF0dHJpYnV0ZUJ1ZmZlcj1mdW5jdGlvbihhKXtyZXR1cm4gYSBpbnN0YW5jZW9mIFRIUkVFLkludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlP2IuZ2V0KGEuZGF0YSkuX193ZWJnbEJ1ZmZlcjpiLmdldChhKS5fX3dlYmdsQnVmZmVyfTt0aGlzLmdldFdpcmVmcmFtZUF0dHJpYnV0ZT1cbmZ1bmN0aW9uKGMpe3ZhciBnPWIuZ2V0KGMpO2lmKHZvaWQgMCE9PWcud2lyZWZyYW1lKXJldHVybiBnLndpcmVmcmFtZTt2YXIgbD1bXSxrPWMuaW5kZXgsbT1jLmF0dHJpYnV0ZXM7Yz1tLnBvc2l0aW9uO2lmKG51bGwhPT1rKWZvcih2YXIgbT17fSxrPWsuYXJyYXkscD0wLG49ay5sZW5ndGg7cDxuO3ArPTMpe3ZhciBxPWtbcCswXSxzPWtbcCsxXSx0PWtbcCsyXTtlKG0scSxzKSYmbC5wdXNoKHEscyk7ZShtLHMsdCkmJmwucHVzaChzLHQpO2UobSx0LHEpJiZsLnB1c2godCxxKX1lbHNlIGZvcihrPW0ucG9zaXRpb24uYXJyYXkscD0wLG49ay5sZW5ndGgvMy0xO3A8bjtwKz0zKXE9cCswLHM9cCsxLHQ9cCsyLGwucHVzaChxLHMscyx0LHQscSk7bD1uZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKG5ldyAoNjU1MzU8Yy5jb3VudD9VaW50MzJBcnJheTpVaW50MTZBcnJheSkobCksMSk7ZChsLGEuRUxFTUVOVF9BUlJBWV9CVUZGRVIpO3JldHVybiBnLndpcmVmcmFtZT1sfTt0aGlzLnVwZGF0ZT1cbmZ1bmN0aW9uKGIpe3ZhciBjPWcuZ2V0KGIpO2IuZ2VvbWV0cnkgaW5zdGFuY2VvZiBUSFJFRS5HZW9tZXRyeSYmYy51cGRhdGVGcm9tT2JqZWN0KGIpO2I9Yy5pbmRleDt2YXIgZT1jLmF0dHJpYnV0ZXM7bnVsbCE9PWImJmQoYixhLkVMRU1FTlRfQVJSQVlfQlVGRkVSKTtmb3IodmFyIGsgaW4gZSlkKGVba10sYS5BUlJBWV9CVUZGRVIpO2I9Yy5tb3JwaEF0dHJpYnV0ZXM7Zm9yKGsgaW4gYilmb3IodmFyIGU9YltrXSxtPTAscD1lLmxlbmd0aDttPHA7bSsrKWQoZVttXSxhLkFSUkFZX0JVRkZFUik7cmV0dXJuIGN9fTtcblRIUkVFLldlYkdMUHJvZ3JhbT1mdW5jdGlvbigpe2Z1bmN0aW9uIGEoYSl7dmFyIGI9W10sYztmb3IoYyBpbiBhKXt2YXIgZj1hW2NdOyExIT09ZiYmYi5wdXNoKFwiI2RlZmluZSBcIitjK1wiIFwiK2YpfXJldHVybiBiLmpvaW4oXCJcXG5cIil9ZnVuY3Rpb24gYihhKXtyZXR1cm5cIlwiIT09YX12YXIgYz0wO3JldHVybiBmdW5jdGlvbihkLGUsZyxmKXt2YXIgaD1kLmNvbnRleHQsbD1nLmRlZmluZXMsaz1nLl9fd2ViZ2xTaGFkZXIudmVydGV4U2hhZGVyLG09Zy5fX3dlYmdsU2hhZGVyLmZyYWdtZW50U2hhZGVyLHA9XCJTSEFET1dNQVBfVFlQRV9CQVNJQ1wiO2Yuc2hhZG93TWFwVHlwZT09PVRIUkVFLlBDRlNoYWRvd01hcD9wPVwiU0hBRE9XTUFQX1RZUEVfUENGXCI6Zi5zaGFkb3dNYXBUeXBlPT09VEhSRUUuUENGU29mdFNoYWRvd01hcCYmKHA9XCJTSEFET1dNQVBfVFlQRV9QQ0ZfU09GVFwiKTt2YXIgbj1cIkVOVk1BUF9UWVBFX0NVQkVcIixxPVwiRU5WTUFQX01PREVfUkVGTEVDVElPTlwiLHM9XCJFTlZNQVBfQkxFTkRJTkdfTVVMVElQTFlcIjtcbmlmKGYuZW52TWFwKXtzd2l0Y2goZy5lbnZNYXAubWFwcGluZyl7Y2FzZSBUSFJFRS5DdWJlUmVmbGVjdGlvbk1hcHBpbmc6Y2FzZSBUSFJFRS5DdWJlUmVmcmFjdGlvbk1hcHBpbmc6bj1cIkVOVk1BUF9UWVBFX0NVQkVcIjticmVhaztjYXNlIFRIUkVFLkVxdWlyZWN0YW5ndWxhclJlZmxlY3Rpb25NYXBwaW5nOmNhc2UgVEhSRUUuRXF1aXJlY3Rhbmd1bGFyUmVmcmFjdGlvbk1hcHBpbmc6bj1cIkVOVk1BUF9UWVBFX0VRVUlSRUNcIjticmVhaztjYXNlIFRIUkVFLlNwaGVyaWNhbFJlZmxlY3Rpb25NYXBwaW5nOm49XCJFTlZNQVBfVFlQRV9TUEhFUkVcIn1zd2l0Y2goZy5lbnZNYXAubWFwcGluZyl7Y2FzZSBUSFJFRS5DdWJlUmVmcmFjdGlvbk1hcHBpbmc6Y2FzZSBUSFJFRS5FcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZzpxPVwiRU5WTUFQX01PREVfUkVGUkFDVElPTlwifXN3aXRjaChnLmNvbWJpbmUpe2Nhc2UgVEhSRUUuTXVsdGlwbHlPcGVyYXRpb246cz1cIkVOVk1BUF9CTEVORElOR19NVUxUSVBMWVwiO1xuYnJlYWs7Y2FzZSBUSFJFRS5NaXhPcGVyYXRpb246cz1cIkVOVk1BUF9CTEVORElOR19NSVhcIjticmVhaztjYXNlIFRIUkVFLkFkZE9wZXJhdGlvbjpzPVwiRU5WTUFQX0JMRU5ESU5HX0FERFwifX12YXIgdD0wPGQuZ2FtbWFGYWN0b3I/ZC5nYW1tYUZhY3RvcjoxLHY9YShsKSx1PWguY3JlYXRlUHJvZ3JhbSgpO2cgaW5zdGFuY2VvZiBUSFJFRS5SYXdTaGFkZXJNYXRlcmlhbD9kPWw9XCJcIjoobD1bXCJwcmVjaXNpb24gXCIrZi5wcmVjaXNpb24rXCIgZmxvYXQ7XCIsXCJwcmVjaXNpb24gXCIrZi5wcmVjaXNpb24rXCIgaW50O1wiLFwiI2RlZmluZSBTSEFERVJfTkFNRSBcIitnLl9fd2ViZ2xTaGFkZXIubmFtZSx2LGYuc3VwcG9ydHNWZXJ0ZXhUZXh0dXJlcz9cIiNkZWZpbmUgVkVSVEVYX1RFWFRVUkVTXCI6XCJcIixkLmdhbW1hSW5wdXQ/XCIjZGVmaW5lIEdBTU1BX0lOUFVUXCI6XCJcIixkLmdhbW1hT3V0cHV0P1wiI2RlZmluZSBHQU1NQV9PVVRQVVRcIjpcIlwiLFwiI2RlZmluZSBHQU1NQV9GQUNUT1IgXCIrdCxcIiNkZWZpbmUgTUFYX0RJUl9MSUdIVFMgXCIrXG5mLm1heERpckxpZ2h0cyxcIiNkZWZpbmUgTUFYX1BPSU5UX0xJR0hUUyBcIitmLm1heFBvaW50TGlnaHRzLFwiI2RlZmluZSBNQVhfU1BPVF9MSUdIVFMgXCIrZi5tYXhTcG90TGlnaHRzLFwiI2RlZmluZSBNQVhfSEVNSV9MSUdIVFMgXCIrZi5tYXhIZW1pTGlnaHRzLFwiI2RlZmluZSBNQVhfU0hBRE9XUyBcIitmLm1heFNoYWRvd3MsXCIjZGVmaW5lIE1BWF9CT05FUyBcIitmLm1heEJvbmVzLGYubWFwP1wiI2RlZmluZSBVU0VfTUFQXCI6XCJcIixmLmVudk1hcD9cIiNkZWZpbmUgVVNFX0VOVk1BUFwiOlwiXCIsZi5lbnZNYXA/XCIjZGVmaW5lIFwiK3E6XCJcIixmLmxpZ2h0TWFwP1wiI2RlZmluZSBVU0VfTElHSFRNQVBcIjpcIlwiLGYuYW9NYXA/XCIjZGVmaW5lIFVTRV9BT01BUFwiOlwiXCIsZi5lbWlzc2l2ZU1hcD9cIiNkZWZpbmUgVVNFX0VNSVNTSVZFTUFQXCI6XCJcIixmLmJ1bXBNYXA/XCIjZGVmaW5lIFVTRV9CVU1QTUFQXCI6XCJcIixmLm5vcm1hbE1hcD9cIiNkZWZpbmUgVVNFX05PUk1BTE1BUFwiOlwiXCIsZi5kaXNwbGFjZW1lbnRNYXAmJlxuZi5zdXBwb3J0c1ZlcnRleFRleHR1cmVzP1wiI2RlZmluZSBVU0VfRElTUExBQ0VNRU5UTUFQXCI6XCJcIixmLnNwZWN1bGFyTWFwP1wiI2RlZmluZSBVU0VfU1BFQ1VMQVJNQVBcIjpcIlwiLGYuYWxwaGFNYXA/XCIjZGVmaW5lIFVTRV9BTFBIQU1BUFwiOlwiXCIsZi52ZXJ0ZXhDb2xvcnM/XCIjZGVmaW5lIFVTRV9DT0xPUlwiOlwiXCIsZi5mbGF0U2hhZGluZz9cIiNkZWZpbmUgRkxBVF9TSEFERURcIjpcIlwiLGYuc2tpbm5pbmc/XCIjZGVmaW5lIFVTRV9TS0lOTklOR1wiOlwiXCIsZi51c2VWZXJ0ZXhUZXh0dXJlP1wiI2RlZmluZSBCT05FX1RFWFRVUkVcIjpcIlwiLGYubW9ycGhUYXJnZXRzP1wiI2RlZmluZSBVU0VfTU9SUEhUQVJHRVRTXCI6XCJcIixmLm1vcnBoTm9ybWFscyYmITE9PT1mLmZsYXRTaGFkaW5nP1wiI2RlZmluZSBVU0VfTU9SUEhOT1JNQUxTXCI6XCJcIixmLmRvdWJsZVNpZGVkP1wiI2RlZmluZSBET1VCTEVfU0lERURcIjpcIlwiLGYuZmxpcFNpZGVkP1wiI2RlZmluZSBGTElQX1NJREVEXCI6XCJcIixmLnNoYWRvd01hcEVuYWJsZWQ/XG5cIiNkZWZpbmUgVVNFX1NIQURPV01BUFwiOlwiXCIsZi5zaGFkb3dNYXBFbmFibGVkP1wiI2RlZmluZSBcIitwOlwiXCIsZi5zaGFkb3dNYXBEZWJ1Zz9cIiNkZWZpbmUgU0hBRE9XTUFQX0RFQlVHXCI6XCJcIiwwPGYucG9pbnRMaWdodFNoYWRvd3M/XCIjZGVmaW5lIFBPSU5UX0xJR0hUX1NIQURPV1NcIjpcIlwiLGYuc2l6ZUF0dGVudWF0aW9uP1wiI2RlZmluZSBVU0VfU0laRUFUVEVOVUFUSU9OXCI6XCJcIixmLmxvZ2FyaXRobWljRGVwdGhCdWZmZXI/XCIjZGVmaW5lIFVTRV9MT0dERVBUSEJVRlwiOlwiXCIsZi5sb2dhcml0aG1pY0RlcHRoQnVmZmVyJiZkLmV4dGVuc2lvbnMuZ2V0KFwiRVhUX2ZyYWdfZGVwdGhcIik/XCIjZGVmaW5lIFVTRV9MT0dERVBUSEJVRl9FWFRcIjpcIlwiLFwidW5pZm9ybSBtYXQ0IG1vZGVsTWF0cml4O1wiLFwidW5pZm9ybSBtYXQ0IG1vZGVsVmlld01hdHJpeDtcIixcInVuaWZvcm0gbWF0NCBwcm9qZWN0aW9uTWF0cml4O1wiLFwidW5pZm9ybSBtYXQ0IHZpZXdNYXRyaXg7XCIsXCJ1bmlmb3JtIG1hdDMgbm9ybWFsTWF0cml4O1wiLFxuXCJ1bmlmb3JtIHZlYzMgY2FtZXJhUG9zaXRpb247XCIsXCJhdHRyaWJ1dGUgdmVjMyBwb3NpdGlvbjtcIixcImF0dHJpYnV0ZSB2ZWMzIG5vcm1hbDtcIixcImF0dHJpYnV0ZSB2ZWMyIHV2O1wiLFwiI2lmZGVmIFVTRV9DT0xPUlwiLFwiXFx0YXR0cmlidXRlIHZlYzMgY29sb3I7XCIsXCIjZW5kaWZcIixcIiNpZmRlZiBVU0VfTU9SUEhUQVJHRVRTXCIsXCJcXHRhdHRyaWJ1dGUgdmVjMyBtb3JwaFRhcmdldDA7XCIsXCJcXHRhdHRyaWJ1dGUgdmVjMyBtb3JwaFRhcmdldDE7XCIsXCJcXHRhdHRyaWJ1dGUgdmVjMyBtb3JwaFRhcmdldDI7XCIsXCJcXHRhdHRyaWJ1dGUgdmVjMyBtb3JwaFRhcmdldDM7XCIsXCJcXHQjaWZkZWYgVVNFX01PUlBITk9STUFMU1wiLFwiXFx0XFx0YXR0cmlidXRlIHZlYzMgbW9ycGhOb3JtYWwwO1wiLFwiXFx0XFx0YXR0cmlidXRlIHZlYzMgbW9ycGhOb3JtYWwxO1wiLFwiXFx0XFx0YXR0cmlidXRlIHZlYzMgbW9ycGhOb3JtYWwyO1wiLFwiXFx0XFx0YXR0cmlidXRlIHZlYzMgbW9ycGhOb3JtYWwzO1wiLFwiXFx0I2Vsc2VcIixcIlxcdFxcdGF0dHJpYnV0ZSB2ZWMzIG1vcnBoVGFyZ2V0NDtcIixcblwiXFx0XFx0YXR0cmlidXRlIHZlYzMgbW9ycGhUYXJnZXQ1O1wiLFwiXFx0XFx0YXR0cmlidXRlIHZlYzMgbW9ycGhUYXJnZXQ2O1wiLFwiXFx0XFx0YXR0cmlidXRlIHZlYzMgbW9ycGhUYXJnZXQ3O1wiLFwiXFx0I2VuZGlmXCIsXCIjZW5kaWZcIixcIiNpZmRlZiBVU0VfU0tJTk5JTkdcIixcIlxcdGF0dHJpYnV0ZSB2ZWM0IHNraW5JbmRleDtcIixcIlxcdGF0dHJpYnV0ZSB2ZWM0IHNraW5XZWlnaHQ7XCIsXCIjZW5kaWZcIixcIlxcblwiXS5maWx0ZXIoYikuam9pbihcIlxcblwiKSxkPVtmLmJ1bXBNYXB8fGYubm9ybWFsTWFwfHxmLmZsYXRTaGFkaW5nfHxnLmRlcml2YXRpdmVzP1wiI2V4dGVuc2lvbiBHTF9PRVNfc3RhbmRhcmRfZGVyaXZhdGl2ZXMgOiBlbmFibGVcIjpcIlwiLGYubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlciYmZC5leHRlbnNpb25zLmdldChcIkVYVF9mcmFnX2RlcHRoXCIpP1wiI2V4dGVuc2lvbiBHTF9FWFRfZnJhZ19kZXB0aCA6IGVuYWJsZVwiOlwiXCIsXCJwcmVjaXNpb24gXCIrZi5wcmVjaXNpb24rXCIgZmxvYXQ7XCIsXCJwcmVjaXNpb24gXCIrXG5mLnByZWNpc2lvbitcIiBpbnQ7XCIsXCIjZGVmaW5lIFNIQURFUl9OQU1FIFwiK2cuX193ZWJnbFNoYWRlci5uYW1lLHYsXCIjZGVmaW5lIE1BWF9ESVJfTElHSFRTIFwiK2YubWF4RGlyTGlnaHRzLFwiI2RlZmluZSBNQVhfUE9JTlRfTElHSFRTIFwiK2YubWF4UG9pbnRMaWdodHMsXCIjZGVmaW5lIE1BWF9TUE9UX0xJR0hUUyBcIitmLm1heFNwb3RMaWdodHMsXCIjZGVmaW5lIE1BWF9IRU1JX0xJR0hUUyBcIitmLm1heEhlbWlMaWdodHMsXCIjZGVmaW5lIE1BWF9TSEFET1dTIFwiK2YubWF4U2hhZG93cyxmLmFscGhhVGVzdD9cIiNkZWZpbmUgQUxQSEFURVNUIFwiK2YuYWxwaGFUZXN0OlwiXCIsZC5nYW1tYUlucHV0P1wiI2RlZmluZSBHQU1NQV9JTlBVVFwiOlwiXCIsZC5nYW1tYU91dHB1dD9cIiNkZWZpbmUgR0FNTUFfT1VUUFVUXCI6XCJcIixcIiNkZWZpbmUgR0FNTUFfRkFDVE9SIFwiK3QsZi51c2VGb2cmJmYuZm9nP1wiI2RlZmluZSBVU0VfRk9HXCI6XCJcIixmLnVzZUZvZyYmZi5mb2dFeHA/XCIjZGVmaW5lIEZPR19FWFAyXCI6XG5cIlwiLGYubWFwP1wiI2RlZmluZSBVU0VfTUFQXCI6XCJcIixmLmVudk1hcD9cIiNkZWZpbmUgVVNFX0VOVk1BUFwiOlwiXCIsZi5lbnZNYXA/XCIjZGVmaW5lIFwiK246XCJcIixmLmVudk1hcD9cIiNkZWZpbmUgXCIrcTpcIlwiLGYuZW52TWFwP1wiI2RlZmluZSBcIitzOlwiXCIsZi5saWdodE1hcD9cIiNkZWZpbmUgVVNFX0xJR0hUTUFQXCI6XCJcIixmLmFvTWFwP1wiI2RlZmluZSBVU0VfQU9NQVBcIjpcIlwiLGYuZW1pc3NpdmVNYXA/XCIjZGVmaW5lIFVTRV9FTUlTU0lWRU1BUFwiOlwiXCIsZi5idW1wTWFwP1wiI2RlZmluZSBVU0VfQlVNUE1BUFwiOlwiXCIsZi5ub3JtYWxNYXA/XCIjZGVmaW5lIFVTRV9OT1JNQUxNQVBcIjpcIlwiLGYuc3BlY3VsYXJNYXA/XCIjZGVmaW5lIFVTRV9TUEVDVUxBUk1BUFwiOlwiXCIsZi5hbHBoYU1hcD9cIiNkZWZpbmUgVVNFX0FMUEhBTUFQXCI6XCJcIixmLnZlcnRleENvbG9ycz9cIiNkZWZpbmUgVVNFX0NPTE9SXCI6XCJcIixmLmZsYXRTaGFkaW5nP1wiI2RlZmluZSBGTEFUX1NIQURFRFwiOlwiXCIsZi5tZXRhbD9cIiNkZWZpbmUgTUVUQUxcIjpcblwiXCIsZi5kb3VibGVTaWRlZD9cIiNkZWZpbmUgRE9VQkxFX1NJREVEXCI6XCJcIixmLmZsaXBTaWRlZD9cIiNkZWZpbmUgRkxJUF9TSURFRFwiOlwiXCIsZi5zaGFkb3dNYXBFbmFibGVkP1wiI2RlZmluZSBVU0VfU0hBRE9XTUFQXCI6XCJcIixmLnNoYWRvd01hcEVuYWJsZWQ/XCIjZGVmaW5lIFwiK3A6XCJcIixmLnNoYWRvd01hcERlYnVnP1wiI2RlZmluZSBTSEFET1dNQVBfREVCVUdcIjpcIlwiLDA8Zi5wb2ludExpZ2h0U2hhZG93cz9cIiNkZWZpbmUgUE9JTlRfTElHSFRfU0hBRE9XU1wiOlwiXCIsZi5sb2dhcml0aG1pY0RlcHRoQnVmZmVyP1wiI2RlZmluZSBVU0VfTE9HREVQVEhCVUZcIjpcIlwiLGYubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlciYmZC5leHRlbnNpb25zLmdldChcIkVYVF9mcmFnX2RlcHRoXCIpP1wiI2RlZmluZSBVU0VfTE9HREVQVEhCVUZfRVhUXCI6XCJcIixcInVuaWZvcm0gbWF0NCB2aWV3TWF0cml4O1wiLFwidW5pZm9ybSB2ZWMzIGNhbWVyYVBvc2l0aW9uO1wiLFwiXFxuXCJdLmZpbHRlcihiKS5qb2luKFwiXFxuXCIpKTttPWQrbTtcbms9VEhSRUUuV2ViR0xTaGFkZXIoaCxoLlZFUlRFWF9TSEFERVIsbCtrKTttPVRIUkVFLldlYkdMU2hhZGVyKGgsaC5GUkFHTUVOVF9TSEFERVIsbSk7aC5hdHRhY2hTaGFkZXIodSxrKTtoLmF0dGFjaFNoYWRlcih1LG0pO3ZvaWQgMCE9PWcuaW5kZXgwQXR0cmlidXRlTmFtZT9oLmJpbmRBdHRyaWJMb2NhdGlvbih1LDAsZy5pbmRleDBBdHRyaWJ1dGVOYW1lKTohMD09PWYubW9ycGhUYXJnZXRzJiZoLmJpbmRBdHRyaWJMb2NhdGlvbih1LDAsXCJwb3NpdGlvblwiKTtoLmxpbmtQcm9ncmFtKHUpO2Y9aC5nZXRQcm9ncmFtSW5mb0xvZyh1KTtwPWguZ2V0U2hhZGVySW5mb0xvZyhrKTtuPWguZ2V0U2hhZGVySW5mb0xvZyhtKTtzPXE9ITA7aWYoITE9PT1oLmdldFByb2dyYW1QYXJhbWV0ZXIodSxoLkxJTktfU1RBVFVTKSlxPSExLGNvbnNvbGUuZXJyb3IoXCJUSFJFRS5XZWJHTFByb2dyYW06IHNoYWRlciBlcnJvcjogXCIsaC5nZXRFcnJvcigpLFwiZ2wuVkFMSURBVEVfU1RBVFVTXCIsaC5nZXRQcm9ncmFtUGFyYW1ldGVyKHUsXG5oLlZBTElEQVRFX1NUQVRVUyksXCJnbC5nZXRQcm9ncmFtSW5mb0xvZ1wiLGYscCxuKTtlbHNlIGlmKFwiXCIhPT1mKWNvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUHJvZ3JhbTogZ2wuZ2V0UHJvZ3JhbUluZm9Mb2coKVwiLGYpO2Vsc2UgaWYoXCJcIj09PXB8fFwiXCI9PT1uKXM9ITE7cyYmKHRoaXMuZGlhZ25vc3RpY3M9e3J1bm5hYmxlOnEsbWF0ZXJpYWw6Zyxwcm9ncmFtTG9nOmYsdmVydGV4U2hhZGVyOntsb2c6cCxwcmVmaXg6bH0sZnJhZ21lbnRTaGFkZXI6e2xvZzpuLHByZWZpeDpkfX0pO2guZGVsZXRlU2hhZGVyKGspO2guZGVsZXRlU2hhZGVyKG0pO3ZhciB3O3RoaXMuZ2V0VW5pZm9ybXM9ZnVuY3Rpb24oKXtpZih2b2lkIDA9PT13KXtmb3IodmFyIGE9e30sYj1oLmdldFByb2dyYW1QYXJhbWV0ZXIodSxoLkFDVElWRV9VTklGT1JNUyksYz0wO2M8YjtjKyspe3ZhciBkPWguZ2V0QWN0aXZlVW5pZm9ybSh1LGMpLm5hbWUsZT1oLmdldFVuaWZvcm1Mb2NhdGlvbih1LGQpLGY9ZC5sYXN0SW5kZXhPZihcIlswXVwiKTtcbi0xIT09ZiYmZj09PWQubGVuZ3RoLTMmJihhW2Quc3Vic3RyKDAsZildPWUpO2FbZF09ZX13PWF9cmV0dXJuIHd9O3ZhciBEO3RoaXMuZ2V0QXR0cmlidXRlcz1mdW5jdGlvbigpe2lmKHZvaWQgMD09PUQpe2Zvcih2YXIgYT17fSxiPWguZ2V0UHJvZ3JhbVBhcmFtZXRlcih1LGguQUNUSVZFX0FUVFJJQlVURVMpLGM9MDtjPGI7YysrKXt2YXIgZD1oLmdldEFjdGl2ZUF0dHJpYih1LGMpLm5hbWU7YVtkXT1oLmdldEF0dHJpYkxvY2F0aW9uKHUsZCl9RD1hfXJldHVybiBEfTt0aGlzLmRlc3Ryb3k9ZnVuY3Rpb24oKXtoLmRlbGV0ZVByb2dyYW0odSk7dGhpcy5wcm9ncmFtPXZvaWQgMH07T2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcyx7dW5pZm9ybXM6e2dldDpmdW5jdGlvbigpe2NvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUHJvZ3JhbTogLnVuaWZvcm1zIGlzIG5vdyAuZ2V0VW5pZm9ybXMoKS5cIik7cmV0dXJuIHRoaXMuZ2V0VW5pZm9ybXMoKX19LGF0dHJpYnV0ZXM6e2dldDpmdW5jdGlvbigpe2NvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUHJvZ3JhbTogLmF0dHJpYnV0ZXMgaXMgbm93IC5nZXRBdHRyaWJ1dGVzKCkuXCIpO1xucmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlcygpfX19KTt0aGlzLmlkPWMrKzt0aGlzLmNvZGU9ZTt0aGlzLnVzZWRUaW1lcz0xO3RoaXMucHJvZ3JhbT11O3RoaXMudmVydGV4U2hhZGVyPWs7dGhpcy5mcmFnbWVudFNoYWRlcj1tO3JldHVybiB0aGlzfX0oKTtcblRIUkVFLldlYkdMUHJvZ3JhbXM9ZnVuY3Rpb24oYSxiKXt2YXIgYz1bXSxkPXtNZXNoRGVwdGhNYXRlcmlhbDpcImRlcHRoXCIsTWVzaE5vcm1hbE1hdGVyaWFsOlwibm9ybWFsXCIsTWVzaEJhc2ljTWF0ZXJpYWw6XCJiYXNpY1wiLE1lc2hMYW1iZXJ0TWF0ZXJpYWw6XCJsYW1iZXJ0XCIsTWVzaFBob25nTWF0ZXJpYWw6XCJwaG9uZ1wiLExpbmVCYXNpY01hdGVyaWFsOlwiYmFzaWNcIixMaW5lRGFzaGVkTWF0ZXJpYWw6XCJkYXNoZWRcIixQb2ludHNNYXRlcmlhbDpcInBvaW50c1wifSxlPVwicHJlY2lzaW9uIHN1cHBvcnRzVmVydGV4VGV4dHVyZXMgbWFwIGVudk1hcCBlbnZNYXBNb2RlIGxpZ2h0TWFwIGFvTWFwIGVtaXNzaXZlTWFwIGJ1bXBNYXAgbm9ybWFsTWFwIGRpc3BsYWNlbWVudE1hcCBzcGVjdWxhck1hcCBhbHBoYU1hcCBjb21iaW5lIHZlcnRleENvbG9ycyBmb2cgdXNlRm9nIGZvZ0V4cCBmbGF0U2hhZGluZyBzaXplQXR0ZW51YXRpb24gbG9nYXJpdGhtaWNEZXB0aEJ1ZmZlciBza2lubmluZyBtYXhCb25lcyB1c2VWZXJ0ZXhUZXh0dXJlIG1vcnBoVGFyZ2V0cyBtb3JwaE5vcm1hbHMgbWF4TW9ycGhUYXJnZXRzIG1heE1vcnBoTm9ybWFscyBtYXhEaXJMaWdodHMgbWF4UG9pbnRMaWdodHMgbWF4U3BvdExpZ2h0cyBtYXhIZW1pTGlnaHRzIG1heFNoYWRvd3Mgc2hhZG93TWFwRW5hYmxlZCBwb2ludExpZ2h0U2hhZG93cyBzaGFkb3dNYXBUeXBlIHNoYWRvd01hcERlYnVnIGFscGhhVGVzdCBtZXRhbCBkb3VibGVTaWRlZCBmbGlwU2lkZWRcIi5zcGxpdChcIiBcIik7dGhpcy5nZXRQYXJhbWV0ZXJzPVxuZnVuY3Rpb24oYyxlLGgsbCl7dmFyIGssbSxwLG4scSxzPWRbYy50eXBlXTtrPXE9bj1wPW09MDtmb3IodmFyIHQ9ZS5sZW5ndGg7azx0O2srKyl7dmFyIHY9ZVtrXTshMSE9PXYudmlzaWJsZSYmKHYgaW5zdGFuY2VvZiBUSFJFRS5EaXJlY3Rpb25hbExpZ2h0JiZtKyssdiBpbnN0YW5jZW9mIFRIUkVFLlBvaW50TGlnaHQmJnArKyx2IGluc3RhbmNlb2YgVEhSRUUuU3BvdExpZ2h0JiZuKyssdiBpbnN0YW5jZW9mIFRIUkVFLkhlbWlzcGhlcmVMaWdodCYmcSsrKX1mb3IodmFyIHY9az10PTAsdT1lLmxlbmd0aDt2PHU7disrKXt2YXIgdz1lW3ZdO3cuY2FzdFNoYWRvdyYmKCh3IGluc3RhbmNlb2YgVEhSRUUuU3BvdExpZ2h0fHx3IGluc3RhbmNlb2YgVEhSRUUuRGlyZWN0aW9uYWxMaWdodCkmJnQrKyx3IGluc3RhbmNlb2YgVEhSRUUuUG9pbnRMaWdodCYmKHQrKyxrKyspKX1lPXQ7Yi5mbG9hdFZlcnRleFRleHR1cmVzJiZsJiZsLnNrZWxldG9uJiZsLnNrZWxldG9uLnVzZVZlcnRleFRleHR1cmU/XG50PTEwMjQ6KHQ9TWF0aC5mbG9vcigoYi5tYXhWZXJ0ZXhVbmlmb3Jtcy0yMCkvNCksdm9pZCAwIT09bCYmbCBpbnN0YW5jZW9mIFRIUkVFLlNraW5uZWRNZXNoJiYodD1NYXRoLm1pbihsLnNrZWxldG9uLmJvbmVzLmxlbmd0aCx0KSx0PGwuc2tlbGV0b24uYm9uZXMubGVuZ3RoJiZjb25zb2xlLndhcm4oXCJXZWJHTFJlbmRlcmVyOiB0b28gbWFueSBib25lcyAtIFwiK2wuc2tlbGV0b24uYm9uZXMubGVuZ3RoK1wiLCB0aGlzIEdQVSBzdXBwb3J0cyBqdXN0IFwiK3QrXCIgKHRyeSBPcGVuR0wgaW5zdGVhZCBvZiBBTkdMRSlcIikpKTt2PWEuZ2V0UHJlY2lzaW9uKCk7bnVsbCE9PWMucHJlY2lzaW9uJiYodj1iLmdldE1heFByZWNpc2lvbihjLnByZWNpc2lvbiksdiE9PWMucHJlY2lzaW9uJiZjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlcmVyLmluaXRNYXRlcmlhbDpcIixjLnByZWNpc2lvbixcIm5vdCBzdXBwb3J0ZWQsIHVzaW5nXCIsdixcImluc3RlYWQuXCIpKTtyZXR1cm57c2hhZGVySUQ6cyxcbnByZWNpc2lvbjp2LHN1cHBvcnRzVmVydGV4VGV4dHVyZXM6Yi52ZXJ0ZXhUZXh0dXJlcyxtYXA6ISFjLm1hcCxlbnZNYXA6ISFjLmVudk1hcCxlbnZNYXBNb2RlOmMuZW52TWFwJiZjLmVudk1hcC5tYXBwaW5nLGxpZ2h0TWFwOiEhYy5saWdodE1hcCxhb01hcDohIWMuYW9NYXAsZW1pc3NpdmVNYXA6ISFjLmVtaXNzaXZlTWFwLGJ1bXBNYXA6ISFjLmJ1bXBNYXAsbm9ybWFsTWFwOiEhYy5ub3JtYWxNYXAsZGlzcGxhY2VtZW50TWFwOiEhYy5kaXNwbGFjZW1lbnRNYXAsc3BlY3VsYXJNYXA6ISFjLnNwZWN1bGFyTWFwLGFscGhhTWFwOiEhYy5hbHBoYU1hcCxjb21iaW5lOmMuY29tYmluZSx2ZXJ0ZXhDb2xvcnM6Yy52ZXJ0ZXhDb2xvcnMsZm9nOmgsdXNlRm9nOmMuZm9nLGZvZ0V4cDpoIGluc3RhbmNlb2YgVEhSRUUuRm9nRXhwMixmbGF0U2hhZGluZzpjLnNoYWRpbmc9PT1USFJFRS5GbGF0U2hhZGluZyxzaXplQXR0ZW51YXRpb246Yy5zaXplQXR0ZW51YXRpb24sbG9nYXJpdGhtaWNEZXB0aEJ1ZmZlcjpiLmxvZ2FyaXRobWljRGVwdGhCdWZmZXIsXG5za2lubmluZzpjLnNraW5uaW5nLG1heEJvbmVzOnQsdXNlVmVydGV4VGV4dHVyZTpiLmZsb2F0VmVydGV4VGV4dHVyZXMmJmwmJmwuc2tlbGV0b24mJmwuc2tlbGV0b24udXNlVmVydGV4VGV4dHVyZSxtb3JwaFRhcmdldHM6Yy5tb3JwaFRhcmdldHMsbW9ycGhOb3JtYWxzOmMubW9ycGhOb3JtYWxzLG1heE1vcnBoVGFyZ2V0czphLm1heE1vcnBoVGFyZ2V0cyxtYXhNb3JwaE5vcm1hbHM6YS5tYXhNb3JwaE5vcm1hbHMsbWF4RGlyTGlnaHRzOm0sbWF4UG9pbnRMaWdodHM6cCxtYXhTcG90TGlnaHRzOm4sbWF4SGVtaUxpZ2h0czpxLG1heFNoYWRvd3M6ZSxwb2ludExpZ2h0U2hhZG93czprLHNoYWRvd01hcEVuYWJsZWQ6YS5zaGFkb3dNYXAuZW5hYmxlZCYmbC5yZWNlaXZlU2hhZG93JiYwPGUsc2hhZG93TWFwVHlwZTphLnNoYWRvd01hcC50eXBlLHNoYWRvd01hcERlYnVnOmEuc2hhZG93TWFwLmRlYnVnLGFscGhhVGVzdDpjLmFscGhhVGVzdCxtZXRhbDpjLm1ldGFsLGRvdWJsZVNpZGVkOmMuc2lkZT09PVxuVEhSRUUuRG91YmxlU2lkZSxmbGlwU2lkZWQ6Yy5zaWRlPT09VEhSRUUuQmFja1NpZGV9fTt0aGlzLmdldFByb2dyYW1Db2RlPWZ1bmN0aW9uKGEsYil7dmFyIGM9W107Yi5zaGFkZXJJRD9jLnB1c2goYi5zaGFkZXJJRCk6KGMucHVzaChhLmZyYWdtZW50U2hhZGVyKSxjLnB1c2goYS52ZXJ0ZXhTaGFkZXIpKTtpZih2b2lkIDAhPT1hLmRlZmluZXMpZm9yKHZhciBkIGluIGEuZGVmaW5lcyljLnB1c2goZCksYy5wdXNoKGEuZGVmaW5lc1tkXSk7Zm9yKGQ9MDtkPGUubGVuZ3RoO2QrKyl7dmFyIGs9ZVtkXTtjLnB1c2goayk7Yy5wdXNoKGJba10pfXJldHVybiBjLmpvaW4oKX07dGhpcy5hY3F1aXJlUHJvZ3JhbT1mdW5jdGlvbihiLGQsZSl7Zm9yKHZhciBsLGs9MCxtPWMubGVuZ3RoO2s8bTtrKyspe3ZhciBwPWNba107aWYocC5jb2RlPT09ZSl7bD1wOysrbC51c2VkVGltZXM7YnJlYWt9fXZvaWQgMD09PWwmJihsPW5ldyBUSFJFRS5XZWJHTFByb2dyYW0oYSxlLGIsZCksYy5wdXNoKGwpKTtcbnJldHVybiBsfTt0aGlzLnJlbGVhc2VQcm9ncmFtPWZ1bmN0aW9uKGEpe2lmKDA9PT0tLWEudXNlZFRpbWVzKXt2YXIgYj1jLmluZGV4T2YoYSk7Y1tiXT1jW2MubGVuZ3RoLTFdO2MucG9wKCk7YS5kZXN0cm95KCl9fTt0aGlzLnByb2dyYW1zPWN9O1RIUkVFLldlYkdMUHJvcGVydGllcz1mdW5jdGlvbigpe3ZhciBhPXt9O3RoaXMuZ2V0PWZ1bmN0aW9uKGIpe2I9Yi51dWlkO3ZhciBjPWFbYl07dm9pZCAwPT09YyYmKGM9e30sYVtiXT1jKTtyZXR1cm4gY307dGhpcy5kZWxldGU9ZnVuY3Rpb24oYil7ZGVsZXRlIGFbYi51dWlkXX07dGhpcy5jbGVhcj1mdW5jdGlvbigpe2E9e319fTtcblRIUkVFLldlYkdMU2hhZGVyPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gYShhKXthPWEuc3BsaXQoXCJcXG5cIik7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKyspYVtjXT1jKzErXCI6IFwiK2FbY107cmV0dXJuIGEuam9pbihcIlxcblwiKX1yZXR1cm4gZnVuY3Rpb24oYixjLGQpe3ZhciBlPWIuY3JlYXRlU2hhZGVyKGMpO2Iuc2hhZGVyU291cmNlKGUsZCk7Yi5jb21waWxlU2hhZGVyKGUpOyExPT09Yi5nZXRTaGFkZXJQYXJhbWV0ZXIoZSxiLkNPTVBJTEVfU1RBVFVTKSYmY29uc29sZS5lcnJvcihcIlRIUkVFLldlYkdMU2hhZGVyOiBTaGFkZXIgY291bGRuJ3QgY29tcGlsZS5cIik7XCJcIiE9PWIuZ2V0U2hhZGVySW5mb0xvZyhlKSYmY29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xTaGFkZXI6IGdsLmdldFNoYWRlckluZm9Mb2coKVwiLGM9PT1iLlZFUlRFWF9TSEFERVI/XCJ2ZXJ0ZXhcIjpcImZyYWdtZW50XCIsYi5nZXRTaGFkZXJJbmZvTG9nKGUpLGEoZCkpO3JldHVybiBlfX0oKTtcblRIUkVFLldlYkdMU2hhZG93TWFwPWZ1bmN0aW9uKGEsYixjKXtmdW5jdGlvbiBkKGEsYixjLGQpe3ZhciBlPWEuZ2VvbWV0cnksZj1udWxsLGY9bixnPWEuY3VzdG9tRGVwdGhNYXRlcmlhbDtjJiYoZj1xLGc9YS5jdXN0b21EaXN0YW5jZU1hdGVyaWFsKTtnP2Y9ZzooYT1hIGluc3RhbmNlb2YgVEhSRUUuU2tpbm5lZE1lc2gmJmIuc2tpbm5pbmcsZz0wLHZvaWQgMCE9PWUubW9ycGhUYXJnZXRzJiYwPGUubW9ycGhUYXJnZXRzLmxlbmd0aCYmYi5tb3JwaFRhcmdldHMmJihnfD0xKSxhJiYoZ3w9MiksZj1mW2ddKTtmLnZpc2libGU9Yi52aXNpYmxlO2Yud2lyZWZyYW1lPWIud2lyZWZyYW1lO2Yud2lyZWZyYW1lTGluZXdpZHRoPWIud2lyZWZyYW1lTGluZXdpZHRoO2MmJnZvaWQgMCE9PWYudW5pZm9ybXMubGlnaHRQb3MmJmYudW5pZm9ybXMubGlnaHRQb3MudmFsdWUuY29weShkKTtyZXR1cm4gZn1mdW5jdGlvbiBlKGEsYil7aWYoITEhPT1hLnZpc2libGUpeyhhIGluc3RhbmNlb2ZcblRIUkVFLk1lc2h8fGEgaW5zdGFuY2VvZiBUSFJFRS5MaW5lfHxhIGluc3RhbmNlb2YgVEhSRUUuUG9pbnRzKSYmYS5jYXN0U2hhZG93JiYoITE9PT1hLmZydXN0dW1DdWxsZWR8fCEwPT09aC5pbnRlcnNlY3RzT2JqZWN0KGEpKSYmITA9PT1hLm1hdGVyaWFsLnZpc2libGUmJihhLm1vZGVsVmlld01hdHJpeC5tdWx0aXBseU1hdHJpY2VzKGIubWF0cml4V29ybGRJbnZlcnNlLGEubWF0cml4V29ybGQpLHAucHVzaChhKSk7Zm9yKHZhciBjPWEuY2hpbGRyZW4sZD0wLGY9Yy5sZW5ndGg7ZDxmO2QrKyllKGNbZF0sYil9fXZhciBnPWEuY29udGV4dCxmPWEuc3RhdGUsaD1uZXcgVEhSRUUuRnJ1c3R1bSxsPW5ldyBUSFJFRS5NYXRyaXg0O25ldyBUSFJFRS5WZWN0b3IzO25ldyBUSFJFRS5WZWN0b3IzO2Zvcih2YXIgaz1uZXcgVEhSRUUuVmVjdG9yMyxtPW5ldyBUSFJFRS5WZWN0b3IzLHA9W10sbj1BcnJheSg0KSxxPUFycmF5KDQpLHM9W25ldyBUSFJFRS5WZWN0b3IzKDEsMCwwKSxuZXcgVEhSRUUuVmVjdG9yMygtMSxcbjAsMCksbmV3IFRIUkVFLlZlY3RvcjMoMCwwLDEpLG5ldyBUSFJFRS5WZWN0b3IzKDAsMCwtMSksbmV3IFRIUkVFLlZlY3RvcjMoMCwxLDApLG5ldyBUSFJFRS5WZWN0b3IzKDAsLTEsMCldLHQ9W25ldyBUSFJFRS5WZWN0b3IzKDAsMSwwKSxuZXcgVEhSRUUuVmVjdG9yMygwLDEsMCksbmV3IFRIUkVFLlZlY3RvcjMoMCwxLDApLG5ldyBUSFJFRS5WZWN0b3IzKDAsMSwwKSxuZXcgVEhSRUUuVmVjdG9yMygwLDAsMSksbmV3IFRIUkVFLlZlY3RvcjMoMCwwLC0xKV0sdj1bbmV3IFRIUkVFLlZlY3RvcjQsbmV3IFRIUkVFLlZlY3RvcjQsbmV3IFRIUkVFLlZlY3RvcjQsbmV3IFRIUkVFLlZlY3RvcjQsbmV3IFRIUkVFLlZlY3RvcjQsbmV3IFRIUkVFLlZlY3RvcjRdLHU9bmV3IFRIUkVFLlZlY3RvcjQsdz1USFJFRS5TaGFkZXJMaWIuZGVwdGhSR0JBLEQ9VEhSRUUuVW5pZm9ybXNVdGlscy5jbG9uZSh3LnVuaWZvcm1zKSx4PVRIUkVFLlNoYWRlckxpYi5kaXN0YW5jZVJHQkEsQj1USFJFRS5Vbmlmb3Jtc1V0aWxzLmNsb25lKHgudW5pZm9ybXMpLFxueT0wOzQhPT15OysreSl7dmFyIHo9MCE9PSh5JjEpLEE9MCE9PSh5JjIpLEo9bmV3IFRIUkVFLlNoYWRlck1hdGVyaWFsKHt1bmlmb3JtczpELHZlcnRleFNoYWRlcjp3LnZlcnRleFNoYWRlcixmcmFnbWVudFNoYWRlcjp3LmZyYWdtZW50U2hhZGVyLG1vcnBoVGFyZ2V0czp6LHNraW5uaW5nOkF9KTtKLl9zaGFkb3dQYXNzPSEwO25beV09Sjt6PW5ldyBUSFJFRS5TaGFkZXJNYXRlcmlhbCh7dW5pZm9ybXM6Qix2ZXJ0ZXhTaGFkZXI6eC52ZXJ0ZXhTaGFkZXIsZnJhZ21lbnRTaGFkZXI6eC5mcmFnbWVudFNoYWRlcixtb3JwaFRhcmdldHM6eixza2lubmluZzpBfSk7ei5fc2hhZG93UGFzcz0hMDtxW3ldPXp9dmFyIEY9dGhpczt0aGlzLmVuYWJsZWQ9ITE7dGhpcy5hdXRvVXBkYXRlPSEwO3RoaXMubmVlZHNVcGRhdGU9ITE7dGhpcy50eXBlPVRIUkVFLlBDRlNoYWRvd01hcDt0aGlzLmN1bGxGYWNlPVRIUkVFLkN1bGxGYWNlRnJvbnQ7dGhpcy5yZW5kZXI9ZnVuY3Rpb24obil7dmFyIHEsXG53O2lmKCExIT09Ri5lbmFibGVkJiYoITEhPT1GLmF1dG9VcGRhdGV8fCExIT09Ri5uZWVkc1VwZGF0ZSkpe2cuY2xlYXJDb2xvcigxLDEsMSwxKTtmLmRpc2FibGUoZy5CTEVORCk7Zi5lbmFibGUoZy5DVUxMX0ZBQ0UpO2cuZnJvbnRGYWNlKGcuQ0NXKTtnLmN1bGxGYWNlKEYuY3VsbEZhY2U9PT1USFJFRS5DdWxsRmFjZUZyb250P2cuRlJPTlQ6Zy5CQUNLKTtmLnNldERlcHRoVGVzdCghMCk7YS5nZXRWaWV3cG9ydCh1KTtmb3IodmFyIHg9MCxEPWIubGVuZ3RoO3g8RDt4Kyspe3ZhciB5PWJbeF07aWYoITA9PT15LmNhc3RTaGFkb3cpe3ZhciB6PXkuc2hhZG93LEI9ei5jYW1lcmEsQT16Lm1hcFNpemU7aWYoeSBpbnN0YW5jZW9mIFRIUkVFLlBvaW50TGlnaHQpe3E9Njt3PSEwO3ZhciBIPUEueC80LEo9QS55LzI7dlswXS5zZXQoMipILEosSCxKKTt2WzFdLnNldCgwLEosSCxKKTt2WzJdLnNldCgzKkgsSixILEopO3ZbM10uc2V0KEgsSixILEopO3ZbNF0uc2V0KDMqSCwwLEgsSik7XG52WzVdLnNldChILDAsSCxKKX1lbHNlIHE9MSx3PSExO251bGw9PT16Lm1hcCYmKEg9VEhSRUUuTGluZWFyRmlsdGVyLEYudHlwZT09PVRIUkVFLlBDRlNvZnRTaGFkb3dNYXAmJihIPVRIUkVFLk5lYXJlc3RGaWx0ZXIpLHoubWFwPW5ldyBUSFJFRS5XZWJHTFJlbmRlclRhcmdldChBLngsQS55LHttaW5GaWx0ZXI6SCxtYWdGaWx0ZXI6SCxmb3JtYXQ6VEhSRUUuUkdCQUZvcm1hdH0pLHoubWF0cml4PW5ldyBUSFJFRS5NYXRyaXg0LHkgaW5zdGFuY2VvZiBUSFJFRS5TcG90TGlnaHQmJihCLmFzcGVjdD1BLngvQS55KSxCLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKSk7QT16Lm1hcDt6PXoubWF0cml4O20uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKHkubWF0cml4V29ybGQpO0IucG9zaXRpb24uY29weShtKTthLnNldFJlbmRlclRhcmdldChBKTthLmNsZWFyKCk7Zm9yKEE9MDtBPHE7QSsrKWZvcih3PyhrLmNvcHkoQi5wb3NpdGlvbiksay5hZGQoc1tBXSksQi51cC5jb3B5KHRbQV0pLEIubG9va0F0KGspLFxuSD12W0FdLGEuc2V0Vmlld3BvcnQoSC54LEgueSxILnosSC53KSk6KGsuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKHkudGFyZ2V0Lm1hdHJpeFdvcmxkKSxCLmxvb2tBdChrKSksQi51cGRhdGVNYXRyaXhXb3JsZCgpLEIubWF0cml4V29ybGRJbnZlcnNlLmdldEludmVyc2UoQi5tYXRyaXhXb3JsZCksei5zZXQoLjUsMCwwLC41LDAsLjUsMCwuNSwwLDAsLjUsLjUsMCwwLDAsMSksei5tdWx0aXBseShCLnByb2plY3Rpb25NYXRyaXgpLHoubXVsdGlwbHkoQi5tYXRyaXhXb3JsZEludmVyc2UpLGwubXVsdGlwbHlNYXRyaWNlcyhCLnByb2plY3Rpb25NYXRyaXgsQi5tYXRyaXhXb3JsZEludmVyc2UpLGguc2V0RnJvbU1hdHJpeChsKSxwLmxlbmd0aD0wLGUobixCKSxIPTAsSj1wLmxlbmd0aDtIPEo7SCsrKXt2YXIgRz1wW0hdLGlhPWMudXBkYXRlKEcpLFU9Ry5tYXRlcmlhbDtpZihVIGluc3RhbmNlb2YgVEhSRUUuTWVzaEZhY2VNYXRlcmlhbClmb3IodmFyIFg9aWEuZ3JvdXBzLFU9VS5tYXRlcmlhbHMsXG5kYT0wLGNhPVgubGVuZ3RoO2RhPGNhO2RhKyspe3ZhciBnYT1YW2RhXSxaPVVbZ2EubWF0ZXJpYWxJbmRleF07ITA9PT1aLnZpc2libGUmJihaPWQoRyxaLHcsbSksYS5yZW5kZXJCdWZmZXJEaXJlY3QoQixiLG51bGwsaWEsWixHLGdhKSl9ZWxzZSBaPWQoRyxVLHcsbSksYS5yZW5kZXJCdWZmZXJEaXJlY3QoQixiLG51bGwsaWEsWixHLG51bGwpfWEucmVzZXRHTFN0YXRlKCl9fWEuc2V0Vmlld3BvcnQodS54LHUueSx1LnosdS53KTtuPWEuZ2V0Q2xlYXJDb2xvcigpO3E9YS5nZXRDbGVhckFscGhhKCk7YS5zZXRDbGVhckNvbG9yKG4scSk7Zi5lbmFibGUoZy5CTEVORCk7Ri5jdWxsRmFjZT09PVRIUkVFLkN1bGxGYWNlRnJvbnQmJmcuY3VsbEZhY2UoZy5CQUNLKTthLnJlc2V0R0xTdGF0ZSgpO0YubmVlZHNVcGRhdGU9ITF9fX07XG5USFJFRS5XZWJHTFN0YXRlPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD10aGlzLGU9bmV3IFVpbnQ4QXJyYXkoMTYpLGc9bmV3IFVpbnQ4QXJyYXkoMTYpLGY9bmV3IFVpbnQ4QXJyYXkoMTYpLGg9e30sbD1udWxsLGs9bnVsbCxtPW51bGwscD1udWxsLG49bnVsbCxxPW51bGwscz1udWxsLHQ9bnVsbCx2PW51bGwsdT1udWxsLHc9bnVsbCxEPW51bGwseD1udWxsLEI9bnVsbCx5PW51bGwsej1hLmdldFBhcmFtZXRlcihhLk1BWF9URVhUVVJFX0lNQUdFX1VOSVRTKSxBPXZvaWQgMCxKPXt9O3RoaXMuaW5pdD1mdW5jdGlvbigpe2EuY2xlYXJDb2xvcigwLDAsMCwxKTthLmNsZWFyRGVwdGgoMSk7YS5jbGVhclN0ZW5jaWwoMCk7dGhpcy5lbmFibGUoYS5ERVBUSF9URVNUKTthLmRlcHRoRnVuYyhhLkxFUVVBTCk7YS5mcm9udEZhY2UoYS5DQ1cpO2EuY3VsbEZhY2UoYS5CQUNLKTt0aGlzLmVuYWJsZShhLkNVTExfRkFDRSk7dGhpcy5lbmFibGUoYS5CTEVORCk7YS5ibGVuZEVxdWF0aW9uKGEuRlVOQ19BREQpO1xuYS5ibGVuZEZ1bmMoYS5TUkNfQUxQSEEsYS5PTkVfTUlOVVNfU1JDX0FMUEhBKX07dGhpcy5pbml0QXR0cmlidXRlcz1mdW5jdGlvbigpe2Zvcih2YXIgYT0wLGI9ZS5sZW5ndGg7YTxiO2ErKyllW2FdPTB9O3RoaXMuZW5hYmxlQXR0cmlidXRlPWZ1bmN0aW9uKGMpe2VbY109MTswPT09Z1tjXSYmKGEuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoYyksZ1tjXT0xKTswIT09ZltjXSYmKGIuZ2V0KFwiQU5HTEVfaW5zdGFuY2VkX2FycmF5c1wiKS52ZXJ0ZXhBdHRyaWJEaXZpc29yQU5HTEUoYywwKSxmW2NdPTApfTt0aGlzLmVuYWJsZUF0dHJpYnV0ZUFuZERpdmlzb3I9ZnVuY3Rpb24oYixjLGQpe2VbYl09MTswPT09Z1tiXSYmKGEuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoYiksZ1tiXT0xKTtmW2JdIT09YyYmKGQudmVydGV4QXR0cmliRGl2aXNvckFOR0xFKGIsYyksZltiXT1jKX07dGhpcy5kaXNhYmxlVW51c2VkQXR0cmlidXRlcz1mdW5jdGlvbigpe2Zvcih2YXIgYj0wLGM9Zy5sZW5ndGg7YjxcbmM7YisrKWdbYl0hPT1lW2JdJiYoYS5kaXNhYmxlVmVydGV4QXR0cmliQXJyYXkoYiksZ1tiXT0wKX07dGhpcy5lbmFibGU9ZnVuY3Rpb24oYil7ITAhPT1oW2JdJiYoYS5lbmFibGUoYiksaFtiXT0hMCl9O3RoaXMuZGlzYWJsZT1mdW5jdGlvbihiKXshMSE9PWhbYl0mJihhLmRpc2FibGUoYiksaFtiXT0hMSl9O3RoaXMuZ2V0Q29tcHJlc3NlZFRleHR1cmVGb3JtYXRzPWZ1bmN0aW9uKCl7aWYobnVsbD09PWwmJihsPVtdLGIuZ2V0KFwiV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjXCIpfHxiLmdldChcIldFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjXCIpKSlmb3IodmFyIGM9YS5nZXRQYXJhbWV0ZXIoYS5DT01QUkVTU0VEX1RFWFRVUkVfRk9STUFUUyksZD0wO2Q8Yy5sZW5ndGg7ZCsrKWwucHVzaChjW2RdKTtyZXR1cm4gbH07dGhpcy5zZXRCbGVuZGluZz1mdW5jdGlvbihiLGQsZSxmLGcsaCxsKXtiIT09ayYmKGI9PT1USFJFRS5Ob0JsZW5kaW5nP3RoaXMuZGlzYWJsZShhLkJMRU5EKTpcbmI9PT1USFJFRS5BZGRpdGl2ZUJsZW5kaW5nPyh0aGlzLmVuYWJsZShhLkJMRU5EKSxhLmJsZW5kRXF1YXRpb24oYS5GVU5DX0FERCksYS5ibGVuZEZ1bmMoYS5TUkNfQUxQSEEsYS5PTkUpKTpiPT09VEhSRUUuU3VidHJhY3RpdmVCbGVuZGluZz8odGhpcy5lbmFibGUoYS5CTEVORCksYS5ibGVuZEVxdWF0aW9uKGEuRlVOQ19BREQpLGEuYmxlbmRGdW5jKGEuWkVSTyxhLk9ORV9NSU5VU19TUkNfQ09MT1IpKTpiPT09VEhSRUUuTXVsdGlwbHlCbGVuZGluZz8odGhpcy5lbmFibGUoYS5CTEVORCksYS5ibGVuZEVxdWF0aW9uKGEuRlVOQ19BREQpLGEuYmxlbmRGdW5jKGEuWkVSTyxhLlNSQ19DT0xPUikpOmI9PT1USFJFRS5DdXN0b21CbGVuZGluZz90aGlzLmVuYWJsZShhLkJMRU5EKToodGhpcy5lbmFibGUoYS5CTEVORCksYS5ibGVuZEVxdWF0aW9uU2VwYXJhdGUoYS5GVU5DX0FERCxhLkZVTkNfQUREKSxhLmJsZW5kRnVuY1NlcGFyYXRlKGEuU1JDX0FMUEhBLGEuT05FX01JTlVTX1NSQ19BTFBIQSxcbmEuT05FLGEuT05FX01JTlVTX1NSQ19BTFBIQSkpLGs9Yik7aWYoYj09PVRIUkVFLkN1c3RvbUJsZW5kaW5nKXtnPWd8fGQ7aD1ofHxlO2w9bHx8ZjtpZihkIT09bXx8ZyE9PXEpYS5ibGVuZEVxdWF0aW9uU2VwYXJhdGUoYyhkKSxjKGcpKSxtPWQscT1nO2lmKGUhPT1wfHxmIT09bnx8aCE9PXN8fGwhPT10KWEuYmxlbmRGdW5jU2VwYXJhdGUoYyhlKSxjKGYpLGMoaCksYyhsKSkscD1lLG49ZixzPWgsdD1sfWVsc2UgdD1zPXE9bj1wPW09bnVsbH07dGhpcy5zZXREZXB0aEZ1bmM9ZnVuY3Rpb24oYil7aWYodiE9PWIpe2lmKGIpc3dpdGNoKGIpe2Nhc2UgVEhSRUUuTmV2ZXJEZXB0aDphLmRlcHRoRnVuYyhhLk5FVkVSKTticmVhaztjYXNlIFRIUkVFLkFsd2F5c0RlcHRoOmEuZGVwdGhGdW5jKGEuQUxXQVlTKTticmVhaztjYXNlIFRIUkVFLkxlc3NEZXB0aDphLmRlcHRoRnVuYyhhLkxFU1MpO2JyZWFrO2Nhc2UgVEhSRUUuTGVzc0VxdWFsRGVwdGg6YS5kZXB0aEZ1bmMoYS5MRVFVQUwpO1xuYnJlYWs7Y2FzZSBUSFJFRS5FcXVhbERlcHRoOmEuZGVwdGhGdW5jKGEuRVFVQUwpO2JyZWFrO2Nhc2UgVEhSRUUuR3JlYXRlckVxdWFsRGVwdGg6YS5kZXB0aEZ1bmMoYS5HRVFVQUwpO2JyZWFrO2Nhc2UgVEhSRUUuR3JlYXRlckRlcHRoOmEuZGVwdGhGdW5jKGEuR1JFQVRFUik7YnJlYWs7Y2FzZSBUSFJFRS5Ob3RFcXVhbERlcHRoOmEuZGVwdGhGdW5jKGEuTk9URVFVQUwpO2JyZWFrO2RlZmF1bHQ6YS5kZXB0aEZ1bmMoYS5MRVFVQUwpfWVsc2UgYS5kZXB0aEZ1bmMoYS5MRVFVQUwpO3Y9Yn19O3RoaXMuc2V0RGVwdGhUZXN0PWZ1bmN0aW9uKGIpe2I/dGhpcy5lbmFibGUoYS5ERVBUSF9URVNUKTp0aGlzLmRpc2FibGUoYS5ERVBUSF9URVNUKX07dGhpcy5zZXREZXB0aFdyaXRlPWZ1bmN0aW9uKGIpe3UhPT1iJiYoYS5kZXB0aE1hc2soYiksdT1iKX07dGhpcy5zZXRDb2xvcldyaXRlPWZ1bmN0aW9uKGIpe3chPT1iJiYoYS5jb2xvck1hc2soYixiLGIsYiksdz1iKX07dGhpcy5zZXRGbGlwU2lkZWQ9XG5mdW5jdGlvbihiKXtEIT09YiYmKGI/YS5mcm9udEZhY2UoYS5DVyk6YS5mcm9udEZhY2UoYS5DQ1cpLEQ9Yil9O3RoaXMuc2V0TGluZVdpZHRoPWZ1bmN0aW9uKGIpe2IhPT14JiYoYS5saW5lV2lkdGgoYikseD1iKX07dGhpcy5zZXRQb2x5Z29uT2Zmc2V0PWZ1bmN0aW9uKGIsYyxkKXtiP3RoaXMuZW5hYmxlKGEuUE9MWUdPTl9PRkZTRVRfRklMTCk6dGhpcy5kaXNhYmxlKGEuUE9MWUdPTl9PRkZTRVRfRklMTCk7IWJ8fEI9PT1jJiZ5PT09ZHx8KGEucG9seWdvbk9mZnNldChjLGQpLEI9Yyx5PWQpfTt0aGlzLnNldFNjaXNzb3JUZXN0PWZ1bmN0aW9uKGIpe2I/dGhpcy5lbmFibGUoYS5TQ0lTU09SX1RFU1QpOnRoaXMuZGlzYWJsZShhLlNDSVNTT1JfVEVTVCl9O3RoaXMuYWN0aXZlVGV4dHVyZT1mdW5jdGlvbihiKXt2b2lkIDA9PT1iJiYoYj1hLlRFWFRVUkUwK3otMSk7QSE9PWImJihhLmFjdGl2ZVRleHR1cmUoYiksQT1iKX07dGhpcy5iaW5kVGV4dHVyZT1mdW5jdGlvbihiLGMpe3ZvaWQgMD09PVxuQSYmZC5hY3RpdmVUZXh0dXJlKCk7dmFyIGU9SltBXTt2b2lkIDA9PT1lJiYoZT17dHlwZTp2b2lkIDAsdGV4dHVyZTp2b2lkIDB9LEpbQV09ZSk7aWYoZS50eXBlIT09Ynx8ZS50ZXh0dXJlIT09YylhLmJpbmRUZXh0dXJlKGIsYyksZS50eXBlPWIsZS50ZXh0dXJlPWN9O3RoaXMuY29tcHJlc3NlZFRleEltYWdlMkQ9ZnVuY3Rpb24oKXt0cnl7YS5jb21wcmVzc2VkVGV4SW1hZ2UyRC5hcHBseShhLGFyZ3VtZW50cyl9Y2F0Y2goYil7Y29uc29sZS5lcnJvcihiKX19O3RoaXMudGV4SW1hZ2UyRD1mdW5jdGlvbigpe3RyeXthLnRleEltYWdlMkQuYXBwbHkoYSxhcmd1bWVudHMpfWNhdGNoKGIpe2NvbnNvbGUuZXJyb3IoYil9fTt0aGlzLnJlc2V0PWZ1bmN0aW9uKCl7Zm9yKHZhciBiPTA7YjxnLmxlbmd0aDtiKyspMT09PWdbYl0mJihhLmRpc2FibGVWZXJ0ZXhBdHRyaWJBcnJheShiKSxnW2JdPTApO2g9e307RD13PXU9az1sPW51bGx9fTtcblRIUkVFLkxlbnNGbGFyZVBsdWdpbj1mdW5jdGlvbihhLGIpe3ZhciBjLGQsZSxnLGYsaCxsLGssbSxwLG49YS5jb250ZXh0LHE9YS5zdGF0ZSxzLHQsdix1LHcsRDt0aGlzLnJlbmRlcj1mdW5jdGlvbih4LEIseSx6KXtpZigwIT09Yi5sZW5ndGgpe3g9bmV3IFRIUkVFLlZlY3RvcjM7dmFyIEE9ei95LEo9LjUqeSxGPS41KnosQz0xNi96LE49bmV3IFRIUkVFLlZlY3RvcjIoQypBLEMpLEw9bmV3IFRIUkVFLlZlY3RvcjMoMSwxLDApLFE9bmV3IFRIUkVFLlZlY3RvcjIoMSwxKTtpZih2b2lkIDA9PT12KXt2YXIgQz1uZXcgRmxvYXQzMkFycmF5KFstMSwtMSwwLDAsMSwtMSwxLDAsMSwxLDEsMSwtMSwxLDAsMV0pLE09bmV3IFVpbnQxNkFycmF5KFswLDEsMiwwLDIsM10pO3M9bi5jcmVhdGVCdWZmZXIoKTt0PW4uY3JlYXRlQnVmZmVyKCk7bi5iaW5kQnVmZmVyKG4uQVJSQVlfQlVGRkVSLHMpO24uYnVmZmVyRGF0YShuLkFSUkFZX0JVRkZFUixDLG4uU1RBVElDX0RSQVcpO24uYmluZEJ1ZmZlcihuLkVMRU1FTlRfQVJSQVlfQlVGRkVSLFxudCk7bi5idWZmZXJEYXRhKG4uRUxFTUVOVF9BUlJBWV9CVUZGRVIsTSxuLlNUQVRJQ19EUkFXKTt3PW4uY3JlYXRlVGV4dHVyZSgpO0Q9bi5jcmVhdGVUZXh0dXJlKCk7cS5iaW5kVGV4dHVyZShuLlRFWFRVUkVfMkQsdyk7bi50ZXhJbWFnZTJEKG4uVEVYVFVSRV8yRCwwLG4uUkdCLDE2LDE2LDAsbi5SR0Isbi5VTlNJR05FRF9CWVRFLG51bGwpO24udGV4UGFyYW1ldGVyaShuLlRFWFRVUkVfMkQsbi5URVhUVVJFX1dSQVBfUyxuLkNMQU1QX1RPX0VER0UpO24udGV4UGFyYW1ldGVyaShuLlRFWFRVUkVfMkQsbi5URVhUVVJFX1dSQVBfVCxuLkNMQU1QX1RPX0VER0UpO24udGV4UGFyYW1ldGVyaShuLlRFWFRVUkVfMkQsbi5URVhUVVJFX01BR19GSUxURVIsbi5ORUFSRVNUKTtuLnRleFBhcmFtZXRlcmkobi5URVhUVVJFXzJELG4uVEVYVFVSRV9NSU5fRklMVEVSLG4uTkVBUkVTVCk7cS5iaW5kVGV4dHVyZShuLlRFWFRVUkVfMkQsRCk7bi50ZXhJbWFnZTJEKG4uVEVYVFVSRV8yRCwwLFxubi5SR0JBLDE2LDE2LDAsbi5SR0JBLG4uVU5TSUdORURfQllURSxudWxsKTtuLnRleFBhcmFtZXRlcmkobi5URVhUVVJFXzJELG4uVEVYVFVSRV9XUkFQX1Msbi5DTEFNUF9UT19FREdFKTtuLnRleFBhcmFtZXRlcmkobi5URVhUVVJFXzJELG4uVEVYVFVSRV9XUkFQX1Qsbi5DTEFNUF9UT19FREdFKTtuLnRleFBhcmFtZXRlcmkobi5URVhUVVJFXzJELG4uVEVYVFVSRV9NQUdfRklMVEVSLG4uTkVBUkVTVCk7bi50ZXhQYXJhbWV0ZXJpKG4uVEVYVFVSRV8yRCxuLlRFWFRVUkVfTUlOX0ZJTFRFUixuLk5FQVJFU1QpO3ZhciBDPSh1PTA8bi5nZXRQYXJhbWV0ZXIobi5NQVhfVkVSVEVYX1RFWFRVUkVfSU1BR0VfVU5JVFMpKT97dmVydGV4U2hhZGVyOlwidW5pZm9ybSBsb3dwIGludCByZW5kZXJUeXBlO1xcbnVuaWZvcm0gdmVjMyBzY3JlZW5Qb3NpdGlvbjtcXG51bmlmb3JtIHZlYzIgc2NhbGU7XFxudW5pZm9ybSBmbG9hdCByb3RhdGlvbjtcXG51bmlmb3JtIHNhbXBsZXIyRCBvY2NsdXNpb25NYXA7XFxuYXR0cmlidXRlIHZlYzIgcG9zaXRpb247XFxuYXR0cmlidXRlIHZlYzIgdXY7XFxudmFyeWluZyB2ZWMyIHZVVjtcXG52YXJ5aW5nIGZsb2F0IHZWaXNpYmlsaXR5O1xcbnZvaWQgbWFpbigpIHtcXG52VVYgPSB1djtcXG52ZWMyIHBvcyA9IHBvc2l0aW9uO1xcbmlmICggcmVuZGVyVHlwZSA9PSAyICkge1xcbnZlYzQgdmlzaWJpbGl0eSA9IHRleHR1cmUyRCggb2NjbHVzaW9uTWFwLCB2ZWMyKCAwLjEsIDAuMSApICk7XFxudmlzaWJpbGl0eSArPSB0ZXh0dXJlMkQoIG9jY2x1c2lvbk1hcCwgdmVjMiggMC41LCAwLjEgKSApO1xcbnZpc2liaWxpdHkgKz0gdGV4dHVyZTJEKCBvY2NsdXNpb25NYXAsIHZlYzIoIDAuOSwgMC4xICkgKTtcXG52aXNpYmlsaXR5ICs9IHRleHR1cmUyRCggb2NjbHVzaW9uTWFwLCB2ZWMyKCAwLjksIDAuNSApICk7XFxudmlzaWJpbGl0eSArPSB0ZXh0dXJlMkQoIG9jY2x1c2lvbk1hcCwgdmVjMiggMC45LCAwLjkgKSApO1xcbnZpc2liaWxpdHkgKz0gdGV4dHVyZTJEKCBvY2NsdXNpb25NYXAsIHZlYzIoIDAuNSwgMC45ICkgKTtcXG52aXNpYmlsaXR5ICs9IHRleHR1cmUyRCggb2NjbHVzaW9uTWFwLCB2ZWMyKCAwLjEsIDAuOSApICk7XFxudmlzaWJpbGl0eSArPSB0ZXh0dXJlMkQoIG9jY2x1c2lvbk1hcCwgdmVjMiggMC4xLCAwLjUgKSApO1xcbnZpc2liaWxpdHkgKz0gdGV4dHVyZTJEKCBvY2NsdXNpb25NYXAsIHZlYzIoIDAuNSwgMC41ICkgKTtcXG52VmlzaWJpbGl0eSA9ICAgICAgICB2aXNpYmlsaXR5LnIgLyA5LjA7XFxudlZpc2liaWxpdHkgKj0gMS4wIC0gdmlzaWJpbGl0eS5nIC8gOS4wO1xcbnZWaXNpYmlsaXR5ICo9ICAgICAgIHZpc2liaWxpdHkuYiAvIDkuMDtcXG52VmlzaWJpbGl0eSAqPSAxLjAgLSB2aXNpYmlsaXR5LmEgLyA5LjA7XFxucG9zLnggPSBjb3MoIHJvdGF0aW9uICkgKiBwb3NpdGlvbi54IC0gc2luKCByb3RhdGlvbiApICogcG9zaXRpb24ueTtcXG5wb3MueSA9IHNpbiggcm90YXRpb24gKSAqIHBvc2l0aW9uLnggKyBjb3MoIHJvdGF0aW9uICkgKiBwb3NpdGlvbi55O1xcbn1cXG5nbF9Qb3NpdGlvbiA9IHZlYzQoICggcG9zICogc2NhbGUgKyBzY3JlZW5Qb3NpdGlvbi54eSApLnh5LCBzY3JlZW5Qb3NpdGlvbi56LCAxLjAgKTtcXG59XCIsXG5mcmFnbWVudFNoYWRlcjpcInVuaWZvcm0gbG93cCBpbnQgcmVuZGVyVHlwZTtcXG51bmlmb3JtIHNhbXBsZXIyRCBtYXA7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbnVuaWZvcm0gdmVjMyBjb2xvcjtcXG52YXJ5aW5nIHZlYzIgdlVWO1xcbnZhcnlpbmcgZmxvYXQgdlZpc2liaWxpdHk7XFxudm9pZCBtYWluKCkge1xcbmlmICggcmVuZGVyVHlwZSA9PSAwICkge1xcbmdsX0ZyYWdDb2xvciA9IHZlYzQoIDEuMCwgMC4wLCAxLjAsIDAuMCApO1xcbn0gZWxzZSBpZiAoIHJlbmRlclR5cGUgPT0gMSApIHtcXG5nbF9GcmFnQ29sb3IgPSB0ZXh0dXJlMkQoIG1hcCwgdlVWICk7XFxufSBlbHNlIHtcXG52ZWM0IHRleHR1cmUgPSB0ZXh0dXJlMkQoIG1hcCwgdlVWICk7XFxudGV4dHVyZS5hICo9IG9wYWNpdHkgKiB2VmlzaWJpbGl0eTtcXG5nbF9GcmFnQ29sb3IgPSB0ZXh0dXJlO1xcbmdsX0ZyYWdDb2xvci5yZ2IgKj0gY29sb3I7XFxufVxcbn1cIn06e3ZlcnRleFNoYWRlcjpcInVuaWZvcm0gbG93cCBpbnQgcmVuZGVyVHlwZTtcXG51bmlmb3JtIHZlYzMgc2NyZWVuUG9zaXRpb247XFxudW5pZm9ybSB2ZWMyIHNjYWxlO1xcbnVuaWZvcm0gZmxvYXQgcm90YXRpb247XFxuYXR0cmlidXRlIHZlYzIgcG9zaXRpb247XFxuYXR0cmlidXRlIHZlYzIgdXY7XFxudmFyeWluZyB2ZWMyIHZVVjtcXG52b2lkIG1haW4oKSB7XFxudlVWID0gdXY7XFxudmVjMiBwb3MgPSBwb3NpdGlvbjtcXG5pZiAoIHJlbmRlclR5cGUgPT0gMiApIHtcXG5wb3MueCA9IGNvcyggcm90YXRpb24gKSAqIHBvc2l0aW9uLnggLSBzaW4oIHJvdGF0aW9uICkgKiBwb3NpdGlvbi55O1xcbnBvcy55ID0gc2luKCByb3RhdGlvbiApICogcG9zaXRpb24ueCArIGNvcyggcm90YXRpb24gKSAqIHBvc2l0aW9uLnk7XFxufVxcbmdsX1Bvc2l0aW9uID0gdmVjNCggKCBwb3MgKiBzY2FsZSArIHNjcmVlblBvc2l0aW9uLnh5ICkueHksIHNjcmVlblBvc2l0aW9uLnosIDEuMCApO1xcbn1cIixcbmZyYWdtZW50U2hhZGVyOlwicHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XFxudW5pZm9ybSBsb3dwIGludCByZW5kZXJUeXBlO1xcbnVuaWZvcm0gc2FtcGxlcjJEIG1hcDtcXG51bmlmb3JtIHNhbXBsZXIyRCBvY2NsdXNpb25NYXA7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbnVuaWZvcm0gdmVjMyBjb2xvcjtcXG52YXJ5aW5nIHZlYzIgdlVWO1xcbnZvaWQgbWFpbigpIHtcXG5pZiAoIHJlbmRlclR5cGUgPT0gMCApIHtcXG5nbF9GcmFnQ29sb3IgPSB2ZWM0KCB0ZXh0dXJlMkQoIG1hcCwgdlVWICkucmdiLCAwLjAgKTtcXG59IGVsc2UgaWYgKCByZW5kZXJUeXBlID09IDEgKSB7XFxuZ2xfRnJhZ0NvbG9yID0gdGV4dHVyZTJEKCBtYXAsIHZVViApO1xcbn0gZWxzZSB7XFxuZmxvYXQgdmlzaWJpbGl0eSA9IHRleHR1cmUyRCggb2NjbHVzaW9uTWFwLCB2ZWMyKCAwLjUsIDAuMSApICkuYTtcXG52aXNpYmlsaXR5ICs9IHRleHR1cmUyRCggb2NjbHVzaW9uTWFwLCB2ZWMyKCAwLjksIDAuNSApICkuYTtcXG52aXNpYmlsaXR5ICs9IHRleHR1cmUyRCggb2NjbHVzaW9uTWFwLCB2ZWMyKCAwLjUsIDAuOSApICkuYTtcXG52aXNpYmlsaXR5ICs9IHRleHR1cmUyRCggb2NjbHVzaW9uTWFwLCB2ZWMyKCAwLjEsIDAuNSApICkuYTtcXG52aXNpYmlsaXR5ID0gKCAxLjAgLSB2aXNpYmlsaXR5IC8gNC4wICk7XFxudmVjNCB0ZXh0dXJlID0gdGV4dHVyZTJEKCBtYXAsIHZVViApO1xcbnRleHR1cmUuYSAqPSBvcGFjaXR5ICogdmlzaWJpbGl0eTtcXG5nbF9GcmFnQ29sb3IgPSB0ZXh0dXJlO1xcbmdsX0ZyYWdDb2xvci5yZ2IgKj0gY29sb3I7XFxufVxcbn1cIn0sXG5NPW4uY3JlYXRlUHJvZ3JhbSgpLEs9bi5jcmVhdGVTaGFkZXIobi5GUkFHTUVOVF9TSEFERVIpLEU9bi5jcmVhdGVTaGFkZXIobi5WRVJURVhfU0hBREVSKSxPPVwicHJlY2lzaW9uIFwiK2EuZ2V0UHJlY2lzaW9uKCkrXCIgZmxvYXQ7XFxuXCI7bi5zaGFkZXJTb3VyY2UoSyxPK0MuZnJhZ21lbnRTaGFkZXIpO24uc2hhZGVyU291cmNlKEUsTytDLnZlcnRleFNoYWRlcik7bi5jb21waWxlU2hhZGVyKEspO24uY29tcGlsZVNoYWRlcihFKTtuLmF0dGFjaFNoYWRlcihNLEspO24uYXR0YWNoU2hhZGVyKE0sRSk7bi5saW5rUHJvZ3JhbShNKTt2PU07bT1uLmdldEF0dHJpYkxvY2F0aW9uKHYsXCJwb3NpdGlvblwiKTtwPW4uZ2V0QXR0cmliTG9jYXRpb24odixcInV2XCIpO2M9bi5nZXRVbmlmb3JtTG9jYXRpb24odixcInJlbmRlclR5cGVcIik7ZD1uLmdldFVuaWZvcm1Mb2NhdGlvbih2LFwibWFwXCIpO2U9bi5nZXRVbmlmb3JtTG9jYXRpb24odixcIm9jY2x1c2lvbk1hcFwiKTtnPW4uZ2V0VW5pZm9ybUxvY2F0aW9uKHYsXG5cIm9wYWNpdHlcIik7Zj1uLmdldFVuaWZvcm1Mb2NhdGlvbih2LFwiY29sb3JcIik7aD1uLmdldFVuaWZvcm1Mb2NhdGlvbih2LFwic2NhbGVcIik7bD1uLmdldFVuaWZvcm1Mb2NhdGlvbih2LFwicm90YXRpb25cIik7az1uLmdldFVuaWZvcm1Mb2NhdGlvbih2LFwic2NyZWVuUG9zaXRpb25cIil9bi51c2VQcm9ncmFtKHYpO3EuaW5pdEF0dHJpYnV0ZXMoKTtxLmVuYWJsZUF0dHJpYnV0ZShtKTtxLmVuYWJsZUF0dHJpYnV0ZShwKTtxLmRpc2FibGVVbnVzZWRBdHRyaWJ1dGVzKCk7bi51bmlmb3JtMWkoZSwwKTtuLnVuaWZvcm0xaShkLDEpO24uYmluZEJ1ZmZlcihuLkFSUkFZX0JVRkZFUixzKTtuLnZlcnRleEF0dHJpYlBvaW50ZXIobSwyLG4uRkxPQVQsITEsMTYsMCk7bi52ZXJ0ZXhBdHRyaWJQb2ludGVyKHAsMixuLkZMT0FULCExLDE2LDgpO24uYmluZEJ1ZmZlcihuLkVMRU1FTlRfQVJSQVlfQlVGRkVSLHQpO3EuZGlzYWJsZShuLkNVTExfRkFDRSk7bi5kZXB0aE1hc2soITEpO009MDtmb3IoSz1cbmIubGVuZ3RoO008SztNKyspaWYoQz0xNi96LE4uc2V0KEMqQSxDKSxFPWJbTV0seC5zZXQoRS5tYXRyaXhXb3JsZC5lbGVtZW50c1sxMl0sRS5tYXRyaXhXb3JsZC5lbGVtZW50c1sxM10sRS5tYXRyaXhXb3JsZC5lbGVtZW50c1sxNF0pLHguYXBwbHlNYXRyaXg0KEIubWF0cml4V29ybGRJbnZlcnNlKSx4LmFwcGx5UHJvamVjdGlvbihCLnByb2plY3Rpb25NYXRyaXgpLEwuY29weSh4KSxRLng9TC54KkorSixRLnk9TC55KkYrRix1fHwwPFEueCYmUS54PHkmJjA8US55JiZRLnk8eil7cS5hY3RpdmVUZXh0dXJlKG4uVEVYVFVSRTApO3EuYmluZFRleHR1cmUobi5URVhUVVJFXzJELG51bGwpO3EuYWN0aXZlVGV4dHVyZShuLlRFWFRVUkUxKTtxLmJpbmRUZXh0dXJlKG4uVEVYVFVSRV8yRCx3KTtuLmNvcHlUZXhJbWFnZTJEKG4uVEVYVFVSRV8yRCwwLG4uUkdCLFEueC04LFEueS04LDE2LDE2LDApO24udW5pZm9ybTFpKGMsMCk7bi51bmlmb3JtMmYoaCxOLngsTi55KTtuLnVuaWZvcm0zZihrLFxuTC54LEwueSxMLnopO3EuZGlzYWJsZShuLkJMRU5EKTtxLmVuYWJsZShuLkRFUFRIX1RFU1QpO24uZHJhd0VsZW1lbnRzKG4uVFJJQU5HTEVTLDYsbi5VTlNJR05FRF9TSE9SVCwwKTtxLmFjdGl2ZVRleHR1cmUobi5URVhUVVJFMCk7cS5iaW5kVGV4dHVyZShuLlRFWFRVUkVfMkQsRCk7bi5jb3B5VGV4SW1hZ2UyRChuLlRFWFRVUkVfMkQsMCxuLlJHQkEsUS54LTgsUS55LTgsMTYsMTYsMCk7bi51bmlmb3JtMWkoYywxKTtxLmRpc2FibGUobi5ERVBUSF9URVNUKTtxLmFjdGl2ZVRleHR1cmUobi5URVhUVVJFMSk7cS5iaW5kVGV4dHVyZShuLlRFWFRVUkVfMkQsdyk7bi5kcmF3RWxlbWVudHMobi5UUklBTkdMRVMsNixuLlVOU0lHTkVEX1NIT1JULDApO0UucG9zaXRpb25TY3JlZW4uY29weShMKTtFLmN1c3RvbVVwZGF0ZUNhbGxiYWNrP0UuY3VzdG9tVXBkYXRlQ2FsbGJhY2soRSk6RS51cGRhdGVMZW5zRmxhcmVzKCk7bi51bmlmb3JtMWkoYywyKTtxLmVuYWJsZShuLkJMRU5EKTtmb3IodmFyIE89XG4wLFQ9RS5sZW5zRmxhcmVzLmxlbmd0aDtPPFQ7TysrKXt2YXIgSD1FLmxlbnNGbGFyZXNbT107LjAwMTxILm9wYWNpdHkmJi4wMDE8SC5zY2FsZSYmKEwueD1ILngsTC55PUgueSxMLno9SC56LEM9SC5zaXplKkguc2NhbGUveixOLng9QypBLE4ueT1DLG4udW5pZm9ybTNmKGssTC54LEwueSxMLnopLG4udW5pZm9ybTJmKGgsTi54LE4ueSksbi51bmlmb3JtMWYobCxILnJvdGF0aW9uKSxuLnVuaWZvcm0xZihnLEgub3BhY2l0eSksbi51bmlmb3JtM2YoZixILmNvbG9yLnIsSC5jb2xvci5nLEguY29sb3IuYikscS5zZXRCbGVuZGluZyhILmJsZW5kaW5nLEguYmxlbmRFcXVhdGlvbixILmJsZW5kU3JjLEguYmxlbmREc3QpLGEuc2V0VGV4dHVyZShILnRleHR1cmUsMSksbi5kcmF3RWxlbWVudHMobi5UUklBTkdMRVMsNixuLlVOU0lHTkVEX1NIT1JULDApKX19cS5lbmFibGUobi5DVUxMX0ZBQ0UpO3EuZW5hYmxlKG4uREVQVEhfVEVTVCk7bi5kZXB0aE1hc2soITApO2EucmVzZXRHTFN0YXRlKCl9fX07XG5USFJFRS5TcHJpdGVQbHVnaW49ZnVuY3Rpb24oYSxiKXt2YXIgYyxkLGUsZyxmLGgsbCxrLG0scCxuLHEscyx0LHYsdSx3O2Z1bmN0aW9uIEQoYSxiKXtyZXR1cm4gYS56IT09Yi56P2Iuei1hLno6Yi5pZC1hLmlkfXZhciB4PWEuY29udGV4dCxCPWEuc3RhdGUseSx6LEEsSixGPW5ldyBUSFJFRS5WZWN0b3IzLEM9bmV3IFRIUkVFLlF1YXRlcm5pb24sTj1uZXcgVEhSRUUuVmVjdG9yMzt0aGlzLnJlbmRlcj1mdW5jdGlvbihMLFEpe2lmKDAhPT1iLmxlbmd0aCl7aWYodm9pZCAwPT09QSl7dmFyIE09bmV3IEZsb2F0MzJBcnJheShbLS41LC0uNSwwLDAsLjUsLS41LDEsMCwuNSwuNSwxLDEsLS41LC41LDAsMV0pLEs9bmV3IFVpbnQxNkFycmF5KFswLDEsMiwwLDIsM10pO3k9eC5jcmVhdGVCdWZmZXIoKTt6PXguY3JlYXRlQnVmZmVyKCk7eC5iaW5kQnVmZmVyKHguQVJSQVlfQlVGRkVSLHkpO3guYnVmZmVyRGF0YSh4LkFSUkFZX0JVRkZFUixNLHguU1RBVElDX0RSQVcpO3guYmluZEJ1ZmZlcih4LkVMRU1FTlRfQVJSQVlfQlVGRkVSLFxueik7eC5idWZmZXJEYXRhKHguRUxFTUVOVF9BUlJBWV9CVUZGRVIsSyx4LlNUQVRJQ19EUkFXKTt2YXIgTT14LmNyZWF0ZVByb2dyYW0oKSxLPXguY3JlYXRlU2hhZGVyKHguVkVSVEVYX1NIQURFUiksRT14LmNyZWF0ZVNoYWRlcih4LkZSQUdNRU5UX1NIQURFUik7eC5zaGFkZXJTb3VyY2UoSyxbXCJwcmVjaXNpb24gXCIrYS5nZXRQcmVjaXNpb24oKStcIiBmbG9hdDtcIixcInVuaWZvcm0gbWF0NCBtb2RlbFZpZXdNYXRyaXg7XFxudW5pZm9ybSBtYXQ0IHByb2plY3Rpb25NYXRyaXg7XFxudW5pZm9ybSBmbG9hdCByb3RhdGlvbjtcXG51bmlmb3JtIHZlYzIgc2NhbGU7XFxudW5pZm9ybSB2ZWMyIHV2T2Zmc2V0O1xcbnVuaWZvcm0gdmVjMiB1dlNjYWxlO1xcbmF0dHJpYnV0ZSB2ZWMyIHBvc2l0aW9uO1xcbmF0dHJpYnV0ZSB2ZWMyIHV2O1xcbnZhcnlpbmcgdmVjMiB2VVY7XFxudm9pZCBtYWluKCkge1xcbnZVViA9IHV2T2Zmc2V0ICsgdXYgKiB1dlNjYWxlO1xcbnZlYzIgYWxpZ25lZFBvc2l0aW9uID0gcG9zaXRpb24gKiBzY2FsZTtcXG52ZWMyIHJvdGF0ZWRQb3NpdGlvbjtcXG5yb3RhdGVkUG9zaXRpb24ueCA9IGNvcyggcm90YXRpb24gKSAqIGFsaWduZWRQb3NpdGlvbi54IC0gc2luKCByb3RhdGlvbiApICogYWxpZ25lZFBvc2l0aW9uLnk7XFxucm90YXRlZFBvc2l0aW9uLnkgPSBzaW4oIHJvdGF0aW9uICkgKiBhbGlnbmVkUG9zaXRpb24ueCArIGNvcyggcm90YXRpb24gKSAqIGFsaWduZWRQb3NpdGlvbi55O1xcbnZlYzQgZmluYWxQb3NpdGlvbjtcXG5maW5hbFBvc2l0aW9uID0gbW9kZWxWaWV3TWF0cml4ICogdmVjNCggMC4wLCAwLjAsIDAuMCwgMS4wICk7XFxuZmluYWxQb3NpdGlvbi54eSArPSByb3RhdGVkUG9zaXRpb247XFxuZmluYWxQb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiBmaW5hbFBvc2l0aW9uO1xcbmdsX1Bvc2l0aW9uID0gZmluYWxQb3NpdGlvbjtcXG59XCJdLmpvaW4oXCJcXG5cIikpO1xueC5zaGFkZXJTb3VyY2UoRSxbXCJwcmVjaXNpb24gXCIrYS5nZXRQcmVjaXNpb24oKStcIiBmbG9hdDtcIixcInVuaWZvcm0gdmVjMyBjb2xvcjtcXG51bmlmb3JtIHNhbXBsZXIyRCBtYXA7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbnVuaWZvcm0gaW50IGZvZ1R5cGU7XFxudW5pZm9ybSB2ZWMzIGZvZ0NvbG9yO1xcbnVuaWZvcm0gZmxvYXQgZm9nRGVuc2l0eTtcXG51bmlmb3JtIGZsb2F0IGZvZ05lYXI7XFxudW5pZm9ybSBmbG9hdCBmb2dGYXI7XFxudW5pZm9ybSBmbG9hdCBhbHBoYVRlc3Q7XFxudmFyeWluZyB2ZWMyIHZVVjtcXG52b2lkIG1haW4oKSB7XFxudmVjNCB0ZXh0dXJlID0gdGV4dHVyZTJEKCBtYXAsIHZVViApO1xcbmlmICggdGV4dHVyZS5hIDwgYWxwaGFUZXN0ICkgZGlzY2FyZDtcXG5nbF9GcmFnQ29sb3IgPSB2ZWM0KCBjb2xvciAqIHRleHR1cmUueHl6LCB0ZXh0dXJlLmEgKiBvcGFjaXR5ICk7XFxuaWYgKCBmb2dUeXBlID4gMCApIHtcXG5mbG9hdCBkZXB0aCA9IGdsX0ZyYWdDb29yZC56IC8gZ2xfRnJhZ0Nvb3JkLnc7XFxuZmxvYXQgZm9nRmFjdG9yID0gMC4wO1xcbmlmICggZm9nVHlwZSA9PSAxICkge1xcbmZvZ0ZhY3RvciA9IHNtb290aHN0ZXAoIGZvZ05lYXIsIGZvZ0ZhciwgZGVwdGggKTtcXG59IGVsc2Uge1xcbmNvbnN0IGZsb2F0IExPRzIgPSAxLjQ0MjY5NTtcXG5mb2dGYWN0b3IgPSBleHAyKCAtIGZvZ0RlbnNpdHkgKiBmb2dEZW5zaXR5ICogZGVwdGggKiBkZXB0aCAqIExPRzIgKTtcXG5mb2dGYWN0b3IgPSAxLjAgLSBjbGFtcCggZm9nRmFjdG9yLCAwLjAsIDEuMCApO1xcbn1cXG5nbF9GcmFnQ29sb3IgPSBtaXgoIGdsX0ZyYWdDb2xvciwgdmVjNCggZm9nQ29sb3IsIGdsX0ZyYWdDb2xvci53ICksIGZvZ0ZhY3RvciApO1xcbn1cXG59XCJdLmpvaW4oXCJcXG5cIikpO1xueC5jb21waWxlU2hhZGVyKEspO3guY29tcGlsZVNoYWRlcihFKTt4LmF0dGFjaFNoYWRlcihNLEspO3guYXR0YWNoU2hhZGVyKE0sRSk7eC5saW5rUHJvZ3JhbShNKTtBPU07dT14LmdldEF0dHJpYkxvY2F0aW9uKEEsXCJwb3NpdGlvblwiKTt3PXguZ2V0QXR0cmliTG9jYXRpb24oQSxcInV2XCIpO2M9eC5nZXRVbmlmb3JtTG9jYXRpb24oQSxcInV2T2Zmc2V0XCIpO2Q9eC5nZXRVbmlmb3JtTG9jYXRpb24oQSxcInV2U2NhbGVcIik7ZT14LmdldFVuaWZvcm1Mb2NhdGlvbihBLFwicm90YXRpb25cIik7Zz14LmdldFVuaWZvcm1Mb2NhdGlvbihBLFwic2NhbGVcIik7Zj14LmdldFVuaWZvcm1Mb2NhdGlvbihBLFwiY29sb3JcIik7aD14LmdldFVuaWZvcm1Mb2NhdGlvbihBLFwibWFwXCIpO2w9eC5nZXRVbmlmb3JtTG9jYXRpb24oQSxcIm9wYWNpdHlcIik7az14LmdldFVuaWZvcm1Mb2NhdGlvbihBLFwibW9kZWxWaWV3TWF0cml4XCIpO209eC5nZXRVbmlmb3JtTG9jYXRpb24oQSxcInByb2plY3Rpb25NYXRyaXhcIik7cD1cbnguZ2V0VW5pZm9ybUxvY2F0aW9uKEEsXCJmb2dUeXBlXCIpO249eC5nZXRVbmlmb3JtTG9jYXRpb24oQSxcImZvZ0RlbnNpdHlcIik7cT14LmdldFVuaWZvcm1Mb2NhdGlvbihBLFwiZm9nTmVhclwiKTtzPXguZ2V0VW5pZm9ybUxvY2F0aW9uKEEsXCJmb2dGYXJcIik7dD14LmdldFVuaWZvcm1Mb2NhdGlvbihBLFwiZm9nQ29sb3JcIik7dj14LmdldFVuaWZvcm1Mb2NhdGlvbihBLFwiYWxwaGFUZXN0XCIpO009ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtNLndpZHRoPTg7TS5oZWlnaHQ9ODtLPU0uZ2V0Q29udGV4dChcIjJkXCIpO0suZmlsbFN0eWxlPVwid2hpdGVcIjtLLmZpbGxSZWN0KDAsMCw4LDgpO0o9bmV3IFRIUkVFLlRleHR1cmUoTSk7Si5uZWVkc1VwZGF0ZT0hMH14LnVzZVByb2dyYW0oQSk7Qi5pbml0QXR0cmlidXRlcygpO0IuZW5hYmxlQXR0cmlidXRlKHUpO0IuZW5hYmxlQXR0cmlidXRlKHcpO0IuZGlzYWJsZVVudXNlZEF0dHJpYnV0ZXMoKTtCLmRpc2FibGUoeC5DVUxMX0ZBQ0UpO1xuQi5lbmFibGUoeC5CTEVORCk7eC5iaW5kQnVmZmVyKHguQVJSQVlfQlVGRkVSLHkpO3gudmVydGV4QXR0cmliUG9pbnRlcih1LDIseC5GTE9BVCwhMSwxNiwwKTt4LnZlcnRleEF0dHJpYlBvaW50ZXIodywyLHguRkxPQVQsITEsMTYsOCk7eC5iaW5kQnVmZmVyKHguRUxFTUVOVF9BUlJBWV9CVUZGRVIseik7eC51bmlmb3JtTWF0cml4NGZ2KG0sITEsUS5wcm9qZWN0aW9uTWF0cml4LmVsZW1lbnRzKTtCLmFjdGl2ZVRleHR1cmUoeC5URVhUVVJFMCk7eC51bmlmb3JtMWkoaCwwKTtLPU09MDsoRT1MLmZvZyk/KHgudW5pZm9ybTNmKHQsRS5jb2xvci5yLEUuY29sb3IuZyxFLmNvbG9yLmIpLEUgaW5zdGFuY2VvZiBUSFJFRS5Gb2c/KHgudW5pZm9ybTFmKHEsRS5uZWFyKSx4LnVuaWZvcm0xZihzLEUuZmFyKSx4LnVuaWZvcm0xaShwLDEpLEs9TT0xKTpFIGluc3RhbmNlb2YgVEhSRUUuRm9nRXhwMiYmKHgudW5pZm9ybTFmKG4sRS5kZW5zaXR5KSx4LnVuaWZvcm0xaShwLDIpLEs9TT0yKSk6XG4oeC51bmlmb3JtMWkocCwwKSxLPU09MCk7Zm9yKHZhciBFPTAsTz1iLmxlbmd0aDtFPE87RSsrKXt2YXIgVD1iW0VdO1QubW9kZWxWaWV3TWF0cml4Lm11bHRpcGx5TWF0cmljZXMoUS5tYXRyaXhXb3JsZEludmVyc2UsVC5tYXRyaXhXb3JsZCk7VC56PS1ULm1vZGVsVmlld01hdHJpeC5lbGVtZW50c1sxNF19Yi5zb3J0KEQpO2Zvcih2YXIgSD1bXSxFPTAsTz1iLmxlbmd0aDtFPE87RSsrKXt2YXIgVD1iW0VdLFI9VC5tYXRlcmlhbDt4LnVuaWZvcm0xZih2LFIuYWxwaGFUZXN0KTt4LnVuaWZvcm1NYXRyaXg0ZnYoaywhMSxULm1vZGVsVmlld01hdHJpeC5lbGVtZW50cyk7VC5tYXRyaXhXb3JsZC5kZWNvbXBvc2UoRixDLE4pO0hbMF09Ti54O0hbMV09Ti55O1Q9MDtMLmZvZyYmUi5mb2cmJihUPUspO00hPT1UJiYoeC51bmlmb3JtMWkocCxUKSxNPVQpO251bGwhPT1SLm1hcD8oeC51bmlmb3JtMmYoYyxSLm1hcC5vZmZzZXQueCxSLm1hcC5vZmZzZXQueSkseC51bmlmb3JtMmYoZCxcblIubWFwLnJlcGVhdC54LFIubWFwLnJlcGVhdC55KSk6KHgudW5pZm9ybTJmKGMsMCwwKSx4LnVuaWZvcm0yZihkLDEsMSkpO3gudW5pZm9ybTFmKGwsUi5vcGFjaXR5KTt4LnVuaWZvcm0zZihmLFIuY29sb3IucixSLmNvbG9yLmcsUi5jb2xvci5iKTt4LnVuaWZvcm0xZihlLFIucm90YXRpb24pO3gudW5pZm9ybTJmdihnLEgpO0Iuc2V0QmxlbmRpbmcoUi5ibGVuZGluZyxSLmJsZW5kRXF1YXRpb24sUi5ibGVuZFNyYyxSLmJsZW5kRHN0KTtCLnNldERlcHRoVGVzdChSLmRlcHRoVGVzdCk7Qi5zZXREZXB0aFdyaXRlKFIuZGVwdGhXcml0ZSk7Ui5tYXAmJlIubWFwLmltYWdlJiZSLm1hcC5pbWFnZS53aWR0aD9hLnNldFRleHR1cmUoUi5tYXAsMCk6YS5zZXRUZXh0dXJlKEosMCk7eC5kcmF3RWxlbWVudHMoeC5UUklBTkdMRVMsNix4LlVOU0lHTkVEX1NIT1JULDApfUIuZW5hYmxlKHguQ1VMTF9GQUNFKTthLnJlc2V0R0xTdGF0ZSgpfX19O1xuVEhSRUUuQ3VydmVVdGlscz17dGFuZ2VudFF1YWRyYXRpY0JlemllcjpmdW5jdGlvbihhLGIsYyxkKXtyZXR1cm4gMiooMS1hKSooYy1iKSsyKmEqKGQtYyl9LHRhbmdlbnRDdWJpY0JlemllcjpmdW5jdGlvbihhLGIsYyxkLGUpe3JldHVybi0zKmIqKDEtYSkqKDEtYSkrMypjKigxLWEpKigxLWEpLTYqYSpjKigxLWEpKzYqYSpkKigxLWEpLTMqYSphKmQrMyphKmEqZX0sdGFuZ2VudFNwbGluZTpmdW5jdGlvbihhLGIsYyxkLGUpe3JldHVybiA2KmEqYS02KmErKDMqYSphLTQqYSsxKSsoLTYqYSphKzYqYSkrKDMqYSphLTIqYSl9LGludGVycG9sYXRlOmZ1bmN0aW9uKGEsYixjLGQsZSl7YT0uNSooYy1hKTtkPS41KihkLWIpO3ZhciBnPWUqZTtyZXR1cm4oMipiLTIqYythK2QpKmUqZysoLTMqYiszKmMtMiphLWQpKmcrYSplK2J9fTtcblRIUkVFLkdlb21ldHJ5VXRpbHM9e21lcmdlOmZ1bmN0aW9uKGEsYixjKXtjb25zb2xlLndhcm4oXCJUSFJFRS5HZW9tZXRyeVV0aWxzOiAubWVyZ2UoKSBoYXMgYmVlbiBtb3ZlZCB0byBHZW9tZXRyeS4gVXNlIGdlb21ldHJ5Lm1lcmdlKCBnZW9tZXRyeTIsIG1hdHJpeCwgbWF0ZXJpYWxJbmRleE9mZnNldCApIGluc3RlYWQuXCIpO3ZhciBkO2IgaW5zdGFuY2VvZiBUSFJFRS5NZXNoJiYoYi5tYXRyaXhBdXRvVXBkYXRlJiZiLnVwZGF0ZU1hdHJpeCgpLGQ9Yi5tYXRyaXgsYj1iLmdlb21ldHJ5KTthLm1lcmdlKGIsZCxjKX0sY2VudGVyOmZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLkdlb21ldHJ5VXRpbHM6IC5jZW50ZXIoKSBoYXMgYmVlbiBtb3ZlZCB0byBHZW9tZXRyeS4gVXNlIGdlb21ldHJ5LmNlbnRlcigpIGluc3RlYWQuXCIpO3JldHVybiBhLmNlbnRlcigpfX07XG5USFJFRS5JbWFnZVV0aWxzPXtjcm9zc09yaWdpbjp2b2lkIDAsbG9hZFRleHR1cmU6ZnVuY3Rpb24oYSxiLGMsZCl7Y29uc29sZS53YXJuKFwiVEhSRUUuSW1hZ2VVdGlscy5sb2FkVGV4dHVyZSBpcyBiZWluZyBkZXByZWNhdGVkLiBVc2UgVEhSRUUuVGV4dHVyZUxvYWRlcigpIGluc3RlYWQuXCIpO3ZhciBlPW5ldyBUSFJFRS5UZXh0dXJlTG9hZGVyO2Uuc2V0Q3Jvc3NPcmlnaW4odGhpcy5jcm9zc09yaWdpbik7YT1lLmxvYWQoYSxjLHZvaWQgMCxkKTtiJiYoYS5tYXBwaW5nPWIpO3JldHVybiBhfSxsb2FkVGV4dHVyZUN1YmU6ZnVuY3Rpb24oYSxiLGMsZCl7Y29uc29sZS53YXJuKFwiVEhSRUUuSW1hZ2VVdGlscy5sb2FkVGV4dHVyZUN1YmUgaXMgYmVpbmcgZGVwcmVjYXRlZC4gVXNlIFRIUkVFLkN1YmVUZXh0dXJlTG9hZGVyKCkgaW5zdGVhZC5cIik7dmFyIGU9bmV3IFRIUkVFLkN1YmVUZXh0dXJlTG9hZGVyO2Uuc2V0Q3Jvc3NPcmlnaW4odGhpcy5jcm9zc09yaWdpbik7YT1lLmxvYWQoYSxcbmMsdm9pZCAwLGQpO2ImJihhLm1hcHBpbmc9Yik7cmV0dXJuIGF9LGxvYWRDb21wcmVzc2VkVGV4dHVyZTpmdW5jdGlvbigpe2NvbnNvbGUuZXJyb3IoXCJUSFJFRS5JbWFnZVV0aWxzLmxvYWRDb21wcmVzc2VkVGV4dHVyZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgVEhSRUUuRERTTG9hZGVyIGluc3RlYWQuXCIpfSxsb2FkQ29tcHJlc3NlZFRleHR1cmVDdWJlOmZ1bmN0aW9uKCl7Y29uc29sZS5lcnJvcihcIlRIUkVFLkltYWdlVXRpbHMubG9hZENvbXByZXNzZWRUZXh0dXJlQ3ViZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgVEhSRUUuRERTTG9hZGVyIGluc3RlYWQuXCIpfX07XG5USFJFRS5TY2VuZVV0aWxzPXtjcmVhdGVNdWx0aU1hdGVyaWFsT2JqZWN0OmZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPW5ldyBUSFJFRS5Hcm91cCxkPTAsZT1iLmxlbmd0aDtkPGU7ZCsrKWMuYWRkKG5ldyBUSFJFRS5NZXNoKGEsYltkXSkpO3JldHVybiBjfSxkZXRhY2g6ZnVuY3Rpb24oYSxiLGMpe2EuYXBwbHlNYXRyaXgoYi5tYXRyaXhXb3JsZCk7Yi5yZW1vdmUoYSk7Yy5hZGQoYSl9LGF0dGFjaDpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9bmV3IFRIUkVFLk1hdHJpeDQ7ZC5nZXRJbnZlcnNlKGMubWF0cml4V29ybGQpO2EuYXBwbHlNYXRyaXgoZCk7Yi5yZW1vdmUoYSk7Yy5hZGQoYSl9fTtcblRIUkVFLlNoYXBlVXRpbHM9e2FyZWE6ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPWEubGVuZ3RoLGM9MCxkPWItMSxlPTA7ZTxiO2Q9ZSsrKWMrPWFbZF0ueCphW2VdLnktYVtlXS54KmFbZF0ueTtyZXR1cm4uNSpjfSx0cmlhbmd1bGF0ZTpmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihhLGIpe3ZhciBjPWEubGVuZ3RoO2lmKDM+YylyZXR1cm4gbnVsbDt2YXIgZD1bXSxlPVtdLGc9W10sZixoLGw7aWYoMDxUSFJFRS5TaGFwZVV0aWxzLmFyZWEoYSkpZm9yKGg9MDtoPGM7aCsrKWVbaF09aDtlbHNlIGZvcihoPTA7aDxjO2grKyllW2hdPWMtMS1oO3ZhciBrPTIqYztmb3IoaD1jLTE7MjxjOyl7aWYoMD49ay0tKXtjb25zb2xlLndhcm4oXCJUSFJFRS5TaGFwZVV0aWxzOiBVbmFibGUgdG8gdHJpYW5ndWxhdGUgcG9seWdvbiEgaW4gdHJpYW5ndWxhdGUoKVwiKTticmVha31mPWg7Yzw9ZiYmKGY9MCk7aD1mKzE7Yzw9aCYmKGg9MCk7bD1oKzE7Yzw9bCYmKGw9MCk7dmFyIG07YTp7dmFyIHA9XG5tPXZvaWQgMCxuPXZvaWQgMCxxPXZvaWQgMCxzPXZvaWQgMCx0PXZvaWQgMCx2PXZvaWQgMCx1PXZvaWQgMCx3PXZvaWQgMCxwPWFbZVtmXV0ueCxuPWFbZVtmXV0ueSxxPWFbZVtoXV0ueCxzPWFbZVtoXV0ueSx0PWFbZVtsXV0ueCx2PWFbZVtsXV0ueTtpZihOdW1iZXIuRVBTSUxPTj4ocS1wKSoodi1uKS0ocy1uKSoodC1wKSltPSExO2Vsc2V7dmFyIEQ9dm9pZCAwLHg9dm9pZCAwLEI9dm9pZCAwLHk9dm9pZCAwLHo9dm9pZCAwLEE9dm9pZCAwLEo9dm9pZCAwLEY9dm9pZCAwLEM9dm9pZCAwLE49dm9pZCAwLEM9Rj1KPXc9dT12b2lkIDAsRD10LXEseD12LXMsQj1wLXQseT1uLXYsej1xLXAsQT1zLW47Zm9yKG09MDttPGM7bSsrKWlmKHU9YVtlW21dXS54LHc9YVtlW21dXS55LCEodT09PXAmJnc9PT1ufHx1PT09cSYmdz09PXN8fHU9PT10JiZ3PT09dikmJihKPXUtcCxGPXctbixDPXUtcSxOPXctcyx1LT10LHctPXYsQz1EKk4teCpDLEo9eipGLUEqSixGPUIqdy15KnUsQz49LU51bWJlci5FUFNJTE9OJiZcbkY+PS1OdW1iZXIuRVBTSUxPTiYmSj49LU51bWJlci5FUFNJTE9OKSl7bT0hMTticmVhayBhfW09ITB9fWlmKG0pe2QucHVzaChbYVtlW2ZdXSxhW2VbaF1dLGFbZVtsXV1dKTtnLnB1c2goW2VbZl0sZVtoXSxlW2xdXSk7Zj1oO2ZvcihsPWgrMTtsPGM7ZisrLGwrKyllW2ZdPWVbbF07Yy0tO2s9MipjfX1yZXR1cm4gYj9nOmR9fSgpLHRyaWFuZ3VsYXRlU2hhcGU6ZnVuY3Rpb24oYSxiKXtmdW5jdGlvbiBjKGEsYixjKXtyZXR1cm4gYS54IT09Yi54P2EueDxiLng/YS54PD1jLngmJmMueDw9Yi54OmIueDw9Yy54JiZjLng8PWEueDphLnk8Yi55P2EueTw9Yy55JiZjLnk8PWIueTpiLnk8PWMueSYmYy55PD1hLnl9ZnVuY3Rpb24gZChhLGIsZCxlLGYpe3ZhciBnPWIueC1hLngsaD1iLnktYS55LGs9ZS54LWQueCxsPWUueS1kLnksbT1hLngtZC54LHA9YS55LWQueSx6PWgqay1nKmwsQT1oKm0tZypwO2lmKE1hdGguYWJzKHopPk51bWJlci5FUFNJTE9OKXtpZigwPHope2lmKDA+QXx8QT5cbnopcmV0dXJuW107az1sKm0taypwO2lmKDA+a3x8az56KXJldHVybltdfWVsc2V7aWYoMDxBfHxBPHopcmV0dXJuW107az1sKm0taypwO2lmKDA8a3x8azx6KXJldHVybltdfWlmKDA9PT1rKXJldHVybiFmfHwwIT09QSYmQSE9PXo/W2FdOltdO2lmKGs9PT16KXJldHVybiFmfHwwIT09QSYmQSE9PXo/W2JdOltdO2lmKDA9PT1BKXJldHVybltkXTtpZihBPT09eilyZXR1cm5bZV07Zj1rL3o7cmV0dXJuW3t4OmEueCtmKmcseTphLnkrZipofV19aWYoMCE9PUF8fGwqbSE9PWsqcClyZXR1cm5bXTtoPTA9PT1nJiYwPT09aDtrPTA9PT1rJiYwPT09bDtpZihoJiZrKXJldHVybiBhLnghPT1kLnh8fGEueSE9PWQueT9bXTpbYV07aWYoaClyZXR1cm4gYyhkLGUsYSk/W2FdOltdO2lmKGspcmV0dXJuIGMoYSxiLGQpP1tkXTpbXTswIT09Zz8oYS54PGIueD8oZz1hLGs9YS54LGg9YixhPWIueCk6KGc9YixrPWIueCxoPWEsYT1hLngpLGQueDxlLng/KGI9ZCx6PWQueCxsPWUsZD1lLngpOihiPVxuZSx6PWUueCxsPWQsZD1kLngpKTooYS55PGIueT8oZz1hLGs9YS55LGg9YixhPWIueSk6KGc9YixrPWIueSxoPWEsYT1hLnkpLGQueTxlLnk/KGI9ZCx6PWQueSxsPWUsZD1lLnkpOihiPWUsej1lLnksbD1kLGQ9ZC55KSk7cmV0dXJuIGs8PXo/YTx6P1tdOmE9PT16P2Y/W106W2JdOmE8PWQ/W2IsaF06W2IsbF06az5kP1tdOms9PT1kP2Y/W106W2ddOmE8PWQ/W2csaF06W2csbF19ZnVuY3Rpb24gZShhLGIsYyxkKXt2YXIgZT1iLngtYS54LGY9Yi55LWEueTtiPWMueC1hLng7Yz1jLnktYS55O3ZhciBnPWQueC1hLng7ZD1kLnktYS55O2E9ZSpjLWYqYjtlPWUqZC1mKmc7cmV0dXJuIE1hdGguYWJzKGEpPk51bWJlci5FUFNJTE9OPyhiPWcqYy1kKmIsMDxhPzA8PWUmJjA8PWI6MDw9ZXx8MDw9Yik6MDxlfXZhciBnLGYsaCxsLGssbT17fTtoPWEuY29uY2F0KCk7Zz0wO2ZvcihmPWIubGVuZ3RoO2c8ZjtnKyspQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoaCxiW2ddKTtnPTA7Zm9yKGY9XG5oLmxlbmd0aDtnPGY7ZysrKWs9aFtnXS54K1wiOlwiK2hbZ10ueSx2b2lkIDAhPT1tW2tdJiZjb25zb2xlLndhcm4oXCJUSFJFRS5TaGFwZTogRHVwbGljYXRlIHBvaW50XCIsayksbVtrXT1nO2c9ZnVuY3Rpb24oYSxiKXtmdW5jdGlvbiBjKGEsYil7dmFyIGQ9aC5sZW5ndGgtMSxmPWEtMTswPmYmJihmPWQpO3ZhciBnPWErMTtnPmQmJihnPTApO2Q9ZShoW2FdLGhbZl0saFtnXSxrW2JdKTtpZighZClyZXR1cm4hMTtkPWsubGVuZ3RoLTE7Zj1iLTE7MD5mJiYoZj1kKTtnPWIrMTtnPmQmJihnPTApO3JldHVybihkPWUoa1tiXSxrW2ZdLGtbZ10saFthXSkpPyEwOiExfWZ1bmN0aW9uIGYoYSxiKXt2YXIgYyxlO2ZvcihjPTA7YzxoLmxlbmd0aDtjKyspaWYoZT1jKzEsZSU9aC5sZW5ndGgsZT1kKGEsYixoW2NdLGhbZV0sITApLDA8ZS5sZW5ndGgpcmV0dXJuITA7cmV0dXJuITF9ZnVuY3Rpb24gZyhhLGMpe3ZhciBlLGYsaCxrO2ZvcihlPTA7ZTxsLmxlbmd0aDtlKyspZm9yKGY9YltsW2VdXSxcbmg9MDtoPGYubGVuZ3RoO2grKylpZihrPWgrMSxrJT1mLmxlbmd0aCxrPWQoYSxjLGZbaF0sZltrXSwhMCksMDxrLmxlbmd0aClyZXR1cm4hMDtyZXR1cm4hMX12YXIgaD1hLmNvbmNhdCgpLGssbD1bXSxtLHAseSx6LEEsSj1bXSxGLEMsTixMPTA7Zm9yKG09Yi5sZW5ndGg7TDxtO0wrKylsLnB1c2goTCk7Rj0wO2Zvcih2YXIgUT0yKmwubGVuZ3RoOzA8bC5sZW5ndGg7KXtRLS07aWYoMD5RKXtjb25zb2xlLmxvZyhcIkluZmluaXRlIExvb3AhIEhvbGVzIGxlZnQ6XCIrbC5sZW5ndGgrXCIsIFByb2JhYmx5IEhvbGUgb3V0c2lkZSBTaGFwZSFcIik7YnJlYWt9Zm9yKHA9RjtwPGgubGVuZ3RoO3ArKyl7eT1oW3BdO209LTE7Zm9yKEw9MDtMPGwubGVuZ3RoO0wrKylpZih6PWxbTF0sQT15LngrXCI6XCIreS55K1wiOlwiK3osdm9pZCAwPT09SltBXSl7az1iW3pdO2ZvcihDPTA7QzxrLmxlbmd0aDtDKyspaWYoej1rW0NdLGMocCxDKSYmIWYoeSx6KSYmIWcoeSx6KSl7bT1DO2wuc3BsaWNlKEwsMSk7XG5GPWguc2xpY2UoMCxwKzEpO3o9aC5zbGljZShwKTtDPWsuc2xpY2UobSk7Tj1rLnNsaWNlKDAsbSsxKTtoPUYuY29uY2F0KEMpLmNvbmNhdChOKS5jb25jYXQoeik7Rj1wO2JyZWFrfWlmKDA8PW0pYnJlYWs7SltBXT0hMH1pZigwPD1tKWJyZWFrfX1yZXR1cm4gaH0oYSxiKTt2YXIgcD1USFJFRS5TaGFwZVV0aWxzLnRyaWFuZ3VsYXRlKGcsITEpO2c9MDtmb3IoZj1wLmxlbmd0aDtnPGY7ZysrKWZvcihsPXBbZ10saD0wOzM+aDtoKyspaz1sW2hdLngrXCI6XCIrbFtoXS55LGs9bVtrXSx2b2lkIDAhPT1rJiYobFtoXT1rKTtyZXR1cm4gcC5jb25jYXQoKX0saXNDbG9ja1dpc2U6ZnVuY3Rpb24oYSl7cmV0dXJuIDA+VEhSRUUuU2hhcGVVdGlscy5hcmVhKGEpfSxiMjpmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT0xLWE7cmV0dXJuIGUqZSpiKzIqKDEtYSkqYSpjK2EqYSpkfX0oKSxiMzpmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBnPVxuMS1hLGY9MS1hO3JldHVybiBnKmcqZypiKzMqZipmKmEqYyszKigxLWEpKmEqYSpkK2EqYSphKmV9fSgpfTtUSFJFRS5BdWRpbz1mdW5jdGlvbihhKXtUSFJFRS5PYmplY3QzRC5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIkF1ZGlvXCI7dGhpcy5jb250ZXh0PWEuY29udGV4dDt0aGlzLnNvdXJjZT10aGlzLmNvbnRleHQuY3JlYXRlQnVmZmVyU291cmNlKCk7dGhpcy5zb3VyY2Uub25lbmRlZD10aGlzLm9uRW5kZWQuYmluZCh0aGlzKTt0aGlzLmdhaW49dGhpcy5jb250ZXh0LmNyZWF0ZUdhaW4oKTt0aGlzLmdhaW4uY29ubmVjdCh0aGlzLmNvbnRleHQuZGVzdGluYXRpb24pO3RoaXMucGFubmVyPXRoaXMuY29udGV4dC5jcmVhdGVQYW5uZXIoKTt0aGlzLnBhbm5lci5jb25uZWN0KHRoaXMuZ2Fpbik7dGhpcy5hdXRvcGxheT0hMTt0aGlzLnN0YXJ0VGltZT0wO3RoaXMucGxheWJhY2tSYXRlPTE7dGhpcy5pc1BsYXlpbmc9ITF9O1RIUkVFLkF1ZGlvLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLk9iamVjdDNELnByb3RvdHlwZSk7XG5USFJFRS5BdWRpby5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuQXVkaW87VEhSRUUuQXVkaW8ucHJvdG90eXBlLmxvYWQ9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcyxjPW5ldyBYTUxIdHRwUmVxdWVzdDtjLm9wZW4oXCJHRVRcIixhLCEwKTtjLnJlc3BvbnNlVHlwZT1cImFycmF5YnVmZmVyXCI7Yy5vbmxvYWQ9ZnVuY3Rpb24oYSl7Yi5jb250ZXh0LmRlY29kZUF1ZGlvRGF0YSh0aGlzLnJlc3BvbnNlLGZ1bmN0aW9uKGEpe2Iuc291cmNlLmJ1ZmZlcj1hO2IuYXV0b3BsYXkmJmIucGxheSgpfSl9O2Muc2VuZCgpO3JldHVybiB0aGlzfTtcblRIUkVFLkF1ZGlvLnByb3RvdHlwZS5wbGF5PWZ1bmN0aW9uKCl7aWYoITA9PT10aGlzLmlzUGxheWluZyljb25zb2xlLndhcm4oXCJUSFJFRS5BdWRpbzogQXVkaW8gaXMgYWxyZWFkeSBwbGF5aW5nLlwiKTtlbHNle3ZhciBhPXRoaXMuY29udGV4dC5jcmVhdGVCdWZmZXJTb3VyY2UoKTthLmJ1ZmZlcj10aGlzLnNvdXJjZS5idWZmZXI7YS5sb29wPXRoaXMuc291cmNlLmxvb3A7YS5vbmVuZGVkPXRoaXMuc291cmNlLm9uZW5kZWQ7YS5zdGFydCgwLHRoaXMuc3RhcnRUaW1lKTthLnBsYXliYWNrUmF0ZS52YWx1ZT10aGlzLnBsYXliYWNrUmF0ZTt0aGlzLmlzUGxheWluZz0hMDt0aGlzLnNvdXJjZT1hO3RoaXMuY29ubmVjdCgpfX07VEhSRUUuQXVkaW8ucHJvdG90eXBlLnBhdXNlPWZ1bmN0aW9uKCl7dGhpcy5zb3VyY2Uuc3RvcCgpO3RoaXMuc3RhcnRUaW1lPXRoaXMuY29udGV4dC5jdXJyZW50VGltZX07XG5USFJFRS5BdWRpby5wcm90b3R5cGUuc3RvcD1mdW5jdGlvbigpe3RoaXMuc291cmNlLnN0b3AoKTt0aGlzLnN0YXJ0VGltZT0wfTtUSFJFRS5BdWRpby5wcm90b3R5cGUuY29ubmVjdD1mdW5jdGlvbigpe3ZvaWQgMCE9PXRoaXMuZmlsdGVyPyh0aGlzLnNvdXJjZS5jb25uZWN0KHRoaXMuZmlsdGVyKSx0aGlzLmZpbHRlci5jb25uZWN0KHRoaXMucGFubmVyKSk6dGhpcy5zb3VyY2UuY29ubmVjdCh0aGlzLnBhbm5lcil9O1RIUkVFLkF1ZGlvLnByb3RvdHlwZS5kaXNjb25uZWN0PWZ1bmN0aW9uKCl7dm9pZCAwIT09dGhpcy5maWx0ZXI/KHRoaXMuc291cmNlLmRpc2Nvbm5lY3QodGhpcy5maWx0ZXIpLHRoaXMuZmlsdGVyLmRpc2Nvbm5lY3QodGhpcy5wYW5uZXIpKTp0aGlzLnNvdXJjZS5kaXNjb25uZWN0KHRoaXMucGFubmVyKX07XG5USFJFRS5BdWRpby5wcm90b3R5cGUuc2V0RmlsdGVyPWZ1bmN0aW9uKGEpeyEwPT09dGhpcy5pc1BsYXlpbmc/KHRoaXMuZGlzY29ubmVjdCgpLHRoaXMuZmlsdGVyPWEsdGhpcy5jb25uZWN0KCkpOnRoaXMuZmlsdGVyPWF9O1RIUkVFLkF1ZGlvLnByb3RvdHlwZS5nZXRGaWx0ZXI9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5maWx0ZXJ9O1RIUkVFLkF1ZGlvLnByb3RvdHlwZS5zZXRQbGF5YmFja1JhdGU9ZnVuY3Rpb24oYSl7dGhpcy5wbGF5YmFja1JhdGU9YTshMD09PXRoaXMuaXNQbGF5aW5nJiYodGhpcy5zb3VyY2UucGxheWJhY2tSYXRlLnZhbHVlPXRoaXMucGxheWJhY2tSYXRlKX07VEhSRUUuQXVkaW8ucHJvdG90eXBlLmdldFBsYXliYWNrUmF0ZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLnBsYXliYWNrUmF0ZX07VEhSRUUuQXVkaW8ucHJvdG90eXBlLm9uRW5kZWQ9ZnVuY3Rpb24oKXt0aGlzLmlzUGxheWluZz0hMX07XG5USFJFRS5BdWRpby5wcm90b3R5cGUuc2V0TG9vcD1mdW5jdGlvbihhKXt0aGlzLnNvdXJjZS5sb29wPWF9O1RIUkVFLkF1ZGlvLnByb3RvdHlwZS5nZXRMb29wPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc291cmNlLmxvb3B9O1RIUkVFLkF1ZGlvLnByb3RvdHlwZS5zZXRSZWZEaXN0YW5jZT1mdW5jdGlvbihhKXt0aGlzLnBhbm5lci5yZWZEaXN0YW5jZT1hfTtUSFJFRS5BdWRpby5wcm90b3R5cGUuZ2V0UmVmRGlzdGFuY2U9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wYW5uZXIucmVmRGlzdGFuY2V9O1RIUkVFLkF1ZGlvLnByb3RvdHlwZS5zZXRSb2xsb2ZmRmFjdG9yPWZ1bmN0aW9uKGEpe3RoaXMucGFubmVyLnJvbGxvZmZGYWN0b3I9YX07VEhSRUUuQXVkaW8ucHJvdG90eXBlLmdldFJvbGxvZmZGYWN0b3I9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wYW5uZXIucm9sbG9mZkZhY3Rvcn07XG5USFJFRS5BdWRpby5wcm90b3R5cGUuc2V0Vm9sdW1lPWZ1bmN0aW9uKGEpe3RoaXMuZ2Fpbi5nYWluLnZhbHVlPWF9O1RIUkVFLkF1ZGlvLnByb3RvdHlwZS5nZXRWb2x1bWU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5nYWluLmdhaW4udmFsdWV9O1RIUkVFLkF1ZGlvLnByb3RvdHlwZS51cGRhdGVNYXRyaXhXb3JsZD1mdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5WZWN0b3IzO3JldHVybiBmdW5jdGlvbihiKXtUSFJFRS5PYmplY3QzRC5wcm90b3R5cGUudXBkYXRlTWF0cml4V29ybGQuY2FsbCh0aGlzLGIpO2Euc2V0RnJvbU1hdHJpeFBvc2l0aW9uKHRoaXMubWF0cml4V29ybGQpO3RoaXMucGFubmVyLnNldFBvc2l0aW9uKGEueCxhLnksYS56KX19KCk7VEhSRUUuQXVkaW9MaXN0ZW5lcj1mdW5jdGlvbigpe1RIUkVFLk9iamVjdDNELmNhbGwodGhpcyk7dGhpcy50eXBlPVwiQXVkaW9MaXN0ZW5lclwiO3RoaXMuY29udGV4dD1uZXcgKHdpbmRvdy5BdWRpb0NvbnRleHR8fHdpbmRvdy53ZWJraXRBdWRpb0NvbnRleHQpfTtcblRIUkVFLkF1ZGlvTGlzdGVuZXIucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuT2JqZWN0M0QucHJvdG90eXBlKTtUSFJFRS5BdWRpb0xpc3RlbmVyLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5BdWRpb0xpc3RlbmVyO1xuVEhSRUUuQXVkaW9MaXN0ZW5lci5wcm90b3R5cGUudXBkYXRlTWF0cml4V29ybGQ9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuVmVjdG9yMyxiPW5ldyBUSFJFRS5RdWF0ZXJuaW9uLGM9bmV3IFRIUkVFLlZlY3RvcjMsZD1uZXcgVEhSRUUuVmVjdG9yMztyZXR1cm4gZnVuY3Rpb24oZSl7VEhSRUUuT2JqZWN0M0QucHJvdG90eXBlLnVwZGF0ZU1hdHJpeFdvcmxkLmNhbGwodGhpcyxlKTtlPXRoaXMuY29udGV4dC5saXN0ZW5lcjt2YXIgZz10aGlzLnVwO3RoaXMubWF0cml4V29ybGQuZGVjb21wb3NlKGEsYixjKTtkLnNldCgwLDAsLTEpLmFwcGx5UXVhdGVybmlvbihiKTtlLnNldFBvc2l0aW9uKGEueCxhLnksYS56KTtlLnNldE9yaWVudGF0aW9uKGQueCxkLnksZC56LGcueCxnLnksZy56KX19KCk7VEhSRUUuQ3VydmU9ZnVuY3Rpb24oKXt9O1xuVEhSRUUuQ3VydmUucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5DdXJ2ZSxnZXRQb2ludDpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5DdXJ2ZTogV2FybmluZywgZ2V0UG9pbnQoKSBub3QgaW1wbGVtZW50ZWQhXCIpO3JldHVybiBudWxsfSxnZXRQb2ludEF0OmZ1bmN0aW9uKGEpe2E9dGhpcy5nZXRVdG9UbWFwcGluZyhhKTtyZXR1cm4gdGhpcy5nZXRQb2ludChhKX0sZ2V0UG9pbnRzOmZ1bmN0aW9uKGEpe2F8fChhPTUpO3ZhciBiLGM9W107Zm9yKGI9MDtiPD1hO2IrKyljLnB1c2godGhpcy5nZXRQb2ludChiL2EpKTtyZXR1cm4gY30sZ2V0U3BhY2VkUG9pbnRzOmZ1bmN0aW9uKGEpe2F8fChhPTUpO3ZhciBiLGM9W107Zm9yKGI9MDtiPD1hO2IrKyljLnB1c2godGhpcy5nZXRQb2ludEF0KGIvYSkpO3JldHVybiBjfSxnZXRMZW5ndGg6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmdldExlbmd0aHMoKTtyZXR1cm4gYVthLmxlbmd0aC0xXX0sZ2V0TGVuZ3RoczpmdW5jdGlvbihhKXthfHxcbihhPXRoaXMuX19hcmNMZW5ndGhEaXZpc2lvbnM/dGhpcy5fX2FyY0xlbmd0aERpdmlzaW9uczoyMDApO2lmKHRoaXMuY2FjaGVBcmNMZW5ndGhzJiZ0aGlzLmNhY2hlQXJjTGVuZ3Rocy5sZW5ndGg9PT1hKzEmJiF0aGlzLm5lZWRzVXBkYXRlKXJldHVybiB0aGlzLmNhY2hlQXJjTGVuZ3Roczt0aGlzLm5lZWRzVXBkYXRlPSExO3ZhciBiPVtdLGMsZD10aGlzLmdldFBvaW50KDApLGUsZz0wO2IucHVzaCgwKTtmb3IoZT0xO2U8PWE7ZSsrKWM9dGhpcy5nZXRQb2ludChlL2EpLGcrPWMuZGlzdGFuY2VUbyhkKSxiLnB1c2goZyksZD1jO3JldHVybiB0aGlzLmNhY2hlQXJjTGVuZ3Rocz1ifSx1cGRhdGVBcmNMZW5ndGhzOmZ1bmN0aW9uKCl7dGhpcy5uZWVkc1VwZGF0ZT0hMDt0aGlzLmdldExlbmd0aHMoKX0sZ2V0VXRvVG1hcHBpbmc6ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLmdldExlbmd0aHMoKSxkPTAsZT1jLmxlbmd0aCxnO2c9Yj9iOmEqY1tlLTFdO2Zvcih2YXIgZj0wLGg9ZS1cbjEsbDtmPD1oOylpZihkPU1hdGguZmxvb3IoZisoaC1mKS8yKSxsPWNbZF0tZywwPmwpZj1kKzE7ZWxzZSBpZigwPGwpaD1kLTE7ZWxzZXtoPWQ7YnJlYWt9ZD1oO2lmKGNbZF09PT1nKXJldHVybiBkLyhlLTEpO2Y9Y1tkXTtyZXR1cm4gYz0oZCsoZy1mKS8oY1tkKzFdLWYpKS8oZS0xKX0sZ2V0VGFuZ2VudDpmdW5jdGlvbihhKXt2YXIgYj1hLTFFLTQ7YSs9MUUtNDswPmImJihiPTApOzE8YSYmKGE9MSk7Yj10aGlzLmdldFBvaW50KGIpO3JldHVybiB0aGlzLmdldFBvaW50KGEpLmNsb25lKCkuc3ViKGIpLm5vcm1hbGl6ZSgpfSxnZXRUYW5nZW50QXQ6ZnVuY3Rpb24oYSl7YT10aGlzLmdldFV0b1RtYXBwaW5nKGEpO3JldHVybiB0aGlzLmdldFRhbmdlbnQoYSl9fTtUSFJFRS5DdXJ2ZS5VdGlscz1USFJFRS5DdXJ2ZVV0aWxzO1xuVEhSRUUuQ3VydmUuY3JlYXRlPWZ1bmN0aW9uKGEsYil7YS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5DdXJ2ZS5wcm90b3R5cGUpO2EucHJvdG90eXBlLmNvbnN0cnVjdG9yPWE7YS5wcm90b3R5cGUuZ2V0UG9pbnQ9YjtyZXR1cm4gYX07VEhSRUUuQ3VydmVQYXRoPWZ1bmN0aW9uKCl7dGhpcy5jdXJ2ZXM9W107dGhpcy5hdXRvQ2xvc2U9ITF9O1RIUkVFLkN1cnZlUGF0aC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5DdXJ2ZS5wcm90b3R5cGUpO1RIUkVFLkN1cnZlUGF0aC5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuQ3VydmVQYXRoO1RIUkVFLkN1cnZlUGF0aC5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uKGEpe3RoaXMuY3VydmVzLnB1c2goYSl9O1xuVEhSRUUuQ3VydmVQYXRoLnByb3RvdHlwZS5jbG9zZVBhdGg9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmN1cnZlc1swXS5nZXRQb2ludCgwKSxiPXRoaXMuY3VydmVzW3RoaXMuY3VydmVzLmxlbmd0aC0xXS5nZXRQb2ludCgxKTthLmVxdWFscyhiKXx8dGhpcy5jdXJ2ZXMucHVzaChuZXcgVEhSRUUuTGluZUN1cnZlKGIsYSkpfTtUSFJFRS5DdXJ2ZVBhdGgucHJvdG90eXBlLmdldFBvaW50PWZ1bmN0aW9uKGEpe2Zvcih2YXIgYj1hKnRoaXMuZ2V0TGVuZ3RoKCksYz10aGlzLmdldEN1cnZlTGVuZ3RocygpLGQ9MDtkPGMubGVuZ3RoOyl7aWYoY1tkXT49YilyZXR1cm4gYT10aGlzLmN1cnZlc1tkXSxiPTEtKGNbZF0tYikvYS5nZXRMZW5ndGgoKSxhLmdldFBvaW50QXQoYik7ZCsrfXJldHVybiBudWxsfTtUSFJFRS5DdXJ2ZVBhdGgucHJvdG90eXBlLmdldExlbmd0aD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuZ2V0Q3VydmVMZW5ndGhzKCk7cmV0dXJuIGFbYS5sZW5ndGgtMV19O1xuVEhSRUUuQ3VydmVQYXRoLnByb3RvdHlwZS5nZXRDdXJ2ZUxlbmd0aHM9ZnVuY3Rpb24oKXtpZih0aGlzLmNhY2hlTGVuZ3RocyYmdGhpcy5jYWNoZUxlbmd0aHMubGVuZ3RoPT09dGhpcy5jdXJ2ZXMubGVuZ3RoKXJldHVybiB0aGlzLmNhY2hlTGVuZ3Rocztmb3IodmFyIGE9W10sYj0wLGM9MCxkPXRoaXMuY3VydmVzLmxlbmd0aDtjPGQ7YysrKWIrPXRoaXMuY3VydmVzW2NdLmdldExlbmd0aCgpLGEucHVzaChiKTtyZXR1cm4gdGhpcy5jYWNoZUxlbmd0aHM9YX07VEhSRUUuQ3VydmVQYXRoLnByb3RvdHlwZS5jcmVhdGVQb2ludHNHZW9tZXRyeT1mdW5jdGlvbihhKXthPXRoaXMuZ2V0UG9pbnRzKGEsITApO3JldHVybiB0aGlzLmNyZWF0ZUdlb21ldHJ5KGEpfTtUSFJFRS5DdXJ2ZVBhdGgucHJvdG90eXBlLmNyZWF0ZVNwYWNlZFBvaW50c0dlb21ldHJ5PWZ1bmN0aW9uKGEpe2E9dGhpcy5nZXRTcGFjZWRQb2ludHMoYSwhMCk7cmV0dXJuIHRoaXMuY3JlYXRlR2VvbWV0cnkoYSl9O1xuVEhSRUUuQ3VydmVQYXRoLnByb3RvdHlwZS5jcmVhdGVHZW9tZXRyeT1mdW5jdGlvbihhKXtmb3IodmFyIGI9bmV3IFRIUkVFLkdlb21ldHJ5LGM9MCxkPWEubGVuZ3RoO2M8ZDtjKyspe3ZhciBlPWFbY107Yi52ZXJ0aWNlcy5wdXNoKG5ldyBUSFJFRS5WZWN0b3IzKGUueCxlLnksZS56fHwwKSl9cmV0dXJuIGJ9O1RIUkVFLlBhdGg9ZnVuY3Rpb24oYSl7VEhSRUUuQ3VydmVQYXRoLmNhbGwodGhpcyk7dGhpcy5hY3Rpb25zPVtdO2EmJnRoaXMuZnJvbVBvaW50cyhhKX07VEhSRUUuUGF0aC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5DdXJ2ZVBhdGgucHJvdG90eXBlKTtUSFJFRS5QYXRoLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5QYXRoO1RIUkVFLlBhdGgucHJvdG90eXBlLmZyb21Qb2ludHM9ZnVuY3Rpb24oYSl7dGhpcy5tb3ZlVG8oYVswXS54LGFbMF0ueSk7Zm9yKHZhciBiPTEsYz1hLmxlbmd0aDtiPGM7YisrKXRoaXMubGluZVRvKGFbYl0ueCxhW2JdLnkpfTtcblRIUkVFLlBhdGgucHJvdG90eXBlLm1vdmVUbz1mdW5jdGlvbihhLGIpe3RoaXMuYWN0aW9ucy5wdXNoKHthY3Rpb246XCJtb3ZlVG9cIixhcmdzOlthLGJdfSl9O1RIUkVFLlBhdGgucHJvdG90eXBlLmxpbmVUbz1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuYWN0aW9uc1t0aGlzLmFjdGlvbnMubGVuZ3RoLTFdLmFyZ3MsYz1uZXcgVEhSRUUuTGluZUN1cnZlKG5ldyBUSFJFRS5WZWN0b3IyKGNbYy5sZW5ndGgtMl0sY1tjLmxlbmd0aC0xXSksbmV3IFRIUkVFLlZlY3RvcjIoYSxiKSk7dGhpcy5jdXJ2ZXMucHVzaChjKTt0aGlzLmFjdGlvbnMucHVzaCh7YWN0aW9uOlwibGluZVRvXCIsYXJnczpbYSxiXX0pfTtcblRIUkVFLlBhdGgucHJvdG90eXBlLnF1YWRyYXRpY0N1cnZlVG89ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9dGhpcy5hY3Rpb25zW3RoaXMuYWN0aW9ucy5sZW5ndGgtMV0uYXJncyxlPW5ldyBUSFJFRS5RdWFkcmF0aWNCZXppZXJDdXJ2ZShuZXcgVEhSRUUuVmVjdG9yMihlW2UubGVuZ3RoLTJdLGVbZS5sZW5ndGgtMV0pLG5ldyBUSFJFRS5WZWN0b3IyKGEsYiksbmV3IFRIUkVFLlZlY3RvcjIoYyxkKSk7dGhpcy5jdXJ2ZXMucHVzaChlKTt0aGlzLmFjdGlvbnMucHVzaCh7YWN0aW9uOlwicXVhZHJhdGljQ3VydmVUb1wiLGFyZ3M6W2EsYixjLGRdfSl9O1xuVEhSRUUuUGF0aC5wcm90b3R5cGUuYmV6aWVyQ3VydmVUbz1mdW5jdGlvbihhLGIsYyxkLGUsZyl7dmFyIGY9dGhpcy5hY3Rpb25zW3RoaXMuYWN0aW9ucy5sZW5ndGgtMV0uYXJncyxmPW5ldyBUSFJFRS5DdWJpY0JlemllckN1cnZlKG5ldyBUSFJFRS5WZWN0b3IyKGZbZi5sZW5ndGgtMl0sZltmLmxlbmd0aC0xXSksbmV3IFRIUkVFLlZlY3RvcjIoYSxiKSxuZXcgVEhSRUUuVmVjdG9yMihjLGQpLG5ldyBUSFJFRS5WZWN0b3IyKGUsZykpO3RoaXMuY3VydmVzLnB1c2goZik7dGhpcy5hY3Rpb25zLnB1c2goe2FjdGlvbjpcImJlemllckN1cnZlVG9cIixhcmdzOlthLGIsYyxkLGUsZ119KX07XG5USFJFRS5QYXRoLnByb3RvdHlwZS5zcGxpbmVUaHJ1PWZ1bmN0aW9uKGEpe3ZhciBiPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyksYz10aGlzLmFjdGlvbnNbdGhpcy5hY3Rpb25zLmxlbmd0aC0xXS5hcmdzLGM9W25ldyBUSFJFRS5WZWN0b3IyKGNbYy5sZW5ndGgtMl0sY1tjLmxlbmd0aC0xXSldO0FycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGMsYSk7Yz1uZXcgVEhSRUUuU3BsaW5lQ3VydmUoYyk7dGhpcy5jdXJ2ZXMucHVzaChjKTt0aGlzLmFjdGlvbnMucHVzaCh7YWN0aW9uOlwic3BsaW5lVGhydVwiLGFyZ3M6Yn0pfTtUSFJFRS5QYXRoLnByb3RvdHlwZS5hcmM9ZnVuY3Rpb24oYSxiLGMsZCxlLGcpe3ZhciBmPXRoaXMuYWN0aW9uc1t0aGlzLmFjdGlvbnMubGVuZ3RoLTFdLmFyZ3M7dGhpcy5hYnNhcmMoYStmW2YubGVuZ3RoLTJdLGIrZltmLmxlbmd0aC0xXSxjLGQsZSxnKX07XG5USFJFRS5QYXRoLnByb3RvdHlwZS5hYnNhcmM9ZnVuY3Rpb24oYSxiLGMsZCxlLGcpe3RoaXMuYWJzZWxsaXBzZShhLGIsYyxjLGQsZSxnKX07VEhSRUUuUGF0aC5wcm90b3R5cGUuZWxsaXBzZT1mdW5jdGlvbihhLGIsYyxkLGUsZyxmLGgpe3ZhciBsPXRoaXMuYWN0aW9uc1t0aGlzLmFjdGlvbnMubGVuZ3RoLTFdLmFyZ3M7dGhpcy5hYnNlbGxpcHNlKGErbFtsLmxlbmd0aC0yXSxiK2xbbC5sZW5ndGgtMV0sYyxkLGUsZyxmLGgpfTtUSFJFRS5QYXRoLnByb3RvdHlwZS5hYnNlbGxpcHNlPWZ1bmN0aW9uKGEsYixjLGQsZSxnLGYsaCl7dmFyIGw9W2EsYixjLGQsZSxnLGYsaHx8MF07YT1uZXcgVEhSRUUuRWxsaXBzZUN1cnZlKGEsYixjLGQsZSxnLGYsaCk7dGhpcy5jdXJ2ZXMucHVzaChhKTthPWEuZ2V0UG9pbnQoMSk7bC5wdXNoKGEueCk7bC5wdXNoKGEueSk7dGhpcy5hY3Rpb25zLnB1c2goe2FjdGlvbjpcImVsbGlwc2VcIixhcmdzOmx9KX07XG5USFJFRS5QYXRoLnByb3RvdHlwZS5nZXRTcGFjZWRQb2ludHM9ZnVuY3Rpb24oYSxiKXthfHwoYT00MCk7Zm9yKHZhciBjPVtdLGQ9MDtkPGE7ZCsrKWMucHVzaCh0aGlzLmdldFBvaW50KGQvYSkpO3JldHVybiBjfTtcblRIUkVFLlBhdGgucHJvdG90eXBlLmdldFBvaW50cz1mdW5jdGlvbihhLGIpe2E9YXx8MTI7Zm9yKHZhciBjPVRIUkVFLlNoYXBlVXRpbHMuYjIsZD1USFJFRS5TaGFwZVV0aWxzLmIzLGU9W10sZyxmLGgsbCxrLG0scCxuLHEscyx0PTAsdj10aGlzLmFjdGlvbnMubGVuZ3RoO3Q8djt0Kyspe3E9dGhpcy5hY3Rpb25zW3RdO3ZhciB1PXEuYXJncztzd2l0Y2gocS5hY3Rpb24pe2Nhc2UgXCJtb3ZlVG9cIjplLnB1c2gobmV3IFRIUkVFLlZlY3RvcjIodVswXSx1WzFdKSk7YnJlYWs7Y2FzZSBcImxpbmVUb1wiOmUucHVzaChuZXcgVEhSRUUuVmVjdG9yMih1WzBdLHVbMV0pKTticmVhaztjYXNlIFwicXVhZHJhdGljQ3VydmVUb1wiOmc9dVsyXTtmPXVbM107az11WzBdO209dVsxXTswPGUubGVuZ3RoPyhxPWVbZS5sZW5ndGgtMV0scD1xLngsbj1xLnkpOihxPXRoaXMuYWN0aW9uc1t0LTFdLmFyZ3MscD1xW3EubGVuZ3RoLTJdLG49cVtxLmxlbmd0aC0xXSk7Zm9yKHU9MTt1PD1hO3UrKylzPXUvYSxcbnE9YyhzLHAsayxnKSxzPWMocyxuLG0sZiksZS5wdXNoKG5ldyBUSFJFRS5WZWN0b3IyKHEscykpO2JyZWFrO2Nhc2UgXCJiZXppZXJDdXJ2ZVRvXCI6Zz11WzRdO2Y9dVs1XTtrPXVbMF07bT11WzFdO2g9dVsyXTtsPXVbM107MDxlLmxlbmd0aD8ocT1lW2UubGVuZ3RoLTFdLHA9cS54LG49cS55KToocT10aGlzLmFjdGlvbnNbdC0xXS5hcmdzLHA9cVtxLmxlbmd0aC0yXSxuPXFbcS5sZW5ndGgtMV0pO2Zvcih1PTE7dTw9YTt1Kyspcz11L2EscT1kKHMscCxrLGgsZykscz1kKHMsbixtLGwsZiksZS5wdXNoKG5ldyBUSFJFRS5WZWN0b3IyKHEscykpO2JyZWFrO2Nhc2UgXCJzcGxpbmVUaHJ1XCI6cT10aGlzLmFjdGlvbnNbdC0xXS5hcmdzO3M9W25ldyBUSFJFRS5WZWN0b3IyKHFbcS5sZW5ndGgtMl0scVtxLmxlbmd0aC0xXSldO3E9YSp1WzBdLmxlbmd0aDtzPXMuY29uY2F0KHVbMF0pO3M9bmV3IFRIUkVFLlNwbGluZUN1cnZlKHMpO2Zvcih1PTE7dTw9cTt1KyspZS5wdXNoKHMuZ2V0UG9pbnRBdCh1L1xucSkpO2JyZWFrO2Nhc2UgXCJhcmNcIjpnPXVbMF07Zj11WzFdO209dVsyXTtoPXVbM107cT11WzRdO2s9ISF1WzVdO3A9cS1oO249MiphO2Zvcih1PTE7dTw9bjt1Kyspcz11L24sa3x8KHM9MS1zKSxzPWgrcypwLHE9ZyttKk1hdGguY29zKHMpLHM9ZittKk1hdGguc2luKHMpLGUucHVzaChuZXcgVEhSRUUuVmVjdG9yMihxLHMpKTticmVhaztjYXNlIFwiZWxsaXBzZVwiOmc9dVswXTtmPXVbMV07bT11WzJdO2w9dVszXTtoPXVbNF07cT11WzVdO2s9ISF1WzZdO3ZhciB3PXVbN107cD1xLWg7bj0yKmE7dmFyIEQseDswIT09dyYmKEQ9TWF0aC5jb3ModykseD1NYXRoLnNpbih3KSk7Zm9yKHU9MTt1PD1uO3UrKyl7cz11L247a3x8KHM9MS1zKTtzPWgrcypwO3E9ZyttKk1hdGguY29zKHMpO3M9ZitsKk1hdGguc2luKHMpO2lmKDAhPT13KXt2YXIgQj1xO3E9KEItZykqRC0ocy1mKSp4K2c7cz0oQi1nKSp4KyhzLWYpKkQrZn1lLnB1c2gobmV3IFRIUkVFLlZlY3RvcjIocSxzKSl9fX1jPWVbZS5sZW5ndGgtXG4xXTtNYXRoLmFicyhjLngtZVswXS54KTxOdW1iZXIuRVBTSUxPTiYmTWF0aC5hYnMoYy55LWVbMF0ueSk8TnVtYmVyLkVQU0lMT04mJmUuc3BsaWNlKGUubGVuZ3RoLTEsMSk7YiYmZS5wdXNoKGVbMF0pO3JldHVybiBlfTtcblRIUkVFLlBhdGgucHJvdG90eXBlLnRvU2hhcGVzPWZ1bmN0aW9uKGEsYil7ZnVuY3Rpb24gYyhhKXtmb3IodmFyIGI9W10sYz0wLGQ9YS5sZW5ndGg7YzxkO2MrKyl7dmFyIGU9YVtjXSxmPW5ldyBUSFJFRS5TaGFwZTtmLmFjdGlvbnM9ZS5hY3Rpb25zO2YuY3VydmVzPWUuY3VydmVzO2IucHVzaChmKX1yZXR1cm4gYn1mdW5jdGlvbiBkKGEsYil7Zm9yKHZhciBjPWIubGVuZ3RoLGQ9ITEsZT1jLTEsZj0wO2Y8YztlPWYrKyl7dmFyIGc9YltlXSxoPWJbZl0saz1oLngtZy54LGw9aC55LWcueTtpZihNYXRoLmFicyhsKT5OdW1iZXIuRVBTSUxPTil7aWYoMD5sJiYoZz1iW2ZdLGs9LWssaD1iW2VdLGw9LWwpLCEoYS55PGcueXx8YS55PmgueSkpaWYoYS55PT09Zy55KXtpZihhLng9PT1nLngpcmV0dXJuITB9ZWxzZXtlPWwqKGEueC1nLngpLWsqKGEueS1nLnkpO2lmKDA9PT1lKXJldHVybiEwOzA+ZXx8KGQ9IWQpfX1lbHNlIGlmKGEueT09PWcueSYmKGgueDw9YS54JiZhLng8PWcueHx8XG5nLng8PWEueCYmYS54PD1oLngpKXJldHVybiEwfXJldHVybiBkfXZhciBlPVRIUkVFLlNoYXBlVXRpbHMuaXNDbG9ja1dpc2UsZz1mdW5jdGlvbihhKXtmb3IodmFyIGI9W10sYz1uZXcgVEhSRUUuUGF0aCxkPTAsZT1hLmxlbmd0aDtkPGU7ZCsrKXt2YXIgZj1hW2RdLGc9Zi5hcmdzLGY9Zi5hY3Rpb247XCJtb3ZlVG9cIj09PWYmJjAhPT1jLmFjdGlvbnMubGVuZ3RoJiYoYi5wdXNoKGMpLGM9bmV3IFRIUkVFLlBhdGgpO2NbZl0uYXBwbHkoYyxnKX0wIT09Yy5hY3Rpb25zLmxlbmd0aCYmYi5wdXNoKGMpO3JldHVybiBifSh0aGlzLmFjdGlvbnMpO2lmKDA9PT1nLmxlbmd0aClyZXR1cm5bXTtpZighMD09PWIpcmV0dXJuIGMoZyk7dmFyIGYsaCxsLGs9W107aWYoMT09PWcubGVuZ3RoKXJldHVybiBoPWdbMF0sbD1uZXcgVEhSRUUuU2hhcGUsbC5hY3Rpb25zPWguYWN0aW9ucyxsLmN1cnZlcz1oLmN1cnZlcyxrLnB1c2gobCksazt2YXIgbT0hZShnWzBdLmdldFBvaW50cygpKSxtPWE/IW06XG5tO2w9W107dmFyIHA9W10sbj1bXSxxPTAscztwW3FdPXZvaWQgMDtuW3FdPVtdO2Zvcih2YXIgdD0wLHY9Zy5sZW5ndGg7dDx2O3QrKyloPWdbdF0scz1oLmdldFBvaW50cygpLGY9ZShzKSwoZj1hPyFmOmYpPyghbSYmcFtxXSYmcSsrLHBbcV09e3M6bmV3IFRIUkVFLlNoYXBlLHA6c30scFtxXS5zLmFjdGlvbnM9aC5hY3Rpb25zLHBbcV0ucy5jdXJ2ZXM9aC5jdXJ2ZXMsbSYmcSsrLG5bcV09W10pOm5bcV0ucHVzaCh7aDpoLHA6c1swXX0pO2lmKCFwWzBdKXJldHVybiBjKGcpO2lmKDE8cC5sZW5ndGgpe3Q9ITE7aD1bXTtlPTA7Zm9yKGc9cC5sZW5ndGg7ZTxnO2UrKylsW2VdPVtdO2U9MDtmb3IoZz1wLmxlbmd0aDtlPGc7ZSsrKWZvcihmPW5bZV0sbT0wO208Zi5sZW5ndGg7bSsrKXtxPWZbbV07cz0hMDtmb3Iodj0wO3Y8cC5sZW5ndGg7disrKWQocS5wLHBbdl0ucCkmJihlIT09diYmaC5wdXNoKHtmcm9tczplLHRvczp2LGhvbGU6bX0pLHM/KHM9ITEsbFt2XS5wdXNoKHEpKTpcbnQ9ITApO3MmJmxbZV0ucHVzaChxKX0wPGgubGVuZ3RoJiYodHx8KG49bCkpfXQ9MDtmb3IoZT1wLmxlbmd0aDt0PGU7dCsrKWZvcihsPXBbdF0ucyxrLnB1c2gobCksaD1uW3RdLGc9MCxmPWgubGVuZ3RoO2c8ZjtnKyspbC5ob2xlcy5wdXNoKGhbZ10uaCk7cmV0dXJuIGt9O1RIUkVFLlNoYXBlPWZ1bmN0aW9uKCl7VEhSRUUuUGF0aC5hcHBseSh0aGlzLGFyZ3VtZW50cyk7dGhpcy5ob2xlcz1bXX07VEhSRUUuU2hhcGUucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuUGF0aC5wcm90b3R5cGUpO1RIUkVFLlNoYXBlLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5TaGFwZTtUSFJFRS5TaGFwZS5wcm90b3R5cGUuZXh0cnVkZT1mdW5jdGlvbihhKXtyZXR1cm4gbmV3IFRIUkVFLkV4dHJ1ZGVHZW9tZXRyeSh0aGlzLGEpfTtUSFJFRS5TaGFwZS5wcm90b3R5cGUubWFrZUdlb21ldHJ5PWZ1bmN0aW9uKGEpe3JldHVybiBuZXcgVEhSRUUuU2hhcGVHZW9tZXRyeSh0aGlzLGEpfTtcblRIUkVFLlNoYXBlLnByb3RvdHlwZS5nZXRQb2ludHNIb2xlcz1mdW5jdGlvbihhKXtmb3IodmFyIGI9W10sYz0wLGQ9dGhpcy5ob2xlcy5sZW5ndGg7YzxkO2MrKyliW2NdPXRoaXMuaG9sZXNbY10uZ2V0UG9pbnRzKGEpO3JldHVybiBifTtUSFJFRS5TaGFwZS5wcm90b3R5cGUuZXh0cmFjdEFsbFBvaW50cz1mdW5jdGlvbihhKXtyZXR1cm57c2hhcGU6dGhpcy5nZXRQb2ludHMoYSksaG9sZXM6dGhpcy5nZXRQb2ludHNIb2xlcyhhKX19O1RIUkVFLlNoYXBlLnByb3RvdHlwZS5leHRyYWN0UG9pbnRzPWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmV4dHJhY3RBbGxQb2ludHMoYSl9O1RIUkVFLlNoYXBlLlV0aWxzPVRIUkVFLlNoYXBlVXRpbHM7VEhSRUUuTGluZUN1cnZlPWZ1bmN0aW9uKGEsYil7dGhpcy52MT1hO3RoaXMudjI9Yn07VEhSRUUuTGluZUN1cnZlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkN1cnZlLnByb3RvdHlwZSk7XG5USFJFRS5MaW5lQ3VydmUucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLkxpbmVDdXJ2ZTtUSFJFRS5MaW5lQ3VydmUucHJvdG90eXBlLmdldFBvaW50PWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMudjIuY2xvbmUoKS5zdWIodGhpcy52MSk7Yi5tdWx0aXBseVNjYWxhcihhKS5hZGQodGhpcy52MSk7cmV0dXJuIGJ9O1RIUkVFLkxpbmVDdXJ2ZS5wcm90b3R5cGUuZ2V0UG9pbnRBdD1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5nZXRQb2ludChhKX07VEhSRUUuTGluZUN1cnZlLnByb3RvdHlwZS5nZXRUYW5nZW50PWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLnYyLmNsb25lKCkuc3ViKHRoaXMudjEpLm5vcm1hbGl6ZSgpfTtUSFJFRS5RdWFkcmF0aWNCZXppZXJDdXJ2ZT1mdW5jdGlvbihhLGIsYyl7dGhpcy52MD1hO3RoaXMudjE9Yjt0aGlzLnYyPWN9O1RIUkVFLlF1YWRyYXRpY0JlemllckN1cnZlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkN1cnZlLnByb3RvdHlwZSk7XG5USFJFRS5RdWFkcmF0aWNCZXppZXJDdXJ2ZS5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuUXVhZHJhdGljQmV6aWVyQ3VydmU7VEhSRUUuUXVhZHJhdGljQmV6aWVyQ3VydmUucHJvdG90eXBlLmdldFBvaW50PWZ1bmN0aW9uKGEpe3ZhciBiPVRIUkVFLlNoYXBlVXRpbHMuYjI7cmV0dXJuIG5ldyBUSFJFRS5WZWN0b3IyKGIoYSx0aGlzLnYwLngsdGhpcy52MS54LHRoaXMudjIueCksYihhLHRoaXMudjAueSx0aGlzLnYxLnksdGhpcy52Mi55KSl9O1RIUkVFLlF1YWRyYXRpY0JlemllckN1cnZlLnByb3RvdHlwZS5nZXRUYW5nZW50PWZ1bmN0aW9uKGEpe3ZhciBiPVRIUkVFLkN1cnZlVXRpbHMudGFuZ2VudFF1YWRyYXRpY0JlemllcjtyZXR1cm4obmV3IFRIUkVFLlZlY3RvcjIoYihhLHRoaXMudjAueCx0aGlzLnYxLngsdGhpcy52Mi54KSxiKGEsdGhpcy52MC55LHRoaXMudjEueSx0aGlzLnYyLnkpKSkubm9ybWFsaXplKCl9O1xuVEhSRUUuQ3ViaWNCZXppZXJDdXJ2ZT1mdW5jdGlvbihhLGIsYyxkKXt0aGlzLnYwPWE7dGhpcy52MT1iO3RoaXMudjI9Yzt0aGlzLnYzPWR9O1RIUkVFLkN1YmljQmV6aWVyQ3VydmUucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuQ3VydmUucHJvdG90eXBlKTtUSFJFRS5DdWJpY0JlemllckN1cnZlLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5DdWJpY0JlemllckN1cnZlO1RIUkVFLkN1YmljQmV6aWVyQ3VydmUucHJvdG90eXBlLmdldFBvaW50PWZ1bmN0aW9uKGEpe3ZhciBiPVRIUkVFLlNoYXBlVXRpbHMuYjM7cmV0dXJuIG5ldyBUSFJFRS5WZWN0b3IyKGIoYSx0aGlzLnYwLngsdGhpcy52MS54LHRoaXMudjIueCx0aGlzLnYzLngpLGIoYSx0aGlzLnYwLnksdGhpcy52MS55LHRoaXMudjIueSx0aGlzLnYzLnkpKX07XG5USFJFRS5DdWJpY0JlemllckN1cnZlLnByb3RvdHlwZS5nZXRUYW5nZW50PWZ1bmN0aW9uKGEpe3ZhciBiPVRIUkVFLkN1cnZlVXRpbHMudGFuZ2VudEN1YmljQmV6aWVyO3JldHVybihuZXcgVEhSRUUuVmVjdG9yMihiKGEsdGhpcy52MC54LHRoaXMudjEueCx0aGlzLnYyLngsdGhpcy52My54KSxiKGEsdGhpcy52MC55LHRoaXMudjEueSx0aGlzLnYyLnksdGhpcy52My55KSkpLm5vcm1hbGl6ZSgpfTtUSFJFRS5TcGxpbmVDdXJ2ZT1mdW5jdGlvbihhKXt0aGlzLnBvaW50cz12b2lkIDA9PWE/W106YX07VEhSRUUuU3BsaW5lQ3VydmUucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuQ3VydmUucHJvdG90eXBlKTtUSFJFRS5TcGxpbmVDdXJ2ZS5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuU3BsaW5lQ3VydmU7XG5USFJFRS5TcGxpbmVDdXJ2ZS5wcm90b3R5cGUuZ2V0UG9pbnQ9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5wb2ludHM7YSo9Yi5sZW5ndGgtMTt2YXIgYz1NYXRoLmZsb29yKGEpO2EtPWM7dmFyIGQ9YlswPT09Yz9jOmMtMV0sZT1iW2NdLGc9YltjPmIubGVuZ3RoLTI/Yi5sZW5ndGgtMTpjKzFdLGI9YltjPmIubGVuZ3RoLTM/Yi5sZW5ndGgtMTpjKzJdLGM9VEhSRUUuQ3VydmVVdGlscy5pbnRlcnBvbGF0ZTtyZXR1cm4gbmV3IFRIUkVFLlZlY3RvcjIoYyhkLngsZS54LGcueCxiLngsYSksYyhkLnksZS55LGcueSxiLnksYSkpfTtUSFJFRS5FbGxpcHNlQ3VydmU9ZnVuY3Rpb24oYSxiLGMsZCxlLGcsZixoKXt0aGlzLmFYPWE7dGhpcy5hWT1iO3RoaXMueFJhZGl1cz1jO3RoaXMueVJhZGl1cz1kO3RoaXMuYVN0YXJ0QW5nbGU9ZTt0aGlzLmFFbmRBbmdsZT1nO3RoaXMuYUNsb2Nrd2lzZT1mO3RoaXMuYVJvdGF0aW9uPWh8fDB9O1RIUkVFLkVsbGlwc2VDdXJ2ZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5DdXJ2ZS5wcm90b3R5cGUpO1xuVEhSRUUuRWxsaXBzZUN1cnZlLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5FbGxpcHNlQ3VydmU7XG5USFJFRS5FbGxpcHNlQ3VydmUucHJvdG90eXBlLmdldFBvaW50PWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuYUVuZEFuZ2xlLXRoaXMuYVN0YXJ0QW5nbGU7MD5iJiYoYis9MipNYXRoLlBJKTtiPjIqTWF0aC5QSSYmKGItPTIqTWF0aC5QSSk7Yj0hMD09PXRoaXMuYUNsb2Nrd2lzZT90aGlzLmFFbmRBbmdsZSsoMS1hKSooMipNYXRoLlBJLWIpOnRoaXMuYVN0YXJ0QW5nbGUrYSpiO2E9dGhpcy5hWCt0aGlzLnhSYWRpdXMqTWF0aC5jb3MoYik7dmFyIGM9dGhpcy5hWSt0aGlzLnlSYWRpdXMqTWF0aC5zaW4oYik7aWYoMCE9PXRoaXMuYVJvdGF0aW9uKXt2YXIgYj1NYXRoLmNvcyh0aGlzLmFSb3RhdGlvbiksZD1NYXRoLnNpbih0aGlzLmFSb3RhdGlvbiksZT1hO2E9KGUtdGhpcy5hWCkqYi0oYy10aGlzLmFZKSpkK3RoaXMuYVg7Yz0oZS10aGlzLmFYKSpkKyhjLXRoaXMuYVkpKmIrdGhpcy5hWX1yZXR1cm4gbmV3IFRIUkVFLlZlY3RvcjIoYSxjKX07XG5USFJFRS5BcmNDdXJ2ZT1mdW5jdGlvbihhLGIsYyxkLGUsZyl7VEhSRUUuRWxsaXBzZUN1cnZlLmNhbGwodGhpcyxhLGIsYyxjLGQsZSxnKX07VEhSRUUuQXJjQ3VydmUucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuRWxsaXBzZUN1cnZlLnByb3RvdHlwZSk7VEhSRUUuQXJjQ3VydmUucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLkFyY0N1cnZlO1RIUkVFLkxpbmVDdXJ2ZTM9VEhSRUUuQ3VydmUuY3JlYXRlKGZ1bmN0aW9uKGEsYil7dGhpcy52MT1hO3RoaXMudjI9Yn0sZnVuY3Rpb24oYSl7dmFyIGI9bmV3IFRIUkVFLlZlY3RvcjM7Yi5zdWJWZWN0b3JzKHRoaXMudjIsdGhpcy52MSk7Yi5tdWx0aXBseVNjYWxhcihhKTtiLmFkZCh0aGlzLnYxKTtyZXR1cm4gYn0pO1xuVEhSRUUuUXVhZHJhdGljQmV6aWVyQ3VydmUzPVRIUkVFLkN1cnZlLmNyZWF0ZShmdW5jdGlvbihhLGIsYyl7dGhpcy52MD1hO3RoaXMudjE9Yjt0aGlzLnYyPWN9LGZ1bmN0aW9uKGEpe3ZhciBiPVRIUkVFLlNoYXBlVXRpbHMuYjI7cmV0dXJuIG5ldyBUSFJFRS5WZWN0b3IzKGIoYSx0aGlzLnYwLngsdGhpcy52MS54LHRoaXMudjIueCksYihhLHRoaXMudjAueSx0aGlzLnYxLnksdGhpcy52Mi55KSxiKGEsdGhpcy52MC56LHRoaXMudjEueix0aGlzLnYyLnopKX0pO1xuVEhSRUUuQ3ViaWNCZXppZXJDdXJ2ZTM9VEhSRUUuQ3VydmUuY3JlYXRlKGZ1bmN0aW9uKGEsYixjLGQpe3RoaXMudjA9YTt0aGlzLnYxPWI7dGhpcy52Mj1jO3RoaXMudjM9ZH0sZnVuY3Rpb24oYSl7dmFyIGI9VEhSRUUuU2hhcGVVdGlscy5iMztyZXR1cm4gbmV3IFRIUkVFLlZlY3RvcjMoYihhLHRoaXMudjAueCx0aGlzLnYxLngsdGhpcy52Mi54LHRoaXMudjMueCksYihhLHRoaXMudjAueSx0aGlzLnYxLnksdGhpcy52Mi55LHRoaXMudjMueSksYihhLHRoaXMudjAueix0aGlzLnYxLnosdGhpcy52Mi56LHRoaXMudjMueikpfSk7XG5USFJFRS5TcGxpbmVDdXJ2ZTM9VEhSRUUuQ3VydmUuY3JlYXRlKGZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLlNwbGluZUN1cnZlMyB3aWxsIGJlIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgVEhSRUUuQ2F0bXVsbFJvbUN1cnZlM1wiKTt0aGlzLnBvaW50cz12b2lkIDA9PWE/W106YX0sZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5wb2ludHM7YSo9Yi5sZW5ndGgtMTt2YXIgYz1NYXRoLmZsb29yKGEpO2EtPWM7dmFyIGQ9YlswPT1jP2M6Yy0xXSxlPWJbY10sZz1iW2M+Yi5sZW5ndGgtMj9iLmxlbmd0aC0xOmMrMV0sYj1iW2M+Yi5sZW5ndGgtMz9iLmxlbmd0aC0xOmMrMl0sYz1USFJFRS5DdXJ2ZVV0aWxzLmludGVycG9sYXRlO3JldHVybiBuZXcgVEhSRUUuVmVjdG9yMyhjKGQueCxlLngsZy54LGIueCxhKSxjKGQueSxlLnksZy55LGIueSxhKSxjKGQueixlLnosZy56LGIueixhKSl9KTtcblRIUkVFLkNhdG11bGxSb21DdXJ2ZTM9ZnVuY3Rpb24oKXtmdW5jdGlvbiBhKCl7fXZhciBiPW5ldyBUSFJFRS5WZWN0b3IzLGM9bmV3IGEsZD1uZXcgYSxlPW5ldyBhO2EucHJvdG90eXBlLmluaXQ9ZnVuY3Rpb24oYSxiLGMsZCl7dGhpcy5jMD1hO3RoaXMuYzE9Yzt0aGlzLmMyPS0zKmErMypiLTIqYy1kO3RoaXMuYzM9MiphLTIqYitjK2R9O2EucHJvdG90eXBlLmluaXROb251bmlmb3JtQ2F0bXVsbFJvbT1mdW5jdGlvbihhLGIsYyxkLGUsbSxwKXthPSgoYi1hKS9lLShjLWEpLyhlK20pKyhjLWIpL20pKm07ZD0oKGMtYikvbS0oZC1iKS8obStwKSsoZC1jKS9wKSptO3RoaXMuaW5pdChiLGMsYSxkKX07YS5wcm90b3R5cGUuaW5pdENhdG11bGxSb209ZnVuY3Rpb24oYSxiLGMsZCxlKXt0aGlzLmluaXQoYixjLGUqKGMtYSksZSooZC1iKSl9O2EucHJvdG90eXBlLmNhbGM9ZnVuY3Rpb24oYSl7dmFyIGI9YSphO3JldHVybiB0aGlzLmMwK3RoaXMuYzEqYSt0aGlzLmMyKmIrdGhpcy5jMypcbmIqYX07cmV0dXJuIFRIUkVFLkN1cnZlLmNyZWF0ZShmdW5jdGlvbihhKXt0aGlzLnBvaW50cz1hfHxbXX0sZnVuY3Rpb24oYSl7dmFyIGY9dGhpcy5wb2ludHMsaCxsO2w9Zi5sZW5ndGg7Mj5sJiZjb25zb2xlLmxvZyhcImR1aCwgeW91IG5lZWQgYXQgbGVhc3QgMiBwb2ludHNcIik7YSo9bC0xO2g9TWF0aC5mbG9vcihhKTthLT1oOzA9PT1hJiZoPT09bC0xJiYoaD1sLTIsYT0xKTt2YXIgayxtLHA7MD09PWg/KGIuc3ViVmVjdG9ycyhmWzBdLGZbMV0pLmFkZChmWzBdKSxrPWIpOms9ZltoLTFdO209ZltoXTtwPWZbaCsxXTtoKzI8bD9mPWZbaCsyXTooYi5zdWJWZWN0b3JzKGZbbC0xXSxmW2wtMl0pLmFkZChmW2wtMl0pLGY9Yik7aWYodm9pZCAwPT09dGhpcy50eXBlfHxcImNlbnRyaXBldGFsXCI9PT10aGlzLnR5cGV8fFwiY2hvcmRhbFwiPT09dGhpcy50eXBlKXt2YXIgbj1cImNob3JkYWxcIj09PXRoaXMudHlwZT8uNTouMjU7bD1NYXRoLnBvdyhrLmRpc3RhbmNlVG9TcXVhcmVkKG0pLG4pO1xuaD1NYXRoLnBvdyhtLmRpc3RhbmNlVG9TcXVhcmVkKHApLG4pO249TWF0aC5wb3cocC5kaXN0YW5jZVRvU3F1YXJlZChmKSxuKTsxRS00PmgmJihoPTEpOzFFLTQ+bCYmKGw9aCk7MUUtND5uJiYobj1oKTtjLmluaXROb251bmlmb3JtQ2F0bXVsbFJvbShrLngsbS54LHAueCxmLngsbCxoLG4pO2QuaW5pdE5vbnVuaWZvcm1DYXRtdWxsUm9tKGsueSxtLnkscC55LGYueSxsLGgsbik7ZS5pbml0Tm9udW5pZm9ybUNhdG11bGxSb20oay56LG0ueixwLnosZi56LGwsaCxuKX1lbHNlXCJjYXRtdWxscm9tXCI9PT10aGlzLnR5cGUmJihsPXZvaWQgMCE9PXRoaXMudGVuc2lvbj90aGlzLnRlbnNpb246LjUsYy5pbml0Q2F0bXVsbFJvbShrLngsbS54LHAueCxmLngsbCksZC5pbml0Q2F0bXVsbFJvbShrLnksbS55LHAueSxmLnksbCksZS5pbml0Q2F0bXVsbFJvbShrLnosbS56LHAueixmLnosbCkpO3JldHVybiBuZXcgVEhSRUUuVmVjdG9yMyhjLmNhbGMoYSksZC5jYWxjKGEpLGUuY2FsYyhhKSl9KX0oKTtcblRIUkVFLkNsb3NlZFNwbGluZUN1cnZlMz1USFJFRS5DdXJ2ZS5jcmVhdGUoZnVuY3Rpb24oYSl7dGhpcy5wb2ludHM9dm9pZCAwPT1hP1tdOmF9LGZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMucG9pbnRzO2EqPWIubGVuZ3RoLTA7dmFyIGM9TWF0aC5mbG9vcihhKTthLT1jO3ZhciBjPWMrKDA8Yz8wOihNYXRoLmZsb29yKE1hdGguYWJzKGMpL2IubGVuZ3RoKSsxKSpiLmxlbmd0aCksZD1iWyhjLTEpJWIubGVuZ3RoXSxlPWJbYyViLmxlbmd0aF0sZz1iWyhjKzEpJWIubGVuZ3RoXSxiPWJbKGMrMiklYi5sZW5ndGhdLGM9VEhSRUUuQ3VydmVVdGlscy5pbnRlcnBvbGF0ZTtyZXR1cm4gbmV3IFRIUkVFLlZlY3RvcjMoYyhkLngsZS54LGcueCxiLngsYSksYyhkLnksZS55LGcueSxiLnksYSksYyhkLnosZS56LGcueixiLnosYSkpfSk7XG5USFJFRS5Cb3hHZW9tZXRyeT1mdW5jdGlvbihhLGIsYyxkLGUsZyl7ZnVuY3Rpb24gZihhLGIsYyxkLGUsZixnLHQpe3ZhciB2LHU9aC53aWR0aFNlZ21lbnRzLHc9aC5oZWlnaHRTZWdtZW50cyxEPWUvMix4PWYvMixCPWgudmVydGljZXMubGVuZ3RoO2lmKFwieFwiPT09YSYmXCJ5XCI9PT1ifHxcInlcIj09PWEmJlwieFwiPT09Yil2PVwielwiO2Vsc2UgaWYoXCJ4XCI9PT1hJiZcInpcIj09PWJ8fFwielwiPT09YSYmXCJ4XCI9PT1iKXY9XCJ5XCIsdz1oLmRlcHRoU2VnbWVudHM7ZWxzZSBpZihcInpcIj09PWEmJlwieVwiPT09Ynx8XCJ5XCI9PT1hJiZcInpcIj09PWIpdj1cInhcIix1PWguZGVwdGhTZWdtZW50czt2YXIgeT11KzEsej13KzEsQT1lL3UsSj1mL3csRj1uZXcgVEhSRUUuVmVjdG9yMztGW3ZdPTA8Zz8xOi0xO2ZvcihlPTA7ZTx6O2UrKylmb3IoZj0wO2Y8eTtmKyspe3ZhciBDPW5ldyBUSFJFRS5WZWN0b3IzO0NbYV09KGYqQS1EKSpjO0NbYl09KGUqSi14KSpkO0Nbdl09ZztoLnZlcnRpY2VzLnB1c2goQyl9Zm9yKGU9XG4wO2U8dztlKyspZm9yKGY9MDtmPHU7ZisrKXg9Zit5KmUsYT1mK3kqKGUrMSksYj1mKzEreSooZSsxKSxjPWYrMSt5KmUsZD1uZXcgVEhSRUUuVmVjdG9yMihmL3UsMS1lL3cpLGc9bmV3IFRIUkVFLlZlY3RvcjIoZi91LDEtKGUrMSkvdyksdj1uZXcgVEhSRUUuVmVjdG9yMigoZisxKS91LDEtKGUrMSkvdyksRD1uZXcgVEhSRUUuVmVjdG9yMigoZisxKS91LDEtZS93KSx4PW5ldyBUSFJFRS5GYWNlMyh4K0IsYStCLGMrQikseC5ub3JtYWwuY29weShGKSx4LnZlcnRleE5vcm1hbHMucHVzaChGLmNsb25lKCksRi5jbG9uZSgpLEYuY2xvbmUoKSkseC5tYXRlcmlhbEluZGV4PXQsaC5mYWNlcy5wdXNoKHgpLGguZmFjZVZlcnRleFV2c1swXS5wdXNoKFtkLGcsRF0pLHg9bmV3IFRIUkVFLkZhY2UzKGErQixiK0IsYytCKSx4Lm5vcm1hbC5jb3B5KEYpLHgudmVydGV4Tm9ybWFscy5wdXNoKEYuY2xvbmUoKSxGLmNsb25lKCksRi5jbG9uZSgpKSx4Lm1hdGVyaWFsSW5kZXg9dCxoLmZhY2VzLnB1c2goeCksXG5oLmZhY2VWZXJ0ZXhVdnNbMF0ucHVzaChbZy5jbG9uZSgpLHYsRC5jbG9uZSgpXSl9VEhSRUUuR2VvbWV0cnkuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJCb3hHZW9tZXRyeVwiO3RoaXMucGFyYW1ldGVycz17d2lkdGg6YSxoZWlnaHQ6YixkZXB0aDpjLHdpZHRoU2VnbWVudHM6ZCxoZWlnaHRTZWdtZW50czplLGRlcHRoU2VnbWVudHM6Z307dGhpcy53aWR0aFNlZ21lbnRzPWR8fDE7dGhpcy5oZWlnaHRTZWdtZW50cz1lfHwxO3RoaXMuZGVwdGhTZWdtZW50cz1nfHwxO3ZhciBoPXRoaXM7ZD1hLzI7ZT1iLzI7Zz1jLzI7ZihcInpcIixcInlcIiwtMSwtMSxjLGIsZCwwKTtmKFwielwiLFwieVwiLDEsLTEsYyxiLC1kLDEpO2YoXCJ4XCIsXCJ6XCIsMSwxLGEsYyxlLDIpO2YoXCJ4XCIsXCJ6XCIsMSwtMSxhLGMsLWUsMyk7ZihcInhcIixcInlcIiwxLC0xLGEsYixnLDQpO2YoXCJ4XCIsXCJ5XCIsLTEsLTEsYSxiLC1nLDUpO3RoaXMubWVyZ2VWZXJ0aWNlcygpfTtUSFJFRS5Cb3hHZW9tZXRyeS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5HZW9tZXRyeS5wcm90b3R5cGUpO1xuVEhSRUUuQm94R2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLkJveEdlb21ldHJ5O1RIUkVFLkJveEdlb21ldHJ5LnByb3RvdHlwZS5jbG9uZT1mdW5jdGlvbigpe3ZhciBhPXRoaXMucGFyYW1ldGVycztyZXR1cm4gbmV3IFRIUkVFLkJveEdlb21ldHJ5KGEud2lkdGgsYS5oZWlnaHQsYS5kZXB0aCxhLndpZHRoU2VnbWVudHMsYS5oZWlnaHRTZWdtZW50cyxhLmRlcHRoU2VnbWVudHMpfTtUSFJFRS5DdWJlR2VvbWV0cnk9VEhSRUUuQm94R2VvbWV0cnk7VEhSRUUuQ2lyY2xlR2VvbWV0cnk9ZnVuY3Rpb24oYSxiLGMsZCl7VEhSRUUuR2VvbWV0cnkuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJDaXJjbGVHZW9tZXRyeVwiO3RoaXMucGFyYW1ldGVycz17cmFkaXVzOmEsc2VnbWVudHM6Yix0aGV0YVN0YXJ0OmMsdGhldGFMZW5ndGg6ZH07dGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkobmV3IFRIUkVFLkNpcmNsZUJ1ZmZlckdlb21ldHJ5KGEsYixjLGQpKX07XG5USFJFRS5DaXJjbGVHZW9tZXRyeS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5HZW9tZXRyeS5wcm90b3R5cGUpO1RIUkVFLkNpcmNsZUdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5DaXJjbGVHZW9tZXRyeTtUSFJFRS5DaXJjbGVHZW9tZXRyeS5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLnBhcmFtZXRlcnM7cmV0dXJuIG5ldyBUSFJFRS5DaXJjbGVHZW9tZXRyeShhLnJhZGl1cyxhLnNlZ21lbnRzLGEudGhldGFTdGFydCxhLnRoZXRhTGVuZ3RoKX07XG5USFJFRS5DaXJjbGVCdWZmZXJHZW9tZXRyeT1mdW5jdGlvbihhLGIsYyxkKXtUSFJFRS5CdWZmZXJHZW9tZXRyeS5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIkNpcmNsZUJ1ZmZlckdlb21ldHJ5XCI7dGhpcy5wYXJhbWV0ZXJzPXtyYWRpdXM6YSxzZWdtZW50czpiLHRoZXRhU3RhcnQ6Yyx0aGV0YUxlbmd0aDpkfTthPWF8fDUwO2I9dm9pZCAwIT09Yj9NYXRoLm1heCgzLGIpOjg7Yz12b2lkIDAhPT1jP2M6MDtkPXZvaWQgMCE9PWQ/ZDoyKk1hdGguUEk7dmFyIGU9YisyLGc9bmV3IEZsb2F0MzJBcnJheSgzKmUpLGY9bmV3IEZsb2F0MzJBcnJheSgzKmUpLGU9bmV3IEZsb2F0MzJBcnJheSgyKmUpO2ZbMl09MTtlWzBdPS41O2VbMV09LjU7Zm9yKHZhciBoPTAsbD0zLGs9MjtoPD1iO2grKyxsKz0zLGsrPTIpe3ZhciBtPWMraC9iKmQ7Z1tsXT1hKk1hdGguY29zKG0pO2dbbCsxXT1hKk1hdGguc2luKG0pO2ZbbCsyXT0xO2Vba109KGdbbF0vYSsxKS8yO2VbaysxXT0oZ1tsKzFdL2ErMSkvMn1jPVxuW107Zm9yKGw9MTtsPD1iO2wrKyljLnB1c2gobCxsKzEsMCk7dGhpcy5zZXRJbmRleChuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKG5ldyBVaW50MTZBcnJheShjKSwxKSk7dGhpcy5hZGRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoZywzKSk7dGhpcy5hZGRBdHRyaWJ1dGUoXCJub3JtYWxcIixuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKGYsMykpO3RoaXMuYWRkQXR0cmlidXRlKFwidXZcIixuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKGUsMikpO3RoaXMuYm91bmRpbmdTcGhlcmU9bmV3IFRIUkVFLlNwaGVyZShuZXcgVEhSRUUuVmVjdG9yMyxhKX07VEhSRUUuQ2lyY2xlQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlKTtUSFJFRS5DaXJjbGVCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuQ2lyY2xlQnVmZmVyR2VvbWV0cnk7XG5USFJFRS5DaXJjbGVCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLnBhcmFtZXRlcnM7cmV0dXJuIG5ldyBUSFJFRS5DaXJjbGVCdWZmZXJHZW9tZXRyeShhLnJhZGl1cyxhLnNlZ21lbnRzLGEudGhldGFTdGFydCxhLnRoZXRhTGVuZ3RoKX07XG5USFJFRS5DeWxpbmRlckdlb21ldHJ5PWZ1bmN0aW9uKGEsYixjLGQsZSxnLGYsaCl7VEhSRUUuR2VvbWV0cnkuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJDeWxpbmRlckdlb21ldHJ5XCI7dGhpcy5wYXJhbWV0ZXJzPXtyYWRpdXNUb3A6YSxyYWRpdXNCb3R0b206YixoZWlnaHQ6YyxyYWRpYWxTZWdtZW50czpkLGhlaWdodFNlZ21lbnRzOmUsb3BlbkVuZGVkOmcsdGhldGFTdGFydDpmLHRoZXRhTGVuZ3RoOmh9O2E9dm9pZCAwIT09YT9hOjIwO2I9dm9pZCAwIT09Yj9iOjIwO2M9dm9pZCAwIT09Yz9jOjEwMDtkPWR8fDg7ZT1lfHwxO2c9dm9pZCAwIT09Zz9nOiExO2Y9dm9pZCAwIT09Zj9mOjA7aD12b2lkIDAhPT1oP2g6MipNYXRoLlBJO3ZhciBsPWMvMixrLG0scD1bXSxuPVtdO2ZvcihtPTA7bTw9ZTttKyspe3ZhciBxPVtdLHM9W10sdD1tL2Usdj10KihiLWEpK2E7Zm9yKGs9MDtrPD1kO2srKyl7dmFyIHU9ay9kLHc9bmV3IFRIUkVFLlZlY3RvcjM7dy54PXYqTWF0aC5zaW4odSpoK1xuZik7dy55PS10KmMrbDt3Lno9dipNYXRoLmNvcyh1KmgrZik7dGhpcy52ZXJ0aWNlcy5wdXNoKHcpO3EucHVzaCh0aGlzLnZlcnRpY2VzLmxlbmd0aC0xKTtzLnB1c2gobmV3IFRIUkVFLlZlY3RvcjIodSwxLXQpKX1wLnB1c2gocSk7bi5wdXNoKHMpfWM9KGItYSkvYztmb3Ioaz0wO2s8ZDtrKyspZm9yKDAhPT1hPyhmPXRoaXMudmVydGljZXNbcFswXVtrXV0uY2xvbmUoKSxoPXRoaXMudmVydGljZXNbcFswXVtrKzFdXS5jbG9uZSgpKTooZj10aGlzLnZlcnRpY2VzW3BbMV1ba11dLmNsb25lKCksaD10aGlzLnZlcnRpY2VzW3BbMV1baysxXV0uY2xvbmUoKSksZi5zZXRZKE1hdGguc3FydChmLngqZi54K2YueipmLnopKmMpLm5vcm1hbGl6ZSgpLGguc2V0WShNYXRoLnNxcnQoaC54KmgueCtoLnoqaC56KSpjKS5ub3JtYWxpemUoKSxtPTA7bTxlO20rKyl7dmFyIHE9cFttXVtrXSxzPXBbbSsxXVtrXSx0PXBbbSsxXVtrKzFdLHY9cFttXVtrKzFdLHU9Zi5jbG9uZSgpLHc9Zi5jbG9uZSgpLFxuRD1oLmNsb25lKCkseD1oLmNsb25lKCksQj1uW21dW2tdLmNsb25lKCkseT1uW20rMV1ba10uY2xvbmUoKSx6PW5bbSsxXVtrKzFdLmNsb25lKCksQT1uW21dW2srMV0uY2xvbmUoKTt0aGlzLmZhY2VzLnB1c2gobmV3IFRIUkVFLkZhY2UzKHEscyx2LFt1LHcseF0pKTt0aGlzLmZhY2VWZXJ0ZXhVdnNbMF0ucHVzaChbQix5LEFdKTt0aGlzLmZhY2VzLnB1c2gobmV3IFRIUkVFLkZhY2UzKHMsdCx2LFt3LmNsb25lKCksRCx4LmNsb25lKCldKSk7dGhpcy5mYWNlVmVydGV4VXZzWzBdLnB1c2goW3kuY2xvbmUoKSx6LEEuY2xvbmUoKV0pfWlmKCExPT09ZyYmMDxhKWZvcih0aGlzLnZlcnRpY2VzLnB1c2gobmV3IFRIUkVFLlZlY3RvcjMoMCxsLDApKSxrPTA7azxkO2srKylxPXBbMF1ba10scz1wWzBdW2srMV0sdD10aGlzLnZlcnRpY2VzLmxlbmd0aC0xLHU9bmV3IFRIUkVFLlZlY3RvcjMoMCwxLDApLHc9bmV3IFRIUkVFLlZlY3RvcjMoMCwxLDApLEQ9bmV3IFRIUkVFLlZlY3RvcjMoMCxcbjEsMCksQj1uWzBdW2tdLmNsb25lKCkseT1uWzBdW2srMV0uY2xvbmUoKSx6PW5ldyBUSFJFRS5WZWN0b3IyKHkueCwwKSx0aGlzLmZhY2VzLnB1c2gobmV3IFRIUkVFLkZhY2UzKHEscyx0LFt1LHcsRF0sdm9pZCAwLDEpKSx0aGlzLmZhY2VWZXJ0ZXhVdnNbMF0ucHVzaChbQix5LHpdKTtpZighMT09PWcmJjA8Yilmb3IodGhpcy52ZXJ0aWNlcy5wdXNoKG5ldyBUSFJFRS5WZWN0b3IzKDAsLWwsMCkpLGs9MDtrPGQ7aysrKXE9cFtlXVtrKzFdLHM9cFtlXVtrXSx0PXRoaXMudmVydGljZXMubGVuZ3RoLTEsdT1uZXcgVEhSRUUuVmVjdG9yMygwLC0xLDApLHc9bmV3IFRIUkVFLlZlY3RvcjMoMCwtMSwwKSxEPW5ldyBUSFJFRS5WZWN0b3IzKDAsLTEsMCksQj1uW2VdW2srMV0uY2xvbmUoKSx5PW5bZV1ba10uY2xvbmUoKSx6PW5ldyBUSFJFRS5WZWN0b3IyKHkueCwxKSx0aGlzLmZhY2VzLnB1c2gobmV3IFRIUkVFLkZhY2UzKHEscyx0LFt1LHcsRF0sdm9pZCAwLDIpKSx0aGlzLmZhY2VWZXJ0ZXhVdnNbMF0ucHVzaChbQixcbnksel0pO3RoaXMuY29tcHV0ZUZhY2VOb3JtYWxzKCl9O1RIUkVFLkN5bGluZGVyR2VvbWV0cnkucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuR2VvbWV0cnkucHJvdG90eXBlKTtUSFJFRS5DeWxpbmRlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5DeWxpbmRlckdlb21ldHJ5O1RIUkVFLkN5bGluZGVyR2VvbWV0cnkucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5wYXJhbWV0ZXJzO3JldHVybiBuZXcgVEhSRUUuQ3lsaW5kZXJHZW9tZXRyeShhLnJhZGl1c1RvcCxhLnJhZGl1c0JvdHRvbSxhLmhlaWdodCxhLnJhZGlhbFNlZ21lbnRzLGEuaGVpZ2h0U2VnbWVudHMsYS5vcGVuRW5kZWQsYS50aGV0YVN0YXJ0LGEudGhldGFMZW5ndGgpfTtcblRIUkVFLkVkZ2VzR2VvbWV0cnk9ZnVuY3Rpb24oYSxiKXtmdW5jdGlvbiBjKGEsYil7cmV0dXJuIGEtYn1USFJFRS5CdWZmZXJHZW9tZXRyeS5jYWxsKHRoaXMpO3ZhciBkPU1hdGguY29zKFRIUkVFLk1hdGguZGVnVG9SYWQodm9pZCAwIT09Yj9iOjEpKSxlPVswLDBdLGc9e30sZj1bXCJhXCIsXCJiXCIsXCJjXCJdLGg7YSBpbnN0YW5jZW9mIFRIUkVFLkJ1ZmZlckdlb21ldHJ5PyhoPW5ldyBUSFJFRS5HZW9tZXRyeSxoLmZyb21CdWZmZXJHZW9tZXRyeShhKSk6aD1hLmNsb25lKCk7aC5tZXJnZVZlcnRpY2VzKCk7aC5jb21wdXRlRmFjZU5vcm1hbHMoKTt2YXIgbD1oLnZlcnRpY2VzO2g9aC5mYWNlcztmb3IodmFyIGs9MCxtPWgubGVuZ3RoO2s8bTtrKyspZm9yKHZhciBwPWhba10sbj0wOzM+bjtuKyspe2VbMF09cFtmW25dXTtlWzFdPXBbZlsobisxKSUzXV07ZS5zb3J0KGMpO3ZhciBxPWUudG9TdHJpbmcoKTt2b2lkIDA9PT1nW3FdP2dbcV09e3ZlcnQxOmVbMF0sdmVydDI6ZVsxXSxmYWNlMTprLFxuZmFjZTI6dm9pZCAwfTpnW3FdLmZhY2UyPWt9ZT1bXTtmb3IocSBpbiBnKWlmKGY9Z1txXSx2b2lkIDA9PT1mLmZhY2UyfHxoW2YuZmFjZTFdLm5vcm1hbC5kb3QoaFtmLmZhY2UyXS5ub3JtYWwpPD1kKWs9bFtmLnZlcnQxXSxlLnB1c2goay54KSxlLnB1c2goay55KSxlLnB1c2goay56KSxrPWxbZi52ZXJ0Ml0sZS5wdXNoKGsueCksZS5wdXNoKGsueSksZS5wdXNoKGsueik7dGhpcy5hZGRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUobmV3IEZsb2F0MzJBcnJheShlKSwzKSl9O1RIUkVFLkVkZ2VzR2VvbWV0cnkucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlKTtUSFJFRS5FZGdlc0dlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5FZGdlc0dlb21ldHJ5O1xuVEhSRUUuRXh0cnVkZUdlb21ldHJ5PWZ1bmN0aW9uKGEsYil7XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBhJiYoVEhSRUUuR2VvbWV0cnkuY2FsbCh0aGlzKSx0aGlzLnR5cGU9XCJFeHRydWRlR2VvbWV0cnlcIixhPUFycmF5LmlzQXJyYXkoYSk/YTpbYV0sdGhpcy5hZGRTaGFwZUxpc3QoYSxiKSx0aGlzLmNvbXB1dGVGYWNlTm9ybWFscygpKX07VEhSRUUuRXh0cnVkZUdlb21ldHJ5LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkdlb21ldHJ5LnByb3RvdHlwZSk7VEhSRUUuRXh0cnVkZUdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5FeHRydWRlR2VvbWV0cnk7VEhSRUUuRXh0cnVkZUdlb21ldHJ5LnByb3RvdHlwZS5hZGRTaGFwZUxpc3Q9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9YS5sZW5ndGgsZD0wO2Q8YztkKyspdGhpcy5hZGRTaGFwZShhW2RdLGIpfTtcblRIUkVFLkV4dHJ1ZGVHZW9tZXRyeS5wcm90b3R5cGUuYWRkU2hhcGU9ZnVuY3Rpb24oYSxiKXtmdW5jdGlvbiBjKGEsYixjKXtifHxjb25zb2xlLmVycm9yKFwiVEhSRUUuRXh0cnVkZUdlb21ldHJ5OiB2ZWMgZG9lcyBub3QgZXhpc3RcIik7cmV0dXJuIGIuY2xvbmUoKS5tdWx0aXBseVNjYWxhcihjKS5hZGQoYSl9ZnVuY3Rpb24gZChhLGIsYyl7dmFyIGQ9MSxkPWEueC1iLngsZT1hLnktYi55LGY9Yy54LWEueCxnPWMueS1hLnksaD1kKmQrZSplO2lmKE1hdGguYWJzKGQqZy1lKmYpPk51bWJlci5FUFNJTE9OKXt2YXIgaz1NYXRoLnNxcnQoaCksbD1NYXRoLnNxcnQoZipmK2cqZyksaD1iLngtZS9rO2I9Yi55K2QvaztmPSgoYy54LWcvbC1oKSpnLShjLnkrZi9sLWIpKmYpLyhkKmctZSpmKTtjPWgrZCpmLWEueDthPWIrZSpmLWEueTtkPWMqYythKmE7aWYoMj49ZClyZXR1cm4gbmV3IFRIUkVFLlZlY3RvcjIoYyxhKTtkPU1hdGguc3FydChkLzIpfWVsc2UgYT0hMSxkPk51bWJlci5FUFNJTE9OP1xuZj5OdW1iZXIuRVBTSUxPTiYmKGE9ITApOmQ8LU51bWJlci5FUFNJTE9OP2Y8LU51bWJlci5FUFNJTE9OJiYoYT0hMCk6TWF0aC5zaWduKGUpPT09TWF0aC5zaWduKGcpJiYoYT0hMCksYT8oYz0tZSxhPWQsZD1NYXRoLnNxcnQoaCkpOihjPWQsYT1lLGQ9TWF0aC5zcXJ0KGgvMikpO3JldHVybiBuZXcgVEhSRUUuVmVjdG9yMihjL2QsYS9kKX1mdW5jdGlvbiBlKGEsYil7dmFyIGMsZDtmb3IoRz1hLmxlbmd0aDswPD0tLUc7KXtjPUc7ZD1HLTE7MD5kJiYoZD1hLmxlbmd0aC0xKTtmb3IodmFyIGU9MCxmPXErMiptLGU9MDtlPGY7ZSsrKXt2YXIgZz1UKmUsaD1UKihlKzEpLGs9YitjK2csZz1iK2QrZyxsPWIrZCtoLGg9YitjK2gsaz1rK0YsZz1nK0YsbD1sK0YsaD1oK0Y7Si5mYWNlcy5wdXNoKG5ldyBUSFJFRS5GYWNlMyhrLGcsaCxudWxsLG51bGwsMSkpO0ouZmFjZXMucHVzaChuZXcgVEhSRUUuRmFjZTMoZyxsLGgsbnVsbCxudWxsLDEpKTtrPXUuZ2VuZXJhdGVTaWRlV2FsbFVWKEosXG5rLGcsbCxoKTtKLmZhY2VWZXJ0ZXhVdnNbMF0ucHVzaChba1swXSxrWzFdLGtbM11dKTtKLmZhY2VWZXJ0ZXhVdnNbMF0ucHVzaChba1sxXSxrWzJdLGtbM11dKX19fWZ1bmN0aW9uIGcoYSxiLGMpe0oudmVydGljZXMucHVzaChuZXcgVEhSRUUuVmVjdG9yMyhhLGIsYykpfWZ1bmN0aW9uIGYoYSxiLGMpe2ErPUY7Yis9RjtjKz1GO0ouZmFjZXMucHVzaChuZXcgVEhSRUUuRmFjZTMoYSxiLGMsbnVsbCxudWxsLDApKTthPXUuZ2VuZXJhdGVUb3BVVihKLGEsYixjKTtKLmZhY2VWZXJ0ZXhVdnNbMF0ucHVzaChhKX12YXIgaD12b2lkIDAhPT1iLmFtb3VudD9iLmFtb3VudDoxMDAsbD12b2lkIDAhPT1iLmJldmVsVGhpY2tuZXNzP2IuYmV2ZWxUaGlja25lc3M6NixrPXZvaWQgMCE9PWIuYmV2ZWxTaXplP2IuYmV2ZWxTaXplOmwtMixtPXZvaWQgMCE9PWIuYmV2ZWxTZWdtZW50cz9iLmJldmVsU2VnbWVudHM6MyxwPXZvaWQgMCE9PWIuYmV2ZWxFbmFibGVkP2IuYmV2ZWxFbmFibGVkOiEwLFxubj12b2lkIDAhPT1iLmN1cnZlU2VnbWVudHM/Yi5jdXJ2ZVNlZ21lbnRzOjEyLHE9dm9pZCAwIT09Yi5zdGVwcz9iLnN0ZXBzOjEscz1iLmV4dHJ1ZGVQYXRoLHQsdj0hMSx1PXZvaWQgMCE9PWIuVVZHZW5lcmF0b3I/Yi5VVkdlbmVyYXRvcjpUSFJFRS5FeHRydWRlR2VvbWV0cnkuV29ybGRVVkdlbmVyYXRvcix3LEQseCxCO3MmJih0PXMuZ2V0U3BhY2VkUG9pbnRzKHEpLHY9ITAscD0hMSx3PXZvaWQgMCE9PWIuZnJhbWVzP2IuZnJhbWVzOm5ldyBUSFJFRS5UdWJlR2VvbWV0cnkuRnJlbmV0RnJhbWVzKHMscSwhMSksRD1uZXcgVEhSRUUuVmVjdG9yMyx4PW5ldyBUSFJFRS5WZWN0b3IzLEI9bmV3IFRIUkVFLlZlY3RvcjMpO3B8fChrPWw9bT0wKTt2YXIgeSx6LEEsSj10aGlzLEY9dGhpcy52ZXJ0aWNlcy5sZW5ndGgscz1hLmV4dHJhY3RQb2ludHMobiksbj1zLnNoYXBlLEM9cy5ob2xlcztpZihzPSFUSFJFRS5TaGFwZVV0aWxzLmlzQ2xvY2tXaXNlKG4pKXtuPW4ucmV2ZXJzZSgpO1xuej0wO2ZvcihBPUMubGVuZ3RoO3o8QTt6KyspeT1DW3pdLFRIUkVFLlNoYXBlVXRpbHMuaXNDbG9ja1dpc2UoeSkmJihDW3pdPXkucmV2ZXJzZSgpKTtzPSExfXZhciBOPVRIUkVFLlNoYXBlVXRpbHMudHJpYW5ndWxhdGVTaGFwZShuLEMpLEw9bjt6PTA7Zm9yKEE9Qy5sZW5ndGg7ejxBO3orKyl5PUNbel0sbj1uLmNvbmNhdCh5KTt2YXIgUSxNLEssRSxPLFQ9bi5sZW5ndGgsSCxSPU4ubGVuZ3RoLHM9W10sRz0wO0s9TC5sZW5ndGg7UT1LLTE7Zm9yKE09RysxO0c8SztHKyssUSsrLE0rKylRPT09SyYmKFE9MCksTT09PUsmJihNPTApLHNbR109ZChMW0ddLExbUV0sTFtNXSk7dmFyIGlhPVtdLFUsWD1zLmNvbmNhdCgpO3o9MDtmb3IoQT1DLmxlbmd0aDt6PEE7eisrKXt5PUNbel07VT1bXTtHPTA7Sz15Lmxlbmd0aDtRPUstMTtmb3IoTT1HKzE7RzxLO0crKyxRKyssTSsrKVE9PT1LJiYoUT0wKSxNPT09SyYmKE09MCksVVtHXT1kKHlbR10seVtRXSx5W01dKTtpYS5wdXNoKFUpO1g9XG5YLmNvbmNhdChVKX1mb3IoUT0wO1E8bTtRKyspe0s9US9tO0U9bCooMS1LKTtNPWsqTWF0aC5zaW4oSypNYXRoLlBJLzIpO0c9MDtmb3IoSz1MLmxlbmd0aDtHPEs7RysrKU89YyhMW0ddLHNbR10sTSksZyhPLngsTy55LC1FKTt6PTA7Zm9yKEE9Qy5sZW5ndGg7ejxBO3orKylmb3IoeT1DW3pdLFU9aWFbel0sRz0wLEs9eS5sZW5ndGg7RzxLO0crKylPPWMoeVtHXSxVW0ddLE0pLGcoTy54LE8ueSwtRSl9TT1rO2ZvcihHPTA7RzxUO0crKylPPXA/YyhuW0ddLFhbR10sTSk6bltHXSx2Pyh4LmNvcHkody5ub3JtYWxzWzBdKS5tdWx0aXBseVNjYWxhcihPLngpLEQuY29weSh3LmJpbm9ybWFsc1swXSkubXVsdGlwbHlTY2FsYXIoTy55KSxCLmNvcHkodFswXSkuYWRkKHgpLmFkZChEKSxnKEIueCxCLnksQi56KSk6ZyhPLngsTy55LDApO2ZvcihLPTE7Szw9cTtLKyspZm9yKEc9MDtHPFQ7RysrKU89cD9jKG5bR10sWFtHXSxNKTpuW0ddLHY/KHguY29weSh3Lm5vcm1hbHNbS10pLm11bHRpcGx5U2NhbGFyKE8ueCksXG5ELmNvcHkody5iaW5vcm1hbHNbS10pLm11bHRpcGx5U2NhbGFyKE8ueSksQi5jb3B5KHRbS10pLmFkZCh4KS5hZGQoRCksZyhCLngsQi55LEIueikpOmcoTy54LE8ueSxoL3EqSyk7Zm9yKFE9bS0xOzA8PVE7US0tKXtLPVEvbTtFPWwqKDEtSyk7TT1rKk1hdGguc2luKEsqTWF0aC5QSS8yKTtHPTA7Zm9yKEs9TC5sZW5ndGg7RzxLO0crKylPPWMoTFtHXSxzW0ddLE0pLGcoTy54LE8ueSxoK0UpO3o9MDtmb3IoQT1DLmxlbmd0aDt6PEE7eisrKWZvcih5PUNbel0sVT1pYVt6XSxHPTAsSz15Lmxlbmd0aDtHPEs7RysrKU89Yyh5W0ddLFVbR10sTSksdj9nKE8ueCxPLnkrdFtxLTFdLnksdFtxLTFdLngrRSk6ZyhPLngsTy55LGgrRSl9KGZ1bmN0aW9uKCl7aWYocCl7dmFyIGE7YT0wKlQ7Zm9yKEc9MDtHPFI7RysrKUg9TltHXSxmKEhbMl0rYSxIWzFdK2EsSFswXSthKTthPXErMiptO2EqPVQ7Zm9yKEc9MDtHPFI7RysrKUg9TltHXSxmKEhbMF0rYSxIWzFdK2EsSFsyXSthKX1lbHNle2ZvcihHPVxuMDtHPFI7RysrKUg9TltHXSxmKEhbMl0sSFsxXSxIWzBdKTtmb3IoRz0wO0c8UjtHKyspSD1OW0ddLGYoSFswXStUKnEsSFsxXStUKnEsSFsyXStUKnEpfX0pKCk7KGZ1bmN0aW9uKCl7dmFyIGE9MDtlKEwsYSk7YSs9TC5sZW5ndGg7ej0wO2ZvcihBPUMubGVuZ3RoO3o8QTt6KyspeT1DW3pdLGUoeSxhKSxhKz15Lmxlbmd0aH0pKCl9O1xuVEhSRUUuRXh0cnVkZUdlb21ldHJ5LldvcmxkVVZHZW5lcmF0b3I9e2dlbmVyYXRlVG9wVVY6ZnVuY3Rpb24oYSxiLGMsZCl7YT1hLnZlcnRpY2VzO2I9YVtiXTtjPWFbY107ZD1hW2RdO3JldHVybltuZXcgVEhSRUUuVmVjdG9yMihiLngsYi55KSxuZXcgVEhSRUUuVmVjdG9yMihjLngsYy55KSxuZXcgVEhSRUUuVmVjdG9yMihkLngsZC55KV19LGdlbmVyYXRlU2lkZVdhbGxVVjpmdW5jdGlvbihhLGIsYyxkLGUpe2E9YS52ZXJ0aWNlcztiPWFbYl07Yz1hW2NdO2Q9YVtkXTtlPWFbZV07cmV0dXJuLjAxPk1hdGguYWJzKGIueS1jLnkpP1tuZXcgVEhSRUUuVmVjdG9yMihiLngsMS1iLnopLG5ldyBUSFJFRS5WZWN0b3IyKGMueCwxLWMueiksbmV3IFRIUkVFLlZlY3RvcjIoZC54LDEtZC56KSxuZXcgVEhSRUUuVmVjdG9yMihlLngsMS1lLnopXTpbbmV3IFRIUkVFLlZlY3RvcjIoYi55LDEtYi56KSxuZXcgVEhSRUUuVmVjdG9yMihjLnksMS1jLnopLG5ldyBUSFJFRS5WZWN0b3IyKGQueSxcbjEtZC56KSxuZXcgVEhSRUUuVmVjdG9yMihlLnksMS1lLnopXX19O1RIUkVFLlNoYXBlR2VvbWV0cnk9ZnVuY3Rpb24oYSxiKXtUSFJFRS5HZW9tZXRyeS5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIlNoYXBlR2VvbWV0cnlcIjshMT09PUFycmF5LmlzQXJyYXkoYSkmJihhPVthXSk7dGhpcy5hZGRTaGFwZUxpc3QoYSxiKTt0aGlzLmNvbXB1dGVGYWNlTm9ybWFscygpfTtUSFJFRS5TaGFwZUdlb21ldHJ5LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkdlb21ldHJ5LnByb3RvdHlwZSk7VEhSRUUuU2hhcGVHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuU2hhcGVHZW9tZXRyeTtUSFJFRS5TaGFwZUdlb21ldHJ5LnByb3RvdHlwZS5hZGRTaGFwZUxpc3Q9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9MCxkPWEubGVuZ3RoO2M8ZDtjKyspdGhpcy5hZGRTaGFwZShhW2NdLGIpO3JldHVybiB0aGlzfTtcblRIUkVFLlNoYXBlR2VvbWV0cnkucHJvdG90eXBlLmFkZFNoYXBlPWZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9e30pO3ZhciBjPWIubWF0ZXJpYWwsZD12b2lkIDA9PT1iLlVWR2VuZXJhdG9yP1RIUkVFLkV4dHJ1ZGVHZW9tZXRyeS5Xb3JsZFVWR2VuZXJhdG9yOmIuVVZHZW5lcmF0b3IsZSxnLGYsaD10aGlzLnZlcnRpY2VzLmxlbmd0aDtlPWEuZXh0cmFjdFBvaW50cyh2b2lkIDAhPT1iLmN1cnZlU2VnbWVudHM/Yi5jdXJ2ZVNlZ21lbnRzOjEyKTt2YXIgbD1lLnNoYXBlLGs9ZS5ob2xlcztpZighVEhSRUUuU2hhcGVVdGlscy5pc0Nsb2NrV2lzZShsKSlmb3IobD1sLnJldmVyc2UoKSxlPTAsZz1rLmxlbmd0aDtlPGc7ZSsrKWY9a1tlXSxUSFJFRS5TaGFwZVV0aWxzLmlzQ2xvY2tXaXNlKGYpJiYoa1tlXT1mLnJldmVyc2UoKSk7dmFyIG09VEhSRUUuU2hhcGVVdGlscy50cmlhbmd1bGF0ZVNoYXBlKGwsayk7ZT0wO2ZvcihnPWsubGVuZ3RoO2U8ZztlKyspZj1rW2VdLGw9bC5jb25jYXQoZik7XG5rPWwubGVuZ3RoO2c9bS5sZW5ndGg7Zm9yKGU9MDtlPGs7ZSsrKWY9bFtlXSx0aGlzLnZlcnRpY2VzLnB1c2gobmV3IFRIUkVFLlZlY3RvcjMoZi54LGYueSwwKSk7Zm9yKGU9MDtlPGc7ZSsrKWs9bVtlXSxsPWtbMF0raCxmPWtbMV0raCxrPWtbMl0raCx0aGlzLmZhY2VzLnB1c2gobmV3IFRIUkVFLkZhY2UzKGwsZixrLG51bGwsbnVsbCxjKSksdGhpcy5mYWNlVmVydGV4VXZzWzBdLnB1c2goZC5nZW5lcmF0ZVRvcFVWKHRoaXMsbCxmLGspKX07XG5USFJFRS5MYXRoZUdlb21ldHJ5PWZ1bmN0aW9uKGEsYixjLGQpe1RIUkVFLkdlb21ldHJ5LmNhbGwodGhpcyk7dGhpcy50eXBlPVwiTGF0aGVHZW9tZXRyeVwiO3RoaXMucGFyYW1ldGVycz17cG9pbnRzOmEsc2VnbWVudHM6YixwaGlTdGFydDpjLHBoaUxlbmd0aDpkfTtiPWJ8fDEyO2M9Y3x8MDtkPWR8fDIqTWF0aC5QSTtmb3IodmFyIGU9MS8oYS5sZW5ndGgtMSksZz0xL2IsZj0wLGg9YjtmPD1oO2YrKylmb3IodmFyIGw9YytmKmcqZCxrPU1hdGguY29zKGwpLG09TWF0aC5zaW4obCksbD0wLHA9YS5sZW5ndGg7bDxwO2wrKyl7dmFyIG49YVtsXSxxPW5ldyBUSFJFRS5WZWN0b3IzO3EueD1rKm4ueC1tKm4ueTtxLnk9bSpuLngraypuLnk7cS56PW4uejt0aGlzLnZlcnRpY2VzLnB1c2gocSl9Yz1hLmxlbmd0aDtmPTA7Zm9yKGg9YjtmPGg7ZisrKWZvcihsPTAscD1hLmxlbmd0aC0xO2w8cDtsKyspe2I9bT1sK2MqZjtkPW0rYzt2YXIgaz1tKzErYyxtPW0rMSxuPWYqZyxxPWwqZSxzPVxubitnLHQ9cStlO3RoaXMuZmFjZXMucHVzaChuZXcgVEhSRUUuRmFjZTMoYixkLG0pKTt0aGlzLmZhY2VWZXJ0ZXhVdnNbMF0ucHVzaChbbmV3IFRIUkVFLlZlY3RvcjIobixxKSxuZXcgVEhSRUUuVmVjdG9yMihzLHEpLG5ldyBUSFJFRS5WZWN0b3IyKG4sdCldKTt0aGlzLmZhY2VzLnB1c2gobmV3IFRIUkVFLkZhY2UzKGQsayxtKSk7dGhpcy5mYWNlVmVydGV4VXZzWzBdLnB1c2goW25ldyBUSFJFRS5WZWN0b3IyKHMscSksbmV3IFRIUkVFLlZlY3RvcjIocyx0KSxuZXcgVEhSRUUuVmVjdG9yMihuLHQpXSl9dGhpcy5tZXJnZVZlcnRpY2VzKCk7dGhpcy5jb21wdXRlRmFjZU5vcm1hbHMoKTt0aGlzLmNvbXB1dGVWZXJ0ZXhOb3JtYWxzKCl9O1RIUkVFLkxhdGhlR2VvbWV0cnkucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuR2VvbWV0cnkucHJvdG90eXBlKTtUSFJFRS5MYXRoZUdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5MYXRoZUdlb21ldHJ5O1xuVEhSRUUuUGxhbmVHZW9tZXRyeT1mdW5jdGlvbihhLGIsYyxkKXtUSFJFRS5HZW9tZXRyeS5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIlBsYW5lR2VvbWV0cnlcIjt0aGlzLnBhcmFtZXRlcnM9e3dpZHRoOmEsaGVpZ2h0OmIsd2lkdGhTZWdtZW50czpjLGhlaWdodFNlZ21lbnRzOmR9O3RoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KG5ldyBUSFJFRS5QbGFuZUJ1ZmZlckdlb21ldHJ5KGEsYixjLGQpKX07VEhSRUUuUGxhbmVHZW9tZXRyeS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5HZW9tZXRyeS5wcm90b3R5cGUpO1RIUkVFLlBsYW5lR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLlBsYW5lR2VvbWV0cnk7VEhSRUUuUGxhbmVHZW9tZXRyeS5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLnBhcmFtZXRlcnM7cmV0dXJuIG5ldyBUSFJFRS5QbGFuZUdlb21ldHJ5KGEud2lkdGgsYS5oZWlnaHQsYS53aWR0aFNlZ21lbnRzLGEuaGVpZ2h0U2VnbWVudHMpfTtcblRIUkVFLlBsYW5lQnVmZmVyR2VvbWV0cnk9ZnVuY3Rpb24oYSxiLGMsZCl7VEhSRUUuQnVmZmVyR2VvbWV0cnkuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJQbGFuZUJ1ZmZlckdlb21ldHJ5XCI7dGhpcy5wYXJhbWV0ZXJzPXt3aWR0aDphLGhlaWdodDpiLHdpZHRoU2VnbWVudHM6YyxoZWlnaHRTZWdtZW50czpkfTt2YXIgZT1hLzIsZz1iLzI7Yz1NYXRoLmZsb29yKGMpfHwxO2Q9TWF0aC5mbG9vcihkKXx8MTt2YXIgZj1jKzEsaD1kKzEsbD1hL2Msaz1iL2Q7Yj1uZXcgRmxvYXQzMkFycmF5KGYqaCozKTthPW5ldyBGbG9hdDMyQXJyYXkoZipoKjMpO2Zvcih2YXIgbT1uZXcgRmxvYXQzMkFycmF5KGYqaCoyKSxwPTAsbj0wLHE9MDtxPGg7cSsrKWZvcih2YXIgcz1xKmstZyx0PTA7dDxmO3QrKyliW3BdPXQqbC1lLGJbcCsxXT0tcyxhW3ArMl09MSxtW25dPXQvYyxtW24rMV09MS1xL2QscCs9MyxuKz0yO3A9MDtlPW5ldyAoNjU1MzU8Yi5sZW5ndGgvMz9VaW50MzJBcnJheTpVaW50MTZBcnJheSkoYypcbmQqNik7Zm9yKHE9MDtxPGQ7cSsrKWZvcih0PTA7dDxjO3QrKylnPXQrZioocSsxKSxoPXQrMStmKihxKzEpLGw9dCsxK2YqcSxlW3BdPXQrZipxLGVbcCsxXT1nLGVbcCsyXT1sLGVbcCszXT1nLGVbcCs0XT1oLGVbcCs1XT1sLHArPTY7dGhpcy5zZXRJbmRleChuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKGUsMSkpO3RoaXMuYWRkQXR0cmlidXRlKFwicG9zaXRpb25cIixuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKGIsMykpO3RoaXMuYWRkQXR0cmlidXRlKFwibm9ybWFsXCIsbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShhLDMpKTt0aGlzLmFkZEF0dHJpYnV0ZShcInV2XCIsbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShtLDIpKX07VEhSRUUuUGxhbmVCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5CdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUpO1RIUkVFLlBsYW5lQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLlBsYW5lQnVmZmVyR2VvbWV0cnk7XG5USFJFRS5QbGFuZUJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jbG9uZT1mdW5jdGlvbigpe3ZhciBhPXRoaXMucGFyYW1ldGVycztyZXR1cm4gbmV3IFRIUkVFLlBsYW5lQnVmZmVyR2VvbWV0cnkoYS53aWR0aCxhLmhlaWdodCxhLndpZHRoU2VnbWVudHMsYS5oZWlnaHRTZWdtZW50cyl9O1xuVEhSRUUuUmluZ0dlb21ldHJ5PWZ1bmN0aW9uKGEsYixjLGQsZSxnKXtUSFJFRS5HZW9tZXRyeS5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIlJpbmdHZW9tZXRyeVwiO3RoaXMucGFyYW1ldGVycz17aW5uZXJSYWRpdXM6YSxvdXRlclJhZGl1czpiLHRoZXRhU2VnbWVudHM6YyxwaGlTZWdtZW50czpkLHRoZXRhU3RhcnQ6ZSx0aGV0YUxlbmd0aDpnfTthPWF8fDA7Yj1ifHw1MDtlPXZvaWQgMCE9PWU/ZTowO2c9dm9pZCAwIT09Zz9nOjIqTWF0aC5QSTtjPXZvaWQgMCE9PWM/TWF0aC5tYXgoMyxjKTo4O2Q9dm9pZCAwIT09ZD9NYXRoLm1heCgxLGQpOjg7dmFyIGYsaD1bXSxsPWEsaz0oYi1hKS9kO2ZvcihhPTA7YTxkKzE7YSsrKXtmb3IoZj0wO2Y8YysxO2YrKyl7dmFyIG09bmV3IFRIUkVFLlZlY3RvcjMscD1lK2YvYypnO20ueD1sKk1hdGguY29zKHApO20ueT1sKk1hdGguc2luKHApO3RoaXMudmVydGljZXMucHVzaChtKTtoLnB1c2gobmV3IFRIUkVFLlZlY3RvcjIoKG0ueC9iKzEpLzIsXG4obS55L2IrMSkvMikpfWwrPWt9Yj1uZXcgVEhSRUUuVmVjdG9yMygwLDAsMSk7Zm9yKGE9MDthPGQ7YSsrKWZvcihlPWEqKGMrMSksZj0wO2Y8YztmKyspZz1wPWYrZSxrPXArYysxLG09cCtjKzIsdGhpcy5mYWNlcy5wdXNoKG5ldyBUSFJFRS5GYWNlMyhnLGssbSxbYi5jbG9uZSgpLGIuY2xvbmUoKSxiLmNsb25lKCldKSksdGhpcy5mYWNlVmVydGV4VXZzWzBdLnB1c2goW2hbZ10uY2xvbmUoKSxoW2tdLmNsb25lKCksaFttXS5jbG9uZSgpXSksZz1wLGs9cCtjKzIsbT1wKzEsdGhpcy5mYWNlcy5wdXNoKG5ldyBUSFJFRS5GYWNlMyhnLGssbSxbYi5jbG9uZSgpLGIuY2xvbmUoKSxiLmNsb25lKCldKSksdGhpcy5mYWNlVmVydGV4VXZzWzBdLnB1c2goW2hbZ10uY2xvbmUoKSxoW2tdLmNsb25lKCksaFttXS5jbG9uZSgpXSk7dGhpcy5jb21wdXRlRmFjZU5vcm1hbHMoKTt0aGlzLmJvdW5kaW5nU3BoZXJlPW5ldyBUSFJFRS5TcGhlcmUobmV3IFRIUkVFLlZlY3RvcjMsbCl9O1xuVEhSRUUuUmluZ0dlb21ldHJ5LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkdlb21ldHJ5LnByb3RvdHlwZSk7VEhSRUUuUmluZ0dlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5SaW5nR2VvbWV0cnk7VEhSRUUuUmluZ0dlb21ldHJ5LnByb3RvdHlwZS5jbG9uZT1mdW5jdGlvbigpe3ZhciBhPXRoaXMucGFyYW1ldGVycztyZXR1cm4gbmV3IFRIUkVFLlJpbmdHZW9tZXRyeShhLmlubmVyUmFkaXVzLGEub3V0ZXJSYWRpdXMsYS50aGV0YVNlZ21lbnRzLGEucGhpU2VnbWVudHMsYS50aGV0YVN0YXJ0LGEudGhldGFMZW5ndGgpfTtcblRIUkVFLlNwaGVyZUdlb21ldHJ5PWZ1bmN0aW9uKGEsYixjLGQsZSxnLGYpe1RIUkVFLkdlb21ldHJ5LmNhbGwodGhpcyk7dGhpcy50eXBlPVwiU3BoZXJlR2VvbWV0cnlcIjt0aGlzLnBhcmFtZXRlcnM9e3JhZGl1czphLHdpZHRoU2VnbWVudHM6YixoZWlnaHRTZWdtZW50czpjLHBoaVN0YXJ0OmQscGhpTGVuZ3RoOmUsdGhldGFTdGFydDpnLHRoZXRhTGVuZ3RoOmZ9O3RoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KG5ldyBUSFJFRS5TcGhlcmVCdWZmZXJHZW9tZXRyeShhLGIsYyxkLGUsZyxmKSl9O1RIUkVFLlNwaGVyZUdlb21ldHJ5LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkdlb21ldHJ5LnByb3RvdHlwZSk7VEhSRUUuU3BoZXJlR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLlNwaGVyZUdlb21ldHJ5O1xuVEhSRUUuU3BoZXJlR2VvbWV0cnkucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5wYXJhbWV0ZXJzO3JldHVybiBuZXcgVEhSRUUuU3BoZXJlR2VvbWV0cnkoYS5yYWRpdXMsYS53aWR0aFNlZ21lbnRzLGEuaGVpZ2h0U2VnbWVudHMsYS5waGlTdGFydCxhLnBoaUxlbmd0aCxhLnRoZXRhU3RhcnQsYS50aGV0YUxlbmd0aCl9O1xuVEhSRUUuU3BoZXJlQnVmZmVyR2VvbWV0cnk9ZnVuY3Rpb24oYSxiLGMsZCxlLGcsZil7VEhSRUUuQnVmZmVyR2VvbWV0cnkuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJTcGhlcmVCdWZmZXJHZW9tZXRyeVwiO3RoaXMucGFyYW1ldGVycz17cmFkaXVzOmEsd2lkdGhTZWdtZW50czpiLGhlaWdodFNlZ21lbnRzOmMscGhpU3RhcnQ6ZCxwaGlMZW5ndGg6ZSx0aGV0YVN0YXJ0OmcsdGhldGFMZW5ndGg6Zn07YT1hfHw1MDtiPU1hdGgubWF4KDMsTWF0aC5mbG9vcihiKXx8OCk7Yz1NYXRoLm1heCgyLE1hdGguZmxvb3IoYyl8fDYpO2Q9dm9pZCAwIT09ZD9kOjA7ZT12b2lkIDAhPT1lP2U6MipNYXRoLlBJO2c9dm9pZCAwIT09Zz9nOjA7Zj12b2lkIDAhPT1mP2Y6TWF0aC5QSTtmb3IodmFyIGg9ZytmLGw9KGIrMSkqKGMrMSksaz1uZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKG5ldyBGbG9hdDMyQXJyYXkoMypsKSwzKSxtPW5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUobmV3IEZsb2F0MzJBcnJheSgzKlxubCksMyksbD1uZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKG5ldyBGbG9hdDMyQXJyYXkoMipsKSwyKSxwPTAsbj1bXSxxPW5ldyBUSFJFRS5WZWN0b3IzLHM9MDtzPD1jO3MrKyl7Zm9yKHZhciB0PVtdLHY9cy9jLHU9MDt1PD1iO3UrKyl7dmFyIHc9dS9iLEQ9LWEqTWF0aC5jb3MoZCt3KmUpKk1hdGguc2luKGcrdipmKSx4PWEqTWF0aC5jb3MoZyt2KmYpLEI9YSpNYXRoLnNpbihkK3cqZSkqTWF0aC5zaW4oZyt2KmYpO3Euc2V0KEQseCxCKS5ub3JtYWxpemUoKTtrLnNldFhZWihwLEQseCxCKTttLnNldFhZWihwLHEueCxxLnkscS56KTtsLnNldFhZKHAsdywxLXYpO3QucHVzaChwKTtwKyt9bi5wdXNoKHQpfWQ9W107Zm9yKHM9MDtzPGM7cysrKWZvcih1PTA7dTxiO3UrKyllPW5bc11bdSsxXSxmPW5bc11bdV0scD1uW3MrMV1bdV0scT1uW3MrMV1bdSsxXSwoMCE9PXN8fDA8ZykmJmQucHVzaChlLGYscSksKHMhPT1jLTF8fGg8TWF0aC5QSSkmJmQucHVzaChmLHAscSk7dGhpcy5zZXRJbmRleChuZXcgKDY1NTM1PFxuay5jb3VudD9USFJFRS5VaW50MzJBdHRyaWJ1dGU6VEhSRUUuVWludDE2QXR0cmlidXRlKShkLDEpKTt0aGlzLmFkZEF0dHJpYnV0ZShcInBvc2l0aW9uXCIsayk7dGhpcy5hZGRBdHRyaWJ1dGUoXCJub3JtYWxcIixtKTt0aGlzLmFkZEF0dHJpYnV0ZShcInV2XCIsbCk7dGhpcy5ib3VuZGluZ1NwaGVyZT1uZXcgVEhSRUUuU3BoZXJlKG5ldyBUSFJFRS5WZWN0b3IzLGEpfTtUSFJFRS5TcGhlcmVCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5CdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUpO1RIUkVFLlNwaGVyZUJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5TcGhlcmVCdWZmZXJHZW9tZXRyeTtcblRIUkVFLlNwaGVyZUJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jbG9uZT1mdW5jdGlvbigpe3ZhciBhPXRoaXMucGFyYW1ldGVycztyZXR1cm4gbmV3IFRIUkVFLlNwaGVyZUJ1ZmZlckdlb21ldHJ5KGEucmFkaXVzLGEud2lkdGhTZWdtZW50cyxhLmhlaWdodFNlZ21lbnRzLGEucGhpU3RhcnQsYS5waGlMZW5ndGgsYS50aGV0YVN0YXJ0LGEudGhldGFMZW5ndGgpfTtcblRIUkVFLlRvcnVzR2VvbWV0cnk9ZnVuY3Rpb24oYSxiLGMsZCxlKXtUSFJFRS5HZW9tZXRyeS5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIlRvcnVzR2VvbWV0cnlcIjt0aGlzLnBhcmFtZXRlcnM9e3JhZGl1czphLHR1YmU6YixyYWRpYWxTZWdtZW50czpjLHR1YnVsYXJTZWdtZW50czpkLGFyYzplfTthPWF8fDEwMDtiPWJ8fDQwO2M9Y3x8ODtkPWR8fDY7ZT1lfHwyKk1hdGguUEk7Zm9yKHZhciBnPW5ldyBUSFJFRS5WZWN0b3IzLGY9W10saD1bXSxsPTA7bDw9YztsKyspZm9yKHZhciBrPTA7azw9ZDtrKyspe3ZhciBtPWsvZCplLHA9bC9jKk1hdGguUEkqMjtnLng9YSpNYXRoLmNvcyhtKTtnLnk9YSpNYXRoLnNpbihtKTt2YXIgbj1uZXcgVEhSRUUuVmVjdG9yMztuLng9KGErYipNYXRoLmNvcyhwKSkqTWF0aC5jb3MobSk7bi55PShhK2IqTWF0aC5jb3MocCkpKk1hdGguc2luKG0pO24uej1iKk1hdGguc2luKHApO3RoaXMudmVydGljZXMucHVzaChuKTtmLnB1c2gobmV3IFRIUkVFLlZlY3RvcjIoay9cbmQsbC9jKSk7aC5wdXNoKG4uY2xvbmUoKS5zdWIoZykubm9ybWFsaXplKCkpfWZvcihsPTE7bDw9YztsKyspZm9yKGs9MTtrPD1kO2srKylhPShkKzEpKmwray0xLGI9KGQrMSkqKGwtMSkray0xLGU9KGQrMSkqKGwtMSkrayxnPShkKzEpKmwrayxtPW5ldyBUSFJFRS5GYWNlMyhhLGIsZyxbaFthXS5jbG9uZSgpLGhbYl0uY2xvbmUoKSxoW2ddLmNsb25lKCldKSx0aGlzLmZhY2VzLnB1c2gobSksdGhpcy5mYWNlVmVydGV4VXZzWzBdLnB1c2goW2ZbYV0uY2xvbmUoKSxmW2JdLmNsb25lKCksZltnXS5jbG9uZSgpXSksbT1uZXcgVEhSRUUuRmFjZTMoYixlLGcsW2hbYl0uY2xvbmUoKSxoW2VdLmNsb25lKCksaFtnXS5jbG9uZSgpXSksdGhpcy5mYWNlcy5wdXNoKG0pLHRoaXMuZmFjZVZlcnRleFV2c1swXS5wdXNoKFtmW2JdLmNsb25lKCksZltlXS5jbG9uZSgpLGZbZ10uY2xvbmUoKV0pO3RoaXMuY29tcHV0ZUZhY2VOb3JtYWxzKCl9O1xuVEhSRUUuVG9ydXNHZW9tZXRyeS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5HZW9tZXRyeS5wcm90b3R5cGUpO1RIUkVFLlRvcnVzR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLlRvcnVzR2VvbWV0cnk7VEhSRUUuVG9ydXNHZW9tZXRyeS5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLnBhcmFtZXRlcnM7cmV0dXJuIG5ldyBUSFJFRS5Ub3J1c0dlb21ldHJ5KGEucmFkaXVzLGEudHViZSxhLnJhZGlhbFNlZ21lbnRzLGEudHVidWxhclNlZ21lbnRzLGEuYXJjKX07XG5USFJFRS5Ub3J1c0tub3RHZW9tZXRyeT1mdW5jdGlvbihhLGIsYyxkLGUsZyxmKXtmdW5jdGlvbiBoKGEsYixjLGQsZSl7dmFyIGY9TWF0aC5jb3MoYSksZz1NYXRoLnNpbihhKTthKj1iL2M7Yj1NYXRoLmNvcyhhKTtmKj1kKigyK2IpKi41O2c9ZCooMitiKSpnKi41O2Q9ZSpkKk1hdGguc2luKGEpKi41O3JldHVybiBuZXcgVEhSRUUuVmVjdG9yMyhmLGcsZCl9VEhSRUUuR2VvbWV0cnkuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJUb3J1c0tub3RHZW9tZXRyeVwiO3RoaXMucGFyYW1ldGVycz17cmFkaXVzOmEsdHViZTpiLHJhZGlhbFNlZ21lbnRzOmMsdHVidWxhclNlZ21lbnRzOmQscDplLHE6ZyxoZWlnaHRTY2FsZTpmfTthPWF8fDEwMDtiPWJ8fDQwO2M9Y3x8NjQ7ZD1kfHw4O2U9ZXx8MjtnPWd8fDM7Zj1mfHwxO2Zvcih2YXIgbD1BcnJheShjKSxrPW5ldyBUSFJFRS5WZWN0b3IzLG09bmV3IFRIUkVFLlZlY3RvcjMscD1uZXcgVEhSRUUuVmVjdG9yMyxuPTA7bjxjOysrbil7bFtuXT1cbkFycmF5KGQpO3ZhciBxPW4vYyoyKmUqTWF0aC5QSSxzPWgocSxnLGUsYSxmKSxxPWgocSsuMDEsZyxlLGEsZik7ay5zdWJWZWN0b3JzKHEscyk7bS5hZGRWZWN0b3JzKHEscyk7cC5jcm9zc1ZlY3RvcnMoayxtKTttLmNyb3NzVmVjdG9ycyhwLGspO3Aubm9ybWFsaXplKCk7bS5ub3JtYWxpemUoKTtmb3IocT0wO3E8ZDsrK3Epe3ZhciB0PXEvZCoyKk1hdGguUEksdj0tYipNYXRoLmNvcyh0KSx0PWIqTWF0aC5zaW4odCksdT1uZXcgVEhSRUUuVmVjdG9yMzt1Lng9cy54K3YqbS54K3QqcC54O3UueT1zLnkrdiptLnkrdCpwLnk7dS56PXMueit2Km0ueit0KnAuejtsW25dW3FdPXRoaXMudmVydGljZXMucHVzaCh1KS0xfX1mb3Iobj0wO248YzsrK24pZm9yKHE9MDtxPGQ7KytxKWU9KG4rMSklYyxnPShxKzEpJWQsYT1sW25dW3FdLGI9bFtlXVtxXSxlPWxbZV1bZ10sZz1sW25dW2ddLGY9bmV3IFRIUkVFLlZlY3RvcjIobi9jLHEvZCksaz1uZXcgVEhSRUUuVmVjdG9yMigobisxKS9jLFxucS9kKSxtPW5ldyBUSFJFRS5WZWN0b3IyKChuKzEpL2MsKHErMSkvZCkscD1uZXcgVEhSRUUuVmVjdG9yMihuL2MsKHErMSkvZCksdGhpcy5mYWNlcy5wdXNoKG5ldyBUSFJFRS5GYWNlMyhhLGIsZykpLHRoaXMuZmFjZVZlcnRleFV2c1swXS5wdXNoKFtmLGsscF0pLHRoaXMuZmFjZXMucHVzaChuZXcgVEhSRUUuRmFjZTMoYixlLGcpKSx0aGlzLmZhY2VWZXJ0ZXhVdnNbMF0ucHVzaChbay5jbG9uZSgpLG0scC5jbG9uZSgpXSk7dGhpcy5jb21wdXRlRmFjZU5vcm1hbHMoKTt0aGlzLmNvbXB1dGVWZXJ0ZXhOb3JtYWxzKCl9O1RIUkVFLlRvcnVzS25vdEdlb21ldHJ5LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkdlb21ldHJ5LnByb3RvdHlwZSk7VEhSRUUuVG9ydXNLbm90R2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLlRvcnVzS25vdEdlb21ldHJ5O1xuVEhSRUUuVG9ydXNLbm90R2VvbWV0cnkucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5wYXJhbWV0ZXJzO3JldHVybiBuZXcgVEhSRUUuVG9ydXNLbm90R2VvbWV0cnkoYS5yYWRpdXMsYS50dWJlLGEucmFkaWFsU2VnbWVudHMsYS50dWJ1bGFyU2VnbWVudHMsYS5wLGEucSxhLmhlaWdodFNjYWxlKX07XG5USFJFRS5UdWJlR2VvbWV0cnk9ZnVuY3Rpb24oYSxiLGMsZCxlLGcpe1RIUkVFLkdlb21ldHJ5LmNhbGwodGhpcyk7dGhpcy50eXBlPVwiVHViZUdlb21ldHJ5XCI7dGhpcy5wYXJhbWV0ZXJzPXtwYXRoOmEsc2VnbWVudHM6YixyYWRpdXM6YyxyYWRpYWxTZWdtZW50czpkLGNsb3NlZDplLHRhcGVyOmd9O2I9Ynx8NjQ7Yz1jfHwxO2Q9ZHx8ODtlPWV8fCExO2c9Z3x8VEhSRUUuVHViZUdlb21ldHJ5Lk5vVGFwZXI7dmFyIGY9W10saCxsLGs9YisxLG0scCxuLHEscyx0PW5ldyBUSFJFRS5WZWN0b3IzLHYsdSx3O3Y9bmV3IFRIUkVFLlR1YmVHZW9tZXRyeS5GcmVuZXRGcmFtZXMoYSxiLGUpO3U9di5ub3JtYWxzO3c9di5iaW5vcm1hbHM7dGhpcy50YW5nZW50cz12LnRhbmdlbnRzO3RoaXMubm9ybWFscz11O3RoaXMuYmlub3JtYWxzPXc7Zm9yKHY9MDt2PGs7disrKWZvcihmW3ZdPVtdLG09di8oay0xKSxzPWEuZ2V0UG9pbnRBdChtKSxoPXVbdl0sbD13W3ZdLG49YypnKG0pLG09MDttPFxuZDttKyspcD1tL2QqMipNYXRoLlBJLHE9LW4qTWF0aC5jb3MocCkscD1uKk1hdGguc2luKHApLHQuY29weShzKSx0LngrPXEqaC54K3AqbC54LHQueSs9cSpoLnkrcCpsLnksdC56Kz1xKmgueitwKmwueixmW3ZdW21dPXRoaXMudmVydGljZXMucHVzaChuZXcgVEhSRUUuVmVjdG9yMyh0LngsdC55LHQueikpLTE7Zm9yKHY9MDt2PGI7disrKWZvcihtPTA7bTxkO20rKylnPWU/KHYrMSklYjp2KzEsaz0obSsxKSVkLGE9Zlt2XVttXSxjPWZbZ11bbV0sZz1mW2ddW2tdLGs9Zlt2XVtrXSx0PW5ldyBUSFJFRS5WZWN0b3IyKHYvYixtL2QpLHU9bmV3IFRIUkVFLlZlY3RvcjIoKHYrMSkvYixtL2QpLHc9bmV3IFRIUkVFLlZlY3RvcjIoKHYrMSkvYiwobSsxKS9kKSxoPW5ldyBUSFJFRS5WZWN0b3IyKHYvYiwobSsxKS9kKSx0aGlzLmZhY2VzLnB1c2gobmV3IFRIUkVFLkZhY2UzKGEsYyxrKSksdGhpcy5mYWNlVmVydGV4VXZzWzBdLnB1c2goW3QsdSxoXSksdGhpcy5mYWNlcy5wdXNoKG5ldyBUSFJFRS5GYWNlMyhjLFxuZyxrKSksdGhpcy5mYWNlVmVydGV4VXZzWzBdLnB1c2goW3UuY2xvbmUoKSx3LGguY2xvbmUoKV0pO3RoaXMuY29tcHV0ZUZhY2VOb3JtYWxzKCk7dGhpcy5jb21wdXRlVmVydGV4Tm9ybWFscygpfTtUSFJFRS5UdWJlR2VvbWV0cnkucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuR2VvbWV0cnkucHJvdG90eXBlKTtUSFJFRS5UdWJlR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLlR1YmVHZW9tZXRyeTtUSFJFRS5UdWJlR2VvbWV0cnkucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMucGFyYW1ldGVycy5wYXRoLHRoaXMucGFyYW1ldGVycy5zZWdtZW50cyx0aGlzLnBhcmFtZXRlcnMucmFkaXVzLHRoaXMucGFyYW1ldGVycy5yYWRpYWxTZWdtZW50cyx0aGlzLnBhcmFtZXRlcnMuY2xvc2VkLHRoaXMucGFyYW1ldGVycy50YXBlcil9O1RIUkVFLlR1YmVHZW9tZXRyeS5Ob1RhcGVyPWZ1bmN0aW9uKGEpe3JldHVybiAxfTtcblRIUkVFLlR1YmVHZW9tZXRyeS5TaW51c29pZGFsVGFwZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIE1hdGguc2luKE1hdGguUEkqYSl9O1xuVEhSRUUuVHViZUdlb21ldHJ5LkZyZW5ldEZyYW1lcz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9bmV3IFRIUkVFLlZlY3RvcjMsZT1bXSxnPVtdLGY9W10saD1uZXcgVEhSRUUuVmVjdG9yMyxsPW5ldyBUSFJFRS5NYXRyaXg0O2IrPTE7dmFyIGssbSxwO3RoaXMudGFuZ2VudHM9ZTt0aGlzLm5vcm1hbHM9Zzt0aGlzLmJpbm9ybWFscz1mO2ZvcihrPTA7azxiO2srKyltPWsvKGItMSksZVtrXT1hLmdldFRhbmdlbnRBdChtKSxlW2tdLm5vcm1hbGl6ZSgpO2dbMF09bmV3IFRIUkVFLlZlY3RvcjM7ZlswXT1uZXcgVEhSRUUuVmVjdG9yMzthPU51bWJlci5NQVhfVkFMVUU7az1NYXRoLmFicyhlWzBdLngpO209TWF0aC5hYnMoZVswXS55KTtwPU1hdGguYWJzKGVbMF0ueik7azw9YSYmKGE9ayxkLnNldCgxLDAsMCkpO208PWEmJihhPW0sZC5zZXQoMCwxLDApKTtwPD1hJiZkLnNldCgwLDAsMSk7aC5jcm9zc1ZlY3RvcnMoZVswXSxkKS5ub3JtYWxpemUoKTtnWzBdLmNyb3NzVmVjdG9ycyhlWzBdLFxuaCk7ZlswXS5jcm9zc1ZlY3RvcnMoZVswXSxnWzBdKTtmb3Ioaz0xO2s8YjtrKyspZ1trXT1nW2stMV0uY2xvbmUoKSxmW2tdPWZbay0xXS5jbG9uZSgpLGguY3Jvc3NWZWN0b3JzKGVbay0xXSxlW2tdKSxoLmxlbmd0aCgpPk51bWJlci5FUFNJTE9OJiYoaC5ub3JtYWxpemUoKSxkPU1hdGguYWNvcyhUSFJFRS5NYXRoLmNsYW1wKGVbay0xXS5kb3QoZVtrXSksLTEsMSkpLGdba10uYXBwbHlNYXRyaXg0KGwubWFrZVJvdGF0aW9uQXhpcyhoLGQpKSksZltrXS5jcm9zc1ZlY3RvcnMoZVtrXSxnW2tdKTtpZihjKWZvcihkPU1hdGguYWNvcyhUSFJFRS5NYXRoLmNsYW1wKGdbMF0uZG90KGdbYi0xXSksLTEsMSkpLGQvPWItMSwwPGVbMF0uZG90KGguY3Jvc3NWZWN0b3JzKGdbMF0sZ1tiLTFdKSkmJihkPS1kKSxrPTE7azxiO2srKylnW2tdLmFwcGx5TWF0cml4NChsLm1ha2VSb3RhdGlvbkF4aXMoZVtrXSxkKmspKSxmW2tdLmNyb3NzVmVjdG9ycyhlW2tdLGdba10pfTtcblRIUkVFLlBvbHloZWRyb25HZW9tZXRyeT1mdW5jdGlvbihhLGIsYyxkKXtmdW5jdGlvbiBlKGEpe3ZhciBiPWEubm9ybWFsaXplKCkuY2xvbmUoKTtiLmluZGV4PWwudmVydGljZXMucHVzaChiKS0xO3ZhciBjPU1hdGguYXRhbjIoYS56LC1hLngpLzIvTWF0aC5QSSsuNTthPU1hdGguYXRhbjIoLWEueSxNYXRoLnNxcnQoYS54KmEueCthLnoqYS56KSkvTWF0aC5QSSsuNTtiLnV2PW5ldyBUSFJFRS5WZWN0b3IyKGMsMS1hKTtyZXR1cm4gYn1mdW5jdGlvbiBnKGEsYixjLGQpe2Q9bmV3IFRIUkVFLkZhY2UzKGEuaW5kZXgsYi5pbmRleCxjLmluZGV4LFthLmNsb25lKCksYi5jbG9uZSgpLGMuY2xvbmUoKV0sdm9pZCAwLGQpO2wuZmFjZXMucHVzaChkKTt2LmNvcHkoYSkuYWRkKGIpLmFkZChjKS5kaXZpZGVTY2FsYXIoMyk7ZD1NYXRoLmF0YW4yKHYueiwtdi54KTtsLmZhY2VWZXJ0ZXhVdnNbMF0ucHVzaChbaChhLnV2LGEsZCksaChiLnV2LGIsZCksaChjLnV2LGMsZCldKX1mdW5jdGlvbiBmKGEsXG5iKXtmb3IodmFyIGM9TWF0aC5wb3coMixiKSxkPWUobC52ZXJ0aWNlc1thLmFdKSxmPWUobC52ZXJ0aWNlc1thLmJdKSxoPWUobC52ZXJ0aWNlc1thLmNdKSxrPVtdLG49YS5tYXRlcmlhbEluZGV4LG09MDttPD1jO20rKyl7a1ttXT1bXTtmb3IodmFyIHA9ZShkLmNsb25lKCkubGVycChoLG0vYykpLHE9ZShmLmNsb25lKCkubGVycChoLG0vYykpLHM9Yy1tLHQ9MDt0PD1zO3QrKylrW21dW3RdPTA9PT10JiZtPT09Yz9wOmUocC5jbG9uZSgpLmxlcnAocSx0L3MpKX1mb3IobT0wO208YzttKyspZm9yKHQ9MDt0PDIqKGMtbSktMTt0KyspZD1NYXRoLmZsb29yKHQvMiksMD09PXQlMj9nKGtbbV1bZCsxXSxrW20rMV1bZF0sa1ttXVtkXSxuKTpnKGtbbV1bZCsxXSxrW20rMV1bZCsxXSxrW20rMV1bZF0sbil9ZnVuY3Rpb24gaChhLGIsYyl7MD5jJiYxPT09YS54JiYoYT1uZXcgVEhSRUUuVmVjdG9yMihhLngtMSxhLnkpKTswPT09Yi54JiYwPT09Yi56JiYoYT1uZXcgVEhSRUUuVmVjdG9yMihjL1xuMi9NYXRoLlBJKy41LGEueSkpO3JldHVybiBhLmNsb25lKCl9VEhSRUUuR2VvbWV0cnkuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJQb2x5aGVkcm9uR2VvbWV0cnlcIjt0aGlzLnBhcmFtZXRlcnM9e3ZlcnRpY2VzOmEsaW5kaWNlczpiLHJhZGl1czpjLGRldGFpbDpkfTtjPWN8fDE7ZD1kfHwwO2Zvcih2YXIgbD10aGlzLGs9MCxtPWEubGVuZ3RoO2s8bTtrKz0zKWUobmV3IFRIUkVFLlZlY3RvcjMoYVtrXSxhW2srMV0sYVtrKzJdKSk7YT10aGlzLnZlcnRpY2VzO2Zvcih2YXIgcD1bXSxuPWs9MCxtPWIubGVuZ3RoO2s8bTtrKz0zLG4rKyl7dmFyIHE9YVtiW2tdXSxzPWFbYltrKzFdXSx0PWFbYltrKzJdXTtwW25dPW5ldyBUSFJFRS5GYWNlMyhxLmluZGV4LHMuaW5kZXgsdC5pbmRleCxbcS5jbG9uZSgpLHMuY2xvbmUoKSx0LmNsb25lKCldLHZvaWQgMCxuKX1mb3IodmFyIHY9bmV3IFRIUkVFLlZlY3RvcjMsaz0wLG09cC5sZW5ndGg7azxtO2srKylmKHBba10sZCk7az0wO2ZvcihtPXRoaXMuZmFjZVZlcnRleFV2c1swXS5sZW5ndGg7azxcbm07aysrKWI9dGhpcy5mYWNlVmVydGV4VXZzWzBdW2tdLGQ9YlswXS54LGE9YlsxXS54LHA9YlsyXS54LG49TWF0aC5tYXgoZCxhLHApLHE9TWF0aC5taW4oZCxhLHApLC45PG4mJi4xPnEmJiguMj5kJiYoYlswXS54Kz0xKSwuMj5hJiYoYlsxXS54Kz0xKSwuMj5wJiYoYlsyXS54Kz0xKSk7az0wO2ZvcihtPXRoaXMudmVydGljZXMubGVuZ3RoO2s8bTtrKyspdGhpcy52ZXJ0aWNlc1trXS5tdWx0aXBseVNjYWxhcihjKTt0aGlzLm1lcmdlVmVydGljZXMoKTt0aGlzLmNvbXB1dGVGYWNlTm9ybWFscygpO3RoaXMuYm91bmRpbmdTcGhlcmU9bmV3IFRIUkVFLlNwaGVyZShuZXcgVEhSRUUuVmVjdG9yMyxjKX07VEhSRUUuUG9seWhlZHJvbkdlb21ldHJ5LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkdlb21ldHJ5LnByb3RvdHlwZSk7VEhSRUUuUG9seWhlZHJvbkdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5Qb2x5aGVkcm9uR2VvbWV0cnk7XG5USFJFRS5Qb2x5aGVkcm9uR2VvbWV0cnkucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5wYXJhbWV0ZXJzO3JldHVybiBuZXcgVEhSRUUuUG9seWhlZHJvbkdlb21ldHJ5KGEudmVydGljZXMsYS5pbmRpY2VzLGEucmFkaXVzLGEuZGV0YWlsKX07XG5USFJFRS5Eb2RlY2FoZWRyb25HZW9tZXRyeT1mdW5jdGlvbihhLGIpe3ZhciBjPSgxK01hdGguc3FydCg1KSkvMixkPTEvYztUSFJFRS5Qb2x5aGVkcm9uR2VvbWV0cnkuY2FsbCh0aGlzLFstMSwtMSwtMSwtMSwtMSwxLC0xLDEsLTEsLTEsMSwxLDEsLTEsLTEsMSwtMSwxLDEsMSwtMSwxLDEsMSwwLC1kLC1jLDAsLWQsYywwLGQsLWMsMCxkLGMsLWQsLWMsMCwtZCxjLDAsZCwtYywwLGQsYywwLC1jLDAsLWQsYywwLC1kLC1jLDAsZCxjLDAsZF0sWzMsMTEsNywzLDcsMTUsMywxNSwxMyw3LDE5LDE3LDcsMTcsNiw3LDYsMTUsMTcsNCw4LDE3LDgsMTAsMTcsMTAsNiw4LDAsMTYsOCwxNiwyLDgsMiwxMCwwLDEyLDEsMCwxLDE4LDAsMTgsMTYsNiwxMCwyLDYsMiwxMyw2LDEzLDE1LDIsMTYsMTgsMiwxOCwzLDIsMywxMywxOCwxLDksMTgsOSwxMSwxOCwxMSwzLDQsMTQsMTIsNCwxMiwwLDQsMCw4LDExLDksNSwxMSw1LDE5LDExLDE5LDcsMTksNSwxNCwxOSwxNCw0LDE5LDQsMTcsMSxcbjEyLDE0LDEsMTQsNSwxLDUsOV0sYSxiKTt0aGlzLnR5cGU9XCJEb2RlY2FoZWRyb25HZW9tZXRyeVwiO3RoaXMucGFyYW1ldGVycz17cmFkaXVzOmEsZGV0YWlsOmJ9fTtUSFJFRS5Eb2RlY2FoZWRyb25HZW9tZXRyeS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5Qb2x5aGVkcm9uR2VvbWV0cnkucHJvdG90eXBlKTtUSFJFRS5Eb2RlY2FoZWRyb25HZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuRG9kZWNhaGVkcm9uR2VvbWV0cnk7VEhSRUUuRG9kZWNhaGVkcm9uR2VvbWV0cnkucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5wYXJhbWV0ZXJzO3JldHVybiBuZXcgVEhSRUUuRG9kZWNhaGVkcm9uR2VvbWV0cnkoYS5yYWRpdXMsYS5kZXRhaWwpfTtcblRIUkVFLkljb3NhaGVkcm9uR2VvbWV0cnk9ZnVuY3Rpb24oYSxiKXt2YXIgYz0oMStNYXRoLnNxcnQoNSkpLzI7VEhSRUUuUG9seWhlZHJvbkdlb21ldHJ5LmNhbGwodGhpcyxbLTEsYywwLDEsYywwLC0xLC1jLDAsMSwtYywwLDAsLTEsYywwLDEsYywwLC0xLC1jLDAsMSwtYyxjLDAsLTEsYywwLDEsLWMsMCwtMSwtYywwLDFdLFswLDExLDUsMCw1LDEsMCwxLDcsMCw3LDEwLDAsMTAsMTEsMSw1LDksNSwxMSw0LDExLDEwLDIsMTAsNyw2LDcsMSw4LDMsOSw0LDMsNCwyLDMsMiw2LDMsNiw4LDMsOCw5LDQsOSw1LDIsNCwxMSw2LDIsMTAsOCw2LDcsOSw4LDFdLGEsYik7dGhpcy50eXBlPVwiSWNvc2FoZWRyb25HZW9tZXRyeVwiO3RoaXMucGFyYW1ldGVycz17cmFkaXVzOmEsZGV0YWlsOmJ9fTtUSFJFRS5JY29zYWhlZHJvbkdlb21ldHJ5LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLlBvbHloZWRyb25HZW9tZXRyeS5wcm90b3R5cGUpO1xuVEhSRUUuSWNvc2FoZWRyb25HZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuSWNvc2FoZWRyb25HZW9tZXRyeTtUSFJFRS5JY29zYWhlZHJvbkdlb21ldHJ5LnByb3RvdHlwZS5jbG9uZT1mdW5jdGlvbigpe3ZhciBhPXRoaXMucGFyYW1ldGVycztyZXR1cm4gbmV3IFRIUkVFLkljb3NhaGVkcm9uR2VvbWV0cnkoYS5yYWRpdXMsYS5kZXRhaWwpfTtUSFJFRS5PY3RhaGVkcm9uR2VvbWV0cnk9ZnVuY3Rpb24oYSxiKXtUSFJFRS5Qb2x5aGVkcm9uR2VvbWV0cnkuY2FsbCh0aGlzLFsxLDAsMCwtMSwwLDAsMCwxLDAsMCwtMSwwLDAsMCwxLDAsMCwtMV0sWzAsMiw0LDAsNCwzLDAsMyw1LDAsNSwyLDEsMiw1LDEsNSwzLDEsMyw0LDEsNCwyXSxhLGIpO3RoaXMudHlwZT1cIk9jdGFoZWRyb25HZW9tZXRyeVwiO3RoaXMucGFyYW1ldGVycz17cmFkaXVzOmEsZGV0YWlsOmJ9fTtUSFJFRS5PY3RhaGVkcm9uR2VvbWV0cnkucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuUG9seWhlZHJvbkdlb21ldHJ5LnByb3RvdHlwZSk7XG5USFJFRS5PY3RhaGVkcm9uR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLk9jdGFoZWRyb25HZW9tZXRyeTtUSFJFRS5PY3RhaGVkcm9uR2VvbWV0cnkucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5wYXJhbWV0ZXJzO3JldHVybiBuZXcgVEhSRUUuT2N0YWhlZHJvbkdlb21ldHJ5KGEucmFkaXVzLGEuZGV0YWlsKX07VEhSRUUuVGV0cmFoZWRyb25HZW9tZXRyeT1mdW5jdGlvbihhLGIpe1RIUkVFLlBvbHloZWRyb25HZW9tZXRyeS5jYWxsKHRoaXMsWzEsMSwxLC0xLC0xLDEsLTEsMSwtMSwxLC0xLC0xXSxbMiwxLDAsMCwzLDIsMSwzLDAsMiwzLDFdLGEsYik7dGhpcy50eXBlPVwiVGV0cmFoZWRyb25HZW9tZXRyeVwiO3RoaXMucGFyYW1ldGVycz17cmFkaXVzOmEsZGV0YWlsOmJ9fTtUSFJFRS5UZXRyYWhlZHJvbkdlb21ldHJ5LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLlBvbHloZWRyb25HZW9tZXRyeS5wcm90b3R5cGUpO1xuVEhSRUUuVGV0cmFoZWRyb25HZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuVGV0cmFoZWRyb25HZW9tZXRyeTtUSFJFRS5UZXRyYWhlZHJvbkdlb21ldHJ5LnByb3RvdHlwZS5jbG9uZT1mdW5jdGlvbigpe3ZhciBhPXRoaXMucGFyYW1ldGVycztyZXR1cm4gbmV3IFRIUkVFLlRldHJhaGVkcm9uR2VvbWV0cnkoYS5yYWRpdXMsYS5kZXRhaWwpfTtcblRIUkVFLlBhcmFtZXRyaWNHZW9tZXRyeT1mdW5jdGlvbihhLGIsYyl7VEhSRUUuR2VvbWV0cnkuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJQYXJhbWV0cmljR2VvbWV0cnlcIjt0aGlzLnBhcmFtZXRlcnM9e2Z1bmM6YSxzbGljZXM6YixzdGFja3M6Y307dmFyIGQ9dGhpcy52ZXJ0aWNlcyxlPXRoaXMuZmFjZXMsZz10aGlzLmZhY2VWZXJ0ZXhVdnNbMF0sZixoLGwsayxtPWIrMTtmb3IoZj0wO2Y8PWM7ZisrKWZvcihrPWYvYyxoPTA7aDw9YjtoKyspbD1oL2IsbD1hKGwsayksZC5wdXNoKGwpO3ZhciBwLG4scSxzO2ZvcihmPTA7ZjxjO2YrKylmb3IoaD0wO2g8YjtoKyspYT1mKm0raCxkPWYqbStoKzEsaz0oZisxKSptK2grMSxsPShmKzEpKm0raCxwPW5ldyBUSFJFRS5WZWN0b3IyKGgvYixmL2MpLG49bmV3IFRIUkVFLlZlY3RvcjIoKGgrMSkvYixmL2MpLHE9bmV3IFRIUkVFLlZlY3RvcjIoKGgrMSkvYiwoZisxKS9jKSxzPW5ldyBUSFJFRS5WZWN0b3IyKGgvYiwoZisxKS9jKSxlLnB1c2gobmV3IFRIUkVFLkZhY2UzKGEsXG5kLGwpKSxnLnB1c2goW3AsbixzXSksZS5wdXNoKG5ldyBUSFJFRS5GYWNlMyhkLGssbCkpLGcucHVzaChbbi5jbG9uZSgpLHEscy5jbG9uZSgpXSk7dGhpcy5jb21wdXRlRmFjZU5vcm1hbHMoKTt0aGlzLmNvbXB1dGVWZXJ0ZXhOb3JtYWxzKCl9O1RIUkVFLlBhcmFtZXRyaWNHZW9tZXRyeS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5HZW9tZXRyeS5wcm90b3R5cGUpO1RIUkVFLlBhcmFtZXRyaWNHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuUGFyYW1ldHJpY0dlb21ldHJ5O1xuVEhSRUUuV2lyZWZyYW1lR2VvbWV0cnk9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYihhLGIpe3JldHVybiBhLWJ9VEhSRUUuQnVmZmVyR2VvbWV0cnkuY2FsbCh0aGlzKTt2YXIgYz1bMCwwXSxkPXt9LGU9W1wiYVwiLFwiYlwiLFwiY1wiXTtpZihhIGluc3RhbmNlb2YgVEhSRUUuR2VvbWV0cnkpe3ZhciBnPWEudmVydGljZXMsZj1hLmZhY2VzLGg9MCxsPW5ldyBVaW50MzJBcnJheSg2KmYubGVuZ3RoKTthPTA7Zm9yKHZhciBrPWYubGVuZ3RoO2E8azthKyspZm9yKHZhciBtPWZbYV0scD0wOzM+cDtwKyspe2NbMF09bVtlW3BdXTtjWzFdPW1bZVsocCsxKSUzXV07Yy5zb3J0KGIpO3ZhciBuPWMudG9TdHJpbmcoKTt2b2lkIDA9PT1kW25dJiYobFsyKmhdPWNbMF0sbFsyKmgrMV09Y1sxXSxkW25dPSEwLGgrKyl9Yz1uZXcgRmxvYXQzMkFycmF5KDYqaCk7YT0wO2ZvcihrPWg7YTxrO2ErKylmb3IocD0wOzI+cDtwKyspZD1nW2xbMiphK3BdXSxoPTYqYSszKnAsY1toKzBdPWQueCxjW2grMV09ZC55LFxuY1toKzJdPWQuejt0aGlzLmFkZEF0dHJpYnV0ZShcInBvc2l0aW9uXCIsbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShjLDMpKX1lbHNlIGlmKGEgaW5zdGFuY2VvZiBUSFJFRS5CdWZmZXJHZW9tZXRyeSl7aWYobnVsbCE9PWEuaW5kZXgpe2s9YS5pbmRleC5hcnJheTtnPWEuYXR0cmlidXRlcy5wb3NpdGlvbjtlPWEuZHJhd2NhbGxzO2g9MDswPT09ZS5sZW5ndGgmJmEuYWRkR3JvdXAoMCxrLmxlbmd0aCk7bD1uZXcgVWludDMyQXJyYXkoMiprLmxlbmd0aCk7Zj0wO2ZvcihtPWUubGVuZ3RoO2Y8bTsrK2Ype2E9ZVtmXTtwPWEuc3RhcnQ7bj1hLmNvdW50O2E9cDtmb3IodmFyIHE9cCtuO2E8cTthKz0zKWZvcihwPTA7Mz5wO3ArKyljWzBdPWtbYStwXSxjWzFdPWtbYSsocCsxKSUzXSxjLnNvcnQoYiksbj1jLnRvU3RyaW5nKCksdm9pZCAwPT09ZFtuXSYmKGxbMipoXT1jWzBdLGxbMipoKzFdPWNbMV0sZFtuXT0hMCxoKyspfWM9bmV3IEZsb2F0MzJBcnJheSg2KmgpO2E9MDtmb3Ioaz1cbmg7YTxrO2ErKylmb3IocD0wOzI+cDtwKyspaD02KmErMypwLGQ9bFsyKmErcF0sY1toKzBdPWcuZ2V0WChkKSxjW2grMV09Zy5nZXRZKGQpLGNbaCsyXT1nLmdldFooZCl9ZWxzZSBmb3IoZz1hLmF0dHJpYnV0ZXMucG9zaXRpb24uYXJyYXksaD1nLmxlbmd0aC8zLGw9aC8zLGM9bmV3IEZsb2F0MzJBcnJheSg2KmgpLGE9MCxrPWw7YTxrO2ErKylmb3IocD0wOzM+cDtwKyspaD0xOCphKzYqcCxsPTkqYSszKnAsY1toKzBdPWdbbF0sY1toKzFdPWdbbCsxXSxjW2grMl09Z1tsKzJdLGQ9OSphKyhwKzEpJTMqMyxjW2grM109Z1tkXSxjW2grNF09Z1tkKzFdLGNbaCs1XT1nW2QrMl07dGhpcy5hZGRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoYywzKSl9fTtUSFJFRS5XaXJlZnJhbWVHZW9tZXRyeS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5CdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUpO1xuVEhSRUUuV2lyZWZyYW1lR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLldpcmVmcmFtZUdlb21ldHJ5O1RIUkVFLkF4aXNIZWxwZXI9ZnVuY3Rpb24oYSl7YT1hfHwxO3ZhciBiPW5ldyBGbG9hdDMyQXJyYXkoWzAsMCwwLGEsMCwwLDAsMCwwLDAsYSwwLDAsMCwwLDAsMCxhXSksYz1uZXcgRmxvYXQzMkFycmF5KFsxLDAsMCwxLC42LDAsMCwxLDAsLjYsMSwwLDAsMCwxLDAsLjYsMV0pO2E9bmV3IFRIUkVFLkJ1ZmZlckdlb21ldHJ5O2EuYWRkQXR0cmlidXRlKFwicG9zaXRpb25cIixuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKGIsMykpO2EuYWRkQXR0cmlidXRlKFwiY29sb3JcIixuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKGMsMykpO2I9bmV3IFRIUkVFLkxpbmVCYXNpY01hdGVyaWFsKHt2ZXJ0ZXhDb2xvcnM6VEhSRUUuVmVydGV4Q29sb3JzfSk7VEhSRUUuTGluZVNlZ21lbnRzLmNhbGwodGhpcyxhLGIpfTtUSFJFRS5BeGlzSGVscGVyLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkxpbmVTZWdtZW50cy5wcm90b3R5cGUpO1xuVEhSRUUuQXhpc0hlbHBlci5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuQXhpc0hlbHBlcjtcblRIUkVFLkFycm93SGVscGVyPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLkdlb21ldHJ5O2EudmVydGljZXMucHVzaChuZXcgVEhSRUUuVmVjdG9yMygwLDAsMCksbmV3IFRIUkVFLlZlY3RvcjMoMCwxLDApKTt2YXIgYj1uZXcgVEhSRUUuQ3lsaW5kZXJHZW9tZXRyeSgwLC41LDEsNSwxKTtiLnRyYW5zbGF0ZSgwLC0uNSwwKTtyZXR1cm4gZnVuY3Rpb24oYyxkLGUsZyxmLGgpe1RIUkVFLk9iamVjdDNELmNhbGwodGhpcyk7dm9pZCAwPT09ZyYmKGc9MTY3NzY5NjApO3ZvaWQgMD09PWUmJihlPTEpO3ZvaWQgMD09PWYmJihmPS4yKmUpO3ZvaWQgMD09PWgmJihoPS4yKmYpO3RoaXMucG9zaXRpb24uY29weShkKTtmPGUmJih0aGlzLmxpbmU9bmV3IFRIUkVFLkxpbmUoYSxuZXcgVEhSRUUuTGluZUJhc2ljTWF0ZXJpYWwoe2NvbG9yOmd9KSksdGhpcy5saW5lLm1hdHJpeEF1dG9VcGRhdGU9ITEsdGhpcy5hZGQodGhpcy5saW5lKSk7dGhpcy5jb25lPW5ldyBUSFJFRS5NZXNoKGIsbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKHtjb2xvcjpnfSkpO1xudGhpcy5jb25lLm1hdHJpeEF1dG9VcGRhdGU9ITE7dGhpcy5hZGQodGhpcy5jb25lKTt0aGlzLnNldERpcmVjdGlvbihjKTt0aGlzLnNldExlbmd0aChlLGYsaCl9fSgpO1RIUkVFLkFycm93SGVscGVyLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLk9iamVjdDNELnByb3RvdHlwZSk7VEhSRUUuQXJyb3dIZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLkFycm93SGVscGVyO1RIUkVFLkFycm93SGVscGVyLnByb3RvdHlwZS5zZXREaXJlY3Rpb249ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuVmVjdG9yMyxiO3JldHVybiBmdW5jdGlvbihjKXsuOTk5OTk8Yy55P3RoaXMucXVhdGVybmlvbi5zZXQoMCwwLDAsMSk6LS45OTk5OT5jLnk/dGhpcy5xdWF0ZXJuaW9uLnNldCgxLDAsMCwwKTooYS5zZXQoYy56LDAsLWMueCkubm9ybWFsaXplKCksYj1NYXRoLmFjb3MoYy55KSx0aGlzLnF1YXRlcm5pb24uc2V0RnJvbUF4aXNBbmdsZShhLGIpKX19KCk7XG5USFJFRS5BcnJvd0hlbHBlci5wcm90b3R5cGUuc2V0TGVuZ3RoPWZ1bmN0aW9uKGEsYixjKXt2b2lkIDA9PT1iJiYoYj0uMiphKTt2b2lkIDA9PT1jJiYoYz0uMipiKTtiPGEmJih0aGlzLmxpbmUuc2NhbGUuc2V0KDEsYS1iLDEpLHRoaXMubGluZS51cGRhdGVNYXRyaXgoKSk7dGhpcy5jb25lLnNjYWxlLnNldChjLGIsYyk7dGhpcy5jb25lLnBvc2l0aW9uLnk9YTt0aGlzLmNvbmUudXBkYXRlTWF0cml4KCl9O1RIUkVFLkFycm93SGVscGVyLnByb3RvdHlwZS5zZXRDb2xvcj1mdW5jdGlvbihhKXt2b2lkIDAhPT10aGlzLmxpbmUmJnRoaXMubGluZS5tYXRlcmlhbC5jb2xvci5zZXQoYSk7dGhpcy5jb25lLm1hdGVyaWFsLmNvbG9yLnNldChhKX07XG5USFJFRS5Cb3hIZWxwZXI9ZnVuY3Rpb24oYSl7dmFyIGI9bmV3IFVpbnQxNkFycmF5KFswLDEsMSwyLDIsMywzLDAsNCw1LDUsNiw2LDcsNyw0LDAsNCwxLDUsMiw2LDMsN10pLGM9bmV3IEZsb2F0MzJBcnJheSgyNCksZD1uZXcgVEhSRUUuQnVmZmVyR2VvbWV0cnk7ZC5zZXRJbmRleChuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKGIsMSkpO2QuYWRkQXR0cmlidXRlKFwicG9zaXRpb25cIixuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKGMsMykpO1RIUkVFLkxpbmVTZWdtZW50cy5jYWxsKHRoaXMsZCxuZXcgVEhSRUUuTGluZUJhc2ljTWF0ZXJpYWwoe2NvbG9yOjE2Nzc2OTYwfSkpO3ZvaWQgMCE9PWEmJnRoaXMudXBkYXRlKGEpfTtUSFJFRS5Cb3hIZWxwZXIucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuTGluZVNlZ21lbnRzLnByb3RvdHlwZSk7VEhSRUUuQm94SGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5Cb3hIZWxwZXI7XG5USFJFRS5Cb3hIZWxwZXIucHJvdG90eXBlLnVwZGF0ZT1mdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5Cb3gzO3JldHVybiBmdW5jdGlvbihiKXthLnNldEZyb21PYmplY3QoYik7aWYoIWEuZW1wdHkoKSl7Yj1hLm1pbjt2YXIgYz1hLm1heCxkPXRoaXMuZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbixlPWQuYXJyYXk7ZVswXT1jLng7ZVsxXT1jLnk7ZVsyXT1jLno7ZVszXT1iLng7ZVs0XT1jLnk7ZVs1XT1jLno7ZVs2XT1iLng7ZVs3XT1iLnk7ZVs4XT1jLno7ZVs5XT1jLng7ZVsxMF09Yi55O2VbMTFdPWMuejtlWzEyXT1jLng7ZVsxM109Yy55O2VbMTRdPWIuejtlWzE1XT1iLng7ZVsxNl09Yy55O2VbMTddPWIuejtlWzE4XT1iLng7ZVsxOV09Yi55O2VbMjBdPWIuejtlWzIxXT1jLng7ZVsyMl09Yi55O2VbMjNdPWIuejtkLm5lZWRzVXBkYXRlPSEwO3RoaXMuZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCl9fX0oKTtcblRIUkVFLkJvdW5kaW5nQm94SGVscGVyPWZ1bmN0aW9uKGEsYil7dmFyIGM9dm9pZCAwIT09Yj9iOjg5NDc4NDg7dGhpcy5vYmplY3Q9YTt0aGlzLmJveD1uZXcgVEhSRUUuQm94MztUSFJFRS5NZXNoLmNhbGwodGhpcyxuZXcgVEhSRUUuQm94R2VvbWV0cnkoMSwxLDEpLG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCh7Y29sb3I6Yyx3aXJlZnJhbWU6ITB9KSl9O1RIUkVFLkJvdW5kaW5nQm94SGVscGVyLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLk1lc2gucHJvdG90eXBlKTtUSFJFRS5Cb3VuZGluZ0JveEhlbHBlci5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuQm91bmRpbmdCb3hIZWxwZXI7VEhSRUUuQm91bmRpbmdCb3hIZWxwZXIucHJvdG90eXBlLnVwZGF0ZT1mdW5jdGlvbigpe3RoaXMuYm94LnNldEZyb21PYmplY3QodGhpcy5vYmplY3QpO3RoaXMuYm94LnNpemUodGhpcy5zY2FsZSk7dGhpcy5ib3guY2VudGVyKHRoaXMucG9zaXRpb24pfTtcblRIUkVFLkNhbWVyYUhlbHBlcj1mdW5jdGlvbihhKXtmdW5jdGlvbiBiKGEsYixkKXtjKGEsZCk7YyhiLGQpfWZ1bmN0aW9uIGMoYSxiKXtkLnZlcnRpY2VzLnB1c2gobmV3IFRIUkVFLlZlY3RvcjMpO2QuY29sb3JzLnB1c2gobmV3IFRIUkVFLkNvbG9yKGIpKTt2b2lkIDA9PT1nW2FdJiYoZ1thXT1bXSk7Z1thXS5wdXNoKGQudmVydGljZXMubGVuZ3RoLTEpfXZhciBkPW5ldyBUSFJFRS5HZW9tZXRyeSxlPW5ldyBUSFJFRS5MaW5lQmFzaWNNYXRlcmlhbCh7Y29sb3I6MTY3NzcyMTUsdmVydGV4Q29sb3JzOlRIUkVFLkZhY2VDb2xvcnN9KSxnPXt9O2IoXCJuMVwiLFwibjJcIiwxNjc1NTIwMCk7YihcIm4yXCIsXCJuNFwiLDE2NzU1MjAwKTtiKFwibjRcIixcIm4zXCIsMTY3NTUyMDApO2IoXCJuM1wiLFwibjFcIiwxNjc1NTIwMCk7YihcImYxXCIsXCJmMlwiLDE2NzU1MjAwKTtiKFwiZjJcIixcImY0XCIsMTY3NTUyMDApO2IoXCJmNFwiLFwiZjNcIiwxNjc1NTIwMCk7YihcImYzXCIsXCJmMVwiLDE2NzU1MjAwKTtiKFwibjFcIixcImYxXCIsMTY3NTUyMDApO1xuYihcIm4yXCIsXCJmMlwiLDE2NzU1MjAwKTtiKFwibjNcIixcImYzXCIsMTY3NTUyMDApO2IoXCJuNFwiLFwiZjRcIiwxNjc1NTIwMCk7YihcInBcIixcIm4xXCIsMTY3MTE2ODApO2IoXCJwXCIsXCJuMlwiLDE2NzExNjgwKTtiKFwicFwiLFwibjNcIiwxNjcxMTY4MCk7YihcInBcIixcIm40XCIsMTY3MTE2ODApO2IoXCJ1MVwiLFwidTJcIiw0Mzc3NSk7YihcInUyXCIsXCJ1M1wiLDQzNzc1KTtiKFwidTNcIixcInUxXCIsNDM3NzUpO2IoXCJjXCIsXCJ0XCIsMTY3NzcyMTUpO2IoXCJwXCIsXCJjXCIsMzM1NTQ0Myk7YihcImNuMVwiLFwiY24yXCIsMzM1NTQ0Myk7YihcImNuM1wiLFwiY240XCIsMzM1NTQ0Myk7YihcImNmMVwiLFwiY2YyXCIsMzM1NTQ0Myk7YihcImNmM1wiLFwiY2Y0XCIsMzM1NTQ0Myk7VEhSRUUuTGluZVNlZ21lbnRzLmNhbGwodGhpcyxkLGUpO3RoaXMuY2FtZXJhPWE7dGhpcy5jYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO3RoaXMubWF0cml4PWEubWF0cml4V29ybGQ7dGhpcy5tYXRyaXhBdXRvVXBkYXRlPSExO3RoaXMucG9pbnRNYXA9Zzt0aGlzLnVwZGF0ZSgpfTtcblRIUkVFLkNhbWVyYUhlbHBlci5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5MaW5lU2VnbWVudHMucHJvdG90eXBlKTtUSFJFRS5DYW1lcmFIZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLkNhbWVyYUhlbHBlcjtcblRIUkVFLkNhbWVyYUhlbHBlci5wcm90b3R5cGUudXBkYXRlPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gYShhLGYsaCxsKXtkLnNldChmLGgsbCkudW5wcm9qZWN0KGUpO2E9Y1thXTtpZih2b2lkIDAhPT1hKWZvcihmPTAsaD1hLmxlbmd0aDtmPGg7ZisrKWIudmVydGljZXNbYVtmXV0uY29weShkKX12YXIgYixjLGQ9bmV3IFRIUkVFLlZlY3RvcjMsZT1uZXcgVEhSRUUuQ2FtZXJhO3JldHVybiBmdW5jdGlvbigpe2I9dGhpcy5nZW9tZXRyeTtjPXRoaXMucG9pbnRNYXA7ZS5wcm9qZWN0aW9uTWF0cml4LmNvcHkodGhpcy5jYW1lcmEucHJvamVjdGlvbk1hdHJpeCk7YShcImNcIiwwLDAsLTEpO2EoXCJ0XCIsMCwwLDEpO2EoXCJuMVwiLC0xLC0xLC0xKTthKFwibjJcIiwxLC0xLC0xKTthKFwibjNcIiwtMSwxLC0xKTthKFwibjRcIiwxLDEsLTEpO2EoXCJmMVwiLC0xLC0xLDEpO2EoXCJmMlwiLDEsLTEsMSk7YShcImYzXCIsLTEsMSwxKTthKFwiZjRcIiwxLDEsMSk7YShcInUxXCIsLjcsMS4xLC0xKTthKFwidTJcIiwtLjcsMS4xLFxuLTEpO2EoXCJ1M1wiLDAsMiwtMSk7YShcImNmMVwiLC0xLDAsMSk7YShcImNmMlwiLDEsMCwxKTthKFwiY2YzXCIsMCwtMSwxKTthKFwiY2Y0XCIsMCwxLDEpO2EoXCJjbjFcIiwtMSwwLC0xKTthKFwiY24yXCIsMSwwLC0xKTthKFwiY24zXCIsMCwtMSwtMSk7YShcImNuNFwiLDAsMSwtMSk7Yi52ZXJ0aWNlc05lZWRVcGRhdGU9ITB9fSgpO1xuVEhSRUUuRGlyZWN0aW9uYWxMaWdodEhlbHBlcj1mdW5jdGlvbihhLGIpe1RIUkVFLk9iamVjdDNELmNhbGwodGhpcyk7dGhpcy5saWdodD1hO3RoaXMubGlnaHQudXBkYXRlTWF0cml4V29ybGQoKTt0aGlzLm1hdHJpeD1hLm1hdHJpeFdvcmxkO3RoaXMubWF0cml4QXV0b1VwZGF0ZT0hMTtiPWJ8fDE7dmFyIGM9bmV3IFRIUkVFLkdlb21ldHJ5O2MudmVydGljZXMucHVzaChuZXcgVEhSRUUuVmVjdG9yMygtYixiLDApLG5ldyBUSFJFRS5WZWN0b3IzKGIsYiwwKSxuZXcgVEhSRUUuVmVjdG9yMyhiLC1iLDApLG5ldyBUSFJFRS5WZWN0b3IzKC1iLC1iLDApLG5ldyBUSFJFRS5WZWN0b3IzKC1iLGIsMCkpO3ZhciBkPW5ldyBUSFJFRS5MaW5lQmFzaWNNYXRlcmlhbCh7Zm9nOiExfSk7ZC5jb2xvci5jb3B5KHRoaXMubGlnaHQuY29sb3IpLm11bHRpcGx5U2NhbGFyKHRoaXMubGlnaHQuaW50ZW5zaXR5KTt0aGlzLmxpZ2h0UGxhbmU9bmV3IFRIUkVFLkxpbmUoYyxkKTt0aGlzLmFkZCh0aGlzLmxpZ2h0UGxhbmUpO1xuYz1uZXcgVEhSRUUuR2VvbWV0cnk7Yy52ZXJ0aWNlcy5wdXNoKG5ldyBUSFJFRS5WZWN0b3IzLG5ldyBUSFJFRS5WZWN0b3IzKTtkPW5ldyBUSFJFRS5MaW5lQmFzaWNNYXRlcmlhbCh7Zm9nOiExfSk7ZC5jb2xvci5jb3B5KHRoaXMubGlnaHQuY29sb3IpLm11bHRpcGx5U2NhbGFyKHRoaXMubGlnaHQuaW50ZW5zaXR5KTt0aGlzLnRhcmdldExpbmU9bmV3IFRIUkVFLkxpbmUoYyxkKTt0aGlzLmFkZCh0aGlzLnRhcmdldExpbmUpO3RoaXMudXBkYXRlKCl9O1RIUkVFLkRpcmVjdGlvbmFsTGlnaHRIZWxwZXIucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuT2JqZWN0M0QucHJvdG90eXBlKTtUSFJFRS5EaXJlY3Rpb25hbExpZ2h0SGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5EaXJlY3Rpb25hbExpZ2h0SGVscGVyO1xuVEhSRUUuRGlyZWN0aW9uYWxMaWdodEhlbHBlci5wcm90b3R5cGUuZGlzcG9zZT1mdW5jdGlvbigpe3RoaXMubGlnaHRQbGFuZS5nZW9tZXRyeS5kaXNwb3NlKCk7dGhpcy5saWdodFBsYW5lLm1hdGVyaWFsLmRpc3Bvc2UoKTt0aGlzLnRhcmdldExpbmUuZ2VvbWV0cnkuZGlzcG9zZSgpO3RoaXMudGFyZ2V0TGluZS5tYXRlcmlhbC5kaXNwb3NlKCl9O1xuVEhSRUUuRGlyZWN0aW9uYWxMaWdodEhlbHBlci5wcm90b3R5cGUudXBkYXRlPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlZlY3RvcjMsYj1uZXcgVEhSRUUuVmVjdG9yMyxjPW5ldyBUSFJFRS5WZWN0b3IzO3JldHVybiBmdW5jdGlvbigpe2Euc2V0RnJvbU1hdHJpeFBvc2l0aW9uKHRoaXMubGlnaHQubWF0cml4V29ybGQpO2Iuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKHRoaXMubGlnaHQudGFyZ2V0Lm1hdHJpeFdvcmxkKTtjLnN1YlZlY3RvcnMoYixhKTt0aGlzLmxpZ2h0UGxhbmUubG9va0F0KGMpO3RoaXMubGlnaHRQbGFuZS5tYXRlcmlhbC5jb2xvci5jb3B5KHRoaXMubGlnaHQuY29sb3IpLm11bHRpcGx5U2NhbGFyKHRoaXMubGlnaHQuaW50ZW5zaXR5KTt0aGlzLnRhcmdldExpbmUuZ2VvbWV0cnkudmVydGljZXNbMV0uY29weShjKTt0aGlzLnRhcmdldExpbmUuZ2VvbWV0cnkudmVydGljZXNOZWVkVXBkYXRlPSEwO3RoaXMudGFyZ2V0TGluZS5tYXRlcmlhbC5jb2xvci5jb3B5KHRoaXMubGlnaHRQbGFuZS5tYXRlcmlhbC5jb2xvcil9fSgpO1xuVEhSRUUuRWRnZXNIZWxwZXI9ZnVuY3Rpb24oYSxiLGMpe2I9dm9pZCAwIT09Yj9iOjE2Nzc3MjE1O1RIUkVFLkxpbmVTZWdtZW50cy5jYWxsKHRoaXMsbmV3IFRIUkVFLkVkZ2VzR2VvbWV0cnkoYS5nZW9tZXRyeSxjKSxuZXcgVEhSRUUuTGluZUJhc2ljTWF0ZXJpYWwoe2NvbG9yOmJ9KSk7dGhpcy5tYXRyaXg9YS5tYXRyaXhXb3JsZDt0aGlzLm1hdHJpeEF1dG9VcGRhdGU9ITF9O1RIUkVFLkVkZ2VzSGVscGVyLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkxpbmVTZWdtZW50cy5wcm90b3R5cGUpO1RIUkVFLkVkZ2VzSGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5FZGdlc0hlbHBlcjtcblRIUkVFLkZhY2VOb3JtYWxzSGVscGVyPWZ1bmN0aW9uKGEsYixjLGQpe3RoaXMub2JqZWN0PWE7dGhpcy5zaXplPXZvaWQgMCE9PWI/YjoxO2E9dm9pZCAwIT09Yz9jOjE2Nzc2OTYwO2Q9dm9pZCAwIT09ZD9kOjE7Yj0wO2M9dGhpcy5vYmplY3QuZ2VvbWV0cnk7YyBpbnN0YW5jZW9mIFRIUkVFLkdlb21ldHJ5P2I9Yy5mYWNlcy5sZW5ndGg6Y29uc29sZS53YXJuKFwiVEhSRUUuRmFjZU5vcm1hbHNIZWxwZXI6IG9ubHkgVEhSRUUuR2VvbWV0cnkgaXMgc3VwcG9ydGVkLiBVc2UgVEhSRUUuVmVydGV4Tm9ybWFsc0hlbHBlciwgaW5zdGVhZC5cIik7Yz1uZXcgVEhSRUUuQnVmZmVyR2VvbWV0cnk7Yj1uZXcgVEhSRUUuRmxvYXQzMkF0dHJpYnV0ZSg2KmIsMyk7Yy5hZGRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLGIpO1RIUkVFLkxpbmVTZWdtZW50cy5jYWxsKHRoaXMsYyxuZXcgVEhSRUUuTGluZUJhc2ljTWF0ZXJpYWwoe2NvbG9yOmEsbGluZXdpZHRoOmR9KSk7dGhpcy5tYXRyaXhBdXRvVXBkYXRlPVxuITE7dGhpcy51cGRhdGUoKX07VEhSRUUuRmFjZU5vcm1hbHNIZWxwZXIucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuTGluZVNlZ21lbnRzLnByb3RvdHlwZSk7VEhSRUUuRmFjZU5vcm1hbHNIZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLkZhY2VOb3JtYWxzSGVscGVyO1xuVEhSRUUuRmFjZU5vcm1hbHNIZWxwZXIucHJvdG90eXBlLnVwZGF0ZT1mdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5WZWN0b3IzLGI9bmV3IFRIUkVFLlZlY3RvcjMsYz1uZXcgVEhSRUUuTWF0cml4MztyZXR1cm4gZnVuY3Rpb24oKXt0aGlzLm9iamVjdC51cGRhdGVNYXRyaXhXb3JsZCghMCk7Yy5nZXROb3JtYWxNYXRyaXgodGhpcy5vYmplY3QubWF0cml4V29ybGQpO2Zvcih2YXIgZD10aGlzLm9iamVjdC5tYXRyaXhXb3JsZCxlPXRoaXMuZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbixnPXRoaXMub2JqZWN0Lmdlb21ldHJ5LGY9Zy52ZXJ0aWNlcyxnPWcuZmFjZXMsaD0wLGw9MCxrPWcubGVuZ3RoO2w8aztsKyspe3ZhciBtPWdbbF0scD1tLm5vcm1hbDthLmNvcHkoZlttLmFdKS5hZGQoZlttLmJdKS5hZGQoZlttLmNdKS5kaXZpZGVTY2FsYXIoMykuYXBwbHlNYXRyaXg0KGQpO2IuY29weShwKS5hcHBseU1hdHJpeDMoYykubm9ybWFsaXplKCkubXVsdGlwbHlTY2FsYXIodGhpcy5zaXplKS5hZGQoYSk7XG5lLnNldFhZWihoLGEueCxhLnksYS56KTtoKz0xO2Uuc2V0WFlaKGgsYi54LGIueSxiLnopO2grPTF9ZS5uZWVkc1VwZGF0ZT0hMDtyZXR1cm4gdGhpc319KCk7XG5USFJFRS5HcmlkSGVscGVyPWZ1bmN0aW9uKGEsYil7dmFyIGM9bmV3IFRIUkVFLkdlb21ldHJ5LGQ9bmV3IFRIUkVFLkxpbmVCYXNpY01hdGVyaWFsKHt2ZXJ0ZXhDb2xvcnM6VEhSRUUuVmVydGV4Q29sb3JzfSk7dGhpcy5jb2xvcjE9bmV3IFRIUkVFLkNvbG9yKDQ0NzM5MjQpO3RoaXMuY29sb3IyPW5ldyBUSFJFRS5Db2xvcig4OTQ3ODQ4KTtmb3IodmFyIGU9LWE7ZTw9YTtlKz1iKXtjLnZlcnRpY2VzLnB1c2gobmV3IFRIUkVFLlZlY3RvcjMoLWEsMCxlKSxuZXcgVEhSRUUuVmVjdG9yMyhhLDAsZSksbmV3IFRIUkVFLlZlY3RvcjMoZSwwLC1hKSxuZXcgVEhSRUUuVmVjdG9yMyhlLDAsYSkpO3ZhciBnPTA9PT1lP3RoaXMuY29sb3IxOnRoaXMuY29sb3IyO2MuY29sb3JzLnB1c2goZyxnLGcsZyl9VEhSRUUuTGluZVNlZ21lbnRzLmNhbGwodGhpcyxjLGQpfTtUSFJFRS5HcmlkSGVscGVyLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkxpbmVTZWdtZW50cy5wcm90b3R5cGUpO1xuVEhSRUUuR3JpZEhlbHBlci5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuR3JpZEhlbHBlcjtUSFJFRS5HcmlkSGVscGVyLnByb3RvdHlwZS5zZXRDb2xvcnM9ZnVuY3Rpb24oYSxiKXt0aGlzLmNvbG9yMS5zZXQoYSk7dGhpcy5jb2xvcjIuc2V0KGIpO3RoaXMuZ2VvbWV0cnkuY29sb3JzTmVlZFVwZGF0ZT0hMH07XG5USFJFRS5IZW1pc3BoZXJlTGlnaHRIZWxwZXI9ZnVuY3Rpb24oYSxiKXtUSFJFRS5PYmplY3QzRC5jYWxsKHRoaXMpO3RoaXMubGlnaHQ9YTt0aGlzLmxpZ2h0LnVwZGF0ZU1hdHJpeFdvcmxkKCk7dGhpcy5tYXRyaXg9YS5tYXRyaXhXb3JsZDt0aGlzLm1hdHJpeEF1dG9VcGRhdGU9ITE7dGhpcy5jb2xvcnM9W25ldyBUSFJFRS5Db2xvcixuZXcgVEhSRUUuQ29sb3JdO3ZhciBjPW5ldyBUSFJFRS5TcGhlcmVHZW9tZXRyeShiLDQsMik7Yy5yb3RhdGVYKC1NYXRoLlBJLzIpO2Zvcih2YXIgZD0wOzg+ZDtkKyspYy5mYWNlc1tkXS5jb2xvcj10aGlzLmNvbG9yc1s0PmQ/MDoxXTtkPW5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCh7dmVydGV4Q29sb3JzOlRIUkVFLkZhY2VDb2xvcnMsd2lyZWZyYW1lOiEwfSk7dGhpcy5saWdodFNwaGVyZT1uZXcgVEhSRUUuTWVzaChjLGQpO3RoaXMuYWRkKHRoaXMubGlnaHRTcGhlcmUpO3RoaXMudXBkYXRlKCl9O1xuVEhSRUUuSGVtaXNwaGVyZUxpZ2h0SGVscGVyLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLk9iamVjdDNELnByb3RvdHlwZSk7VEhSRUUuSGVtaXNwaGVyZUxpZ2h0SGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5IZW1pc3BoZXJlTGlnaHRIZWxwZXI7VEhSRUUuSGVtaXNwaGVyZUxpZ2h0SGVscGVyLnByb3RvdHlwZS5kaXNwb3NlPWZ1bmN0aW9uKCl7dGhpcy5saWdodFNwaGVyZS5nZW9tZXRyeS5kaXNwb3NlKCk7dGhpcy5saWdodFNwaGVyZS5tYXRlcmlhbC5kaXNwb3NlKCl9O1xuVEhSRUUuSGVtaXNwaGVyZUxpZ2h0SGVscGVyLnByb3RvdHlwZS51cGRhdGU9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuVmVjdG9yMztyZXR1cm4gZnVuY3Rpb24oKXt0aGlzLmNvbG9yc1swXS5jb3B5KHRoaXMubGlnaHQuY29sb3IpLm11bHRpcGx5U2NhbGFyKHRoaXMubGlnaHQuaW50ZW5zaXR5KTt0aGlzLmNvbG9yc1sxXS5jb3B5KHRoaXMubGlnaHQuZ3JvdW5kQ29sb3IpLm11bHRpcGx5U2NhbGFyKHRoaXMubGlnaHQuaW50ZW5zaXR5KTt0aGlzLmxpZ2h0U3BoZXJlLmxvb2tBdChhLnNldEZyb21NYXRyaXhQb3NpdGlvbih0aGlzLmxpZ2h0Lm1hdHJpeFdvcmxkKS5uZWdhdGUoKSk7dGhpcy5saWdodFNwaGVyZS5nZW9tZXRyeS5jb2xvcnNOZWVkVXBkYXRlPSEwfX0oKTtcblRIUkVFLlBvaW50TGlnaHRIZWxwZXI9ZnVuY3Rpb24oYSxiKXt0aGlzLmxpZ2h0PWE7dGhpcy5saWdodC51cGRhdGVNYXRyaXhXb3JsZCgpO3ZhciBjPW5ldyBUSFJFRS5TcGhlcmVHZW9tZXRyeShiLDQsMiksZD1uZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoe3dpcmVmcmFtZTohMCxmb2c6ITF9KTtkLmNvbG9yLmNvcHkodGhpcy5saWdodC5jb2xvcikubXVsdGlwbHlTY2FsYXIodGhpcy5saWdodC5pbnRlbnNpdHkpO1RIUkVFLk1lc2guY2FsbCh0aGlzLGMsZCk7dGhpcy5tYXRyaXg9dGhpcy5saWdodC5tYXRyaXhXb3JsZDt0aGlzLm1hdHJpeEF1dG9VcGRhdGU9ITF9O1RIUkVFLlBvaW50TGlnaHRIZWxwZXIucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuTWVzaC5wcm90b3R5cGUpO1RIUkVFLlBvaW50TGlnaHRIZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLlBvaW50TGlnaHRIZWxwZXI7XG5USFJFRS5Qb2ludExpZ2h0SGVscGVyLnByb3RvdHlwZS5kaXNwb3NlPWZ1bmN0aW9uKCl7dGhpcy5nZW9tZXRyeS5kaXNwb3NlKCk7dGhpcy5tYXRlcmlhbC5kaXNwb3NlKCl9O1RIUkVFLlBvaW50TGlnaHRIZWxwZXIucHJvdG90eXBlLnVwZGF0ZT1mdW5jdGlvbigpe3RoaXMubWF0ZXJpYWwuY29sb3IuY29weSh0aGlzLmxpZ2h0LmNvbG9yKS5tdWx0aXBseVNjYWxhcih0aGlzLmxpZ2h0LmludGVuc2l0eSl9O1xuVEhSRUUuU2tlbGV0b25IZWxwZXI9ZnVuY3Rpb24oYSl7dGhpcy5ib25lcz10aGlzLmdldEJvbmVMaXN0KGEpO2Zvcih2YXIgYj1uZXcgVEhSRUUuR2VvbWV0cnksYz0wO2M8dGhpcy5ib25lcy5sZW5ndGg7YysrKXRoaXMuYm9uZXNbY10ucGFyZW50IGluc3RhbmNlb2YgVEhSRUUuQm9uZSYmKGIudmVydGljZXMucHVzaChuZXcgVEhSRUUuVmVjdG9yMyksYi52ZXJ0aWNlcy5wdXNoKG5ldyBUSFJFRS5WZWN0b3IzKSxiLmNvbG9ycy5wdXNoKG5ldyBUSFJFRS5Db2xvcigwLDAsMSkpLGIuY29sb3JzLnB1c2gobmV3IFRIUkVFLkNvbG9yKDAsMSwwKSkpO2IuZHluYW1pYz0hMDtjPW5ldyBUSFJFRS5MaW5lQmFzaWNNYXRlcmlhbCh7dmVydGV4Q29sb3JzOlRIUkVFLlZlcnRleENvbG9ycyxkZXB0aFRlc3Q6ITEsZGVwdGhXcml0ZTohMSx0cmFuc3BhcmVudDohMH0pO1RIUkVFLkxpbmVTZWdtZW50cy5jYWxsKHRoaXMsYixjKTt0aGlzLnJvb3Q9YTt0aGlzLm1hdHJpeD1hLm1hdHJpeFdvcmxkO1xudGhpcy5tYXRyaXhBdXRvVXBkYXRlPSExO3RoaXMudXBkYXRlKCl9O1RIUkVFLlNrZWxldG9uSGVscGVyLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkxpbmVTZWdtZW50cy5wcm90b3R5cGUpO1RIUkVFLlNrZWxldG9uSGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5Ta2VsZXRvbkhlbHBlcjtUSFJFRS5Ta2VsZXRvbkhlbHBlci5wcm90b3R5cGUuZ2V0Qm9uZUxpc3Q9ZnVuY3Rpb24oYSl7dmFyIGI9W107YSBpbnN0YW5jZW9mIFRIUkVFLkJvbmUmJmIucHVzaChhKTtmb3IodmFyIGM9MDtjPGEuY2hpbGRyZW4ubGVuZ3RoO2MrKyliLnB1c2guYXBwbHkoYix0aGlzLmdldEJvbmVMaXN0KGEuY2hpbGRyZW5bY10pKTtyZXR1cm4gYn07XG5USFJFRS5Ta2VsZXRvbkhlbHBlci5wcm90b3R5cGUudXBkYXRlPWZ1bmN0aW9uKCl7Zm9yKHZhciBhPXRoaXMuZ2VvbWV0cnksYj0obmV3IFRIUkVFLk1hdHJpeDQpLmdldEludmVyc2UodGhpcy5yb290Lm1hdHJpeFdvcmxkKSxjPW5ldyBUSFJFRS5NYXRyaXg0LGQ9MCxlPTA7ZTx0aGlzLmJvbmVzLmxlbmd0aDtlKyspe3ZhciBnPXRoaXMuYm9uZXNbZV07Zy5wYXJlbnQgaW5zdGFuY2VvZiBUSFJFRS5Cb25lJiYoYy5tdWx0aXBseU1hdHJpY2VzKGIsZy5tYXRyaXhXb3JsZCksYS52ZXJ0aWNlc1tkXS5zZXRGcm9tTWF0cml4UG9zaXRpb24oYyksYy5tdWx0aXBseU1hdHJpY2VzKGIsZy5wYXJlbnQubWF0cml4V29ybGQpLGEudmVydGljZXNbZCsxXS5zZXRGcm9tTWF0cml4UG9zaXRpb24oYyksZCs9Mil9YS52ZXJ0aWNlc05lZWRVcGRhdGU9ITA7YS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKX07XG5USFJFRS5TcG90TGlnaHRIZWxwZXI9ZnVuY3Rpb24oYSl7VEhSRUUuT2JqZWN0M0QuY2FsbCh0aGlzKTt0aGlzLmxpZ2h0PWE7dGhpcy5saWdodC51cGRhdGVNYXRyaXhXb3JsZCgpO3RoaXMubWF0cml4PWEubWF0cml4V29ybGQ7dGhpcy5tYXRyaXhBdXRvVXBkYXRlPSExO2E9bmV3IFRIUkVFLkN5bGluZGVyR2VvbWV0cnkoMCwxLDEsOCwxLCEwKTthLnRyYW5zbGF0ZSgwLC0uNSwwKTthLnJvdGF0ZVgoLU1hdGguUEkvMik7dmFyIGI9bmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKHt3aXJlZnJhbWU6ITAsZm9nOiExfSk7dGhpcy5jb25lPW5ldyBUSFJFRS5NZXNoKGEsYik7dGhpcy5hZGQodGhpcy5jb25lKTt0aGlzLnVwZGF0ZSgpfTtUSFJFRS5TcG90TGlnaHRIZWxwZXIucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuT2JqZWN0M0QucHJvdG90eXBlKTtUSFJFRS5TcG90TGlnaHRIZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLlNwb3RMaWdodEhlbHBlcjtcblRIUkVFLlNwb3RMaWdodEhlbHBlci5wcm90b3R5cGUuZGlzcG9zZT1mdW5jdGlvbigpe3RoaXMuY29uZS5nZW9tZXRyeS5kaXNwb3NlKCk7dGhpcy5jb25lLm1hdGVyaWFsLmRpc3Bvc2UoKX07VEhSRUUuU3BvdExpZ2h0SGVscGVyLnByb3RvdHlwZS51cGRhdGU9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuVmVjdG9yMyxiPW5ldyBUSFJFRS5WZWN0b3IzO3JldHVybiBmdW5jdGlvbigpe3ZhciBjPXRoaXMubGlnaHQuZGlzdGFuY2U/dGhpcy5saWdodC5kaXN0YW5jZToxRTQsZD1jKk1hdGgudGFuKHRoaXMubGlnaHQuYW5nbGUpO3RoaXMuY29uZS5zY2FsZS5zZXQoZCxkLGMpO2Euc2V0RnJvbU1hdHJpeFBvc2l0aW9uKHRoaXMubGlnaHQubWF0cml4V29ybGQpO2Iuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKHRoaXMubGlnaHQudGFyZ2V0Lm1hdHJpeFdvcmxkKTt0aGlzLmNvbmUubG9va0F0KGIuc3ViKGEpKTt0aGlzLmNvbmUubWF0ZXJpYWwuY29sb3IuY29weSh0aGlzLmxpZ2h0LmNvbG9yKS5tdWx0aXBseVNjYWxhcih0aGlzLmxpZ2h0LmludGVuc2l0eSl9fSgpO1xuVEhSRUUuVmVydGV4Tm9ybWFsc0hlbHBlcj1mdW5jdGlvbihhLGIsYyxkKXt0aGlzLm9iamVjdD1hO3RoaXMuc2l6ZT12b2lkIDAhPT1iP2I6MTthPXZvaWQgMCE9PWM/YzoxNjcxMTY4MDtkPXZvaWQgMCE9PWQ/ZDoxO2I9MDtjPXRoaXMub2JqZWN0Lmdlb21ldHJ5O2MgaW5zdGFuY2VvZiBUSFJFRS5HZW9tZXRyeT9iPTMqYy5mYWNlcy5sZW5ndGg6YyBpbnN0YW5jZW9mIFRIUkVFLkJ1ZmZlckdlb21ldHJ5JiYoYj1jLmF0dHJpYnV0ZXMubm9ybWFsLmNvdW50KTtjPW5ldyBUSFJFRS5CdWZmZXJHZW9tZXRyeTtiPW5ldyBUSFJFRS5GbG9hdDMyQXR0cmlidXRlKDYqYiwzKTtjLmFkZEF0dHJpYnV0ZShcInBvc2l0aW9uXCIsYik7VEhSRUUuTGluZVNlZ21lbnRzLmNhbGwodGhpcyxjLG5ldyBUSFJFRS5MaW5lQmFzaWNNYXRlcmlhbCh7Y29sb3I6YSxsaW5ld2lkdGg6ZH0pKTt0aGlzLm1hdHJpeEF1dG9VcGRhdGU9ITE7dGhpcy51cGRhdGUoKX07XG5USFJFRS5WZXJ0ZXhOb3JtYWxzSGVscGVyLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkxpbmVTZWdtZW50cy5wcm90b3R5cGUpO1RIUkVFLlZlcnRleE5vcm1hbHNIZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLlZlcnRleE5vcm1hbHNIZWxwZXI7XG5USFJFRS5WZXJ0ZXhOb3JtYWxzSGVscGVyLnByb3RvdHlwZS51cGRhdGU9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuVmVjdG9yMyxiPW5ldyBUSFJFRS5WZWN0b3IzLGM9bmV3IFRIUkVFLk1hdHJpeDM7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGQ9W1wiYVwiLFwiYlwiLFwiY1wiXTt0aGlzLm9iamVjdC51cGRhdGVNYXRyaXhXb3JsZCghMCk7Yy5nZXROb3JtYWxNYXRyaXgodGhpcy5vYmplY3QubWF0cml4V29ybGQpO3ZhciBlPXRoaXMub2JqZWN0Lm1hdHJpeFdvcmxkLGc9dGhpcy5nZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLGY9dGhpcy5vYmplY3QuZ2VvbWV0cnk7aWYoZiBpbnN0YW5jZW9mIFRIUkVFLkdlb21ldHJ5KWZvcih2YXIgaD1mLnZlcnRpY2VzLGw9Zi5mYWNlcyxrPWY9MCxtPWwubGVuZ3RoO2s8bTtrKyspZm9yKHZhciBwPWxba10sbj0wLHE9cC52ZXJ0ZXhOb3JtYWxzLmxlbmd0aDtuPHE7bisrKXt2YXIgcz1wLnZlcnRleE5vcm1hbHNbbl07YS5jb3B5KGhbcFtkW25dXV0pLmFwcGx5TWF0cml4NChlKTtcbmIuY29weShzKS5hcHBseU1hdHJpeDMoYykubm9ybWFsaXplKCkubXVsdGlwbHlTY2FsYXIodGhpcy5zaXplKS5hZGQoYSk7Zy5zZXRYWVooZixhLngsYS55LGEueik7Zis9MTtnLnNldFhZWihmLGIueCxiLnksYi56KTtmKz0xfWVsc2UgaWYoZiBpbnN0YW5jZW9mIFRIUkVFLkJ1ZmZlckdlb21ldHJ5KWZvcihkPWYuYXR0cmlidXRlcy5wb3NpdGlvbixoPWYuYXR0cmlidXRlcy5ub3JtYWwsbj1mPTAscT1kLmNvdW50O248cTtuKyspYS5zZXQoZC5nZXRYKG4pLGQuZ2V0WShuKSxkLmdldFoobikpLmFwcGx5TWF0cml4NChlKSxiLnNldChoLmdldFgobiksaC5nZXRZKG4pLGguZ2V0WihuKSksYi5hcHBseU1hdHJpeDMoYykubm9ybWFsaXplKCkubXVsdGlwbHlTY2FsYXIodGhpcy5zaXplKS5hZGQoYSksZy5zZXRYWVooZixhLngsYS55LGEueiksZis9MSxnLnNldFhZWihmLGIueCxiLnksYi56KSxmKz0xO2cubmVlZHNVcGRhdGU9ITA7cmV0dXJuIHRoaXN9fSgpO1xuVEhSRUUuV2lyZWZyYW1lSGVscGVyPWZ1bmN0aW9uKGEsYil7dmFyIGM9dm9pZCAwIT09Yj9iOjE2Nzc3MjE1O1RIUkVFLkxpbmVTZWdtZW50cy5jYWxsKHRoaXMsbmV3IFRIUkVFLldpcmVmcmFtZUdlb21ldHJ5KGEuZ2VvbWV0cnkpLG5ldyBUSFJFRS5MaW5lQmFzaWNNYXRlcmlhbCh7Y29sb3I6Y30pKTt0aGlzLm1hdHJpeD1hLm1hdHJpeFdvcmxkO3RoaXMubWF0cml4QXV0b1VwZGF0ZT0hMX07VEhSRUUuV2lyZWZyYW1lSGVscGVyLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkxpbmVTZWdtZW50cy5wcm90b3R5cGUpO1RIUkVFLldpcmVmcmFtZUhlbHBlci5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuV2lyZWZyYW1lSGVscGVyO1RIUkVFLkltbWVkaWF0ZVJlbmRlck9iamVjdD1mdW5jdGlvbihhKXtUSFJFRS5PYmplY3QzRC5jYWxsKHRoaXMpO3RoaXMubWF0ZXJpYWw9YTt0aGlzLnJlbmRlcj1mdW5jdGlvbihhKXt9fTtcblRIUkVFLkltbWVkaWF0ZVJlbmRlck9iamVjdC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5PYmplY3QzRC5wcm90b3R5cGUpO1RIUkVFLkltbWVkaWF0ZVJlbmRlck9iamVjdC5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuSW1tZWRpYXRlUmVuZGVyT2JqZWN0O1RIUkVFLk1vcnBoQmxlbmRNZXNoPWZ1bmN0aW9uKGEsYil7VEhSRUUuTWVzaC5jYWxsKHRoaXMsYSxiKTt0aGlzLmFuaW1hdGlvbnNNYXA9e307dGhpcy5hbmltYXRpb25zTGlzdD1bXTt2YXIgYz10aGlzLmdlb21ldHJ5Lm1vcnBoVGFyZ2V0cy5sZW5ndGg7dGhpcy5jcmVhdGVBbmltYXRpb24oXCJfX2RlZmF1bHRcIiwwLGMtMSxjLzEpO3RoaXMuc2V0QW5pbWF0aW9uV2VpZ2h0KFwiX19kZWZhdWx0XCIsMSl9O1RIUkVFLk1vcnBoQmxlbmRNZXNoLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLk1lc2gucHJvdG90eXBlKTtUSFJFRS5Nb3JwaEJsZW5kTWVzaC5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuTW9ycGhCbGVuZE1lc2g7XG5USFJFRS5Nb3JwaEJsZW5kTWVzaC5wcm90b3R5cGUuY3JlYXRlQW5pbWF0aW9uPWZ1bmN0aW9uKGEsYixjLGQpe2I9e3N0YXJ0OmIsZW5kOmMsbGVuZ3RoOmMtYisxLGZwczpkLGR1cmF0aW9uOihjLWIpL2QsbGFzdEZyYW1lOjAsY3VycmVudEZyYW1lOjAsYWN0aXZlOiExLHRpbWU6MCxkaXJlY3Rpb246MSx3ZWlnaHQ6MSxkaXJlY3Rpb25CYWNrd2FyZHM6ITEsbWlycm9yZWRMb29wOiExfTt0aGlzLmFuaW1hdGlvbnNNYXBbYV09Yjt0aGlzLmFuaW1hdGlvbnNMaXN0LnB1c2goYil9O1xuVEhSRUUuTW9ycGhCbGVuZE1lc2gucHJvdG90eXBlLmF1dG9DcmVhdGVBbmltYXRpb25zPWZ1bmN0aW9uKGEpe2Zvcih2YXIgYj0vKFthLXpdKylfPyhcXGQrKS8sYyxkPXt9LGU9dGhpcy5nZW9tZXRyeSxnPTAsZj1lLm1vcnBoVGFyZ2V0cy5sZW5ndGg7ZzxmO2crKyl7dmFyIGg9ZS5tb3JwaFRhcmdldHNbZ10ubmFtZS5tYXRjaChiKTtpZihoJiYxPGgubGVuZ3RoKXt2YXIgbD1oWzFdO2RbbF18fChkW2xdPXtzdGFydDpJbmZpbml0eSxlbmQ6LUluZmluaXR5fSk7aD1kW2xdO2c8aC5zdGFydCYmKGguc3RhcnQ9Zyk7Zz5oLmVuZCYmKGguZW5kPWcpO2N8fChjPWwpfX1mb3IobCBpbiBkKWg9ZFtsXSx0aGlzLmNyZWF0ZUFuaW1hdGlvbihsLGguc3RhcnQsaC5lbmQsYSk7dGhpcy5maXJzdEFuaW1hdGlvbj1jfTtcblRIUkVFLk1vcnBoQmxlbmRNZXNoLnByb3RvdHlwZS5zZXRBbmltYXRpb25EaXJlY3Rpb25Gb3J3YXJkPWZ1bmN0aW9uKGEpe2lmKGE9dGhpcy5hbmltYXRpb25zTWFwW2FdKWEuZGlyZWN0aW9uPTEsYS5kaXJlY3Rpb25CYWNrd2FyZHM9ITF9O1RIUkVFLk1vcnBoQmxlbmRNZXNoLnByb3RvdHlwZS5zZXRBbmltYXRpb25EaXJlY3Rpb25CYWNrd2FyZD1mdW5jdGlvbihhKXtpZihhPXRoaXMuYW5pbWF0aW9uc01hcFthXSlhLmRpcmVjdGlvbj0tMSxhLmRpcmVjdGlvbkJhY2t3YXJkcz0hMH07VEhSRUUuTW9ycGhCbGVuZE1lc2gucHJvdG90eXBlLnNldEFuaW1hdGlvbkZQUz1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuYW5pbWF0aW9uc01hcFthXTtjJiYoYy5mcHM9YixjLmR1cmF0aW9uPShjLmVuZC1jLnN0YXJ0KS9jLmZwcyl9O1xuVEhSRUUuTW9ycGhCbGVuZE1lc2gucHJvdG90eXBlLnNldEFuaW1hdGlvbkR1cmF0aW9uPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5hbmltYXRpb25zTWFwW2FdO2MmJihjLmR1cmF0aW9uPWIsYy5mcHM9KGMuZW5kLWMuc3RhcnQpL2MuZHVyYXRpb24pfTtUSFJFRS5Nb3JwaEJsZW5kTWVzaC5wcm90b3R5cGUuc2V0QW5pbWF0aW9uV2VpZ2h0PWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5hbmltYXRpb25zTWFwW2FdO2MmJihjLndlaWdodD1iKX07VEhSRUUuTW9ycGhCbGVuZE1lc2gucHJvdG90eXBlLnNldEFuaW1hdGlvblRpbWU9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLmFuaW1hdGlvbnNNYXBbYV07YyYmKGMudGltZT1iKX07VEhSRUUuTW9ycGhCbGVuZE1lc2gucHJvdG90eXBlLmdldEFuaW1hdGlvblRpbWU9ZnVuY3Rpb24oYSl7dmFyIGI9MDtpZihhPXRoaXMuYW5pbWF0aW9uc01hcFthXSliPWEudGltZTtyZXR1cm4gYn07XG5USFJFRS5Nb3JwaEJsZW5kTWVzaC5wcm90b3R5cGUuZ2V0QW5pbWF0aW9uRHVyYXRpb249ZnVuY3Rpb24oYSl7dmFyIGI9LTE7aWYoYT10aGlzLmFuaW1hdGlvbnNNYXBbYV0pYj1hLmR1cmF0aW9uO3JldHVybiBifTtUSFJFRS5Nb3JwaEJsZW5kTWVzaC5wcm90b3R5cGUucGxheUFuaW1hdGlvbj1mdW5jdGlvbihhKXt2YXIgYj10aGlzLmFuaW1hdGlvbnNNYXBbYV07Yj8oYi50aW1lPTAsYi5hY3RpdmU9ITApOmNvbnNvbGUud2FybihcIlRIUkVFLk1vcnBoQmxlbmRNZXNoOiBhbmltYXRpb25bXCIrYStcIl0gdW5kZWZpbmVkIGluIC5wbGF5QW5pbWF0aW9uKClcIil9O1RIUkVFLk1vcnBoQmxlbmRNZXNoLnByb3RvdHlwZS5zdG9wQW5pbWF0aW9uPWZ1bmN0aW9uKGEpe2lmKGE9dGhpcy5hbmltYXRpb25zTWFwW2FdKWEuYWN0aXZlPSExfTtcblRIUkVFLk1vcnBoQmxlbmRNZXNoLnByb3RvdHlwZS51cGRhdGU9ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPTAsYz10aGlzLmFuaW1hdGlvbnNMaXN0Lmxlbmd0aDtiPGM7YisrKXt2YXIgZD10aGlzLmFuaW1hdGlvbnNMaXN0W2JdO2lmKGQuYWN0aXZlKXt2YXIgZT1kLmR1cmF0aW9uL2QubGVuZ3RoO2QudGltZSs9ZC5kaXJlY3Rpb24qYTtpZihkLm1pcnJvcmVkTG9vcCl7aWYoZC50aW1lPmQuZHVyYXRpb258fDA+ZC50aW1lKWQuZGlyZWN0aW9uKj0tMSxkLnRpbWU+ZC5kdXJhdGlvbiYmKGQudGltZT1kLmR1cmF0aW9uLGQuZGlyZWN0aW9uQmFja3dhcmRzPSEwKSwwPmQudGltZSYmKGQudGltZT0wLGQuZGlyZWN0aW9uQmFja3dhcmRzPSExKX1lbHNlIGQudGltZSU9ZC5kdXJhdGlvbiwwPmQudGltZSYmKGQudGltZSs9ZC5kdXJhdGlvbik7dmFyIGc9ZC5zdGFydCtUSFJFRS5NYXRoLmNsYW1wKE1hdGguZmxvb3IoZC50aW1lL2UpLDAsZC5sZW5ndGgtMSksZj1kLndlaWdodDtnIT09ZC5jdXJyZW50RnJhbWUmJlxuKHRoaXMubW9ycGhUYXJnZXRJbmZsdWVuY2VzW2QubGFzdEZyYW1lXT0wLHRoaXMubW9ycGhUYXJnZXRJbmZsdWVuY2VzW2QuY3VycmVudEZyYW1lXT0xKmYsdGhpcy5tb3JwaFRhcmdldEluZmx1ZW5jZXNbZ109MCxkLmxhc3RGcmFtZT1kLmN1cnJlbnRGcmFtZSxkLmN1cnJlbnRGcmFtZT1nKTtlPWQudGltZSVlL2U7ZC5kaXJlY3Rpb25CYWNrd2FyZHMmJihlPTEtZSk7ZC5jdXJyZW50RnJhbWUhPT1kLmxhc3RGcmFtZT8odGhpcy5tb3JwaFRhcmdldEluZmx1ZW5jZXNbZC5jdXJyZW50RnJhbWVdPWUqZix0aGlzLm1vcnBoVGFyZ2V0SW5mbHVlbmNlc1tkLmxhc3RGcmFtZV09KDEtZSkqZik6dGhpcy5tb3JwaFRhcmdldEluZmx1ZW5jZXNbZC5jdXJyZW50RnJhbWVdPWZ9fX07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL1VzZXJzL1RlcmFNYWMvRG9jdW1lbnRzLzAwX1N0b2NrLzEwX2Jhc2UvZnJvbnRlbmRfYmFzZV92ZXIwMi9kZXZlbG9wbWVudC9wcm9qZWN0LW5hbWUvYXNzZXRzL2pzL19kZXZqcy9saWJzL3RocmVlLm1pbi5qcyJdLCJzb3VyY2VSb290IjoiIn0=