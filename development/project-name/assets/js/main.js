/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _Common = __webpack_require__(1);
	
	var _Common2 = _interopRequireDefault(_Common);
	
	var _Main = __webpack_require__(28);
	
	var _Main2 = _interopRequireDefault(_Main);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * fileOverview:
	 * Project:
	 * File: Top
	 * Date:
	 * Author:
	 */
	
	(function () {
	
	  // globalオブジェクト
	  if (window.gb === undefined) window.gb = {};
	  window.gb.in = {}; //instance
	
	  gb.in.common = new _Common2.default();
	  gb.in.main = new _Main2.default();
	})();

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
	fileOverview:
	roject:
	ile: Common
	ate:
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Author:
	
	
	// import Pjax from '../Func/Pjax.js';
	
	
	// import Menu from '../Display/UI/_compornents/Menu.js';
	// import Nav from '../Display/UI/Nav.js';
	// import Alert from '../Display/UI/Alert.js';
	// import SideR from '../Display/UI/SideR.js';
	// import Time from '../Func/Time.js';
	
	// import PageTop from '../Display/UI/_parts/PageTop.js';
	// import Sec01Video from '../Display/UI/Sec01Video.js';
	
	// import SliderTop from '../Display/UI/SliderTop.js';
	
	
	var _Conf = __webpack_require__(2);
	
	var _Conf2 = _interopRequireDefault(_Conf);
	
	var _Util = __webpack_require__(4);
	
	var _Util2 = _interopRequireDefault(_Util);
	
	var _Func = __webpack_require__(5);
	
	var _Func2 = _interopRequireDefault(_Func);
	
	var _ReadyMgr = __webpack_require__(6);
	
	var _ReadyMgr2 = _interopRequireDefault(_ReadyMgr);
	
	var _UpdateMgr = __webpack_require__(8);
	
	var _UpdateMgr2 = _interopRequireDefault(_UpdateMgr);
	
	var _ResizeMgr = __webpack_require__(9);
	
	var _ResizeMgr2 = _interopRequireDefault(_ResizeMgr);
	
	var _ScrollMgr = __webpack_require__(10);
	
	var _ScrollMgr2 = _interopRequireDefault(_ScrollMgr);
	
	var _MouseMgr = __webpack_require__(11);
	
	var _MouseMgr2 = _interopRequireDefault(_MouseMgr);
	
	var _LoadMgr = __webpack_require__(12);
	
	var _LoadMgr2 = _interopRequireDefault(_LoadMgr);
	
	var _JudgeEnvironment = __webpack_require__(18);
	
	var _JudgeEnvironment2 = _interopRequireDefault(_JudgeEnvironment);
	
	var _ResponsiveSwitchImg = __webpack_require__(19);
	
	var _ResponsiveSwitchImg2 = _interopRequireDefault(_ResponsiveSwitchImg);
	
	var _SwipeTransition = __webpack_require__(20);
	
	var _SwipeTransition2 = _interopRequireDefault(_SwipeTransition);
	
	var _ScrollTransition = __webpack_require__(21);
	
	var _ScrollTransition2 = _interopRequireDefault(_ScrollTransition);
	
	var _Sns = __webpack_require__(22);
	
	var _Sns2 = _interopRequireDefault(_Sns);
	
	var _Layout = __webpack_require__(24);
	
	var _Layout2 = _interopRequireDefault(_Layout);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	'use strict';
	
	var Common = function () {
	  function Common() {
	    _classCallCheck(this, Common);
	
	    this.onImmediate();
	    this.setEvents();
	  }
	
	  _createClass(Common, [{
	    key: 'onImmediate',
	    value: function onImmediate() {
	
	      // ------------------------------------------------------------
	      //  初期値の設定・データの配置
	      //  util関数の初期化
	      //  イベントマネージャーの設置
	      // ------------------------------------------------------------
	      gb.in.conf = new _Conf2.default();
	      gb.in.u = new _Util2.default();
	      gb.in.f = new _Func2.default();
	      // gb.in.up = new UpdateMgr();
	      // gb.in.r = new ResizeMgr();
	      // gb.in.s = new ScrollMgr();
	      // gb.in.m = new MouseMgr();
	      // gb.in.rm = new ReadyMgr();
	      // gb.in.loadMgr = new LoadMgr();
	      // gb.in.sct = new ScrollTransition();
	
	      // ------------------------------------------------------------
	      //
	      //  その他
	      //
	      // ------------------------------------------------------------
	      // pjaxの設定
	      // gb.in.pjax = new Pjax();
	
	      // ------------------------------------------------------------
	      //  Layout
	      // ------------------------------------------------------------
	      // gb.in.Layout = new Layout();
	
	
	      // 準備完了後の処理
	      // gb.in.rm.onCompletedFunc = ()=>{new DisplayOpening();}
	    }
	  }, {
	    key: 'onReady',
	    value: function onReady() {
	
	      // ------------------------------------------------------------
	      //  デバイス・ブラウザ判定
	      //  スマホの向き判定
	      //  ページ情報取得
	      // ------------------------------------------------------------
	      // gb.in.je = new JudgeEnvironment();
	      // gb.in.resImg = new ResponsiveSwitchImg();
	      // gb.in.sns = new Sns($('.fbShare'),$('.twShare'),$('.lineShare'),$('.onMail'))
	      // gb.in.swt = new SwipeTransition();
	
	      // gb.in.f.checkCssBlend();
	
	      // ------------------------------------------------------------
	      //  UI
	      // ------------------------------------------------------------
	      // gb.in.menu = new Menu();
	      // gb.in.nav = new Nav();
	      // gb.in.sideR = new SideR();
	      // gb.in.alert = new Alert();
	      // gb.in.pagetop = new PageTop();
	
	      // bg
	      // gb.in.sliderTop = new SliderTop($('#bgWrap .sec01'));
	
	      // ------------------------------------------------------------
	      //  Effects
	      // ------------------------------------------------------------
	      // gb.in.pageTransitionEffect = new PageTransitionEffect($('#pageTransitionLayer'));
	      // gb.in.sec01Video = new Sec01Video();
	      // gb.in.Sec02Bg = new Section02Bg();
	
	      // gb.in.he01 = new HoverEffectSVG($('.SVGHover'),'#fff','#000');
	      // gb.in.he02 = new HoverEffectSVG($('.SVGHoverW'),'#81d8d0','#fff');
	      // gb.in.he03 = new HoverEffectSVG($('.SVGHoverW02'),'#81d8d0','#000');
	      // gb.in.he04 = new HoverEffectSVGLogo($('#header .logo, #header .subTit'));
	      // gb.in.he05 = new HoverEffectMenuItem($('#menu .menuList .item'));
	      // gb.in.he06 = new HoverEffectSVGArrowSideR($('#sideR .next'));
	      // gb.in.he07 = new HoverEffectMenuBtn($('.menuBtn01'));
	      // gb.in.he08 = new HoverEffectSNSPCFooter($('#sideL .sns.sp'));
	
	      // logo 出す
	      // TweenMax.to($('#header .logo'), 2.2, {opacity: 1, ease: Power2.easeInOut})
	
	      // gb.in.loadMgr.start();
	
	    }
	  }, {
	    key: 'onLoad',
	    value: function onLoad() {
	
	      // ------------------------------------------------------------
	      //
	      //  Func
	      //
	      // ------------------------------------------------------------
	
	
	      // ------------------------------------------------------------
	      //
	      //  Layout
	      //
	      // ------------------------------------------------------------
	
	      // ------------------------------------------------------------
	      //
	      //  Dispaly
	      //
	      // ------------------------------------------------------------
	
	      // ------------------------------------------------------------
	      //
	      //  Motion
	      //
	      // ------------------------------------------------------------
	
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	
	      $(document).on('ready', this.onReady.bind(this));
	      $(window).on('load', this.onLoad.bind(this));
	    }
	  }]);
	
	  return Common;
	}();
	
	exports.default = Common;

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
	fileOverview:
	roject:
	ile: Conf
	ate:
	uthor:
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      */
	
	var _Sound = __webpack_require__(3);
	
	var _Sound2 = _interopRequireDefault(_Sound);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Conf = function () {
	  function Conf() {
	    _classCallCheck(this, Conf);
	
	    // ------------------------------------------------------------
	    //  本番フラグ
	    // ------------------------------------------------------------    
	    this.RELEASE = true;
	    // this.RELEASE = false;
	
	    // ------------------------------------------------------------
	    //  フラグ関連
	    // ------------------------------------------------------------
	    this.FLG = {
	      LOG: true, // ログ出力
	      PARAM: true, // パラメータチェック
	      STATS: true // Stats表示
	    };
	    if (!this.RELEASE) {
	      this.FLG = {
	        LOG: false,
	        PARAM: false,
	        STATS: false
	      };
	    }
	
	    // ------------------------------------------------------------
	    //  基本 width height
	    // ------------------------------------------------------------
	    this.defW = 1300;
	    this.defH = 850;
	
	    this.W = 1200;
	    this.H = 750;
	
	    this.spW = 375;
	    this.spH = 667;
	
	    // ------------------------------------------------------------
	    //  ブレイクポイント
	    // ------------------------------------------------------------
	    this.bp = 768;
	
	    // ------------------------------------------------------------
	    //  mode
	    // ------------------------------------------------------------
	    this.mode = null;
	    this.keys = [{
	      'key': 'movie',
	      'value': ['morning', 'afternoon', 'night']
	    }, {
	      'key': 'data',
	      'value': ['data01', 'data02', 'data03']
	    }, {
	      'key': 'product',
	      'value': ['01']
	    }];
	    this.switchMode();
	
	    // ------------------------------------------------------------
	    //  sound data
	    // ------------------------------------------------------------
	    this.soundData = new _Sound2.default();
	
	    // ------------------------------------------------------------
	    //  sec02 bg Img Num
	    // ------------------------------------------------------------
	    this.sec02ImgNum = 396;
	
	    // ------------------------------------------------------------
	    //  youtube ID
	    // ------------------------------------------------------------
	    this.youtubeID01 = 'xW2oNpNrKd0';
	    this.youtubeID02 = 't2WeRRdAFeI';
	
	    // ------------------------------------------------------------
	    //  web font loaded
	    // ------------------------------------------------------------
	    this.webFontLoaded = false;
	  }
	
	  _createClass(Conf, [{
	    key: 'switchMode',
	    value: function switchMode() {
	
	      var i, key, len, param, ref, ref1, value;
	
	      ref = location.search.replace('?', '').split('&');
	
	      for (i = 0, len = ref.length; i < len; i++) {
	        param = ref[i];
	        ref1 = param.split('='), key = ref1[0], value = ref1[1];
	
	        for (var j = 0; j < this.keys.length; j++) {
	
	          var obj = this.keys[j];
	
	          // パラメータがキーと一緒だったら
	          if (obj.key === key) {
	
	            // 各値と比較
	            for (var k = 0; k < obj.value.length; k++) {
	
	              var val = obj.value[k];
	
	              // キーをthis.keysのkeyに、valueを比較して同値だったものに
	              if (val === value) this[obj.key] = val;
	            };
	          };
	        };
	      }
	    }
	  }]);
	
	  return Conf;
	}();
	
	exports.default = Conf;

/***/ },
/* 3 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	// ------------------------------------------------------------
	//
	//  Data
	//
	// ------------------------------------------------------------
	
	var SoundData = function SoundData() {
	
	  // this.ATARI01 = '/project-name/assets/sound/atari/Atari_04.wav';
	  // this.ATARI02 = '/project-name/assets/sound/atari/Atari_05.wav';
	
	  // this.BAN01 = '/project-name/assets/sound/don/Ba-n_01.wav';
	  // this.BAN02 = '/project-name/assets/sound/don/Ba-n_02.wav';
	  // this.BAN03 = '/project-name/assets/sound/don/Ba-n_03.wav';
	  // this.BAN04 = '/project-name/assets/sound/don/Ba-n_04.wav';
	
	  // this.DON01 = '/project-name/assets/sound/don/Big_Don_01.wav';
	  // this.DON02 = '/project-name/assets/sound/don/Big_Don_02.wav';
	  // this.DON03 = '/project-name/assets/sound/don/Big_Don_03.wav';
	  // this.DON04 = '/project-name/assets/sound/don/Don_04.wav';
	
	  // this.DODN01 = '/project-name/assets/sound/don/Dodon_01.wav';
	  // this.DODN02 = '/project-name/assets/sound/don/Dodon_02.wav';
	
	  // this.Gogogo01 = '/project-name/assets/sound/don/Gogogo_01.wav';
	  // this.Gogogo02 = '/project-name/assets/sound/don/Gogogo_02.wav';
	
	  // this.IKARI = '/project-name/assets/sound/ikari/Ikari_01.wav';
	
	  // this.ROULETTE01 = '/project-name/assets/sound/roulette/Roulette_01.wav';
	  // this.ROULETTE02 = '/project-name/assets/sound/roulette/Roulette_02.wav';
	  // this.ROULETTE03 = '/project-name/assets/sound/roulette/Roulette_03.wav';
	
	  // this.SEA = '/project-name/assets/sound/sea/Sea&kamome_01.wav';
	
	  _classCallCheck(this, SoundData);
	};
	
	exports.default = SoundData;

/***/ },
/* 4 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * fileOverview:
	 * Project:
	 * File: Util
	 * Date:
	 * Author:
	 */
	
	var Util = function () {
	  function Util() {
	    _classCallCheck(this, Util);
	
	    this.ua = window.navigator.userAgent.toLowerCase(); //useragent
	    this.appV = window.navigator.appVersion.toLowerCase(); //appVersion
	    this.isResSP = null; // responsive sp
	    this.isResPC = null; // responsive pc
	
	    this.isPC = null;
	    this.isSP = null;
	    this.isTAB = null;
	    this.isMB = null;
	
	    this.isIE = null;
	
	    this.isSetSPSize = false;
	
	    this.startTime = null;
	    this.elapsedTime = null;
	    this.now = new Date();
	  }
	
	  // ------------------------------------------------------------
	  //
	  //  Math
	  //
	  // ------------------------------------------------------------
	
	
	  // ランダムな整数を取得
	  // -----------------------------------
	  // @min : 最小値(int)
	  // @max : 最大値(int)
	  // return : minからmaxまでのランダムな整数(int)
	  // -----------------------------------
	
	
	  _createClass(Util, [{
	    key: "random",
	    value: function random(min, max) {
	
	      return Math.floor(Math.random() * (max + 1 - min) + min);
	    }
	
	    // ランダムな整数を2つの範囲から取得
	    // -----------------------------------
	    // @min1 : 最小値1(int)
	    // @max1 : 最大値1(int)
	    // @min2 : 最小値2(int)
	    // @max2 : 最大値2(int)
	    // return : minからmaxまでのランダムな整数(int)
	    // -----------------------------------
	
	  }, {
	    key: "random2",
	    value: function random2(min1, max1, min2, max2) {
	
	      if (this.hit(2)) {
	        return this.random(min1, max1);
	      } else {
	        return this.random(min2, max2);
	      }
	    }
	
	    // 1/@rangeの確率でtrueを取得
	    // -----------------------------------
	    // @range : 母数(int)
	    // return : true or false(boolean)
	    // -----------------------------------
	
	  }, {
	    key: "hit",
	    value: function hit(range) {
	
	      return this.random(0, range - 1) === 0;
	    }
	
	    // 0から範囲内でランダムな整数を取得
	    // -----------------------------------
	    // @val : 範囲(int)
	    // return : ランダムな整数(int)
	    // -----------------------------------
	
	  }, {
	    key: "range",
	    value: function range(val) {
	
	      return this.random(-val, val);
	    }
	
	    // 値をマッピング
	    // -----------------------------------
	    // @num : マッピングする値(Number)
	    // @resMin : 結果となる値の最小値(Number)
	    // @resMax : 結果となる値の最大値(Number)
	    // @baseMin : 元となる値の最小値(Number)
	    // @baseMax : 元となる値の最大値(Number)
	    // return : マッピングされた値(Number)
	    // -----------------------------------
	
	  }, {
	    key: "map",
	    value: function map(num, resMin, resMax, baseMin, baseMax) {
	
	      var p;
	      if (num < baseMin) {
	        return resMin;
	      }
	      if (num > baseMax) {
	        return resMax;
	      }
	      p = (resMax - resMin) / (baseMax - baseMin);
	
	      return (num - baseMin) * p + resMin;
	    }
	
	    // 数値に小数点第@n位までをつけた文字列を返す
	    // -----------------------------------
	    // @num : 値(Number)
	    // @n : 小数点の位(int)
	    // return : 変換された値(String)
	    // -----------------------------------
	
	  }, {
	    key: "decimal",
	    value: function decimal(num, n) {
	      var i, pos;
	      num = String(num);
	      pos = num.indexOf(".");
	      if (n === 0) {
	        return num.split(".")[0];
	      }
	      if (pos === -1) {
	        num += ".";
	        i = 0;
	        while (i < n) {
	          num += "0";
	          i++;
	        }
	        return num;
	      }
	      num = num.substr(0, pos) + num.substr(pos, n + 1);
	      return num;
	    }
	  }, {
	    key: "clamp",
	    value: function clamp(numerator, denominator, val) {
	
	      return val * (numerator / denominator);
	    }
	  }, {
	    key: "degree",
	    value: function degree(radians) {
	
	      return radians * 180 / Math.PI; //1ラジアンが何度か
	    }
	
	    // to radians
	
	  }, {
	    key: "radian",
	    value: function radian(angle) {
	
	      return angle * Math.PI / 180; //1度何ラジアンか
	    }
	  }, {
	    key: "dist",
	    value: function dist(p1, p2) {
	
	      return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));
	    }
	  }, {
	    key: "ascend",
	    value: function ascend(arr) {
	
	      arr.sort(function (a, b) {
	        if (a > b) return -1;
	        if (a < b) return 1;
	        return 0;
	      });
	      // var a = [5,3,9,1,10]
	      // 結果:10,9,5,3,1
	    }
	  }, {
	    key: "descend",
	    value: function descend(arr) {
	
	      arr.sort(function (a, b) {
	        if (a < b) return -1;
	        if (a > b) return 1;
	        return 0;
	      });
	
	      // var a = [5,3,9,1,10]
	      // 結果:1,3,5,9,10
	    }
	
	    // map(value, min01, max01, min02, max02) {
	
	    //   var dis01 = max01 - min01;
	    //   var dis02 = max02 - min02
	
	    //   var rate = dis02 / dis01;
	
	    //   value = value * rate;
	
	    //   return value;
	    // }
	
	  }, {
	    key: "constrain",
	    value: function constrain(value, min, max) {
	
	      return Math.min(max, Math.max(value, min));
	
	      // if (value <= low) value = low;
	      // if (value >= high) value = high;     
	      // return value;
	    }
	
	    // ------------------------------------------------------------
	    //
	    //  Array
	    //
	    // ------------------------------------------------------------
	
	    // 配列内のランダムな値をひとつ取得
	    // -----------------------------------
	    // @arr : 配列
	    // return : 配列内の値
	    // -----------------------------------
	
	  }, {
	    key: "arrRand",
	    value: function arrRand(arr) {
	
	      return arr[this.random(0, arr.length - 1)];
	    }
	
	    // 配列をランダムに並べ替え
	    // -----------------------------------
	    // @arr : 配列(Array)
	    // -----------------------------------
	
	  }, {
	    key: "shuffle",
	    value: function shuffle(ary) {
	
	      var arr = [];
	      arr = ary.slice();
	      var i = arr.length;
	      while (i) {
	        var j = Math.floor(Math.random() * i);
	        var t = arr[--i];
	        arr[i] = arr[j];
	        arr[j] = t;
	      }
	      return arr;
	    }
	
	    // ランダムな数値を作る
	
	  }, {
	    key: "randomArr",
	    value: function randomArr(len) {
	
	      var arr = new Array();
	
	      for (var i = 0; i < len; i++) {
	        arr.push(i);
	      }arr = this.shuffleAry(arr);
	
	      return arr;
	    }
	
	    // nullを削除した配列を返す
	    // -----------------------------------
	    // @arr : 配列(Array)
	    // return : null削除した配列(Array)
	    // -----------------------------------
	
	  }, {
	    key: "sliceNull",
	    value: function sliceNull(arr) {
	
	      var i, l, len1, newArr, val;
	      newArr = [];
	      for (i = l = 0, len1 = arr.length; l < len1; i = ++l) {
	        val = arr[i];
	        if (val !== null) {
	          newArr.push(val);
	        }
	      }
	      return newArr;
	    }
	
	    // 配列内のパラメータを比較してソート
	    // -----------------------------------
	    // @arr : 配列(Array)
	    // @para : パラメーター名
	    // @desc : 降順かどうか(boolean) デフォルトは昇順
	    // -----------------------------------
	
	  }, {
	    key: "sort",
	    value: function sort(arr, para, desc) {
	      if (desc === void 0) {
	        desc = false;
	      }
	      if (desc) {
	        return arr.sort(function (a, b) {
	          return b[para] - a[para];
	        });
	      } else {
	        return arr.sort(function (a, b) {
	          return a[para] - b[para];
	        });
	      }
	    }
	  }, {
	    key: "getKey",
	    value: function getKey(list, value) {
	      var returnKey = [];
	      for (var key in list) {
	        if (list[key] == value) {
	          returnKey.push(key);
	        }
	      }
	      return returnKey;
	    }
	
	    // ユニークIDを取得
	    // -----------------------------------
	
	  }, {
	    key: "unique",
	    value: function unique() {
	
	      return new Date().getTime();
	    }
	
	    // **jquary使用
	    // ボタンモード変更
	    // trueならカーソルがポインターの形に
	    // falseならデフォルトのカーソルに
	    // -----------------------------------
	    // @flg : 適用するかどうか(boolean)
	    // -----------------------------------
	
	  }, {
	    key: "buttonMode",
	    value: function buttonMode(flg) {
	
	      if (flg) {
	        return $("body").css("cursor", "pointer");
	      } else {
	        return $("body").css("cursor", "default");
	      }
	    }
	
	    // ------------------------------------------------------------
	    //
	    //  device
	    //
	    // ------------------------------------------------------------
	
	  }, {
	    key: "isDeviceSP",
	    value: function isDeviceSP() {
	
	      var media = ["iphone", "ipod", "ipad", "android", "dream", "cupcake", "blackberry9500", "blackberry9530", "blackberry9520", "blackberry9550", "blackberry9800", "webos", "incognito", "webmate"];
	      var pattern = new RegExp(media.join("|"), "i");
	
	      var b = pattern.test(this.ua);
	      if (b) $('body').addClass('isDeviceSP');
	
	      this.isSP = b;
	    }
	  }, {
	    key: "isDeviceTAB",
	    value: function isDeviceTAB() {
	
	      var b = this.ua.indexOf("windows") != -1 && this.ua.indexOf("touch") != -1 || this.ua.indexOf("ipad") != -1 || this.ua.indexOf("android") != -1 && this.ua.indexOf("mobile") == -1 || this.ua.indexOf("firefox") != -1 && this.ua.indexOf("tablet") != -1 || this.ua.indexOf("kindle") != -1 || this.ua.indexOf("silk") != -1 || this.ua.indexOf("playbook") != -1;
	      if (b) $('body').addClass('isDeviceTAB');
	
	      this.isTAB = b;
	    }
	  }, {
	    key: "isDeviceMB",
	    value: function isDeviceMB() {
	
	      var b = this.ua.indexOf("windows") != -1 && this.ua.indexOf("phone") != -1 || this.ua.indexOf("iphone") != -1 || this.ua.indexOf("ipod") != -1 || this.ua.indexOf("android") != -1 && this.ua.indexOf("mobile") != -1 || this.ua.indexOf("firefox") != -1 && this.ua.indexOf("mobile") != -1 || this.ua.indexOf("blackberry") != -1;
	      if (b) $('body').addClass('isDeviceMB');
	
	      this.isMB = b;
	    }
	  }, {
	    key: "isDevicePC",
	    value: function isDevicePC() {
	
	      if (!(this.isSP || this.isTAB || this.isMB)) {
	
	        $('body').addClass('isDevicePC');
	        this.isPC = true;
	        return;
	      }
	
	      this.isPC = false;
	    }
	
	    // スマフォ判定
	    // -----------------------------------
	    // return : true or false(boolean)
	    // -----------------------------------
	
	  }, {
	    key: "isSmt",
	    value: function isSmt() {
	
	      return navigator.userAgent.indexOf('iPad') > 0 || navigator.userAgent.indexOf('iPhone') > 0 || navigator.userAgent.indexOf('iPod') > 0 || navigator.userAgent.indexOf('Android') > 0;
	    }
	
	    // タブレット端末かどうか
	    // -----------------------------------
	    // return : true or false(boolean)
	    // -----------------------------------
	
	  }, {
	    key: "isTablet",
	    value: function isTablet() {
	
	      return this.isIpad() || this.isAndroid() && navigator.userAgent.indexOf('Mobile') === -1;
	    }
	
	    // iPad判定
	    // -----------------------------------
	    // return : true or false(boolean)
	    // -----------------------------------
	
	  }, {
	    key: "isIpad",
	    value: function isIpad() {
	
	      return navigator.userAgent.indexOf('iPad') > 0;
	    }
	
	    // ------------------------------------------------------------
	    //
	    //  OS
	    //
	    // ------------------------------------------------------------
	
	    // Android判定
	    // -----------------------------------
	    // return : true or false(boolean)
	    // -----------------------------------
	
	  }, {
	    key: "isAndroid",
	    value: function isAndroid() {
	
	      var u;
	      u = navigator.userAgent;
	      return u.indexOf('BlackBerry') > 0 || u.indexOf('Android') > 0 || u.indexOf('Windows Phone') > 0;
	    }
	  }, {
	    key: "isiPhone",
	    value: function isiPhone() {
	      var pattern = new RegExp("iphone", "i");
	      return pattern.test(this.ua);
	    }
	
	    // iOS判定
	    // -----------------------------------
	    // return : true or false(boolean)
	    // -----------------------------------
	
	  }, {
	    key: "isIos",
	    value: function isIos() {
	
	      return navigator.userAgent.indexOf('iPad') > 0 || navigator.userAgent.indexOf('iPhone') > 0 || navigator.userAgent.indexOf('iPod') > 0;
	    }
	
	    // PS3判定
	    // -----------------------------------
	    // return : true or false(boolean)
	    // -----------------------------------
	
	  }, {
	    key: "isPs3",
	    value: function isPs3() {
	
	      var u;
	      u = navigator.userAgent;
	      return u.indexOf('PLAYSTATION 3') > 0;
	    }
	
	    // VITA判定
	    // -----------------------------------
	    // return : true or false(boolean)
	    // -----------------------------------
	
	  }, {
	    key: "isVita",
	    value: function isVita() {
	
	      var u;
	      u = navigator.userAgent;
	      return u.indexOf('PlayStation Vita') > 0;
	    }
	
	    // ------------------------------------------------------------
	    //
	    //  browser
	    //
	    // ------------------------------------------------------------
	    // IEかどうか
	    // -----------------------------------
	    // return : true or false(boolean)
	    // -----------------------------------
	
	  }, {
	    key: "isIe",
	    value: function isIe() {
	
	      var ua;
	      ua = window.navigator.userAgent.toLowerCase();
	      return ua.indexOf('msie') !== -1 || ua.indexOf('trident/7') !== -1;
	    }
	
	    // WINかどうか
	    // -----------------------------------
	    // return : true or false(boolean)
	    // -----------------------------------
	
	  }, {
	    key: "isWin",
	    value: function isWin() {
	
	      return navigator.platform.indexOf("Win") !== -1;
	    }
	
	    // googleChromeかどうか
	    // -----------------------------------
	    // return : true or false(boolean)
	    // -----------------------------------
	
	  }, {
	    key: "isChrome",
	    value: function isChrome() {
	
	      return navigator.userAgent.indexOf('Chrome') > 0;
	    }
	
	    // FireFoxかどうか
	    // -----------------------------------
	    // return : true or false(boolean)
	    // -----------------------------------
	
	  }, {
	    key: "isFF",
	    value: function isFF() {
	
	      return window.navigator.userAgent.toLowerCase().indexOf('firefox') !== -1;
	    }
	  }, {
	    key: "isSafari",
	    value: function isSafari() {
	
	      if (this.ua.indexOf("chrome") != -1) return false;
	      if (this.ua.indexOf("lunascape") != -1) return false;
	      var pattern = new RegExp("safari", "i");
	      return pattern.test(this.ua);
	    }
	  }, {
	    key: "isOpera",
	    value: function isOpera() {
	
	      var pattern = new RegExp("opera", "i");
	      return pattern.test(this.ua);
	    }
	
	    // iOSのsafari以外かどうか
	    // -----------------------------------
	    // return : true or false(boolean)
	    // -----------------------------------
	
	  }, {
	    key: "isIOSUiView",
	    value: function isIOSUiView() {
	
	      var a;
	      a = window.navigator.userAgent.toLowerCase();
	      return this.isIos() && a.indexOf('safari') === -1 || this.isIos() && a.indexOf('crios') > 0 || this.isIos() && a.indexOf('gsa') > 0;
	    }
	
	    // ------------------------------------------------------------
	    //
	    //  version
	    //
	    // ------------------------------------------------------------
	    // IE8以下かどうか
	    // -----------------------------------
	    // return : true or false(boolean)
	    // -----------------------------------
	
	  }, {
	    key: "isIe8Under",
	    value: function isIe8Under() {
	
	      var msie;
	      msie = navigator.appVersion.toLowerCase();
	      msie = msie.indexOf('msie') > -1 ? parseInt(msie.replace(/.*msie[ ]/, '').match(/^[0-9]+/)) : 0;
	      return msie <= 8 && msie !== 0;
	    }
	
	    // IE9以下かどうか
	    // -----------------------------------
	    // return : true or false(boolean)
	    // -----------------------------------
	
	  }, {
	    key: "isIe9Under",
	    value: function isIe9Under() {
	
	      var msie;
	      msie = navigator.appVersion.toLowerCase();
	      msie = msie.indexOf('msie') > -1 ? parseInt(msie.replace(/.*msie[ ]/, '').match(/^[0-9]+/)) : 0;
	      return msie <= 9 && msie !== 0;
	    }
	
	    // IE10以下かどうか
	    // -----------------------------------
	    // return : true or false(boolean)
	    // -----------------------------------
	
	  }, {
	    key: "isIe10Under",
	    value: function isIe10Under() {
	
	      var msie;
	      msie = navigator.appVersion.toLowerCase();
	      msie = msie.indexOf('msie') > -1 ? parseInt(msie.replace(/.*msie[ ]/, '').match(/^[0-9]+/)) : 0;
	      return msie <= 10 && msie !== 0;
	    }
	
	    // IE11以下かどうか
	    // -----------------------------------
	    // return : true or false(boolean)
	    // -----------------------------------
	
	  }, {
	    key: "isIe11Under",
	    value: function isIe11Under() {
	
	      var b = this.isIe10Under() || this.ua.indexOf("trident") != -1;
	      return b;
	      // return true;
	    }
	
	    // edgeかどうか
	    // -----------------------------------
	    // return : true or false(boolean)
	    // -----------------------------------
	
	  }, {
	    key: "isEdge",
	    value: function isEdge() {
	
	      log(this.ua.indexOf("AppleWebkit"), this.ua.indexOf("Edge"), this.ua, this.appV);
	      var b = this.ua.indexOf("applewebkit") >= 0 && this.ua.indexOf("edge") != -1;
	      return b;
	      // return true;
	    }
	  }, {
	    key: "isIEVersion",
	    value: function isIEVersion() {
	
	      $('body').addClass('ie');
	      this.isIE = true;
	
	      if (this.appV.indexOf("msie 10.") != -1) {
	        $('body').addClass('ie10');
	        return 'ie10';
	      } else if (this.appV.indexOf("msie 9.") != -1) {
	        $('body').addClass('ie9');
	        return 'ie9';
	      } else if (this.appV.indexOf("msie 8.") != -1) {
	        $('body').addClass('ie8');
	        return 'ie8';
	      } else if (this.appV.indexOf("msie 7.") != -1) {
	        $('body').addClass('ie7');
	        return 'ie7';
	      } else if (this.appV.indexOf("msie 6.") != -1) {
	        $('body').addClass('ie6');
	        return 'ie6';
	      } else if (this.appV.indexOf("trident") != -1) {
	        $('body').addClass('ie11');
	        this.isIE11 = true;
	        return 'ie11';
	      } else if (this.ua.indexOf("applewebkit") >= 0 && this.ua.indexOf("edge") != -1) {
	        $('body').addClass('isEdge');
	        return 'edge';
	      }
	
	      $('body').removeClass('ie');
	      this.isIE = false;
	    }
	  }, {
	    key: "isAndroidVersion",
	    value: function isAndroidVersion() {
	
	      if (this.ua.indexOf("android") > 0) {
	
	        var version = parseFloat(this.ua.slice(this.ua.indexOf("android") + 8));
	        return version;
	      }
	    }
	  }, {
	    key: "isiphoneVersion",
	    value: function isiphoneVersion() {
	
	      if (this.ua.indexOf("iPhone OS") > 0) {
	
	        var version = parseFloat(this.ua.slice(this.ua.indexOf("iPhone OS") + 10));
	        return version;
	      }
	    }
	
	    // ------------------------------------------------------------
	    //
	    //  portrait / landscape
	    //
	    // ------------------------------------------------------------
	
	  }, {
	    key: "isDirection",
	    value: function isDirection() {
	
	      var W = window.innerWidth,
	          H = window.innerHeight;
	
	      if (H > W) {
	        $("body").addClass("portrait");
	        $("body").removeClass("landscape");
	      } else {
	        $("body").addClass("landscape");
	        $("body").removeClass("portrait");
	      }
	    }
	
	    // ------------------------------------------------------------
	    //
	    //  responsive 横幅を見る
	    //
	    // ------------------------------------------------------------
	
	  }, {
	    key: "isResponsive",
	    value: function isResponsive(bp) {
	
	      if (bp == undefined) bp = 375;
	
	      var W = window.innerWidth,
	          H = window.innerHeight;
	
	      if (W > bp) {
	        this.isResSP = false;
	        this.isResPC = true;
	        $('body').removeClass('isResponsiveSP');
	        $('body').addClass('isResponsivePC');
	      } else {
	        this.isResSP = true;
	        this.isResPC = false;
	        $('body').addClass('isResponsiveSP');
	        $('body').removeClass('isResponsivePC');
	      }
	    }
	
	    // ------------------------------------------------------------
	    //
	    //  URL
	    //
	    // ------------------------------------------------------------
	
	    // クエリ抜き出し
	    // -----------------------------------
	    // @key : 抜き出すパラメータ名(String)
	    // -----------------------------------
	    // getQuery(key) {
	
	    //   var qs, regex;
	    //   key = key.replace(/[€[]/, "€€€[").replace(/[€]]/, "€€€]");
	    //   regex = new RegExp("[€€?&]" + key + "=([^&#]*)");
	    //   qs = regex.exec(window.location.href);
	    //   if (qs === null) {
	    //     return "";
	    //   } else {
	    //     return qs[1];
	    //   }
	
	    // }
	
	  }, {
	    key: "getParam",
	    value: function getParam() {
	
	      var url = location.href;
	      var param = url.split('?')[1];
	      if (param == undefined) return undefined;
	      var paramItems = param.split('&');
	      var list = {};
	
	      for (var i = 0; i < paramItems.length; i++) {
	
	        paramItem = paramItems[i].split('=');
	        list[paramItem[0]] = paramItem[1];
	      }
	
	      return list;
	    }
	
	    // ハッシュ取得
	    // -----------------------------------
	    // return : location.hashの#を削除したやつ
	    // -----------------------------------
	
	  }, {
	    key: "hash",
	    value: function hash() {
	
	      return location.hash.replace("#", "");
	    }
	
	    // cookie取得
	    // -----------------------------------
	    // @key : パラメータ名
	    // -----------------------------------
	
	  }, {
	    key: "getCookie",
	    value: function getCookie(key) {
	
	      var a, arr, i, l, len1, val;
	      if (document.cookie === void 0 || document.cookie === null) {
	        return null;
	      }
	      arr = document.cookie.split("; ");
	      for (i = l = 0, len1 = arr.length; l < len1; i = ++l) {
	        val = arr[i];
	        a = val.split("=");
	        if (a[0] === key) {
	          return a[1];
	        }
	      }
	      return null;
	    }
	
	    // cookie設定
	    // -----------------------------------
	    // @key : パラメータ名
	    // @val : 値
	    // -----------------------------------
	
	  }, {
	    key: "setCookie",
	    value: function setCookie(key, val) {
	
	      return document.cookie = key + "=" + val;
	    }
	  }, {
	    key: "isPCSP",
	    value: function isPCSP() {
	
	      var url = location.href;
	
	      if (!this.isPC && !this.isTAB && url.indexOf('pc') != -1) {
	
	        location.href = '/op_golden';
	      }
	
	      if (this.isPC && url.indexOf('pc') == -1) {
	
	        location.href = '/op_golden/pc/';
	      }
	
	      if (this.isTAB && url.indexOf('pc') == -1) {
	
	        location.href = '/op_golden/pc/';
	      }
	
	      if (this.isContain(url, 'roulette')) location.href = '/op_golden';
	      if (this.isContain(url, 'topics')) location.href = '/op_golden';
	    }
	
	    // ------------------------------------------------------------
	    //
	    //  Color
	    //
	    // ------------------------------------------------------------
	
	    // rgbからHEXカラー取得
	    // -----------------------------------
	    // @r : 0~255
	    // @g : 0~255
	    // @b : 0~255
	    // return : ex "#FFFFFF"
	    // -----------------------------------
	
	  }, {
	    key: "getHexColor",
	    value: function getHexColor(r, g, b) {
	      var str;
	      str = (r << 16 | g << 8 | b).toString(16);
	      return "#" + new Array(7 - str.length).join("0") + str;
	    }
	
	    // ------------------------------------------------------------
	    //
	    //  String
	    //
	    // ------------------------------------------------------------
	
	  }, {
	    key: "isContain",
	    value: function isContain(str, contain) {
	
	      // strの中に,containが存在したら
	      if (str.indexOf(contain) != -1) {
	        return true;
	      }
	
	      return false;
	    }
	
	    // 0埋めで2桁にする関数
	
	  }, {
	    key: "add0",
	    value: function add0(str) {
	      var num = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -2;
	
	
	      return ("000000000000" + str).substr(num);
	    }
	  }, {
	    key: "floatFormat",
	    value: function floatFormat(number, n) {
	
	      var _pow = Math.pow(10, n);
	      return Math.round(number * _pow) / _pow;
	    }
	
	    // 値段表記
	    // -----------------------------------
	
	  }, {
	    key: "price",
	    value: function price(num) {
	
	      return String(num).replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1,');
	    }
	
	    // 文字列を反転
	    // -----------------------------------
	    // @str : 文字列(String)
	    // return : 文字列(String)
	    // -----------------------------------
	
	  }, {
	    key: "strReverse",
	    value: function strReverse(str) {
	
	      var i, len, res;
	      res = "";
	      len = str.length;
	      i = 1;
	      while (i <= len) {
	        res += str.substr(-i, 1);
	        i++;
	      }
	      return res;
	    }
	
	    // 文字列の全置換
	    // -----------------------------------
	    // @val  : 文字列
	    // @oeg  : 置換前の文字列
	    // @dest : 置換後の文字列
	    // -----------------------------------
	
	  }, {
	    key: "replaceAll",
	    value: function replaceAll(val, org, dest) {
	
	      return val.split(org).join(dest);
	    }
	  }, {
	    key: "strReplace",
	    value: function strReplace(str, before, after) {
	
	      var r = new RegExp(before, 'g');
	
	      return str.replace(r, after);
	    }
	
	    // ------------------------------------------------------------
	    //
	    //  Date
	    //
	    // ------------------------------------------------------------
	
	  }, {
	    key: "getNow",
	    value: function getNow() {
	
	      this.now = new Date();
	    }
	  }, {
	    key: "start",
	    value: function start() {
	
	      this.startTime = this.now.getTime();
	    }
	  }, {
	    key: "elapsed",
	    value: function elapsed() {
	
	      this.elapsedTime = this.now.getTime() - this.startTime;
	    }
	  }, {
	    key: "m",
	    value: function m() {
	
	      return Math.floor(this.elapsedTime + 100 / 60);
	    }
	  }, {
	    key: "s",
	    value: function s() {
	
	      return Math.floor(this.elapsedTime / 1000);
	    }
	  }, {
	    key: "ms",
	    value: function ms() {
	
	      return this.elapsedTime;
	    }
	  }, {
	    key: "time",
	    value: function time() {
	
	      this.getNow();
	
	      this.hour = this.now.getHours(); // 時
	      this.minute = this.now.getMinutes(); // 分
	      this.second = this.now.getSeconds();
	      this.millSecond = this.now.getMilliseconds();
	    }
	  }, {
	    key: "date",
	    value: function date() {
	
	      return this.now.getDate();
	    }
	  }, {
	    key: "months",
	    value: function months() {
	
	      var monthdays = new Array(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);
	
	      return this.now.getMonth() + 1;
	    }
	  }, {
	    key: "year",
	    value: function year() {
	
	      return this.now.getFullYear();
	    }
	  }, {
	    key: "day",
	    value: function day() {
	
	      // 曜日 (日本語)
	      var weekDayJP = ["日", "月", "火", "水", "木", "金", "土"];
	      var wDJ = weekDayJP[this.now.getDay()];
	
	      // 曜日 (英語)
	      var weekDayEN = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
	      var wDE = weekDayEN[this.now.getDay()];
	    }
	
	    // 数日後のDateオブジェクト取得
	    // -----------------------------------
	
	  }, {
	    key: "afterDay",
	    value: function afterDay(date, num) {
	
	      return new Date(date.getTime() + Number(num) * 24 * 60 * 60 * 1000);
	    }
	
	    // ------------------------------------------------------------
	    //
	    //  Data type check
	    //
	    // ------------------------------------------------------------
	
	  }, {
	    key: "isObject",
	    value: function isObject(value, ignoreArray) {
	      return (typeof value === "undefined" ? "undefined" : _typeof(value)) === 'object' && value !== null;
	    }
	  }, {
	    key: "isNumber",
	    value: function isNumber(value) {
	      return typeof value === 'number';
	    }
	  }, {
	    key: "isString",
	    value: function isString(value) {
	      return typeof value === 'string';
	    }
	  }, {
	    key: "isFunction",
	    value: function isFunction(value) {
	      return typeof value === 'function';
	    }
	  }, {
	    key: "isArray",
	    value: function isArray(value) {
	      return Object.prototype.toString.call(value) === '[object Array]';
	    }
	  }, {
	    key: "isNull",
	    value: function isNull(value) {
	      return value === null;
	    }
	  }, {
	    key: "isUndefined",
	    value: function isUndefined(value) {
	      return typeof value === 'undefined';
	    }
	
	    // ------------------------------------------------------------
	    //
	    //  other
	    //
	    // ------------------------------------------------------------
	
	  }, {
	    key: "setImgSPSize",
	    value: function setImgSPSize($target) {
	
	      // responsive spのとき処理
	      if (!this.isResSP) return;
	      // 一度だけ処理
	      // if (this.isSetSPSize) return;
	      // this.isSetSPSize = true;
	
	      var $img = $target,
	          len = $img.length;
	
	      $img.each(function (i) {
	
	        var w = Math.floor($(this).width() / 2),
	            h = Math.floor($(this).height() / 2);
	
	        $(this).attr({
	          'width': w,
	          'height': h
	        });
	
	        if (len == i + 1) $(window).trigger('setSpZieEnd');
	      });
	    }
	
	    // ------------------------------------------------------------
	    //  スマホ操作無効
	    // ------------------------------------------------------------
	
	  }, {
	    key: "setPrevent",
	    value: function setPrevent() {
	
	      var self = this;
	
	      $(window).on('touchmove.noControl', function (e) {
	        e.preventDefault();
	      });
	    }
	  }, {
	    key: "removePrevent",
	    value: function removePrevent() {
	
	      $(window).off('touchmove.noControl');
	    }
	
	    // ------------------------------------------------------------
	    //  host,protcol
	    // ------------------------------------------------------------
	
	  }, {
	    key: "protocol",
	    value: function protocol() {
	
	      return location.protocol;
	    }
	  }, {
	    key: "host",
	    value: function host() {
	
	      return location.hostname;
	      // return location.host
	    }
	  }, {
	    key: "port",
	    value: function port() {
	
	      return location.port;
	    }
	  }, {
	    key: "path",
	    value: function path() {
	
	      return location.pathname;
	    }
	  }, {
	    key: "preventDefault",
	    value: function preventDefault(e) {
	
	      e = e || window.event;
	      if (e.preventDefault) e.preventDefault();
	      e.returnValue = false;
	    }
	  }, {
	    key: "preventDefaultForScrollKeys",
	    value: function preventDefaultForScrollKeys(e) {
	
	      if (keys[e.keyCode]) {
	        preventDefault(e);
	        return false;
	      }
	    }
	  }, {
	    key: "disableScroll",
	    value: function disableScroll() {
	
	      if (window.addEventListener) // older FF
	        window.addEventListener('DOMMouseScroll', this.preventDefault, false);
	      window.onwheel = this.preventDefault; // modern standard
	      window.onmousewheel = document.onmousewheel = this.preventDefault; // older browsers, IE
	      window.ontouchmove = this.preventDefault; // mobile
	      document.onkeydown = this.preventDefaultForScrollKeys;
	    }
	  }, {
	    key: "enableScroll",
	    value: function enableScroll() {
	
	      if (window.removeEventListener) window.removeEventListener('DOMMouseScroll', this.preventDefault, false);
	      window.onmousewheel = document.onmousewheel = null;
	      window.onwheel = null;
	      window.ontouchmove = null;
	      document.onkeydown = null;
	    }
	  }]);
	
	  return Util;
	}();
	
	exports.default = Util;

/***/ },
/* 5 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * fileOverview:
	 * Project:
	 * File: Func
	 * Date:
	 * Author:
	 */
	
	var Func = function () {
	  function Func() {
	    _classCallCheck(this, Func);
	
	    this.blank();
	    this.debugger();
	    this.requestAnimationFrame();
	    this.expandjQuery();
	  }
	
	  _createClass(Func, [{
	    key: 'blank',
	    value: function blank() {
	
	      $(function () {
	        $('.blank').attr('target', '_blank');
	      });
	    }
	  }, {
	    key: 'debugger',
	    value: function _debugger() {
	
	      // デバッグモード切替
	      var RELEASE = gb.in.conf.RELEASE;
	
	      // 置換対象のメソッドを配列として保持する
	      var methods = ['log', 'debug', 'info', 'warn', 'error', 'dir', 'trace', 'assert', 'dirxml', 'group', 'groupEnd', 'time', 'timeEnd', 'count', 'profile', 'profileEnd'];
	
	      // consoleが使えない場合は空のオブジェクトを設定しておく
	      if (typeof window.console === "undefined") {
	        window.console = {};
	      }
	
	      // 各メソッドをwindowへ直接追加して行く
	      for (var i in methods) {
	        (function (m) {
	
	          // consoleにある？デバッグモードは有効？consoleのものは関数？
	          if (console[m] && !RELEASE && typeof console[m] === "function") {
	            window[m] = console[m].bind(console);
	          } else {
	            // debugModeがfalse,もしくは該当メソッドが存在しない場合は、空のメソッドを用意する
	            window[m] = function () {};
	          }
	        })(methods[i]);
	      }
	    }
	  }, {
	    key: 'prepend',
	    value: function prepend(param) {
	
	      $('body').prepend(param);
	    }
	  }, {
	    key: 'requestAnimationFrame',
	    value: function requestAnimationFrame() {
	
	      var FPS = 1000 / 60;
	
	      window.requestAnimationFrame = window.requestAnimationFrame || // chromeや最新の
	      window.mozRequestAnimationFrame || // 古いfirefox用
	      window.webkitRequestAnimationFrame || // safari6以前、iOS6 safari用
	      function (callback) {
	        window.setTimeout(callback, FPS);
	      };
	
	      window.cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || function (timer) {
	        window.clearTimeout(timer);
	      };
	    }
	  }, {
	    key: 'expandjQuery',
	    value: function expandjQuery() {
	
	      jQuery.fn.extend({
	        w: 0,
	        h: 0,
	        adjust: function adjust() {
	          var w = $(this).innerWidth();
	          var h = $(this).innerHeight();
	          $(this).css({
	            'position': 'absolute',
	            'left': '50%',
	            'top': '50%',
	            'margin-left': '-' + w / 2 + 'px',
	            'margin-top': '-' + h / 2 + 'px'
	          });
	        },
	        adjustW: function adjustW() {
	          var w = $(this).innerWidth();
	          var h = $(this).innerHeight();
	          $(this).css({
	            'position': 'absolute',
	            'left': '50%',
	            'margin-left': '-' + w / 2 + 'px'
	          });
	        },
	        adjustH: function adjustH() {
	          var w = $(this).innerWidth();
	          var h = $(this).innerHeight();
	          $(this).css({
	            'position': 'absolute',
	            'top': '50%',
	            'margin-top': '-' + h / 2 + 'px'
	          });
	        }
	      });
	    }
	  }, {
	    key: 'checkCssBlend',
	    value: function checkCssBlend() {
	
	      if ('CSS' in window && 'supports' in window.CSS) {
	        if (!window.CSS.supports('mix-blend-mode', 'soft-light')) {
	          document.documentElement.classList.add('not-mix-blend-mode');
	        }
	      }
	
	      log(gb.in.u.isIE);
	
	      if (gb.in.u.isIE) {
	
	        document.documentElement.classList.add('not-mix-blend-mode');
	      };
	    }
	  }, {
	    key: 'notSaveImg',
	    value: function notSaveImg() {
	
	      // ------------------------------------------------------------
	      //
	      //  pc
	      //
	      // ------------------------------------------------------------
	
	      if (gb.in.u.isPC) {
	
	        $(function () {
	          $("img").on("contextmenu", function () {
	            return false;
	          });
	        });
	      }
	
	      // ------------------------------------------------------------
	      //
	      //  sp android
	      //
	      // ------------------------------------------------------------
	      var v = gb.in.u.isAndroidVersion();
	
	      if (v == undefined) return;
	      if (v < 5) {
	
	        var timer;
	        $("img").on("touchstart", function () {
	          timer = setTimeout(function () {
	            alert("画像は保存できません");
	          }, 500);
	          return false;
	        });
	        $("img").on("touchend", function () {
	          clearTimeout(timer);
	          return false;
	        });
	      }
	    }
	  }]);
	
	  return Func;
	}();
	
	exports.default = Func;

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); //--------------------------------------------------
	//
	//  ReadyMgr
	//
	//--------------------------------------------------
	
	var _ReadyPercent = __webpack_require__(7);
	
	var _ReadyPercent2 = _interopRequireDefault(_ReadyPercent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var ReadyMgr = function () {
	  function ReadyMgr() {
	    _classCallCheck(this, ReadyMgr);
	
	    this.completed = 0;
	    this.total = 0;
	    this.current = 0;
	
	    this.onCompletedFunc = function () {};
	
	    this.setEvents();
	  }
	
	  _createClass(ReadyMgr, [{
	    key: 'setup',
	    value: function setup() {
	
	      this.readyPercent = new _ReadyPercent2.default();
	    }
	  }, {
	    key: 'onComplete',
	    value: function onComplete() {
	
	      // update処理をやめる
	      gb.in.up.remove('readyPercent', this.readyPercent.update.bind(this));
	
	      // 準備完了後の処理
	      this.onCompletedFunc();
	    }
	  }, {
	    key: 'onReady',
	    value: function onReady() {
	
	      this.setup();
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	
	      $(document).on('ready', this.onReady.bind(this));
	    }
	  }]);
	
	  return ReadyMgr;
	}();
	
	exports.default = ReadyMgr;

/***/ },
/* 7 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//--------------------------------------------------
	//
	//  ReadyPercent
	//
	//--------------------------------------------------
	
	var ReadyPercent = function () {
	  function ReadyPercent() {
	    _classCallCheck(this, ReadyPercent);
	
	    this.$loading = $('#loading');
	    this.$bar = $('.loadingBar');
	    this.$percent = $('.loadingPercent');
	
	    this.isLock = false;
	    this.setTimeoutLock = false;
	
	    this.setEvents();
	  }
	
	  _createClass(ReadyPercent, [{
	    key: 'update',
	    value: function update() {
	
	      if (!gb.in.conf.webFontLoaded) return;
	
	      var target = gb.in.rm.completed / gb.in.rm.total * 100;
	
	      gb.in.rm.current += (target - gb.in.rm.current) * 0.1;
	      // this.$bar.css({ width: gb.in.rm.current + '%' }); //percent 伸ばす
	      this.$percent.text(Math.floor(gb.in.rm.current) + '%');
	
	      // 終了処理
	      if (gb.in.rm.current >= 100 && !this.isLock) {
	        this.isLock = true;
	        gb.in.rm.onComplete();
	      }
	
	      // current が 99.9 より大きければ 100 と見なして終了処理へ
	      if (gb.in.rm.current > 99.9) {
	        gb.in.rm.current = 100;
	      }
	
	      // ie11は,99になって、5秒経っても100でなければ、強制的に、表示
	      // その際、completeして無ければ背景は静止画に
	      // if (gb.in.u.isIE11) {
	
	      if (gb.in.rm.current > 99 && !this.setTimeoutLock) {
	        this.setTimeoutLock = true;
	
	        log('99!!!!');
	        // gb.in.rm.current = 99;
	
	        setTimeout(function () {
	
	          log('5!!!');
	
	          if (gb.in.rm.current !== 100) {
	
	            gb.in.rm.completed++;
	            $('.bgOverlayImg').addClass('isActive');
	
	            log('対応！！');
	          };
	        }, 5000);
	      };
	
	      // };
	    }
	  }, {
	    key: 'remove',
	    value: function remove() {
	      var _this = this;
	
	      TweenMax.to(this.$loading, 2.8, {
	        scale: 1.2,
	        opacity: 0,
	        ease: Power3.easeInOut,
	        onComplete: function onComplete() {
	          _this.$loading.remove();
	        }
	      });
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	
	      gb.in.up.add('readyPercent', this.update.bind(this));
	    }
	  }]);
	
	  return ReadyPercent;
	}();
	
	exports.default = ReadyPercent;

/***/ },
/* 8 */
/***/ function(module, exports) {

	/**
	 * fileOverview: 画面更新クラス
	 * Project:
	 * File: UpdateMgr
	 * Date:
	 * Author:
	 */
	
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var UpdateMgr = function () {
	  function UpdateMgr() {
	    _classCallCheck(this, UpdateMgr);
	
	    //更新回数
	    this.cnt = 0;
	
	    //毎フレーム実行させる関数を保持
	    this.updateList = [];
	
	    this.len = 0;
	    this.Timer = null;
	    this.isStop = false;
	  }
	
	  /**
	   *  実行したい関数を登録
	   *  func : 関数
	   */
	
	
	  _createClass(UpdateMgr, [{
	    key: 'add',
	    value: function add(name, func) {
	
	      var obj = { name: name, func: func };
	
	      this.updateList.push(obj);
	    }
	
	    /**
	     *  実行したい関数を削除
	     *  func : 関数
	     */
	
	  }, {
	    key: 'remove',
	    value: function remove(name) {
	
	      var target = { name: name, func: function func() {} };
	
	      UpdateMgr.arrRemove(this.updateList, target);
	    }
	
	    /**
	     *  更新(登録された関数の総数分実行する)
	     */
	
	  }, {
	    key: 'update',
	    value: function update() {
	
	      for (var i in this.updateList) {
	        this.updateList[i].func();
	      }
	    }
	
	    /**
	     *　更新の実行関数の内容
	     */
	
	  }, {
	    key: 'loop',
	    value: function loop() {
	
	      this.update();
	      this.cnt++;
	
	      this.Timer = requestAnimationFrame(this.loop.bind(this));
	      if (this.isStop) cancelAnimationFrame(this.Timer);
	    }
	
	    /**
	     *　更新停止
	     */
	
	  }, {
	    key: 'stop',
	    value: function stop() {
	
	      this.isStop = true;
	    }
	
	    /**
	     *　更新再開
	     */
	
	  }, {
	    key: 'resume',
	    value: function resume() {
	
	      this.isStop = false;
	      this.loop();
	    }
	
	    /**
	     *　静的メンバ関数
	     */
	
	  }], [{
	    key: 'arrRemove',
	    value: function arrRemove(arr, target) {
	
	      var len = arr.length;
	      var check;
	      for (var i = 0; i < len; i++) {
	        check = arr[i];
	
	        if (check.name == target.name) {
	          arr.splice(i, 1);
	          i--;
	          len--;
	        }
	      }
	
	      return arr;
	    }
	  }]);
	
	  return UpdateMgr;
	}();
	
	exports.default = UpdateMgr;

/***/ },
/* 9 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//--------------------------------------------------
	//
	//  ResizeMgr
	//
	//--------------------------------------------------
	
	var ResizeMgr = function () {
	  function ResizeMgr() {
	    _classCallCheck(this, ResizeMgr);
	
	    this.resizeList = [];
	    this.ws = { w: 0, h: 0, oldW: -1, oldH: -1 };
	
	    this.setup();
	  }
	
	  _createClass(ResizeMgr, [{
	    key: 'setup',
	    value: function setup() {
	
	      var self = this;
	
	      $(window).on('resize', function (e) {
	        self.onResize.call(self, e);
	      });
	      this.getWindowSize();
	    }
	  }, {
	    key: 'onResize',
	    value: function onResize(e) {
	
	      this.getWindowSize();
	
	      for (var i in this.resizeList) {
	        this.resizeList[i].func();
	      }
	    }
	  }, {
	    key: 'W',
	    value: function W() {
	
	      return this.ws.w;
	    }
	  }, {
	    key: 'H',
	    value: function H() {
	
	      return this.ws.h;
	    }
	  }, {
	    key: 'getWindowSize',
	    value: function getWindowSize() {
	
	      var w = window.innerWidth,
	          h = window.innerHeight;
	
	      this.ws.oldW = this.ws.w;
	      this.ws.oldH = this.ws.h;
	      this.ws.w = w;
	      this.ws.h = h;
	    }
	  }, {
	    key: 'add',
	    value: function add(name, func) {
	
	      var obj = { name: name, func: func };
	
	      this.resizeList.push(obj);
	    }
	  }, {
	    key: 'remove',
	    value: function remove(name) {
	
	      ResizeMgr.arrRemove(this.resizeList, name);
	    }
	
	    // ------------------------------------------------------------
	    //
	    //  静的メンバ
	    //
	    // ------------------------------------------------------------
	
	  }], [{
	    key: 'arrRemove',
	    value: function arrRemove(arr, name) {
	
	      var len = arr.length;
	      var check;
	      for (var i = 0; i < len; i++) {
	        check = arr[i];
	
	        if (check.name == name) {
	          arr.splice(i, 1);
	          i--;
	          len--;
	        }
	      }
	
	      return arr;
	    }
	  }]);
	
	  return ResizeMgr;
	}();
	
	exports.default = ResizeMgr;

/***/ },
/* 10 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//--------------------------------------------------
	//
	//  ScrollMgr
	//
	//--------------------------------------------------
	
	var ScrollMgr = function () {
	  function ScrollMgr() {
	    _classCallCheck(this, ScrollMgr);
	
	    this.scrollList = [];
	    this.scrollEndList = [];
	    this.w = 0;this.h = 0;
	    this.st = 0; // 現在のscroll top
	    this.sb = 0; // 現在のscroll bottom
	    this.sv = 0; // 現在のスクロール量
	
	    this.STAmount = 0;
	    this.offset = 0;
	
	    this.isStart = true;
	
	    this.setEvents();
	  }
	
	  _createClass(ScrollMgr, [{
	    key: 'setup',
	    value: function setup() {
	
	      var self = this;
	
	      this.getWindowSize();
	      this.add('end', this.end.bind(this));
	    }
	  }, {
	    key: 'add',
	    value: function add(name, func) {
	
	      var obj = { name: name, func: func };
	
	      this.scrollList.push(obj);
	    }
	  }, {
	    key: 'remove',
	    value: function remove(name) {
	
	      ScrollMgr.arrRemove(this.scrollList, name);
	    }
	  }, {
	    key: 'remove',
	    value: function remove(target) {
	
	      ScrollMgr.arrRemove(this.scrollList, target);
	    }
	  }, {
	    key: 'onResize',
	    value: function onResize(e) {
	
	      this.getWindowSize();
	    }
	  }, {
	    key: 'onScroll',
	    value: function onScroll(e) {
	
	      if (this.isStart) {
	        this.isStart = false;
	        // log('resizeStart');
	        // 最初だけの処理
	      };
	
	      this.st = $(window).scrollTop();
	      this.sb = this.st + this.h;
	
	      for (var i in this.scrollList) {
	        this.scrollList[i].func();
	      }
	    }
	  }, {
	    key: 'onMouseWheel',
	    value: function onMouseWheel(e, delta, deltaX, deltaY) {
	
	      this.STAmount = deltaY;
	      if (gb.in.u.isWin()) this.STAmount *= 60;
	      if (gb.in.u.isFF() && !gb.in.u.isWin()) this.STAmount *= 60;
	      // if (Math.abs(this.STAmount) > 10) this.STAmount *= 0.4;
	      this.offset += this.STAmount;
	
	      for (var i in this.scrollList) {
	        this.scrollList[i].func();
	      }
	    }
	  }, {
	    key: 'getWindowSize',
	    value: function getWindowSize() {
	
	      this.w = window.innerWidth;
	      this.h = window.innerHeight;
	    }
	  }, {
	    key: 'end',
	    value: function end(e) {
	
	      var self = this;
	
	      if (this.Timer) clearTimeout(this.Timer);
	      this.Timer = setTimeout(function () {
	        self.isStart = true;
	        // log('resizeEnd');
	
	        for (var i in self.scrollEndList) {
	          self.scrollEndList[i]();
	        }
	      }, 200);
	    }
	  }, {
	    key: 'addFixedObjectScroll',
	    value: function addFixedObjectScroll($target) {
	
	      this.scrollList.push(function () {
	
	        $target.css("left", -$(window).scrollLeft());
	      });
	    }
	  }, {
	    key: 'onReady',
	    value: function onReady() {
	      var _this = this;
	
	      this.setup();
	
	      $(window).on('resize', function (e) {
	        _this.onResize(e);
	      });
	      $(window).on('scroll', function (e) {
	        _this.onScroll(e);
	      });
	      $(document).on('mousewheel', function (e, delta, deltaX, deltaY) {
	        _this.onMouseWheel(e, delta, deltaX, deltaY);
	      });
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	
	      $(document).on('ready', this.onReady.bind(this));
	    }
	
	    // ------------------------------------------------------------
	    //
	    //  静的メンバ
	    //
	    // ------------------------------------------------------------
	
	  }], [{
	    key: 'arrRemove',
	    value: function arrRemove(arr, name) {
	
	      var len = arr.length;
	      var check;
	      for (var i = 0; i < len; i++) {
	        check = arr[i];
	
	        if (check.name == name) {
	          arr.splice(i, 1);
	          i--;
	          len--;
	        }
	      }
	
	      return arr;
	    }
	  }]);
	
	  return ScrollMgr;
	}();
	
	exports.default = ScrollMgr;

/***/ },
/* 11 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//--------------------------------------------------
	//
	//  MouseMgr
	//
	//--------------------------------------------------
	
	var MouseMgr = function () {
	  function MouseMgr() {
	    var $target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : $(document);
	
	    _classCallCheck(this, MouseMgr);
	
	    this.$target = $target;
	
	    this.x = 0;
	    this.y = 0;
	
	    this.cx = 0;
	    this.cy = 0;
	
	    this.mouseMoveList = [{ name: 'def', func: function func() {} }];
	    this.mouseMoveStartList = [{ name: 'def', func: function func() {} }];
	    this.mouseMoveEndList = [{ name: 'def', func: function func() {} }];
	
	    this.isStart = true;
	    this.Timer = null;
	    this.endTime = 10;
	
	    this.setup();
	    this.setEvents();
	  }
	
	  _createClass(MouseMgr, [{
	    key: 'setup',
	    value: function setup() {
	
	      this.add('onEnd', this.onEnd.bind(this));
	    }
	  }, {
	    key: 'onTouchmove',
	    value: function onTouchmove(e) {
	
	      // e.preventDefault();
	
	      this.x = e.originalEvent.changedTouches[0].pageX;
	      this.y = e.originalEvent.changedTouches[0].pageY;
	    }
	  }, {
	    key: 'onMousemove',
	    value: function onMousemove(e) {
	
	      // log(this.mouseMoveList);
	
	      if (this.isStart) {
	        this.isStart = false;
	
	        // 最初だけの処理
	        // log('moveStart');
	
	        for (var i in this.mouseMoveStartList) {
	          this.mouseMoveStartList[i].func();
	        }
	      };
	
	      if (e.offsetX == undefined) {
	        // this works for Firefox
	        this.x = e.pageX - this.$target.offset().left;
	        this.y = e.pageY - this.$target.offset().top;
	      } else {
	        // works in Google Chrome
	        this.x = e.pageX - $(window).scrollLeft();
	        this.y = e.pageY - $(window).scrollTop();
	      }
	
	      this.cx = e.clientX - gb.in.r.W() / 2;
	      this.cy = e.clientY - gb.in.r.H() / 2;
	
	      for (var i in this.mouseMoveList) {
	        this.mouseMoveList[i].func();
	      }
	    }
	  }, {
	    key: 'onEnd',
	    value: function onEnd(e) {
	      var _this = this;
	
	      if (this.Timer) clearTimeout(this.Timer);
	      this.Timer = setTimeout(function () {
	        _this.isStart = true;
	
	        // log('moveEnd');
	
	        for (var i in _this.mouseMoveEndList) {
	          _this.mouseMoveEndList[i].func();
	        }
	      }, this.endTime);
	    }
	  }, {
	    key: 'add',
	    value: function add(name, func) {
	
	      var obj = { name: name, func: func };
	
	      this.mouseMoveList.push(obj);
	    }
	  }, {
	    key: 'addStart',
	    value: function addStart(name, func) {
	
	      var obj = { name: name, func: func };
	
	      this.mouseMoveStartList.push(obj);
	    }
	  }, {
	    key: 'addEnd',
	    value: function addEnd(name, func) {
	
	      var obj = { name: name, func: func };
	
	      this.mouseMoveEndList.push(obj);
	    }
	  }, {
	    key: 'remove',
	    value: function remove(name) {
	
	      MouseMgr.arrRemove(this.mouseMoveList, name);
	    }
	
	    // ------------------------------------------------------------
	    //
	    //  静的メンバ
	    //
	    // ------------------------------------------------------------
	
	  }, {
	    key: 'removeEvents',
	    value: function removeEvents() {
	
	      this.$target.off("touchmove.MouseMgr");
	      this.$target.off("mousemove.MouseMgr");
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	      var _this2 = this;
	
	      this.$target.on("touchmove.MouseMgr", function (e) {
	        _this2.onTouchmove(e);
	      });
	      this.$target.on("mousemove.MouseMgr", function (e) {
	        _this2.onMousemove(e);
	      });
	    }
	  }], [{
	    key: 'arrRemove',
	    value: function arrRemove(arr, name) {
	
	      var len = arr.length;
	      var check;
	      for (var i = 0; i < len; i++) {
	        check = arr[i];
	
	        if (check.name == name) {
	          arr.splice(i, 1);
	          i--;
	          len--;
	        }
	      }
	
	      return arr;
	    }
	  }]);
	
	  return MouseMgr;
	}();
	
	exports.default = MouseMgr;

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * fileOverview:
	roject:
	ile: LoadMgr
	ate:
	uthor:
	
	
	var _Loader = __webpack_require__(13);
	
	var _Loader2 = _interopRequireDefault(_Loader);
	
	var _Sec01Video = __webpack_require__(14);
	
	var _Sec01Video2 = _interopRequireDefault(_Sec01Video);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var LoadMgr = function () {
	  function LoadMgr() {
	    _classCallCheck(this, LoadMgr);
	  }
	
	  _createClass(LoadMgr, [{
	    key: 'start',
	    value: function start() {
	
	      // その他
	      // ソーシャルスクリプトなど
	      // this.snsScript();
	
	      // this.loadYoutubeScript();
	
	      // section02で使う大量の画像をロード // web workerなども使って
	      // this.sec02Img();
	
	      // this.webFont();
	
	    }
	  }, {
	    key: 'loadYoutubeScript',
	    value: function loadYoutubeScript() {
	
	      var loader = new _Loader2.default();
	
	      var len = 1;
	      gb.in.rm.total += len; // load数のtotalを計算
	      if (gb.in.u.isSP) gb.in.rm.completed++;
	
	      var cb = function cb() {
	
	        gb.in.rm.completed++;
	      };
	
	      loader.youtubeIframeScript(cb);
	    }
	  }, {
	    key: 'sec02Img',
	    value: function sec02Img() {
	
	      // bgVideoTile用の連番画像の読み込み
	      gb.in.loadSec02Img = this.loader = new _Loader2.default();
	
	      if (gb.in.u.isPC) {
	        var len = gb.in.conf.sec02ImgNum;
	        gb.in.rm.total += len; // load数のtotalを計算
	        var path = '/project-name/assets/resource/img/movie/bgImg/';
	      } else {
	        var len = 19;
	        gb.in.rm.total += len; // load数のtotalを計算
	        var path = '/project-name/assets/resource/img/movie/bgImgSP/';
	      }
	
	      var cb = function cb() {
	        // gb.in.Sec02Bg.create();
	      };
	      var cb02 = function cb02() {
	        gb.in.rm.completed++;
	      };
	
	      // this.loader.imgSerialLoad(len,path,'tfny_',cb,cb02);
	      this.loader.img(len + 1, path, 'tfny_', cb, cb02);
	    }
	  }, {
	    key: 'section04ProductShader',
	    value: function section04ProductShader() {
	      var _this = this;
	
	      var shaders = [];
	      var shaderLoadList = [
	      // gb.Clock,
	      // gb.Color,
	      // gb.Plasma,
	      // gb.Sepia,
	      // gb.Mosaic,
	      gb.ZoomBlur, gb.ZoomBlur, gb.Transition02];
	
	      var len = shaderLoadList.length;
	      gb.in.rm.total += len; // load数のtotalを計算
	
	      var shaderSerialLoad = function shaderSerialLoad(len, cb) {
	
	        var shader,
	            cnt = 0;
	
	        var load = function load(i) {
	          shader = new shaderLoadList[i](comp);
	          shaders.push(shader);
	        };
	
	        var comp = function comp() {
	          cnt++;
	          gb.in.rm.completed++;
	          if (cnt == len) cb(shaders);else load(cnt);
	        };
	
	        load(cnt);
	      };
	
	      shaderSerialLoad(shaderLoadList.length, function (shaders) {
	
	        _this.shaders = shaders;
	        _this.section04ProductImg();
	      });
	    }
	  }, {
	    key: 'section04ProductImg',
	    value: function section04ProductImg() {
	      var _this2 = this;
	
	      var textureList = ['/project-name/assets/resource/img/product/tiffany_hand1.jpg', '/project-name/assets/resource/img/product/brown.png', '/project-name/assets/resource/img/product/blue.png', '/project-name/assets/resource/img/product/white.png', '/project-name/assets/resource/img/product/tiffanyblue.png', '/project-name/assets/resource/img/product/pink.png'];
	      this.textures = [];
	
	      var len = textureList.length;
	      gb.in.rm.total += len; // load数のtotalを計算
	
	      var textureSerialLoad = function textureSerialLoad(len, cb) {
	
	        var texture,
	            cnt = 0;
	
	        var load = function load(i) {
	          texture = THREE.ImageUtils.loadTexture(textureList[i], null, comp);
	          _this2.textures.push(texture);
	        };
	
	        var comp = function comp() {
	          cnt++;
	          gb.in.rm.completed++;
	          if (cnt == len) cb();else load(cnt);
	        };
	
	        load(cnt);
	      };
	
	      textureSerialLoad(textureList.length, function () {
	        $(window).trigger('onSection04ProductImg');
	      });
	    }
	  }, {
	    key: 'webFont',
	    value: function webFont() {
	
	      // web font loader用param
	      var config = {
	        custom: {
	          families: ['Cormorant', 'Roboto Condensed'
	          // 'Noto Sans Japanese',
	          // 'Roboto',
	          // 'Alegreya Sans',
	          // 'Alegreya Sans SC'
	          ],
	          urls: ['https://fonts.googleapis.com/css?family=Cormorant:500,500i|Roboto+Condensed'
	          // '/project-name/assets/css/font.css',
	          // 'https://fonts.googleapis.com/css?family=Roboto:400,500,300',
	          // 'https://fonts.googleapis.com/css?family=Alegreya+Sans:400,100',
	          // 'https://fonts.googleapis.com/css?family=Alegreya+Sans+SC:400,300,100'
	          ]
	        },
	        active: function active() {
	
	          log('webFont!!!!');
	          gb.in.conf.webFontLoaded = true;
	        }
	      };
	
	      var loader = new _Loader2.default();
	      loader.webFont(config);
	    }
	  }, {
	    key: 'onEnd',
	    value: function onEnd() {}
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {}
	  }]);
	
	  return LoadMgr;
	}();
	
	exports.default = LoadMgr;

/***/ },
/* 13 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * fileOverview:
	 * Project:
	 * File: Loader
	 * Date:
	 * Author:
	 */
	
	var Loader = function () {
	  function Loader() {
	    _classCallCheck(this, Loader);
	
	    this.list = [];
	    this.cnt = 0;
	  }
	
	  _createClass(Loader, [{
	    key: "json",
	    value: function json(src, cb) {
	
	      $.getJSON(src, function (data) {
	
	        cb(data);
	      });
	    }
	  }, {
	    key: "img",
	    value: function img(len, path, name) {
	      var cb = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {};
	      var cb02 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : function () {};
	
	
	      var i,
	          img,
	          nth,
	          cnt = 1,
	          list = [];
	
	      for (i = 1; i < len; i++) {
	        img = new Image();
	        nth = gb.in.u.add0(i, -5);
	        this.list.push(img);
	        img.onload = function () {
	          cb02();
	          cnt++;
	          if (cnt == len) cb();
	        };
	        img.src = path + name + nth + ".jpg";
	      }
	    }
	
	    // cb02 load完了時 都度都度用コールバック関数
	
	  }, {
	    key: "imgSerialLoad",
	    value: function imgSerialLoad(len, path, name) {
	      var _this = this;
	
	      var cb = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {};
	      var cb02 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : function () {};
	
	
	      var i,
	          img,
	          nth,
	          cnt = 0,
	          list = [];
	
	      var load = function load(i) {
	        img = new Image();
	        nth = gb.in.u.add0(i, -5);
	        _this.list.push(img);
	        img.onload = function () {
	          cb02();
	          comp();
	        };
	        img.src = path + name + nth + ".jpg";
	      };
	
	      var comp = function comp() {
	        cnt++;
	        if (cnt == len) {
	          cb();
	        } else {
	          load(cnt);
	        }
	      };
	
	      load(cnt);
	    }
	  }, {
	    key: "ajaxImgLoad",
	    value: function ajaxImgLoad(cb) {
	
	      var imgNum = $('img').length;
	      var cnt = 0;
	
	      $('img').each(function (i, elm) {
	
	        var img = new Image();
	        img.onload = function () {
	          cnt++;
	          if (cnt == imgNum - 1) {
	            cb();
	          };
	        };
	        img.src = elm.src;
	      });
	    }
	  }, {
	    key: "video",
	    value: function video(src) {
	      var _this2 = this;
	
	      var cb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};
	
	
	      var isLoad = false;
	      this.video = document.createElement('video');
	
	      var type = this.supportVideoExt(this.video);
	      if (type == "") {
	        return;
	      }
	
	      this.video.addEventListener("canplay", function () {
	
	        if (!_this2.isLoad) {
	          _this2.isLoad = true;
	          _this2.video.loop = true;
	          _this2.video.play();
	          cb();
	        }
	      }, false);
	
	      // ロード
	      this.video.src = src;
	    }
	  }, {
	    key: "youtubeIframeScript",
	    value: function youtubeIframeScript(cb) {
	
	      // IFrame Player API の読み込み
	      var tag = document.createElement('script');
	      tag.onload = function () {
	
	        cb();
	      };
	
	      // tag.src = "https://www.youtube.com/iframe_api";
	      tag.src = "http://www.youtube.com/iframe_api";
	      var firstScriptTag = document.getElementsByTagName('script')[0];
	      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
	
	      // YouTube動画
	      window.onYouTubeIframeReady = function () {
	
	        window.console.log('youtubeready');
	      };
	    }
	  }, {
	    key: "supportVideoExt",
	    value: function supportVideoExt() {
	
	      var ext = "";
	      if (this.video.canPlayType("video/webm") == "probably" || this.video.canPlayType("video/webm") == "maybe") {
	        ext = "webm";
	      } else if (this.video.canPlayType("video/mp4") == "probably" || this.video.canPlayType("video/mp4") == "maybe") {
	        ext = "mp4";
	      } else if (this.video.canPlayType("video/ogg") == "probably" || this.video.canPlayType("video/ogg") == "maybe") {
	        ext = "ogg";
	      }
	
	      return ext;
	    }
	
	    //WebFontのローダー管理
	
	  }, {
	    key: "webFont",
	    value: function webFont(config) {
	
	      // web font loader用jsのappend
	      var wf = document.createElement('script');
	      wf.src = ('https:' == document.location.protocol ? 'https' : 'http') + '://ajax.googleapis.com/ajax/libs/webfont/1/webfont.js';
	      wf.type = 'text/javascript';
	      wf.async = 'true';
	      var s = document.getElementsByTagName('script')[0];
	      s.parentNode.insertBefore(wf, s);
	
	      var again = function again() {
	
	        // yt.playerがloadされていない場合を考慮して
	        if (typeof WebFont !== "undefined" && WebFont) {
	
	          WebFont.load(config);
	        } else {
	
	          setTimeout(again, 100);
	        }
	      };
	
	      again();
	    }
	  }, {
	    key: "onLoaded",
	    value: function onLoaded() {
	
	      $('html').css('opacity', '1');
	    }
	  }, {
	    key: "setEvents",
	    value: function setEvents(len) {
	
	      var self = this;
	
	      $(window).on('loaded', function (event) {
	
	        self.cnt++;
	        if (self.cnt == len) onLoaded();
	      });
	    }
	  }]);
	
	  return Loader;
	}();
	
	exports.default = Loader;

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); //--------------------------------------------------
	//
	//  Sec01Video
	//
	//--------------------------------------------------
	
	
	var _YoutubeForSec = __webpack_require__(15);
	
	var _YoutubeForSec2 = _interopRequireDefault(_YoutubeForSec);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Sec01Video = function () {
	  function Sec01Video(param) {
	    _classCallCheck(this, Sec01Video);
	
	    // sec01video用
	    gb.in.rm.total++;
	    if (gb.in.u.isSP) gb.in.rm.completed++;
	
	    if (gb.in.u.isPC) this.setup();
	    this.setEvents();
	  }
	
	  _createClass(Sec01Video, [{
	    key: 'setup',
	    value: function setup() {
	
	      // create
	      this.video = new _YoutubeForSec2.default('sec01Video', gb.in.conf.youtubeID01, null);
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {}
	  }]);
	
	  return Sec01Video;
	}();
	
	exports.default = Sec01Video;

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); //--------------------------------------------------
	//
	//  YoutubeForSec01
	//
	//--------------------------------------------------
	
	var _FullSize = __webpack_require__(16);
	
	var _FullSize2 = _interopRequireDefault(_FullSize);
	
	var _TopTime = __webpack_require__(17);
	
	var _TopTime2 = _interopRequireDefault(_TopTime);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var YoutubeForSec01 = function () {
	  function YoutubeForSec01(id, videoID, videoList) {
	    _classCallCheck(this, YoutubeForSec01);
	
	    this.player = null;
	
	    this.isFirst = true;
	    this.isSeekLock = false;
	    this.isSeekLock02 = false;
	
	    this.setup(id, videoID, videoList);
	  }
	
	  _createClass(YoutubeForSec01, [{
	    key: 'setup',
	    value: function setup(id, videoID, videoList) {
	
	      // yt.player��load����Ƥ��ʤ����Ϥ򿼑]����
	      if (typeof YT !== "undefined" && YT && YT.Player) {
	
	        // create
	        this.player = new YT.Player(id, {
	          width: '100%', // �ץ�`��`�η�
	          height: '100%', // �ץ�`��`�θߤ�
	          videoId: videoID, // YouTube��ID
	          events: {
	            'onReady': this.onReady.bind(this), // �ץ�`��`�Μʂ䤬�Ǥ����Ȥ��ˌg��
	            'onStateChange': this.onPlayerStateChange.bind(this)
	          },
	          playerVars: {
	            autoplay: 1,
	            controls: 0,
	            showinfo: 0,
	            autohide: 1,
	            rel: 0,
	            enablejsapi: 1,
	            iv_load_policy: 3,
	            disablekb: 1,
	            modestbranding: 1,
	            start: 2,
	            loop: 1
	          }
	        });
	
	        // layout
	        var l = new _FullSize2.default($('#bgWrap'), $('#sec01Video'), 0, 'FullSizeSec01Video');
	        l.targetDefW = 1920;
	        l.targetDefH = 1080;
	        l.run();
	      } else {
	
	        setTimeout(this.setup.bind(this, id, videoID, videoList), 100);
	      }
	    }
	  }, {
	    key: 'onReady',
	    value: function onReady(e) {
	
	      // �߽���Ȥ�
	      e.target.setPlaybackQuality('highres');
	
	      // this.player.playVideo();
	      this.setEvents();
	
	      // play
	      gb.in.time = new _TopTime2.default();
	      gb.in.sec01Video.video.playByNYTime();
	    }
	  }, {
	    key: 'onPlayerStateChange',
	    value: function onPlayerStateChange(e) {
	
	      var status = e.data;
	
	      // �����K�ˤ����Ȥ� 0
	      if (status == window.YT.PlayerState.ENDED) {
	
	        // �ӻ�����
	        this.player.playVideo();
	      }
	
	      // // �����ФΤȤ� 1
	      if (status == window.YT.PlayerState.PLAYING) {
	
	        if (this.isFirst) {
	          this.isFirst = false;
	          gb.in.rm.completed++;
	        }
	
	        // e.target.pauseVideo();
	      }
	
	      // // ֹͣ�ФΤȤ� 2
	      // if (status == window.YT.PlayerState.PAUSED) {
	      //     console.log('ֹͣ��');
	      // }
	
	      // // �Хåե�����ФΤȤ� 3
	      // if (status == window.YT.PlayerState.BUFFERING) {
	      //     console.log('�Хåե������');
	      // }
	
	      // // �^�����g�ߤΤȤ� 5 5��ֹ�ޤ�Ȥ����뤫�顢�����Ǥ�play
	      if (status == window.YT.PlayerState.CUED) {
	
	        this.playByNYTime();
	      }
	
	      // for safari �ե����륵�����ؤ���
	      if (gb.in.u.isSafari() && status == window.YT.PlayerState.BUFFERING) this.player.seekTo(this.player.getCurrentTime() + 0.1);
	    }
	  }, {
	    key: 'playByNYTime',
	    value: function playByNYTime() {
	
	      var h = gb.in.time.nyH;
	
	      if (h >= 5 && h < 13) {
	
	        this.player.seekTo(0);
	      } else if (h >= 13 && h < 18) {
	
	        this.player.seekTo(36);
	      } else {
	
	        this.player.seekTo(66);
	      }
	
	      this.player.playVideo();
	    }
	  }, {
	    key: 'onSeek',
	    value: function onSeek() {
	
	      var now = this.player.getCurrentTime();
	
	      if (now < 1.0) {
	        this.isSeekLock = false;
	        this.isSeekLock02 = false;
	      };
	
	      if (now > 90 && !this.isSeekLock) {
	        this.isSeekLock = true;
	
	        TweenMax.to($('.bgOverlayImg'), 3.0, {
	          opacity: 1,
	          ease: Power3.easeInOut
	        });
	      }
	
	      if (now > 1.0 && !this.isSeekLock02) {
	        this.isSeekLock02 = true;
	
	        TweenMax.to($('.bgOverlayImg'), 3.0, {
	          opacity: 0,
	          ease: Power3.easeInOut
	        });
	      }
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	
	      gb.in.up.add('YoutubeForSec01', this.onSeek.bind(this));
	    }
	  }, {
	    key: 'removeEvents',
	    value: function removeEvents() {
	
	      gb.in.up.remove('YoutubeForSec01');
	    }
	  }]);
	
	  return YoutubeForSec01;
	}();
	
	exports.default = YoutubeForSec01;

/***/ },
/* 16 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//--------------------------------------------------
	//
	//  FullSize
	//
	//--------------------------------------------------
	
	var FullSize = function () {
	  function FullSize($Wrap, $Target, mode, name) {
	    _classCallCheck(this, FullSize);
	
	    this.$wrap = $Wrap;
	    this.$target = $Target;
	
	    this.W = this.$wrap.width();
	    this.H = this.$wrap.height();
	    this.targetW;
	    this.targetH;
	    this.targetDefW;
	    this.targetDefH;
	    this.ratioW;
	    this.ratio;
	    this.ml;
	    this.mt;
	
	    this.mode = mode || 0;
	    this.name = name || 'fullsize';
	
	    // this.init();
	    // this.run();
	    this.setEvents();
	  }
	
	  _createClass(FullSize, [{
	    key: 'setStyle',
	    value: function setStyle() {
	
	      this.$wrap.css({
	        'overflow': 'hidden'
	      });
	      this.$target.css('position', 'absolute');
	    }
	  }, {
	    key: 'getDef',
	    value: function getDef() {
	
	      this.targetDefW = this.$target.get(0).clientWidth || this.$target.get(0).width || this.$target.width(), this.targetDefH = this.$target.get(0).clientHeight || this.$target.get(0).height || this.$target.height();
	    }
	  }, {
	    key: 'getSize',
	    value: function getSize() {
	
	      this.W = this.$wrap.width();
	      this.H = this.$wrap.height();
	
	      this.ratioW = this.H / this.W;
	      this.ratio = this.targetDefH / this.targetDefW, this.ml = -(this.targetDefW * (this.H / this.targetDefH)) / 2;
	      this.mt = -(this.targetDefH * (this.W / this.targetDefW)) / 2;
	    }
	  }, {
	    key: 'setPos',
	    value: function setPos() {
	
	      if (this.mode == 'cover' || this.mode == 0) {
	
	        //--------------------------------------------------
	        //  枠にピッタリになるように background-size cover
	        //--------------------------------------------------
	
	        if (this.ratioW > this.ratio) {
	
	          var w = this.H / this.targetDefH * this.targetDefW;
	
	          this.$target.css({ 'height': this.H }).css({ 'margin-top': 0, 'margin-left': this.ml, 'top': 0, 'left': '50%', 'width': w });
	        } else if (this.ratioW <= this.ratio) {
	
	          var h = this.W / this.targetDefW * this.targetDefH;
	
	          this.$target.css({ 'width': this.W }).css({ 'margin-top': this.mt, 'margin-left': 0, 'top': '50%', 'left': 0, 'height': h });
	        }
	      } else if (this.mode == 'contain' || this.mode == 1) {
	
	        //--------------------------------------------------
	        //  枠内にピッタリ収まるように background-size contain
	        //--------------------------------------------------
	
	        if (this.ratioW < this.ratio) {
	
	          this.$target.css({ 'height': this.H }).css({ 'margin-top': 0, 'margin-left': this.ml, 'top': 0, 'left': '50%', 'width': 'auto' });
	        } else if (this.ratioW >= this.ratio) {
	
	          this.$target.css({ 'width': this.W }).css({ 'margin-top': this.mt, 'margin-left': 0, 'top': '50%', 'left': 0, 'height': 'auto' });
	        }
	      }
	    }
	  }, {
	    key: 'init',
	    value: function init() {
	
	      this.getDef();
	    }
	  }, {
	    key: 'run',
	    value: function run() {
	
	      this.setStyle();
	      this.getSize();
	      this.setPos();
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	
	      gb.in.r.add(this.name, this.run.bind(this));
	    }
	  }]);
	
	  return FullSize;
	}();
	
	exports.default = FullSize;

/***/ },
/* 17 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//--------------------------------------------------
	//
	//  TopTime
	//
	//--------------------------------------------------
	
	// 500px以下になったら表示
	//   時計count
	//   canvas表示
	
	var TopTime = function () {
	  function TopTime() {
	    _classCallCheck(this, TopTime);
	
	    this.$target = $('.timeWrap');
	    this.$h01 = this.$target.find('.h01');
	    this.$h02 = this.$target.find('.h02');
	    this.$m01 = this.$target.find('.m01');
	    this.$m02 = this.$target.find('.m02');
	
	    this.nyH = 0;
	
	    this.isAlert = gb.in.r.ws.h < 500 ? true : false;
	
	    this.dis = 14; //時差
	
	    this.setup();
	    this.run();
	    this.setEvents();
	  }
	
	  _createClass(TopTime, [{
	    key: 'setup',
	    value: function setup() {
	
	      gb.in.u.time();
	      var h = gb.in.u.hour - this.dis;
	      if (h < 0) h = 24 + h;
	      this.nyH = h;
	    }
	  }, {
	    key: 'update',
	    value: function update() {
	
	      // 間引き
	      if (gb.in.up.cnt % 60 !== 0) return;
	
	      gb.in.u.time();
	
	      var h = gb.in.u.hour - this.dis;
	      if (h < 0) h = 24 + h;
	
	      this.nyH = h;
	
	      h = gb.in.u.add0(h).split('');
	      var m = gb.in.u.add0(gb.in.u.minute).split('');
	      var s = gb.in.u.add0(gb.in.u.second).split('');
	
	      this.$h01.text(h[0]);
	      this.$h02.text(h[1]);
	      this.$m01.text(m[0]);
	      this.$m02.text(m[1]);
	
	      // this.$h01.text(s[0])
	      // this.$h02.text(s[1])
	      // this.$m01.text(s[0]);
	      // this.$m02.text(s[1]);
	    }
	  }, {
	    key: 'run',
	    value: function run() {
	
	      gb.in.up.add('TopTime', this.update.bind(this));
	
	      // コンマの表示非表示
	      var tl = new TimelineMax({ repeat: -1 });
	
	      tl.set(this.$target.find('.colon'), { opacity: 0 }).to(this.$target.find('.colon'), 0.5, { opacity: 1, ease: Power2.easeInOut }).to(this.$target.find('.colon'), 0.5, { opacity: 0, ease: Power2.easeInOut });
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {}
	  }, {
	    key: 'removeEvents',
	    value: function removeEvents() {
	
	      gb.in.up.remove('TopTime');
	    }
	  }]);
	
	  return TopTime;
	}();
	
	exports.default = TopTime;

/***/ },
/* 18 */
/***/ function(module, exports) {

	/**
	 * fileOverview: 環境判定クラス(デバイス、ブラウザ)、各判定メソッド詳細はDevice.jsを参照
	 * Project:
	 * File: JudgeEnvironment
	 * Date:
	 * Author:
	 */
	
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var JudgeEnvironment = function () {
	  function JudgeEnvironment() {
	    _classCallCheck(this, JudgeEnvironment);
	
	    this.setup();
	    this.setEvents();
	  }
	
	  _createClass(JudgeEnvironment, [{
	    key: 'setup',
	    value: function setup() {
	
	      // デバイス判定
	      gb.in.u.isDeviceSP();
	      gb.in.u.isDeviceTAB();
	      gb.in.u.isDeviceMB();
	      gb.in.u.isDevicePC();
	
	      // ブラウザバージョン判定
	      gb.in.u.isIEVersion();
	
	      // responsive / portrait / landscape
	      gb.in.u.isDirection();
	      gb.in.u.isResponsive(gb.in.conf.bp);
	      gb.in.r.add('isDirection', gb.in.u.isDirection.bind(gb.in.u));
	      gb.in.r.add('isResponsive', gb.in.u.isResponsive.bind(gb.in.u, gb.in.conf.bp));
	    }
	  }, {
	    key: 'onReady',
	    value: function onReady() {
	
	      this.setup();
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {}
	  }]);
	
	  return JudgeEnvironment;
	}();
	
	exports.default = JudgeEnvironment;

/***/ },
/* 19 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//--------------------------------------------------
	//
	//  ResponsiveSwitchImg
	//
	//--------------------------------------------------
	
	var ResponsiveSwitchImg = function () {
	  function ResponsiveSwitchImg() {
	    _classCallCheck(this, ResponsiveSwitchImg);
	
	    this.setup();
	    this.run();
	    this.setEvents();
	  }
	
	  _createClass(ResponsiveSwitchImg, [{
	    key: 'setup',
	    value: function setup() {
	
	      this.isPCLock = gb.in.u.isResPC ? false : true;
	      this.isSPLock = gb.in.u.isResSP ? false : true;
	
	      this.$target = $('.responsiveImg');
	    }
	  }, {
	    key: 'run',
	    value: function run() {
	
	      // ------------------------------------------------------------
	      //  ブレイクポイントよりもsp側
	      // ------------------------------------------------------------
	      if (gb.in.u.isResSP && !this.isSPLock) {
	        this.isPCLock = false;
	        this.isSPLock = true;
	
	        log(11);
	
	        this.$target.each(function (index, el) {
	          var _this = this;
	
	          var src = $(this).attr('src');
	          src = gb.in.u.strReplace(src, '_pc', '_sp');
	          $(this).off('load');
	          $(this).on('load', function (event) {
	
	            if ($(_this).hasClass('spSize')) gb.in.u.setImgSPSize($(_this));
	          });
	          $(this).attr('src', src);
	
	          // $(this).attr('src',src);
	          // if ($(this).hasClass('spSize')) gb.in.u.setImgSPSize($(this));
	        });
	
	        // responsiveimgがついてないもので、spSizeがついてるものは1/2
	        gb.in.u.setImgSPSize($('.spSize').not('.responsiveImg'));
	      }
	
	      // ------------------------------------------------------------
	      //  ブレイクポイントよりもpc側
	      // ------------------------------------------------------------
	      if (gb.in.u.isResPC && !this.isPCLock) {
	        this.isPCLock = true;
	        this.isSPLock = false;
	
	        log(22);
	
	        this.$target.each(function (index, el) {
	
	          var src = $(this).attr('src');
	          src = gb.in.u.strReplace(src, '_sp', '_pc');
	
	          $(this).attr({ width: 'auto', height: 'auto' });
	          $(this).attr('src', src);
	        });
	
	        // responsiveimgがついてないもので、spSizeがついてるものはautoに
	        $('.spSize').not('.responsiveImg').attr({ width: 'auto', height: 'auto' });
	
	        // spはなぜかloadイベントが呼ばれないので、こっちで処理
	        // if (gb.in.u.isSP) $('.responsiveImg').attr({width: 'auto',height: 'auto'});
	      }
	    }
	  }, {
	    key: 'resume',
	    value: function resume() {
	
	      // log('resume');
	
	      this.setup();
	      this.run();
	
	      gb.in.r.remove('responsiveSwitchImg');
	      gb.in.r.add('responsiveSwitchImg', this.run.bind(this));
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	
	      gb.in.r.add('responsiveSwitchImg', this.run.bind(this));
	    }
	  }]);
	
	  return ResponsiveSwitchImg;
	}();
	
	exports.default = ResponsiveSwitchImg;

/***/ },
/* 20 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	// ------------------------------------------------------------
	//
	//  SwipeTransition sss
	//
	// ------------------------------------------------------------
	
	var SwipeTransition = function () {
	  function SwipeTransition() {
	    _classCallCheck(this, SwipeTransition);
	
	    // ---------------
	    //  dom
	    // ---------------
	    // this.$startWrap = $('.section01, .section02 .next, .section03 .box05');
	    // this.$startWrap = $('.section02');
	    this.$startWrap = $(window);
	    this.$endWrap = $(window);
	
	    this.pageList = {
	      'top': 0,
	      'movie': 1,
	      'interview': 2,
	      'history': 3
	    };
	
	    // variable
	    this.current = 0;
	    this.old = null;
	    this.next = 1;
	    this.prev = null;
	    this.len = 4;
	
	    this.isLock = false;
	
	    // ---------------
	    //  variable
	    // ---------------
	
	    // position
	    this.sX = 0;this.mX = 0;this.eX = 0; //startX,moveX,endX
	    this.dis = 0;this.minDis = 15;
	
	    // time
	    this.sT = 0;this.eT = 0;this.minT = 300; //startTime,ellapsedTime,
	
	    this.W = gb.in.r.W();
	
	    this.onTouchLong = function () {};
	    this.onTouchStartCB = function () {};
	    this.onTouchEndCB = function () {};
	
	    this.setup();
	    this.setEvents();
	  }
	
	  _createClass(SwipeTransition, [{
	    key: 'setup',
	    value: function setup() {}
	  }, {
	    key: 'onTouchStart',
	    value: function onTouchStart(e) {
	
	      // targetX
	      var y = e.originalEvent.changedTouches[0].pageY;
	      this.sY = y;
	
	      this.st = gb.in.s.st;
	      this.sb = gb.in.s.sb;
	      log('sy', y);
	    }
	  }, {
	    key: 'onTouchMove',
	    value: function onTouchMove(e) {
	
	      // targetX
	      var y = e.originalEvent.changedTouches[0].pageY;
	      this.mY = y;
	    }
	  }, {
	    key: 'onTouchEnd',
	    value: function onTouchEnd(e) {
	      var _this = this;
	
	      if (this.isLock) return;
	
	      var y = e.originalEvent.changedTouches[0].pageY;
	      this.eY = y;
	
	      var dis = this.sY - this.eY;
	      var absDis = Math.abs(dis);
	
	      // 最小距離より長かったら、処理
	      if (this.minDis < absDis) {
	
	        // ページ番号を取得
	        this.current = this.pageList[gb.in.pjax.id];
	
	        if (dis > 0) {
	
	          var h = $('.section').height() * gb.in.Layout.size.scale.rate;
	          log(this.sb, h - 10, this.sb < h - 10);
	
	          if (this.current !== 0 && this.sb < h - 10) return;
	          // historyページの場合は処理しない
	          if (this.current == 3) return;
	
	          this.calculateOrder('next');
	
	          // したへ
	          var pageName = Object.keys(this.pageList).filter(function (key) {
	            return _this.pageList[key] === _this.current;
	          })[0];
	          $('.pjaxTo_' + pageName).trigger('click');
	        } else {
	
	          log(this.st, this.st !== 0);
	
	          if (this.st !== 0) return;
	
	          // 上へ
	          this.calculateOrder('prev');
	
	          var pageName = Object.keys(this.pageList).filter(function (key) {
	            return _this.pageList[key] === _this.current;
	          })[0];
	          $('.pjaxTo_' + pageName).trigger('click');
	        }
	      }
	
	      // ----------------
	      //  blur解除
	      // ----------------
	      this.isNotTouch = true;
	
	      // コールバック
	      this.onTouchEndCB();
	    }
	  }, {
	    key: 'calculateOrder',
	    value: function calculateOrder(dir) {
	
	      this.old = this.current;
	
	      if (dir == 'next') {
	
	        this.current++;
	        if (this.current > this.len - 1) this.current = this.len - 1;
	        this.next = this.current + 1;
	        this.prev = this.current - 1;
	      } else {
	
	        this.current--;
	        if (this.current < 0) this.current = 0;
	        this.next = this.current + 1;
	        this.prev = this.current - 1;
	      }
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	      var _this2 = this;
	
	      var self = this;
	
	      this.$startWrap.on('touchstart.SwipeTransition', function (e) {
	        _this2.onTouchStart(e);
	      });
	      // this.$wrap.on('touchmove.SwipeTransition', (e)=>{this.onTouchMove(e);});
	      this.$endWrap.on('touchend.SwipeTransition', function (e) {
	        _this2.onTouchEnd(e);
	      });
	    }
	  }, {
	    key: 'removeEvents',
	    value: function removeEvents() {
	
	      var self = this;
	
	      this.$startWrap.off('touchstart.SwipeTransition');
	      // this.$wrap.off('touchmove.SwipeTransition');
	      this.$endWrap.off('touchend.SwipeTransition');
	    }
	  }]);
	
	  return SwipeTransition;
	}();
	
	exports.default = SwipeTransition;

/***/ },
/* 21 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//--------------------------------------------------
	//
	//  ScrollTransition
	//
	//--------------------------------------------------
	
	var ScrollTransition = function () {
	  function ScrollTransition($target) {
	    _classCallCheck(this, ScrollTransition);
	
	    this.pageList = {
	      'top': 0,
	      'movie': 1,
	      'interview': 2,
	      'history': 3
	    };
	
	    // variable
	    this.current = 0;
	    this.old = null;
	    this.next = 1;
	    this.prev = null;
	    this.len = 4;
	
	    this.isSwitch = true;
	
	    this.setup();
	    this.setEvents();
	  }
	
	  _createClass(ScrollTransition, [{
	    key: 'setup',
	    value: function setup() {}
	  }, {
	    key: 'switch',
	    value: function _switch() {
	      var _this = this;
	
	      if (!gb.in.u.isIE) var val = 30;else var val = 0;
	
	      // log(gb.in.pjax.isPjaxLock,this.STAmount,this.current,this.isSwitch);
	
	      // pjaxlock時は処理しない
	      if (gb.in.pjax.isPjaxLock) return;
	
	      // ページ番号を取得
	      this.current = this.pageList[gb.in.pjax.id];
	
	      //ホイールが0以上 かつ currentが一番最初でない かつ switch可能状態であれば
	      if (this.STAmount > val && this.current > 0 && this.isSwitch) {
	
	        // historyページのときは上スクロールしてもinterview indexに飛ばさない
	        if (gb.in.pjax.id == 'history') return;
	
	        this.isSwitch = false;
	
	        this.calculateOrder('prev');
	
	        var pageName = Object.keys(this.pageList).filter(function (key) {
	          return _this.pageList[key] === _this.current;
	        })[0];
	
	        $('.pjaxTo_' + pageName).trigger('click');
	
	        //ホイールが0以下 かつ currentが一番最後でない かつ switch可能状態であれば
	      } else if (this.STAmount < -val && this.current < this.len - 1 && this.isSwitch) {
	
	        this.isSwitch = false;
	
	        this.calculateOrder('next');
	
	        var pageName = Object.keys(this.pageList).filter(function (key) {
	          return _this.pageList[key] === _this.current;
	        })[0];
	
	        $('.pjaxTo_' + pageName).trigger('click');
	      };
	    }
	  }, {
	    key: 'calculateOrder',
	    value: function calculateOrder(dir) {
	
	      this.old = this.current;
	
	      if (dir == 'next') {
	
	        this.current++;
	        if (this.current > this.len - 1) this.current = this.len - 1;
	        this.next = this.current + 1;
	        this.prev = this.current - 1;
	      } else {
	
	        this.current--;
	        if (this.current < 0) this.current = 0;
	        this.next = this.current + 1;
	        this.prev = this.current - 1;
	      }
	    }
	  }, {
	    key: 'onMouseWheel',
	    value: function onMouseWheel(e, delta, deltaX, deltaY) {
	
	      // menuが開いているときはスクロール遷移させない
	      if (gb.in.menu.isOpen) return;
	      // res spのときは処理しない
	      if (gb.in.u.isResSP) return;
	
	      this.STAmount = gb.in.s.STAmount;
	
	      this.switch();
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	
	      gb.in.s.add('ScrollTransition', this.onMouseWheel.bind(this));
	    }
	  }]);
	
	  return ScrollTransition;
	}();
	
	exports.default = ScrollTransition;

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // ------------------------------------------------------------
	//
	//  Sns
	//
	// ------------------------------------------------------------
	
	var _metaData = __webpack_require__(23);
	
	var _metaData2 = _interopRequireDefault(_metaData);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Sns = function () {
	  function Sns($fb, $tw, $line, $mail) {
	    _classCallCheck(this, Sns);
	
	    this.$fb = $fb;
	    this.$tw = $tw;
	    this.$line = $line;
	    this.$mail = $mail;
	
	    this.fb = {
	      $target: $fb,
	      tit: encodeURIComponent($('title').html()),
	      des: encodeURIComponent($('.fbDes').attr('content')), // desctiption
	      url: location.href
	    };
	
	    this.tw = {
	      $target: $tw,
	      tit: encodeURIComponent($('title').html()),
	      des: encodeURIComponent($('.fbDes').attr('content')), // desctiption
	      url: location.href,
	      hash: 'hash'
	    };
	
	    this.line = {
	      $target: $line,
	      tit: encodeURIComponent($('title').html()),
	      des: encodeURIComponent($('.fbDes').attr('content')), // desctiption
	      url: location.href
	    };
	
	    this.setEvents();
	  }
	
	  _createClass(Sns, [{
	    key: 'switchMeta',
	    value: function switchMeta() {
	
	      var p = gb.in.pjax.id;
	      if (p == 'interview_detail') {
	
	        log($('.section').hasClass('section03_detail01'));
	        if ($('.section').hasClass('section03_detail01')) p = 'interviewDetail01';else if ($('.section').hasClass('section03_detail02')) p = 'interviewDetail02';else if ($('.section').hasClass('section03_detail03')) p = 'interviewDetail03';
	      }
	
	      // var d = gb.in.conf.meta[p];
	      var d = _metaData2.default[p];
	
	      $('title').text();
	      $('.metaDes').attr({ 'content': d.description });
	      $('.metaKey').attr({ 'content': d.keyword });
	
	      $('.fbTit').attr({ 'content': d.fb.tit });
	      $('.fbDes').attr({ 'content': d.fb.des });
	      $('.fbImg').attr({ 'content': d.fb.img });
	      $('.fbUrl').attr({ 'content': d.fb.url });
	
	      $('.twTit').attr({ 'content': d.tw.tit });
	      $('.twDes').attr({ 'content': d.tw.des });
	      $('.twImg').attr({ 'content': d.tw.img });
	      $('.twUrl').attr({ 'content': d.tw.url });
	    }
	  }, {
	    key: 'setting',
	    value: function setting() {
	
	      this.fb = {
	        $target: this.$fb,
	        tit: encodeURIComponent($('title').html()),
	        des: encodeURIComponent($('.fbDes').attr('content')), // desctiption
	        url: location.href
	      };
	
	      this.tw = {
	        $target: this.$tw,
	        tit: encodeURIComponent($('title').html()),
	        des: encodeURIComponent($('.fbDes').attr('content')), // desctiption
	        url: location.href,
	        hash: 'hash'
	      };
	
	      this.line = {
	        $target: this.$line,
	        tit: encodeURIComponent($('title').html()),
	        des: encodeURIComponent($('.fbDes').attr('content')), // desctiption
	        url: location.href
	      };
	    }
	  }, {
	    key: 'setOgImg',
	    value: function setOgImg() {
	
	      // $('.ogImg_fb').attr('content', this.fb.img);
	      // $('.ogImg_tw').attr('content', this.tw.img);
	
	    }
	  }, {
	    key: 'jumpFB',
	    value: function jumpFB(e) {
	
	      this.openWindow('https://www.facebook.com/sharer/sharer.php?u=' + this.fb.url);
	
	      return false;
	    }
	  }, {
	    key: 'jumpTW',
	    value: function jumpTW(e) {
	
	      this.openWindow('http://twitter.com/intent/tweet?url=' + this.tw.url + '&text=' + this.tw.des);
	      // this.openWindow('http://twitter.com/intent/tweet?url=' + this.tw.url + '&text=' + this.tw.text + '&hashtags=' + this.tw.hash);
	
	      return false;
	    }
	  }, {
	    key: 'jumpLINE',
	    value: function jumpLINE() {
	
	      this.openWindow('http://line.me/R/msg/text/?' + this.line.tit + '%0A' + this.line.url);
	
	      return false;
	    }
	  }, {
	    key: 'onSendMail',
	    value: function onSendMail() {
	
	      var address = '';
	      var sub = '';
	      var body = encodeURIComponent($('title').html() + '\n' + location.href);
	
	      location.href = 'mailto:' + address + '?subject=' + sub + '&body=' + body;
	
	      return false;
	    }
	  }, {
	    key: 'openWindow',
	    value: function openWindow(url, w, h) {
	
	      if (w === undefined) w = 600;
	      if (h === undefined) h = 600;
	
	      var l = Number((window.screen.width - w) / 2);
	      var t = Number((window.screen.height - h) / 2);
	
	      window.open(url, 'new_window', 'menubar=no,' + 'toolbar=no,' + 'resizable=yes,' + 'scrollbars=yes,' + 'height=' + h + ',' + 'width=' + w + ',' + 'left=' + l + ',' + 'top=' + t);
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	      var _this = this;
	
	      this.fb.$target.on('click', this.jumpFB.bind(this));
	      this.tw.$target.on('click', this.jumpTW.bind(this));
	      this.line.$target.on('click', this.jumpLINE.bind(this));
	      if (this.$mail) this.$mail.on('click', function () {
	        _this.onSendMail();return false;
	      });
	    }
	  }, {
	    key: 'removeEvents',
	    value: function removeEvents() {
	
	      this.fb.$target.off('click');
	      this.tw.$target.off('click');
	      this.line.$target.off('click');
	      if (this.$mail) this.$mail.off('click');
	    }
	  }]);
	
	  return Sns;
	}();
	
	exports.default = Sns;

/***/ },
/* 23 */
/***/ function(module, exports) {

	module.exports = {
		"description": "desctiption",
		"keyword": "ダミーダミーダミーダミーダミーダミーダミー",
		"ogpImgPath": "",
		"top": {
			"description": "ダミーダミーダミーダミーダミーダミーダミー",
			"fb": {
				"des": "ダミーダミーダミーダミーダミーダミーダミー",
				"img": "",
				"siteName": "",
				"tit": "ダミーダミーダミーダミーダミーダミーダミー",
				"type": "website",
				"url": ""
			},
			"keyword": "ダミーダミーダミーダミーダミーダミーダミー",
			"line": {
				"des": "ダミーダミーダミーダミーダミーダミーダミー",
				"img": "",
				"tit": "ダミーダミーダミーダミーダミーダミーダミー",
				"url": ""
			},
			"title": "",
			"tw": {
				"card": "summary_large_image",
				"creator": "",
				"des": "ダミーダミーダミーダミーダミーダミーダミー",
				"img": "",
				"siteName": "",
				"tit": "",
				"url": "ダミーダミーダミーダミーダミーダミーダミー"
			}
		},
		"movie": {
			"description": "ダミーダミーダミーダミーダミーダミーダミー",
			"fb": {
				"des": "ダミーダミーダミーダミーダミーダミーダミー",
				"img": "",
				"siteName": "",
				"tit": "ダミーダミーダミーダミーダミーダミーダミー",
				"type": "website",
				"url": ""
			},
			"keyword": "ダミーダミーダミーダミーダミーダミーダミー",
			"line": {
				"des": "ダミーダミーダミーダミーダミーダミーダミー",
				"img": "",
				"tit": "ダミーダミーダミーダミーダミーダミーダミー",
				"url": ""
			},
			"title": "",
			"tw": {
				"card": "summary_large_image",
				"creator": "",
				"des": "ダミーダミーダミーダミーダミーダミーダミー",
				"img": "",
				"siteName": "",
				"tit": "",
				"url": "ダミーダミーダミーダミーダミーダミーダミー"
			}
		},
		"interview": {
			"description": "ダミーダミーダミーダミーダミーダミーダミー",
			"fb": {
				"des": "ダミーダミーダミーダミーダミーダミーダミー",
				"img": "",
				"siteName": "",
				"tit": "ダミーダミーダミーダミーダミーダミーダミー",
				"type": "website",
				"url": ""
			},
			"keyword": "ダミーダミーダミーダミーダミーダミーダミー",
			"line": {
				"des": "ダミーダミーダミーダミーダミーダミーダミー",
				"img": "",
				"tit": "ダミーダミーダミーダミーダミーダミーダミー",
				"url": ""
			},
			"title": "",
			"tw": {
				"card": "summary_large_image",
				"creator": "",
				"des": "ダミーダミーダミーダミーダミーダミーダミー",
				"img": "",
				"siteName": "",
				"tit": "",
				"url": "ダミーダミーダミーダミーダミーダミーダミー"
			}
		},
		"interviewDetail01": {
			"description": "ダミーダミーダミーダミーダミーダミーダミー",
			"fb": {
				"des": "ダミーダミーダミーダミーダミーダミーダミー",
				"img": "",
				"siteName": "",
				"tit": "ダミーダミーダミーダミーダミーダミーダミー",
				"type": "website",
				"url": ""
			},
			"keyword": "ダミーダミーダミーダミーダミーダミーダミー",
			"line": {
				"des": "ダミーダミーダミーダミーダミーダミーダミー",
				"img": "",
				"tit": "ダミーダミーダミーダミーダミーダミーダミー",
				"url": ""
			},
			"title": "",
			"tw": {
				"card": "summary_large_image",
				"creator": "",
				"des": "ダミーダミーダミーダミーダミーダミーダミー",
				"img": "",
				"siteName": "",
				"tit": "",
				"url": "ダミーダミーダミーダミーダミーダミーダミー"
			}
		},
		"interviewDetail02": {
			"description": "ダミーダミーダミーダミーダミーダミーダミー",
			"fb": {
				"des": "ダミーダミーダミーダミーダミーダミーダミー",
				"img": "",
				"siteName": "",
				"tit": "ダミーダミーダミーダミーダミーダミーダミー",
				"type": "website",
				"url": ""
			},
			"keyword": "ダミーダミーダミーダミーダミーダミーダミー",
			"line": {
				"des": "ダミーダミーダミーダミーダミーダミーダミー",
				"img": "",
				"tit": "ダミーダミーダミーダミーダミーダミーダミー",
				"url": ""
			},
			"title": "",
			"tw": {
				"card": "summary_large_image",
				"creator": "",
				"des": "ダミーダミーダミーダミーダミーダミーダミー",
				"img": "",
				"siteName": "",
				"tit": "",
				"url": "ダミーダミーダミーダミーダミーダミーダミー"
			}
		},
		"interviewDetail03": {
			"description": "ダミーダミーダミーダミーダミーダミーダミー",
			"fb": {
				"des": "ダミーダミーダミーダミーダミーダミーダミー",
				"img": "",
				"siteName": "",
				"tit": "ダミーダミーダミーダミーダミーダミーダミー",
				"type": "website",
				"url": ""
			},
			"keyword": "ダミーダミーダミーダミーダミーダミーダミー",
			"line": {
				"des": "ダミーダミーダミーダミーダミーダミーダミー",
				"img": "",
				"tit": "ダミーダミーダミーダミーダミーダミーダミー",
				"url": ""
			},
			"title": "",
			"tw": {
				"card": "summary_large_image",
				"creator": "",
				"des": "ダミーダミーダミーダミーダミーダミーダミー",
				"img": "",
				"siteName": "",
				"tit": "",
				"url": "ダミーダミーダミーダミーダミーダミーダミー"
			}
		},
		"history": {
			"description": "ダミーダミーダミーダミーダミーダミーダミー",
			"fb": {
				"des": "ダミーダミーダミーダミーダミーダミーダミー",
				"img": "",
				"siteName": "",
				"tit": "ダミーダミーダミーダミーダミーダミーダミー",
				"type": "website",
				"url": ""
			},
			"keyword": "ダミーダミーダミーダミーダミーダミーダミー",
			"line": {
				"des": "ダミーダミーダミーダミーダミーダミーダミー",
				"img": "",
				"tit": "ダミーダミーダミーダミーダミーダミーダミー",
				"url": ""
			},
			"title": "",
			"tw": {
				"card": "summary_large_image",
				"creator": "",
				"des": "ダミーダミーダミーダミーダミーダミーダミー",
				"img": "",
				"siteName": "",
				"tit": "",
				"url": "ダミーダミーダミーダミーダミーダミーダミー"
			}
		}
	};

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); //--------------------------------------------------
	//
	//  Layout
	//
	//--------------------------------------------------
	
	var _Size = __webpack_require__(25);
	
	var _Size2 = _interopRequireDefault(_Size);
	
	var _Position = __webpack_require__(27);
	
	var _Position2 = _interopRequireDefault(_Position);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Layout = function () {
	  function Layout() {
	    _classCallCheck(this, Layout);
	
	    this.setEvents();
	  }
	
	  _createClass(Layout, [{
	    key: 'setup',
	    value: function setup() {
	
	      this.size = new _Size2.default(); // adjust size
	
	      this.position = new _Position2.default(); // adjust position
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {}
	  }, {
	    key: 'onLoad',
	    value: function onLoad() {
	
	      this.setup();
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	
	      $(window).on('load', this.onLoad.bind(this));
	    }
	  }], [{
	    key: 'reset',
	    value: function reset() {
	
	      // scaleで大きくしている関係上、高さを100%にしてはいけない
	      if (gb.in.pjax.id == 'history' || gb.in.pjax.id == 'interview_detail') {
	
	        TweenMax.set($('#inner'), {
	          width: '100%',
	          height: 'auto',
	          scale: 1,
	          'transform-origin': '0 0',
	          '-webkit-transform-origin': '0 0'
	        });
	        TweenMax.set($('#bgWrap'), {
	          width: '100%',
	          height: '100%',
	          scale: 1,
	          'transform-origin': '0 0',
	          '-webkit-transform-origin': '0 0'
	        });
	
	        TweenMax.set($('#wrapper'), {
	          'overflow': 'visible',
	          height: '100%'
	        });
	      } else {
	
	        TweenMax.set($('#inner, #bgWrap'), {
	          width: '100%',
	          height: '100%',
	          scale: 1,
	          'transform-origin': '0 0',
	          '-webkit-transform-origin': '0 0'
	        });
	
	        TweenMax.set($('#wrapper'), {
	          'overflow': 'visible',
	          height: '100%'
	        });
	      }
	    }
	  }]);
	
	  return Layout;
	}();
	
	exports.default = Layout;

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); //--------------------------------------------------
	//
	//  Size
	//
	//--------------------------------------------------
	
	var _Scale = __webpack_require__(26);
	
	var _Scale2 = _interopRequireDefault(_Scale);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Size = function () {
	  function Size() {
	    _classCallCheck(this, Size);
	
	    this.setup();
	    this.setEvents();
	  }
	
	  _createClass(Size, [{
	    key: 'setup',
	    value: function setup() {
	
	      // gb.in.u.setImgSPSize($('img')); // for sp img
	
	      // new gb.ResponsiveFontSize($('.fontResponsive')); //レスポンシブ時フォントサイズの変更
	
	      this.scale = new _Scale2.default(); // resize
	
	    }
	  }, {
	    key: 'onResize',
	    value: function onResize() {
	
	      // gb.in.u.setImgSPSize($('img')); // for sp img
	
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	
	      // gb.in.r.add(this.onResize.bind(this));
	
	    }
	  }]);
	
	  return Size;
	}();
	
	exports.default = Size;

/***/ },
/* 26 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//--------------------------------------------------
	//
	//  Layout
	//
	//--------------------------------------------------
	var Scale = function () {
	  function Scale() {
	    _classCallCheck(this, Scale);
	
	    this.SPBaseW = 375;
	    this.PCBaseW = 1300;
	
	    this.rate = 1;
	    this.W = window.innerWidth;
	
	    this.$targetList = [{
	      '$target': $('.menuInner'),
	      'scale': 'spOnly' // spOnly pcOnly both
	    }];
	
	    this.run();
	    this.setup();
	    this.setEvents();
	  }
	
	  _createClass(Scale, [{
	    key: 'setup',
	    value: function setup() {}
	  }, {
	    key: 'run',
	    value: function run() {
	
	      this.W = $(window).width();
	      this.iW = window.innerWidth;
	
	      this.scale();
	      this.wrap();
	    }
	
	    // 拡大
	
	  }, {
	    key: 'scale',
	    value: function scale() {
	      var _this = this;
	
	      // bpの場合のscale
	      if (this.iW <= gb.in.conf.bp) {
	
	        // widthからrateを計算
	        // this.rate = gb.in.u.floatFormat(this.W / this.SPBaseW , 2);
	        this.rate = this.W / this.SPBaseW;
	
	        // scaleするリストをループ
	        $.each(this.$targetList, function (index, val) {
	
	          if (val.scale == 'both' || val.scale == 'spOnly') {
	
	            TweenMax.set(val.$target, {
	              width: _this.SPBaseW,
	              scale: _this.rate,
	              'transform-origin': '0 0',
	              '-webkit-transform-origin': '0 0'
	            });
	          };
	        });
	      } else {
	
	        // widthからrateを計算
	        // this.rate = gb.in.u.floatFormat(this.W / this.PCBaseW , 2);
	        if (this.W > 1300) this.W = 1300;
	        this.rate = this.W / this.PCBaseW;
	
	        // scaleするリストをループ
	        $.each(this.$targetList, function (index, val) {
	
	          if (val.scale == 'both' || val.scale == 'pcOnly') {
	
	            TweenMax.set(val.$target, {
	              width: _this.PCBaseW,
	              scale: _this.rate,
	              'transform-origin': '0 0',
	              '-webkit-transform-origin': '0 0'
	            });
	          };
	
	          // こちらの場合は、scaleを戻す
	          if (val.scale == 'spOnly') {
	
	            TweenMax.set(val.$target, {
	              width: 'auto',
	              scale: 1,
	              'transform-origin': '0 0',
	              '-webkit-transform-origin': '0 0'
	            });
	          };
	        });
	      }
	    }
	
	    // scaleしたら、元の大きさ分余白ができるのでoverflow hiddenで消す
	
	  }, {
	    key: 'wrap',
	    value: function wrap() {}
	  }, {
	    key: 'onResize',
	    value: function onResize() {
	
	      this.run();
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	
	      gb.in.r.add('scale', this.onResize.bind(this));
	    }
	  }]);
	
	  return Scale;
	}();
	
	exports.default = Scale;

/***/ },
/* 27 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//--------------------------------------------------
	//
	//  Position
	//
	//--------------------------------------------------
	
	var Position = function () {
	  function Position() {
	    _classCallCheck(this, Position);
	
	    this.setup();
	    this.setEvents();
	  }
	
	  _createClass(Position, [{
	    key: 'setup',
	    value: function setup() {
	
	      // 上下中央寄せ
	      this.setCenter();
	    }
	  }, {
	    key: 'setCenter',
	    value: function setCenter() {
	
	      $('.posCenter').each(function (index, el) {
	
	        $(this).adjust();
	      });
	      $('.posCenterW').each(function (index, el) {
	
	        $(this).adjustW();
	      });
	      $('.posCenterH').each(function (index, el) {
	
	        $(this).adjustH();
	      });
	    }
	  }, {
	    key: 'onResize',
	    value: function onResize() {
	
	      this.setCenter();
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	
	      gb.in.r.add('setCenter', this.onResize.bind(this));
	    }
	  }]);
	
	  return Position;
	}();
	
	exports.default = Position;

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
	fileOverview:
	roject:
	ile: Main
	ate:
	uthor:
	
	
	var _DisplayTop = __webpack_require__(29);
	
	var _DisplayTop2 = _interopRequireDefault(_DisplayTop);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	// import DisplayMovie from '../Display/DisplayMovie.js';
	// import DisplayInterview from '../Display/DisplayInterview.js';
	// import DisplayInterviewDetail from '../Display/DisplayInterviewDetail.js';
	// import DisplayHistory from '../Display/DisplayHistory.js';
	
	'use strict';
	
	var Main = function () {
	  function Main() {
	    _classCallCheck(this, Main);
	
	    this.onImmediate();
	    this.setEvents();
	  }
	
	  _createClass(Main, [{
	    key: 'onImmediate',
	    value: function onImmediate() {}
	  }, {
	    key: 'onReady',
	    value: function onReady() {
	
	      //pageページ別のIDを取得
	      var page = $('body').data('id');
	
	      //pageのIDごとに発火するクラスの振り分け
	      switch (page) {
	
	        case 'top':
	
	          new _DisplayTop2.default();
	
	          break;
	
	        // case 'movie':
	        //
	        //   new DisplayMovie();
	        //
	        //   break;
	        //
	        // case 'interview':
	        //
	        //   new DisplayInterview();
	        //
	        //   break;
	        //
	        // case 'interview_detail':
	        //
	        //   new DisplayInterviewDetail();
	        //
	        //   break;
	        //
	        // case 'history':
	        //
	        //   new DisplayHistory();
	        //
	        //   break;
	
	      }
	    }
	  }, {
	    key: 'onLoad',
	    value: function onLoad() {}
	  }, {
	    key: 'onRender',
	    value: function onRender() {}
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	
	      $(document).on('ready', this.onReady.bind(this));
	      $(window).on('load', this.onLoad.bind(this));
	    }
	  }]);
	
	  return Main;
	}();
	
	exports.default = Main;

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); //--------------------------------------------------
	//
	//  Display
	//
	//--------------------------------------------------
	
	
	// import WebGLinit from './WebGLinit.js';
	// import Canvas from '../Visual/Canvas.js';
	
	
	var _Effects = __webpack_require__(30);
	
	var _Effects2 = _interopRequireDefault(_Effects);
	
	var _ScaleTop = __webpack_require__(44);
	
	var _ScaleTop2 = _interopRequireDefault(_ScaleTop);
	
	var _HoverEffectSNSSPFooter = __webpack_require__(45);
	
	var _HoverEffectSNSSPFooter2 = _interopRequireDefault(_HoverEffectSNSSPFooter);
	
	var _HoverEffectSVGArrowTop = __webpack_require__(46);
	
	var _HoverEffectSVGArrowTop2 = _interopRequireDefault(_HoverEffectSVGArrowTop);
	
	var _TopTime = __webpack_require__(17);
	
	var _TopTime2 = _interopRequireDefault(_TopTime);
	
	var _Position = __webpack_require__(27);
	
	var _Position2 = _interopRequireDefault(_Position);
	
	var _Canvas = __webpack_require__(47);
	
	var _Canvas2 = _interopRequireDefault(_Canvas);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	// import vs from './test.frag';
	
	
	'use strict';
	
	var DisplayTop = function () {
	  function DisplayTop() {
	    _classCallCheck(this, DisplayTop);
	
	    this.onImmediate();
	    this.setEvents();
	  }
	
	  _createClass(DisplayTop, [{
	    key: 'onImmediate',
	    value: function onImmediate() {
	
	      // アニメーションループスタート
	      // gb.in.up.loop();
	
	    }
	  }, {
	    key: 'onLoad',
	    value: function onLoad() {
	
	      // gb.in.canvas = new Canvas();
	      // gb.in.canvas.init();
	
	      gb.in.canvas = new _Canvas2.default({
	        output: document.getElementById('webgl-output')
	      });
	
	      gb.in.canvas.init();
	
	      // ------------------------------------------------------------
	      //  UI / Layout
	      // ------------------------------------------------------------
	      // sp
	      // gb.in.scaleTop = new ScaleTop();
	      // gb.in.pos = new Position();
	
	      // ------------------------------------------------------------
	      //  Effects
	      // ------------------------------------------------------------
	
	      // sp
	      // gb.in.sliderTop.setEvents();
	      // gb.in.snsSPHoverEf = new HoverEffectSNSSPFooter($('#sideL'));
	
	      // pc
	      // new HoverEffectSVGArrowTop($('.section01 .next')); // → TopOpeningへ
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	
	      $(window).on('load', this.onLoad.bind(this));
	    }
	  }], [{
	    key: 'run',
	    value: function run() {
	
	      // window.console.log('static_Run');
	
	      // ------------------------------------------------------------
	      //  UI / Layout
	      // ------------------------------------------------------------
	      // sp
	      // gb.in.scaleTop = new ScaleTop();
	      // gb.in.pos = new Position();
	
	      // ------------------------------------------------------------
	      //  Effects
	      // ------------------------------------------------------------
	
	      // sp
	      // gb.in.sliderTop.setEvents();
	      // gb.in.snsSPHoverEf = new HoverEffectSNSSPFooter($('#sideL'));
	
	      // pc
	
	    }
	  }]);
	
	  return DisplayTop;
	}();
	
	exports.default = DisplayTop;

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); //--------------------------------------------------
	//
	//  Effects
	//
	//--------------------------------------------------
	
	
	var _CVContents = __webpack_require__(31);
	
	var _CVContents2 = _interopRequireDefault(_CVContents);
	
	var _GlContents = __webpack_require__(37);
	
	var _GlContents2 = _interopRequireDefault(_GlContents);
	
	var _Profiler = __webpack_require__(43);
	
	var _Profiler2 = _interopRequireDefault(_Profiler);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Effects = function () {
	  function Effects() {
	    _classCallCheck(this, Effects);
	
	    this.gl = null;
	    this.dom = null;
	    this.state = '';
	
	    this.setup();
	    this.debug();
	    this.setEvents();
	  }
	
	  _createClass(Effects, [{
	    key: 'setup',
	    value: function setup() {
	
	      // bg
	      // gb.in.Section02Bg = new Section02Bg();
	
	      // product
	      // gb.in.Section04Product = new Section04Product($('.section03'));
	
	    }
	  }, {
	    key: 'debug',
	    value: function debug() {
	
	      // profiler設定
	      // new Profiler();
	
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {}
	  }]);
	
	  return Effects;
	}();
	
	exports.default = Effects;

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); //--------------------------------------------------
	//
	//  CVContents
	//
	//--------------------------------------------------
	
	
	var _CVContentsLoop = __webpack_require__(32);
	
	var _CVContentsLoop2 = _interopRequireDefault(_CVContentsLoop);
	
	var _CVContentsTimeline = __webpack_require__(33);
	
	var _CVContentsTimeline2 = _interopRequireDefault(_CVContentsTimeline);
	
	var _CreateCanvas = __webpack_require__(34);
	
	var _CreateCanvas2 = _interopRequireDefault(_CreateCanvas);
	
	var _FullSize = __webpack_require__(16);
	
	var _FullSize2 = _interopRequireDefault(_FullSize);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var CVContents = function () {
	  function CVContents() {
	    _classCallCheck(this, CVContents);
	
	    this.setup();
	    // this.create();
	    this.setEvents();
	    // loop
	    this.loop = new _CVContentsLoop2.default();
	    // timeline
	    this.timeline = new _CVContentsTimeline2.default();
	  }
	
	  _createClass(CVContents, [{
	    key: 'setup',
	    value: function setup() {
	
	      // リソースのロード
	      // gb.in.loadMgr.sec02Img();
	
	
	    }
	  }, {
	    key: 'create',
	    value: function create() {
	
	      // gb.in.rm.total += 1;
	      // canvasの生成
	      // レティーナ用に2倍
	      gb.in.canvas = new _CreateCanvas2.default($('#bgWrap .sec02BgCanvas'), gb.in.conf.defW, gb.in.conf.defH, function () {
	
	        var l = new _FullSize2.default($('#bgWrap'), $('.sec02BgCanvas'), 0, 'FullSizeSec02BgCanvas');
	        l.targetDefW = gb.in.conf.defW;
	        l.targetDefH = gb.in.conf.defH;
	        l.run();
	      });
	
	      // ui追加(コントローラー、profilerなど)
	      // this.addUI();
	
	    }
	  }, {
	    key: 'addUI',
	    value: function addUI() {
	
	      // paramrter調整
	      // gb.in.param = new gb.Param();
	
	    }
	  }, {
	    key: 'play',
	    value: function play() {
	
	      this.loop.start();
	      this.timeline.tlMain.play();
	    }
	  }, {
	    key: 'pause',
	    value: function pause() {
	
	      this.loop.pause();
	      this.timeline.tlMain.pause();
	    }
	  }, {
	    key: 'onResize',
	    value: function onResize() {}
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	
	      // gb.in.r.add('cvContents', this.onResize.bind(this));
	      // gb.in.hash.onChangeFuncList.push(this.onSection02.bind(this));
	
	    }
	  }]);
	
	  return CVContents;
	}();
	
	exports.default = CVContents;

/***/ },
/* 32 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//--------------------------------------------------
	//
	//  CVContentsLoop
	//
	//--------------------------------------------------
	
	var CVContentsLoop = function () {
	  function CVContentsLoop() {
	    _classCallCheck(this, CVContentsLoop);
	
	    this.isAlways = true;
	    this.isRunStatus = true;
	    this.isAdjustParam = true;
	    this.state = 'initial';
	    this.sometimesState = 'initial';
	
	    this.loopList = [];
	
	    this.loopStart = false;
	
	    this.setEvents();
	  }
	
	  _createClass(CVContentsLoop, [{
	    key: 'update',
	    value: function update() {
	
	      if (this.isAlways) this.runAlways();
	      if (this.isRunStatus) this.runStatus();
	      if (this.isAdjustParam) this.runAdjustParam();
	    }
	
	    // ------------------------------------------------------------
	    // 常に行う処理
	    // ------------------------------------------------------------    
	
	  }, {
	    key: 'runAlways',
	    value: function runAlways() {
	
	      for (var i in this.loopList) {
	        this.loopList[i]();
	      }
	    }
	
	    // ------------------------------------------------------------
	    // 各状態の処理
	    // ------------------------------------------------------------
	
	  }, {
	    key: 'runStatus',
	    value: function runStatus() {
	
	      if (this.state == 'initial') {} else if (this.state == 'start') {} else if (this.state == 'step01') {} else if (this.state == 'step02') {} else if (this.state == 'step03') {} else if (this.state == 'standby') {} else if (this.state == 'sometimes') {
	
	        if (this.sometimesState == 'lineShadow') {} else if (this.sometimesState == 'sphere') {} else if (this.sometimesState == 'satellite') {}
	      }
	    }
	
	    // ------------------------------------------------------------
	    // パラメータ調整用処理
	    // ------------------------------------------------------------
	
	  }, {
	    key: 'runAdjustParam',
	    value: function runAdjustParam() {}
	  }, {
	    key: 'draw',
	    value: function draw() {}
	  }, {
	    key: 'loop',
	    value: function loop() {
	
	      if (this.loopStart) {
	
	        this.update();
	        this.draw();
	
	        // log('section02')
	      }
	    }
	  }, {
	    key: 'start',
	    value: function start() {
	
	      this.loopStart = true;
	    }
	  }, {
	    key: 'pause',
	    value: function pause() {
	
	      this.loopStart = false;
	    }
	  }, {
	    key: 'add',
	    value: function add(func) {
	
	      this.loopList.push(func);
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	
	      var self = this;
	
	      gb.in.up.add('section02Bg', this.loop.bind(this));
	    }
	  }]);
	
	  return CVContentsLoop;
	}();
	
	exports.default = CVContentsLoop;

/***/ },
/* 33 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//--------------------------------------------------
	//
	//  CVContentsTimeline
	//
	//--------------------------------------------------
	
	var CVContentsTimeline = function () {
	  function CVContentsTimeline() {
	    _classCallCheck(this, CVContentsTimeline);
	
	    this.tlMain = new TimelineMax();
	    this.setup();
	    this.setEvents();
	  }
	
	  _createClass(CVContentsTimeline, [{
	    key: 'setup',
	    value: function setup() {
	
	      // タイムラインを止めておく
	      this.tlMain.pause();
	
	      this.beginning();
	      this.step01();
	      this.step02();
	      this.step03();
	      this.standBy();
	      this.sometimes();
	    }
	  }, {
	    key: 'beginning',
	    value: function beginning() {}
	  }, {
	    key: 'step01',
	    value: function step01() {}
	  }, {
	    key: 'step02',
	    value: function step02() {}
	  }, {
	    key: 'step03',
	    value: function step03() {}
	  }, {
	    key: 'standBy',
	    value: function standBy() {}
	
	    // 時々
	
	  }, {
	    key: 'sometimes',
	    value: function sometimes() {
	
	      var self = this;
	
	      this.tlMain.add(function () {}, '+=0.0');
	    }
	  }, {
	    key: 'onResizse',
	    value: function onResizse() {}
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	
	      // gb.in.r.add('cvTimeline', this.onResizse.bind(this));
	
	    }
	  }]);
	
	  return CVContentsTimeline;
	}();
	
	exports.default = CVContentsTimeline;

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // ------------------------------------------------------------
	//
	//  CreateCanvas
	//
	// ------------------------------------------------------------
	
	
	var _Canvas = __webpack_require__(35);
	
	var _Canvas2 = _interopRequireDefault(_Canvas);
	
	var _Plane = __webpack_require__(36);
	
	var _Plane2 = _interopRequireDefault(_Plane);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var CreateCanvas = function () {
	  function CreateCanvas($wrap, w, h) {
	    var cb = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {};
	
	    _classCallCheck(this, CreateCanvas);
	
	    this.c = null;
	    this.cw = 0;
	    this.ch = 0;
	
	    this.fillStyle = '0,0,0';
	    this.$wrap = $wrap;
	
	    this.loopList = [];
	
	    // 最初オブジェクト生成するためにboolean あえて逆に
	    this.isResize = gb.in.u.isResPC ? false : true;
	
	    this.cb = cb;
	
	    this.w = 260;
	    this.h = 146;
	
	    this.setup();
	    this.setEvents();
	    this.setCanvasSize(w, h);
	    this.timeline();
	  }
	
	  _createClass(CreateCanvas, [{
	    key: 'setup',
	    value: function setup() {
	      //canvas finger point
	
	      this.c = new _Canvas2.default();
	
	      // this.addObjects();
	      this.onResize();
	
	      this.$wrap.append(this.c.canvas);
	
	      this.cb();
	    }
	  }, {
	    key: 'addObjects',
	    value: function addObjects(vx) {
	      //canvas finger point
	
	      this.loopList = [];
	
	      var offset = 0;
	      var offsetFrame = 0;
	      var offsetVx = 0;
	
	      this.xNum = 8;
	      this.yNum = 6;
	      this.len = this.xNum * this.yNum;
	
	      this.tileList = [];
	
	      if (gb.in.u.isPC) {
	        var total = gb.in.conf.sec02ImgNum;
	      } else {
	        var total = 19;
	      }
	
	      for (var i = 0; i < this.len; i++) {
	
	        this.tile = new _Plane2.default(this.c.ctx, this.fillStyle);
	
	        var nth = i % this.xNum;
	        if (nth == 0) offset = -500 + Math.floor(Math.random() * 500) - 250;
	        if (nth == 0) offsetFrame = Math.floor(total * Math.random());
	        if (nth == 0) offsetVx = vx + Math.floor(vx * 2 * Math.random());
	
	        var x = nth * this.w + offset;
	        var y = Math.floor(i / this.xNum) * this.h;
	
	        this.tile.setup(x, y, this.w, this.h, offsetFrame + nth * 3, offsetVx, offset);
	        this.tileList.push(this.tile);
	        this.add(this.tile.loop.bind(this.tile));
	      };
	    }
	  }, {
	    key: 'setCanvasSize',
	    value: function setCanvasSize(w, h) {
	
	      this.cw = this.c.canvas.width = w;
	      this.ch = this.c.canvas.height = h;
	    }
	  }, {
	    key: 'loop',
	    value: function loop() {
	
	      // this.c.ctx.clearRect(0,0,this.cw,this.ch);
	      // this.c.ctx.fillStyle = 'rgba(255,255,255,0.08)';
	
	      this.c.ctx.fillStyle = 'rgba(255,255,255,0.6)';
	      this.c.ctx.fillRect(0, 0, this.cw, this.ch);
	
	      for (var i in this.loopList) {
	        this.loopList[i]();
	      }
	    }
	  }, {
	    key: 'timeline',
	    value: function timeline() {}
	  }, {
	    key: 'add',
	    value: function add(func) {
	
	      this.loopList.push(func);
	    }
	  }, {
	    key: 'onResize',
	    value: function onResize() {
	
	      log(gb.in.u.isResSP, gb.in.u.isResPC);
	
	      if (gb.in.u.isResSP && this.isResize) {
	        this.isResize = false;
	
	        this.addObjects(0.5);
	
	        for (var i = 0; i < this.tileList.length; i++) {
	
	          this.tileList[i].cntStop = true;
	        };
	
	        log(1111);
	      } else if (gb.in.u.isResPC && !this.isResize) {
	        this.isResize = true;
	
	        this.addObjects(0.5);
	
	        // スマホだったら、広い表示でもフレームの動きを止める
	        if (gb.in.u.isSP) {
	
	          for (var i = 0; i < this.tileList.length; i++) {
	
	            this.tileList[i].cntStop = true;
	          };
	
	          return;
	        }
	
	        for (var i = 0; i < this.tileList.length; i++) {
	
	          this.tileList[i].cntStop = false;
	        };
	
	        log(2222);
	      }
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	
	      gb.in.Sec02Bg.loop.add(this.loop.bind(this));
	      gb.in.r.add('CreateCanvas', this.onResize.bind(this));
	    }
	  }]);
	
	  return CreateCanvas;
	}();
	
	exports.default = CreateCanvas;

/***/ },
/* 35 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	// ------------------------------------------------------------
	//
	//  Canvas
	//
	// ------------------------------------------------------------
	
	var Canvas = function () {
	  function Canvas() {
	    _classCallCheck(this, Canvas);
	
	    this.canvas = null;
	    this.ctx = null;
	    this.w = $(window).width();
	    this.h = $(window).height();
	
	    this.setup();
	  }
	
	  _createClass(Canvas, [{
	    key: 'setup',
	    value: function setup() {
	
	      this.canvas = document.createElement('canvas');
	      this.ctx = this.canvas.getContext('2d');
	      this.canvas.width = this.w;
	      this.canvas.height = this.h;
	    }
	  }, {
	    key: 'update',
	    value: function update() {}
	  }, {
	    key: 'draw',
	    value: function draw() {}
	  }]);
	
	  return Canvas;
	}();
	
	exports.default = Canvas;

/***/ },
/* 36 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	// ------------------------------------------------------------
	//
	//  Plane
	//
	// ------------------------------------------------------------
	
	var Plane = function () {
	  function Plane(ctx, strokeStyle) {
	    _classCallCheck(this, Plane);
	
	    this.ctx = ctx;
	
	    this.strokeStyle = strokeStyle;
	    this.op = { val: 1 };
	
	    this.cnt = 0;
	
	    this.cntStop = false;
	
	    // this.setup();
	    this.create();
	  }
	
	  _createClass(Plane, [{
	    key: "setup",
	    value: function setup(x, y, w, h, frameStart, vx, offset) {
	
	      this.imgList = gb.in.loadSec02Img.list;
	
	      this.x = x;
	      this.y = y;
	      this.w = w;
	      this.h = h;
	
	      this.vx = vx;
	
	      this.offset = offset;
	
	      this.cnt = frameStart;
	    }
	  }, {
	    key: "create",
	    value: function create() {}
	
	    // 頂点で描く
	
	  }, {
	    key: "update",
	    value: function update() {
	
	      this.x -= this.vx;
	      if (this.x < -this.w) this.x = gb.in.canvas.cw - 10;
	    }
	  }, {
	    key: "draw",
	    value: function draw() {
	
	      if (!this.cntStop) {
	
	        // 間引き
	        if (gb.in.up.cnt % 3 == 0) this.cnt++;else ;
	      };
	      // this.cnt++;
	
	      if (gb.in.u.isPC) {
	        var total = gb.in.conf.sec02ImgNum;
	      } else {
	        var total = 19;
	      }
	
	      var img = this.imgList[this.cnt % total];
	      this.ctx.drawImage(img, this.x, this.y, this.w, this.h);
	    }
	  }, {
	    key: "loop",
	    value: function loop() {
	
	      this.update();
	      this.draw();
	    }
	  }]);
	
	  return Plane;
	}();
	
	exports.default = Plane;

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); //--------------------------------------------------
	//
	//  GlContents
	//
	//--------------------------------------------------
	
	
	var _GlContentsLoop = __webpack_require__(38);
	
	var _GlContentsLoop2 = _interopRequireDefault(_GlContentsLoop);
	
	var _GlContentsTimeline = __webpack_require__(39);
	
	var _GlContentsTimeline2 = _interopRequireDefault(_GlContentsTimeline);
	
	var _Plane = __webpack_require__(41);
	
	var _Plane2 = _interopRequireDefault(_Plane);
	
	var _Param = __webpack_require__(42);
	
	var _Param2 = _interopRequireDefault(_Param);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var GlContents = function () {
	  function GlContents() {
	    var $wrap = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : $('body');
	
	    _classCallCheck(this, GlContents);
	
	    this.renderer;
	    this.camera;
	    this.scene;
	    this.light;
	
	    this.state = 'initial';
	    this.adjustParam = true;
	    this.stateLineRotate = false;
	    this.sometimesState = 'initial';
	
	    this.isControl = false;
	    this.controls;
	
	    this.setup();
	    this.create($wrap);
	    this.setEvents();
	    // loop
	    this.loop = new _GlContentsLoop2.default();
	    // timeline
	    this.timeline = new _GlContentsTimeline2.default();
	  }
	
	  _createClass(GlContents, [{
	    key: 'setup',
	    value: function setup() {}
	  }, {
	    key: 'create',
	    value: function create($wrap) {
	
	      // render
	      gb.in.renderer = this.renderer = new THREE.WebGLRenderer({ antialias: true });
	      this.renderer.setSize(gb.in.r.W(), gb.in.r.H());
	      this.renderer.setClearColor(0xffffff, 0.0);
	      $wrap.append(this.renderer.domElement);
	      // document.body.appendChild(  );
	      $(this.renderer.domElement).css({
	        position: 'absolute',
	        top: 0, left: 0,
	        'z-index': 1
	      });
	
	      // scene
	      gb.in.scene = new gb.Scene();
	      this.scene = gb.in.scene.scene;
	
	      // camera
	      gb.in.camera = new gb.Camera();
	      this.camera = gb.in.camera.camera;
	
	      // light
	      this.light = new THREE.DirectionalLight(0xffffff, 3);
	      this.light.position.z = 3;
	      this.scene.add(this.light);
	
	      // オブジェクト追加
	      this.addObjects();
	
	      // ui追加(コントローラー、profilerなど)
	      // this.addUI();
	
	      // リソースのロード
	      gb.in.loadMgr.section04ProductShader();
	    }
	  }, {
	    key: 'addObjects',
	    value: function addObjects() {
	
	      this.plane = new _Plane2.default();
	    }
	  }, {
	    key: 'addUI',
	    value: function addUI() {
	
	      // controls
	
	      if (this.isControl) {
	
	        gb.in.controls = this.controls = new THREE.TrackballControls(this.camera);
	        this.controls.zoomSpeed = 0.8;
	        this.controls.rotateSpeed = 3;
	      };
	
	      // profiler設定
	      new gb.Profiler();
	      // paramrter調整
	      gb.in.param = new _Param2.default();
	    }
	  }, {
	    key: 'onResize',
	    value: function onResize() {
	
	      var w = window.innerWidth;
	      var h = window.innerHeight;
	
	      this.renderer.setSize(w, h);
	      this.camera.aspect = w / h;
	      this.camera.updateProjectionMatrix();
	    }
	  }, {
	    key: 'onSection04',
	    value: function onSection04(cur, prev) {
	
	      if (cur == 'product') {
	
	        this.loop.start();
	        this.timeline.tlMain.play();
	      } else {
	
	        this.loop.pause();
	        this.timeline.tlMain.pause();
	      }
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	      var _this = this;
	
	      gb.in.r.add(this.onResize.bind(this));
	      gb.in.hash.onChangeFuncList.push(this.onSection04.bind(this));
	      $(window).on('onSection04ProductImg', function () {
	        _this.timeline.setup();
	      });
	    }
	  }]);
	
	  return GlContents;
	}();
	
	exports.default = GlContents;

/***/ },
/* 38 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//--------------------------------------------------
	//
	//  GlContentsLoop
	//
	//--------------------------------------------------
	
	var GlContentsLoop = function () {
	  function GlContentsLoop() {
	    _classCallCheck(this, GlContentsLoop);
	
	    this.isAlways = true;
	    this.isRunStatus = true;
	    this.isAdjustParam = true;
	    this.state = 'initial';
	    this.sometimesState = 'initial';
	
	    this.loopStart = false;
	
	    this.loopList = [];
	
	    this.setEvents();
	  }
	
	  _createClass(GlContentsLoop, [{
	    key: 'update',
	    value: function update() {
	
	      if (this.isAlways) this.runAlways();
	      if (this.isRunStatus) this.runStatus();
	      if (this.isAdjustParam) this.runAdjustParam();
	    }
	
	    // ------------------------------------------------------------
	    // 常に行う処理
	    // ------------------------------------------------------------    
	
	  }, {
	    key: 'runAlways',
	    value: function runAlways() {
	
	      if (gb.in.Section04Product.isControl) gb.in.controls.update();
	
	      // camera
	      gb.in.camera.updateControll();
	    }
	
	    // ------------------------------------------------------------
	    // 各状態の処理
	    // ------------------------------------------------------------
	
	  }, {
	    key: 'runStatus',
	    value: function runStatus() {
	
	      if (this.state == 'initial') {} else if (this.state == 'start') {} else if (this.state == 'step01') {} else if (this.state == 'step02') {} else if (this.state == 'step03') {} else if (this.state == 'standby') {} else if (this.state == 'sometimes') {
	
	        if (this.sometimesState == 'lineShadow') {} else if (this.sometimesState == 'sphere') {} else if (this.sometimesState == 'satellite') {}
	      }
	    }
	
	    // ------------------------------------------------------------
	    // パラメータ調整用処理
	    // ------------------------------------------------------------
	
	  }, {
	    key: 'runAdjustParam',
	    value: function runAdjustParam() {}
	  }, {
	    key: 'draw',
	    value: function draw() {
	
	      gb.in.renderer.render(gb.in.scene.scene, gb.in.camera.camera);
	      // gb.in.postprocess.composer.render(0.1);
	    }
	  }, {
	    key: 'loop',
	    value: function loop() {
	
	      if (this.loopStart) {
	
	        this.update();
	        this.draw();
	
	        log('section04');
	      }
	    }
	  }, {
	    key: 'start',
	    value: function start() {
	
	      this.loopStart = true;
	    }
	  }, {
	    key: 'pause',
	    value: function pause() {
	
	      this.loopStart = false;
	    }
	  }, {
	    key: 'add',
	    value: function add(func) {
	
	      this.loopList.push(func);
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	
	      var self = this;
	
	      gb.in.up.add('section04Product', this.loop.bind(this));
	    }
	  }]);
	
	  return GlContentsLoop;
	}();
	
	exports.default = GlContentsLoop;

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); //--------------------------------------------------
	//
	//  GlContentsTimeline
	//
	//--------------------------------------------------
	
	var _SometimesMgr = __webpack_require__(40);
	
	var _SometimesMgr2 = _interopRequireDefault(_SometimesMgr);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var GlContentsTimeline = function () {
	  function GlContentsTimeline() {
	    _classCallCheck(this, GlContentsTimeline);
	
	    this.tlMain = new TimelineMax();
	    // this.setup();
	    this.setEvents();
	  }
	
	  _createClass(GlContentsTimeline, [{
	    key: 'setup',
	    value: function setup() {
	
	      // タイムラインを止めておく
	      this.tlMain.pause();
	
	      this.beginning();
	      // this.step01();
	      // this.step02();
	      // this.step03();
	      // this.standBy();
	      this.sometimes();
	    }
	  }, {
	    key: 'beginning',
	    value: function beginning() {
	
	      this.tlMain
	      // zoom in
	      .to(gb.in.loadMgr.shaders[0].uniforms.strength, 1.3, {
	        value: 500,
	        ease: Expo.easeInOut,
	        onStart: function onStart() {
	
	          TweenMax.set(gb.in.loadMgr.shaders[1].uniforms.strength, { value: 500 });
	        }
	      })
	
	      // camera移動
	      .to(gb.in.camera.camera.position, 1.5, {
	        z: 200,
	        ease: Expo.easeInOut
	      }, '-=1.3')
	
	      // plane移動
	      .to(gb.in.Section04Product.plane.plane.position, 1.5, {
	        x: -100,
	        y: 200,
	        ease: Expo.easeInOut
	      }, '-=1.5')
	
	      // zoom out
	      .to(gb.in.loadMgr.shaders[0].uniforms.strength, 1, {
	        value: 0,
	        ease: Expo.easeIn
	      }, '-=0.4')
	
	      // plane01がopacityで消える
	      .to(gb.in.loadMgr.shaders[0].uniforms.opacity, 1, {
	        value: 0,
	        ease: Power3.easeInOut
	      }, '-=0.7')
	
	      // plane02のblur out
	      .to(gb.in.loadMgr.shaders[1].uniforms.strength, 1, {
	        value: 0,
	        ease: Expo.easeInOut
	      }, '-=1.0')
	
	      // plane02が出て来る
	      .to(gb.in.loadMgr.shaders[1].uniforms.opacity, 1, {
	        value: 1,
	        ease: Expo.easeInOut
	      }, '-=1.0').to(gb.in.camera.camera.position, 1.5, {
	        z: 400,
	        ease: Expo.easeOut,
	        onComplete: function onComplete() {
	
	          // materialの変更
	
	          gb.in.loadMgr.shaders[2].uniforms.from.value = gb.in.Section04Product.plane.textures[1];
	          gb.in.loadMgr.shaders[2].uniforms.to.value = gb.in.Section04Product.plane.textures[2];
	
	          gb.in.Section04Product.plane.plane02.material = new THREE.ShaderMaterial({
	            uniforms: gb.in.loadMgr.shaders[2].uniforms,
	            vertexShader: gb.in.loadMgr.shaders[2].vs,
	            fragmentShader: gb.in.loadMgr.shaders[2].fs,
	            transparent: true
	          });
	
	          gb.in.Section04Product.plane.plane02.scale.x = gb.in.Section04Product.plane.plane02.scale.y = 1200.0;
	        }
	      }, '-=1.0');
	    }
	  }, {
	    key: 'step01',
	    value: function step01() {}
	  }, {
	    key: 'step02',
	    value: function step02() {}
	  }, {
	    key: 'step03',
	    value: function step03() {}
	  }, {
	    key: 'standBy',
	    value: function standBy() {}
	
	    // 時々
	
	  }, {
	    key: 'sometimes',
	    value: function sometimes() {
	
	      var self = this;
	
	      this.tlMain.add(function () {
	
	        var s = new _SometimesMgr2.default();
	
	        s.add(function () {
	
	          TweenMax.to(gb.in.loadMgr.shaders[2].uniforms.progress, 1.3, {
	            value: 1,
	            ease: Expo.easeInOut,
	            onComplete: function onComplete() {
	
	              gb.in.loadMgr.shaders[2].uniforms.from.value = gb.in.Section04Product.plane.textures[3];
	            }
	
	          });
	        }, 2.0, 2.0);
	
	        s.add(function () {
	
	          TweenMax.to(gb.in.loadMgr.shaders[2].uniforms.progress, 1.3, {
	            value: 0,
	            ease: Expo.easeInOut,
	            onComplete: function onComplete() {
	
	              gb.in.loadMgr.shaders[2].uniforms.to.value = gb.in.Section04Product.plane.textures[4];
	            }
	
	          });
	        }, 2.0, 2.0);
	
	        s.add(function () {
	
	          TweenMax.to(gb.in.loadMgr.shaders[2].uniforms.progress, 1.3, {
	            value: 1,
	            ease: Expo.easeInOut,
	            onComplete: function onComplete() {
	
	              gb.in.loadMgr.shaders[2].uniforms.from.value = gb.in.Section04Product.plane.textures[5];
	            }
	
	          });
	        }, 2.0, 2.0);
	
	        s.add(function () {
	
	          TweenMax.to(gb.in.loadMgr.shaders[2].uniforms.progress, 1.3, {
	            value: 0,
	            ease: Expo.easeInOut,
	            onComplete: function onComplete() {
	
	              gb.in.loadMgr.shaders[2].uniforms.to.value = gb.in.Section04Product.plane.textures[1];
	            }
	
	          });
	        }, 2.0, 2.0);
	
	        s.add(function () {
	
	          TweenMax.to(gb.in.loadMgr.shaders[2].uniforms.progress, 1.3, {
	            value: 1,
	            ease: Expo.easeInOut,
	            onComplete: function onComplete() {
	
	              gb.in.loadMgr.shaders[2].uniforms.from.value = gb.in.Section04Product.plane.textures[2];
	            }
	
	          });
	        }, 2.0, 2.0);
	
	        s.start();
	      }, '+=0.0');
	    }
	  }, {
	    key: 'onResizse',
	    value: function onResizse() {}
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	
	      gb.in.r.add(this.onResizse.bind(this));
	
	      $(window).on('click', function () {
	
	        // this.start();
	
	      });
	    }
	  }]);
	
	  return GlContentsTimeline;
	}();
	
	exports.default = GlContentsTimeline;

/***/ },
/* 40 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//--------------------------------------------------
	//
	//  SomeTimes
	//
	//--------------------------------------------------
	
	var SomeTimes = function () {
	  function SomeTimes() {
	    _classCallCheck(this, SomeTimes);
	
	    this.SomeTimes;
	    this.Timer = null;
	    this.cbList = [];
	    this.len = 0;
	    this.order = 0;
	
	    this.min = [];
	    this.max = [];
	
	    this.setup();
	  }
	
	  _createClass(SomeTimes, [{
	    key: "setup",
	    value: function setup() {}
	  }, {
	    key: "start",
	    value: function start() {
	      var min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
	      var max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	
	
	      this.later = gb.in.u.random(min, max) * 1000;
	      this.Timer = setTimeout(this.run.bind(this), this.later);
	    }
	  }, {
	    key: "run",
	    value: function run() {
	
	      this.order = this.order % this.len;
	
	      this.later = gb.in.u.random(this.min[this.order], this.max[this.order]) * 1000;
	
	      this.cbList[this.order]();
	
	      this.order++;
	      this.Timer = setTimeout(this.run.bind(this), this.later);
	    }
	  }, {
	    key: "stop",
	    value: function stop() {
	
	      log(this.Timer);
	      clearTimeout(this.Timer);
	    }
	  }, {
	    key: "add",
	    value: function add(func) {
	      var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;
	      var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 12;
	
	
	      this.min.push(min);
	      this.max.push(max);
	
	      this.cbList.push(func);
	      this.len = this.cbList.length;
	    }
	  }, {
	    key: "setEvents",
	    value: function setEvents() {}
	  }]);
	
	  return SomeTimes;
	}();
	
	exports.default = SomeTimes;

/***/ },
/* 41 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//--------------------------------------------------
	//
	//  Plane
	//
	//--------------------------------------------------
	
	var Plane = function () {
	  function Plane() {
	    _classCallCheck(this, Plane);
	
	    this.geometry = null;
	    this.material = null;
	
	    this.video = null;
	    this.plane = null;
	
	    this.defWW = 1920;
	    this.defHH = 1080;
	    this.defW = 305;
	    this.rate = 0;
	    this.rateW = 0;
	
	    this.lb = null; //layout background
	
	    this.setup();
	    this.setEvents();
	  }
	
	  _createClass(Plane, [{
	    key: 'setup',
	    value: function setup() {}
	  }, {
	    key: 'create',
	    value: function create(cb) {
	
	      var textures = this.textures = gb.in.loadMgr.textures;
	
	      var w = textures[0].image.width / textures[0].image.width;
	      var h = textures[0].image.height / textures[0].image.width;
	
	      // plane01
	
	      var geometry = new THREE.PlaneGeometry(w, h, 1, 1);
	      var material = new THREE.ShaderMaterial({
	        uniforms: gb.in.loadMgr.shaders[0].uniforms,
	        vertexShader: gb.in.loadMgr.shaders[0].vs,
	        fragmentShader: gb.in.loadMgr.shaders[0].fs,
	        transparent: true
	      });
	
	      this.plane = new THREE.Mesh(geometry, material);
	      this.plane.scale.x = this.plane.scale.y = 2000.0;
	
	      // plane02
	
	      var w = textures[1].image.width / textures[1].image.width;
	      var h = textures[1].image.height / textures[1].image.width;
	
	      var geometry = new THREE.PlaneGeometry(w, h, 1, 1);
	      var material = new THREE.ShaderMaterial({
	        uniforms: gb.in.loadMgr.shaders[1].uniforms,
	        vertexShader: gb.in.loadMgr.shaders[1].vs,
	        fragmentShader: gb.in.loadMgr.shaders[1].fs,
	        transparent: true
	      });
	
	      this.plane02 = new THREE.Mesh(geometry, material);
	      this.plane02.scale.x = this.plane02.scale.y = 600.0;
	
	      gb.in.loadMgr.shaders[0].uniforms.opacity.value = 1;
	      gb.in.loadMgr.shaders[1].uniforms.opacity.value = 0;
	
	      this.plane02.position.z = -1;
	
	      gb.in.scene.scene.add(this.plane);
	      gb.in.scene.scene.add(this.plane02);
	
	      // this.onResize();
	      // this.setEvents();
	
	      // テクスチャをuniform変数に追加
	      gb.in.loadMgr.shaders[0].uniforms.texture.value = textures[0];
	      gb.in.loadMgr.shaders[0].uniforms.texture01.value = textures[1];
	
	      gb.in.loadMgr.shaders[1].uniforms.texture.value = textures[1];
	      gb.in.loadMgr.shaders[1].uniforms.texture01.value = textures[1];
	
	      cb();
	    }
	  }, {
	    key: 'setVideoSize',
	    value: function setVideoSize() {
	
	      // videoのセットサイズ          
	      // this.lb = new gb.LayoutBackground($('body'),$(this.video.video));
	      // this.setEvents();
	
	    }
	  }, {
	    key: 'setTransparent',
	    value: function setTransparent(val) {
	
	      // this.plane.material.opacity = val;
	
	    }
	  }, {
	    key: 'tweenTransparent',
	    value: function tweenTransparent(time, val) {
	
	      // var t = time || 1.0;
	      // var v = val.target || 1.0;
	      // var e = val.ease || Power2.easeOut;
	
	      // TweenMax.to(this.plane.material, t, {
	      //   opacity: v,
	      //   ease : e,
	      // });
	
	    }
	  }, {
	    key: 'update',
	    value: function update() {}
	  }, {
	    key: 'onResize',
	    value: function onResize() {
	
	      // var w = window.innerWidth;
	      // var h = window.innerHeight;
	
	      // var rateW = window.innerHeight / window.innerWidth;
	      // var r = w/h;
	
	      // if (rateW < this.rate) {
	
	      //   this.plane.scale.set(r*0.58,r*0.58,r*0.58)
	
	      // } else {
	
	      //   // log(2,scaleY);
	
	      //   this.plane.scale.set(1,1,1);
	
	      // }
	
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	
	      // gb.in.rm.total += 1; // load数のtotalを計算
	      $(window).on('onSection04ProductImg', this.create.bind(this, function () {
	        //gb.in.rm.completed++;
	      }));
	    }
	  }]);
	
	  return Plane;
	}();
	
	exports.default = Plane;

/***/ },
/* 42 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//--------------------------------------------------
	//
	//  Param
	//
	//--------------------------------------------------
	
	var Param = function () {
	  function Param() {
	    _classCallCheck(this, Param);
	
	    this.gui;
	    this.json = {};
	    // this.appName = "plusMV";
	
	    var isFlag = true;
	
	    this.clock = {
	      progress: 0.5
	    };
	
	    this.zoomblur = {
	      strength: 46.0,
	      size: 89.0
	    };
	
	    this.transition = {
	      progress: 0.0,
	      size: 0.04,
	      zoom: 30,
	      colorSeparation: 0.3,
	      strength: 0.6,
	      tween: function tween() {
	
	        var val;
	        if (isFlag) val = 1.0;else val = 0.0;
	
	        isFlag = !isFlag;
	
	        TweenMax.to(gb.in.plane02.shader.uniforms.progress, 2.5, {
	          value: val,
	          ease: Power4.easeOut
	        });
	      }
	    };
	
	    this.setupData();
	    this.setup();
	  }
	
	  _createClass(Param, [{
	    key: 'setupData',
	    value: function setupData() {}
	  }, {
	    key: 'setup',
	    value: function setup() {
	
	      // if (gb.in.conf.PARAM) {
	
	      this.gui = new dat.GUI();
	      // this.gui = new dat.GUI({load: this.json});
	      this.gui.remember(this);
	      $(".dg").css({ zIndex: 99999 });
	
	      var f1 = this.gui.addFolder('zoomblur');
	      f1.add(this.zoomblur, 'strength', 0.0, 2.0).step(0.01).listen().onChange(function (val) {
	
	        gb.in.plane.shaders[2].uniforms.strength.value = val;
	        log(val);
	      });
	      f1.add(this.zoomblur, 'size', 0.0, 100.0).step(0.1).listen().onChange(function (val) {
	
	        gb.in.plane.shader.uniforms.nFrag.value = 1 / val;
	      });
	      f1.open();
	
	      // this.gui.close();
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {}
	  }]);
	
	  return Param;
	}();
	
	exports.default = Param;

/***/ },
/* 43 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//--------------------------------------------------
	//
	//  Profiler
	//
	//--------------------------------------------------
	
	var Profiler = function () {
	  function Profiler() {
	    _classCallCheck(this, Profiler);
	
	    this.Stats;
	    this.setup();
	    this.setEvents();
	  }
	
	  _createClass(Profiler, [{
	    key: "setup",
	    value: function setup() {
	
	      // if (gb.in.conf.STATS) {
	
	      this.Stats = new Stats();
	      this.Stats.domElement.style.position = "fixed";
	      this.Stats.domElement.style.left = "0px";
	      this.Stats.domElement.style.top = "0px";
	      document.body.appendChild(this.Stats.domElement);
	
	      // };
	    }
	  }, {
	    key: "update",
	    value: function update() {
	
	      if (this.Stats) {
	        this.Stats.update();
	      }
	    }
	  }, {
	    key: "setEvents",
	    value: function setEvents() {
	
	      gb.in.up.add('profiler', this.update.bind(this));
	    }
	  }]);
	
	  return Profiler;
	}();
	
	exports.default = Profiler;

/***/ },
/* 44 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//--------------------------------------------------
	//
	//  Layout
	//
	//--------------------------------------------------
	var Scale = function () {
	  function Scale() {
	    _classCallCheck(this, Scale);
	
	    this.SPBaseW = 375;
	    this.PCBaseW = 1300;
	
	    this.rate = 1;
	    this.W = window.innerWidth;
	
	    this.$targetList = [{
	      '$target': $('#sideL, #sideR, #nav'),
	      'scale': 'spOnly' // spOnly pcOnly both
	    }];
	
	    this.run();
	    this.setup();
	    this.setEvents();
	  }
	
	  _createClass(Scale, [{
	    key: 'setup',
	    value: function setup() {}
	  }, {
	    key: 'run',
	    value: function run() {
	
	      this.W = $(window).width();
	      this.iW = window.innerWidth;
	
	      this.scale();
	      this.wrap();
	    }
	
	    // 拡大
	
	  }, {
	    key: 'scale',
	    value: function scale() {
	      var _this = this;
	
	      // bpの場合のscale
	      if (this.iW <= gb.in.conf.bp) {
	
	        // widthからrateを計算
	        // this.rate = gb.in.u.floatFormat(this.W / this.SPBaseW , 2);
	        if (this.W > 375) this.W = 375;
	        if (this.W < 320) this.W = 320;
	        log(this.W);
	        this.rate = this.W / this.SPBaseW;
	
	        // scaleするリストをループ
	        $.each(this.$targetList, function (index, val) {
	
	          if (val.scale == 'both' || val.scale == 'spOnly') {
	
	            TweenMax.set(val.$target, {
	              scale: _this.rate
	            });
	          };
	        });
	      } else {
	
	        // widthからrateを計算
	        // this.rate = gb.in.u.floatFormat(this.W / this.PCBaseW , 2);
	        if (this.W > 1300) this.W = 1300;
	        this.rate = this.W / this.PCBaseW;
	
	        // scaleするリストをループ
	        $.each(this.$targetList, function (index, val) {
	
	          if (val.scale == 'both' || val.scale == 'pcOnly') {
	
	            TweenMax.set(val.$target, {
	              scale: _this.rate
	            });
	          };
	
	          // こちらの場合は、scaleを戻す
	          if (val.scale == 'spOnly') {
	
	            TweenMax.set(val.$target, {
	              scale: 1
	            });
	          };
	        });
	      }
	    }
	
	    // scaleしたら、元の大きさ分余白ができるのでoverflow hiddenで消す
	
	  }, {
	    key: 'wrap',
	    value: function wrap() {}
	  }, {
	    key: 'reset',
	    value: function reset() {
	
	      $.each(this.$targetList, function (index, val) {
	
	        TweenMax.set(val.$target, {
	          scale: 1,
	          'transform-origin': '0 0',
	          '-webkit-transform-origin': '0 0'
	        });
	      });
	
	      // イベント解除
	      gb.in.r.remove('scaleTop');
	    }
	  }, {
	    key: 'onResize',
	    value: function onResize() {
	
	      this.run();
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	
	      gb.in.r.add('scaleTop', this.onResize.bind(this));
	    }
	  }]);
	
	  return Scale;
	}();
	
	exports.default = Scale;

/***/ },
/* 45 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//--------------------------------------------------
	//
	//  HoverEffectSNSSPFooter
	//
	//--------------------------------------------------
	
	var HoverEffectSNSSPFooter = function () {
	  function HoverEffectSNSSPFooter($wrap, $target) {
	    _classCallCheck(this, HoverEffectSNSSPFooter);
	
	    this.$wrap = $wrap;
	    this.$inner = this.$wrap.find('.inner');
	    this.$target = this.$wrap.find('.sns.sp .iconShare');
	    this.$bar = this.$wrap.find('.sns.sp .bar');
	    this.$list = this.$wrap.find('.sns.sp .list');
	    this.$item = this.$wrap.find('.sns.sp .list .item');
	
	    // motion
	    this.tl = new TimelineMax();
	
	    this.setEvents();
	  }
	
	  _createClass(HoverEffectSNSSPFooter, [{
	    key: 'setup',
	    value: function setup() {}
	  }, {
	    key: 'ready',
	    value: function ready() {
	
	      // ox
	      TweenMax.set(this.$wrap, { width: 0 });
	
	      // bar
	      TweenMax.set(this.$bar, { width: 0 });
	
	      // sns
	      TweenMax.set(this.$item, { x: -40, opacity: 0 });
	
	      this.$bar.show();
	      this.$list.show();
	    }
	  }, {
	    key: 'toggle',
	    value: function toggle() {
	
	      if (this.$target.hasClass('on')) {
	        this.isOpen = false;
	
	        this.close();
	      } else {
	        this.isOpen = true;
	
	        this.open();
	      };
	
	      this.$target.toggleClass('on');
	    }
	  }, {
	    key: 'open',
	    value: function open(that) {
	
	      TweenMax.killTweensOf(this.$box);
	      TweenMax.killTweensOf(this.$bar);
	      TweenMax.killTweensOf(this.$item);
	
	      this.ready();
	
	      // barが伸びる
	
	      var tl = new TimelineMax();
	
	      tl
	      // boxが伸びる
	      .to(this.$wrap, 0.4, {
	        width: 330,
	        ease: Power3.easeOut
	      }).to(this.$bar, 0.3, {
	        width: 30,
	        ease: Power3.easeOut
	      }, '-=0.2').to(this.$item.eq(0), 0.3, {
	        x: 0,
	        opacity: 1,
	        ease: Power4.easeOut
	      }, '-=0.2').to(this.$item.eq(1), 0.3, {
	        x: 0,
	        opacity: 1,
	        ease: Power4.easeOut
	      }, '-=0.25').to(this.$item.eq(2), 0.3, {
	        x: 0,
	        opacity: 1,
	        ease: Power4.easeOut
	      }, '-=0.25').to(this.$item.eq(3), 0.3, {
	        x: 0,
	        opacity: 1,
	        ease: Power4.easeOut
	      }, '-=0.25');
	    }
	  }, {
	    key: 'close',
	    value: function close(that) {
	      var _this = this;
	
	      TweenMax.killTweensOf(this.$box);
	      TweenMax.killTweensOf(this.$bar);
	      TweenMax.killTweensOf(this.$item);
	
	      // bar
	      var tl = new TimelineMax();
	
	      tl.to(this.$item.eq(3), 0.3, {
	        x: -40,
	        opacity: 0,
	        ease: Power4.easeOut
	      }).to(this.$item.eq(2), 0.3, {
	        x: -40,
	        opacity: 0,
	        ease: Power4.easeOut
	      }, '-=0.25').to(this.$item.eq(1), 0.3, {
	        x: -40,
	        opacity: 0,
	        ease: Power4.easeOut
	      }, '-=0.25').to(this.$item.eq(0), 0.3, {
	        x: -40,
	        opacity: 0,
	        ease: Power4.easeOut,
	        onComplete: function onComplete() {
	          _this.$list.hide();
	        }
	      }, '-=0.25').to(this.$bar, 0.2, {
	        width: 0,
	        ease: Power2.easeOut,
	        onComplete: function onComplete() {
	          _this.$bar.hide();
	        }
	      }, '-=0.3').to(this.$wrap, 0.3, {
	        width: 0,
	        ease: Power3.easeOut
	      }, '-=0.3');
	    }
	  }, {
	    key: 'reset',
	    value: function reset() {
	
	      this.close();
	      this.$target.off('click');
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	
	      var self = this;
	
	      this.$target.on('click', this.toggle.bind(this));
	    }
	  }]);
	
	  return HoverEffectSNSSPFooter;
	}();
	
	exports.default = HoverEffectSNSSPFooter;

/***/ },
/* 46 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//--------------------------------------------------
	//
	//  HoverEffectSVGArrowTop
	//
	//--------------------------------------------------
	
	var HoverEffectSVGArrowTop = function () {
	  function HoverEffectSVGArrowTop($target) {
	    _classCallCheck(this, HoverEffectSVGArrowTop);
	
	    this.$target = $target;
	
	    // motion
	    this.tl = new TimelineMax();
	
	    this.setup();
	
	    this.isHover = false;
	
	    // スマホのときは処理しない
	    if (gb.in.u.isPC) this.setEvents();
	  }
	
	  _createClass(HoverEffectSVGArrowTop, [{
	    key: 'setup',
	    value: function setup() {}
	  }, {
	    key: 'run',
	    value: function run() {}
	  }, {
	    key: 'onEnter',
	    value: function onEnter(that) {
	
	      if (this.autoTL) {
	        this.autoTL.kill();
	        this.autoTL = null;
	      }
	      if (this.tl02) this.tl02.kill();
	      this.tl01 = new TimelineMax();
	
	      this.tl01
	      // 矢印を下に下げる
	      .to($(that).find('.arrow.pc'), 0.4, {
	        scaleY: 0.65,
	        y: 8,
	        opacity: 1,
	        z: 1,
	        'transform-origin': '50% 100%',
	        ease: Power4.easeOut
	      })
	      // 文字を下に下げる
	      .to($(that).find('.text'), 0.4, {
	        y: 30,
	        opacity: 1,
	        z: 1,
	        ease: Power4.easeOut
	      }, '-=0.37');
	    }
	  }, {
	    key: 'onLeave',
	    value: function onLeave(that) {
	      var _this = this;
	
	      if (this.tl01) this.tl01.kill();
	      this.tl02 = new TimelineMax();
	
	      this.tl02
	      // 文字を下に下げる
	      .to($(that).find('.text'), 0.5, {
	        y: 0,
	        z: 1,
	        ease: Power2.easeInOut
	      })
	      // 矢印を下に下げる
	      .to($(that).find('.arrow.pc'), 0.5, {
	        scaleY: 1,
	        y: 0,
	        z: 1,
	        'transform-origin': '50% 100%',
	        ease: Power2.easeInOut,
	        onComplete: function onComplete() {
	
	          if (_this.autoTL == null) _this.autoArrow();
	        }
	      }, '-=0.45');
	    }
	  }, {
	    key: 'autoArrow',
	    value: function autoArrow() {
	
	      this.autoTL = new TimelineMax({ repeat: -1 });
	
	      this.autoTL.to(this.$target.find('.arrow.pc'), 0.6, {
	        y: 60,
	        opacity: 0,
	        delay: 5.0,
	        scaleY: 0.3,
	        'transform-origin': '50% 100%',
	        ease: Power4.easeOut
	      }).set(this.$target.find('.arrow.pc'), { scaleY: 1, y: -60 }).to(this.$target.find('.arrow.pc'), 0.5, {
	        scaleY: 1,
	        y: 0,
	        opacity: 1,
	        delay: 0.3,
	        'transform-origin': '50% 100%',
	        ease: Power4.easeOut
	      });
	    }
	  }, {
	    key: 'setupFirst',
	    value: function setupFirst() {
	
	      TweenMax.set($('.section01 .next .text'), { y: -60, opacity: 0, z: 1 });
	      TweenMax.set($('.section01 .next svg'), { y: -30, opacity: 0, z: 1 });
	    }
	  }, {
	    key: 'runFirst',
	    value: function runFirst() {
	
	      var tl = new TimelineMax();
	
	      // 文字を下に下げる
	      tl.to($('.section01 .next .text'), 1.5, {
	        y: 0,
	        opacity: 1,
	        z: 1,
	        ease: Power2.easeOut
	      }).to($('.section01 .next svg'), 1.0, {
	        y: 0,
	        opacity: 1,
	        z: 1,
	        ease: Power2.easeOut
	      }, '-=0.82');
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	
	      var self = this;
	
	      this.$target.each(function (index, el) {
	
	        $(this).on('mouseenter', function (e) {
	          self.onEnter.call(self, this);
	        });
	        $(this).on('mouseleave', function (e) {
	          self.onLeave.call(self, this);
	        });
	      });
	    }
	  }]);
	
	  return HoverEffectSVGArrowTop;
	}();
	
	exports.default = HoverEffectSVGArrowTop;

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _Entry2 = __webpack_require__(48);
	
	var _Entry3 = _interopRequireDefault(_Entry2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * fileOverview:
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Project:
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * File: Canvas
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Date:
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Author:
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
	
	// import Camera from './Utils/Camera.js';
	
	'use strict';
	
	var Canvas = function (_Entry) {
	  _inherits(Canvas, _Entry);
	
	  function Canvas() {
	    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	    _classCallCheck(this, Canvas);
	
	    var _this = _possibleConstructorReturn(this, (Canvas.__proto__ || Object.getPrototypeOf(Canvas)).call(this));
	
	    _this.width = window.innerWidth;
	    _this.height = window.innerHeight;
	    _this.output = opts.output || document.createElement('div');
	
	    _this.camera = null;
	    _this.renderer = null;
	    _this.scene = null;
	    _this.cube = null;
	
	    _this.createCamera = _this._createCamera.bind(_this);
	    _this.createRenderer = _this._createRenderer.bind(_this);
	    _this.createScene = _this._createScene.bind(_this);
	    _this.createObject = _this._createObject.bind(_this);
	
	    _this.onResize = _this._onResize.bind(_this);
	
	    _this.Update = _this._Update.bind(_this);
	
	    return _this;
	  }
	
	  /**
	   * 初期化
	   */
	
	
	  _createClass(Canvas, [{
	    key: 'init',
	    value: function init() {
	      var _this2 = this;
	
	      this.createCamera();
	      this.createRenderer();
	      this.createScene();
	
	      this.createObject();
	
	      this.Update();
	
	      //リサイズイベント発火
	      window.addEventListener('resize', function () {
	        _this2.onResize();
	      }, false);
	    }
	
	    /**
	     * カメラ作成
	     */
	
	  }, {
	    key: '_createCamera',
	    value: function _createCamera() {
	
	      this.camera = new THREE.PerspectiveCamera(35, this.width / this.height, 10, 1000);
	      this.camera.position.set(0, 0, 300);
	      // this.camera.lookAt( this.scene.position );
	    }
	
	    /**
	     * レンダラー作成
	     */
	
	  }, {
	    key: '_createRenderer',
	    value: function _createRenderer() {
	
	      this.renderer = new THREE.WebGLRenderer({
	        alpha: false,
	        antialias: false,
	        stencil: false,
	        depth: true,
	        premultipliedAlpha: false
	      });
	
	      this.renderer.setClearColor(0xffffff);
	      this.renderer.setPixelRatio(window.devicePixelRatio || 1);
	      this.renderer.setSize(this.width, this.height);
	      this.output.appendChild(this.renderer.domElement);
	    }
	
	    /**
	     *　シーン作成
	     */
	
	  }, {
	    key: '_createScene',
	    value: function _createScene() {
	
	      this.scene = new THREE.Scene();
	    }
	
	    /**
	     *　Object作成
	     */
	
	  }, {
	    key: '_createObject',
	    value: function _createObject() {
	
	      var cubeGeometry = new THREE.BoxGeometry(50, 50, 50);
	      var cubeMaterial = new THREE.MeshBasicMaterial({
	        color: 0x000000,
	        wireframe: false
	      });
	
	      this.cube = new THREE.Mesh(cubeGeometry, cubeMaterial);
	      this.cube.position.x = 3;
	      this.cube.position.y = 3;
	      this.cube.position.z = 3;
	
	      this.scene.add(this.cube);
	    }
	
	    /**
	     *　更新
	     */
	
	  }, {
	    key: '_Update',
	    value: function _Update() {
	      var _this3 = this;
	
	      requestAnimationFrame(function () {
	        _this3.Update();
	      });
	      // this.controls.update();
	      this.renderer.render(this.scene, this.camera);
	    }
	
	    /**
	     *　画面リサイズ
	     */
	
	  }, {
	    key: '_onResize',
	    value: function _onResize() {
	      this.camera.aspect = window.innerWidth / window.innerHeight;
	      this.camera.updateProjectionMatrix();
	      this.renderer.setSize(window.innerWidth, window.innerHeight);
	    }
	  }, {
	    key: 'setEvents',
	    value: function setEvents() {
	
	      $(window).on('load', this.onLoad.bind(this));
	    }
	  }]);
	
	  return Canvas;
	}(_Entry3.default);
	
	exports.default = Canvas;

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * fileOverview:
	 * Project:
	 * File: Entry
	 * Date:
	 * Author:
	 */
	
	window.THREE = __webpack_require__(49);
	
	'use strict';
	
	var Entry = function () {
		function Entry() {
			_classCallCheck(this, Entry);
		}
	
		/**
	  * 初期化
	  */
	
	
		_createClass(Entry, [{
			key: 'init',
			value: function init() {}
		}]);
	
		return Entry;
	}();
	
	exports.default = Entry;

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;// threejs.org/license
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var THREE = { REVISION: "73" }; true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (THREE), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : "undefined" !== typeof exports && "undefined" !== typeof module && (module.exports = THREE);
	void 0 !== self.requestAnimationFrame && void 0 !== self.cancelAnimationFrame || function () {
	  for (var a = 0, b = ["ms", "moz", "webkit", "o"], c = 0; c < b.length && !self.requestAnimationFrame; ++c) {
	    self.requestAnimationFrame = self[b[c] + "RequestAnimationFrame"], self.cancelAnimationFrame = self[b[c] + "CancelAnimationFrame"] || self[b[c] + "CancelRequestAnimationFrame"];
	  }void 0 === self.requestAnimationFrame && void 0 !== self.setTimeout && (self.requestAnimationFrame = function (b) {
	    var c = Date.now(),
	        g = Math.max(0, 16 - (c - a)),
	        f = self.setTimeout(function () {
	      b(c + g);
	    }, g);a = c + g;return f;
	  });void 0 === self.cancelAnimationFrame && void 0 !== self.clearTimeout && (self.cancelAnimationFrame = function (a) {
	    self.clearTimeout(a);
	  });
	}();void 0 === self.performance && (self.performance = {});void 0 === self.performance.now && function () {
	  var a = Date.now();self.performance.now = function () {
	    return Date.now() - a;
	  };
	}();void 0 === Number.EPSILON && (Number.EPSILON = Math.pow(2, -52));void 0 === Math.sign && (Math.sign = function (a) {
	  return 0 > a ? -1 : 0 < a ? 1 : +a;
	});
	void 0 === Function.prototype.name && void 0 !== Object.defineProperty && Object.defineProperty(Function.prototype, "name", { get: function get() {
	    return this.toString().match(/^\s*function\s*(\S*)\s*\(/)[1];
	  } });THREE.MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };THREE.CullFaceNone = 0;THREE.CullFaceBack = 1;THREE.CullFaceFront = 2;THREE.CullFaceFrontBack = 3;THREE.FrontFaceDirectionCW = 0;THREE.FrontFaceDirectionCCW = 1;THREE.BasicShadowMap = 0;THREE.PCFShadowMap = 1;THREE.PCFSoftShadowMap = 2;THREE.FrontSide = 0;THREE.BackSide = 1;
	THREE.DoubleSide = 2;THREE.FlatShading = 1;THREE.SmoothShading = 2;THREE.NoColors = 0;THREE.FaceColors = 1;THREE.VertexColors = 2;THREE.NoBlending = 0;THREE.NormalBlending = 1;THREE.AdditiveBlending = 2;THREE.SubtractiveBlending = 3;THREE.MultiplyBlending = 4;THREE.CustomBlending = 5;THREE.AddEquation = 100;THREE.SubtractEquation = 101;THREE.ReverseSubtractEquation = 102;THREE.MinEquation = 103;THREE.MaxEquation = 104;THREE.ZeroFactor = 200;THREE.OneFactor = 201;THREE.SrcColorFactor = 202;THREE.OneMinusSrcColorFactor = 203;
	THREE.SrcAlphaFactor = 204;THREE.OneMinusSrcAlphaFactor = 205;THREE.DstAlphaFactor = 206;THREE.OneMinusDstAlphaFactor = 207;THREE.DstColorFactor = 208;THREE.OneMinusDstColorFactor = 209;THREE.SrcAlphaSaturateFactor = 210;THREE.NeverDepth = 0;THREE.AlwaysDepth = 1;THREE.LessDepth = 2;THREE.LessEqualDepth = 3;THREE.EqualDepth = 4;THREE.GreaterEqualDepth = 5;THREE.GreaterDepth = 6;THREE.NotEqualDepth = 7;THREE.MultiplyOperation = 0;THREE.MixOperation = 1;THREE.AddOperation = 2;THREE.UVMapping = 300;THREE.CubeReflectionMapping = 301;
	THREE.CubeRefractionMapping = 302;THREE.EquirectangularReflectionMapping = 303;THREE.EquirectangularRefractionMapping = 304;THREE.SphericalReflectionMapping = 305;THREE.RepeatWrapping = 1E3;THREE.ClampToEdgeWrapping = 1001;THREE.MirroredRepeatWrapping = 1002;THREE.NearestFilter = 1003;THREE.NearestMipMapNearestFilter = 1004;THREE.NearestMipMapLinearFilter = 1005;THREE.LinearFilter = 1006;THREE.LinearMipMapNearestFilter = 1007;THREE.LinearMipMapLinearFilter = 1008;THREE.UnsignedByteType = 1009;THREE.ByteType = 1010;
	THREE.ShortType = 1011;THREE.UnsignedShortType = 1012;THREE.IntType = 1013;THREE.UnsignedIntType = 1014;THREE.FloatType = 1015;THREE.HalfFloatType = 1025;THREE.UnsignedShort4444Type = 1016;THREE.UnsignedShort5551Type = 1017;THREE.UnsignedShort565Type = 1018;THREE.AlphaFormat = 1019;THREE.RGBFormat = 1020;THREE.RGBAFormat = 1021;THREE.LuminanceFormat = 1022;THREE.LuminanceAlphaFormat = 1023;THREE.RGBEFormat = THREE.RGBAFormat;THREE.RGB_S3TC_DXT1_Format = 2001;THREE.RGBA_S3TC_DXT1_Format = 2002;THREE.RGBA_S3TC_DXT3_Format = 2003;
	THREE.RGBA_S3TC_DXT5_Format = 2004;THREE.RGB_PVRTC_4BPPV1_Format = 2100;THREE.RGB_PVRTC_2BPPV1_Format = 2101;THREE.RGBA_PVRTC_4BPPV1_Format = 2102;THREE.RGBA_PVRTC_2BPPV1_Format = 2103;THREE.LoopOnce = 2200;THREE.LoopRepeat = 2201;THREE.LoopPingPong = 2202;
	THREE.Projector = function () {
	  console.error("THREE.Projector has been moved to /examples/js/renderers/Projector.js.");this.projectVector = function (a, b) {
	    console.warn("THREE.Projector: .projectVector() is now vector.project().");a.project(b);
	  };this.unprojectVector = function (a, b) {
	    console.warn("THREE.Projector: .unprojectVector() is now vector.unproject().");a.unproject(b);
	  };this.pickingRay = function (a, b) {
	    console.error("THREE.Projector: .pickingRay() is now raycaster.setFromCamera().");
	  };
	};
	THREE.CanvasRenderer = function () {
	  console.error("THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js");this.domElement = document.createElement("canvas");this.clear = function () {};this.render = function () {};this.setClearColor = function () {};this.setSize = function () {};
	};THREE.Color = function (a) {
	  return 3 === arguments.length ? this.fromArray(arguments) : this.set(a);
	};
	THREE.Color.prototype = { constructor: THREE.Color, r: 1, g: 1, b: 1, set: function set(a) {
	    a instanceof THREE.Color ? this.copy(a) : "number" === typeof a ? this.setHex(a) : "string" === typeof a && this.setStyle(a);return this;
	  }, setHex: function setHex(a) {
	    a = Math.floor(a);this.r = (a >> 16 & 255) / 255;this.g = (a >> 8 & 255) / 255;this.b = (a & 255) / 255;return this;
	  }, setRGB: function setRGB(a, b, c) {
	    this.r = a;this.g = b;this.b = c;return this;
	  }, setHSL: function () {
	    function a(a, c, d) {
	      0 > d && (d += 1);1 < d && (d -= 1);return d < 1 / 6 ? a + 6 * (c - a) * d : .5 > d ? c : d < 2 / 3 ? a + 6 * (c - a) * (2 / 3 - d) : a;
	    }return function (b, c, d) {
	      b = THREE.Math.euclideanModulo(b, 1);c = THREE.Math.clamp(c, 0, 1);d = THREE.Math.clamp(d, 0, 1);0 === c ? this.r = this.g = this.b = d : (c = .5 >= d ? d * (1 + c) : d + c - d * c, d = 2 * d - c, this.r = a(d, c, b + 1 / 3), this.g = a(d, c, b), this.b = a(d, c, b - 1 / 3));return this;
	    };
	  }(), setStyle: function setStyle(a) {
	    function b(b) {
	      void 0 !== b && 1 > parseFloat(b) && console.warn("THREE.Color: Alpha component of " + a + " will be ignored.");
	    }var c;if (c = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(a)) {
	      var d = c[2];switch (c[1]) {case "rgb":case "rgba":
	          if (c = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(d)) return this.r = Math.min(255, parseInt(c[1], 10)) / 255, this.g = Math.min(255, parseInt(c[2], 10)) / 255, this.b = Math.min(255, parseInt(c[3], 10)) / 255, b(c[5]), this;if (c = /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(d)) return this.r = Math.min(100, parseInt(c[1], 10)) / 100, this.g = Math.min(100, parseInt(c[2], 10)) / 100, this.b = Math.min(100, parseInt(c[3], 10)) / 100, b(c[5]), this;break;case "hsl":case "hsla":
	          if (c = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(d)) {
	            var d = parseFloat(c[1]) / 360,
	                e = parseInt(c[2], 10) / 100,
	                g = parseInt(c[3], 10) / 100;b(c[5]);return this.setHSL(d, e, g);
	          }}
	    } else if (c = /^\#([A-Fa-f0-9]+)$/.exec(a)) {
	      c = c[1];d = c.length;if (3 === d) return this.r = parseInt(c.charAt(0) + c.charAt(0), 16) / 255, this.g = parseInt(c.charAt(1) + c.charAt(1), 16) / 255, this.b = parseInt(c.charAt(2) + c.charAt(2), 16) / 255, this;if (6 === d) return this.r = parseInt(c.charAt(0) + c.charAt(1), 16) / 255, this.g = parseInt(c.charAt(2) + c.charAt(3), 16) / 255, this.b = parseInt(c.charAt(4) + c.charAt(5), 16) / 255, this;
	    }a && 0 < a.length && (c = THREE.ColorKeywords[a], void 0 !== c ? this.setHex(c) : console.warn("THREE.Color: Unknown color " + a));return this;
	  }, clone: function clone() {
	    return new this.constructor(this.r, this.g, this.b);
	  }, copy: function copy(a) {
	    this.r = a.r;this.g = a.g;this.b = a.b;return this;
	  }, copyGammaToLinear: function copyGammaToLinear(a, b) {
	    void 0 === b && (b = 2);this.r = Math.pow(a.r, b);this.g = Math.pow(a.g, b);this.b = Math.pow(a.b, b);return this;
	  }, copyLinearToGamma: function copyLinearToGamma(a, b) {
	    void 0 === b && (b = 2);var c = 0 < b ? 1 / b : 1;this.r = Math.pow(a.r, c);this.g = Math.pow(a.g, c);this.b = Math.pow(a.b, c);return this;
	  }, convertGammaToLinear: function convertGammaToLinear() {
	    var a = this.r,
	        b = this.g,
	        c = this.b;this.r = a * a;this.g = b * b;this.b = c * c;return this;
	  }, convertLinearToGamma: function convertLinearToGamma() {
	    this.r = Math.sqrt(this.r);this.g = Math.sqrt(this.g);this.b = Math.sqrt(this.b);return this;
	  }, getHex: function getHex() {
	    return 255 * this.r << 16 ^ 255 * this.g << 8 ^ 255 * this.b << 0;
	  }, getHexString: function getHexString() {
	    return ("000000" + this.getHex().toString(16)).slice(-6);
	  }, getHSL: function getHSL(a) {
	    a = a || { h: 0, s: 0, l: 0 };var b = this.r,
	        c = this.g,
	        d = this.b,
	        e = Math.max(b, c, d),
	        g = Math.min(b, c, d),
	        f,
	        h = (g + e) / 2;if (g === e) g = f = 0;else {
	      var l = e - g,
	          g = .5 >= h ? l / (e + g) : l / (2 - e - g);switch (e) {case b:
	          f = (c - d) / l + (c < d ? 6 : 0);break;case c:
	          f = (d - b) / l + 2;break;case d:
	          f = (b - c) / l + 4;}f /= 6;
	    }a.h = f;a.s = g;a.l = h;return a;
	  }, getStyle: function getStyle() {
	    return "rgb(" + (255 * this.r | 0) + "," + (255 * this.g | 0) + "," + (255 * this.b | 0) + ")";
	  }, offsetHSL: function offsetHSL(a, b, c) {
	    var d = this.getHSL();d.h += a;d.s += b;d.l += c;this.setHSL(d.h, d.s, d.l);return this;
	  }, add: function add(a) {
	    this.r += a.r;this.g += a.g;this.b += a.b;return this;
	  }, addColors: function addColors(a, b) {
	    this.r = a.r + b.r;this.g = a.g + b.g;this.b = a.b + b.b;return this;
	  }, addScalar: function addScalar(a) {
	    this.r += a;this.g += a;this.b += a;return this;
	  }, multiply: function multiply(a) {
	    this.r *= a.r;this.g *= a.g;this.b *= a.b;return this;
	  }, multiplyScalar: function multiplyScalar(a) {
	    this.r *= a;this.g *= a;this.b *= a;return this;
	  }, lerp: function lerp(a, b) {
	    this.r += (a.r - this.r) * b;this.g += (a.g - this.g) * b;this.b += (a.b - this.b) * b;return this;
	  }, equals: function equals(a) {
	    return a.r === this.r && a.g === this.g && a.b === this.b;
	  }, fromArray: function fromArray(a, b) {
	    void 0 === b && (b = 0);this.r = a[b];this.g = a[b + 1];this.b = a[b + 2];return this;
	  }, toArray: function toArray(a, b) {
	    void 0 === a && (a = []);void 0 === b && (b = 0);a[b] = this.r;a[b + 1] = this.g;a[b + 2] = this.b;return a;
	  } };
	THREE.ColorKeywords = { aliceblue: 15792383, antiquewhite: 16444375, aqua: 65535, aquamarine: 8388564, azure: 15794175, beige: 16119260, bisque: 16770244, black: 0, blanchedalmond: 16772045, blue: 255, blueviolet: 9055202, brown: 10824234, burlywood: 14596231, cadetblue: 6266528, chartreuse: 8388352, chocolate: 13789470, coral: 16744272, cornflowerblue: 6591981, cornsilk: 16775388, crimson: 14423100, cyan: 65535, darkblue: 139, darkcyan: 35723, darkgoldenrod: 12092939, darkgray: 11119017, darkgreen: 25600, darkgrey: 11119017, darkkhaki: 12433259, darkmagenta: 9109643,
	  darkolivegreen: 5597999, darkorange: 16747520, darkorchid: 10040012, darkred: 9109504, darksalmon: 15308410, darkseagreen: 9419919, darkslateblue: 4734347, darkslategray: 3100495, darkslategrey: 3100495, darkturquoise: 52945, darkviolet: 9699539, deeppink: 16716947, deepskyblue: 49151, dimgray: 6908265, dimgrey: 6908265, dodgerblue: 2003199, firebrick: 11674146, floralwhite: 16775920, forestgreen: 2263842, fuchsia: 16711935, gainsboro: 14474460, ghostwhite: 16316671, gold: 16766720, goldenrod: 14329120, gray: 8421504, green: 32768, greenyellow: 11403055,
	  grey: 8421504, honeydew: 15794160, hotpink: 16738740, indianred: 13458524, indigo: 4915330, ivory: 16777200, khaki: 15787660, lavender: 15132410, lavenderblush: 16773365, lawngreen: 8190976, lemonchiffon: 16775885, lightblue: 11393254, lightcoral: 15761536, lightcyan: 14745599, lightgoldenrodyellow: 16448210, lightgray: 13882323, lightgreen: 9498256, lightgrey: 13882323, lightpink: 16758465, lightsalmon: 16752762, lightseagreen: 2142890, lightskyblue: 8900346, lightslategray: 7833753, lightslategrey: 7833753, lightsteelblue: 11584734, lightyellow: 16777184,
	  lime: 65280, limegreen: 3329330, linen: 16445670, magenta: 16711935, maroon: 8388608, mediumaquamarine: 6737322, mediumblue: 205, mediumorchid: 12211667, mediumpurple: 9662683, mediumseagreen: 3978097, mediumslateblue: 8087790, mediumspringgreen: 64154, mediumturquoise: 4772300, mediumvioletred: 13047173, midnightblue: 1644912, mintcream: 16121850, mistyrose: 16770273, moccasin: 16770229, navajowhite: 16768685, navy: 128, oldlace: 16643558, olive: 8421376, olivedrab: 7048739, orange: 16753920, orangered: 16729344, orchid: 14315734, palegoldenrod: 15657130,
	  palegreen: 10025880, paleturquoise: 11529966, palevioletred: 14381203, papayawhip: 16773077, peachpuff: 16767673, peru: 13468991, pink: 16761035, plum: 14524637, powderblue: 11591910, purple: 8388736, red: 16711680, rosybrown: 12357519, royalblue: 4286945, saddlebrown: 9127187, salmon: 16416882, sandybrown: 16032864, seagreen: 3050327, seashell: 16774638, sienna: 10506797, silver: 12632256, skyblue: 8900331, slateblue: 6970061, slategray: 7372944, slategrey: 7372944, snow: 16775930, springgreen: 65407, steelblue: 4620980, tan: 13808780, teal: 32896, thistle: 14204888,
	  tomato: 16737095, turquoise: 4251856, violet: 15631086, wheat: 16113331, white: 16777215, whitesmoke: 16119285, yellow: 16776960, yellowgreen: 10145074 };THREE.Quaternion = function (a, b, c, d) {
	  this._x = a || 0;this._y = b || 0;this._z = c || 0;this._w = void 0 !== d ? d : 1;
	};
	THREE.Quaternion.prototype = { constructor: THREE.Quaternion, get x() {
	    return this._x;
	  }, set x(a) {
	    this._x = a;this.onChangeCallback();
	  }, get y() {
	    return this._y;
	  }, set y(a) {
	    this._y = a;this.onChangeCallback();
	  }, get z() {
	    return this._z;
	  }, set z(a) {
	    this._z = a;this.onChangeCallback();
	  }, get w() {
	    return this._w;
	  }, set w(a) {
	    this._w = a;this.onChangeCallback();
	  }, set: function set(a, b, c, d) {
	    this._x = a;this._y = b;this._z = c;this._w = d;this.onChangeCallback();return this;
	  }, clone: function clone() {
	    return new this.constructor(this._x, this._y, this._z, this._w);
	  },
	  copy: function copy(a) {
	    this._x = a.x;this._y = a.y;this._z = a.z;this._w = a.w;this.onChangeCallback();return this;
	  }, setFromEuler: function setFromEuler(a, b) {
	    if (!1 === a instanceof THREE.Euler) throw Error("THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.");var c = Math.cos(a._x / 2),
	        d = Math.cos(a._y / 2),
	        e = Math.cos(a._z / 2),
	        g = Math.sin(a._x / 2),
	        f = Math.sin(a._y / 2),
	        h = Math.sin(a._z / 2),
	        l = a.order;"XYZ" === l ? (this._x = g * d * e + c * f * h, this._y = c * f * e - g * d * h, this._z = c * d * h + g * f * e, this._w = c * d * e - g * f * h) : "YXZ" === l ? (this._x = g * d * e + c * f * h, this._y = c * f * e - g * d * h, this._z = c * d * h - g * f * e, this._w = c * d * e + g * f * h) : "ZXY" === l ? (this._x = g * d * e - c * f * h, this._y = c * f * e + g * d * h, this._z = c * d * h + g * f * e, this._w = c * d * e - g * f * h) : "ZYX" === l ? (this._x = g * d * e - c * f * h, this._y = c * f * e + g * d * h, this._z = c * d * h - g * f * e, this._w = c * d * e + g * f * h) : "YZX" === l ? (this._x = g * d * e + c * f * h, this._y = c * f * e + g * d * h, this._z = c * d * h - g * f * e, this._w = c * d * e - g * f * h) : "XZY" === l && (this._x = g * d * e - c * f * h, this._y = c * f * e - g * d * h, this._z = c * d * h + g * f * e, this._w = c * d * e + g * f * h);if (!1 !== b) this.onChangeCallback();return this;
	  }, setFromAxisAngle: function setFromAxisAngle(a, b) {
	    var c = b / 2,
	        d = Math.sin(c);this._x = a.x * d;this._y = a.y * d;this._z = a.z * d;this._w = Math.cos(c);this.onChangeCallback();return this;
	  }, setFromRotationMatrix: function setFromRotationMatrix(a) {
	    var b = a.elements,
	        c = b[0];a = b[4];var d = b[8],
	        e = b[1],
	        g = b[5],
	        f = b[9],
	        h = b[2],
	        l = b[6],
	        b = b[10],
	        k = c + g + b;0 < k ? (c = .5 / Math.sqrt(k + 1), this._w = .25 / c, this._x = (l - f) * c, this._y = (d - h) * c, this._z = (e - a) * c) : c > g && c > b ? (c = 2 * Math.sqrt(1 + c - g - b), this._w = (l - f) / c, this._x = .25 * c, this._y = (a + e) / c, this._z = (d + h) / c) : g > b ? (c = 2 * Math.sqrt(1 + g - c - b), this._w = (d - h) / c, this._x = (a + e) / c, this._y = .25 * c, this._z = (f + l) / c) : (c = 2 * Math.sqrt(1 + b - c - g), this._w = (e - a) / c, this._x = (d + h) / c, this._y = (f + l) / c, this._z = .25 * c);this.onChangeCallback();return this;
	  }, setFromUnitVectors: function () {
	    var a, b;return function (c, d) {
	      void 0 === a && (a = new THREE.Vector3());b = c.dot(d) + 1;1E-6 > b ? (b = 0, Math.abs(c.x) > Math.abs(c.z) ? a.set(-c.y, c.x, 0) : a.set(0, -c.z, c.y)) : a.crossVectors(c, d);this._x = a.x;this._y = a.y;this._z = a.z;this._w = b;this.normalize();return this;
	    };
	  }(), inverse: function inverse() {
	    this.conjugate().normalize();return this;
	  }, conjugate: function conjugate() {
	    this._x *= -1;this._y *= -1;this._z *= -1;this.onChangeCallback();return this;
	  }, dot: function dot(a) {
	    return this._x * a._x + this._y * a._y + this._z * a._z + this._w * a._w;
	  }, lengthSq: function lengthSq() {
	    return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
	  }, length: function length() {
	    return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
	  }, normalize: function normalize() {
	    var a = this.length();0 === a ? (this._z = this._y = this._x = 0, this._w = 1) : (a = 1 / a, this._x *= a, this._y *= a, this._z *= a, this._w *= a);this.onChangeCallback();return this;
	  },
	  multiply: function multiply(a, b) {
	    return void 0 !== b ? (console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."), this.multiplyQuaternions(a, b)) : this.multiplyQuaternions(this, a);
	  }, multiplyQuaternions: function multiplyQuaternions(a, b) {
	    var c = a._x,
	        d = a._y,
	        e = a._z,
	        g = a._w,
	        f = b._x,
	        h = b._y,
	        l = b._z,
	        k = b._w;this._x = c * k + g * f + d * l - e * h;this._y = d * k + g * h + e * f - c * l;this._z = e * k + g * l + c * h - d * f;this._w = g * k - c * f - d * h - e * l;this.onChangeCallback();return this;
	  }, multiplyVector3: function multiplyVector3(a) {
	    console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.");
	    return a.applyQuaternion(this);
	  }, slerp: function slerp(a, b) {
	    if (0 === b) return this;if (1 === b) return this.copy(a);var c = this._x,
	        d = this._y,
	        e = this._z,
	        g = this._w,
	        f = g * a._w + c * a._x + d * a._y + e * a._z;0 > f ? (this._w = -a._w, this._x = -a._x, this._y = -a._y, this._z = -a._z, f = -f) : this.copy(a);if (1 <= f) return this._w = g, this._x = c, this._y = d, this._z = e, this;var h = Math.acos(f),
	        l = Math.sqrt(1 - f * f);if (.001 > Math.abs(l)) return this._w = .5 * (g + this._w), this._x = .5 * (c + this._x), this._y = .5 * (d + this._y), this._z = .5 * (e + this._z), this;f = Math.sin((1 - b) * h) / l;h = Math.sin(b * h) / l;this._w = g * f + this._w * h;this._x = c * f + this._x * h;this._y = d * f + this._y * h;this._z = e * f + this._z * h;this.onChangeCallback();return this;
	  }, equals: function equals(a) {
	    return a._x === this._x && a._y === this._y && a._z === this._z && a._w === this._w;
	  }, fromArray: function fromArray(a, b) {
	    void 0 === b && (b = 0);this._x = a[b];this._y = a[b + 1];this._z = a[b + 2];this._w = a[b + 3];this.onChangeCallback();return this;
	  }, toArray: function toArray(a, b) {
	    void 0 === a && (a = []);void 0 === b && (b = 0);a[b] = this._x;a[b + 1] = this._y;a[b + 2] = this._z;a[b + 3] = this._w;return a;
	  }, onChange: function onChange(a) {
	    this.onChangeCallback = a;return this;
	  }, onChangeCallback: function onChangeCallback() {} };THREE.Quaternion.slerp = function (a, b, c, d) {
	  return c.copy(a).slerp(b, d);
	};THREE.Vector2 = function (a, b) {
	  this.x = a || 0;this.y = b || 0;
	};
	THREE.Vector2.prototype = { constructor: THREE.Vector2, get width() {
	    return this.x;
	  }, set width(a) {
	    this.x = a;
	  }, get height() {
	    return this.y;
	  }, set height(a) {
	    this.y = a;
	  }, set: function set(a, b) {
	    this.x = a;this.y = b;return this;
	  }, setX: function setX(a) {
	    this.x = a;return this;
	  }, setY: function setY(a) {
	    this.y = a;return this;
	  }, setComponent: function setComponent(a, b) {
	    switch (a) {case 0:
	        this.x = b;break;case 1:
	        this.y = b;break;default:
	        throw Error("index is out of range: " + a);}
	  }, getComponent: function getComponent(a) {
	    switch (a) {case 0:
	        return this.x;case 1:
	        return this.y;default:
	        throw Error("index is out of range: " + a);}
	  }, clone: function clone() {
	    return new this.constructor(this.x, this.y);
	  }, copy: function copy(a) {
	    this.x = a.x;this.y = a.y;return this;
	  }, add: function add(a, b) {
	    if (void 0 !== b) return console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(a, b);this.x += a.x;this.y += a.y;return this;
	  }, addScalar: function addScalar(a) {
	    this.x += a;this.y += a;return this;
	  }, addVectors: function addVectors(a, b) {
	    this.x = a.x + b.x;this.y = a.y + b.y;return this;
	  }, addScaledVector: function addScaledVector(a, b) {
	    this.x += a.x * b;this.y += a.y * b;return this;
	  },
	  sub: function sub(a, b) {
	    if (void 0 !== b) return console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(a, b);this.x -= a.x;this.y -= a.y;return this;
	  }, subScalar: function subScalar(a) {
	    this.x -= a;this.y -= a;return this;
	  }, subVectors: function subVectors(a, b) {
	    this.x = a.x - b.x;this.y = a.y - b.y;return this;
	  }, multiply: function multiply(a) {
	    this.x *= a.x;this.y *= a.y;return this;
	  }, multiplyScalar: function multiplyScalar(a) {
	    isFinite(a) ? (this.x *= a, this.y *= a) : this.y = this.x = 0;return this;
	  }, divide: function divide(a) {
	    this.x /= a.x;
	    this.y /= a.y;return this;
	  }, divideScalar: function divideScalar(a) {
	    return this.multiplyScalar(1 / a);
	  }, min: function min(a) {
	    this.x = Math.min(this.x, a.x);this.y = Math.min(this.y, a.y);return this;
	  }, max: function max(a) {
	    this.x = Math.max(this.x, a.x);this.y = Math.max(this.y, a.y);return this;
	  }, clamp: function clamp(a, b) {
	    this.x = Math.max(a.x, Math.min(b.x, this.x));this.y = Math.max(a.y, Math.min(b.y, this.y));return this;
	  }, clampScalar: function () {
	    var a, b;return function (c, d) {
	      void 0 === a && (a = new THREE.Vector2(), b = new THREE.Vector2());a.set(c, c);b.set(d, d);return this.clamp(a, b);
	    };
	  }(), clampLength: function clampLength(a, b) {
	    var c = this.length();this.multiplyScalar(Math.max(a, Math.min(b, c)) / c);return this;
	  }, floor: function floor() {
	    this.x = Math.floor(this.x);this.y = Math.floor(this.y);return this;
	  }, ceil: function ceil() {
	    this.x = Math.ceil(this.x);this.y = Math.ceil(this.y);return this;
	  }, round: function round() {
	    this.x = Math.round(this.x);this.y = Math.round(this.y);return this;
	  }, roundToZero: function roundToZero() {
	    this.x = 0 > this.x ? Math.ceil(this.x) : Math.floor(this.x);this.y = 0 > this.y ? Math.ceil(this.y) : Math.floor(this.y);return this;
	  }, negate: function negate() {
	    this.x = -this.x;this.y = -this.y;return this;
	  }, dot: function dot(a) {
	    return this.x * a.x + this.y * a.y;
	  }, lengthSq: function lengthSq() {
	    return this.x * this.x + this.y * this.y;
	  }, length: function length() {
	    return Math.sqrt(this.x * this.x + this.y * this.y);
	  }, lengthManhattan: function lengthManhattan() {
	    return Math.abs(this.x) + Math.abs(this.y);
	  }, normalize: function normalize() {
	    return this.divideScalar(this.length());
	  }, distanceTo: function distanceTo(a) {
	    return Math.sqrt(this.distanceToSquared(a));
	  }, distanceToSquared: function distanceToSquared(a) {
	    var b = this.x - a.x;a = this.y - a.y;return b * b + a * a;
	  }, setLength: function setLength(a) {
	    return this.multiplyScalar(a / this.length());
	  }, lerp: function lerp(a, b) {
	    this.x += (a.x - this.x) * b;this.y += (a.y - this.y) * b;return this;
	  }, lerpVectors: function lerpVectors(a, b, c) {
	    this.subVectors(b, a).multiplyScalar(c).add(a);return this;
	  }, equals: function equals(a) {
	    return a.x === this.x && a.y === this.y;
	  }, fromArray: function fromArray(a, b) {
	    void 0 === b && (b = 0);this.x = a[b];this.y = a[b + 1];return this;
	  }, toArray: function toArray(a, b) {
	    void 0 === a && (a = []);void 0 === b && (b = 0);a[b] = this.x;a[b + 1] = this.y;return a;
	  }, fromAttribute: function fromAttribute(a, b, c) {
	    void 0 === c && (c = 0);b = b * a.itemSize + c;this.x = a.array[b];this.y = a.array[b + 1];return this;
	  }, rotateAround: function rotateAround(a, b) {
	    var c = Math.cos(b),
	        d = Math.sin(b),
	        e = this.x - a.x,
	        g = this.y - a.y;this.x = e * c - g * d + a.x;this.y = e * d + g * c + a.y;return this;
	  } };THREE.Vector3 = function (a, b, c) {
	  this.x = a || 0;this.y = b || 0;this.z = c || 0;
	};
	THREE.Vector3.prototype = { constructor: THREE.Vector3, set: function set(a, b, c) {
	    this.x = a;this.y = b;this.z = c;return this;
	  }, setX: function setX(a) {
	    this.x = a;return this;
	  }, setY: function setY(a) {
	    this.y = a;return this;
	  }, setZ: function setZ(a) {
	    this.z = a;return this;
	  }, setComponent: function setComponent(a, b) {
	    switch (a) {case 0:
	        this.x = b;break;case 1:
	        this.y = b;break;case 2:
	        this.z = b;break;default:
	        throw Error("index is out of range: " + a);}
	  }, getComponent: function getComponent(a) {
	    switch (a) {case 0:
	        return this.x;case 1:
	        return this.y;case 2:
	        return this.z;default:
	        throw Error("index is out of range: " + a);}
	  }, clone: function clone() {
	    return new this.constructor(this.x, this.y, this.z);
	  }, copy: function copy(a) {
	    this.x = a.x;this.y = a.y;this.z = a.z;return this;
	  }, add: function add(a, b) {
	    if (void 0 !== b) return console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(a, b);this.x += a.x;this.y += a.y;this.z += a.z;return this;
	  }, addScalar: function addScalar(a) {
	    this.x += a;this.y += a;this.z += a;return this;
	  }, addVectors: function addVectors(a, b) {
	    this.x = a.x + b.x;this.y = a.y + b.y;this.z = a.z + b.z;return this;
	  }, addScaledVector: function addScaledVector(a, b) {
	    this.x += a.x * b;this.y += a.y * b;this.z += a.z * b;return this;
	  }, sub: function sub(a, b) {
	    if (void 0 !== b) return console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(a, b);this.x -= a.x;this.y -= a.y;this.z -= a.z;return this;
	  }, subScalar: function subScalar(a) {
	    this.x -= a;this.y -= a;this.z -= a;return this;
	  }, subVectors: function subVectors(a, b) {
	    this.x = a.x - b.x;this.y = a.y - b.y;this.z = a.z - b.z;return this;
	  }, multiply: function multiply(a, b) {
	    if (void 0 !== b) return console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."), this.multiplyVectors(a, b);this.x *= a.x;this.y *= a.y;this.z *= a.z;return this;
	  }, multiplyScalar: function multiplyScalar(a) {
	    isFinite(a) ? (this.x *= a, this.y *= a, this.z *= a) : this.z = this.y = this.x = 0;return this;
	  }, multiplyVectors: function multiplyVectors(a, b) {
	    this.x = a.x * b.x;this.y = a.y * b.y;this.z = a.z * b.z;return this;
	  }, applyEuler: function () {
	    var a;return function (b) {
	      !1 === b instanceof THREE.Euler && console.error("THREE.Vector3: .applyEuler() now expects a Euler rotation rather than a Vector3 and order.");void 0 === a && (a = new THREE.Quaternion());this.applyQuaternion(a.setFromEuler(b));
	      return this;
	    };
	  }(), applyAxisAngle: function () {
	    var a;return function (b, c) {
	      void 0 === a && (a = new THREE.Quaternion());this.applyQuaternion(a.setFromAxisAngle(b, c));return this;
	    };
	  }(), applyMatrix3: function applyMatrix3(a) {
	    var b = this.x,
	        c = this.y,
	        d = this.z;a = a.elements;this.x = a[0] * b + a[3] * c + a[6] * d;this.y = a[1] * b + a[4] * c + a[7] * d;this.z = a[2] * b + a[5] * c + a[8] * d;return this;
	  }, applyMatrix4: function applyMatrix4(a) {
	    var b = this.x,
	        c = this.y,
	        d = this.z;a = a.elements;this.x = a[0] * b + a[4] * c + a[8] * d + a[12];this.y = a[1] * b + a[5] * c + a[9] * d + a[13];this.z = a[2] * b + a[6] * c + a[10] * d + a[14];
	    return this;
	  }, applyProjection: function applyProjection(a) {
	    var b = this.x,
	        c = this.y,
	        d = this.z;a = a.elements;var e = 1 / (a[3] * b + a[7] * c + a[11] * d + a[15]);this.x = (a[0] * b + a[4] * c + a[8] * d + a[12]) * e;this.y = (a[1] * b + a[5] * c + a[9] * d + a[13]) * e;this.z = (a[2] * b + a[6] * c + a[10] * d + a[14]) * e;return this;
	  }, applyQuaternion: function applyQuaternion(a) {
	    var b = this.x,
	        c = this.y,
	        d = this.z,
	        e = a.x,
	        g = a.y,
	        f = a.z;a = a.w;var h = a * b + g * d - f * c,
	        l = a * c + f * b - e * d,
	        k = a * d + e * c - g * b,
	        b = -e * b - g * c - f * d;this.x = h * a + b * -e + l * -f - k * -g;this.y = l * a + b * -g + k * -e - h * -f;this.z = k * a + b * -f + h * -g - l * -e;return this;
	  }, project: function () {
	    var a;
	    return function (b) {
	      void 0 === a && (a = new THREE.Matrix4());a.multiplyMatrices(b.projectionMatrix, a.getInverse(b.matrixWorld));return this.applyProjection(a);
	    };
	  }(), unproject: function () {
	    var a;return function (b) {
	      void 0 === a && (a = new THREE.Matrix4());a.multiplyMatrices(b.matrixWorld, a.getInverse(b.projectionMatrix));return this.applyProjection(a);
	    };
	  }(), transformDirection: function transformDirection(a) {
	    var b = this.x,
	        c = this.y,
	        d = this.z;a = a.elements;this.x = a[0] * b + a[4] * c + a[8] * d;this.y = a[1] * b + a[5] * c + a[9] * d;this.z = a[2] * b + a[6] * c + a[10] * d;this.normalize();
	    return this;
	  }, divide: function divide(a) {
	    this.x /= a.x;this.y /= a.y;this.z /= a.z;return this;
	  }, divideScalar: function divideScalar(a) {
	    return this.multiplyScalar(1 / a);
	  }, min: function min(a) {
	    this.x = Math.min(this.x, a.x);this.y = Math.min(this.y, a.y);this.z = Math.min(this.z, a.z);return this;
	  }, max: function max(a) {
	    this.x = Math.max(this.x, a.x);this.y = Math.max(this.y, a.y);this.z = Math.max(this.z, a.z);return this;
	  }, clamp: function clamp(a, b) {
	    this.x = Math.max(a.x, Math.min(b.x, this.x));this.y = Math.max(a.y, Math.min(b.y, this.y));this.z = Math.max(a.z, Math.min(b.z, this.z));return this;
	  }, clampScalar: function () {
	    var a, b;return function (c, d) {
	      void 0 === a && (a = new THREE.Vector3(), b = new THREE.Vector3());a.set(c, c, c);b.set(d, d, d);return this.clamp(a, b);
	    };
	  }(), clampLength: function clampLength(a, b) {
	    var c = this.length();this.multiplyScalar(Math.max(a, Math.min(b, c)) / c);return this;
	  }, floor: function floor() {
	    this.x = Math.floor(this.x);this.y = Math.floor(this.y);this.z = Math.floor(this.z);return this;
	  }, ceil: function ceil() {
	    this.x = Math.ceil(this.x);this.y = Math.ceil(this.y);this.z = Math.ceil(this.z);return this;
	  },
	  round: function round() {
	    this.x = Math.round(this.x);this.y = Math.round(this.y);this.z = Math.round(this.z);return this;
	  }, roundToZero: function roundToZero() {
	    this.x = 0 > this.x ? Math.ceil(this.x) : Math.floor(this.x);this.y = 0 > this.y ? Math.ceil(this.y) : Math.floor(this.y);this.z = 0 > this.z ? Math.ceil(this.z) : Math.floor(this.z);return this;
	  }, negate: function negate() {
	    this.x = -this.x;this.y = -this.y;this.z = -this.z;return this;
	  }, dot: function dot(a) {
	    return this.x * a.x + this.y * a.y + this.z * a.z;
	  }, lengthSq: function lengthSq() {
	    return this.x * this.x + this.y * this.y + this.z * this.z;
	  },
	  length: function length() {
	    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	  }, lengthManhattan: function lengthManhattan() {
	    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
	  }, normalize: function normalize() {
	    return this.divideScalar(this.length());
	  }, setLength: function setLength(a) {
	    return this.multiplyScalar(a / this.length());
	  }, lerp: function lerp(a, b) {
	    this.x += (a.x - this.x) * b;this.y += (a.y - this.y) * b;this.z += (a.z - this.z) * b;return this;
	  }, lerpVectors: function lerpVectors(a, b, c) {
	    this.subVectors(b, a).multiplyScalar(c).add(a);return this;
	  }, cross: function cross(a, b) {
	    if (void 0 !== b) return console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."), this.crossVectors(a, b);var c = this.x,
	        d = this.y,
	        e = this.z;this.x = d * a.z - e * a.y;this.y = e * a.x - c * a.z;this.z = c * a.y - d * a.x;return this;
	  }, crossVectors: function crossVectors(a, b) {
	    var c = a.x,
	        d = a.y,
	        e = a.z,
	        g = b.x,
	        f = b.y,
	        h = b.z;this.x = d * h - e * f;this.y = e * g - c * h;this.z = c * f - d * g;return this;
	  }, projectOnVector: function () {
	    var a, b;return function (c) {
	      void 0 === a && (a = new THREE.Vector3());a.copy(c).normalize();b = this.dot(a);return this.copy(a).multiplyScalar(b);
	    };
	  }(),
	  projectOnPlane: function () {
	    var a;return function (b) {
	      void 0 === a && (a = new THREE.Vector3());a.copy(this).projectOnVector(b);return this.sub(a);
	    };
	  }(), reflect: function () {
	    var a;return function (b) {
	      void 0 === a && (a = new THREE.Vector3());return this.sub(a.copy(b).multiplyScalar(2 * this.dot(b)));
	    };
	  }(), angleTo: function angleTo(a) {
	    a = this.dot(a) / (this.length() * a.length());return Math.acos(THREE.Math.clamp(a, -1, 1));
	  }, distanceTo: function distanceTo(a) {
	    return Math.sqrt(this.distanceToSquared(a));
	  }, distanceToSquared: function distanceToSquared(a) {
	    var b = this.x - a.x,
	        c = this.y - a.y;a = this.z - a.z;return b * b + c * c + a * a;
	  }, setEulerFromRotationMatrix: function setEulerFromRotationMatrix(a, b) {
	    console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.");
	  }, setEulerFromQuaternion: function setEulerFromQuaternion(a, b) {
	    console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.");
	  }, getPositionFromMatrix: function getPositionFromMatrix(a) {
	    console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().");return this.setFromMatrixPosition(a);
	  },
	  getScaleFromMatrix: function getScaleFromMatrix(a) {
	    console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().");return this.setFromMatrixScale(a);
	  }, getColumnFromMatrix: function getColumnFromMatrix(a, b) {
	    console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().");return this.setFromMatrixColumn(a, b);
	  }, setFromMatrixPosition: function setFromMatrixPosition(a) {
	    this.x = a.elements[12];this.y = a.elements[13];this.z = a.elements[14];return this;
	  }, setFromMatrixScale: function setFromMatrixScale(a) {
	    var b = this.set(a.elements[0], a.elements[1], a.elements[2]).length(),
	        c = this.set(a.elements[4], a.elements[5], a.elements[6]).length();a = this.set(a.elements[8], a.elements[9], a.elements[10]).length();this.x = b;this.y = c;this.z = a;return this;
	  }, setFromMatrixColumn: function setFromMatrixColumn(a, b) {
	    var c = 4 * a,
	        d = b.elements;this.x = d[c];this.y = d[c + 1];this.z = d[c + 2];return this;
	  }, equals: function equals(a) {
	    return a.x === this.x && a.y === this.y && a.z === this.z;
	  }, fromArray: function fromArray(a, b) {
	    void 0 === b && (b = 0);this.x = a[b];this.y = a[b + 1];this.z = a[b + 2];return this;
	  }, toArray: function toArray(a, b) {
	    void 0 === a && (a = []);void 0 === b && (b = 0);a[b] = this.x;a[b + 1] = this.y;a[b + 2] = this.z;return a;
	  }, fromAttribute: function fromAttribute(a, b, c) {
	    void 0 === c && (c = 0);b = b * a.itemSize + c;this.x = a.array[b];this.y = a.array[b + 1];this.z = a.array[b + 2];return this;
	  } };THREE.Vector4 = function (a, b, c, d) {
	  this.x = a || 0;this.y = b || 0;this.z = c || 0;this.w = void 0 !== d ? d : 1;
	};
	THREE.Vector4.prototype = { constructor: THREE.Vector4, set: function set(a, b, c, d) {
	    this.x = a;this.y = b;this.z = c;this.w = d;return this;
	  }, setX: function setX(a) {
	    this.x = a;return this;
	  }, setY: function setY(a) {
	    this.y = a;return this;
	  }, setZ: function setZ(a) {
	    this.z = a;return this;
	  }, setW: function setW(a) {
	    this.w = a;return this;
	  }, setComponent: function setComponent(a, b) {
	    switch (a) {case 0:
	        this.x = b;break;case 1:
	        this.y = b;break;case 2:
	        this.z = b;break;case 3:
	        this.w = b;break;default:
	        throw Error("index is out of range: " + a);}
	  }, getComponent: function getComponent(a) {
	    switch (a) {case 0:
	        return this.x;
	      case 1:
	        return this.y;case 2:
	        return this.z;case 3:
	        return this.w;default:
	        throw Error("index is out of range: " + a);}
	  }, clone: function clone() {
	    return new this.constructor(this.x, this.y, this.z, this.w);
	  }, copy: function copy(a) {
	    this.x = a.x;this.y = a.y;this.z = a.z;this.w = void 0 !== a.w ? a.w : 1;return this;
	  }, add: function add(a, b) {
	    if (void 0 !== b) return console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(a, b);this.x += a.x;this.y += a.y;this.z += a.z;this.w += a.w;return this;
	  },
	  addScalar: function addScalar(a) {
	    this.x += a;this.y += a;this.z += a;this.w += a;return this;
	  }, addVectors: function addVectors(a, b) {
	    this.x = a.x + b.x;this.y = a.y + b.y;this.z = a.z + b.z;this.w = a.w + b.w;return this;
	  }, addScaledVector: function addScaledVector(a, b) {
	    this.x += a.x * b;this.y += a.y * b;this.z += a.z * b;this.w += a.w * b;return this;
	  }, sub: function sub(a, b) {
	    if (void 0 !== b) return console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(a, b);this.x -= a.x;this.y -= a.y;this.z -= a.z;this.w -= a.w;return this;
	  }, subScalar: function subScalar(a) {
	    this.x -= a;this.y -= a;this.z -= a;this.w -= a;return this;
	  }, subVectors: function subVectors(a, b) {
	    this.x = a.x - b.x;this.y = a.y - b.y;this.z = a.z - b.z;this.w = a.w - b.w;return this;
	  }, multiplyScalar: function multiplyScalar(a) {
	    isFinite(a) ? (this.x *= a, this.y *= a, this.z *= a, this.w *= a) : this.w = this.z = this.y = this.x = 0;return this;
	  }, applyMatrix4: function applyMatrix4(a) {
	    var b = this.x,
	        c = this.y,
	        d = this.z,
	        e = this.w;a = a.elements;this.x = a[0] * b + a[4] * c + a[8] * d + a[12] * e;this.y = a[1] * b + a[5] * c + a[9] * d + a[13] * e;this.z = a[2] * b + a[6] * c + a[10] * d + a[14] * e;this.w = a[3] * b + a[7] * c + a[11] * d + a[15] * e;return this;
	  },
	  divideScalar: function divideScalar(a) {
	    return this.multiplyScalar(1 / a);
	  }, setAxisAngleFromQuaternion: function setAxisAngleFromQuaternion(a) {
	    this.w = 2 * Math.acos(a.w);var b = Math.sqrt(1 - a.w * a.w);1E-4 > b ? (this.x = 1, this.z = this.y = 0) : (this.x = a.x / b, this.y = a.y / b, this.z = a.z / b);return this;
	  }, setAxisAngleFromRotationMatrix: function setAxisAngleFromRotationMatrix(a) {
	    var b, c, d;a = a.elements;var e = a[0];d = a[4];var g = a[8],
	        f = a[1],
	        h = a[5],
	        l = a[9];c = a[2];b = a[6];var k = a[10];if (.01 > Math.abs(d - f) && .01 > Math.abs(g - c) && .01 > Math.abs(l - b)) {
	      if (.1 > Math.abs(d + f) && .1 > Math.abs(g + c) && .1 > Math.abs(l + b) && .1 > Math.abs(e + h + k - 3)) return this.set(1, 0, 0, 0), this;a = Math.PI;e = (e + 1) / 2;h = (h + 1) / 2;k = (k + 1) / 2;d = (d + f) / 4;g = (g + c) / 4;l = (l + b) / 4;e > h && e > k ? .01 > e ? (b = 0, d = c = .707106781) : (b = Math.sqrt(e), c = d / b, d = g / b) : h > k ? .01 > h ? (b = .707106781, c = 0, d = .707106781) : (c = Math.sqrt(h), b = d / c, d = l / c) : .01 > k ? (c = b = .707106781, d = 0) : (d = Math.sqrt(k), b = g / d, c = l / d);this.set(b, c, d, a);return this;
	    }a = Math.sqrt((b - l) * (b - l) + (g - c) * (g - c) + (f - d) * (f - d));.001 > Math.abs(a) && (a = 1);this.x = (b - l) / a;this.y = (g - c) / a;this.z = (f - d) / a;this.w = Math.acos((e + h + k - 1) / 2);return this;
	  }, min: function min(a) {
	    this.x = Math.min(this.x, a.x);this.y = Math.min(this.y, a.y);this.z = Math.min(this.z, a.z);this.w = Math.min(this.w, a.w);return this;
	  }, max: function max(a) {
	    this.x = Math.max(this.x, a.x);this.y = Math.max(this.y, a.y);this.z = Math.max(this.z, a.z);this.w = Math.max(this.w, a.w);return this;
	  }, clamp: function clamp(a, b) {
	    this.x = Math.max(a.x, Math.min(b.x, this.x));this.y = Math.max(a.y, Math.min(b.y, this.y));this.z = Math.max(a.z, Math.min(b.z, this.z));this.w = Math.max(a.w, Math.min(b.w, this.w));return this;
	  }, clampScalar: function () {
	    var a, b;return function (c, d) {
	      void 0 === a && (a = new THREE.Vector4(), b = new THREE.Vector4());a.set(c, c, c, c);b.set(d, d, d, d);return this.clamp(a, b);
	    };
	  }(), floor: function floor() {
	    this.x = Math.floor(this.x);this.y = Math.floor(this.y);this.z = Math.floor(this.z);this.w = Math.floor(this.w);return this;
	  }, ceil: function ceil() {
	    this.x = Math.ceil(this.x);this.y = Math.ceil(this.y);this.z = Math.ceil(this.z);this.w = Math.ceil(this.w);return this;
	  }, round: function round() {
	    this.x = Math.round(this.x);this.y = Math.round(this.y);this.z = Math.round(this.z);this.w = Math.round(this.w);return this;
	  },
	  roundToZero: function roundToZero() {
	    this.x = 0 > this.x ? Math.ceil(this.x) : Math.floor(this.x);this.y = 0 > this.y ? Math.ceil(this.y) : Math.floor(this.y);this.z = 0 > this.z ? Math.ceil(this.z) : Math.floor(this.z);this.w = 0 > this.w ? Math.ceil(this.w) : Math.floor(this.w);return this;
	  }, negate: function negate() {
	    this.x = -this.x;this.y = -this.y;this.z = -this.z;this.w = -this.w;return this;
	  }, dot: function dot(a) {
	    return this.x * a.x + this.y * a.y + this.z * a.z + this.w * a.w;
	  }, lengthSq: function lengthSq() {
	    return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
	  }, length: function length() {
	    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
	  }, lengthManhattan: function lengthManhattan() {
	    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
	  }, normalize: function normalize() {
	    return this.divideScalar(this.length());
	  }, setLength: function setLength(a) {
	    return this.multiplyScalar(a / this.length());
	  }, lerp: function lerp(a, b) {
	    this.x += (a.x - this.x) * b;this.y += (a.y - this.y) * b;this.z += (a.z - this.z) * b;this.w += (a.w - this.w) * b;return this;
	  }, lerpVectors: function lerpVectors(a, b, c) {
	    this.subVectors(b, a).multiplyScalar(c).add(a);return this;
	  }, equals: function equals(a) {
	    return a.x === this.x && a.y === this.y && a.z === this.z && a.w === this.w;
	  }, fromArray: function fromArray(a, b) {
	    void 0 === b && (b = 0);this.x = a[b];this.y = a[b + 1];this.z = a[b + 2];this.w = a[b + 3];return this;
	  }, toArray: function toArray(a, b) {
	    void 0 === a && (a = []);void 0 === b && (b = 0);a[b] = this.x;a[b + 1] = this.y;a[b + 2] = this.z;a[b + 3] = this.w;return a;
	  }, fromAttribute: function fromAttribute(a, b, c) {
	    void 0 === c && (c = 0);b = b * a.itemSize + c;this.x = a.array[b];this.y = a.array[b + 1];this.z = a.array[b + 2];this.w = a.array[b + 3];return this;
	  } };
	THREE.Euler = function (a, b, c, d) {
	  this._x = a || 0;this._y = b || 0;this._z = c || 0;this._order = d || THREE.Euler.DefaultOrder;
	};THREE.Euler.RotationOrders = "XYZ YZX ZXY XZY YXZ ZYX".split(" ");THREE.Euler.DefaultOrder = "XYZ";
	THREE.Euler.prototype = { constructor: THREE.Euler, get x() {
	    return this._x;
	  }, set x(a) {
	    this._x = a;this.onChangeCallback();
	  }, get y() {
	    return this._y;
	  }, set y(a) {
	    this._y = a;this.onChangeCallback();
	  }, get z() {
	    return this._z;
	  }, set z(a) {
	    this._z = a;this.onChangeCallback();
	  }, get order() {
	    return this._order;
	  }, set order(a) {
	    this._order = a;this.onChangeCallback();
	  }, set: function set(a, b, c, d) {
	    this._x = a;this._y = b;this._z = c;this._order = d || this._order;this.onChangeCallback();return this;
	  }, clone: function clone() {
	    return new this.constructor(this._x, this._y, this._z, this._order);
	  }, copy: function copy(a) {
	    this._x = a._x;this._y = a._y;this._z = a._z;this._order = a._order;this.onChangeCallback();return this;
	  }, setFromRotationMatrix: function setFromRotationMatrix(a, b, c) {
	    var d = THREE.Math.clamp,
	        e = a.elements;a = e[0];var g = e[4],
	        f = e[8],
	        h = e[1],
	        l = e[5],
	        k = e[9],
	        m = e[2],
	        p = e[6],
	        e = e[10];b = b || this._order;"XYZ" === b ? (this._y = Math.asin(d(f, -1, 1)), .99999 > Math.abs(f) ? (this._x = Math.atan2(-k, e), this._z = Math.atan2(-g, a)) : (this._x = Math.atan2(p, l), this._z = 0)) : "YXZ" === b ? (this._x = Math.asin(-d(k, -1, 1)), .99999 > Math.abs(k) ? (this._y = Math.atan2(f, e), this._z = Math.atan2(h, l)) : (this._y = Math.atan2(-m, a), this._z = 0)) : "ZXY" === b ? (this._x = Math.asin(d(p, -1, 1)), .99999 > Math.abs(p) ? (this._y = Math.atan2(-m, e), this._z = Math.atan2(-g, l)) : (this._y = 0, this._z = Math.atan2(h, a))) : "ZYX" === b ? (this._y = Math.asin(-d(m, -1, 1)), .99999 > Math.abs(m) ? (this._x = Math.atan2(p, e), this._z = Math.atan2(h, a)) : (this._x = 0, this._z = Math.atan2(-g, l))) : "YZX" === b ? (this._z = Math.asin(d(h, -1, 1)), .99999 > Math.abs(h) ? (this._x = Math.atan2(-k, l), this._y = Math.atan2(-m, a)) : (this._x = 0, this._y = Math.atan2(f, e))) : "XZY" === b ? (this._z = Math.asin(-d(g, -1, 1)), .99999 > Math.abs(g) ? (this._x = Math.atan2(p, l), this._y = Math.atan2(f, a)) : (this._x = Math.atan2(-k, e), this._y = 0)) : console.warn("THREE.Euler: .setFromRotationMatrix() given unsupported order: " + b);this._order = b;if (!1 !== c) this.onChangeCallback();return this;
	  }, setFromQuaternion: function () {
	    var a;return function (b, c, d) {
	      void 0 === a && (a = new THREE.Matrix4());a.makeRotationFromQuaternion(b);this.setFromRotationMatrix(a, c, d);return this;
	    };
	  }(), setFromVector3: function setFromVector3(a, b) {
	    return this.set(a.x, a.y, a.z, b || this._order);
	  }, reorder: function () {
	    var a = new THREE.Quaternion();return function (b) {
	      a.setFromEuler(this);this.setFromQuaternion(a, b);
	    };
	  }(), equals: function equals(a) {
	    return a._x === this._x && a._y === this._y && a._z === this._z && a._order === this._order;
	  }, fromArray: function fromArray(a) {
	    this._x = a[0];this._y = a[1];this._z = a[2];void 0 !== a[3] && (this._order = a[3]);this.onChangeCallback();return this;
	  }, toArray: function toArray(a, b) {
	    void 0 === a && (a = []);void 0 === b && (b = 0);a[b] = this._x;a[b + 1] = this._y;a[b + 2] = this._z;a[b + 3] = this._order;return a;
	  }, toVector3: function toVector3(a) {
	    return a ? a.set(this._x, this._y, this._z) : new THREE.Vector3(this._x, this._y, this._z);
	  }, onChange: function onChange(a) {
	    this.onChangeCallback = a;return this;
	  }, onChangeCallback: function onChangeCallback() {} };THREE.Line3 = function (a, b) {
	  this.start = void 0 !== a ? a : new THREE.Vector3();this.end = void 0 !== b ? b : new THREE.Vector3();
	};
	THREE.Line3.prototype = { constructor: THREE.Line3, set: function set(a, b) {
	    this.start.copy(a);this.end.copy(b);return this;
	  }, clone: function clone() {
	    return new this.constructor().copy(this);
	  }, copy: function copy(a) {
	    this.start.copy(a.start);this.end.copy(a.end);return this;
	  }, center: function center(a) {
	    return (a || new THREE.Vector3()).addVectors(this.start, this.end).multiplyScalar(.5);
	  }, delta: function delta(a) {
	    return (a || new THREE.Vector3()).subVectors(this.end, this.start);
	  }, distanceSq: function distanceSq() {
	    return this.start.distanceToSquared(this.end);
	  }, distance: function distance() {
	    return this.start.distanceTo(this.end);
	  },
	  at: function at(a, b) {
	    var c = b || new THREE.Vector3();return this.delta(c).multiplyScalar(a).add(this.start);
	  }, closestPointToPointParameter: function () {
	    var a = new THREE.Vector3(),
	        b = new THREE.Vector3();return function (c, d) {
	      a.subVectors(c, this.start);b.subVectors(this.end, this.start);var e = b.dot(b),
	          e = b.dot(a) / e;d && (e = THREE.Math.clamp(e, 0, 1));return e;
	    };
	  }(), closestPointToPoint: function closestPointToPoint(a, b, c) {
	    a = this.closestPointToPointParameter(a, b);c = c || new THREE.Vector3();return this.delta(c).multiplyScalar(a).add(this.start);
	  }, applyMatrix4: function applyMatrix4(a) {
	    this.start.applyMatrix4(a);
	    this.end.applyMatrix4(a);return this;
	  }, equals: function equals(a) {
	    return a.start.equals(this.start) && a.end.equals(this.end);
	  } };THREE.Box2 = function (a, b) {
	  this.min = void 0 !== a ? a : new THREE.Vector2(Infinity, Infinity);this.max = void 0 !== b ? b : new THREE.Vector2(-Infinity, -Infinity);
	};
	THREE.Box2.prototype = { constructor: THREE.Box2, set: function set(a, b) {
	    this.min.copy(a);this.max.copy(b);return this;
	  }, setFromPoints: function setFromPoints(a) {
	    this.makeEmpty();for (var b = 0, c = a.length; b < c; b++) {
	      this.expandByPoint(a[b]);
	    }return this;
	  }, setFromCenterAndSize: function () {
	    var a = new THREE.Vector2();return function (b, c) {
	      var d = a.copy(c).multiplyScalar(.5);this.min.copy(b).sub(d);this.max.copy(b).add(d);return this;
	    };
	  }(), clone: function clone() {
	    return new this.constructor().copy(this);
	  }, copy: function copy(a) {
	    this.min.copy(a.min);this.max.copy(a.max);
	    return this;
	  }, makeEmpty: function makeEmpty() {
	    this.min.x = this.min.y = Infinity;this.max.x = this.max.y = -Infinity;return this;
	  }, empty: function empty() {
	    return this.max.x < this.min.x || this.max.y < this.min.y;
	  }, center: function center(a) {
	    return (a || new THREE.Vector2()).addVectors(this.min, this.max).multiplyScalar(.5);
	  }, size: function size(a) {
	    return (a || new THREE.Vector2()).subVectors(this.max, this.min);
	  }, expandByPoint: function expandByPoint(a) {
	    this.min.min(a);this.max.max(a);return this;
	  }, expandByVector: function expandByVector(a) {
	    this.min.sub(a);this.max.add(a);return this;
	  }, expandByScalar: function expandByScalar(a) {
	    this.min.addScalar(-a);
	    this.max.addScalar(a);return this;
	  }, containsPoint: function containsPoint(a) {
	    return a.x < this.min.x || a.x > this.max.x || a.y < this.min.y || a.y > this.max.y ? !1 : !0;
	  }, containsBox: function containsBox(a) {
	    return this.min.x <= a.min.x && a.max.x <= this.max.x && this.min.y <= a.min.y && a.max.y <= this.max.y ? !0 : !1;
	  }, getParameter: function getParameter(a, b) {
	    return (b || new THREE.Vector2()).set((a.x - this.min.x) / (this.max.x - this.min.x), (a.y - this.min.y) / (this.max.y - this.min.y));
	  }, isIntersectionBox: function isIntersectionBox(a) {
	    return a.max.x < this.min.x || a.min.x > this.max.x || a.max.y < this.min.y || a.min.y > this.max.y ? !1 : !0;
	  }, clampPoint: function clampPoint(a, b) {
	    return (b || new THREE.Vector2()).copy(a).clamp(this.min, this.max);
	  }, distanceToPoint: function () {
	    var a = new THREE.Vector2();return function (b) {
	      return a.copy(b).clamp(this.min, this.max).sub(b).length();
	    };
	  }(), intersect: function intersect(a) {
	    this.min.max(a.min);this.max.min(a.max);return this;
	  }, union: function union(a) {
	    this.min.min(a.min);this.max.max(a.max);return this;
	  }, translate: function translate(a) {
	    this.min.add(a);this.max.add(a);return this;
	  }, equals: function equals(a) {
	    return a.min.equals(this.min) && a.max.equals(this.max);
	  } };THREE.Box3 = function (a, b) {
	  this.min = void 0 !== a ? a : new THREE.Vector3(Infinity, Infinity, Infinity);this.max = void 0 !== b ? b : new THREE.Vector3(-Infinity, -Infinity, -Infinity);
	};
	THREE.Box3.prototype = { constructor: THREE.Box3, set: function set(a, b) {
	    this.min.copy(a);this.max.copy(b);return this;
	  }, setFromPoints: function setFromPoints(a) {
	    this.makeEmpty();for (var b = 0, c = a.length; b < c; b++) {
	      this.expandByPoint(a[b]);
	    }return this;
	  }, setFromCenterAndSize: function () {
	    var a = new THREE.Vector3();return function (b, c) {
	      var d = a.copy(c).multiplyScalar(.5);this.min.copy(b).sub(d);this.max.copy(b).add(d);return this;
	    };
	  }(), setFromObject: function () {
	    var a = new THREE.Vector3();return function (b) {
	      var c = this;b.updateMatrixWorld(!0);
	      this.makeEmpty();b.traverse(function (b) {
	        var e = b.geometry;if (void 0 !== e) if (e instanceof THREE.Geometry) for (var g = e.vertices, e = 0, f = g.length; e < f; e++) {
	          a.copy(g[e]), a.applyMatrix4(b.matrixWorld), c.expandByPoint(a);
	        } else if (e instanceof THREE.BufferGeometry && void 0 !== e.attributes.position) for (g = e.attributes.position.array, e = 0, f = g.length; e < f; e += 3) {
	          a.set(g[e], g[e + 1], g[e + 2]), a.applyMatrix4(b.matrixWorld), c.expandByPoint(a);
	        }
	      });return this;
	    };
	  }(), clone: function clone() {
	    return new this.constructor().copy(this);
	  }, copy: function copy(a) {
	    this.min.copy(a.min);
	    this.max.copy(a.max);return this;
	  }, makeEmpty: function makeEmpty() {
	    this.min.x = this.min.y = this.min.z = Infinity;this.max.x = this.max.y = this.max.z = -Infinity;return this;
	  }, empty: function empty() {
	    return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
	  }, center: function center(a) {
	    return (a || new THREE.Vector3()).addVectors(this.min, this.max).multiplyScalar(.5);
	  }, size: function size(a) {
	    return (a || new THREE.Vector3()).subVectors(this.max, this.min);
	  }, expandByPoint: function expandByPoint(a) {
	    this.min.min(a);this.max.max(a);return this;
	  }, expandByVector: function expandByVector(a) {
	    this.min.sub(a);
	    this.max.add(a);return this;
	  }, expandByScalar: function expandByScalar(a) {
	    this.min.addScalar(-a);this.max.addScalar(a);return this;
	  }, containsPoint: function containsPoint(a) {
	    return a.x < this.min.x || a.x > this.max.x || a.y < this.min.y || a.y > this.max.y || a.z < this.min.z || a.z > this.max.z ? !1 : !0;
	  }, containsBox: function containsBox(a) {
	    return this.min.x <= a.min.x && a.max.x <= this.max.x && this.min.y <= a.min.y && a.max.y <= this.max.y && this.min.z <= a.min.z && a.max.z <= this.max.z ? !0 : !1;
	  }, getParameter: function getParameter(a, b) {
	    return (b || new THREE.Vector3()).set((a.x - this.min.x) / (this.max.x - this.min.x), (a.y - this.min.y) / (this.max.y - this.min.y), (a.z - this.min.z) / (this.max.z - this.min.z));
	  }, isIntersectionBox: function isIntersectionBox(a) {
	    return a.max.x < this.min.x || a.min.x > this.max.x || a.max.y < this.min.y || a.min.y > this.max.y || a.max.z < this.min.z || a.min.z > this.max.z ? !1 : !0;
	  }, clampPoint: function clampPoint(a, b) {
	    return (b || new THREE.Vector3()).copy(a).clamp(this.min, this.max);
	  }, distanceToPoint: function () {
	    var a = new THREE.Vector3();return function (b) {
	      return a.copy(b).clamp(this.min, this.max).sub(b).length();
	    };
	  }(), getBoundingSphere: function () {
	    var a = new THREE.Vector3();return function (b) {
	      b = b || new THREE.Sphere();b.center = this.center();b.radius = .5 * this.size(a).length();return b;
	    };
	  }(), intersect: function intersect(a) {
	    this.min.max(a.min);this.max.min(a.max);return this;
	  }, union: function union(a) {
	    this.min.min(a.min);this.max.max(a.max);return this;
	  }, applyMatrix4: function () {
	    var a = [new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3()];return function (b) {
	      a[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(b);a[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(b);a[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(b);a[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(b);a[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(b);a[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(b);a[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(b);a[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(b);this.makeEmpty();this.setFromPoints(a);return this;
	    };
	  }(), translate: function translate(a) {
	    this.min.add(a);
	    this.max.add(a);return this;
	  }, equals: function equals(a) {
	    return a.min.equals(this.min) && a.max.equals(this.max);
	  } };THREE.Matrix3 = function () {
	  this.elements = new Float32Array([1, 0, 0, 0, 1, 0, 0, 0, 1]);0 < arguments.length && console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.");
	};
	THREE.Matrix3.prototype = { constructor: THREE.Matrix3, set: function set(a, b, c, d, e, g, f, h, l) {
	    var k = this.elements;k[0] = a;k[3] = b;k[6] = c;k[1] = d;k[4] = e;k[7] = g;k[2] = f;k[5] = h;k[8] = l;return this;
	  }, identity: function identity() {
	    this.set(1, 0, 0, 0, 1, 0, 0, 0, 1);return this;
	  }, clone: function clone() {
	    return new this.constructor().fromArray(this.elements);
	  }, copy: function copy(a) {
	    a = a.elements;this.set(a[0], a[3], a[6], a[1], a[4], a[7], a[2], a[5], a[8]);return this;
	  }, multiplyVector3: function multiplyVector3(a) {
	    console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.");
	    return a.applyMatrix3(this);
	  }, multiplyVector3Array: function multiplyVector3Array(a) {
	    console.warn("THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.");return this.applyToVector3Array(a);
	  }, applyToVector3Array: function () {
	    var a;return function (b, c, d) {
	      void 0 === a && (a = new THREE.Vector3());void 0 === c && (c = 0);void 0 === d && (d = b.length);for (var e = 0; e < d; e += 3, c += 3) {
	        a.fromArray(b, c), a.applyMatrix3(this), a.toArray(b, c);
	      }return b;
	    };
	  }(), applyToBuffer: function () {
	    var a;return function (b, c, d) {
	      void 0 === a && (a = new THREE.Vector3());void 0 === c && (c = 0);void 0 === d && (d = b.length / b.itemSize);for (var e = 0; e < d; e++, c++) {
	        a.x = b.getX(c), a.y = b.getY(c), a.z = b.getZ(c), a.applyMatrix3(this), b.setXYZ(a.x, a.y, a.z);
	      }return b;
	    };
	  }(), multiplyScalar: function multiplyScalar(a) {
	    var b = this.elements;b[0] *= a;b[3] *= a;b[6] *= a;b[1] *= a;b[4] *= a;b[7] *= a;b[2] *= a;b[5] *= a;b[8] *= a;return this;
	  }, determinant: function determinant() {
	    var a = this.elements,
	        b = a[0],
	        c = a[1],
	        d = a[2],
	        e = a[3],
	        g = a[4],
	        f = a[5],
	        h = a[6],
	        l = a[7],
	        a = a[8];return b * g * a - b * f * l - c * e * a + c * f * h + d * e * l - d * g * h;
	  }, getInverse: function getInverse(a, b) {
	    var c = a.elements,
	        d = this.elements;d[0] = c[10] * c[5] - c[6] * c[9];d[1] = -c[10] * c[1] + c[2] * c[9];d[2] = c[6] * c[1] - c[2] * c[5];d[3] = -c[10] * c[4] + c[6] * c[8];d[4] = c[10] * c[0] - c[2] * c[8];d[5] = -c[6] * c[0] + c[2] * c[4];d[6] = c[9] * c[4] - c[5] * c[8];d[7] = -c[9] * c[0] + c[1] * c[8];d[8] = c[5] * c[0] - c[1] * c[4];c = c[0] * d[0] + c[1] * d[3] + c[2] * d[6];if (0 === c) {
	      if (b) throw Error("Matrix3.getInverse(): can't invert matrix, determinant is 0");console.warn("Matrix3.getInverse(): can't invert matrix, determinant is 0");this.identity();return this;
	    }this.multiplyScalar(1 / c);return this;
	  }, transpose: function transpose() {
	    var a,
	        b = this.elements;a = b[1];b[1] = b[3];b[3] = a;a = b[2];b[2] = b[6];b[6] = a;a = b[5];b[5] = b[7];b[7] = a;return this;
	  }, flattenToArrayOffset: function flattenToArrayOffset(a, b) {
	    var c = this.elements;a[b] = c[0];a[b + 1] = c[1];a[b + 2] = c[2];a[b + 3] = c[3];a[b + 4] = c[4];a[b + 5] = c[5];a[b + 6] = c[6];a[b + 7] = c[7];a[b + 8] = c[8];return a;
	  }, getNormalMatrix: function getNormalMatrix(a) {
	    this.getInverse(a).transpose();return this;
	  }, transposeIntoArray: function transposeIntoArray(a) {
	    var b = this.elements;a[0] = b[0];a[1] = b[3];a[2] = b[6];a[3] = b[1];a[4] = b[4];a[5] = b[7];a[6] = b[2];a[7] = b[5];a[8] = b[8];return this;
	  }, fromArray: function fromArray(a) {
	    this.elements.set(a);return this;
	  }, toArray: function toArray() {
	    var a = this.elements;return [a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]];
	  } };THREE.Matrix4 = function () {
	  this.elements = new Float32Array([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);0 < arguments.length && console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.");
	};
	THREE.Matrix4.prototype = { constructor: THREE.Matrix4, set: function set(a, b, c, d, e, g, f, h, l, k, m, p, n, q, s, t) {
	    var v = this.elements;v[0] = a;v[4] = b;v[8] = c;v[12] = d;v[1] = e;v[5] = g;v[9] = f;v[13] = h;v[2] = l;v[6] = k;v[10] = m;v[14] = p;v[3] = n;v[7] = q;v[11] = s;v[15] = t;return this;
	  }, identity: function identity() {
	    this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);return this;
	  }, clone: function clone() {
	    return new THREE.Matrix4().fromArray(this.elements);
	  }, copy: function copy(a) {
	    this.elements.set(a.elements);return this;
	  }, extractPosition: function extractPosition(a) {
	    console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().");
	    return this.copyPosition(a);
	  }, copyPosition: function copyPosition(a) {
	    var b = this.elements;a = a.elements;b[12] = a[12];b[13] = a[13];b[14] = a[14];return this;
	  }, extractBasis: function extractBasis(a, b, c) {
	    var d = this.elements;a.set(d[0], d[1], d[2]);b.set(d[4], d[5], d[6]);c.set(d[8], d[9], d[10]);return this;
	  }, makeBasis: function makeBasis(a, b, c) {
	    this.set(a.x, b.x, c.x, 0, a.y, b.y, c.y, 0, a.z, b.z, c.z, 0, 0, 0, 0, 1);return this;
	  }, extractRotation: function () {
	    var a;return function (b) {
	      void 0 === a && (a = new THREE.Vector3());var c = this.elements;b = b.elements;var d = 1 / a.set(b[0], b[1], b[2]).length(),
	          e = 1 / a.set(b[4], b[5], b[6]).length(),
	          g = 1 / a.set(b[8], b[9], b[10]).length();c[0] = b[0] * d;c[1] = b[1] * d;c[2] = b[2] * d;c[4] = b[4] * e;c[5] = b[5] * e;c[6] = b[6] * e;c[8] = b[8] * g;c[9] = b[9] * g;c[10] = b[10] * g;return this;
	    };
	  }(), makeRotationFromEuler: function makeRotationFromEuler(a) {
	    !1 === a instanceof THREE.Euler && console.error("THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");var b = this.elements,
	        c = a.x,
	        d = a.y,
	        e = a.z,
	        g = Math.cos(c),
	        c = Math.sin(c),
	        f = Math.cos(d),
	        d = Math.sin(d),
	        h = Math.cos(e),
	        e = Math.sin(e);if ("XYZ" === a.order) {
	      a = g * h;var l = g * e,
	          k = c * h,
	          m = c * e;b[0] = f * h;b[4] = -f * e;b[8] = d;b[1] = l + k * d;b[5] = a - m * d;b[9] = -c * f;b[2] = m - a * d;b[6] = k + l * d;b[10] = g * f;
	    } else "YXZ" === a.order ? (a = f * h, l = f * e, k = d * h, m = d * e, b[0] = a + m * c, b[4] = k * c - l, b[8] = g * d, b[1] = g * e, b[5] = g * h, b[9] = -c, b[2] = l * c - k, b[6] = m + a * c, b[10] = g * f) : "ZXY" === a.order ? (a = f * h, l = f * e, k = d * h, m = d * e, b[0] = a - m * c, b[4] = -g * e, b[8] = k + l * c, b[1] = l + k * c, b[5] = g * h, b[9] = m - a * c, b[2] = -g * d, b[6] = c, b[10] = g * f) : "ZYX" === a.order ? (a = g * h, l = g * e, k = c * h, m = c * e, b[0] = f * h, b[4] = k * d - l, b[8] = a * d + m, b[1] = f * e, b[5] = m * d + a, b[9] = l * d - k, b[2] = -d, b[6] = c * f, b[10] = g * f) : "YZX" === a.order ? (a = g * f, l = g * d, k = c * f, m = c * d, b[0] = f * h, b[4] = m - a * e, b[8] = k * e + l, b[1] = e, b[5] = g * h, b[9] = -c * h, b[2] = -d * h, b[6] = l * e + k, b[10] = a - m * e) : "XZY" === a.order && (a = g * f, l = g * d, k = c * f, m = c * d, b[0] = f * h, b[4] = -e, b[8] = d * h, b[1] = a * e + m, b[5] = g * h, b[9] = l * e - k, b[2] = k * e - l, b[6] = c * h, b[10] = m * e + a);b[3] = 0;b[7] = 0;b[11] = 0;b[12] = 0;b[13] = 0;b[14] = 0;b[15] = 1;return this;
	  }, setRotationFromQuaternion: function setRotationFromQuaternion(a) {
	    console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().");
	    return this.makeRotationFromQuaternion(a);
	  }, makeRotationFromQuaternion: function makeRotationFromQuaternion(a) {
	    var b = this.elements,
	        c = a.x,
	        d = a.y,
	        e = a.z,
	        g = a.w,
	        f = c + c,
	        h = d + d,
	        l = e + e;a = c * f;var k = c * h,
	        c = c * l,
	        m = d * h,
	        d = d * l,
	        e = e * l,
	        f = g * f,
	        h = g * h,
	        g = g * l;b[0] = 1 - (m + e);b[4] = k - g;b[8] = c + h;b[1] = k + g;b[5] = 1 - (a + e);b[9] = d - f;b[2] = c - h;b[6] = d + f;b[10] = 1 - (a + m);b[3] = 0;b[7] = 0;b[11] = 0;b[12] = 0;b[13] = 0;b[14] = 0;b[15] = 1;return this;
	  }, lookAt: function () {
	    var a, b, c;return function (d, e, g) {
	      void 0 === a && (a = new THREE.Vector3());void 0 === b && (b = new THREE.Vector3());void 0 === c && (c = new THREE.Vector3());
	      var f = this.elements;c.subVectors(d, e).normalize();0 === c.lengthSq() && (c.z = 1);a.crossVectors(g, c).normalize();0 === a.lengthSq() && (c.x += 1E-4, a.crossVectors(g, c).normalize());b.crossVectors(c, a);f[0] = a.x;f[4] = b.x;f[8] = c.x;f[1] = a.y;f[5] = b.y;f[9] = c.y;f[2] = a.z;f[6] = b.z;f[10] = c.z;return this;
	    };
	  }(), multiply: function multiply(a, b) {
	    return void 0 !== b ? (console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."), this.multiplyMatrices(a, b)) : this.multiplyMatrices(this, a);
	  },
	  multiplyMatrices: function multiplyMatrices(a, b) {
	    var c = a.elements,
	        d = b.elements,
	        e = this.elements,
	        g = c[0],
	        f = c[4],
	        h = c[8],
	        l = c[12],
	        k = c[1],
	        m = c[5],
	        p = c[9],
	        n = c[13],
	        q = c[2],
	        s = c[6],
	        t = c[10],
	        v = c[14],
	        u = c[3],
	        w = c[7],
	        D = c[11],
	        c = c[15],
	        x = d[0],
	        B = d[4],
	        y = d[8],
	        z = d[12],
	        A = d[1],
	        J = d[5],
	        F = d[9],
	        C = d[13],
	        N = d[2],
	        L = d[6],
	        Q = d[10],
	        M = d[14],
	        K = d[3],
	        E = d[7],
	        O = d[11],
	        d = d[15];e[0] = g * x + f * A + h * N + l * K;e[4] = g * B + f * J + h * L + l * E;e[8] = g * y + f * F + h * Q + l * O;e[12] = g * z + f * C + h * M + l * d;e[1] = k * x + m * A + p * N + n * K;e[5] = k * B + m * J + p * L + n * E;e[9] = k * y + m * F + p * Q + n * O;e[13] = k * z + m * C + p * M + n * d;e[2] = q * x + s * A + t * N + v * K;e[6] = q * B + s * J + t * L + v * E;e[10] = q * y + s * F + t * Q + v * O;e[14] = q * z + s * C + t * M + v * d;e[3] = u * x + w * A + D * N + c * K;e[7] = u * B + w * J + D * L + c * E;e[11] = u * y + w * F + D * Q + c * O;e[15] = u * z + w * C + D * M + c * d;return this;
	  }, multiplyToArray: function multiplyToArray(a, b, c) {
	    var d = this.elements;this.multiplyMatrices(a, b);c[0] = d[0];c[1] = d[1];c[2] = d[2];c[3] = d[3];c[4] = d[4];c[5] = d[5];c[6] = d[6];c[7] = d[7];c[8] = d[8];c[9] = d[9];c[10] = d[10];c[11] = d[11];c[12] = d[12];c[13] = d[13];c[14] = d[14];c[15] = d[15];return this;
	  }, multiplyScalar: function multiplyScalar(a) {
	    var b = this.elements;b[0] *= a;b[4] *= a;b[8] *= a;
	    b[12] *= a;b[1] *= a;b[5] *= a;b[9] *= a;b[13] *= a;b[2] *= a;b[6] *= a;b[10] *= a;b[14] *= a;b[3] *= a;b[7] *= a;b[11] *= a;b[15] *= a;return this;
	  }, multiplyVector3: function multiplyVector3(a) {
	    console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.");return a.applyProjection(this);
	  }, multiplyVector4: function multiplyVector4(a) {
	    console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.");return a.applyMatrix4(this);
	  }, multiplyVector3Array: function multiplyVector3Array(a) {
	    console.warn("THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.");
	    return this.applyToVector3Array(a);
	  }, applyToVector3Array: function () {
	    var a;return function (b, c, d) {
	      void 0 === a && (a = new THREE.Vector3());void 0 === c && (c = 0);void 0 === d && (d = b.length);for (var e = 0; e < d; e += 3, c += 3) {
	        a.fromArray(b, c), a.applyMatrix4(this), a.toArray(b, c);
	      }return b;
	    };
	  }(), applyToBuffer: function () {
	    var a;return function (b, c, d) {
	      void 0 === a && (a = new THREE.Vector3());void 0 === c && (c = 0);void 0 === d && (d = b.length / b.itemSize);for (var e = 0; e < d; e++, c++) {
	        a.x = b.getX(c), a.y = b.getY(c), a.z = b.getZ(c), a.applyMatrix4(this), b.setXYZ(a.x, a.y, a.z);
	      }return b;
	    };
	  }(), rotateAxis: function rotateAxis(a) {
	    console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.");a.transformDirection(this);
	  }, crossVector: function crossVector(a) {
	    console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.");return a.applyMatrix4(this);
	  }, determinant: function determinant() {
	    var a = this.elements,
	        b = a[0],
	        c = a[4],
	        d = a[8],
	        e = a[12],
	        g = a[1],
	        f = a[5],
	        h = a[9],
	        l = a[13],
	        k = a[2],
	        m = a[6],
	        p = a[10],
	        n = a[14];return a[3] * (+e * h * m - d * l * m - e * f * p + c * l * p + d * f * n - c * h * n) + a[7] * (+b * h * n - b * l * p + e * g * p - d * g * n + d * l * k - e * h * k) + a[11] * (+b * l * m - b * f * n - e * g * m + c * g * n + e * f * k - c * l * k) + a[15] * (-d * f * k - b * h * m + b * f * p + d * g * m - c * g * p + c * h * k);
	  }, transpose: function transpose() {
	    var a = this.elements,
	        b;b = a[1];a[1] = a[4];a[4] = b;b = a[2];a[2] = a[8];a[8] = b;b = a[6];a[6] = a[9];a[9] = b;b = a[3];a[3] = a[12];a[12] = b;b = a[7];a[7] = a[13];a[13] = b;b = a[11];a[11] = a[14];a[14] = b;return this;
	  }, flattenToArrayOffset: function flattenToArrayOffset(a, b) {
	    var c = this.elements;a[b] = c[0];a[b + 1] = c[1];a[b + 2] = c[2];a[b + 3] = c[3];a[b + 4] = c[4];a[b + 5] = c[5];a[b + 6] = c[6];a[b + 7] = c[7];a[b + 8] = c[8];a[b + 9] = c[9];a[b + 10] = c[10];a[b + 11] = c[11];a[b + 12] = c[12];a[b + 13] = c[13];a[b + 14] = c[14];a[b + 15] = c[15];return a;
	  }, getPosition: function () {
	    var a;return function () {
	      void 0 === a && (a = new THREE.Vector3());console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.");var b = this.elements;return a.set(b[12], b[13], b[14]);
	    };
	  }(), setPosition: function setPosition(a) {
	    var b = this.elements;b[12] = a.x;b[13] = a.y;b[14] = a.z;return this;
	  }, getInverse: function getInverse(a, b) {
	    var c = this.elements,
	        d = a.elements,
	        e = d[0],
	        g = d[4],
	        f = d[8],
	        h = d[12],
	        l = d[1],
	        k = d[5],
	        m = d[9],
	        p = d[13],
	        n = d[2],
	        q = d[6],
	        s = d[10],
	        t = d[14],
	        v = d[3],
	        u = d[7],
	        w = d[11],
	        d = d[15];c[0] = m * t * u - p * s * u + p * q * w - k * t * w - m * q * d + k * s * d;c[4] = h * s * u - f * t * u - h * q * w + g * t * w + f * q * d - g * s * d;c[8] = f * p * u - h * m * u + h * k * w - g * p * w - f * k * d + g * m * d;c[12] = h * m * q - f * p * q - h * k * s + g * p * s + f * k * t - g * m * t;c[1] = p * s * v - m * t * v - p * n * w + l * t * w + m * n * d - l * s * d;c[5] = f * t * v - h * s * v + h * n * w - e * t * w - f * n * d + e * s * d;c[9] = h * m * v - f * p * v - h * l * w + e * p * w + f * l * d - e * m * d;c[13] = f * p * n - h * m * n + h * l * s - e * p * s - f * l * t + e * m * t;c[2] = k * t * v - p * q * v + p * n * u - l * t * u - k * n * d + l * q * d;c[6] = h * q * v - g * t * v - h * n * u + e * t * u + g * n * d - e * q * d;c[10] = g * p * v - h * k * v + h * l * u - e * p * u - g * l * d + e * k * d;c[14] = h * k * n - g * p * n - h * l * q + e * p * q + g * l * t - e * k * t;c[3] = m * q * v - k * s * v - m * n * u + l * s * u + k * n * w - l * q * w;c[7] = g * s * v - f * q * v + f * n * u - e * s * u - g * n * w + e * q * w;c[11] = f * k * v - g * m * v - f * l * u + e * m * u + g * l * w - e * k * w;c[15] = g * m * n - f * k * n + f * l * q - e * m * q - g * l * s + e * k * s;c = e * c[0] + l * c[4] + n * c[8] + v * c[12];if (0 === c) {
	      if (b) throw Error("THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0");console.warn("THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0");
	      this.identity();return this;
	    }this.multiplyScalar(1 / c);return this;
	  }, translate: function translate(a) {
	    console.error("THREE.Matrix4: .translate() has been removed.");
	  }, rotateX: function rotateX(a) {
	    console.error("THREE.Matrix4: .rotateX() has been removed.");
	  }, rotateY: function rotateY(a) {
	    console.error("THREE.Matrix4: .rotateY() has been removed.");
	  }, rotateZ: function rotateZ(a) {
	    console.error("THREE.Matrix4: .rotateZ() has been removed.");
	  }, rotateByAxis: function rotateByAxis(a, b) {
	    console.error("THREE.Matrix4: .rotateByAxis() has been removed.");
	  }, scale: function scale(a) {
	    var b = this.elements,
	        c = a.x,
	        d = a.y;a = a.z;b[0] *= c;b[4] *= d;b[8] *= a;b[1] *= c;b[5] *= d;b[9] *= a;b[2] *= c;b[6] *= d;b[10] *= a;b[3] *= c;b[7] *= d;b[11] *= a;return this;
	  }, getMaxScaleOnAxis: function getMaxScaleOnAxis() {
	    var a = this.elements;return Math.sqrt(Math.max(a[0] * a[0] + a[1] * a[1] + a[2] * a[2], a[4] * a[4] + a[5] * a[5] + a[6] * a[6], a[8] * a[8] + a[9] * a[9] + a[10] * a[10]));
	  }, makeTranslation: function makeTranslation(a, b, c) {
	    this.set(1, 0, 0, a, 0, 1, 0, b, 0, 0, 1, c, 0, 0, 0, 1);return this;
	  }, makeRotationX: function makeRotationX(a) {
	    var b = Math.cos(a);a = Math.sin(a);this.set(1, 0, 0, 0, 0, b, -a, 0, 0, a, b, 0, 0, 0, 0, 1);
	    return this;
	  }, makeRotationY: function makeRotationY(a) {
	    var b = Math.cos(a);a = Math.sin(a);this.set(b, 0, a, 0, 0, 1, 0, 0, -a, 0, b, 0, 0, 0, 0, 1);return this;
	  }, makeRotationZ: function makeRotationZ(a) {
	    var b = Math.cos(a);a = Math.sin(a);this.set(b, -a, 0, 0, a, b, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);return this;
	  }, makeRotationAxis: function makeRotationAxis(a, b) {
	    var c = Math.cos(b),
	        d = Math.sin(b),
	        e = 1 - c,
	        g = a.x,
	        f = a.y,
	        h = a.z,
	        l = e * g,
	        k = e * f;this.set(l * g + c, l * f - d * h, l * h + d * f, 0, l * f + d * h, k * f + c, k * h - d * g, 0, l * h - d * f, k * h + d * g, e * h * h + c, 0, 0, 0, 0, 1);return this;
	  }, makeScale: function makeScale(a, b, c) {
	    this.set(a, 0, 0, 0, 0, b, 0, 0, 0, 0, c, 0, 0, 0, 0, 1);return this;
	  }, compose: function compose(a, b, c) {
	    this.makeRotationFromQuaternion(b);this.scale(c);this.setPosition(a);return this;
	  }, decompose: function () {
	    var a, b;return function (c, d, e) {
	      void 0 === a && (a = new THREE.Vector3());void 0 === b && (b = new THREE.Matrix4());var g = this.elements,
	          f = a.set(g[0], g[1], g[2]).length(),
	          h = a.set(g[4], g[5], g[6]).length(),
	          l = a.set(g[8], g[9], g[10]).length();0 > this.determinant() && (f = -f);c.x = g[12];c.y = g[13];c.z = g[14];b.elements.set(this.elements);c = 1 / f;var g = 1 / h,
	          k = 1 / l;b.elements[0] *= c;b.elements[1] *= c;b.elements[2] *= c;b.elements[4] *= g;b.elements[5] *= g;b.elements[6] *= g;b.elements[8] *= k;b.elements[9] *= k;b.elements[10] *= k;d.setFromRotationMatrix(b);e.x = f;e.y = h;e.z = l;return this;
	    };
	  }(), makeFrustum: function makeFrustum(a, b, c, d, e, g) {
	    var f = this.elements;f[0] = 2 * e / (b - a);f[4] = 0;f[8] = (b + a) / (b - a);f[12] = 0;f[1] = 0;f[5] = 2 * e / (d - c);f[9] = (d + c) / (d - c);f[13] = 0;f[2] = 0;f[6] = 0;f[10] = -(g + e) / (g - e);f[14] = -2 * g * e / (g - e);f[3] = 0;f[7] = 0;f[11] = -1;f[15] = 0;return this;
	  }, makePerspective: function makePerspective(a, b, c, d) {
	    a = c * Math.tan(THREE.Math.degToRad(.5 * a));
	    var e = -a;return this.makeFrustum(e * b, a * b, e, a, c, d);
	  }, makeOrthographic: function makeOrthographic(a, b, c, d, e, g) {
	    var f = this.elements,
	        h = b - a,
	        l = c - d,
	        k = g - e;f[0] = 2 / h;f[4] = 0;f[8] = 0;f[12] = -((b + a) / h);f[1] = 0;f[5] = 2 / l;f[9] = 0;f[13] = -((c + d) / l);f[2] = 0;f[6] = 0;f[10] = -2 / k;f[14] = -((g + e) / k);f[3] = 0;f[7] = 0;f[11] = 0;f[15] = 1;return this;
	  }, equals: function equals(a) {
	    var b = this.elements;a = a.elements;for (var c = 0; 16 > c; c++) {
	      if (b[c] !== a[c]) return !1;
	    }return !0;
	  }, fromArray: function fromArray(a) {
	    this.elements.set(a);return this;
	  }, toArray: function toArray() {
	    var a = this.elements;return [a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]];
	  } };THREE.Ray = function (a, b) {
	  this.origin = void 0 !== a ? a : new THREE.Vector3();this.direction = void 0 !== b ? b : new THREE.Vector3();
	};
	THREE.Ray.prototype = { constructor: THREE.Ray, set: function set(a, b) {
	    this.origin.copy(a);this.direction.copy(b);return this;
	  }, clone: function clone() {
	    return new this.constructor().copy(this);
	  }, copy: function copy(a) {
	    this.origin.copy(a.origin);this.direction.copy(a.direction);return this;
	  }, at: function at(a, b) {
	    return (b || new THREE.Vector3()).copy(this.direction).multiplyScalar(a).add(this.origin);
	  }, recast: function () {
	    var a = new THREE.Vector3();return function (b) {
	      this.origin.copy(this.at(b, a));return this;
	    };
	  }(), closestPointToPoint: function closestPointToPoint(a, b) {
	    var c = b || new THREE.Vector3();c.subVectors(a, this.origin);var d = c.dot(this.direction);return 0 > d ? c.copy(this.origin) : c.copy(this.direction).multiplyScalar(d).add(this.origin);
	  }, distanceToPoint: function distanceToPoint(a) {
	    return Math.sqrt(this.distanceSqToPoint(a));
	  }, distanceSqToPoint: function () {
	    var a = new THREE.Vector3();return function (b) {
	      var c = a.subVectors(b, this.origin).dot(this.direction);if (0 > c) return this.origin.distanceToSquared(b);a.copy(this.direction).multiplyScalar(c).add(this.origin);return a.distanceToSquared(b);
	    };
	  }(),
	  distanceSqToSegment: function () {
	    var a = new THREE.Vector3(),
	        b = new THREE.Vector3(),
	        c = new THREE.Vector3();return function (d, e, g, f) {
	      a.copy(d).add(e).multiplyScalar(.5);b.copy(e).sub(d).normalize();c.copy(this.origin).sub(a);var h = .5 * d.distanceTo(e),
	          l = -this.direction.dot(b),
	          k = c.dot(this.direction),
	          m = -c.dot(b),
	          p = c.lengthSq(),
	          n = Math.abs(1 - l * l),
	          q;0 < n ? (d = l * m - k, e = l * k - m, q = h * n, 0 <= d ? e >= -q ? e <= q ? (h = 1 / n, d *= h, e *= h, l = d * (d + l * e + 2 * k) + e * (l * d + e + 2 * m) + p) : (e = h, d = Math.max(0, -(l * e + k)), l = -d * d + e * (e + 2 * m) + p) : (e = -h, d = Math.max(0, -(l * e + k)), l = -d * d + e * (e + 2 * m) + p) : e <= -q ? (d = Math.max(0, -(-l * h + k)), e = 0 < d ? -h : Math.min(Math.max(-h, -m), h), l = -d * d + e * (e + 2 * m) + p) : e <= q ? (d = 0, e = Math.min(Math.max(-h, -m), h), l = e * (e + 2 * m) + p) : (d = Math.max(0, -(l * h + k)), e = 0 < d ? h : Math.min(Math.max(-h, -m), h), l = -d * d + e * (e + 2 * m) + p)) : (e = 0 < l ? -h : h, d = Math.max(0, -(l * e + k)), l = -d * d + e * (e + 2 * m) + p);g && g.copy(this.direction).multiplyScalar(d).add(this.origin);f && f.copy(b).multiplyScalar(e).add(a);return l;
	    };
	  }(), isIntersectionSphere: function isIntersectionSphere(a) {
	    return this.distanceToPoint(a.center) <= a.radius;
	  }, intersectSphere: function () {
	    var a = new THREE.Vector3();return function (b, c) {
	      a.subVectors(b.center, this.origin);var d = a.dot(this.direction),
	          e = a.dot(a) - d * d,
	          g = b.radius * b.radius;if (e > g) return null;g = Math.sqrt(g - e);e = d - g;d += g;return 0 > e && 0 > d ? null : 0 > e ? this.at(d, c) : this.at(e, c);
	    };
	  }(), isIntersectionPlane: function isIntersectionPlane(a) {
	    var b = a.distanceToPoint(this.origin);return 0 === b || 0 > a.normal.dot(this.direction) * b ? !0 : !1;
	  }, distanceToPlane: function distanceToPlane(a) {
	    var b = a.normal.dot(this.direction);if (0 === b) return 0 === a.distanceToPoint(this.origin) ? 0 : null;a = -(this.origin.dot(a.normal) + a.constant) / b;return 0 <= a ? a : null;
	  }, intersectPlane: function intersectPlane(a, b) {
	    var c = this.distanceToPlane(a);return null === c ? null : this.at(c, b);
	  }, isIntersectionBox: function () {
	    var a = new THREE.Vector3();return function (b) {
	      return null !== this.intersectBox(b, a);
	    };
	  }(), intersectBox: function intersectBox(a, b) {
	    var c, d, e, g, f;d = 1 / this.direction.x;g = 1 / this.direction.y;f = 1 / this.direction.z;var h = this.origin;0 <= d ? (c = (a.min.x - h.x) * d, d *= a.max.x - h.x) : (c = (a.max.x - h.x) * d, d *= a.min.x - h.x);0 <= g ? (e = (a.min.y - h.y) * g, g *= a.max.y - h.y) : (e = (a.max.y - h.y) * g, g *= a.min.y - h.y);if (c > g || e > d) return null;if (e > c || c !== c) c = e;if (g < d || d !== d) d = g;0 <= f ? (e = (a.min.z - h.z) * f, f *= a.max.z - h.z) : (e = (a.max.z - h.z) * f, f *= a.min.z - h.z);if (c > f || e > d) return null;if (e > c || c !== c) c = e;if (f < d || d !== d) d = f;return 0 > d ? null : this.at(0 <= c ? c : d, b);
	  }, intersectTriangle: function () {
	    var a = new THREE.Vector3(),
	        b = new THREE.Vector3(),
	        c = new THREE.Vector3(),
	        d = new THREE.Vector3();return function (e, g, f, h, l) {
	      b.subVectors(g, e);c.subVectors(f, e);d.crossVectors(b, c);g = this.direction.dot(d);if (0 < g) {
	        if (h) return null;h = 1;
	      } else if (0 > g) h = -1, g = -g;else return null;a.subVectors(this.origin, e);e = h * this.direction.dot(c.crossVectors(a, c));if (0 > e) return null;f = h * this.direction.dot(b.cross(a));if (0 > f || e + f > g) return null;e = -h * a.dot(d);return 0 > e ? null : this.at(e / g, l);
	    };
	  }(), applyMatrix4: function applyMatrix4(a) {
	    this.direction.add(this.origin).applyMatrix4(a);this.origin.applyMatrix4(a);this.direction.sub(this.origin);this.direction.normalize();return this;
	  }, equals: function equals(a) {
	    return a.origin.equals(this.origin) && a.direction.equals(this.direction);
	  } };
	THREE.Sphere = function (a, b) {
	  this.center = void 0 !== a ? a : new THREE.Vector3();this.radius = void 0 !== b ? b : 0;
	};
	THREE.Sphere.prototype = { constructor: THREE.Sphere, set: function set(a, b) {
	    this.center.copy(a);this.radius = b;return this;
	  }, setFromPoints: function () {
	    var a = new THREE.Box3();return function (b, c) {
	      var d = this.center;void 0 !== c ? d.copy(c) : a.setFromPoints(b).center(d);for (var e = 0, g = 0, f = b.length; g < f; g++) {
	        e = Math.max(e, d.distanceToSquared(b[g]));
	      }this.radius = Math.sqrt(e);return this;
	    };
	  }(), clone: function clone() {
	    return new this.constructor().copy(this);
	  }, copy: function copy(a) {
	    this.center.copy(a.center);this.radius = a.radius;return this;
	  },
	  empty: function empty() {
	    return 0 >= this.radius;
	  }, containsPoint: function containsPoint(a) {
	    return a.distanceToSquared(this.center) <= this.radius * this.radius;
	  }, distanceToPoint: function distanceToPoint(a) {
	    return a.distanceTo(this.center) - this.radius;
	  }, intersectsSphere: function intersectsSphere(a) {
	    var b = this.radius + a.radius;return a.center.distanceToSquared(this.center) <= b * b;
	  }, clampPoint: function clampPoint(a, b) {
	    var c = this.center.distanceToSquared(a),
	        d = b || new THREE.Vector3();d.copy(a);c > this.radius * this.radius && (d.sub(this.center).normalize(), d.multiplyScalar(this.radius).add(this.center));
	    return d;
	  }, getBoundingBox: function getBoundingBox(a) {
	    a = a || new THREE.Box3();a.set(this.center, this.center);a.expandByScalar(this.radius);return a;
	  }, applyMatrix4: function applyMatrix4(a) {
	    this.center.applyMatrix4(a);this.radius *= a.getMaxScaleOnAxis();return this;
	  }, translate: function translate(a) {
	    this.center.add(a);return this;
	  }, equals: function equals(a) {
	    return a.center.equals(this.center) && a.radius === this.radius;
	  } };
	THREE.Frustum = function (a, b, c, d, e, g) {
	  this.planes = [void 0 !== a ? a : new THREE.Plane(), void 0 !== b ? b : new THREE.Plane(), void 0 !== c ? c : new THREE.Plane(), void 0 !== d ? d : new THREE.Plane(), void 0 !== e ? e : new THREE.Plane(), void 0 !== g ? g : new THREE.Plane()];
	};
	THREE.Frustum.prototype = { constructor: THREE.Frustum, set: function set(a, b, c, d, e, g) {
	    var f = this.planes;f[0].copy(a);f[1].copy(b);f[2].copy(c);f[3].copy(d);f[4].copy(e);f[5].copy(g);return this;
	  }, clone: function clone() {
	    return new this.constructor().copy(this);
	  }, copy: function copy(a) {
	    for (var b = this.planes, c = 0; 6 > c; c++) {
	      b[c].copy(a.planes[c]);
	    }return this;
	  }, setFromMatrix: function setFromMatrix(a) {
	    var b = this.planes,
	        c = a.elements;a = c[0];var d = c[1],
	        e = c[2],
	        g = c[3],
	        f = c[4],
	        h = c[5],
	        l = c[6],
	        k = c[7],
	        m = c[8],
	        p = c[9],
	        n = c[10],
	        q = c[11],
	        s = c[12],
	        t = c[13],
	        v = c[14],
	        c = c[15];b[0].setComponents(g - a, k - f, q - m, c - s).normalize();b[1].setComponents(g + a, k + f, q + m, c + s).normalize();b[2].setComponents(g + d, k + h, q + p, c + t).normalize();b[3].setComponents(g - d, k - h, q - p, c - t).normalize();b[4].setComponents(g - e, k - l, q - n, c - v).normalize();b[5].setComponents(g + e, k + l, q + n, c + v).normalize();return this;
	  }, intersectsObject: function () {
	    var a = new THREE.Sphere();return function (b) {
	      var c = b.geometry;null === c.boundingSphere && c.computeBoundingSphere();a.copy(c.boundingSphere);a.applyMatrix4(b.matrixWorld);
	      return this.intersectsSphere(a);
	    };
	  }(), intersectsSphere: function intersectsSphere(a) {
	    var b = this.planes,
	        c = a.center;a = -a.radius;for (var d = 0; 6 > d; d++) {
	      if (b[d].distanceToPoint(c) < a) return !1;
	    }return !0;
	  }, intersectsBox: function () {
	    var a = new THREE.Vector3(),
	        b = new THREE.Vector3();return function (c) {
	      for (var d = this.planes, e = 0; 6 > e; e++) {
	        var g = d[e];a.x = 0 < g.normal.x ? c.min.x : c.max.x;b.x = 0 < g.normal.x ? c.max.x : c.min.x;a.y = 0 < g.normal.y ? c.min.y : c.max.y;b.y = 0 < g.normal.y ? c.max.y : c.min.y;a.z = 0 < g.normal.z ? c.min.z : c.max.z;b.z = 0 < g.normal.z ? c.max.z : c.min.z;
	        var f = g.distanceToPoint(a),
	            g = g.distanceToPoint(b);if (0 > f && 0 > g) return !1;
	      }return !0;
	    };
	  }(), containsPoint: function containsPoint(a) {
	    for (var b = this.planes, c = 0; 6 > c; c++) {
	      if (0 > b[c].distanceToPoint(a)) return !1;
	    }return !0;
	  } };THREE.Plane = function (a, b) {
	  this.normal = void 0 !== a ? a : new THREE.Vector3(1, 0, 0);this.constant = void 0 !== b ? b : 0;
	};
	THREE.Plane.prototype = { constructor: THREE.Plane, set: function set(a, b) {
	    this.normal.copy(a);this.constant = b;return this;
	  }, setComponents: function setComponents(a, b, c, d) {
	    this.normal.set(a, b, c);this.constant = d;return this;
	  }, setFromNormalAndCoplanarPoint: function setFromNormalAndCoplanarPoint(a, b) {
	    this.normal.copy(a);this.constant = -b.dot(this.normal);return this;
	  }, setFromCoplanarPoints: function () {
	    var a = new THREE.Vector3(),
	        b = new THREE.Vector3();return function (c, d, e) {
	      d = a.subVectors(e, d).cross(b.subVectors(c, d)).normalize();this.setFromNormalAndCoplanarPoint(d, c);return this;
	    };
	  }(), clone: function clone() {
	    return new this.constructor().copy(this);
	  }, copy: function copy(a) {
	    this.normal.copy(a.normal);this.constant = a.constant;return this;
	  }, normalize: function normalize() {
	    var a = 1 / this.normal.length();this.normal.multiplyScalar(a);this.constant *= a;return this;
	  }, negate: function negate() {
	    this.constant *= -1;this.normal.negate();return this;
	  }, distanceToPoint: function distanceToPoint(a) {
	    return this.normal.dot(a) + this.constant;
	  }, distanceToSphere: function distanceToSphere(a) {
	    return this.distanceToPoint(a.center) - a.radius;
	  }, projectPoint: function projectPoint(a, b) {
	    return this.orthoPoint(a, b).sub(a).negate();
	  }, orthoPoint: function orthoPoint(a, b) {
	    var c = this.distanceToPoint(a);return (b || new THREE.Vector3()).copy(this.normal).multiplyScalar(c);
	  }, isIntersectionLine: function isIntersectionLine(a) {
	    var b = this.distanceToPoint(a.start);a = this.distanceToPoint(a.end);return 0 > b && 0 < a || 0 > a && 0 < b;
	  }, intersectLine: function () {
	    var a = new THREE.Vector3();return function (b, c) {
	      var d = c || new THREE.Vector3(),
	          e = b.delta(a),
	          g = this.normal.dot(e);if (0 === g) {
	        if (0 === this.distanceToPoint(b.start)) return d.copy(b.start);
	      } else return g = -(b.start.dot(this.normal) + this.constant) / g, 0 > g || 1 < g ? void 0 : d.copy(e).multiplyScalar(g).add(b.start);
	    };
	  }(), coplanarPoint: function coplanarPoint(a) {
	    return (a || new THREE.Vector3()).copy(this.normal).multiplyScalar(-this.constant);
	  }, applyMatrix4: function () {
	    var a = new THREE.Vector3(),
	        b = new THREE.Vector3(),
	        c = new THREE.Matrix3();return function (d, e) {
	      var g = e || c.getNormalMatrix(d),
	          g = a.copy(this.normal).applyMatrix3(g),
	          f = this.coplanarPoint(b);f.applyMatrix4(d);this.setFromNormalAndCoplanarPoint(g, f);return this;
	    };
	  }(), translate: function translate(a) {
	    this.constant -= a.dot(this.normal);return this;
	  }, equals: function equals(a) {
	    return a.normal.equals(this.normal) && a.constant === this.constant;
	  } };
	THREE.Math = { generateUUID: function () {
	    var a = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),
	        b = Array(36),
	        c = 0,
	        d;return function () {
	      for (var e = 0; 36 > e; e++) {
	        8 === e || 13 === e || 18 === e || 23 === e ? b[e] = "-" : 14 === e ? b[e] = "4" : (2 >= c && (c = 33554432 + 16777216 * Math.random() | 0), d = c & 15, c >>= 4, b[e] = a[19 === e ? d & 3 | 8 : d]);
	      }return b.join("");
	    };
	  }(), clamp: function clamp(a, b, c) {
	    return Math.max(b, Math.min(c, a));
	  }, euclideanModulo: function euclideanModulo(a, b) {
	    return (a % b + b) % b;
	  }, mapLinear: function mapLinear(a, b, c, d, e) {
	    return d + (a - b) * (e - d) / (c - b);
	  }, smoothstep: function smoothstep(a, b, c) {
	    if (a <= b) return 0;if (a >= c) return 1;a = (a - b) / (c - b);return a * a * (3 - 2 * a);
	  }, smootherstep: function smootherstep(a, b, c) {
	    if (a <= b) return 0;if (a >= c) return 1;a = (a - b) / (c - b);return a * a * a * (a * (6 * a - 15) + 10);
	  }, random16: function random16() {
	    return (65280 * Math.random() + 255 * Math.random()) / 65535;
	  }, randInt: function randInt(a, b) {
	    return a + Math.floor(Math.random() * (b - a + 1));
	  }, randFloat: function randFloat(a, b) {
	    return a + Math.random() * (b - a);
	  }, randFloatSpread: function randFloatSpread(a) {
	    return a * (.5 - Math.random());
	  }, degToRad: function () {
	    var a = Math.PI / 180;return function (b) {
	      return b * a;
	    };
	  }(),
	  radToDeg: function () {
	    var a = 180 / Math.PI;return function (b) {
	      return b * a;
	    };
	  }(), isPowerOfTwo: function isPowerOfTwo(a) {
	    return 0 === (a & a - 1) && 0 !== a;
	  }, nearestPowerOfTwo: function nearestPowerOfTwo(a) {
	    return Math.pow(2, Math.round(Math.log(a) / Math.LN2));
	  }, nextPowerOfTwo: function nextPowerOfTwo(a) {
	    a--;a |= a >> 1;a |= a >> 2;a |= a >> 4;a |= a >> 8;a |= a >> 16;a++;return a;
	  } };
	THREE.Spline = function (a) {
	  function b(a, b, c, d, e, g, f) {
	    a = .5 * (c - a);d = .5 * (d - b);return (2 * (b - c) + a + d) * f + (-3 * (b - c) - 2 * a - d) * g + a * e + b;
	  }this.points = a;var c = [],
	      d = { x: 0, y: 0, z: 0 },
	      e,
	      g,
	      f,
	      h,
	      l,
	      k,
	      m,
	      p,
	      n;this.initFromArray = function (a) {
	    this.points = [];for (var b = 0; b < a.length; b++) {
	      this.points[b] = { x: a[b][0], y: a[b][1], z: a[b][2] };
	    }
	  };this.getPoint = function (a) {
	    e = (this.points.length - 1) * a;g = Math.floor(e);f = e - g;c[0] = 0 === g ? g : g - 1;c[1] = g;c[2] = g > this.points.length - 2 ? this.points.length - 1 : g + 1;c[3] = g > this.points.length - 3 ? this.points.length - 1 : g + 2;k = this.points[c[0]];m = this.points[c[1]];p = this.points[c[2]];n = this.points[c[3]];h = f * f;l = f * h;d.x = b(k.x, m.x, p.x, n.x, f, h, l);d.y = b(k.y, m.y, p.y, n.y, f, h, l);d.z = b(k.z, m.z, p.z, n.z, f, h, l);return d;
	  };this.getControlPointsArray = function () {
	    var a,
	        b,
	        c = this.points.length,
	        d = [];for (a = 0; a < c; a++) {
	      b = this.points[a], d[a] = [b.x, b.y, b.z];
	    }return d;
	  };this.getLength = function (a) {
	    var b,
	        c,
	        d,
	        e = b = b = 0,
	        g = new THREE.Vector3(),
	        f = new THREE.Vector3(),
	        h = [],
	        l = 0;h[0] = 0;a || (a = 100);c = this.points.length * a;g.copy(this.points[0]);for (a = 1; a < c; a++) {
	      b = a / c, d = this.getPoint(b), f.copy(d), l += f.distanceTo(g), g.copy(d), b *= this.points.length - 1, b = Math.floor(b), b !== e && (h[b] = l, e = b);
	    }h[h.length] = l;return { chunks: h, total: l };
	  };this.reparametrizeByArcLength = function (a) {
	    var b,
	        c,
	        d,
	        e,
	        g,
	        f,
	        h = [],
	        l = new THREE.Vector3(),
	        k = this.getLength();h.push(l.copy(this.points[0]).clone());for (b = 1; b < this.points.length; b++) {
	      c = k.chunks[b] - k.chunks[b - 1];f = Math.ceil(a * c / k.total);e = (b - 1) / (this.points.length - 1);g = b / (this.points.length - 1);for (c = 1; c < f - 1; c++) {
	        d = e + 1 / f * c * (g - e), d = this.getPoint(d), h.push(l.copy(d).clone());
	      }h.push(l.copy(this.points[b]).clone());
	    }this.points = h;
	  };
	};THREE.Triangle = function (a, b, c) {
	  this.a = void 0 !== a ? a : new THREE.Vector3();this.b = void 0 !== b ? b : new THREE.Vector3();this.c = void 0 !== c ? c : new THREE.Vector3();
	};THREE.Triangle.normal = function () {
	  var a = new THREE.Vector3();return function (b, c, d, e) {
	    e = e || new THREE.Vector3();e.subVectors(d, c);a.subVectors(b, c);e.cross(a);b = e.lengthSq();return 0 < b ? e.multiplyScalar(1 / Math.sqrt(b)) : e.set(0, 0, 0);
	  };
	}();
	THREE.Triangle.barycoordFromPoint = function () {
	  var a = new THREE.Vector3(),
	      b = new THREE.Vector3(),
	      c = new THREE.Vector3();return function (d, e, g, f, h) {
	    a.subVectors(f, e);b.subVectors(g, e);c.subVectors(d, e);d = a.dot(a);e = a.dot(b);g = a.dot(c);var l = b.dot(b);f = b.dot(c);var k = d * l - e * e;h = h || new THREE.Vector3();if (0 === k) return h.set(-2, -1, -1);k = 1 / k;l = (l * g - e * f) * k;d = (d * f - e * g) * k;return h.set(1 - l - d, d, l);
	  };
	}();
	THREE.Triangle.containsPoint = function () {
	  var a = new THREE.Vector3();return function (b, c, d, e) {
	    b = THREE.Triangle.barycoordFromPoint(b, c, d, e, a);return 0 <= b.x && 0 <= b.y && 1 >= b.x + b.y;
	  };
	}();
	THREE.Triangle.prototype = { constructor: THREE.Triangle, set: function set(a, b, c) {
	    this.a.copy(a);this.b.copy(b);this.c.copy(c);return this;
	  }, setFromPointsAndIndices: function setFromPointsAndIndices(a, b, c, d) {
	    this.a.copy(a[b]);this.b.copy(a[c]);this.c.copy(a[d]);return this;
	  }, clone: function clone() {
	    return new this.constructor().copy(this);
	  }, copy: function copy(a) {
	    this.a.copy(a.a);this.b.copy(a.b);this.c.copy(a.c);return this;
	  }, area: function () {
	    var a = new THREE.Vector3(),
	        b = new THREE.Vector3();return function () {
	      a.subVectors(this.c, this.b);b.subVectors(this.a, this.b);return .5 * a.cross(b).length();
	    };
	  }(), midpoint: function midpoint(a) {
	    return (a || new THREE.Vector3()).addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
	  }, normal: function normal(a) {
	    return THREE.Triangle.normal(this.a, this.b, this.c, a);
	  }, plane: function plane(a) {
	    return (a || new THREE.Plane()).setFromCoplanarPoints(this.a, this.b, this.c);
	  }, barycoordFromPoint: function barycoordFromPoint(a, b) {
	    return THREE.Triangle.barycoordFromPoint(a, this.a, this.b, this.c, b);
	  }, containsPoint: function containsPoint(a) {
	    return THREE.Triangle.containsPoint(a, this.a, this.b, this.c);
	  },
	  equals: function equals(a) {
	    return a.a.equals(this.a) && a.b.equals(this.b) && a.c.equals(this.c);
	  } };THREE.Channels = function () {
	  this.mask = 1;
	};THREE.Channels.prototype = { constructor: THREE.Channels, set: function set(a) {
	    this.mask = 1 << a;
	  }, enable: function enable(a) {
	    this.mask |= 1 << a;
	  }, toggle: function toggle(a) {
	    this.mask ^= 1 << a;
	  }, disable: function disable(a) {
	    this.mask &= ~(1 << a);
	  } };THREE.Clock = function (a) {
	  this.autoStart = void 0 !== a ? a : !0;this.elapsedTime = this.oldTime = this.startTime = 0;this.running = !1;
	};
	THREE.Clock.prototype = { constructor: THREE.Clock, start: function start() {
	    this.oldTime = this.startTime = self.performance.now();this.running = !0;
	  }, stop: function stop() {
	    this.getElapsedTime();this.running = !1;
	  }, getElapsedTime: function getElapsedTime() {
	    this.getDelta();return this.elapsedTime;
	  }, getDelta: function getDelta() {
	    var a = 0;this.autoStart && !this.running && this.start();if (this.running) {
	      var b = self.performance.now(),
	          a = .001 * (b - this.oldTime);this.oldTime = b;this.elapsedTime += a;
	    }return a;
	  } };THREE.EventDispatcher = function () {};
	THREE.EventDispatcher.prototype = { constructor: THREE.EventDispatcher, apply: function apply(a) {
	    a.addEventListener = THREE.EventDispatcher.prototype.addEventListener;a.hasEventListener = THREE.EventDispatcher.prototype.hasEventListener;a.removeEventListener = THREE.EventDispatcher.prototype.removeEventListener;a.dispatchEvent = THREE.EventDispatcher.prototype.dispatchEvent;
	  }, addEventListener: function addEventListener(a, b) {
	    void 0 === this._listeners && (this._listeners = {});var c = this._listeners;void 0 === c[a] && (c[a] = []);-1 === c[a].indexOf(b) && c[a].push(b);
	  }, hasEventListener: function hasEventListener(a, b) {
	    if (void 0 === this._listeners) return !1;var c = this._listeners;return void 0 !== c[a] && -1 !== c[a].indexOf(b) ? !0 : !1;
	  }, removeEventListener: function removeEventListener(a, b) {
	    if (void 0 !== this._listeners) {
	      var c = this._listeners[a];if (void 0 !== c) {
	        var d = c.indexOf(b);-1 !== d && c.splice(d, 1);
	      }
	    }
	  }, dispatchEvent: function dispatchEvent(a) {
	    if (void 0 !== this._listeners) {
	      var b = this._listeners[a.type];if (void 0 !== b) {
	        a.target = this;for (var c = [], d = b.length, e = 0; e < d; e++) {
	          c[e] = b[e];
	        }for (e = 0; e < d; e++) {
	          c[e].call(this, a);
	        }
	      }
	    }
	  } };
	(function (a) {
	  function b(a, b) {
	    return a.distance - b.distance;
	  }function c(a, b, g, f) {
	    if (!1 !== a.visible && (a.raycast(b, g), !0 === f)) {
	      a = a.children;f = 0;for (var h = a.length; f < h; f++) {
	        c(a[f], b, g, !0);
	      }
	    }
	  }a.Raycaster = function (b, c, g, f) {
	    this.ray = new a.Ray(b, c);this.near = g || 0;this.far = f || Infinity;this.params = { Mesh: {}, Line: {}, LOD: {}, Points: { threshold: 1 }, Sprite: {} };Object.defineProperties(this.params, { PointCloud: { get: function get() {
	          console.warn("THREE.Raycaster: params.PointCloud has been renamed to params.Points.");return this.Points;
	        } } });
	  };
	  a.Raycaster.prototype = { constructor: a.Raycaster, linePrecision: 1, set: function set(a, b) {
	      this.ray.set(a, b);
	    }, setFromCamera: function setFromCamera(b, c) {
	      c instanceof a.PerspectiveCamera ? (this.ray.origin.setFromMatrixPosition(c.matrixWorld), this.ray.direction.set(b.x, b.y, .5).unproject(c).sub(this.ray.origin).normalize()) : c instanceof a.OrthographicCamera ? (this.ray.origin.set(b.x, b.y, -1).unproject(c), this.ray.direction.set(0, 0, -1).transformDirection(c.matrixWorld)) : console.error("THREE.Raycaster: Unsupported camera type.");
	    },
	    intersectObject: function intersectObject(a, e) {
	      var g = [];c(a, this, g, e);g.sort(b);return g;
	    }, intersectObjects: function intersectObjects(a, e) {
	      var g = [];if (!1 === Array.isArray(a)) return console.warn("THREE.Raycaster.intersectObjects: objects is not an Array."), g;for (var f = 0, h = a.length; f < h; f++) {
	        c(a[f], this, g, e);
	      }g.sort(b);return g;
	    } };
	})(THREE);
	THREE.Object3D = function () {
	  Object.defineProperty(this, "id", { value: THREE.Object3DIdCount++ });this.uuid = THREE.Math.generateUUID();this.name = "";this.type = "Object3D";this.parent = null;this.channels = new THREE.Channels();this.children = [];this.up = THREE.Object3D.DefaultUp.clone();var a = new THREE.Vector3(),
	      b = new THREE.Euler(),
	      c = new THREE.Quaternion(),
	      d = new THREE.Vector3(1, 1, 1);b.onChange(function () {
	    c.setFromEuler(b, !1);
	  });c.onChange(function () {
	    b.setFromQuaternion(c, void 0, !1);
	  });Object.defineProperties(this, { position: { enumerable: !0,
	      value: a }, rotation: { enumerable: !0, value: b }, quaternion: { enumerable: !0, value: c }, scale: { enumerable: !0, value: d }, modelViewMatrix: { value: new THREE.Matrix4() }, normalMatrix: { value: new THREE.Matrix3() } });this.rotationAutoUpdate = !0;this.matrix = new THREE.Matrix4();this.matrixWorld = new THREE.Matrix4();this.matrixAutoUpdate = THREE.Object3D.DefaultMatrixAutoUpdate;this.matrixWorldNeedsUpdate = !1;this.visible = !0;this.receiveShadow = this.castShadow = !1;this.frustumCulled = !0;this.renderOrder = 0;this.userData = {};
	};
	THREE.Object3D.DefaultUp = new THREE.Vector3(0, 1, 0);THREE.Object3D.DefaultMatrixAutoUpdate = !0;
	THREE.Object3D.prototype = { constructor: THREE.Object3D, get eulerOrder() {
	    console.warn("THREE.Object3D: .eulerOrder is now .rotation.order.");return this.rotation.order;
	  }, set eulerOrder(a) {
	    console.warn("THREE.Object3D: .eulerOrder is now .rotation.order.");this.rotation.order = a;
	  }, get useQuaternion() {
	    console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.");
	  }, set useQuaternion(a) {
	    console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.");
	  }, set renderDepth(a) {
	    console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.");
	  },
	  applyMatrix: function applyMatrix(a) {
	    this.matrix.multiplyMatrices(a, this.matrix);this.matrix.decompose(this.position, this.quaternion, this.scale);
	  }, setRotationFromAxisAngle: function setRotationFromAxisAngle(a, b) {
	    this.quaternion.setFromAxisAngle(a, b);
	  }, setRotationFromEuler: function setRotationFromEuler(a) {
	    this.quaternion.setFromEuler(a, !0);
	  }, setRotationFromMatrix: function setRotationFromMatrix(a) {
	    this.quaternion.setFromRotationMatrix(a);
	  }, setRotationFromQuaternion: function setRotationFromQuaternion(a) {
	    this.quaternion.copy(a);
	  }, rotateOnAxis: function () {
	    var a = new THREE.Quaternion();return function (b, c) {
	      a.setFromAxisAngle(b, c);this.quaternion.multiply(a);return this;
	    };
	  }(), rotateX: function () {
	    var a = new THREE.Vector3(1, 0, 0);return function (b) {
	      return this.rotateOnAxis(a, b);
	    };
	  }(), rotateY: function () {
	    var a = new THREE.Vector3(0, 1, 0);return function (b) {
	      return this.rotateOnAxis(a, b);
	    };
	  }(), rotateZ: function () {
	    var a = new THREE.Vector3(0, 0, 1);return function (b) {
	      return this.rotateOnAxis(a, b);
	    };
	  }(), translateOnAxis: function () {
	    var a = new THREE.Vector3();return function (b, c) {
	      a.copy(b).applyQuaternion(this.quaternion);this.position.add(a.multiplyScalar(c));
	      return this;
	    };
	  }(), translate: function translate(a, b) {
	    console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.");return this.translateOnAxis(b, a);
	  }, translateX: function () {
	    var a = new THREE.Vector3(1, 0, 0);return function (b) {
	      return this.translateOnAxis(a, b);
	    };
	  }(), translateY: function () {
	    var a = new THREE.Vector3(0, 1, 0);return function (b) {
	      return this.translateOnAxis(a, b);
	    };
	  }(), translateZ: function () {
	    var a = new THREE.Vector3(0, 0, 1);return function (b) {
	      return this.translateOnAxis(a, b);
	    };
	  }(), localToWorld: function localToWorld(a) {
	    return a.applyMatrix4(this.matrixWorld);
	  }, worldToLocal: function () {
	    var a = new THREE.Matrix4();return function (b) {
	      return b.applyMatrix4(a.getInverse(this.matrixWorld));
	    };
	  }(), lookAt: function () {
	    var a = new THREE.Matrix4();return function (b) {
	      a.lookAt(b, this.position, this.up);this.quaternion.setFromRotationMatrix(a);
	    };
	  }(), add: function add(a) {
	    if (1 < arguments.length) {
	      for (var b = 0; b < arguments.length; b++) {
	        this.add(arguments[b]);
	      }return this;
	    }if (a === this) return console.error("THREE.Object3D.add: object can't be added as a child of itself.", a), this;a instanceof THREE.Object3D ? (null !== a.parent && a.parent.remove(a), a.parent = this, a.dispatchEvent({ type: "added" }), this.children.push(a)) : console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", a);return this;
	  }, remove: function remove(a) {
	    if (1 < arguments.length) for (var b = 0; b < arguments.length; b++) {
	      this.remove(arguments[b]);
	    }b = this.children.indexOf(a);-1 !== b && (a.parent = null, a.dispatchEvent({ type: "removed" }), this.children.splice(b, 1));
	  }, getChildByName: function getChildByName(a) {
	    console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().");
	    return this.getObjectByName(a);
	  }, getObjectById: function getObjectById(a) {
	    return this.getObjectByProperty("id", a);
	  }, getObjectByName: function getObjectByName(a) {
	    return this.getObjectByProperty("name", a);
	  }, getObjectByProperty: function getObjectByProperty(a, b) {
	    if (this[a] === b) return this;for (var c = 0, d = this.children.length; c < d; c++) {
	      var e = this.children[c].getObjectByProperty(a, b);if (void 0 !== e) return e;
	    }
	  }, getWorldPosition: function getWorldPosition(a) {
	    a = a || new THREE.Vector3();this.updateMatrixWorld(!0);return a.setFromMatrixPosition(this.matrixWorld);
	  }, getWorldQuaternion: function () {
	    var a = new THREE.Vector3(),
	        b = new THREE.Vector3();return function (c) {
	      c = c || new THREE.Quaternion();this.updateMatrixWorld(!0);this.matrixWorld.decompose(a, c, b);return c;
	    };
	  }(), getWorldRotation: function () {
	    var a = new THREE.Quaternion();return function (b) {
	      b = b || new THREE.Euler();this.getWorldQuaternion(a);return b.setFromQuaternion(a, this.rotation.order, !1);
	    };
	  }(), getWorldScale: function () {
	    var a = new THREE.Vector3(),
	        b = new THREE.Quaternion();return function (c) {
	      c = c || new THREE.Vector3();this.updateMatrixWorld(!0);this.matrixWorld.decompose(a, b, c);return c;
	    };
	  }(), getWorldDirection: function () {
	    var a = new THREE.Quaternion();return function (b) {
	      b = b || new THREE.Vector3();this.getWorldQuaternion(a);return b.set(0, 0, 1).applyQuaternion(a);
	    };
	  }(), raycast: function raycast() {}, traverse: function traverse(a) {
	    a(this);for (var b = this.children, c = 0, d = b.length; c < d; c++) {
	      b[c].traverse(a);
	    }
	  }, traverseVisible: function traverseVisible(a) {
	    if (!1 !== this.visible) {
	      a(this);for (var b = this.children, c = 0, d = b.length; c < d; c++) {
	        b[c].traverseVisible(a);
	      }
	    }
	  }, traverseAncestors: function traverseAncestors(a) {
	    var b = this.parent;null !== b && (a(b), b.traverseAncestors(a));
	  },
	  updateMatrix: function updateMatrix() {
	    this.matrix.compose(this.position, this.quaternion, this.scale);this.matrixWorldNeedsUpdate = !0;
	  }, updateMatrixWorld: function updateMatrixWorld(a) {
	    !0 === this.matrixAutoUpdate && this.updateMatrix();if (!0 === this.matrixWorldNeedsUpdate || !0 === a) null === this.parent ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), this.matrixWorldNeedsUpdate = !1, a = !0;for (var b = 0, c = this.children.length; b < c; b++) {
	      this.children[b].updateMatrixWorld(a);
	    }
	  }, toJSON: function toJSON(a) {
	    function b(a) {
	      var b = [],
	          c;for (c in a) {
	        var d = a[c];delete d.metadata;b.push(d);
	      }return b;
	    }var c = void 0 === a,
	        d = {};c && (a = { geometries: {}, materials: {}, textures: {}, images: {} }, d.metadata = { version: 4.4, type: "Object", generator: "Object3D.toJSON" });var e = {};e.uuid = this.uuid;e.type = this.type;"" !== this.name && (e.name = this.name);"{}" !== JSON.stringify(this.userData) && (e.userData = this.userData);!0 === this.castShadow && (e.castShadow = !0);!0 === this.receiveShadow && (e.receiveShadow = !0);!1 === this.visible && (e.visible = !1);e.matrix = this.matrix.toArray();
	    void 0 !== this.geometry && (void 0 === a.geometries[this.geometry.uuid] && (a.geometries[this.geometry.uuid] = this.geometry.toJSON(a)), e.geometry = this.geometry.uuid);void 0 !== this.material && (void 0 === a.materials[this.material.uuid] && (a.materials[this.material.uuid] = this.material.toJSON(a)), e.material = this.material.uuid);if (0 < this.children.length) {
	      e.children = [];for (var g = 0; g < this.children.length; g++) {
	        e.children.push(this.children[g].toJSON(a).object);
	      }
	    }if (c) {
	      var c = b(a.geometries),
	          g = b(a.materials),
	          f = b(a.textures);
	      a = b(a.images);0 < c.length && (d.geometries = c);0 < g.length && (d.materials = g);0 < f.length && (d.textures = f);0 < a.length && (d.images = a);
	    }d.object = e;return d;
	  }, clone: function clone(a) {
	    return new this.constructor().copy(this, a);
	  }, copy: function copy(a, b) {
	    void 0 === b && (b = !0);this.name = a.name;this.up.copy(a.up);this.position.copy(a.position);this.quaternion.copy(a.quaternion);this.scale.copy(a.scale);this.rotationAutoUpdate = a.rotationAutoUpdate;this.matrix.copy(a.matrix);this.matrixWorld.copy(a.matrixWorld);this.matrixAutoUpdate = a.matrixAutoUpdate;this.matrixWorldNeedsUpdate = a.matrixWorldNeedsUpdate;this.visible = a.visible;this.castShadow = a.castShadow;this.receiveShadow = a.receiveShadow;this.frustumCulled = a.frustumCulled;this.renderOrder = a.renderOrder;this.userData = JSON.parse(JSON.stringify(a.userData));if (!0 === b) for (var c = 0; c < a.children.length; c++) {
	      this.add(a.children[c].clone());
	    }return this;
	  } };THREE.EventDispatcher.prototype.apply(THREE.Object3D.prototype);THREE.Object3DIdCount = 0;
	THREE.Face3 = function (a, b, c, d, e, g) {
	  this.a = a;this.b = b;this.c = c;this.normal = d instanceof THREE.Vector3 ? d : new THREE.Vector3();this.vertexNormals = Array.isArray(d) ? d : [];this.color = e instanceof THREE.Color ? e : new THREE.Color();this.vertexColors = Array.isArray(e) ? e : [];this.materialIndex = void 0 !== g ? g : 0;
	};
	THREE.Face3.prototype = { constructor: THREE.Face3, clone: function clone() {
	    return new this.constructor().copy(this);
	  }, copy: function copy(a) {
	    this.a = a.a;this.b = a.b;this.c = a.c;this.normal.copy(a.normal);this.color.copy(a.color);this.materialIndex = a.materialIndex;for (var b = 0, c = a.vertexNormals.length; b < c; b++) {
	      this.vertexNormals[b] = a.vertexNormals[b].clone();
	    }b = 0;for (c = a.vertexColors.length; b < c; b++) {
	      this.vertexColors[b] = a.vertexColors[b].clone();
	    }return this;
	  } };
	THREE.Face4 = function (a, b, c, d, e, g, f) {
	  console.warn("THREE.Face4 has been removed. A THREE.Face3 will be created instead.");return new THREE.Face3(a, b, c, e, g, f);
	};THREE.BufferAttribute = function (a, b) {
	  this.uuid = THREE.Math.generateUUID();this.array = a;this.itemSize = b;this.dynamic = !1;this.updateRange = { offset: 0, count: -1 };this.version = 0;
	};
	THREE.BufferAttribute.prototype = { constructor: THREE.BufferAttribute, get length() {
	    console.warn("THREE.BufferAttribute: .length has been deprecated. Please use .count.");return this.array.length;
	  }, get count() {
	    return this.array.length / this.itemSize;
	  }, set needsUpdate(a) {
	    !0 === a && this.version++;
	  }, setDynamic: function setDynamic(a) {
	    this.dynamic = a;return this;
	  }, copy: function copy(a) {
	    this.array = new a.array.constructor(a.array);this.itemSize = a.itemSize;this.dynamic = a.dynamic;return this;
	  }, copyAt: function copyAt(a, b, c) {
	    a *= this.itemSize;
	    c *= b.itemSize;for (var d = 0, e = this.itemSize; d < e; d++) {
	      this.array[a + d] = b.array[c + d];
	    }return this;
	  }, copyArray: function copyArray(a) {
	    this.array.set(a);return this;
	  }, copyColorsArray: function copyColorsArray(a) {
	    for (var b = this.array, c = 0, d = 0, e = a.length; d < e; d++) {
	      var g = a[d];void 0 === g && (console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined", d), g = new THREE.Color());b[c++] = g.r;b[c++] = g.g;b[c++] = g.b;
	    }return this;
	  }, copyIndicesArray: function copyIndicesArray(a) {
	    for (var b = this.array, c = 0, d = 0, e = a.length; d < e; d++) {
	      var g = a[d];b[c++] = g.a;b[c++] = g.b;b[c++] = g.c;
	    }return this;
	  }, copyVector2sArray: function copyVector2sArray(a) {
	    for (var b = this.array, c = 0, d = 0, e = a.length; d < e; d++) {
	      var g = a[d];void 0 === g && (console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined", d), g = new THREE.Vector2());b[c++] = g.x;b[c++] = g.y;
	    }return this;
	  }, copyVector3sArray: function copyVector3sArray(a) {
	    for (var b = this.array, c = 0, d = 0, e = a.length; d < e; d++) {
	      var g = a[d];void 0 === g && (console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined", d), g = new THREE.Vector3());b[c++] = g.x;b[c++] = g.y;b[c++] = g.z;
	    }return this;
	  },
	  copyVector4sArray: function copyVector4sArray(a) {
	    for (var b = this.array, c = 0, d = 0, e = a.length; d < e; d++) {
	      var g = a[d];void 0 === g && (console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined", d), g = new THREE.Vector4());b[c++] = g.x;b[c++] = g.y;b[c++] = g.z;b[c++] = g.w;
	    }return this;
	  }, set: function set(a, b) {
	    void 0 === b && (b = 0);this.array.set(a, b);return this;
	  }, getX: function getX(a) {
	    return this.array[a * this.itemSize];
	  }, setX: function setX(a, b) {
	    this.array[a * this.itemSize] = b;return this;
	  }, getY: function getY(a) {
	    return this.array[a * this.itemSize + 1];
	  },
	  setY: function setY(a, b) {
	    this.array[a * this.itemSize + 1] = b;return this;
	  }, getZ: function getZ(a) {
	    return this.array[a * this.itemSize + 2];
	  }, setZ: function setZ(a, b) {
	    this.array[a * this.itemSize + 2] = b;return this;
	  }, getW: function getW(a) {
	    return this.array[a * this.itemSize + 3];
	  }, setW: function setW(a, b) {
	    this.array[a * this.itemSize + 3] = b;return this;
	  }, setXY: function setXY(a, b, c) {
	    a *= this.itemSize;this.array[a + 0] = b;this.array[a + 1] = c;return this;
	  }, setXYZ: function setXYZ(a, b, c, d) {
	    a *= this.itemSize;this.array[a + 0] = b;this.array[a + 1] = c;this.array[a + 2] = d;return this;
	  }, setXYZW: function setXYZW(a, b, c, d, e) {
	    a *= this.itemSize;this.array[a + 0] = b;this.array[a + 1] = c;this.array[a + 2] = d;this.array[a + 3] = e;return this;
	  }, clone: function clone() {
	    return new this.constructor().copy(this);
	  } };THREE.Int8Attribute = function (a, b) {
	  return new THREE.BufferAttribute(new Int8Array(a), b);
	};THREE.Uint8Attribute = function (a, b) {
	  return new THREE.BufferAttribute(new Uint8Array(a), b);
	};THREE.Uint8ClampedAttribute = function (a, b) {
	  return new THREE.BufferAttribute(new Uint8ClampedArray(a), b);
	};
	THREE.Int16Attribute = function (a, b) {
	  return new THREE.BufferAttribute(new Int16Array(a), b);
	};THREE.Uint16Attribute = function (a, b) {
	  return new THREE.BufferAttribute(new Uint16Array(a), b);
	};THREE.Int32Attribute = function (a, b) {
	  return new THREE.BufferAttribute(new Int32Array(a), b);
	};THREE.Uint32Attribute = function (a, b) {
	  return new THREE.BufferAttribute(new Uint32Array(a), b);
	};THREE.Float32Attribute = function (a, b) {
	  return new THREE.BufferAttribute(new Float32Array(a), b);
	};
	THREE.Float64Attribute = function (a, b) {
	  return new THREE.BufferAttribute(new Float64Array(a), b);
	};THREE.DynamicBufferAttribute = function (a, b) {
	  console.warn("THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.");return new THREE.BufferAttribute(a, b).setDynamic(!0);
	};THREE.InstancedBufferAttribute = function (a, b, c) {
	  THREE.BufferAttribute.call(this, a, b);this.meshPerAttribute = c || 1;
	};THREE.InstancedBufferAttribute.prototype = Object.create(THREE.BufferAttribute.prototype);
	THREE.InstancedBufferAttribute.prototype.constructor = THREE.InstancedBufferAttribute;THREE.InstancedBufferAttribute.prototype.copy = function (a) {
	  THREE.BufferAttribute.prototype.copy.call(this, a);this.meshPerAttribute = a.meshPerAttribute;return this;
	};THREE.InterleavedBuffer = function (a, b) {
	  this.uuid = THREE.Math.generateUUID();this.array = a;this.stride = b;this.dynamic = !1;this.updateRange = { offset: 0, count: -1 };this.version = 0;
	};
	THREE.InterleavedBuffer.prototype = { constructor: THREE.InterleavedBuffer, get length() {
	    return this.array.length;
	  }, get count() {
	    return this.array.length / this.stride;
	  }, set needsUpdate(a) {
	    !0 === a && this.version++;
	  }, setDynamic: function setDynamic(a) {
	    this.dynamic = a;return this;
	  }, copy: function copy(a) {
	    this.array = new a.array.constructor(a.array);this.stride = a.stride;this.dynamic = a.dynamic;
	  }, copyAt: function copyAt(a, b, c) {
	    a *= this.stride;c *= b.stride;for (var d = 0, e = this.stride; d < e; d++) {
	      this.array[a + d] = b.array[c + d];
	    }return this;
	  }, set: function set(a, b) {
	    void 0 === b && (b = 0);this.array.set(a, b);return this;
	  }, clone: function clone() {
	    return new this.constructor().copy(this);
	  } };THREE.InstancedInterleavedBuffer = function (a, b, c) {
	  THREE.InterleavedBuffer.call(this, a, b);this.meshPerAttribute = c || 1;
	};THREE.InstancedInterleavedBuffer.prototype = Object.create(THREE.InterleavedBuffer.prototype);THREE.InstancedInterleavedBuffer.prototype.constructor = THREE.InstancedInterleavedBuffer;
	THREE.InstancedInterleavedBuffer.prototype.copy = function (a) {
	  THREE.InterleavedBuffer.prototype.copy.call(this, a);this.meshPerAttribute = a.meshPerAttribute;return this;
	};THREE.InterleavedBufferAttribute = function (a, b, c) {
	  this.uuid = THREE.Math.generateUUID();this.data = a;this.itemSize = b;this.offset = c;
	};
	THREE.InterleavedBufferAttribute.prototype = { constructor: THREE.InterleavedBufferAttribute, get length() {
	    console.warn("THREE.BufferAttribute: .length has been deprecated. Please use .count.");return this.array.length;
	  }, get count() {
	    return this.data.array.length / this.data.stride;
	  }, setX: function setX(a, b) {
	    this.data.array[a * this.data.stride + this.offset] = b;return this;
	  }, setY: function setY(a, b) {
	    this.data.array[a * this.data.stride + this.offset + 1] = b;return this;
	  }, setZ: function setZ(a, b) {
	    this.data.array[a * this.data.stride + this.offset + 2] = b;return this;
	  }, setW: function setW(a, b) {
	    this.data.array[a * this.data.stride + this.offset + 3] = b;return this;
	  }, getX: function getX(a) {
	    return this.data.array[a * this.data.stride + this.offset];
	  }, getY: function getY(a) {
	    return this.data.array[a * this.data.stride + this.offset + 1];
	  }, getZ: function getZ(a) {
	    return this.data.array[a * this.data.stride + this.offset + 2];
	  }, getW: function getW(a) {
	    return this.data.array[a * this.data.stride + this.offset + 3];
	  }, setXY: function setXY(a, b, c) {
	    a = a * this.data.stride + this.offset;this.data.array[a + 0] = b;this.data.array[a + 1] = c;
	    return this;
	  }, setXYZ: function setXYZ(a, b, c, d) {
	    a = a * this.data.stride + this.offset;this.data.array[a + 0] = b;this.data.array[a + 1] = c;this.data.array[a + 2] = d;return this;
	  }, setXYZW: function setXYZW(a, b, c, d, e) {
	    a = a * this.data.stride + this.offset;this.data.array[a + 0] = b;this.data.array[a + 1] = c;this.data.array[a + 2] = d;this.data.array[a + 3] = e;return this;
	  } };
	THREE.Geometry = function () {
	  Object.defineProperty(this, "id", { value: THREE.GeometryIdCount++ });this.uuid = THREE.Math.generateUUID();this.name = "";this.type = "Geometry";this.vertices = [];this.colors = [];this.faces = [];this.faceVertexUvs = [[]];this.morphTargets = [];this.morphNormals = [];this.skinWeights = [];this.skinIndices = [];this.lineDistances = [];this.boundingSphere = this.boundingBox = null;this.groupsNeedUpdate = this.lineDistancesNeedUpdate = this.colorsNeedUpdate = this.normalsNeedUpdate = this.uvsNeedUpdate = this.elementsNeedUpdate = this.verticesNeedUpdate = !1;
	};
	THREE.Geometry.prototype = { constructor: THREE.Geometry, applyMatrix: function applyMatrix(a) {
	    for (var b = new THREE.Matrix3().getNormalMatrix(a), c = 0, d = this.vertices.length; c < d; c++) {
	      this.vertices[c].applyMatrix4(a);
	    }c = 0;for (d = this.faces.length; c < d; c++) {
	      a = this.faces[c];a.normal.applyMatrix3(b).normalize();for (var e = 0, g = a.vertexNormals.length; e < g; e++) {
	        a.vertexNormals[e].applyMatrix3(b).normalize();
	      }
	    }null !== this.boundingBox && this.computeBoundingBox();null !== this.boundingSphere && this.computeBoundingSphere();this.normalsNeedUpdate = this.verticesNeedUpdate = !0;
	  }, rotateX: function () {
	    var a;return function (b) {
	      void 0 === a && (a = new THREE.Matrix4());a.makeRotationX(b);this.applyMatrix(a);return this;
	    };
	  }(), rotateY: function () {
	    var a;return function (b) {
	      void 0 === a && (a = new THREE.Matrix4());a.makeRotationY(b);this.applyMatrix(a);return this;
	    };
	  }(), rotateZ: function () {
	    var a;return function (b) {
	      void 0 === a && (a = new THREE.Matrix4());a.makeRotationZ(b);this.applyMatrix(a);return this;
	    };
	  }(), translate: function () {
	    var a;return function (b, c, d) {
	      void 0 === a && (a = new THREE.Matrix4());
	      a.makeTranslation(b, c, d);this.applyMatrix(a);return this;
	    };
	  }(), scale: function () {
	    var a;return function (b, c, d) {
	      void 0 === a && (a = new THREE.Matrix4());a.makeScale(b, c, d);this.applyMatrix(a);return this;
	    };
	  }(), lookAt: function () {
	    var a;return function (b) {
	      void 0 === a && (a = new THREE.Object3D());a.lookAt(b);a.updateMatrix();this.applyMatrix(a.matrix);
	    };
	  }(), fromBufferGeometry: function fromBufferGeometry(a) {
	    function b(a, b, d) {
	      var e = void 0 !== f ? [m[a].clone(), m[b].clone(), m[d].clone()] : [],
	          g = void 0 !== h ? [c.colors[a].clone(), c.colors[b].clone(), c.colors[d].clone()] : [],
	          e = new THREE.Face3(a, b, d, e, g);c.faces.push(e);void 0 !== l && c.faceVertexUvs[0].push([p[a].clone(), p[b].clone(), p[d].clone()]);void 0 !== k && c.faceVertexUvs[1].push([n[a].clone(), n[b].clone(), n[d].clone()]);
	    }var c = this,
	        d = null !== a.index ? a.index.array : void 0,
	        e = a.attributes,
	        g = e.position.array,
	        f = void 0 !== e.normal ? e.normal.array : void 0,
	        h = void 0 !== e.color ? e.color.array : void 0,
	        l = void 0 !== e.uv ? e.uv.array : void 0,
	        k = void 0 !== e.uv2 ? e.uv2.array : void 0;void 0 !== k && (this.faceVertexUvs[1] = []);for (var m = [], p = [], n = [], q = e = 0; e < g.length; e += 3, q += 2) {
	      c.vertices.push(new THREE.Vector3(g[e], g[e + 1], g[e + 2])), void 0 !== f && m.push(new THREE.Vector3(f[e], f[e + 1], f[e + 2])), void 0 !== h && c.colors.push(new THREE.Color(h[e], h[e + 1], h[e + 2])), void 0 !== l && p.push(new THREE.Vector2(l[q], l[q + 1])), void 0 !== k && n.push(new THREE.Vector2(k[q], k[q + 1]));
	    }if (void 0 !== d) {
	      if (g = a.groups, 0 < g.length) for (e = 0; e < g.length; e++) {
	        for (var q = g[e], s = q.start, t = q.count, q = s, s = s + t; q < s; q += 3) {
	          b(d[q], d[q + 1], d[q + 2]);
	        }
	      } else for (e = 0; e < d.length; e += 3) {
	        b(d[e], d[e + 1], d[e + 2]);
	      }
	    } else for (e = 0; e < g.length / 3; e += 3) {
	      b(e, e + 1, e + 2);
	    }this.computeFaceNormals();null !== a.boundingBox && (this.boundingBox = a.boundingBox.clone());null !== a.boundingSphere && (this.boundingSphere = a.boundingSphere.clone());return this;
	  }, center: function center() {
	    this.computeBoundingBox();var a = this.boundingBox.center().negate();this.translate(a.x, a.y, a.z);return a;
	  }, normalize: function normalize() {
	    this.computeBoundingSphere();var a = this.boundingSphere.center,
	        b = this.boundingSphere.radius,
	        b = 0 === b ? 1 : 1 / b,
	        c = new THREE.Matrix4();c.set(b, 0, 0, -b * a.x, 0, b, 0, -b * a.y, 0, 0, b, -b * a.z, 0, 0, 0, 1);this.applyMatrix(c);return this;
	  }, computeFaceNormals: function computeFaceNormals() {
	    for (var a = new THREE.Vector3(), b = new THREE.Vector3(), c = 0, d = this.faces.length; c < d; c++) {
	      var e = this.faces[c],
	          g = this.vertices[e.a],
	          f = this.vertices[e.b];a.subVectors(this.vertices[e.c], f);b.subVectors(g, f);a.cross(b);a.normalize();e.normal.copy(a);
	    }
	  }, computeVertexNormals: function computeVertexNormals(a) {
	    var b, c, d;d = Array(this.vertices.length);b = 0;for (c = this.vertices.length; b < c; b++) {
	      d[b] = new THREE.Vector3();
	    }if (a) {
	      var e,
	          g,
	          f,
	          h = new THREE.Vector3(),
	          l = new THREE.Vector3();a = 0;for (b = this.faces.length; a < b; a++) {
	        c = this.faces[a], e = this.vertices[c.a], g = this.vertices[c.b], f = this.vertices[c.c], h.subVectors(f, g), l.subVectors(e, g), h.cross(l), d[c.a].add(h), d[c.b].add(h), d[c.c].add(h);
	      }
	    } else for (a = 0, b = this.faces.length; a < b; a++) {
	      c = this.faces[a], d[c.a].add(c.normal), d[c.b].add(c.normal), d[c.c].add(c.normal);
	    }b = 0;for (c = this.vertices.length; b < c; b++) {
	      d[b].normalize();
	    }a = 0;for (b = this.faces.length; a < b; a++) {
	      c = this.faces[a], e = c.vertexNormals, 3 === e.length ? (e[0].copy(d[c.a]), e[1].copy(d[c.b]), e[2].copy(d[c.c])) : (e[0] = d[c.a].clone(), e[1] = d[c.b].clone(), e[2] = d[c.c].clone());
	    }
	  }, computeMorphNormals: function computeMorphNormals() {
	    var a, b, c, d, e;c = 0;for (d = this.faces.length; c < d; c++) {
	      for (e = this.faces[c], e.__originalFaceNormal ? e.__originalFaceNormal.copy(e.normal) : e.__originalFaceNormal = e.normal.clone(), e.__originalVertexNormals || (e.__originalVertexNormals = []), a = 0, b = e.vertexNormals.length; a < b; a++) {
	        e.__originalVertexNormals[a] ? e.__originalVertexNormals[a].copy(e.vertexNormals[a]) : e.__originalVertexNormals[a] = e.vertexNormals[a].clone();
	      }
	    }var g = new THREE.Geometry();g.faces = this.faces;a = 0;for (b = this.morphTargets.length; a < b; a++) {
	      if (!this.morphNormals[a]) {
	        this.morphNormals[a] = {};this.morphNormals[a].faceNormals = [];this.morphNormals[a].vertexNormals = [];e = this.morphNormals[a].faceNormals;var f = this.morphNormals[a].vertexNormals,
	            h,
	            l;c = 0;for (d = this.faces.length; c < d; c++) {
	          h = new THREE.Vector3(), l = { a: new THREE.Vector3(), b: new THREE.Vector3(), c: new THREE.Vector3() }, e.push(h), f.push(l);
	        }
	      }f = this.morphNormals[a];g.vertices = this.morphTargets[a].vertices;
	      g.computeFaceNormals();g.computeVertexNormals();c = 0;for (d = this.faces.length; c < d; c++) {
	        e = this.faces[c], h = f.faceNormals[c], l = f.vertexNormals[c], h.copy(e.normal), l.a.copy(e.vertexNormals[0]), l.b.copy(e.vertexNormals[1]), l.c.copy(e.vertexNormals[2]);
	      }
	    }c = 0;for (d = this.faces.length; c < d; c++) {
	      e = this.faces[c], e.normal = e.__originalFaceNormal, e.vertexNormals = e.__originalVertexNormals;
	    }
	  }, computeTangents: function computeTangents() {
	    console.warn("THREE.Geometry: .computeTangents() has been removed.");
	  }, computeLineDistances: function computeLineDistances() {
	    for (var a = 0, b = this.vertices, c = 0, d = b.length; c < d; c++) {
	      0 < c && (a += b[c].distanceTo(b[c - 1])), this.lineDistances[c] = a;
	    }
	  }, computeBoundingBox: function computeBoundingBox() {
	    null === this.boundingBox && (this.boundingBox = new THREE.Box3());this.boundingBox.setFromPoints(this.vertices);
	  }, computeBoundingSphere: function computeBoundingSphere() {
	    null === this.boundingSphere && (this.boundingSphere = new THREE.Sphere());this.boundingSphere.setFromPoints(this.vertices);
	  }, merge: function merge(a, b, c) {
	    if (!1 === a instanceof THREE.Geometry) console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.", a);else {
	      var d,
	          e = this.vertices.length,
	          g = this.vertices,
	          f = a.vertices,
	          h = this.faces,
	          l = a.faces,
	          k = this.faceVertexUvs[0];a = a.faceVertexUvs[0];void 0 === c && (c = 0);void 0 !== b && (d = new THREE.Matrix3().getNormalMatrix(b));for (var m = 0, p = f.length; m < p; m++) {
	        var n = f[m].clone();void 0 !== b && n.applyMatrix4(b);g.push(n);
	      }m = 0;for (p = l.length; m < p; m++) {
	        var f = l[m],
	            q,
	            s = f.vertexNormals,
	            t = f.vertexColors,
	            n = new THREE.Face3(f.a + e, f.b + e, f.c + e);n.normal.copy(f.normal);void 0 !== d && n.normal.applyMatrix3(d).normalize();b = 0;for (g = s.length; b < g; b++) {
	          q = s[b].clone(), void 0 !== d && q.applyMatrix3(d).normalize(), n.vertexNormals.push(q);
	        }n.color.copy(f.color);b = 0;for (g = t.length; b < g; b++) {
	          q = t[b], n.vertexColors.push(q.clone());
	        }n.materialIndex = f.materialIndex + c;h.push(n);
	      }m = 0;for (p = a.length; m < p; m++) {
	        if (c = a[m], d = [], void 0 !== c) {
	          b = 0;for (g = c.length; b < g; b++) {
	            d.push(c[b].clone());
	          }k.push(d);
	        }
	      }
	    }
	  }, mergeMesh: function mergeMesh(a) {
	    !1 === a instanceof THREE.Mesh ? console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.", a) : (a.matrixAutoUpdate && a.updateMatrix(), this.merge(a.geometry, a.matrix));
	  }, mergeVertices: function mergeVertices() {
	    var a = {},
	        b = [],
	        c = [],
	        d,
	        e = Math.pow(10, 4),
	        g,
	        f;g = 0;for (f = this.vertices.length; g < f; g++) {
	      d = this.vertices[g], d = Math.round(d.x * e) + "_" + Math.round(d.y * e) + "_" + Math.round(d.z * e), void 0 === a[d] ? (a[d] = g, b.push(this.vertices[g]), c[g] = b.length - 1) : c[g] = c[a[d]];
	    }a = [];g = 0;for (f = this.faces.length; g < f; g++) {
	      for (e = this.faces[g], e.a = c[e.a], e.b = c[e.b], e.c = c[e.c], e = [e.a, e.b, e.c], d = 0; 3 > d; d++) {
	        if (e[d] === e[(d + 1) % 3]) {
	          a.push(g);break;
	        }
	      }
	    }for (g = a.length - 1; 0 <= g; g--) {
	      for (e = a[g], this.faces.splice(e, 1), c = 0, f = this.faceVertexUvs.length; c < f; c++) {
	        this.faceVertexUvs[c].splice(e, 1);
	      }
	    }g = this.vertices.length - b.length;this.vertices = b;return g;
	  }, sortFacesByMaterialIndex: function sortFacesByMaterialIndex() {
	    for (var a = this.faces, b = a.length, c = 0; c < b; c++) {
	      a[c]._id = c;
	    }a.sort(function (a, b) {
	      return a.materialIndex - b.materialIndex;
	    });var d = this.faceVertexUvs[0],
	        e = this.faceVertexUvs[1],
	        g,
	        f;d && d.length === b && (g = []);e && e.length === b && (f = []);for (c = 0; c < b; c++) {
	      var h = a[c]._id;g && g.push(d[h]);f && f.push(e[h]);
	    }g && (this.faceVertexUvs[0] = g);f && (this.faceVertexUvs[1] = f);
	  }, toJSON: function toJSON() {
	    function a(a, b, c) {
	      return c ? a | 1 << b : a & ~(1 << b);
	    }function b(a) {
	      var b = a.x.toString() + a.y.toString() + a.z.toString();if (void 0 !== k[b]) return k[b];k[b] = l.length / 3;l.push(a.x, a.y, a.z);return k[b];
	    }function c(a) {
	      var b = a.r.toString() + a.g.toString() + a.b.toString();if (void 0 !== p[b]) return p[b];p[b] = m.length;m.push(a.getHex());return p[b];
	    }function d(a) {
	      var b = a.x.toString() + a.y.toString();if (void 0 !== q[b]) return q[b];q[b] = n.length / 2;n.push(a.x, a.y);return q[b];
	    }var e = { metadata: { version: 4.4, type: "Geometry",
	        generator: "Geometry.toJSON" } };e.uuid = this.uuid;e.type = this.type;"" !== this.name && (e.name = this.name);if (void 0 !== this.parameters) {
	      var g = this.parameters,
	          f;for (f in g) {
	        void 0 !== g[f] && (e[f] = g[f]);
	      }return e;
	    }g = [];for (f = 0; f < this.vertices.length; f++) {
	      var h = this.vertices[f];g.push(h.x, h.y, h.z);
	    }var h = [],
	        l = [],
	        k = {},
	        m = [],
	        p = {},
	        n = [],
	        q = {};for (f = 0; f < this.faces.length; f++) {
	      var s = this.faces[f],
	          t = void 0 !== this.faceVertexUvs[0][f],
	          v = 0 < s.normal.length(),
	          u = 0 < s.vertexNormals.length,
	          w = 1 !== s.color.r || 1 !== s.color.g || 1 !== s.color.b,
	          D = 0 < s.vertexColors.length,
	          x = 0,
	          x = a(x, 0, 0),
	          x = a(x, 1, !1),
	          x = a(x, 2, !1),
	          x = a(x, 3, t),
	          x = a(x, 4, v),
	          x = a(x, 5, u),
	          x = a(x, 6, w),
	          x = a(x, 7, D);h.push(x);h.push(s.a, s.b, s.c);t && (t = this.faceVertexUvs[0][f], h.push(d(t[0]), d(t[1]), d(t[2])));v && h.push(b(s.normal));u && (v = s.vertexNormals, h.push(b(v[0]), b(v[1]), b(v[2])));w && h.push(c(s.color));D && (s = s.vertexColors, h.push(c(s[0]), c(s[1]), c(s[2])));
	    }e.data = {};e.data.vertices = g;e.data.normals = l;0 < m.length && (e.data.colors = m);0 < n.length && (e.data.uvs = [n]);e.data.faces = h;return e;
	  }, clone: function clone() {
	    return new this.constructor().copy(this);
	  },
	  copy: function copy(a) {
	    this.vertices = [];this.faces = [];this.faceVertexUvs = [[]];for (var b = a.vertices, c = 0, d = b.length; c < d; c++) {
	      this.vertices.push(b[c].clone());
	    }b = a.faces;c = 0;for (d = b.length; c < d; c++) {
	      this.faces.push(b[c].clone());
	    }c = 0;for (d = a.faceVertexUvs.length; c < d; c++) {
	      b = a.faceVertexUvs[c];void 0 === this.faceVertexUvs[c] && (this.faceVertexUvs[c] = []);for (var e = 0, g = b.length; e < g; e++) {
	        for (var f = b[e], h = [], l = 0, k = f.length; l < k; l++) {
	          h.push(f[l].clone());
	        }this.faceVertexUvs[c].push(h);
	      }
	    }return this;
	  }, dispose: function dispose() {
	    this.dispatchEvent({ type: "dispose" });
	  } };
	THREE.EventDispatcher.prototype.apply(THREE.Geometry.prototype);THREE.GeometryIdCount = 0;
	THREE.DirectGeometry = function () {
	  Object.defineProperty(this, "id", { value: THREE.GeometryIdCount++ });this.uuid = THREE.Math.generateUUID();this.name = "";this.type = "DirectGeometry";this.indices = [];this.vertices = [];this.normals = [];this.colors = [];this.uvs = [];this.uvs2 = [];this.groups = [];this.morphTargets = {};this.skinWeights = [];this.skinIndices = [];this.boundingSphere = this.boundingBox = null;this.groupsNeedUpdate = this.uvsNeedUpdate = this.colorsNeedUpdate = this.normalsNeedUpdate = this.verticesNeedUpdate = !1;
	};
	THREE.DirectGeometry.prototype = { constructor: THREE.DirectGeometry, computeBoundingBox: THREE.Geometry.prototype.computeBoundingBox, computeBoundingSphere: THREE.Geometry.prototype.computeBoundingSphere, computeFaceNormals: function computeFaceNormals() {
	    console.warn("THREE.DirectGeometry: computeFaceNormals() is not a method of this type of geometry.");
	  }, computeVertexNormals: function computeVertexNormals() {
	    console.warn("THREE.DirectGeometry: computeVertexNormals() is not a method of this type of geometry.");
	  }, computeGroups: function computeGroups(a) {
	    var b,
	        c = [],
	        d;a = a.faces;for (var e = 0; e < a.length; e++) {
	      var g = a[e];g.materialIndex !== d && (d = g.materialIndex, void 0 !== b && (b.count = 3 * e - b.start, c.push(b)), b = { start: 3 * e, materialIndex: d });
	    }void 0 !== b && (b.count = 3 * e - b.start, c.push(b));this.groups = c;
	  }, fromGeometry: function fromGeometry(a) {
	    var b = a.faces,
	        c = a.vertices,
	        d = a.faceVertexUvs,
	        e = d[0] && 0 < d[0].length,
	        g = d[1] && 0 < d[1].length,
	        f = a.morphTargets,
	        h = f.length;if (0 < h) {
	      for (var l = [], k = 0; k < h; k++) {
	        l[k] = [];
	      }this.morphTargets.position = l;
	    }var m = a.morphNormals,
	        p = m.length;if (0 < p) {
	      for (var n = [], k = 0; k < p; k++) {
	        n[k] = [];
	      }this.morphTargets.normal = n;
	    }for (var q = a.skinIndices, s = a.skinWeights, t = q.length === c.length, v = s.length === c.length, k = 0; k < b.length; k++) {
	      var u = b[k];this.vertices.push(c[u.a], c[u.b], c[u.c]);var w = u.vertexNormals;3 === w.length ? this.normals.push(w[0], w[1], w[2]) : (w = u.normal, this.normals.push(w, w, w));w = u.vertexColors;3 === w.length ? this.colors.push(w[0], w[1], w[2]) : (w = u.color, this.colors.push(w, w, w));!0 === e && (w = d[0][k], void 0 !== w ? this.uvs.push(w[0], w[1], w[2]) : (console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ", k), this.uvs.push(new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2())));!0 === g && (w = d[1][k], void 0 !== w ? this.uvs2.push(w[0], w[1], w[2]) : (console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ", k), this.uvs2.push(new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2())));for (w = 0; w < h; w++) {
	        var D = f[w].vertices;l[w].push(D[u.a], D[u.b], D[u.c]);
	      }for (w = 0; w < p; w++) {
	        D = m[w].vertexNormals[k], n[w].push(D.a, D.b, D.c);
	      }t && this.skinIndices.push(q[u.a], q[u.b], q[u.c]);v && this.skinWeights.push(s[u.a], s[u.b], s[u.c]);
	    }this.computeGroups(a);this.verticesNeedUpdate = a.verticesNeedUpdate;this.normalsNeedUpdate = a.normalsNeedUpdate;this.colorsNeedUpdate = a.colorsNeedUpdate;this.uvsNeedUpdate = a.uvsNeedUpdate;this.groupsNeedUpdate = a.groupsNeedUpdate;return this;
	  }, dispose: function dispose() {
	    this.dispatchEvent({ type: "dispose" });
	  } };THREE.EventDispatcher.prototype.apply(THREE.DirectGeometry.prototype);
	THREE.BufferGeometry = function () {
	  Object.defineProperty(this, "id", { value: THREE.GeometryIdCount++ });this.uuid = THREE.Math.generateUUID();this.name = "";this.type = "BufferGeometry";this.index = null;this.attributes = {};this.morphAttributes = {};this.groups = [];this.boundingSphere = this.boundingBox = null;this.drawRange = { start: 0, count: Infinity };
	};
	THREE.BufferGeometry.prototype = { constructor: THREE.BufferGeometry, addIndex: function addIndex(a) {
	    console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().");this.setIndex(a);
	  }, getIndex: function getIndex() {
	    return this.index;
	  }, setIndex: function setIndex(a) {
	    this.index = a;
	  }, addAttribute: function addAttribute(a, b, c) {
	    !1 === b instanceof THREE.BufferAttribute && !1 === b instanceof THREE.InterleavedBufferAttribute ? (console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."), this.addAttribute(a, new THREE.BufferAttribute(b, c))) : "index" === a ? (console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."), this.setIndex(b)) : this.attributes[a] = b;
	  }, getAttribute: function getAttribute(a) {
	    return this.attributes[a];
	  }, removeAttribute: function removeAttribute(a) {
	    delete this.attributes[a];
	  }, get drawcalls() {
	    console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups.");return this.groups;
	  }, get offsets() {
	    console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups.");return this.groups;
	  }, addDrawCall: function addDrawCall(a, b, c) {
	    void 0 !== c && console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.");console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup().");this.addGroup(a, b);
	  }, clearDrawCalls: function clearDrawCalls() {
	    console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().");this.clearGroups();
	  }, addGroup: function addGroup(a, b, c) {
	    this.groups.push({ start: a, count: b, materialIndex: void 0 !== c ? c : 0 });
	  }, clearGroups: function clearGroups() {
	    this.groups = [];
	  }, setDrawRange: function setDrawRange(a, b) {
	    this.drawRange.start = a;this.drawRange.count = b;
	  }, applyMatrix: function applyMatrix(a) {
	    var b = this.attributes.position;void 0 !== b && (a.applyToVector3Array(b.array), b.needsUpdate = !0);b = this.attributes.normal;void 0 !== b && (new THREE.Matrix3().getNormalMatrix(a).applyToVector3Array(b.array), b.needsUpdate = !0);null !== this.boundingBox && this.computeBoundingBox();null !== this.boundingSphere && this.computeBoundingSphere();
	  }, rotateX: function () {
	    var a;return function (b) {
	      void 0 === a && (a = new THREE.Matrix4());a.makeRotationX(b);this.applyMatrix(a);return this;
	    };
	  }(), rotateY: function () {
	    var a;
	    return function (b) {
	      void 0 === a && (a = new THREE.Matrix4());a.makeRotationY(b);this.applyMatrix(a);return this;
	    };
	  }(), rotateZ: function () {
	    var a;return function (b) {
	      void 0 === a && (a = new THREE.Matrix4());a.makeRotationZ(b);this.applyMatrix(a);return this;
	    };
	  }(), translate: function () {
	    var a;return function (b, c, d) {
	      void 0 === a && (a = new THREE.Matrix4());a.makeTranslation(b, c, d);this.applyMatrix(a);return this;
	    };
	  }(), scale: function () {
	    var a;return function (b, c, d) {
	      void 0 === a && (a = new THREE.Matrix4());a.makeScale(b, c, d);this.applyMatrix(a);
	      return this;
	    };
	  }(), lookAt: function () {
	    var a;return function (b) {
	      void 0 === a && (a = new THREE.Object3D());a.lookAt(b);a.updateMatrix();this.applyMatrix(a.matrix);
	    };
	  }(), center: function center() {
	    this.computeBoundingBox();var a = this.boundingBox.center().negate();this.translate(a.x, a.y, a.z);return a;
	  }, setFromObject: function setFromObject(a) {
	    var b = a.geometry;if (a instanceof THREE.Points || a instanceof THREE.Line) {
	      a = new THREE.Float32Attribute(3 * b.vertices.length, 3);var c = new THREE.Float32Attribute(3 * b.colors.length, 3);this.addAttribute("position", a.copyVector3sArray(b.vertices));this.addAttribute("color", c.copyColorsArray(b.colors));b.lineDistances && b.lineDistances.length === b.vertices.length && (a = new THREE.Float32Attribute(b.lineDistances.length, 1), this.addAttribute("lineDistance", a.copyArray(b.lineDistances)));null !== b.boundingSphere && (this.boundingSphere = b.boundingSphere.clone());null !== b.boundingBox && (this.boundingBox = b.boundingBox.clone());
	    } else a instanceof THREE.Mesh && b instanceof THREE.Geometry && this.fromGeometry(b);return this;
	  }, updateFromObject: function updateFromObject(a) {
	    var b = a.geometry;if (a instanceof THREE.Mesh) {
	      var c = b.__directGeometry;if (void 0 === c) return this.fromGeometry(b);c.verticesNeedUpdate = b.verticesNeedUpdate;c.normalsNeedUpdate = b.normalsNeedUpdate;c.colorsNeedUpdate = b.colorsNeedUpdate;c.uvsNeedUpdate = b.uvsNeedUpdate;c.groupsNeedUpdate = b.groupsNeedUpdate;b.verticesNeedUpdate = !1;b.normalsNeedUpdate = !1;b.colorsNeedUpdate = !1;b.uvsNeedUpdate = !1;b.groupsNeedUpdate = !1;b = c;
	    }!0 === b.verticesNeedUpdate && (c = this.attributes.position, void 0 !== c && (c.copyVector3sArray(b.vertices), c.needsUpdate = !0), b.verticesNeedUpdate = !1);!0 === b.normalsNeedUpdate && (c = this.attributes.normal, void 0 !== c && (c.copyVector3sArray(b.normals), c.needsUpdate = !0), b.normalsNeedUpdate = !1);!0 === b.colorsNeedUpdate && (c = this.attributes.color, void 0 !== c && (c.copyColorsArray(b.colors), c.needsUpdate = !0), b.colorsNeedUpdate = !1);b.uvsNeedUpdate && (c = this.attributes.uv, void 0 !== c && (c.copyVector2sArray(b.uvs), c.needsUpdate = !0), b.uvsNeedUpdate = !1);b.lineDistancesNeedUpdate && (c = this.attributes.lineDistance, void 0 !== c && (c.copyArray(b.lineDistances), c.needsUpdate = !0), b.lineDistancesNeedUpdate = !1);b.groupsNeedUpdate && (b.computeGroups(a.geometry), this.groups = b.groups, b.groupsNeedUpdate = !1);return this;
	  }, fromGeometry: function fromGeometry(a) {
	    a.__directGeometry = new THREE.DirectGeometry().fromGeometry(a);return this.fromDirectGeometry(a.__directGeometry);
	  }, fromDirectGeometry: function fromDirectGeometry(a) {
	    var b = new Float32Array(3 * a.vertices.length);this.addAttribute("position", new THREE.BufferAttribute(b, 3).copyVector3sArray(a.vertices));0 < a.normals.length && (b = new Float32Array(3 * a.normals.length), this.addAttribute("normal", new THREE.BufferAttribute(b, 3).copyVector3sArray(a.normals)));0 < a.colors.length && (b = new Float32Array(3 * a.colors.length), this.addAttribute("color", new THREE.BufferAttribute(b, 3).copyColorsArray(a.colors)));0 < a.uvs.length && (b = new Float32Array(2 * a.uvs.length), this.addAttribute("uv", new THREE.BufferAttribute(b, 2).copyVector2sArray(a.uvs)));0 < a.uvs2.length && (b = new Float32Array(2 * a.uvs2.length), this.addAttribute("uv2", new THREE.BufferAttribute(b, 2).copyVector2sArray(a.uvs2)));0 < a.indices.length && (b = new (65535 < a.vertices.length ? Uint32Array : Uint16Array)(3 * a.indices.length), this.setIndex(new THREE.BufferAttribute(b, 1).copyIndicesArray(a.indices)));this.groups = a.groups;for (var c in a.morphTargets) {
	      for (var b = [], d = a.morphTargets[c], e = 0, g = d.length; e < g; e++) {
	        var f = d[e],
	            h = new THREE.Float32Attribute(3 * f.length, 3);b.push(h.copyVector3sArray(f));
	      }this.morphAttributes[c] = b;
	    }0 < a.skinIndices.length && (c = new THREE.Float32Attribute(4 * a.skinIndices.length, 4), this.addAttribute("skinIndex", c.copyVector4sArray(a.skinIndices)));0 < a.skinWeights.length && (c = new THREE.Float32Attribute(4 * a.skinWeights.length, 4), this.addAttribute("skinWeight", c.copyVector4sArray(a.skinWeights)));null !== a.boundingSphere && (this.boundingSphere = a.boundingSphere.clone());null !== a.boundingBox && (this.boundingBox = a.boundingBox.clone());return this;
	  }, computeBoundingBox: function () {
	    var a = new THREE.Vector3();return function () {
	      null === this.boundingBox && (this.boundingBox = new THREE.Box3());var b = this.attributes.position.array;if (b) {
	        var c = this.boundingBox;c.makeEmpty();for (var d = 0, e = b.length; d < e; d += 3) {
	          a.fromArray(b, d), c.expandByPoint(a);
	        }
	      }if (void 0 === b || 0 === b.length) this.boundingBox.min.set(0, 0, 0), this.boundingBox.max.set(0, 0, 0);(isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) && console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
	    };
	  }(), computeBoundingSphere: function () {
	    var a = new THREE.Box3(),
	        b = new THREE.Vector3();return function () {
	      null === this.boundingSphere && (this.boundingSphere = new THREE.Sphere());var c = this.attributes.position.array;if (c) {
	        a.makeEmpty();for (var d = this.boundingSphere.center, e = 0, g = c.length; e < g; e += 3) {
	          b.fromArray(c, e), a.expandByPoint(b);
	        }a.center(d);for (var f = 0, e = 0, g = c.length; e < g; e += 3) {
	          b.fromArray(c, e), f = Math.max(f, d.distanceToSquared(b));
	        }this.boundingSphere.radius = Math.sqrt(f);isNaN(this.boundingSphere.radius) && console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
	      }
	    };
	  }(), computeFaceNormals: function computeFaceNormals() {}, computeVertexNormals: function computeVertexNormals() {
	    var a = this.index,
	        b = this.attributes,
	        c = this.groups;if (b.position) {
	      var d = b.position.array;if (void 0 === b.normal) this.addAttribute("normal", new THREE.BufferAttribute(new Float32Array(d.length), 3));else for (var e = b.normal.array, g = 0, f = e.length; g < f; g++) {
	        e[g] = 0;
	      }var e = b.normal.array,
	          h,
	          l,
	          k,
	          m = new THREE.Vector3(),
	          p = new THREE.Vector3(),
	          n = new THREE.Vector3(),
	          q = new THREE.Vector3(),
	          s = new THREE.Vector3();if (a) {
	        a = a.array;0 === c.length && this.addGroup(0, a.length);
	        for (var t = 0, v = c.length; t < v; ++t) {
	          for (g = c[t], f = g.start, h = g.count, g = f, f += h; g < f; g += 3) {
	            h = 3 * a[g + 0], l = 3 * a[g + 1], k = 3 * a[g + 2], m.fromArray(d, h), p.fromArray(d, l), n.fromArray(d, k), q.subVectors(n, p), s.subVectors(m, p), q.cross(s), e[h] += q.x, e[h + 1] += q.y, e[h + 2] += q.z, e[l] += q.x, e[l + 1] += q.y, e[l + 2] += q.z, e[k] += q.x, e[k + 1] += q.y, e[k + 2] += q.z;
	          }
	        }
	      } else for (g = 0, f = d.length; g < f; g += 9) {
	        m.fromArray(d, g), p.fromArray(d, g + 3), n.fromArray(d, g + 6), q.subVectors(n, p), s.subVectors(m, p), q.cross(s), e[g] = q.x, e[g + 1] = q.y, e[g + 2] = q.z, e[g + 3] = q.x, e[g + 4] = q.y, e[g + 5] = q.z, e[g + 6] = q.x, e[g + 7] = q.y, e[g + 8] = q.z;
	      }this.normalizeNormals();b.normal.needsUpdate = !0;
	    }
	  }, computeTangents: function computeTangents() {
	    console.warn("THREE.BufferGeometry: .computeTangents() has been removed.");
	  }, computeOffsets: function computeOffsets(a) {
	    console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.");
	  }, merge: function merge(a, b) {
	    if (!1 === a instanceof THREE.BufferGeometry) console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.", a);else {
	      void 0 === b && (b = 0);var c = this.attributes,
	          d;for (d in c) {
	        if (void 0 !== a.attributes[d]) for (var e = c[d].array, g = a.attributes[d], f = g.array, h = 0, g = g.itemSize * b; h < f.length; h++, g++) {
	          e[g] = f[h];
	        }
	      }return this;
	    }
	  }, normalizeNormals: function normalizeNormals() {
	    for (var a = this.attributes.normal.array, b, c, d, e = 0, g = a.length; e < g; e += 3) {
	      b = a[e], c = a[e + 1], d = a[e + 2], b = 1 / Math.sqrt(b * b + c * c + d * d), a[e] *= b, a[e + 1] *= b, a[e + 2] *= b;
	    }
	  }, toJSON: function toJSON() {
	    var a = { metadata: { version: 4.4, type: "BufferGeometry", generator: "BufferGeometry.toJSON" } };a.uuid = this.uuid;a.type = this.type;"" !== this.name && (a.name = this.name);
	    if (void 0 !== this.parameters) {
	      var b = this.parameters,
	          c;for (c in b) {
	        void 0 !== b[c] && (a[c] = b[c]);
	      }return a;
	    }a.data = { attributes: {} };var d = this.index;null !== d && (b = Array.prototype.slice.call(d.array), a.data.index = { type: d.array.constructor.name, array: b });d = this.attributes;for (c in d) {
	      var e = d[c],
	          b = Array.prototype.slice.call(e.array);a.data.attributes[c] = { itemSize: e.itemSize, type: e.array.constructor.name, array: b };
	    }c = this.groups;0 < c.length && (a.data.groups = JSON.parse(JSON.stringify(c)));c = this.boundingSphere;null !== c && (a.data.boundingSphere = { center: c.center.toArray(), radius: c.radius });return a;
	  }, clone: function clone() {
	    return new this.constructor().copy(this);
	  }, copy: function copy(a) {
	    var b = a.index;null !== b && this.setIndex(b.clone());var b = a.attributes,
	        c;for (c in b) {
	      this.addAttribute(c, b[c].clone());
	    }a = a.groups;c = 0;for (b = a.length; c < b; c++) {
	      var d = a[c];this.addGroup(d.start, d.count);
	    }return this;
	  }, dispose: function dispose() {
	    this.dispatchEvent({ type: "dispose" });
	  } };THREE.EventDispatcher.prototype.apply(THREE.BufferGeometry.prototype);
	THREE.BufferGeometry.MaxIndex = 65535;THREE.InstancedBufferGeometry = function () {
	  THREE.BufferGeometry.call(this);this.type = "InstancedBufferGeometry";this.maxInstancedCount = void 0;
	};THREE.InstancedBufferGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);THREE.InstancedBufferGeometry.prototype.constructor = THREE.InstancedBufferGeometry;THREE.InstancedBufferGeometry.prototype.addGroup = function (a, b, c) {
	  this.groups.push({ start: a, count: b, instances: c });
	};
	THREE.InstancedBufferGeometry.prototype.copy = function (a) {
	  var b = a.index;null !== b && this.setIndex(b.clone());var b = a.attributes,
	      c;for (c in b) {
	    this.addAttribute(c, b[c].clone());
	  }a = a.groups;c = 0;for (b = a.length; c < b; c++) {
	    var d = a[c];this.addGroup(d.start, d.count, d.instances);
	  }return this;
	};THREE.EventDispatcher.prototype.apply(THREE.InstancedBufferGeometry.prototype);
	THREE.AnimationAction = function (a, b, c, d, e) {
	  if (void 0 === a) throw Error("clip is null");this.clip = a;this.localRoot = null;this.startTime = b || 0;this.timeScale = c || 1;this.weight = d || 1;this.loop = e || THREE.LoopRepeat;this.loopCount = 0;this.enabled = !0;this.actionTime = -this.startTime;this.clipTime = 0;this.propertyBindings = [];
	};
	THREE.AnimationAction.prototype = { constructor: THREE.AnimationAction, setLocalRoot: function setLocalRoot(a) {
	    this.localRoot = a;return this;
	  }, updateTime: function updateTime(a) {
	    var b = this.clipTime,
	        c = this.loopCount,
	        d = this.clip.duration;this.actionTime += a;if (this.loop === THREE.LoopOnce) return this.loopCount = 0, this.clipTime = Math.min(Math.max(this.actionTime, 0), d), this.clipTime !== b && (this.clipTime === d ? this.mixer.dispatchEvent({ type: "finished", action: this, direction: 1 }) : 0 === this.clipTime && this.mixer.dispatchEvent({ type: "finished", action: this,
	      direction: -1 })), this.clipTime;this.loopCount = Math.floor(this.actionTime / d);a = this.actionTime - this.loopCount * d;a %= d;this.loop == THREE.LoopPingPong && 1 === Math.abs(this.loopCount % 2) && (a = d - a);this.clipTime = a;this.loopCount !== c && this.mixer.dispatchEvent({ type: "loop", action: this, loopDelta: this.loopCount - this.loopCount });return this.clipTime;
	  }, syncWith: function syncWith(a) {
	    this.actionTime = a.actionTime;this.timeScale = a.timeScale;return this;
	  }, warpToDuration: function warpToDuration(a) {
	    this.timeScale = this.clip.duration / a;return this;
	  },
	  init: function init(a) {
	    this.clipTime = a - this.startTime;return this;
	  }, update: function update(a) {
	    this.updateTime(a);return this.clip.getAt(this.clipTime);
	  }, getTimeScaleAt: function getTimeScaleAt(a) {
	    return this.timeScale.getAt ? this.timeScale.getAt(a) : this.timeScale;
	  }, getWeightAt: function getWeightAt(a) {
	    return this.weight.getAt ? this.weight.getAt(a) : this.weight;
	  } };
	THREE.AnimationClip = function (a, b, c) {
	  this.name = a;this.tracks = c;this.duration = void 0 !== b ? b : -1;if (0 > this.duration) for (a = 0; a < this.tracks.length; a++) {
	    b = this.tracks[a], this.duration = Math.max(b.keys[b.keys.length - 1].time);
	  }this.trim();this.optimize();this.results = [];
	};
	THREE.AnimationClip.prototype = { constructor: THREE.AnimationClip, getAt: function getAt(a) {
	    a = Math.max(0, Math.min(a, this.duration));for (var b = 0; b < this.tracks.length; b++) {
	      this.results[b] = this.tracks[b].getAt(a);
	    }return this.results;
	  }, trim: function trim() {
	    for (var a = 0; a < this.tracks.length; a++) {
	      this.tracks[a].trim(0, this.duration);
	    }return this;
	  }, optimize: function optimize() {
	    for (var a = 0; a < this.tracks.length; a++) {
	      this.tracks[a].optimize();
	    }return this;
	  } };
	THREE.AnimationClip.CreateFromMorphTargetSequence = function (a, b, c) {
	  for (var d = b.length, e = [], g = 0; g < d; g++) {
	    var f = [];f.push({ time: (g + d - 1) % d, value: 0 });f.push({ time: g, value: 1 });f.push({ time: (g + 1) % d, value: 0 });f.sort(THREE.KeyframeTrack.keyComparer);0 === f[0].time && f.push({ time: d, value: f[0].value });e.push(new THREE.NumberKeyframeTrack(".morphTargetInfluences[" + b[g].name + "]", f).scale(1 / c));
	  }return new THREE.AnimationClip(a, -1, e);
	};
	THREE.AnimationClip.findByName = function (a, b) {
	  for (var c = 0; c < a.length; c++) {
	    if (a[c].name === b) return a[c];
	  }return null;
	};THREE.AnimationClip.CreateClipsFromMorphTargetSequences = function (a, b) {
	  for (var c = {}, d = /^([\w-]*?)([\d]+)$/, e = 0, g = a.length; e < g; e++) {
	    var f = a[e],
	        h = f.name.match(d);if (h && 1 < h.length) {
	      var l = h[1];(h = c[l]) || (c[l] = h = []);h.push(f);
	    }
	  }d = [];for (l in c) {
	    d.push(THREE.AnimationClip.CreateFromMorphTargetSequence(l, c[l], b));
	  }return d;
	};
	THREE.AnimationClip.parse = function (a) {
	  for (var b = [], c = 0; c < a.tracks.length; c++) {
	    b.push(THREE.KeyframeTrack.parse(a.tracks[c]).scale(1 / a.fps));
	  }return new THREE.AnimationClip(a.name, a.duration, b);
	};
	THREE.AnimationClip.parseAnimation = function (a, b, c) {
	  if (!a) return console.error("  no animation in JSONLoader data"), null;var d = function d(a, b, c, _d, e) {
	    for (var g = [], f = 0; f < b.length; f++) {
	      var h = b[f];void 0 !== h[c] && g.push({ time: h.time, value: e(h) });
	    }return 0 < g.length ? new _d(a, g) : null;
	  },
	      e = [],
	      g = a.name || "default",
	      f = a.length || -1,
	      h = a.fps || 30;a = a.hierarchy || [];for (var l = 0; l < a.length; l++) {
	    var k = a[l].keys;if (k && 0 != k.length) if (k[0].morphTargets) {
	      for (var f = {}, m = 0; m < k.length; m++) {
	        if (k[m].morphTargets) for (var p = 0; p < k[m].morphTargets.length; p++) {
	          f[k[m].morphTargets[p]] = -1;
	        }
	      }for (var n in f) {
	        for (var q = [], p = 0; p < k[m].morphTargets.length; p++) {
	          var s = k[m];q.push({ time: s.time, value: s.morphTarget === n ? 1 : 0 });
	        }e.push(new THREE.NumberKeyframeTrack(c + ".morphTargetInfluence[" + n + "]", q));
	      }f = f.length * (h || 1);
	    } else m = c + ".bones[" + b[l].name + "]", (p = d(m + ".position", k, "pos", THREE.VectorKeyframeTrack, function (a) {
	      return new THREE.Vector3().fromArray(a.pos);
	    })) && e.push(p), (p = d(m + ".quaternion", k, "rot", THREE.QuaternionKeyframeTrack, function (a) {
	      return a.rot.slerp ? a.rot.clone() : new THREE.Quaternion().fromArray(a.rot);
	    })) && e.push(p), (k = d(m + ".scale", k, "scl", THREE.VectorKeyframeTrack, function (a) {
	      return new THREE.Vector3().fromArray(a.scl);
	    })) && e.push(k);
	  }return 0 === e.length ? null : new THREE.AnimationClip(g, f, e);
	};THREE.AnimationMixer = function (a) {
	  this.root = a;this.time = 0;this.timeScale = 1;this.actions = [];this.propertyBindingMap = {};
	};
	THREE.AnimationMixer.prototype = { constructor: THREE.AnimationMixer, addAction: function addAction(a) {
	    this.actions.push(a);a.init(this.time);a.mixer = this;for (var b = a.clip.tracks, c = a.localRoot || this.root, d = 0; d < b.length; d++) {
	      var e = b[d],
	          g = c.uuid + "-" + e.name,
	          f = this.propertyBindingMap[g];void 0 === f && (f = new THREE.PropertyBinding(c, e.name), this.propertyBindingMap[g] = f);a.propertyBindings.push(f);f.referenceCount += 1;
	    }
	  }, removeAllActions: function removeAllActions() {
	    for (var a = 0; a < this.actions.length; a++) {
	      this.actions[a].mixer = null;
	    }for (var b in this.propertyBindingMap) {
	      this.propertyBindingMap[b].unbind();
	    }this.actions = [];this.propertyBindingMap = {};return this;
	  }, removeAction: function removeAction(a) {
	    var b = this.actions.indexOf(a);-1 !== b && (this.actions.splice(b, 1), a.mixer = null);b = a.localRoot || this.root;a = a.clip.tracks;for (var c = 0; c < a.length; c++) {
	      var d = b.uuid + "-" + a[c].name,
	          e = this.propertyBindingMap[d];e.referenceCount -= 1;0 >= e.referenceCount && (e.unbind(), delete this.propertyBindingMap[d]);
	    }return this;
	  }, findActionByName: function findActionByName(a) {
	    for (var b = 0; b < this.actions.length; b++) {
	      if (this.actions[b].name === a) return this.actions[b];
	    }return null;
	  }, play: function play(a, b) {
	    a.startTime = this.time;this.addAction(a);return this;
	  }, fadeOut: function fadeOut(a, b) {
	    var c = [];c.push({ time: this.time, value: 1 });c.push({ time: this.time + b, value: 0 });a.weight = new THREE.NumberKeyframeTrack("weight", c);return this;
	  }, fadeIn: function fadeIn(a, b) {
	    var c = [];c.push({ time: this.time, value: 0 });c.push({ time: this.time + b, value: 1 });a.weight = new THREE.NumberKeyframeTrack("weight", c);return this;
	  }, warp: function warp(a, b, c, d) {
	    var e = [];e.push({ time: this.time, value: b });e.push({ time: this.time + d, value: c });
	    a.timeScale = new THREE.NumberKeyframeTrack("timeScale", e);return this;
	  }, crossFade: function crossFade(a, b, c, d) {
	    this.fadeOut(a, c);this.fadeIn(b, c);if (d) {
	      d = a.clip.duration / b.clip.duration;var e = 1 / d;this.warp(a, 1, d, c);this.warp(b, e, 1, c);
	    }return this;
	  }, update: function update(a) {
	    a *= this.timeScale;this.time += a;for (var b = 0; b < this.actions.length; b++) {
	      var c = this.actions[b],
	          d = c.getWeightAt(this.time),
	          e = c.getTimeScaleAt(this.time),
	          e = c.update(a * e);if (!(0 >= c.weight) && c.enabled) for (var g = 0; g < e.length; g++) {
	        c.propertyBindings[g].accumulate(e[g], d);
	      }
	    }for (var f in this.propertyBindingMap) {
	      this.propertyBindingMap[f].apply();
	    }return this;
	  } };THREE.EventDispatcher.prototype.apply(THREE.AnimationMixer.prototype);
	THREE.AnimationUtils = { getEqualsFunc: function getEqualsFunc(a) {
	    return a.equals ? function (a, c) {
	      return a.equals(c);
	    } : function (a, c) {
	      return a === c;
	    };
	  }, clone: function clone(a) {
	    if ("object" === (typeof a === "undefined" ? "undefined" : _typeof(a))) {
	      if (a.clone) return a.clone();console.error("can not figure out how to copy exemplarValue", a);
	    }return a;
	  }, lerp: function lerp(a, b, c, d) {
	    return THREE.AnimationUtils.getLerpFunc(a, d)(a, b, c);
	  }, lerp_object: function lerp_object(a, b, c) {
	    return a.lerp(b, c);
	  }, slerp_object: function slerp_object(a, b, c) {
	    return a.slerp(b, c);
	  }, lerp_number: function lerp_number(a, b, c) {
	    return a * (1 - c) + b * c;
	  }, lerp_boolean: function lerp_boolean(a, b, c) {
	    return .5 > c ? a : b;
	  }, lerp_boolean_immediate: function lerp_boolean_immediate(a, b, c) {
	    return a;
	  }, lerp_string: function lerp_string(a, b, c) {
	    return .5 > c ? a : b;
	  }, lerp_string_immediate: function lerp_string_immediate(a, b, c) {
	    return a;
	  }, getLerpFunc: function getLerpFunc(a, b) {
	    if (void 0 === a || null === a) throw Error("examplarValue is null");switch (typeof a === "undefined" ? "undefined" : _typeof(a)) {case "object":
	        if (a.lerp) return THREE.AnimationUtils.lerp_object;if (a.slerp) return THREE.AnimationUtils.slerp_object;break;case "number":
	        return THREE.AnimationUtils.lerp_number;case "boolean":
	        return b ? THREE.AnimationUtils.lerp_boolean : THREE.AnimationUtils.lerp_boolean_immediate;
	      case "string":
	        return b ? THREE.AnimationUtils.lerp_string : THREE.AnimationUtils.lerp_string_immediate;}
	  } };THREE.KeyframeTrack = function (a, b) {
	  if (void 0 === a) throw Error("track name is undefined");if (void 0 === b || 0 === b.length) throw Error("no keys in track named " + a);this.name = a;this.keys = b;this.lastIndex = 0;this.validate();this.optimize();
	};
	THREE.KeyframeTrack.prototype = { constructor: THREE.KeyframeTrack, getAt: function getAt(a) {
	    for (; this.lastIndex < this.keys.length && a >= this.keys[this.lastIndex].time;) {
	      this.lastIndex++;
	    }for (; 0 < this.lastIndex && a < this.keys[this.lastIndex - 1].time;) {
	      this.lastIndex--;
	    }if (this.lastIndex >= this.keys.length) return this.setResult(this.keys[this.keys.length - 1].value), this.result;if (0 === this.lastIndex) return this.setResult(this.keys[0].value), this.result;var b = this.keys[this.lastIndex - 1];this.setResult(b.value);if (b.constantToNext) return this.result;
	    var c = this.keys[this.lastIndex];return this.result = this.lerpValues(this.result, c.value, (a - b.time) / (c.time - b.time));
	  }, shift: function shift(a) {
	    if (0 !== a) for (var b = 0; b < this.keys.length; b++) {
	      this.keys[b].time += a;
	    }return this;
	  }, scale: function scale(a) {
	    if (1 !== a) for (var b = 0; b < this.keys.length; b++) {
	      this.keys[b].time *= a;
	    }return this;
	  }, trim: function trim(a, b) {
	    for (var c = 0, d = 1; d < this.keys.length; d++) {
	      this.keys[d] <= a && c++;
	    }for (var e = 0, d = this.keys.length - 2; 0 < d; d++) {
	      if (this.keys[d] >= b) e++;else break;
	    }0 < c + e && (this.keys = this.keys.splice(c, this.keys.length - e - c));return this;
	  }, validate: function validate() {
	    var a = null;if (0 === this.keys.length) console.error("  track is empty, no keys", this);else {
	      for (var b = 0; b < this.keys.length; b++) {
	        var c = this.keys[b];if (!c) {
	          console.error("  key is null in track", this, b);return;
	        }if ("number" !== typeof c.time || isNaN(c.time)) {
	          console.error("  key.time is not a valid number", this, b, c);return;
	        }if (void 0 === c.value || null === c.value) {
	          console.error("  key.value is null in track", this, b, c);return;
	        }if (a && a.time > c.time) {
	          console.error("  key.time is less than previous key time, out of order keys", this, b, c, a);return;
	        }a = c;
	      }return this;
	    }
	  }, optimize: function optimize() {
	    var a = [],
	        b = this.keys[0];a.push(b);THREE.AnimationUtils.getEqualsFunc(b.value);for (var c = 1; c < this.keys.length - 1; c++) {
	      var d = this.keys[c],
	          e = this.keys[c + 1];b.time === d.time || this.compareValues(b.value, d.value) && this.compareValues(d.value, e.value) || (b.constantToNext = this.compareValues(b.value, d.value), a.push(d), b = d);
	    }a.push(this.keys[this.keys.length - 1]);this.keys = a;return this;
	  } };THREE.KeyframeTrack.keyComparer = function (a, b) {
	  return a.time - b.time;
	};
	THREE.KeyframeTrack.parse = function (a) {
	  if (void 0 === a.type) throw Error("track type undefined, can not parse");return THREE.KeyframeTrack.GetTrackTypeForTypeName(a.type).parse(a);
	};
	THREE.KeyframeTrack.GetTrackTypeForTypeName = function (a) {
	  switch (a.toLowerCase()) {case "vector":case "vector2":case "vector3":case "vector4":
	      return THREE.VectorKeyframeTrack;case "quaternion":
	      return THREE.QuaternionKeyframeTrack;case "integer":case "scalar":case "double":case "float":case "number":
	      return THREE.NumberKeyframeTrack;case "bool":case "boolean":
	      return THREE.BooleanKeyframeTrack;case "string":
	      return THREE.StringKeyframeTrack;}throw Error("Unsupported typeName: " + a);
	};
	THREE.PropertyBinding = function (a, b) {
	  this.rootNode = a;this.trackName = b;this.referenceCount = 0;this.originalValue = null;var c = THREE.PropertyBinding.parseTrackName(b);this.directoryName = c.directoryName;this.nodeName = c.nodeName;this.objectName = c.objectName;this.objectIndex = c.objectIndex;this.propertyName = c.propertyName;this.propertyIndex = c.propertyIndex;this.node = THREE.PropertyBinding.findNode(a, this.nodeName) || a;this.cumulativeValue = null;this.cumulativeWeight = 0;
	};
	THREE.PropertyBinding.prototype = { constructor: THREE.PropertyBinding, reset: function reset() {
	    this.cumulativeValue = null;this.cumulativeWeight = 0;
	  }, accumulate: function accumulate(a, b) {
	    this.isBound || this.bind();0 === this.cumulativeWeight ? 0 < b && (null === this.cumulativeValue && (this.cumulativeValue = THREE.AnimationUtils.clone(a)), this.cumulativeWeight = b) : (this.cumulativeValue = this.lerpValue(this.cumulativeValue, a, b / (this.cumulativeWeight + b)), this.cumulativeWeight += b);
	  }, unbind: function unbind() {
	    this.isBound && (this.setValue(this.originalValue), this.triggerDirty = this.equalsValue = this.lerpValue = this.getValue = this.setValue = null, this.isBound = !1);
	  }, bind: function bind() {
	    if (!this.isBound) {
	      var a = this.node;if (a) {
	        if (this.objectName) {
	          if ("materials" === this.objectName) {
	            if (!a.material) {
	              console.error("  can not bind to material as node does not have a material", this);return;
	            }if (!a.material.materials) {
	              console.error("  can not bind to material.materials as node.material does not have a materials array", this);return;
	            }a = a.material.materials;
	          } else if ("bones" === this.objectName) {
	            if (!a.skeleton) {
	              console.error("  can not bind to bones as node does not have a skeleton", this);return;
	            }for (var a = a.skeleton.bones, b = 0; b < a.length; b++) {
	              if (a[b].name === this.objectIndex) {
	                this.objectIndex = b;break;
	              }
	            }
	          } else {
	            if (void 0 === a[this.objectName]) {
	              console.error("  can not bind to objectName of node, undefined", this);return;
	            }a = a[this.objectName];
	          }if (void 0 !== this.objectIndex) {
	            if (void 0 === a[this.objectIndex]) {
	              console.error("  trying to bind to objectIndex of objectName, but is undefined:", this, a);return;
	            }a = a[this.objectIndex];
	          }
	        }var c = a[this.propertyName];if (c) {
	          if (void 0 !== this.propertyIndex) {
	            if ("morphTargetInfluences" === this.propertyName) for (a.geometry || console.error("  can not bind to morphTargetInfluences becasuse node does not have a geometry", this), a.geometry.morphTargets || console.error("  can not bind to morphTargetInfluences becasuse node does not have a geometry.morphTargets", this), b = 0; b < this.node.geometry.morphTargets.length; b++) {
	              if (a.geometry.morphTargets[b].name === this.propertyIndex) {
	                this.propertyIndex = b;break;
	              }
	            }this.setValue = function (a) {
	              return this.equalsValue(c[this.propertyIndex], a) ? !1 : (c[this.propertyIndex] = a, !0);
	            };this.getValue = function () {
	              return c[this.propertyIndex];
	            };
	          } else c.copy ? (this.setValue = function (a) {
	            return this.equalsValue(c, a) ? !1 : (c.copy(a), !0);
	          }, this.getValue = function () {
	            return c;
	          }) : (this.setValue = function (b) {
	            return this.equalsValue(a[this.propertyName], b) ? !1 : (a[this.propertyName] = b, !0);
	          }, this.getValue = function () {
	            return a[this.propertyName];
	          });void 0 !== a.needsUpdate ? this.triggerDirty = function () {
	            this.node.needsUpdate = !0;
	          } : void 0 !== a.matrixWorldNeedsUpdate && (this.triggerDirty = function () {
	            a.matrixWorldNeedsUpdate = !0;
	          });this.originalValue = this.getValue();this.equalsValue = THREE.AnimationUtils.getEqualsFunc(this.originalValue);this.lerpValue = THREE.AnimationUtils.getLerpFunc(this.originalValue, !0);this.isBound = !0;
	        } else console.error("  trying to update property for track: " + this.nodeName + "." + this.propertyName + " but it wasn't found.", a);
	      } else console.error("  trying to update node for track: " + this.trackName + " but it wasn't found.");
	    }
	  }, apply: function apply() {
	    this.isBound || this.bind();if (0 < this.cumulativeWeight) {
	      if (1 > this.cumulativeWeight) {
	        var a = 1 - this.cumulativeWeight;this.cumulativeValue = this.lerpValue(this.cumulativeValue, this.originalValue, a / (this.cumulativeWeight + a));
	      }this.setValue(this.cumulativeValue) && this.triggerDirty && this.triggerDirty();this.cumulativeValue = null;this.cumulativeWeight = 0;
	    }
	  } };
	THREE.PropertyBinding.parseTrackName = function (a) {
	  var b = /^(([\w]+\/)*)([\w-\d]+)?(\.([\w]+)(\[([\w\d\[\]\_. ]+)\])?)?(\.([\w.]+)(\[([\w\d\[\]\_. ]+)\])?)$/,
	      c = b.exec(a);if (!c) throw Error("cannot parse trackName at all: " + a);c.index === b.lastIndex && b.lastIndex++;b = { directoryName: c[1], nodeName: c[3], objectName: c[5], objectIndex: c[7], propertyName: c[9], propertyIndex: c[11] };if (null === b.propertyName || 0 === b.propertyName.length) throw Error("can not parse propertyName from trackName: " + a);return b;
	};
	THREE.PropertyBinding.findNode = function (a, b) {
	  function c(a) {
	    for (var c = 0; c < a.bones.length; c++) {
	      var d = a.bones[c];if (d.name === b) return d;
	    }return null;
	  }function d(a) {
	    for (var c = 0; c < a.length; c++) {
	      var e = a[c];if (e.name === b || e.uuid === b || (e = d(e.children))) return e;
	    }return null;
	  }if (!b || "" === b || "root" === b || "." === b || -1 === b || b === a.name || b === a.uuid) return a;if (a.skeleton) {
	    var e = c(a.skeleton);if (e) return e;
	  }return a.children && (e = d(a.children)) ? e : null;
	};
	THREE.VectorKeyframeTrack = function (a, b) {
	  THREE.KeyframeTrack.call(this, a, b);this.result = this.keys[0].value.clone();
	};THREE.VectorKeyframeTrack.prototype = Object.create(THREE.KeyframeTrack.prototype);THREE.VectorKeyframeTrack.prototype.constructor = THREE.VectorKeyframeTrack;THREE.VectorKeyframeTrack.prototype.setResult = function (a) {
	  this.result.copy(a);
	};THREE.VectorKeyframeTrack.prototype.lerpValues = function (a, b, c) {
	  return a.lerp(b, c);
	};THREE.VectorKeyframeTrack.prototype.compareValues = function (a, b) {
	  return a.equals(b);
	};
	THREE.VectorKeyframeTrack.prototype.clone = function () {
	  for (var a = [], b = 0; b < this.keys.length; b++) {
	    var c = this.keys[b];a.push({ time: c.time, value: c.value.clone() });
	  }return new THREE.VectorKeyframeTrack(this.name, a);
	};THREE.VectorKeyframeTrack.parse = function (a) {
	  for (var b = THREE["Vector" + a.keys[0].value.length], c = [], d = 0; d < a.keys.length; d++) {
	    var e = a.keys[d];c.push({ value: new b().fromArray(e.value), time: e.time });
	  }return new THREE.VectorKeyframeTrack(a.name, c);
	};
	THREE.QuaternionKeyframeTrack = function (a, b) {
	  THREE.KeyframeTrack.call(this, a, b);this.result = this.keys[0].value.clone();
	};THREE.QuaternionKeyframeTrack.prototype = Object.create(THREE.KeyframeTrack.prototype);THREE.QuaternionKeyframeTrack.prototype.constructor = THREE.QuaternionKeyframeTrack;THREE.QuaternionKeyframeTrack.prototype.setResult = function (a) {
	  this.result.copy(a);
	};THREE.QuaternionKeyframeTrack.prototype.lerpValues = function (a, b, c) {
	  return a.slerp(b, c);
	};
	THREE.QuaternionKeyframeTrack.prototype.compareValues = function (a, b) {
	  return a.equals(b);
	};THREE.QuaternionKeyframeTrack.prototype.multiply = function (a) {
	  for (var b = 0; b < this.keys.length; b++) {
	    this.keys[b].value.multiply(a);
	  }return this;
	};THREE.QuaternionKeyframeTrack.prototype.clone = function () {
	  for (var a = [], b = 0; b < this.keys.length; b++) {
	    var c = this.keys[b];a.push({ time: c.time, value: c.value.clone() });
	  }return new THREE.QuaternionKeyframeTrack(this.name, a);
	};
	THREE.QuaternionKeyframeTrack.parse = function (a) {
	  for (var b = [], c = 0; c < a.keys.length; c++) {
	    var d = a.keys[c];b.push({ value: new THREE.Quaternion().fromArray(d.value), time: d.time });
	  }return new THREE.QuaternionKeyframeTrack(a.name, b);
	};THREE.StringKeyframeTrack = function (a, b) {
	  THREE.KeyframeTrack.call(this, a, b);this.result = this.keys[0].value;
	};THREE.StringKeyframeTrack.prototype = Object.create(THREE.KeyframeTrack.prototype);THREE.StringKeyframeTrack.prototype.constructor = THREE.StringKeyframeTrack;
	THREE.StringKeyframeTrack.prototype.setResult = function (a) {
	  this.result = a;
	};THREE.StringKeyframeTrack.prototype.lerpValues = function (a, b, c) {
	  return 1 > c ? a : b;
	};THREE.StringKeyframeTrack.prototype.compareValues = function (a, b) {
	  return a === b;
	};THREE.StringKeyframeTrack.prototype.clone = function () {
	  for (var a = [], b = 0; b < this.keys.length; b++) {
	    var c = this.keys[b];a.push({ time: c.time, value: c.value });
	  }return new THREE.StringKeyframeTrack(this.name, a);
	};
	THREE.StringKeyframeTrack.parse = function (a) {
	  return new THREE.StringKeyframeTrack(a.name, a.keys);
	};THREE.BooleanKeyframeTrack = function (a, b) {
	  THREE.KeyframeTrack.call(this, a, b);this.result = this.keys[0].value;
	};THREE.BooleanKeyframeTrack.prototype = Object.create(THREE.KeyframeTrack.prototype);THREE.BooleanKeyframeTrack.prototype.constructor = THREE.BooleanKeyframeTrack;THREE.BooleanKeyframeTrack.prototype.setResult = function (a) {
	  this.result = a;
	};
	THREE.BooleanKeyframeTrack.prototype.lerpValues = function (a, b, c) {
	  return 1 > c ? a : b;
	};THREE.BooleanKeyframeTrack.prototype.compareValues = function (a, b) {
	  return a === b;
	};THREE.BooleanKeyframeTrack.prototype.clone = function () {
	  for (var a = [], b = 0; b < this.keys.length; b++) {
	    var c = this.keys[b];a.push({ time: c.time, value: c.value });
	  }return new THREE.BooleanKeyframeTrack(this.name, a);
	};THREE.BooleanKeyframeTrack.parse = function (a) {
	  return new THREE.BooleanKeyframeTrack(a.name, a.keys);
	};
	THREE.NumberKeyframeTrack = function (a, b) {
	  THREE.KeyframeTrack.call(this, a, b);this.result = this.keys[0].value;
	};THREE.NumberKeyframeTrack.prototype = Object.create(THREE.KeyframeTrack.prototype);THREE.NumberKeyframeTrack.prototype.constructor = THREE.NumberKeyframeTrack;THREE.NumberKeyframeTrack.prototype.setResult = function (a) {
	  this.result = a;
	};THREE.NumberKeyframeTrack.prototype.lerpValues = function (a, b, c) {
	  return a * (1 - c) + b * c;
	};THREE.NumberKeyframeTrack.prototype.compareValues = function (a, b) {
	  return a === b;
	};
	THREE.NumberKeyframeTrack.prototype.clone = function () {
	  for (var a = [], b = 0; b < this.keys.length; b++) {
	    var c = this.keys[b];a.push({ time: c.time, value: c.value });
	  }return new THREE.NumberKeyframeTrack(this.name, a);
	};THREE.NumberKeyframeTrack.parse = function (a) {
	  return new THREE.NumberKeyframeTrack(a.name, a.keys);
	};THREE.Camera = function () {
	  THREE.Object3D.call(this);this.type = "Camera";this.matrixWorldInverse = new THREE.Matrix4();this.projectionMatrix = new THREE.Matrix4();
	};THREE.Camera.prototype = Object.create(THREE.Object3D.prototype);
	THREE.Camera.prototype.constructor = THREE.Camera;THREE.Camera.prototype.getWorldDirection = function () {
	  var a = new THREE.Quaternion();return function (b) {
	    b = b || new THREE.Vector3();this.getWorldQuaternion(a);return b.set(0, 0, -1).applyQuaternion(a);
	  };
	}();THREE.Camera.prototype.lookAt = function () {
	  var a = new THREE.Matrix4();return function (b) {
	    a.lookAt(this.position, b, this.up);this.quaternion.setFromRotationMatrix(a);
	  };
	}();THREE.Camera.prototype.clone = function () {
	  return new this.constructor().copy(this);
	};
	THREE.Camera.prototype.copy = function (a) {
	  THREE.Object3D.prototype.copy.call(this, a);this.matrixWorldInverse.copy(a.matrixWorldInverse);this.projectionMatrix.copy(a.projectionMatrix);return this;
	};
	THREE.CubeCamera = function (a, b, c) {
	  THREE.Object3D.call(this);this.type = "CubeCamera";var d = new THREE.PerspectiveCamera(90, 1, a, b);d.up.set(0, -1, 0);d.lookAt(new THREE.Vector3(1, 0, 0));this.add(d);var e = new THREE.PerspectiveCamera(90, 1, a, b);e.up.set(0, -1, 0);e.lookAt(new THREE.Vector3(-1, 0, 0));this.add(e);var g = new THREE.PerspectiveCamera(90, 1, a, b);g.up.set(0, 0, 1);g.lookAt(new THREE.Vector3(0, 1, 0));this.add(g);var f = new THREE.PerspectiveCamera(90, 1, a, b);f.up.set(0, 0, -1);f.lookAt(new THREE.Vector3(0, -1, 0));
	  this.add(f);var h = new THREE.PerspectiveCamera(90, 1, a, b);h.up.set(0, -1, 0);h.lookAt(new THREE.Vector3(0, 0, 1));this.add(h);var l = new THREE.PerspectiveCamera(90, 1, a, b);l.up.set(0, -1, 0);l.lookAt(new THREE.Vector3(0, 0, -1));this.add(l);this.renderTarget = new THREE.WebGLRenderTargetCube(c, c, { format: THREE.RGBFormat, magFilter: THREE.LinearFilter, minFilter: THREE.LinearFilter });this.updateCubeMap = function (a, b) {
	    null === this.parent && this.updateMatrixWorld();var c = this.renderTarget,
	        n = c.texture.generateMipmaps;c.texture.generateMipmaps = !1;c.activeCubeFace = 0;a.render(b, d, c);c.activeCubeFace = 1;a.render(b, e, c);c.activeCubeFace = 2;a.render(b, g, c);c.activeCubeFace = 3;a.render(b, f, c);c.activeCubeFace = 4;a.render(b, h, c);c.texture.generateMipmaps = n;c.activeCubeFace = 5;a.render(b, l, c);a.setRenderTarget(null);
	  };
	};THREE.CubeCamera.prototype = Object.create(THREE.Object3D.prototype);THREE.CubeCamera.prototype.constructor = THREE.CubeCamera;
	THREE.OrthographicCamera = function (a, b, c, d, e, g) {
	  THREE.Camera.call(this);this.type = "OrthographicCamera";this.zoom = 1;this.left = a;this.right = b;this.top = c;this.bottom = d;this.near = void 0 !== e ? e : .1;this.far = void 0 !== g ? g : 2E3;this.updateProjectionMatrix();
	};THREE.OrthographicCamera.prototype = Object.create(THREE.Camera.prototype);THREE.OrthographicCamera.prototype.constructor = THREE.OrthographicCamera;
	THREE.OrthographicCamera.prototype.updateProjectionMatrix = function () {
	  var a = (this.right - this.left) / (2 * this.zoom),
	      b = (this.top - this.bottom) / (2 * this.zoom),
	      c = (this.right + this.left) / 2,
	      d = (this.top + this.bottom) / 2;this.projectionMatrix.makeOrthographic(c - a, c + a, d + b, d - b, this.near, this.far);
	};THREE.OrthographicCamera.prototype.copy = function (a) {
	  THREE.Camera.prototype.copy.call(this, a);this.left = a.left;this.right = a.right;this.top = a.top;this.bottom = a.bottom;this.near = a.near;this.far = a.far;this.zoom = a.zoom;return this;
	};
	THREE.OrthographicCamera.prototype.toJSON = function (a) {
	  a = THREE.Object3D.prototype.toJSON.call(this, a);a.object.zoom = this.zoom;a.object.left = this.left;a.object.right = this.right;a.object.top = this.top;a.object.bottom = this.bottom;a.object.near = this.near;a.object.far = this.far;return a;
	};THREE.PerspectiveCamera = function (a, b, c, d) {
	  THREE.Camera.call(this);this.type = "PerspectiveCamera";this.zoom = 1;this.fov = void 0 !== a ? a : 50;this.aspect = void 0 !== b ? b : 1;this.near = void 0 !== c ? c : .1;this.far = void 0 !== d ? d : 2E3;this.updateProjectionMatrix();
	};
	THREE.PerspectiveCamera.prototype = Object.create(THREE.Camera.prototype);THREE.PerspectiveCamera.prototype.constructor = THREE.PerspectiveCamera;THREE.PerspectiveCamera.prototype.setLens = function (a, b) {
	  void 0 === b && (b = 24);this.fov = 2 * THREE.Math.radToDeg(Math.atan(b / (2 * a)));this.updateProjectionMatrix();
	};THREE.PerspectiveCamera.prototype.setViewOffset = function (a, b, c, d, e, g) {
	  this.fullWidth = a;this.fullHeight = b;this.x = c;this.y = d;this.width = e;this.height = g;this.updateProjectionMatrix();
	};
	THREE.PerspectiveCamera.prototype.updateProjectionMatrix = function () {
	  var a = THREE.Math.radToDeg(2 * Math.atan(Math.tan(.5 * THREE.Math.degToRad(this.fov)) / this.zoom));if (this.fullWidth) {
	    var b = this.fullWidth / this.fullHeight,
	        a = Math.tan(THREE.Math.degToRad(.5 * a)) * this.near,
	        c = -a,
	        d = b * c,
	        b = Math.abs(b * a - d),
	        c = Math.abs(a - c);this.projectionMatrix.makeFrustum(d + this.x * b / this.fullWidth, d + (this.x + this.width) * b / this.fullWidth, a - (this.y + this.height) * c / this.fullHeight, a - this.y * c / this.fullHeight, this.near, this.far);
	  } else this.projectionMatrix.makePerspective(a, this.aspect, this.near, this.far);
	};THREE.PerspectiveCamera.prototype.copy = function (a) {
	  THREE.Camera.prototype.copy.call(this, a);this.fov = a.fov;this.aspect = a.aspect;this.near = a.near;this.far = a.far;this.zoom = a.zoom;return this;
	};THREE.PerspectiveCamera.prototype.toJSON = function (a) {
	  a = THREE.Object3D.prototype.toJSON.call(this, a);a.object.zoom = this.zoom;a.object.fov = this.fov;a.object.aspect = this.aspect;a.object.near = this.near;a.object.far = this.far;return a;
	};
	THREE.Light = function (a) {
	  THREE.Object3D.call(this);this.type = "Light";this.color = new THREE.Color(a);this.receiveShadow = void 0;
	};THREE.Light.prototype = Object.create(THREE.Object3D.prototype);THREE.Light.prototype.constructor = THREE.Light;
	Object.defineProperties(THREE.Light.prototype, { onlyShadow: { set: function set(a) {
	      console.warn("THREE.Light: .onlyShadow has been removed.");
	    } }, shadowCameraFov: { set: function set(a) {
	      this.shadow.camera.fov = a;
	    } }, shadowCameraLeft: { set: function set(a) {
	      this.shadow.camera.left = a;
	    } }, shadowCameraRight: { set: function set(a) {
	      this.shadow.camera.right = a;
	    } }, shadowCameraTop: { set: function set(a) {
	      this.shadow.camera.top = a;
	    } }, shadowCameraBottom: { set: function set(a) {
	      this.shadow.camera.bottom = a;
	    } }, shadowCameraNear: { set: function set(a) {
	      this.shadow.camera.near = a;
	    } }, shadowCameraFar: { set: function set(a) {
	      this.shadow.camera.far = a;
	    } }, shadowCameraVisible: { set: function set(a) {
	      console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow ) instead.");
	    } }, shadowBias: { set: function set(a) {
	      this.shadow.bias = a;
	    } }, shadowDarkness: { set: function set(a) {
	      this.shadow.darkness = a;
	    } }, shadowMapWidth: { set: function set(a) {
	      this.shadow.mapSize.width = a;
	    } }, shadowMapHeight: { set: function set(a) {
	      this.shadow.mapSize.height = a;
	    } } });
	THREE.Light.prototype.copy = function (a) {
	  THREE.Object3D.prototype.copy.call(this, a);this.color.copy(a.color);return this;
	};
	THREE.Light.prototype.toJSON = function (a) {
	  a = THREE.Object3D.prototype.toJSON.call(this, a);a.object.color = this.color.getHex();void 0 !== this.groundColor && (a.object.groundColor = this.groundColor.getHex());void 0 !== this.intensity && (a.object.intensity = this.intensity);void 0 !== this.distance && (a.object.distance = this.distance);void 0 !== this.angle && (a.object.angle = this.angle);void 0 !== this.decay && (a.object.decay = this.decay);void 0 !== this.exponent && (a.object.exponent = this.exponent);return a;
	};
	THREE.LightShadow = function (a) {
	  this.camera = a;this.bias = 0;this.darkness = 1;this.mapSize = new THREE.Vector2(512, 512);this.matrix = this.map = null;
	};THREE.LightShadow.prototype = { constructor: THREE.LightShadow, copy: function copy(a) {
	    this.camera = a.camera.clone();this.bias = a.bias;this.darkness = a.darkness;this.mapSize.copy(a.mapSize);
	  }, clone: function clone() {
	    return new this.constructor().copy(this);
	  } };THREE.AmbientLight = function (a) {
	  THREE.Light.call(this, a);this.type = "AmbientLight";this.castShadow = void 0;
	};
	THREE.AmbientLight.prototype = Object.create(THREE.Light.prototype);THREE.AmbientLight.prototype.constructor = THREE.AmbientLight;THREE.DirectionalLight = function (a, b) {
	  THREE.Light.call(this, a);this.type = "DirectionalLight";this.position.set(0, 1, 0);this.updateMatrix();this.target = new THREE.Object3D();this.intensity = void 0 !== b ? b : 1;this.shadow = new THREE.LightShadow(new THREE.OrthographicCamera(-500, 500, 500, -500, 50, 5E3));
	};THREE.DirectionalLight.prototype = Object.create(THREE.Light.prototype);
	THREE.DirectionalLight.prototype.constructor = THREE.DirectionalLight;THREE.DirectionalLight.prototype.copy = function (a) {
	  THREE.Light.prototype.copy.call(this, a);this.intensity = a.intensity;this.target = a.target.clone();this.shadow = a.shadow.clone();return this;
	};THREE.HemisphereLight = function (a, b, c) {
	  THREE.Light.call(this, a);this.type = "HemisphereLight";this.castShadow = void 0;this.position.set(0, 1, 0);this.updateMatrix();this.groundColor = new THREE.Color(b);this.intensity = void 0 !== c ? c : 1;
	};
	THREE.HemisphereLight.prototype = Object.create(THREE.Light.prototype);THREE.HemisphereLight.prototype.constructor = THREE.HemisphereLight;THREE.HemisphereLight.prototype.copy = function (a) {
	  THREE.Light.prototype.copy.call(this, a);this.groundColor.copy(a.groundColor);this.intensity = a.intensity;return this;
	};
	THREE.PointLight = function (a, b, c, d) {
	  THREE.Light.call(this, a);this.type = "PointLight";this.intensity = void 0 !== b ? b : 1;this.distance = void 0 !== c ? c : 0;this.decay = void 0 !== d ? d : 1;this.shadow = new THREE.LightShadow(new THREE.PerspectiveCamera(90, 1, 1, 500));
	};THREE.PointLight.prototype = Object.create(THREE.Light.prototype);THREE.PointLight.prototype.constructor = THREE.PointLight;
	THREE.PointLight.prototype.copy = function (a) {
	  THREE.Light.prototype.copy.call(this, a);this.intensity = a.intensity;this.distance = a.distance;this.decay = a.decay;this.shadow = a.shadow.clone();return this;
	};
	THREE.SpotLight = function (a, b, c, d, e, g) {
	  THREE.Light.call(this, a);this.type = "SpotLight";this.position.set(0, 1, 0);this.updateMatrix();this.target = new THREE.Object3D();this.intensity = void 0 !== b ? b : 1;this.distance = void 0 !== c ? c : 0;this.angle = void 0 !== d ? d : Math.PI / 3;this.exponent = void 0 !== e ? e : 10;this.decay = void 0 !== g ? g : 1;this.shadow = new THREE.LightShadow(new THREE.PerspectiveCamera(50, 1, 50, 5E3));
	};THREE.SpotLight.prototype = Object.create(THREE.Light.prototype);THREE.SpotLight.prototype.constructor = THREE.SpotLight;
	THREE.SpotLight.prototype.copy = function (a) {
	  THREE.Light.prototype.copy.call(this, a);this.intensity = a.intensity;this.distance = a.distance;this.angle = a.angle;this.exponent = a.exponent;this.decay = a.decay;this.target = a.target.clone();this.shadow = a.shadow.clone();return this;
	};THREE.Cache = { enabled: !1, files: {}, add: function add(a, b) {
	    !1 !== this.enabled && (this.files[a] = b);
	  }, get: function get(a) {
	    if (!1 !== this.enabled) return this.files[a];
	  }, remove: function remove(a) {
	    delete this.files[a];
	  }, clear: function clear() {
	    this.files = {};
	  } };
	THREE.Loader = function () {
	  this.onLoadStart = function () {};this.onLoadProgress = function () {};this.onLoadComplete = function () {};
	};
	THREE.Loader.prototype = { constructor: THREE.Loader, crossOrigin: void 0, extractUrlBase: function extractUrlBase(a) {
	    a = a.split("/");if (1 === a.length) return "./";a.pop();return a.join("/") + "/";
	  }, initMaterials: function initMaterials(a, b, c) {
	    for (var d = [], e = 0; e < a.length; ++e) {
	      d[e] = this.createMaterial(a[e], b, c);
	    }return d;
	  }, createMaterial: function () {
	    var a, b, c;return function (d, e, g) {
	      function f(a, c, d, f, l) {
	        a = e + a;var k = THREE.Loader.Handlers.get(a);null !== k ? a = k.load(a) : (b.setCrossOrigin(g), a = b.load(a));void 0 !== c && (a.repeat.fromArray(c), 1 !== c[0] && (a.wrapS = THREE.RepeatWrapping), 1 !== c[1] && (a.wrapT = THREE.RepeatWrapping));void 0 !== d && a.offset.fromArray(d);void 0 !== f && ("repeat" === f[0] && (a.wrapS = THREE.RepeatWrapping), "mirror" === f[0] && (a.wrapS = THREE.MirroredRepeatWrapping), "repeat" === f[1] && (a.wrapT = THREE.RepeatWrapping), "mirror" === f[1] && (a.wrapT = THREE.MirroredRepeatWrapping));void 0 !== l && (a.anisotropy = l);c = THREE.Math.generateUUID();h[c] = a;return c;
	      }void 0 === a && (a = new THREE.Color());void 0 === b && (b = new THREE.TextureLoader());void 0 === c && (c = new THREE.MaterialLoader());
	      var h = {},
	          l = { uuid: THREE.Math.generateUUID(), type: "MeshLambertMaterial" },
	          k;for (k in d) {
	        var m = d[k];switch (k) {case "DbgColor":
	            l.color = m;break;case "DbgIndex":case "opticalDensity":case "illumination":
	            break;case "DbgName":
	            l.name = m;break;case "blending":
	            l.blending = THREE[m];break;case "colorDiffuse":
	            l.color = a.fromArray(m).getHex();break;case "colorSpecular":
	            l.specular = a.fromArray(m).getHex();break;case "colorEmissive":
	            l.emissive = a.fromArray(m).getHex();break;case "specularCoef":
	            l.shininess = m;break;case "shading":
	            "basic" === m.toLowerCase() && (l.type = "MeshBasicMaterial");"phong" === m.toLowerCase() && (l.type = "MeshPhongMaterial");break;case "mapDiffuse":
	            l.map = f(m, d.mapDiffuseRepeat, d.mapDiffuseOffset, d.mapDiffuseWrap, d.mapDiffuseAnisotropy);break;case "mapDiffuseRepeat":case "mapDiffuseOffset":case "mapDiffuseWrap":case "mapDiffuseAnisotropy":
	            break;case "mapLight":
	            l.lightMap = f(m, d.mapLightRepeat, d.mapLightOffset, d.mapLightWrap, d.mapLightAnisotropy);break;case "mapLightRepeat":case "mapLightOffset":case "mapLightWrap":case "mapLightAnisotropy":
	            break;
	          case "mapAO":
	            l.aoMap = f(m, d.mapAORepeat, d.mapAOOffset, d.mapAOWrap, d.mapAOAnisotropy);break;case "mapAORepeat":case "mapAOOffset":case "mapAOWrap":case "mapAOAnisotropy":
	            break;case "mapBump":
	            l.bumpMap = f(m, d.mapBumpRepeat, d.mapBumpOffset, d.mapBumpWrap, d.mapBumpAnisotropy);break;case "mapBumpScale":
	            l.bumpScale = m;break;case "mapBumpRepeat":case "mapBumpOffset":case "mapBumpWrap":case "mapBumpAnisotropy":
	            break;case "mapNormal":
	            l.normalMap = f(m, d.mapNormalRepeat, d.mapNormalOffset, d.mapNormalWrap, d.mapNormalAnisotropy);
	            break;case "mapNormalFactor":
	            l.normalScale = [m, m];break;case "mapNormalRepeat":case "mapNormalOffset":case "mapNormalWrap":case "mapNormalAnisotropy":
	            break;case "mapSpecular":
	            l.specularMap = f(m, d.mapSpecularRepeat, d.mapSpecularOffset, d.mapSpecularWrap, d.mapSpecularAnisotropy);break;case "mapSpecularRepeat":case "mapSpecularOffset":case "mapSpecularWrap":case "mapSpecularAnisotropy":
	            break;case "mapAlpha":
	            l.alphaMap = f(m, d.mapAlphaRepeat, d.mapAlphaOffset, d.mapAlphaWrap, d.mapAlphaAnisotropy);break;case "mapAlphaRepeat":case "mapAlphaOffset":case "mapAlphaWrap":case "mapAlphaAnisotropy":
	            break;
	          case "flipSided":
	            l.side = THREE.BackSide;break;case "doubleSided":
	            l.side = THREE.DoubleSide;break;case "transparency":
	            console.warn("THREE.Loader: transparency has been renamed to opacity");l.opacity = m;break;case "opacity":case "transparent":case "depthTest":case "depthWrite":case "transparent":case "visible":case "wireframe":
	            l[k] = m;break;case "vertexColors":
	            !0 === m && (l.vertexColors = THREE.VertexColors);"face" === m && (l.vertexColors = THREE.FaceColors);break;default:
	            console.error("Loader.createMaterial: Unsupported", k, m);}
	      }"MeshPhongMaterial" !== l.type && delete l.specular;1 > l.opacity && (l.transparent = !0);c.setTextures(h);return c.parse(l);
	    };
	  }() };THREE.Loader.Handlers = { handlers: [], add: function add(a, b) {
	    this.handlers.push(a, b);
	  }, get: function get(a) {
	    for (var b = this.handlers, c = 0, d = b.length; c < d; c += 2) {
	      var e = b[c + 1];if (b[c].test(a)) return e;
	    }return null;
	  } };THREE.XHRLoader = function (a) {
	  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
	};
	THREE.XHRLoader.prototype = { constructor: THREE.XHRLoader, load: function load(a, b, c, d) {
	    var e = this,
	        g = THREE.Cache.get(a);if (void 0 !== g) return b && setTimeout(function () {
	      b(g);
	    }, 0), g;var f = new XMLHttpRequest();f.open("GET", a, !0);f.addEventListener("load", function (c) {
	      c = c.target.response;THREE.Cache.add(a, c);b && b(c);e.manager.itemEnd(a);
	    }, !1);void 0 !== c && f.addEventListener("progress", function (a) {
	      c(a);
	    }, !1);f.addEventListener("error", function (b) {
	      d && d(b);e.manager.itemError(a);
	    }, !1);void 0 !== this.crossOrigin && (f.crossOrigin = this.crossOrigin);void 0 !== this.responseType && (f.responseType = this.responseType);void 0 !== this.withCredentials && (f.withCredentials = this.withCredentials);f.send(null);e.manager.itemStart(a);return f;
	  }, setResponseType: function setResponseType(a) {
	    this.responseType = a;
	  }, setCrossOrigin: function setCrossOrigin(a) {
	    this.crossOrigin = a;
	  }, setWithCredentials: function setWithCredentials(a) {
	    this.withCredentials = a;
	  } };THREE.ImageLoader = function (a) {
	  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
	};
	THREE.ImageLoader.prototype = { constructor: THREE.ImageLoader, load: function load(a, b, c, d) {
	    var e = this,
	        g = THREE.Cache.get(a);if (void 0 !== g) return e.manager.itemStart(a), b ? setTimeout(function () {
	      b(g);e.manager.itemEnd(a);
	    }, 0) : e.manager.itemEnd(a), g;var f = document.createElement("img");f.addEventListener("load", function (c) {
	      THREE.Cache.add(a, this);b && b(this);e.manager.itemEnd(a);
	    }, !1);void 0 !== c && f.addEventListener("progress", function (a) {
	      c(a);
	    }, !1);f.addEventListener("error", function (b) {
	      d && d(b);e.manager.itemError(a);
	    }, !1);void 0 !== this.crossOrigin && (f.crossOrigin = this.crossOrigin);e.manager.itemStart(a);f.src = a;return f;
	  }, setCrossOrigin: function setCrossOrigin(a) {
	    this.crossOrigin = a;
	  } };THREE.JSONLoader = function (a) {
	  "boolean" === typeof a && (console.warn("THREE.JSONLoader: showStatus parameter has been removed from constructor."), a = void 0);this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;this.withCredentials = !1;
	};
	THREE.JSONLoader.prototype = { constructor: THREE.JSONLoader, get statusDomElement() {
	    void 0 === this._statusDomElement && (this._statusDomElement = document.createElement("div"));console.warn("THREE.JSONLoader: .statusDomElement has been removed.");return this._statusDomElement;
	  }, load: function load(a, b, c, d) {
	    var e = this,
	        g = this.texturePath && "string" === typeof this.texturePath ? this.texturePath : THREE.Loader.prototype.extractUrlBase(a);c = new THREE.XHRLoader(this.manager);c.setCrossOrigin(this.crossOrigin);c.setWithCredentials(this.withCredentials);
	    c.load(a, function (c) {
	      c = JSON.parse(c);var d = c.metadata;if (void 0 !== d) {
	        if ("object" === d.type) {
	          console.error("THREE.JSONLoader: " + a + " should be loaded with THREE.ObjectLoader instead.");return;
	        }if ("scene" === d.type) {
	          console.error("THREE.JSONLoader: " + a + " should be loaded with THREE.SceneLoader instead.");return;
	        }
	      }c = e.parse(c, g);b(c.geometry, c.materials);
	    });
	  }, setCrossOrigin: function setCrossOrigin(a) {
	    this.crossOrigin = a;
	  }, setTexturePath: function setTexturePath(a) {
	    this.texturePath = a;
	  }, parse: function parse(a, b) {
	    var c = new THREE.Geometry(),
	        d = void 0 !== a.scale ? 1 / a.scale : 1;(function (b) {
	      var d,
	          f,
	          h,
	          l,
	          k,
	          m,
	          p,
	          n,
	          q,
	          s,
	          t,
	          v,
	          u,
	          w = a.faces;m = a.vertices;var D = a.normals,
	          x = a.colors,
	          B = 0;if (void 0 !== a.uvs) {
	        for (d = 0; d < a.uvs.length; d++) {
	          a.uvs[d].length && B++;
	        }for (d = 0; d < B; d++) {
	          c.faceVertexUvs[d] = [];
	        }
	      }l = 0;for (k = m.length; l < k;) {
	        d = new THREE.Vector3(), d.x = m[l++] * b, d.y = m[l++] * b, d.z = m[l++] * b, c.vertices.push(d);
	      }l = 0;for (k = w.length; l < k;) {
	        if (b = w[l++], q = b & 1, h = b & 2, d = b & 8, p = b & 16, s = b & 32, m = b & 64, b &= 128, q) {
	          q = new THREE.Face3();q.a = w[l];q.b = w[l + 1];q.c = w[l + 3];t = new THREE.Face3();t.a = w[l + 1];t.b = w[l + 2];t.c = w[l + 3];l += 4;h && (h = w[l++], q.materialIndex = h, t.materialIndex = h);h = c.faces.length;if (d) for (d = 0; d < B; d++) {
	            for (v = a.uvs[d], c.faceVertexUvs[d][h] = [], c.faceVertexUvs[d][h + 1] = [], f = 0; 4 > f; f++) {
	              n = w[l++], u = v[2 * n], n = v[2 * n + 1], u = new THREE.Vector2(u, n), 2 !== f && c.faceVertexUvs[d][h].push(u), 0 !== f && c.faceVertexUvs[d][h + 1].push(u);
	            }
	          }p && (p = 3 * w[l++], q.normal.set(D[p++], D[p++], D[p]), t.normal.copy(q.normal));if (s) for (d = 0; 4 > d; d++) {
	            p = 3 * w[l++], s = new THREE.Vector3(D[p++], D[p++], D[p]), 2 !== d && q.vertexNormals.push(s), 0 !== d && t.vertexNormals.push(s);
	          }m && (m = w[l++], m = x[m], q.color.setHex(m), t.color.setHex(m));if (b) for (d = 0; 4 > d; d++) {
	            m = w[l++], m = x[m], 2 !== d && q.vertexColors.push(new THREE.Color(m)), 0 !== d && t.vertexColors.push(new THREE.Color(m));
	          }c.faces.push(q);c.faces.push(t);
	        } else {
	          q = new THREE.Face3();q.a = w[l++];q.b = w[l++];q.c = w[l++];h && (h = w[l++], q.materialIndex = h);h = c.faces.length;if (d) for (d = 0; d < B; d++) {
	            for (v = a.uvs[d], c.faceVertexUvs[d][h] = [], f = 0; 3 > f; f++) {
	              n = w[l++], u = v[2 * n], n = v[2 * n + 1], u = new THREE.Vector2(u, n), c.faceVertexUvs[d][h].push(u);
	            }
	          }p && (p = 3 * w[l++], q.normal.set(D[p++], D[p++], D[p]));if (s) for (d = 0; 3 > d; d++) {
	            p = 3 * w[l++], s = new THREE.Vector3(D[p++], D[p++], D[p]), q.vertexNormals.push(s);
	          }m && (m = w[l++], q.color.setHex(x[m]));if (b) for (d = 0; 3 > d; d++) {
	            m = w[l++], q.vertexColors.push(new THREE.Color(x[m]));
	          }c.faces.push(q);
	        }
	      }
	    })(d);(function () {
	      var b = void 0 !== a.influencesPerVertex ? a.influencesPerVertex : 2;if (a.skinWeights) for (var d = 0, f = a.skinWeights.length; d < f; d += b) {
	        c.skinWeights.push(new THREE.Vector4(a.skinWeights[d], 1 < b ? a.skinWeights[d + 1] : 0, 2 < b ? a.skinWeights[d + 2] : 0, 3 < b ? a.skinWeights[d + 3] : 0));
	      }if (a.skinIndices) for (d = 0, f = a.skinIndices.length; d < f; d += b) {
	        c.skinIndices.push(new THREE.Vector4(a.skinIndices[d], 1 < b ? a.skinIndices[d + 1] : 0, 2 < b ? a.skinIndices[d + 2] : 0, 3 < b ? a.skinIndices[d + 3] : 0));
	      }c.bones = a.bones;c.bones && 0 < c.bones.length && (c.skinWeights.length !== c.skinIndices.length || c.skinIndices.length !== c.vertices.length) && console.warn("When skinning, number of vertices (" + c.vertices.length + "), skinIndices (" + c.skinIndices.length + "), and skinWeights (" + c.skinWeights.length + ") should match.");
	    })();(function (b) {
	      if (void 0 !== a.morphTargets) for (var d = 0, f = a.morphTargets.length; d < f; d++) {
	        c.morphTargets[d] = {};c.morphTargets[d].name = a.morphTargets[d].name;c.morphTargets[d].vertices = [];for (var h = c.morphTargets[d].vertices, l = a.morphTargets[d].vertices, k = 0, m = l.length; k < m; k += 3) {
	          var p = new THREE.Vector3();p.x = l[k] * b;p.y = l[k + 1] * b;p.z = l[k + 2] * b;h.push(p);
	        }
	      }if (void 0 !== a.morphColors && 0 < a.morphColors.length) for (console.warn('THREE.JSONLoader: "morphColors" no longer supported. Using them as face colors.'), b = c.faces, h = a.morphColors[0].colors, d = 0, f = b.length; d < f; d++) {
	        b[d].color.fromArray(h, 3 * d);
	      }
	    })(d);(function () {
	      var b = [],
	          d = [];void 0 !== a.animation && d.push(a.animation);void 0 !== a.animations && (a.animations.length ? d = d.concat(a.animations) : d.push(a.animations));for (var f = 0; f < d.length; f++) {
	        var h = THREE.AnimationClip.parseAnimation(d[f], c.bones);h && b.push(h);
	      }c.morphTargets && (d = THREE.AnimationClip.CreateClipsFromMorphTargetSequences(c.morphTargets, 10), b = b.concat(d));0 < b.length && (c.animations = b);
	    })();c.computeFaceNormals();c.computeBoundingSphere();
	    if (void 0 === a.materials || 0 === a.materials.length) return { geometry: c };d = THREE.Loader.prototype.initMaterials(a.materials, b, this.crossOrigin);return { geometry: c, materials: d };
	  } };
	THREE.LoadingManager = function (a, b, c) {
	  var d = this,
	      e = !1,
	      g = 0,
	      f = 0;this.onStart = void 0;this.onLoad = a;this.onProgress = b;this.onError = c;this.itemStart = function (a) {
	    f++;if (!1 === e && void 0 !== d.onStart) d.onStart(a, g, f);e = !0;
	  };this.itemEnd = function (a) {
	    g++;if (void 0 !== d.onProgress) d.onProgress(a, g, f);if (g === f && (e = !1, void 0 !== d.onLoad)) d.onLoad();
	  };this.itemError = function (a) {
	    if (void 0 !== d.onError) d.onError(a);
	  };
	};THREE.DefaultLoadingManager = new THREE.LoadingManager();
	THREE.BufferGeometryLoader = function (a) {
	  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
	};
	THREE.BufferGeometryLoader.prototype = { constructor: THREE.BufferGeometryLoader, load: function load(a, b, c, d) {
	    var e = this,
	        g = new THREE.XHRLoader(e.manager);g.setCrossOrigin(this.crossOrigin);g.load(a, function (a) {
	      b(e.parse(JSON.parse(a)));
	    }, c, d);
	  }, setCrossOrigin: function setCrossOrigin(a) {
	    this.crossOrigin = a;
	  }, parse: function parse(a) {
	    var b = new THREE.BufferGeometry(),
	        c = a.data.index;void 0 !== c && (c = new self[c.type](c.array), b.setIndex(new THREE.BufferAttribute(c, 1)));var d = a.data.attributes,
	        e;for (e in d) {
	      var g = d[e],
	          c = new self[g.type](g.array);
	      b.addAttribute(e, new THREE.BufferAttribute(c, g.itemSize));
	    }e = a.data.groups || a.data.drawcalls || a.data.offsets;if (void 0 !== e) for (c = 0, d = e.length; c !== d; ++c) {
	      g = e[c], b.addGroup(g.start, g.count);
	    }a = a.data.boundingSphere;void 0 !== a && (e = new THREE.Vector3(), void 0 !== a.center && e.fromArray(a.center), b.boundingSphere = new THREE.Sphere(e, a.radius));return b;
	  } };THREE.MaterialLoader = function (a) {
	  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;this.textures = {};
	};
	THREE.MaterialLoader.prototype = { constructor: THREE.MaterialLoader, load: function load(a, b, c, d) {
	    var e = this,
	        g = new THREE.XHRLoader(e.manager);g.setCrossOrigin(this.crossOrigin);g.load(a, function (a) {
	      b(e.parse(JSON.parse(a)));
	    }, c, d);
	  }, setCrossOrigin: function setCrossOrigin(a) {
	    this.crossOrigin = a;
	  }, setTextures: function setTextures(a) {
	    this.textures = a;
	  }, getTexture: function getTexture(a) {
	    var b = this.textures;void 0 === b[a] && console.warn("THREE.MaterialLoader: Undefined texture", a);return b[a];
	  }, parse: function parse(a) {
	    var b = new THREE[a.type]();b.uuid = a.uuid;void 0 !== a.name && (b.name = a.name);void 0 !== a.color && b.color.setHex(a.color);void 0 !== a.emissive && b.emissive.setHex(a.emissive);void 0 !== a.specular && b.specular.setHex(a.specular);void 0 !== a.shininess && (b.shininess = a.shininess);void 0 !== a.uniforms && (b.uniforms = a.uniforms);void 0 !== a.vertexShader && (b.vertexShader = a.vertexShader);void 0 !== a.fragmentShader && (b.fragmentShader = a.fragmentShader);void 0 !== a.vertexColors && (b.vertexColors = a.vertexColors);void 0 !== a.shading && (b.shading = a.shading);void 0 !== a.blending && (b.blending = a.blending);void 0 !== a.side && (b.side = a.side);void 0 !== a.opacity && (b.opacity = a.opacity);void 0 !== a.transparent && (b.transparent = a.transparent);void 0 !== a.alphaTest && (b.alphaTest = a.alphaTest);void 0 !== a.depthTest && (b.depthTest = a.depthTest);void 0 !== a.depthWrite && (b.depthWrite = a.depthWrite);void 0 !== a.wireframe && (b.wireframe = a.wireframe);void 0 !== a.wireframeLinewidth && (b.wireframeLinewidth = a.wireframeLinewidth);void 0 !== a.size && (b.size = a.size);void 0 !== a.sizeAttenuation && (b.sizeAttenuation = a.sizeAttenuation);void 0 !== a.map && (b.map = this.getTexture(a.map));void 0 !== a.alphaMap && (b.alphaMap = this.getTexture(a.alphaMap), b.transparent = !0);void 0 !== a.bumpMap && (b.bumpMap = this.getTexture(a.bumpMap));void 0 !== a.bumpScale && (b.bumpScale = a.bumpScale);void 0 !== a.normalMap && (b.normalMap = this.getTexture(a.normalMap));a.normalScale && (b.normalScale = new THREE.Vector2(a.normalScale, a.normalScale));void 0 !== a.displacementMap && (b.displacementMap = this.getTexture(a.displacementMap));void 0 !== a.displacementScale && (b.displacementScale = a.displacementScale);void 0 !== a.displacementBias && (b.displacementBias = a.displacementBias);void 0 !== a.specularMap && (b.specularMap = this.getTexture(a.specularMap));void 0 !== a.envMap && (b.envMap = this.getTexture(a.envMap), b.combine = THREE.MultiplyOperation);a.reflectivity && (b.reflectivity = a.reflectivity);void 0 !== a.lightMap && (b.lightMap = this.getTexture(a.lightMap));void 0 !== a.lightMapIntensity && (b.lightMapIntensity = a.lightMapIntensity);void 0 !== a.aoMap && (b.aoMap = this.getTexture(a.aoMap));
	    void 0 !== a.aoMapIntensity && (b.aoMapIntensity = a.aoMapIntensity);if (void 0 !== a.materials) for (var c = 0, d = a.materials.length; c < d; c++) {
	      b.materials.push(this.parse(a.materials[c]));
	    }return b;
	  } };THREE.ObjectLoader = function (a) {
	  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;this.texturePath = "";
	};
	THREE.ObjectLoader.prototype = { constructor: THREE.ObjectLoader, load: function load(a, b, c, d) {
	    "" === this.texturePath && (this.texturePath = a.substring(0, a.lastIndexOf("/") + 1));var e = this,
	        g = new THREE.XHRLoader(e.manager);g.setCrossOrigin(this.crossOrigin);g.load(a, function (a) {
	      e.parse(JSON.parse(a), b);
	    }, c, d);
	  }, setTexturePath: function setTexturePath(a) {
	    this.texturePath = a;
	  }, setCrossOrigin: function setCrossOrigin(a) {
	    this.crossOrigin = a;
	  }, parse: function parse(a, b) {
	    var c = this.parseGeometries(a.geometries),
	        d = this.parseImages(a.images, function () {
	      void 0 !== b && b(e);
	    }),
	        d = this.parseTextures(a.textures, d),
	        d = this.parseMaterials(a.materials, d),
	        e = this.parseObject(a.object, c, d);a.animations && (e.animations = this.parseAnimations(a.animations));void 0 !== a.images && 0 !== a.images.length || void 0 === b || b(e);return e;
	  }, parseGeometries: function parseGeometries(a) {
	    var b = {};if (void 0 !== a) for (var c = new THREE.JSONLoader(), d = new THREE.BufferGeometryLoader(), e = 0, g = a.length; e < g; e++) {
	      var f,
	          h = a[e];switch (h.type) {case "PlaneGeometry":case "PlaneBufferGeometry":
	          f = new THREE[h.type](h.width, h.height, h.widthSegments, h.heightSegments);break;case "BoxGeometry":case "CubeGeometry":
	          f = new THREE.BoxGeometry(h.width, h.height, h.depth, h.widthSegments, h.heightSegments, h.depthSegments);break;case "CircleBufferGeometry":
	          f = new THREE.CircleBufferGeometry(h.radius, h.segments, h.thetaStart, h.thetaLength);break;case "CircleGeometry":
	          f = new THREE.CircleGeometry(h.radius, h.segments, h.thetaStart, h.thetaLength);break;case "CylinderGeometry":
	          f = new THREE.CylinderGeometry(h.radiusTop, h.radiusBottom, h.height, h.radialSegments, h.heightSegments, h.openEnded, h.thetaStart, h.thetaLength);break;case "SphereGeometry":
	          f = new THREE.SphereGeometry(h.radius, h.widthSegments, h.heightSegments, h.phiStart, h.phiLength, h.thetaStart, h.thetaLength);break;case "SphereBufferGeometry":
	          f = new THREE.SphereBufferGeometry(h.radius, h.widthSegments, h.heightSegments, h.phiStart, h.phiLength, h.thetaStart, h.thetaLength);break;case "DodecahedronGeometry":
	          f = new THREE.DodecahedronGeometry(h.radius, h.detail);break;case "IcosahedronGeometry":
	          f = new THREE.IcosahedronGeometry(h.radius, h.detail);break;case "OctahedronGeometry":
	          f = new THREE.OctahedronGeometry(h.radius, h.detail);break;case "TetrahedronGeometry":
	          f = new THREE.TetrahedronGeometry(h.radius, h.detail);break;case "RingGeometry":
	          f = new THREE.RingGeometry(h.innerRadius, h.outerRadius, h.thetaSegments, h.phiSegments, h.thetaStart, h.thetaLength);break;case "TorusGeometry":
	          f = new THREE.TorusGeometry(h.radius, h.tube, h.radialSegments, h.tubularSegments, h.arc);break;case "TorusKnotGeometry":
	          f = new THREE.TorusKnotGeometry(h.radius, h.tube, h.radialSegments, h.tubularSegments, h.p, h.q, h.heightScale);break;case "BufferGeometry":
	          f = d.parse(h);break;case "Geometry":
	          f = c.parse(h.data, this.texturePath).geometry;break;default:
	          console.warn('THREE.ObjectLoader: Unsupported geometry type "' + h.type + '"');continue;}f.uuid = h.uuid;void 0 !== h.name && (f.name = h.name);b[h.uuid] = f;
	    }return b;
	  }, parseMaterials: function parseMaterials(a, b) {
	    var c = {};if (void 0 !== a) {
	      var d = new THREE.MaterialLoader();d.setTextures(b);for (var e = 0, g = a.length; e < g; e++) {
	        var f = d.parse(a[e]);c[f.uuid] = f;
	      }
	    }return c;
	  },
	  parseAnimations: function parseAnimations(a) {
	    for (var b = [], c = 0; c < a.length; c++) {
	      var d = THREE.AnimationClip.parse(a[c]);b.push(d);
	    }return b;
	  }, parseImages: function parseImages(a, b) {
	    function c(a) {
	      d.manager.itemStart(a);return f.load(a, function () {
	        d.manager.itemEnd(a);
	      });
	    }var d = this,
	        e = {};if (void 0 !== a && 0 < a.length) {
	      var g = new THREE.LoadingManager(b),
	          f = new THREE.ImageLoader(g);f.setCrossOrigin(this.crossOrigin);for (var g = 0, h = a.length; g < h; g++) {
	        var l = a[g],
	            k = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(l.url) ? l.url : d.texturePath + l.url;e[l.uuid] = c(k);
	      }
	    }return e;
	  },
	  parseTextures: function parseTextures(a, b) {
	    function c(a) {
	      if ("number" === typeof a) return a;console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.", a);return THREE[a];
	    }var d = {};if (void 0 !== a) for (var e = 0, g = a.length; e < g; e++) {
	      var f = a[e];void 0 === f.image && console.warn('THREE.ObjectLoader: No "image" specified for', f.uuid);void 0 === b[f.image] && console.warn("THREE.ObjectLoader: Undefined image", f.image);var h = new THREE.Texture(b[f.image]);h.needsUpdate = !0;h.uuid = f.uuid;void 0 !== f.name && (h.name = f.name);void 0 !== f.mapping && (h.mapping = c(f.mapping));void 0 !== f.offset && (h.offset = new THREE.Vector2(f.offset[0], f.offset[1]));void 0 !== f.repeat && (h.repeat = new THREE.Vector2(f.repeat[0], f.repeat[1]));void 0 !== f.minFilter && (h.minFilter = c(f.minFilter));void 0 !== f.magFilter && (h.magFilter = c(f.magFilter));void 0 !== f.anisotropy && (h.anisotropy = f.anisotropy);Array.isArray(f.wrap) && (h.wrapS = c(f.wrap[0]), h.wrapT = c(f.wrap[1]));d[f.uuid] = h;
	    }return d;
	  }, parseObject: function () {
	    var a = new THREE.Matrix4();return function (b, c, d) {
	      function e(a) {
	        void 0 === c[a] && console.warn("THREE.ObjectLoader: Undefined geometry", a);return c[a];
	      }function g(a) {
	        if (void 0 !== a) return void 0 === d[a] && console.warn("THREE.ObjectLoader: Undefined material", a), d[a];
	      }var f;switch (b.type) {case "Scene":
	          f = new THREE.Scene();break;case "PerspectiveCamera":
	          f = new THREE.PerspectiveCamera(b.fov, b.aspect, b.near, b.far);break;case "OrthographicCamera":
	          f = new THREE.OrthographicCamera(b.left, b.right, b.top, b.bottom, b.near, b.far);break;case "AmbientLight":
	          f = new THREE.AmbientLight(b.color);
	          break;case "DirectionalLight":
	          f = new THREE.DirectionalLight(b.color, b.intensity);break;case "PointLight":
	          f = new THREE.PointLight(b.color, b.intensity, b.distance, b.decay);break;case "SpotLight":
	          f = new THREE.SpotLight(b.color, b.intensity, b.distance, b.angle, b.exponent, b.decay);break;case "HemisphereLight":
	          f = new THREE.HemisphereLight(b.color, b.groundColor, b.intensity);break;case "Mesh":
	          f = new THREE.Mesh(e(b.geometry), g(b.material));break;case "LOD":
	          f = new THREE.LOD();break;case "Line":
	          f = new THREE.Line(e(b.geometry), g(b.material), b.mode);break;case "PointCloud":case "Points":
	          f = new THREE.Points(e(b.geometry), g(b.material));break;case "Sprite":
	          f = new THREE.Sprite(g(b.material));break;case "Group":
	          f = new THREE.Group();break;default:
	          f = new THREE.Object3D();}f.uuid = b.uuid;void 0 !== b.name && (f.name = b.name);void 0 !== b.matrix ? (a.fromArray(b.matrix), a.decompose(f.position, f.quaternion, f.scale)) : (void 0 !== b.position && f.position.fromArray(b.position), void 0 !== b.rotation && f.rotation.fromArray(b.rotation), void 0 !== b.scale && f.scale.fromArray(b.scale));
	      void 0 !== b.castShadow && (f.castShadow = b.castShadow);void 0 !== b.receiveShadow && (f.receiveShadow = b.receiveShadow);void 0 !== b.visible && (f.visible = b.visible);void 0 !== b.userData && (f.userData = b.userData);if (void 0 !== b.children) for (var h in b.children) {
	        f.add(this.parseObject(b.children[h], c, d));
	      }if ("LOD" === b.type) {
	        b = b.levels;for (var l = 0; l < b.length; l++) {
	          var k = b[l];h = f.getObjectByProperty("uuid", k.object);void 0 !== h && f.addLevel(h, k.distance);
	        }
	      }return f;
	    };
	  }() };
	THREE.TextureLoader = function (a) {
	  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
	};THREE.TextureLoader.prototype = { constructor: THREE.TextureLoader, load: function load(a, b, c, d) {
	    var e = new THREE.Texture(),
	        g = new THREE.ImageLoader(this.manager);g.setCrossOrigin(this.crossOrigin);g.load(a, function (a) {
	      e.image = a;e.needsUpdate = !0;void 0 !== b && b(e);
	    }, c, d);return e;
	  }, setCrossOrigin: function setCrossOrigin(a) {
	    this.crossOrigin = a;
	  } };THREE.CubeTextureLoader = function (a) {
	  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
	};
	THREE.CubeTextureLoader.prototype = { constructor: THREE.CubeTextureLoader, load: function load(a, b, c, d) {
	    function e(c) {
	      f.load(a[c], function (a) {
	        g.images[c] = a;h++;6 === h && (g.needsUpdate = !0, b && b(g));
	      }, void 0, d);
	    }var g = new THREE.CubeTexture([]),
	        f = new THREE.ImageLoader();f.setCrossOrigin(this.crossOrigin);var h = 0;for (c = 0; c < a.length; ++c) {
	      e(c);
	    }return g;
	  }, setCrossOrigin: function setCrossOrigin(a) {
	    this.crossOrigin = a;
	  } };
	THREE.DataTextureLoader = THREE.BinaryTextureLoader = function (a) {
	  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;this._parser = null;
	};
	THREE.BinaryTextureLoader.prototype = { constructor: THREE.BinaryTextureLoader, load: function load(a, b, c, d) {
	    var e = this,
	        g = new THREE.DataTexture(),
	        f = new THREE.XHRLoader(this.manager);f.setCrossOrigin(this.crossOrigin);f.setResponseType("arraybuffer");f.load(a, function (a) {
	      if (a = e._parser(a)) void 0 !== a.image ? g.image = a.image : void 0 !== a.data && (g.image.width = a.width, g.image.height = a.height, g.image.data = a.data), g.wrapS = void 0 !== a.wrapS ? a.wrapS : THREE.ClampToEdgeWrapping, g.wrapT = void 0 !== a.wrapT ? a.wrapT : THREE.ClampToEdgeWrapping, g.magFilter = void 0 !== a.magFilter ? a.magFilter : THREE.LinearFilter, g.minFilter = void 0 !== a.minFilter ? a.minFilter : THREE.LinearMipMapLinearFilter, g.anisotropy = void 0 !== a.anisotropy ? a.anisotropy : 1, void 0 !== a.format && (g.format = a.format), void 0 !== a.type && (g.type = a.type), void 0 !== a.mipmaps && (g.mipmaps = a.mipmaps), 1 === a.mipmapCount && (g.minFilter = THREE.LinearFilter), g.needsUpdate = !0, b && b(g, a);
	    }, c, d);return g;
	  }, setCrossOrigin: function setCrossOrigin(a) {
	    this.crossOrigin = a;
	  } };
	THREE.CompressedTextureLoader = function (a) {
	  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;this._parser = null;
	};
	THREE.CompressedTextureLoader.prototype = { constructor: THREE.CompressedTextureLoader, load: function load(a, b, c, d) {
	    var e = this,
	        g = [],
	        f = new THREE.CompressedTexture();f.image = g;var h = new THREE.XHRLoader(this.manager);h.setCrossOrigin(this.crossOrigin);h.setResponseType("arraybuffer");if (Array.isArray(a)) for (var l = 0, k = function k(_k) {
	      h.load(a[_k], function (a) {
	        a = e._parser(a, !0);g[_k] = { width: a.width, height: a.height, format: a.format, mipmaps: a.mipmaps };l += 1;6 === l && (1 === a.mipmapCount && (f.minFilter = THREE.LinearFilter), f.format = a.format, f.needsUpdate = !0, b && b(f));
	      }, c, d);
	    }, m = 0, p = a.length; m < p; ++m) {
	      k(m);
	    } else h.load(a, function (a) {
	      a = e._parser(a, !0);if (a.isCubemap) for (var c = a.mipmaps.length / a.mipmapCount, d = 0; d < c; d++) {
	        g[d] = { mipmaps: [] };for (var h = 0; h < a.mipmapCount; h++) {
	          g[d].mipmaps.push(a.mipmaps[d * a.mipmapCount + h]), g[d].format = a.format, g[d].width = a.width, g[d].height = a.height;
	        }
	      } else f.image.width = a.width, f.image.height = a.height, f.mipmaps = a.mipmaps;1 === a.mipmapCount && (f.minFilter = THREE.LinearFilter);f.format = a.format;f.needsUpdate = !0;b && b(f);
	    }, c, d);return f;
	  }, setCrossOrigin: function setCrossOrigin(a) {
	    this.crossOrigin = a;
	  } };
	THREE.Material = function () {
	  Object.defineProperty(this, "id", { value: THREE.MaterialIdCount++ });this.uuid = THREE.Math.generateUUID();this.name = "";this.type = "Material";this.side = THREE.FrontSide;this.opacity = 1;this.transparent = !1;this.blending = THREE.NormalBlending;this.blendSrc = THREE.SrcAlphaFactor;this.blendDst = THREE.OneMinusSrcAlphaFactor;this.blendEquation = THREE.AddEquation;this.blendEquationAlpha = this.blendDstAlpha = this.blendSrcAlpha = null;this.depthFunc = THREE.LessEqualDepth;this.colorWrite = this.depthWrite = this.depthTest = !0;this.precision = null;this.polygonOffset = !1;this.overdraw = this.alphaTest = this.polygonOffsetUnits = this.polygonOffsetFactor = 0;this._needsUpdate = this.visible = !0;
	};
	THREE.Material.prototype = { constructor: THREE.Material, get needsUpdate() {
	    return this._needsUpdate;
	  }, set needsUpdate(a) {
	    !0 === a && this.update();this._needsUpdate = a;
	  }, setValues: function setValues(a) {
	    if (void 0 !== a) for (var b in a) {
	      var c = a[b];if (void 0 === c) console.warn("THREE.Material: '" + b + "' parameter is undefined.");else {
	        var d = this[b];void 0 === d ? console.warn("THREE." + this.type + ": '" + b + "' is not a property of this material.") : d instanceof THREE.Color ? d.set(c) : d instanceof THREE.Vector3 && c instanceof THREE.Vector3 ? d.copy(c) : this[b] = "overdraw" === b ? Number(c) : c;
	      }
	    }
	  }, toJSON: function toJSON(a) {
	    var b = { metadata: { version: 4.4, type: "Material", generator: "Material.toJSON" } };b.uuid = this.uuid;b.type = this.type;"" !== this.name && (b.name = this.name);this.color instanceof THREE.Color && (b.color = this.color.getHex());this.emissive instanceof THREE.Color && (b.emissive = this.emissive.getHex());this.specular instanceof THREE.Color && (b.specular = this.specular.getHex());void 0 !== this.shininess && (b.shininess = this.shininess);this.map instanceof THREE.Texture && (b.map = this.map.toJSON(a).uuid);this.alphaMap instanceof THREE.Texture && (b.alphaMap = this.alphaMap.toJSON(a).uuid);this.lightMap instanceof THREE.Texture && (b.lightMap = this.lightMap.toJSON(a).uuid);this.bumpMap instanceof THREE.Texture && (b.bumpMap = this.bumpMap.toJSON(a).uuid, b.bumpScale = this.bumpScale);this.normalMap instanceof THREE.Texture && (b.normalMap = this.normalMap.toJSON(a).uuid, b.normalScale = this.normalScale);this.displacementMap instanceof THREE.Texture && (b.displacementMap = this.displacementMap.toJSON(a).uuid, b.displacementScale = this.displacementScale, b.displacementBias = this.displacementBias);this.specularMap instanceof THREE.Texture && (b.specularMap = this.specularMap.toJSON(a).uuid);this.envMap instanceof THREE.Texture && (b.envMap = this.envMap.toJSON(a).uuid, b.reflectivity = this.reflectivity);void 0 !== this.size && (b.size = this.size);void 0 !== this.sizeAttenuation && (b.sizeAttenuation = this.sizeAttenuation);void 0 !== this.vertexColors && this.vertexColors !== THREE.NoColors && (b.vertexColors = this.vertexColors);void 0 !== this.shading && this.shading !== THREE.SmoothShading && (b.shading = this.shading);void 0 !== this.blending && this.blending !== THREE.NormalBlending && (b.blending = this.blending);void 0 !== this.side && this.side !== THREE.FrontSide && (b.side = this.side);1 > this.opacity && (b.opacity = this.opacity);!0 === this.transparent && (b.transparent = this.transparent);0 < this.alphaTest && (b.alphaTest = this.alphaTest);!0 === this.wireframe && (b.wireframe = this.wireframe);1 < this.wireframeLinewidth && (b.wireframeLinewidth = this.wireframeLinewidth);return b;
	  },
	  clone: function clone() {
	    return new this.constructor().copy(this);
	  }, copy: function copy(a) {
	    this.name = a.name;this.side = a.side;this.opacity = a.opacity;this.transparent = a.transparent;this.blending = a.blending;this.blendSrc = a.blendSrc;this.blendDst = a.blendDst;this.blendEquation = a.blendEquation;this.blendSrcAlpha = a.blendSrcAlpha;this.blendDstAlpha = a.blendDstAlpha;this.blendEquationAlpha = a.blendEquationAlpha;this.depthFunc = a.depthFunc;this.depthTest = a.depthTest;this.depthWrite = a.depthWrite;this.precision = a.precision;this.polygonOffset = a.polygonOffset;this.polygonOffsetFactor = a.polygonOffsetFactor;this.polygonOffsetUnits = a.polygonOffsetUnits;this.alphaTest = a.alphaTest;this.overdraw = a.overdraw;this.visible = a.visible;return this;
	  }, update: function update() {
	    this.dispatchEvent({ type: "update" });
	  }, dispose: function dispose() {
	    this.dispatchEvent({ type: "dispose" });
	  }, get wrapAround() {
	    console.warn("THREE." + this.type + ": .wrapAround has been removed.");
	  }, set wrapAround(a) {
	    console.warn("THREE." + this.type + ": .wrapAround has been removed.");
	  }, get wrapRGB() {
	    console.warn("THREE." + this.type + ": .wrapRGB has been removed.");return new THREE.Color();
	  } };THREE.EventDispatcher.prototype.apply(THREE.Material.prototype);THREE.MaterialIdCount = 0;THREE.LineBasicMaterial = function (a) {
	  THREE.Material.call(this);this.type = "LineBasicMaterial";this.color = new THREE.Color(16777215);this.linewidth = 1;this.linejoin = this.linecap = "round";this.vertexColors = THREE.NoColors;this.fog = !0;this.setValues(a);
	};THREE.LineBasicMaterial.prototype = Object.create(THREE.Material.prototype);
	THREE.LineBasicMaterial.prototype.constructor = THREE.LineBasicMaterial;THREE.LineBasicMaterial.prototype.copy = function (a) {
	  THREE.Material.prototype.copy.call(this, a);this.color.copy(a.color);this.linewidth = a.linewidth;this.linecap = a.linecap;this.linejoin = a.linejoin;this.vertexColors = a.vertexColors;this.fog = a.fog;return this;
	};
	THREE.LineDashedMaterial = function (a) {
	  THREE.Material.call(this);this.type = "LineDashedMaterial";this.color = new THREE.Color(16777215);this.scale = this.linewidth = 1;this.dashSize = 3;this.gapSize = 1;this.vertexColors = !1;this.fog = !0;this.setValues(a);
	};THREE.LineDashedMaterial.prototype = Object.create(THREE.Material.prototype);THREE.LineDashedMaterial.prototype.constructor = THREE.LineDashedMaterial;
	THREE.LineDashedMaterial.prototype.copy = function (a) {
	  THREE.Material.prototype.copy.call(this, a);this.color.copy(a.color);this.linewidth = a.linewidth;this.scale = a.scale;this.dashSize = a.dashSize;this.gapSize = a.gapSize;this.vertexColors = a.vertexColors;this.fog = a.fog;return this;
	};
	THREE.MeshBasicMaterial = function (a) {
	  THREE.Material.call(this);this.type = "MeshBasicMaterial";this.color = new THREE.Color(16777215);this.aoMap = this.map = null;this.aoMapIntensity = 1;this.envMap = this.alphaMap = this.specularMap = null;this.combine = THREE.MultiplyOperation;this.reflectivity = 1;this.refractionRatio = .98;this.fog = !0;this.shading = THREE.SmoothShading;this.wireframe = !1;this.wireframeLinewidth = 1;this.wireframeLinejoin = this.wireframeLinecap = "round";this.vertexColors = THREE.NoColors;this.morphTargets = this.skinning = !1;this.setValues(a);
	};THREE.MeshBasicMaterial.prototype = Object.create(THREE.Material.prototype);THREE.MeshBasicMaterial.prototype.constructor = THREE.MeshBasicMaterial;
	THREE.MeshBasicMaterial.prototype.copy = function (a) {
	  THREE.Material.prototype.copy.call(this, a);this.color.copy(a.color);this.map = a.map;this.aoMap = a.aoMap;this.aoMapIntensity = a.aoMapIntensity;this.specularMap = a.specularMap;this.alphaMap = a.alphaMap;this.envMap = a.envMap;this.combine = a.combine;this.reflectivity = a.reflectivity;this.refractionRatio = a.refractionRatio;this.fog = a.fog;this.shading = a.shading;this.wireframe = a.wireframe;this.wireframeLinewidth = a.wireframeLinewidth;this.wireframeLinecap = a.wireframeLinecap;
	  this.wireframeLinejoin = a.wireframeLinejoin;this.vertexColors = a.vertexColors;this.skinning = a.skinning;this.morphTargets = a.morphTargets;return this;
	};
	THREE.MeshLambertMaterial = function (a) {
	  THREE.Material.call(this);this.type = "MeshLambertMaterial";this.color = new THREE.Color(16777215);this.emissive = new THREE.Color(0);this.envMap = this.alphaMap = this.specularMap = this.map = null;this.combine = THREE.MultiplyOperation;this.reflectivity = 1;this.refractionRatio = .98;this.fog = !0;this.wireframe = !1;this.wireframeLinewidth = 1;this.wireframeLinejoin = this.wireframeLinecap = "round";this.vertexColors = THREE.NoColors;this.morphNormals = this.morphTargets = this.skinning = !1;this.setValues(a);
	};
	THREE.MeshLambertMaterial.prototype = Object.create(THREE.Material.prototype);THREE.MeshLambertMaterial.prototype.constructor = THREE.MeshLambertMaterial;
	THREE.MeshLambertMaterial.prototype.copy = function (a) {
	  THREE.Material.prototype.copy.call(this, a);this.color.copy(a.color);this.emissive.copy(a.emissive);this.map = a.map;this.specularMap = a.specularMap;this.alphaMap = a.alphaMap;this.envMap = a.envMap;this.combine = a.combine;this.reflectivity = a.reflectivity;this.refractionRatio = a.refractionRatio;this.fog = a.fog;this.wireframe = a.wireframe;this.wireframeLinewidth = a.wireframeLinewidth;this.wireframeLinecap = a.wireframeLinecap;this.wireframeLinejoin = a.wireframeLinejoin;
	  this.vertexColors = a.vertexColors;this.skinning = a.skinning;this.morphTargets = a.morphTargets;this.morphNormals = a.morphNormals;return this;
	};
	THREE.MeshPhongMaterial = function (a) {
	  THREE.Material.call(this);this.type = "MeshPhongMaterial";this.color = new THREE.Color(16777215);this.emissive = new THREE.Color(0);this.specular = new THREE.Color(1118481);this.shininess = 30;this.metal = !1;this.lightMap = this.map = null;this.lightMapIntensity = 1;this.aoMap = null;this.aoMapIntensity = 1;this.bumpMap = this.emissiveMap = null;this.bumpScale = 1;this.normalMap = null;this.normalScale = new THREE.Vector2(1, 1);this.displacementMap = null;this.displacementScale = 1;this.displacementBias = 0;this.envMap = this.alphaMap = this.specularMap = null;this.combine = THREE.MultiplyOperation;this.reflectivity = 1;this.refractionRatio = .98;this.fog = !0;this.shading = THREE.SmoothShading;this.wireframe = !1;this.wireframeLinewidth = 1;this.wireframeLinejoin = this.wireframeLinecap = "round";this.vertexColors = THREE.NoColors;this.morphNormals = this.morphTargets = this.skinning = !1;this.setValues(a);
	};THREE.MeshPhongMaterial.prototype = Object.create(THREE.Material.prototype);THREE.MeshPhongMaterial.prototype.constructor = THREE.MeshPhongMaterial;
	THREE.MeshPhongMaterial.prototype.copy = function (a) {
	  THREE.Material.prototype.copy.call(this, a);this.color.copy(a.color);this.emissive.copy(a.emissive);this.specular.copy(a.specular);this.shininess = a.shininess;this.metal = a.metal;this.map = a.map;this.lightMap = a.lightMap;this.lightMapIntensity = a.lightMapIntensity;this.aoMap = a.aoMap;this.aoMapIntensity = a.aoMapIntensity;this.emissiveMap = a.emissiveMap;this.bumpMap = a.bumpMap;this.bumpScale = a.bumpScale;this.normalMap = a.normalMap;this.normalScale.copy(a.normalScale);
	  this.displacementMap = a.displacementMap;this.displacementScale = a.displacementScale;this.displacementBias = a.displacementBias;this.specularMap = a.specularMap;this.alphaMap = a.alphaMap;this.envMap = a.envMap;this.combine = a.combine;this.reflectivity = a.reflectivity;this.refractionRatio = a.refractionRatio;this.fog = a.fog;this.shading = a.shading;this.wireframe = a.wireframe;this.wireframeLinewidth = a.wireframeLinewidth;this.wireframeLinecap = a.wireframeLinecap;this.wireframeLinejoin = a.wireframeLinejoin;this.vertexColors = a.vertexColors;this.skinning = a.skinning;this.morphTargets = a.morphTargets;this.morphNormals = a.morphNormals;return this;
	};THREE.MeshDepthMaterial = function (a) {
	  THREE.Material.call(this);this.type = "MeshDepthMaterial";this.wireframe = this.morphTargets = !1;this.wireframeLinewidth = 1;this.setValues(a);
	};THREE.MeshDepthMaterial.prototype = Object.create(THREE.Material.prototype);THREE.MeshDepthMaterial.prototype.constructor = THREE.MeshDepthMaterial;
	THREE.MeshDepthMaterial.prototype.copy = function (a) {
	  THREE.Material.prototype.copy.call(this, a);this.wireframe = a.wireframe;this.wireframeLinewidth = a.wireframeLinewidth;return this;
	};THREE.MeshNormalMaterial = function (a) {
	  THREE.Material.call(this, a);this.type = "MeshNormalMaterial";this.wireframe = !1;this.wireframeLinewidth = 1;this.morphTargets = !1;this.setValues(a);
	};THREE.MeshNormalMaterial.prototype = Object.create(THREE.Material.prototype);THREE.MeshNormalMaterial.prototype.constructor = THREE.MeshNormalMaterial;
	THREE.MeshNormalMaterial.prototype.copy = function (a) {
	  THREE.Material.prototype.copy.call(this, a);this.wireframe = a.wireframe;this.wireframeLinewidth = a.wireframeLinewidth;return this;
	};THREE.MultiMaterial = function (a) {
	  this.uuid = THREE.Math.generateUUID();this.type = "MultiMaterial";this.materials = a instanceof Array ? a : [];this.visible = !0;
	};
	THREE.MultiMaterial.prototype = { constructor: THREE.MultiMaterial, toJSON: function toJSON() {
	    for (var a = { metadata: { version: 4.2, type: "material", generator: "MaterialExporter" }, uuid: this.uuid, type: this.type, materials: [] }, b = 0, c = this.materials.length; b < c; b++) {
	      a.materials.push(this.materials[b].toJSON());
	    }a.visible = this.visible;return a;
	  }, clone: function clone() {
	    for (var a = new this.constructor(), b = 0; b < this.materials.length; b++) {
	      a.materials.push(this.materials[b].clone());
	    }a.visible = this.visible;return a;
	  } };THREE.MeshFaceMaterial = THREE.MultiMaterial;
	THREE.PointsMaterial = function (a) {
	  THREE.Material.call(this);this.type = "PointsMaterial";this.color = new THREE.Color(16777215);this.map = null;this.size = 1;this.sizeAttenuation = !0;this.vertexColors = THREE.NoColors;this.fog = !0;this.setValues(a);
	};THREE.PointsMaterial.prototype = Object.create(THREE.Material.prototype);THREE.PointsMaterial.prototype.constructor = THREE.PointsMaterial;
	THREE.PointsMaterial.prototype.copy = function (a) {
	  THREE.Material.prototype.copy.call(this, a);this.color.copy(a.color);this.map = a.map;this.size = a.size;this.sizeAttenuation = a.sizeAttenuation;this.vertexColors = a.vertexColors;this.fog = a.fog;return this;
	};THREE.PointCloudMaterial = function (a) {
	  console.warn("THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.");return new THREE.PointsMaterial(a);
	};
	THREE.ParticleBasicMaterial = function (a) {
	  console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.");return new THREE.PointsMaterial(a);
	};THREE.ParticleSystemMaterial = function (a) {
	  console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.");return new THREE.PointsMaterial(a);
	};
	THREE.ShaderMaterial = function (a) {
	  THREE.Material.call(this);this.type = "ShaderMaterial";this.defines = {};this.uniforms = {};this.vertexShader = "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";this.fragmentShader = "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";this.shading = THREE.SmoothShading;this.linewidth = 1;this.wireframe = !1;this.wireframeLinewidth = 1;this.lights = this.fog = !1;this.vertexColors = THREE.NoColors;this.derivatives = this.morphNormals = this.morphTargets = this.skinning = !1;this.defaultAttributeValues = { color: [1, 1, 1], uv: [0, 0], uv2: [0, 0] };this.index0AttributeName = void 0;void 0 !== a && (void 0 !== a.attributes && console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."), this.setValues(a));
	};THREE.ShaderMaterial.prototype = Object.create(THREE.Material.prototype);THREE.ShaderMaterial.prototype.constructor = THREE.ShaderMaterial;
	THREE.ShaderMaterial.prototype.copy = function (a) {
	  THREE.Material.prototype.copy.call(this, a);this.fragmentShader = a.fragmentShader;this.vertexShader = a.vertexShader;this.uniforms = THREE.UniformsUtils.clone(a.uniforms);this.attributes = a.attributes;this.defines = a.defines;this.shading = a.shading;this.wireframe = a.wireframe;this.wireframeLinewidth = a.wireframeLinewidth;this.fog = a.fog;this.lights = a.lights;this.vertexColors = a.vertexColors;this.skinning = a.skinning;this.morphTargets = a.morphTargets;this.morphNormals = a.morphNormals;this.derivatives = a.derivatives;return this;
	};THREE.ShaderMaterial.prototype.toJSON = function (a) {
	  a = THREE.Material.prototype.toJSON.call(this, a);a.uniforms = this.uniforms;a.attributes = this.attributes;a.vertexShader = this.vertexShader;a.fragmentShader = this.fragmentShader;return a;
	};THREE.RawShaderMaterial = function (a) {
	  THREE.ShaderMaterial.call(this, a);this.type = "RawShaderMaterial";
	};THREE.RawShaderMaterial.prototype = Object.create(THREE.ShaderMaterial.prototype);
	THREE.RawShaderMaterial.prototype.constructor = THREE.RawShaderMaterial;THREE.SpriteMaterial = function (a) {
	  THREE.Material.call(this);this.type = "SpriteMaterial";this.color = new THREE.Color(16777215);this.map = null;this.rotation = 0;this.fog = !1;this.setValues(a);
	};THREE.SpriteMaterial.prototype = Object.create(THREE.Material.prototype);THREE.SpriteMaterial.prototype.constructor = THREE.SpriteMaterial;
	THREE.SpriteMaterial.prototype.copy = function (a) {
	  THREE.Material.prototype.copy.call(this, a);this.color.copy(a.color);this.map = a.map;this.rotation = a.rotation;this.fog = a.fog;return this;
	};
	THREE.Texture = function (a, b, c, d, e, g, f, h, l) {
	  Object.defineProperty(this, "id", { value: THREE.TextureIdCount++ });this.uuid = THREE.Math.generateUUID();this.sourceFile = this.name = "";this.image = void 0 !== a ? a : THREE.Texture.DEFAULT_IMAGE;this.mipmaps = [];this.mapping = void 0 !== b ? b : THREE.Texture.DEFAULT_MAPPING;this.wrapS = void 0 !== c ? c : THREE.ClampToEdgeWrapping;this.wrapT = void 0 !== d ? d : THREE.ClampToEdgeWrapping;this.magFilter = void 0 !== e ? e : THREE.LinearFilter;this.minFilter = void 0 !== g ? g : THREE.LinearMipMapLinearFilter;
	  this.anisotropy = void 0 !== l ? l : 1;this.format = void 0 !== f ? f : THREE.RGBAFormat;this.type = void 0 !== h ? h : THREE.UnsignedByteType;this.offset = new THREE.Vector2(0, 0);this.repeat = new THREE.Vector2(1, 1);this.generateMipmaps = !0;this.premultiplyAlpha = !1;this.flipY = !0;this.unpackAlignment = 4;this.version = 0;this.onUpdate = null;
	};THREE.Texture.DEFAULT_IMAGE = void 0;THREE.Texture.DEFAULT_MAPPING = THREE.UVMapping;
	THREE.Texture.prototype = { constructor: THREE.Texture, set needsUpdate(a) {
	    !0 === a && this.version++;
	  }, clone: function clone() {
	    return new this.constructor().copy(this);
	  }, copy: function copy(a) {
	    this.image = a.image;this.mipmaps = a.mipmaps.slice(0);this.mapping = a.mapping;this.wrapS = a.wrapS;this.wrapT = a.wrapT;this.magFilter = a.magFilter;this.minFilter = a.minFilter;this.anisotropy = a.anisotropy;this.format = a.format;this.type = a.type;this.offset.copy(a.offset);this.repeat.copy(a.repeat);this.generateMipmaps = a.generateMipmaps;this.premultiplyAlpha = a.premultiplyAlpha;this.flipY = a.flipY;this.unpackAlignment = a.unpackAlignment;return this;
	  }, toJSON: function toJSON(a) {
	    if (void 0 !== a.textures[this.uuid]) return a.textures[this.uuid];var b = { metadata: { version: 4.4, type: "Texture", generator: "Texture.toJSON" }, uuid: this.uuid, name: this.name, mapping: this.mapping, repeat: [this.repeat.x, this.repeat.y], offset: [this.offset.x, this.offset.y], wrap: [this.wrapS, this.wrapT], minFilter: this.minFilter, magFilter: this.magFilter, anisotropy: this.anisotropy };if (void 0 !== this.image) {
	      var c = this.image;void 0 === c.uuid && (c.uuid = THREE.Math.generateUUID());if (void 0 === a.images[c.uuid]) {
	        var d = a.images,
	            e = c.uuid,
	            g = c.uuid,
	            f;void 0 !== c.toDataURL ? f = c : (f = document.createElement("canvas"), f.width = c.width, f.height = c.height, f.getContext("2d").drawImage(c, 0, 0, c.width, c.height));f = 2048 < f.width || 2048 < f.height ? f.toDataURL("image/jpeg", .6) : f.toDataURL("image/png");d[e] = { uuid: g, url: f };
	      }b.image = c.uuid;
	    }return a.textures[this.uuid] = b;
	  }, dispose: function dispose() {
	    this.dispatchEvent({ type: "dispose" });
	  }, transformUv: function transformUv(a) {
	    if (this.mapping === THREE.UVMapping) {
	      a.multiply(this.repeat);a.add(this.offset);if (0 > a.x || 1 < a.x) switch (this.wrapS) {case THREE.RepeatWrapping:
	          a.x -= Math.floor(a.x);break;case THREE.ClampToEdgeWrapping:
	          a.x = 0 > a.x ? 0 : 1;break;case THREE.MirroredRepeatWrapping:
	          1 === Math.abs(Math.floor(a.x) % 2) ? a.x = Math.ceil(a.x) - a.x : a.x -= Math.floor(a.x);}if (0 > a.y || 1 < a.y) switch (this.wrapT) {case THREE.RepeatWrapping:
	          a.y -= Math.floor(a.y);break;case THREE.ClampToEdgeWrapping:
	          a.y = 0 > a.y ? 0 : 1;break;case THREE.MirroredRepeatWrapping:
	          1 === Math.abs(Math.floor(a.y) % 2) ? a.y = Math.ceil(a.y) - a.y : a.y -= Math.floor(a.y);}this.flipY && (a.y = 1 - a.y);
	    }
	  } };THREE.EventDispatcher.prototype.apply(THREE.Texture.prototype);THREE.TextureIdCount = 0;THREE.CanvasTexture = function (a, b, c, d, e, g, f, h, l) {
	  THREE.Texture.call(this, a, b, c, d, e, g, f, h, l);this.needsUpdate = !0;
	};THREE.CanvasTexture.prototype = Object.create(THREE.Texture.prototype);THREE.CanvasTexture.prototype.constructor = THREE.CanvasTexture;
	THREE.CubeTexture = function (a, b, c, d, e, g, f, h, l) {
	  b = void 0 !== b ? b : THREE.CubeReflectionMapping;THREE.Texture.call(this, a, b, c, d, e, g, f, h, l);this.images = a;this.flipY = !1;
	};THREE.CubeTexture.prototype = Object.create(THREE.Texture.prototype);THREE.CubeTexture.prototype.constructor = THREE.CubeTexture;THREE.CubeTexture.prototype.copy = function (a) {
	  THREE.Texture.prototype.copy.call(this, a);this.images = a.images;return this;
	};
	THREE.CompressedTexture = function (a, b, c, d, e, g, f, h, l, k, m) {
	  THREE.Texture.call(this, null, g, f, h, l, k, d, e, m);this.image = { width: b, height: c };this.mipmaps = a;this.generateMipmaps = this.flipY = !1;
	};THREE.CompressedTexture.prototype = Object.create(THREE.Texture.prototype);THREE.CompressedTexture.prototype.constructor = THREE.CompressedTexture;
	THREE.DataTexture = function (a, b, c, d, e, g, f, h, l, k, m) {
	  THREE.Texture.call(this, null, g, f, h, l, k, d, e, m);this.image = { data: a, width: b, height: c };this.magFilter = void 0 !== l ? l : THREE.NearestFilter;this.minFilter = void 0 !== k ? k : THREE.NearestFilter;this.generateMipmaps = this.flipY = !1;
	};THREE.DataTexture.prototype = Object.create(THREE.Texture.prototype);THREE.DataTexture.prototype.constructor = THREE.DataTexture;
	THREE.VideoTexture = function (a, b, c, d, e, g, f, h, l) {
	  function k() {
	    requestAnimationFrame(k);a.readyState === a.HAVE_ENOUGH_DATA && (m.needsUpdate = !0);
	  }THREE.Texture.call(this, a, b, c, d, e, g, f, h, l);this.generateMipmaps = !1;var m = this;k();
	};THREE.VideoTexture.prototype = Object.create(THREE.Texture.prototype);THREE.VideoTexture.prototype.constructor = THREE.VideoTexture;THREE.Group = function () {
	  THREE.Object3D.call(this);this.type = "Group";
	};THREE.Group.prototype = Object.create(THREE.Object3D.prototype);
	THREE.Group.prototype.constructor = THREE.Group;THREE.Points = function (a, b) {
	  THREE.Object3D.call(this);this.type = "Points";this.geometry = void 0 !== a ? a : new THREE.Geometry();this.material = void 0 !== b ? b : new THREE.PointsMaterial({ color: 16777215 * Math.random() });
	};THREE.Points.prototype = Object.create(THREE.Object3D.prototype);THREE.Points.prototype.constructor = THREE.Points;
	THREE.Points.prototype.raycast = function () {
	  var a = new THREE.Matrix4(),
	      b = new THREE.Ray();return function (c, d) {
	    function e(a, e) {
	      var f = b.distanceSqToPoint(a);if (f < l) {
	        var h = b.closestPointToPoint(a);h.applyMatrix4(g.matrixWorld);var k = c.ray.origin.distanceTo(h);k < c.near || k > c.far || d.push({ distance: k, distanceToRay: Math.sqrt(f), point: h.clone(), index: e, face: null, object: g });
	      }
	    }var g = this,
	        f = g.geometry,
	        h = c.params.Points.threshold;a.getInverse(this.matrixWorld);b.copy(c.ray).applyMatrix4(a);if (null === f.boundingBox || !1 !== b.isIntersectionBox(f.boundingBox)) {
	      var h = h / ((this.scale.x + this.scale.y + this.scale.z) / 3),
	          l = h * h,
	          h = new THREE.Vector3();if (f instanceof THREE.BufferGeometry) {
	        var k = f.index,
	            f = f.attributes.position.array;if (null !== k) for (var m = k.array, k = 0, p = m.length; k < p; k++) {
	          var n = m[k];h.fromArray(f, 3 * n);e(h, n);
	        } else for (k = 0, m = f.length / 3; k < m; k++) {
	          h.fromArray(f, 3 * k), e(h, k);
	        }
	      } else for (h = f.vertices, k = 0, m = h.length; k < m; k++) {
	        e(h[k], k);
	      }
	    }
	  };
	}();THREE.Points.prototype.clone = function () {
	  return new this.constructor(this.geometry, this.material).copy(this);
	};
	THREE.PointCloud = function (a, b) {
	  console.warn("THREE.PointCloud has been renamed to THREE.Points.");return new THREE.Points(a, b);
	};THREE.ParticleSystem = function (a, b) {
	  console.warn("THREE.ParticleSystem has been renamed to THREE.Points.");return new THREE.Points(a, b);
	};
	THREE.Line = function (a, b, c) {
	  if (1 === c) return console.warn("THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead."), new THREE.LineSegments(a, b);THREE.Object3D.call(this);this.type = "Line";this.geometry = void 0 !== a ? a : new THREE.Geometry();this.material = void 0 !== b ? b : new THREE.LineBasicMaterial({ color: 16777215 * Math.random() });
	};THREE.Line.prototype = Object.create(THREE.Object3D.prototype);THREE.Line.prototype.constructor = THREE.Line;
	THREE.Line.prototype.raycast = function () {
	  var a = new THREE.Matrix4(),
	      b = new THREE.Ray(),
	      c = new THREE.Sphere();return function (d, e) {
	    var g = d.linePrecision,
	        g = g * g,
	        f = this.geometry;null === f.boundingSphere && f.computeBoundingSphere();c.copy(f.boundingSphere);c.applyMatrix4(this.matrixWorld);if (!1 !== d.ray.isIntersectionSphere(c)) {
	      a.getInverse(this.matrixWorld);b.copy(d.ray).applyMatrix4(a);var h = new THREE.Vector3(),
	          l = new THREE.Vector3(),
	          k = new THREE.Vector3(),
	          m = new THREE.Vector3(),
	          p = this instanceof THREE.LineSegments ? 2 : 1;if (f instanceof THREE.BufferGeometry) {
	        var n = f.index,
	            q = f.attributes;if (null !== n) for (var f = n.array, q = q.position.array, n = 0, s = f.length - 1; n < s; n += p) {
	          var t = f[n + 1];h.fromArray(q, 3 * f[n]);l.fromArray(q, 3 * t);t = b.distanceSqToSegment(h, l, m, k);t > g || (m.applyMatrix4(this.matrixWorld), t = d.ray.origin.distanceTo(m), t < d.near || t > d.far || e.push({ distance: t, point: k.clone().applyMatrix4(this.matrixWorld), index: n, face: null, faceIndex: null, object: this }));
	        } else for (q = q.position.array, n = 0, s = q.length / 3 - 1; n < s; n += p) {
	          h.fromArray(q, 3 * n), l.fromArray(q, 3 * n + 3), t = b.distanceSqToSegment(h, l, m, k), t > g || (m.applyMatrix4(this.matrixWorld), t = d.ray.origin.distanceTo(m), t < d.near || t > d.far || e.push({ distance: t, point: k.clone().applyMatrix4(this.matrixWorld), index: n, face: null, faceIndex: null, object: this }));
	        }
	      } else if (f instanceof THREE.Geometry) for (h = f.vertices, l = h.length, n = 0; n < l - 1; n += p) {
	        t = b.distanceSqToSegment(h[n], h[n + 1], m, k), t > g || (m.applyMatrix4(this.matrixWorld), t = d.ray.origin.distanceTo(m), t < d.near || t > d.far || e.push({ distance: t, point: k.clone().applyMatrix4(this.matrixWorld),
	          index: n, face: null, faceIndex: null, object: this }));
	      }
	    }
	  };
	}();THREE.Line.prototype.clone = function () {
	  return new this.constructor(this.geometry, this.material).copy(this);
	};THREE.LineStrip = 0;THREE.LinePieces = 1;THREE.LineSegments = function (a, b) {
	  THREE.Line.call(this, a, b);this.type = "LineSegments";
	};THREE.LineSegments.prototype = Object.create(THREE.Line.prototype);THREE.LineSegments.prototype.constructor = THREE.LineSegments;
	THREE.Mesh = function (a, b) {
	  THREE.Object3D.call(this);this.type = "Mesh";this.geometry = void 0 !== a ? a : new THREE.Geometry();this.material = void 0 !== b ? b : new THREE.MeshBasicMaterial({ color: 16777215 * Math.random() });this.updateMorphTargets();
	};THREE.Mesh.prototype = Object.create(THREE.Object3D.prototype);THREE.Mesh.prototype.constructor = THREE.Mesh;
	THREE.Mesh.prototype.updateMorphTargets = function () {
	  if (void 0 !== this.geometry.morphTargets && 0 < this.geometry.morphTargets.length) {
	    this.morphTargetBase = -1;this.morphTargetInfluences = [];this.morphTargetDictionary = {};for (var a = 0, b = this.geometry.morphTargets.length; a < b; a++) {
	      this.morphTargetInfluences.push(0), this.morphTargetDictionary[this.geometry.morphTargets[a].name] = a;
	    }
	  }
	};
	THREE.Mesh.prototype.getMorphTargetIndexByName = function (a) {
	  if (void 0 !== this.morphTargetDictionary[a]) return this.morphTargetDictionary[a];console.warn("THREE.Mesh.getMorphTargetIndexByName: morph target " + a + " does not exist. Returning 0.");return 0;
	};
	THREE.Mesh.prototype.raycast = function () {
	  function a(a, b, c, d, e, f, g) {
	    THREE.Triangle.barycoordFromPoint(a, b, c, d, t);e.multiplyScalar(t.x);f.multiplyScalar(t.y);g.multiplyScalar(t.z);e.add(f).add(g);return e.clone();
	  }function b(a, b, c, d, e, f, g) {
	    var h = a.material;if (null === (h.side === THREE.BackSide ? c.intersectTriangle(f, e, d, !0, g) : c.intersectTriangle(d, e, f, h.side !== THREE.DoubleSide, g))) return null;u.copy(g);u.applyMatrix4(a.matrixWorld);c = b.ray.origin.distanceTo(u);return c < b.near || c > b.far ? null : { distance: c, point: u.clone(),
	      object: a };
	  }function c(c, d, e, g, k, m, p, u) {
	    f.fromArray(g, 3 * m);h.fromArray(g, 3 * p);l.fromArray(g, 3 * u);if (c = b(c, d, e, f, h, l, v)) k && (n.fromArray(k, 2 * m), q.fromArray(k, 2 * p), s.fromArray(k, 2 * u), c.uv = a(v, f, h, l, n, q, s)), c.face = new THREE.Face3(m, p, u, THREE.Triangle.normal(f, h, l)), c.faceIndex = m;return c;
	  }var d = new THREE.Matrix4(),
	      e = new THREE.Ray(),
	      g = new THREE.Sphere(),
	      f = new THREE.Vector3(),
	      h = new THREE.Vector3(),
	      l = new THREE.Vector3(),
	      k = new THREE.Vector3(),
	      m = new THREE.Vector3(),
	      p = new THREE.Vector3(),
	      n = new THREE.Vector2(),
	      q = new THREE.Vector2(),
	      s = new THREE.Vector2(),
	      t = new THREE.Vector3(),
	      v = new THREE.Vector3(),
	      u = new THREE.Vector3();return function (u, t) {
	    var x = this.geometry,
	        B = this.material;if (void 0 !== B) {
	      null === x.boundingSphere && x.computeBoundingSphere();var y = this.matrixWorld;g.copy(x.boundingSphere);g.applyMatrix4(y);if (!1 !== u.ray.isIntersectionSphere(g) && (d.getInverse(y), e.copy(u.ray).applyMatrix4(d), null === x.boundingBox || !1 !== e.isIntersectionBox(x.boundingBox))) {
	        var z, A;if (x instanceof THREE.BufferGeometry) {
	          var J,
	              F,
	              B = x.index,
	              y = x.attributes,
	              x = y.position.array;
	          void 0 !== y.uv && (z = y.uv.array);if (null !== B) for (var y = B.array, C = 0, N = y.length; C < N; C += 3) {
	            if (B = y[C], J = y[C + 1], F = y[C + 2], A = c(this, u, e, x, z, B, J, F)) A.faceIndex = Math.floor(C / 3), t.push(A);
	          } else for (C = 0, N = x.length; C < N; C += 9) {
	            if (B = C / 3, J = B + 1, F = B + 2, A = c(this, u, e, x, z, B, J, F)) A.index = B, t.push(A);
	          }
	        } else if (x instanceof THREE.Geometry) {
	          var L,
	              Q,
	              y = B instanceof THREE.MeshFaceMaterial,
	              C = !0 === y ? B.materials : null,
	              N = x.vertices;J = x.faces;F = x.faceVertexUvs[0];0 < F.length && (z = F);for (var M = 0, K = J.length; M < K; M++) {
	            var E = J[M];A = !0 === y ? C[E.materialIndex] : B;if (void 0 !== A) {
	              F = N[E.a];L = N[E.b];Q = N[E.c];if (!0 === A.morphTargets) {
	                A = x.morphTargets;var O = this.morphTargetInfluences;f.set(0, 0, 0);h.set(0, 0, 0);l.set(0, 0, 0);for (var T = 0, H = A.length; T < H; T++) {
	                  var R = O[T];if (0 !== R) {
	                    var G = A[T].vertices;f.addScaledVector(k.subVectors(G[E.a], F), R);h.addScaledVector(m.subVectors(G[E.b], L), R);l.addScaledVector(p.subVectors(G[E.c], Q), R);
	                  }
	                }f.add(F);h.add(L);l.add(Q);F = f;L = h;Q = l;
	              }if (A = b(this, u, e, F, L, Q, v)) z && (O = z[M], n.copy(O[0]), q.copy(O[1]), s.copy(O[2]), A.uv = a(v, F, L, Q, n, q, s)), A.face = E, A.faceIndex = M, t.push(A);
	            }
	          }
	        }
	      }
	    }
	  };
	}();THREE.Mesh.prototype.clone = function () {
	  return new this.constructor(this.geometry, this.material).copy(this);
	};THREE.Bone = function (a) {
	  THREE.Object3D.call(this);this.type = "Bone";this.skin = a;
	};THREE.Bone.prototype = Object.create(THREE.Object3D.prototype);THREE.Bone.prototype.constructor = THREE.Bone;THREE.Bone.prototype.copy = function (a) {
	  THREE.Object3D.prototype.copy.call(this, a);this.skin = a.skin;return this;
	};
	THREE.Skeleton = function (a, b, c) {
	  this.useVertexTexture = void 0 !== c ? c : !0;this.identityMatrix = new THREE.Matrix4();a = a || [];this.bones = a.slice(0);this.useVertexTexture ? (a = Math.sqrt(4 * this.bones.length), a = THREE.Math.nextPowerOfTwo(Math.ceil(a)), this.boneTextureHeight = this.boneTextureWidth = a = Math.max(a, 4), this.boneMatrices = new Float32Array(this.boneTextureWidth * this.boneTextureHeight * 4), this.boneTexture = new THREE.DataTexture(this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, THREE.RGBAFormat, THREE.FloatType)) : this.boneMatrices = new Float32Array(16 * this.bones.length);if (void 0 === b) this.calculateInverses();else if (this.bones.length === b.length) this.boneInverses = b.slice(0);else for (console.warn("THREE.Skeleton bonInverses is the wrong length."), this.boneInverses = [], b = 0, a = this.bones.length; b < a; b++) {
	    this.boneInverses.push(new THREE.Matrix4());
	  }
	};
	THREE.Skeleton.prototype.calculateInverses = function () {
	  this.boneInverses = [];for (var a = 0, b = this.bones.length; a < b; a++) {
	    var c = new THREE.Matrix4();this.bones[a] && c.getInverse(this.bones[a].matrixWorld);this.boneInverses.push(c);
	  }
	};
	THREE.Skeleton.prototype.pose = function () {
	  for (var a, b = 0, c = this.bones.length; b < c; b++) {
	    (a = this.bones[b]) && a.matrixWorld.getInverse(this.boneInverses[b]);
	  }b = 0;for (c = this.bones.length; b < c; b++) {
	    if (a = this.bones[b]) a.parent ? (a.matrix.getInverse(a.parent.matrixWorld), a.matrix.multiply(a.matrixWorld)) : a.matrix.copy(a.matrixWorld), a.matrix.decompose(a.position, a.quaternion, a.scale);
	  }
	};
	THREE.Skeleton.prototype.update = function () {
	  var a = new THREE.Matrix4();return function () {
	    for (var b = 0, c = this.bones.length; b < c; b++) {
	      a.multiplyMatrices(this.bones[b] ? this.bones[b].matrixWorld : this.identityMatrix, this.boneInverses[b]), a.flattenToArrayOffset(this.boneMatrices, 16 * b);
	    }this.useVertexTexture && (this.boneTexture.needsUpdate = !0);
	  };
	}();THREE.Skeleton.prototype.clone = function () {
	  return new THREE.Skeleton(this.bones, this.boneInverses, this.useVertexTexture);
	};
	THREE.SkinnedMesh = function (a, b, c) {
	  THREE.Mesh.call(this, a, b);this.type = "SkinnedMesh";this.bindMode = "attached";this.bindMatrix = new THREE.Matrix4();this.bindMatrixInverse = new THREE.Matrix4();a = [];if (this.geometry && void 0 !== this.geometry.bones) {
	    for (var d, e = 0, g = this.geometry.bones.length; e < g; ++e) {
	      d = this.geometry.bones[e], b = new THREE.Bone(this), a.push(b), b.name = d.name, b.position.fromArray(d.pos), b.quaternion.fromArray(d.rotq), void 0 !== d.scl && b.scale.fromArray(d.scl);
	    }e = 0;for (g = this.geometry.bones.length; e < g; ++e) {
	      d = this.geometry.bones[e], -1 !== d.parent && null !== d.parent ? a[d.parent].add(a[e]) : this.add(a[e]);
	    }
	  }this.normalizeSkinWeights();this.updateMatrixWorld(!0);this.bind(new THREE.Skeleton(a, void 0, c), this.matrixWorld);
	};THREE.SkinnedMesh.prototype = Object.create(THREE.Mesh.prototype);THREE.SkinnedMesh.prototype.constructor = THREE.SkinnedMesh;
	THREE.SkinnedMesh.prototype.bind = function (a, b) {
	  this.skeleton = a;void 0 === b && (this.updateMatrixWorld(!0), this.skeleton.calculateInverses(), b = this.matrixWorld);this.bindMatrix.copy(b);this.bindMatrixInverse.getInverse(b);
	};THREE.SkinnedMesh.prototype.pose = function () {
	  this.skeleton.pose();
	};
	THREE.SkinnedMesh.prototype.normalizeSkinWeights = function () {
	  if (this.geometry instanceof THREE.Geometry) for (var a = 0; a < this.geometry.skinIndices.length; a++) {
	    var b = this.geometry.skinWeights[a],
	        c = 1 / b.lengthManhattan();Infinity !== c ? b.multiplyScalar(c) : b.set(1);
	  }
	};
	THREE.SkinnedMesh.prototype.updateMatrixWorld = function (a) {
	  THREE.Mesh.prototype.updateMatrixWorld.call(this, !0);"attached" === this.bindMode ? this.bindMatrixInverse.getInverse(this.matrixWorld) : "detached" === this.bindMode ? this.bindMatrixInverse.getInverse(this.bindMatrix) : console.warn("THREE.SkinnedMesh unrecognized bindMode: " + this.bindMode);
	};THREE.SkinnedMesh.prototype.clone = function () {
	  return new this.constructor(this.geometry, this.material, this.useVertexTexture).copy(this);
	};
	THREE.LOD = function () {
	  THREE.Object3D.call(this);this.type = "LOD";Object.defineProperties(this, { levels: { enumerable: !0, value: [] }, objects: { get: function get() {
	        console.warn("THREE.LOD: .objects has been renamed to .levels.");return this.levels;
	      } } });
	};THREE.LOD.prototype = Object.create(THREE.Object3D.prototype);THREE.LOD.prototype.constructor = THREE.LOD;
	THREE.LOD.prototype.addLevel = function (a, b) {
	  void 0 === b && (b = 0);b = Math.abs(b);for (var c = this.levels, d = 0; d < c.length && !(b < c[d].distance); d++) {}c.splice(d, 0, { distance: b, object: a });this.add(a);
	};THREE.LOD.prototype.getObjectForDistance = function (a) {
	  for (var b = this.levels, c = 1, d = b.length; c < d && !(a < b[c].distance); c++) {}return b[c - 1].object;
	};
	THREE.LOD.prototype.raycast = function () {
	  var a = new THREE.Vector3();return function (b, c) {
	    a.setFromMatrixPosition(this.matrixWorld);var d = b.ray.origin.distanceTo(a);this.getObjectForDistance(d).raycast(b, c);
	  };
	}();
	THREE.LOD.prototype.update = function () {
	  var a = new THREE.Vector3(),
	      b = new THREE.Vector3();return function (c) {
	    var d = this.levels;if (1 < d.length) {
	      a.setFromMatrixPosition(c.matrixWorld);b.setFromMatrixPosition(this.matrixWorld);c = a.distanceTo(b);d[0].object.visible = !0;for (var e = 1, g = d.length; e < g; e++) {
	        if (c >= d[e].distance) d[e - 1].object.visible = !1, d[e].object.visible = !0;else break;
	      }for (; e < g; e++) {
	        d[e].object.visible = !1;
	      }
	    }
	  };
	}();
	THREE.LOD.prototype.copy = function (a) {
	  THREE.Object3D.prototype.copy.call(this, a, !1);a = a.levels;for (var b = 0, c = a.length; b < c; b++) {
	    var d = a[b];this.addLevel(d.object.clone(), d.distance);
	  }return this;
	};THREE.LOD.prototype.toJSON = function (a) {
	  a = THREE.Object3D.prototype.toJSON.call(this, a);a.object.levels = [];for (var b = this.levels, c = 0, d = b.length; c < d; c++) {
	    var e = b[c];a.object.levels.push({ object: e.object.uuid, distance: e.distance });
	  }return a;
	};
	THREE.Sprite = function () {
	  var a = new Uint16Array([0, 1, 2, 0, 2, 3]),
	      b = new Float32Array([-.5, -.5, 0, .5, -.5, 0, .5, .5, 0, -.5, .5, 0]),
	      c = new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),
	      d = new THREE.BufferGeometry();d.setIndex(new THREE.BufferAttribute(a, 1));d.addAttribute("position", new THREE.BufferAttribute(b, 3));d.addAttribute("uv", new THREE.BufferAttribute(c, 2));return function (a) {
	    THREE.Object3D.call(this);this.type = "Sprite";this.geometry = d;this.material = void 0 !== a ? a : new THREE.SpriteMaterial();
	  };
	}();THREE.Sprite.prototype = Object.create(THREE.Object3D.prototype);
	THREE.Sprite.prototype.constructor = THREE.Sprite;THREE.Sprite.prototype.raycast = function () {
	  var a = new THREE.Vector3();return function (b, c) {
	    a.setFromMatrixPosition(this.matrixWorld);var d = b.ray.distanceSqToPoint(a);d > this.scale.x * this.scale.y || c.push({ distance: Math.sqrt(d), point: this.position, face: null, object: this });
	  };
	}();THREE.Sprite.prototype.clone = function () {
	  return new this.constructor(this.material).copy(this);
	};THREE.Particle = THREE.Sprite;
	THREE.LensFlare = function (a, b, c, d, e) {
	  THREE.Object3D.call(this);this.lensFlares = [];this.positionScreen = new THREE.Vector3();this.customUpdateCallback = void 0;void 0 !== a && this.add(a, b, c, d, e);
	};THREE.LensFlare.prototype = Object.create(THREE.Object3D.prototype);THREE.LensFlare.prototype.constructor = THREE.LensFlare;
	THREE.LensFlare.prototype.add = function (a, b, c, d, e, g) {
	  void 0 === b && (b = -1);void 0 === c && (c = 0);void 0 === g && (g = 1);void 0 === e && (e = new THREE.Color(16777215));void 0 === d && (d = THREE.NormalBlending);c = Math.min(c, Math.max(0, c));this.lensFlares.push({ texture: a, size: b, distance: c, x: 0, y: 0, z: 0, scale: 1, rotation: 0, opacity: g, color: e, blending: d });
	};
	THREE.LensFlare.prototype.updateLensFlares = function () {
	  var a,
	      b = this.lensFlares.length,
	      c,
	      d = 2 * -this.positionScreen.x,
	      e = 2 * -this.positionScreen.y;for (a = 0; a < b; a++) {
	    c = this.lensFlares[a], c.x = this.positionScreen.x + d * c.distance, c.y = this.positionScreen.y + e * c.distance, c.wantedRotation = c.x * Math.PI * .25, c.rotation += .25 * (c.wantedRotation - c.rotation);
	  }
	};
	THREE.LensFlare.prototype.copy = function (a) {
	  THREE.Object3D.prototype.copy.call(this, a);this.positionScreen.copy(a.positionScreen);this.customUpdateCallback = a.customUpdateCallback;for (var b = 0, c = a.lensFlares.length; b < c; b++) {
	    this.lensFlares.push(a.lensFlares[b]);
	  }return this;
	};THREE.Scene = function () {
	  THREE.Object3D.call(this);this.type = "Scene";this.overrideMaterial = this.fog = null;this.autoUpdate = !0;
	};THREE.Scene.prototype = Object.create(THREE.Object3D.prototype);THREE.Scene.prototype.constructor = THREE.Scene;
	THREE.Scene.prototype.copy = function (a) {
	  THREE.Object3D.prototype.copy.call(this, a);null !== a.fog && (this.fog = a.fog.clone());null !== a.overrideMaterial && (this.overrideMaterial = a.overrideMaterial.clone());this.autoUpdate = a.autoUpdate;this.matrixAutoUpdate = a.matrixAutoUpdate;return this;
	};THREE.Fog = function (a, b, c) {
	  this.name = "";this.color = new THREE.Color(a);this.near = void 0 !== b ? b : 1;this.far = void 0 !== c ? c : 1E3;
	};THREE.Fog.prototype.clone = function () {
	  return new THREE.Fog(this.color.getHex(), this.near, this.far);
	};
	THREE.FogExp2 = function (a, b) {
	  this.name = "";this.color = new THREE.Color(a);this.density = void 0 !== b ? b : 2.5E-4;
	};THREE.FogExp2.prototype.clone = function () {
	  return new THREE.FogExp2(this.color.getHex(), this.density);
	};THREE.ShaderChunk = {};THREE.ShaderChunk.alphamap_fragment = "#ifdef USE_ALPHAMAP\n\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n\n#endif\n";THREE.ShaderChunk.alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n\n\tuniform sampler2D alphaMap;\n\n#endif\n";THREE.ShaderChunk.alphatest_fragment = "#ifdef ALPHATEST\n\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n\n#endif\n";
	THREE.ShaderChunk.aomap_fragment = "#ifdef USE_AOMAP\n\n\ttotalAmbientLight *= ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\n#endif\n";THREE.ShaderChunk.aomap_pars_fragment = "#ifdef USE_AOMAP\n\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n\n#endif";THREE.ShaderChunk.begin_vertex = "\nvec3 transformed = vec3( position );\n";THREE.ShaderChunk.beginnormal_vertex = "\nvec3 objectNormal = vec3( normal );\n";THREE.ShaderChunk.bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\n\n\n\tvec2 dHdxy_fwd() {\n\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\n\t\treturn vec2( dBx, dBy );\n\n\t}\n\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\n\t\tvec3 vSigmaX = dFdx( surf_pos );\n\t\tvec3 vSigmaY = dFdy( surf_pos );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\n\t}\n\n#endif\n";
	THREE.ShaderChunk.color_fragment = "#ifdef USE_COLOR\n\n\tdiffuseColor.rgb *= vColor;\n\n#endif";THREE.ShaderChunk.color_pars_fragment = "#ifdef USE_COLOR\n\n\tvarying vec3 vColor;\n\n#endif\n";THREE.ShaderChunk.color_pars_vertex = "#ifdef USE_COLOR\n\n\tvarying vec3 vColor;\n\n#endif";THREE.ShaderChunk.color_vertex = "#ifdef USE_COLOR\n\n\tvColor.xyz = color.xyz;\n\n#endif";THREE.ShaderChunk.common = "#define PI 3.14159\n#define PI2 6.28318\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\n\nvec3 transformDirection( in vec3 normal, in mat4 matrix ) {\n\n\treturn normalize( ( matrix * vec4( normal, 0.0 ) ).xyz );\n\n}\n\nvec3 inverseTransformDirection( in vec3 normal, in mat4 matrix ) {\n\n\treturn normalize( ( vec4( normal, 0.0 ) * matrix ).xyz );\n\n}\n\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\n\treturn - distance * planeNormal + point;\n\n}\n\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n\n}\n\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n\n}\n\nfloat calcLightAttenuation( float lightDistance, float cutoffDistance, float decayExponent ) {\n\n\tif ( decayExponent > 0.0 ) {\n\n\t  return pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\n\t}\n\n\treturn 1.0;\n\n}\n\nvec3 F_Schlick( in vec3 specularColor, in float dotLH ) {\n\n\n\tfloat fresnel = exp2( ( -5.55437 * dotLH - 6.98316 ) * dotLH );\n\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n\n}\n\nfloat G_BlinnPhong_Implicit( /* in float dotNL, in float dotNV */ ) {\n\n\n\treturn 0.25;\n\n}\n\nfloat D_BlinnPhong( in float shininess, in float dotNH ) {\n\n\n\treturn ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n\n}\n\nvec3 BRDF_BlinnPhong( in vec3 specularColor, in float shininess, in vec3 normal, in vec3 lightDir, in vec3 viewDir ) {\n\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotLH = saturate( dot( lightDir, halfDir ) );\n\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\n\tfloat G = G_BlinnPhong_Implicit( /* dotNL, dotNV */ );\n\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\n\treturn F * G * D;\n\n}\n\nvec3 inputToLinear( in vec3 a ) {\n\n\t#ifdef GAMMA_INPUT\n\n\t\treturn pow( a, vec3( float( GAMMA_FACTOR ) ) );\n\n\t#else\n\n\t\treturn a;\n\n\t#endif\n\n}\n\nvec3 linearToOutput( in vec3 a ) {\n\n\t#ifdef GAMMA_OUTPUT\n\n\t\treturn pow( a, vec3( 1.0 / float( GAMMA_FACTOR ) ) );\n\n\t#else\n\n\t\treturn a;\n\n\t#endif\n\n}\n";
	THREE.ShaderChunk.defaultnormal_vertex = "#ifdef FLIP_SIDED\n\n\tobjectNormal = -objectNormal;\n\n#endif\n\nvec3 transformedNormal = normalMatrix * objectNormal;\n";THREE.ShaderChunk.displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n\n\ttransformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n\n#endif\n";THREE.ShaderChunk.displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n\n#endif\n";
	THREE.ShaderChunk.emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\n\temissiveColor.rgb = inputToLinear( emissiveColor.rgb );\n\n\ttotalEmissiveLight *= emissiveColor.rgb;\n\n#endif\n";THREE.ShaderChunk.emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n\n\tuniform sampler2D emissiveMap;\n\n#endif\n";THREE.ShaderChunk.envmap_fragment = "#ifdef USE_ENVMAP\n\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\n\t\t#else\n\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\n\t\t#endif\n\n\t#else\n\n\t\tvec3 reflectVec = vReflect;\n\n\t#endif\n\n\t#ifdef DOUBLE_SIDED\n\t\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#else\n\t\tfloat flipNormal = 1.0;\n\t#endif\n\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\n\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\tvec3 reflectView = flipNormal * normalize((viewMatrix * vec4( reflectVec, 0.0 )).xyz + vec3(0.0,0.0,1.0));\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#endif\n\n\tenvColor.xyz = inputToLinear( envColor.xyz );\n\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\n\t#endif\n\n#endif\n";
	THREE.ShaderChunk.envmap_pars_fragment = "#ifdef USE_ENVMAP\n\n\tuniform float reflectivity;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\n\t\tuniform float refractionRatio;\n\n\t#else\n\n\t\tvarying vec3 vReflect;\n\n\t#endif\n\n#endif\n";THREE.ShaderChunk.envmap_pars_vertex = "#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG )\n\n\tvarying vec3 vReflect;\n\n\tuniform float refractionRatio;\n\n#endif\n";
	THREE.ShaderChunk.envmap_vertex = "#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG )\n\n\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\n\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\n\t#ifdef ENVMAP_MODE_REFLECTION\n\n\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\n\t#else\n\n\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\n\t#endif\n\n#endif\n";
	THREE.ShaderChunk.fog_fragment = "#ifdef USE_FOG\n\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\n\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\n\n\t#else\n\n\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\n\n\t#endif\n\n\t#ifdef FOG_EXP2\n\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\n\n\t#else\n\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, depth );\n\n\t#endif\n\t\n\toutgoingLight = mix( outgoingLight, fogColor, fogFactor );\n\n#endif";
	THREE.ShaderChunk.fog_pars_fragment = "#ifdef USE_FOG\n\n\tuniform vec3 fogColor;\n\n\t#ifdef FOG_EXP2\n\n\t\tuniform float fogDensity;\n\n\t#else\n\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n\n#endif";THREE.ShaderChunk.hemilight_fragment = "#if MAX_HEMI_LIGHTS > 0\n\n\tfor ( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\n\n\t\tvec3 lightDir = hemisphereLightDirection[ i ];\n\n\t\tfloat dotProduct = dot( normal, lightDir );\n\n\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\n\n\t\tvec3 lightColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\n\n\t\ttotalAmbientLight += lightColor;\n\n\t}\n\n#endif\n\n";
	THREE.ShaderChunk.lightmap_fragment = "#ifdef USE_LIGHTMAP\n\n\ttotalAmbientLight += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\n#endif\n";THREE.ShaderChunk.lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n\n#endif";THREE.ShaderChunk.lights_lambert_pars_vertex = "#if MAX_DIR_LIGHTS > 0\n\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n\n#endif\n\n#if MAX_POINT_LIGHTS > 0\n\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n\tuniform float pointLightDecay[ MAX_POINT_LIGHTS ];\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0\n\n\tuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\n\tuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\n\tuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightDecay[ MAX_SPOT_LIGHTS ];\n\n#endif\n";
	THREE.ShaderChunk.lights_lambert_vertex = "vLightFront = vec3( 0.0 );\n\n#ifdef DOUBLE_SIDED\n\n\tvLightBack = vec3( 0.0 );\n\n#endif\n\nvec3 normal = normalize( transformedNormal );\n\n#if MAX_POINT_LIGHTS > 0\n\n\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\n\n\t\tvec3 lightColor = pointLightColor[ i ];\n\n\t\tvec3 lVector = pointLightPosition[ i ] - mvPosition.xyz;\n\t\tvec3 lightDir = normalize( lVector );\n\n\n\t\tfloat attenuation = calcLightAttenuation( length( lVector ), pointLightDistance[ i ], pointLightDecay[ i ] );\n\n\n\t\tfloat dotProduct = dot( normal, lightDir );\n\n\t\tvLightFront += lightColor * attenuation * saturate( dotProduct );\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tvLightBack += lightColor * attenuation * saturate( - dotProduct );\n\n\t\t#endif\n\n\t}\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0\n\n\tfor ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\n\n\t\tvec3 lightColor = spotLightColor[ i ];\n\n\t\tvec3 lightPosition = spotLightPosition[ i ];\n\t\tvec3 lVector = lightPosition - mvPosition.xyz;\n\t\tvec3 lightDir = normalize( lVector );\n\n\t\tfloat spotEffect = dot( spotLightDirection[ i ], lightDir );\n\n\t\tif ( spotEffect > spotLightAngleCos[ i ] ) {\n\n\t\t\tspotEffect = saturate( pow( saturate( spotEffect ), spotLightExponent[ i ] ) );\n\n\n\t\t\tfloat attenuation = calcLightAttenuation( length( lVector ), spotLightDistance[ i ], spotLightDecay[ i ] );\n\n\t\t\tattenuation *= spotEffect;\n\n\n\t\t\tfloat dotProduct = dot( normal, lightDir );\n\n\t\t\tvLightFront += lightColor * attenuation * saturate( dotProduct );\n\n\t\t\t#ifdef DOUBLE_SIDED\n\n\t\t\t\tvLightBack += lightColor * attenuation * saturate( - dotProduct );\n\n\t\t\t#endif\n\n\t\t}\n\n\t}\n\n#endif\n\n#if MAX_DIR_LIGHTS > 0\n\n\tfor ( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\n\n\t\tvec3 lightColor = directionalLightColor[ i ];\n\n\t\tvec3 lightDir = directionalLightDirection[ i ];\n\n\n\t\tfloat dotProduct = dot( normal, lightDir );\n\n\t\tvLightFront += lightColor * saturate( dotProduct );\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tvLightBack += lightColor * saturate( - dotProduct );\n\n\t\t#endif\n\n\t}\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n\tfor ( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\n\n\t\tvec3 lightDir = hemisphereLightDirection[ i ];\n\n\n\t\tfloat dotProduct = dot( normal, lightDir );\n\n\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\n\n\t\tvLightFront += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tfloat hemiDiffuseWeightBack = - 0.5 * dotProduct + 0.5;\n\n\t\t\tvLightBack += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeightBack );\n\n\t\t#endif\n\n\t}\n\n#endif\n";
	THREE.ShaderChunk.lights_phong_fragment = "vec3 viewDir = normalize( vViewPosition );\n\nvec3 totalDiffuseLight = vec3( 0.0 );\nvec3 totalSpecularLight = vec3( 0.0 );\n\n#if MAX_POINT_LIGHTS > 0\n\n\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\n\n\t\tvec3 lightColor = pointLightColor[ i ];\n\n\t\tvec3 lightPosition = pointLightPosition[ i ];\n\t\tvec3 lVector = lightPosition + vViewPosition.xyz;\n\t\tvec3 lightDir = normalize( lVector );\n\n\n\t\tfloat attenuation = calcLightAttenuation( length( lVector ), pointLightDistance[ i ], pointLightDecay[ i ] );\n\n\n\t\tfloat cosineTerm = saturate( dot( normal, lightDir ) );\n\n\t\ttotalDiffuseLight += lightColor * attenuation * cosineTerm;\n\n\n\t\tvec3 brdf = BRDF_BlinnPhong( specular, shininess, normal, lightDir, viewDir );\n\n\t\ttotalSpecularLight += brdf * specularStrength * lightColor * attenuation * cosineTerm;\n\n\n\t}\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0\n\n\tfor ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\n\n\t\tvec3 lightColor = spotLightColor[ i ];\n\n\t\tvec3 lightPosition = spotLightPosition[ i ];\n\t\tvec3 lVector = lightPosition + vViewPosition.xyz;\n\t\tvec3 lightDir = normalize( lVector );\n\n\t\tfloat spotEffect = dot( spotLightDirection[ i ], lightDir );\n\n\t\tif ( spotEffect > spotLightAngleCos[ i ] ) {\n\n\t\t\tspotEffect = saturate( pow( saturate( spotEffect ), spotLightExponent[ i ] ) );\n\n\n\t\t\tfloat attenuation = calcLightAttenuation( length( lVector ), spotLightDistance[ i ], spotLightDecay[ i ] );\n\n\t\t\tattenuation *= spotEffect;\n\n\n\t\t\tfloat cosineTerm = saturate( dot( normal, lightDir ) );\n\n\t\t\ttotalDiffuseLight += lightColor * attenuation * cosineTerm;\n\n\n\t\t\tvec3 brdf = BRDF_BlinnPhong( specular, shininess, normal, lightDir, viewDir );\n\n\t\t\ttotalSpecularLight += brdf * specularStrength * lightColor * attenuation * cosineTerm;\n\n\t\t}\n\n\t}\n\n#endif\n\n#if MAX_DIR_LIGHTS > 0\n\n\tfor ( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\n\n\t\tvec3 lightColor = directionalLightColor[ i ];\n\n\t\tvec3 lightDir = directionalLightDirection[ i ];\n\n\n\t\tfloat cosineTerm = saturate( dot( normal, lightDir ) );\n\n\t\ttotalDiffuseLight += lightColor * cosineTerm;\n\n\n\t\tvec3 brdf = BRDF_BlinnPhong( specular, shininess, normal, lightDir, viewDir );\n\n\t\ttotalSpecularLight += brdf * specularStrength * lightColor * cosineTerm;\n\n\t}\n\n#endif\n";
	THREE.ShaderChunk.lights_phong_pars_fragment = "uniform vec3 ambientLightColor;\n\n#if MAX_DIR_LIGHTS > 0\n\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n\n#endif\n\n#if MAX_POINT_LIGHTS > 0\n\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\n\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n\tuniform float pointLightDecay[ MAX_POINT_LIGHTS ];\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0\n\n\tuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\n\tuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\n\tuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightDecay[ MAX_SPOT_LIGHTS ];\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0 || defined( USE_ENVMAP )\n\n\tvarying vec3 vWorldPosition;\n\n#endif\n\nvarying vec3 vViewPosition;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n#endif\n";
	THREE.ShaderChunk.lights_phong_pars_vertex = "#if MAX_SPOT_LIGHTS > 0 || defined( USE_ENVMAP )\n\n\tvarying vec3 vWorldPosition;\n\n#endif\n\n#if MAX_POINT_LIGHTS > 0\n\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\n\n#endif\n";THREE.ShaderChunk.lights_phong_vertex = "#if MAX_SPOT_LIGHTS > 0 || defined( USE_ENVMAP )\n\n\tvWorldPosition = worldPosition.xyz;\n\n#endif\n";THREE.ShaderChunk.linear_to_gamma_fragment = "\n\toutgoingLight = linearToOutput( outgoingLight );\n";
	THREE.ShaderChunk.logdepthbuf_fragment = "#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\n\n\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\n\n#endif";THREE.ShaderChunk.logdepthbuf_pars_fragment = "#ifdef USE_LOGDEPTHBUF\n\n\tuniform float logDepthBufFC;\n\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\n\t\tvarying float vFragDepth;\n\n\t#endif\n\n#endif\n";THREE.ShaderChunk.logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\n\t\tvarying float vFragDepth;\n\n\t#endif\n\n\tuniform float logDepthBufFC;\n\n#endif";
	THREE.ShaderChunk.logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n\n\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\n\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\n#else\n\n\t\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\n\n\t#endif\n\n#endif";THREE.ShaderChunk.map_fragment = "#ifdef USE_MAP\n\n\tvec4 texelColor = texture2D( map, vUv );\n\n\ttexelColor.xyz = inputToLinear( texelColor.xyz );\n\n\tdiffuseColor *= texelColor;\n\n#endif\n";
	THREE.ShaderChunk.map_pars_fragment = "#ifdef USE_MAP\n\n\tuniform sampler2D map;\n\n#endif";THREE.ShaderChunk.map_particle_fragment = "#ifdef USE_MAP\n\n\tdiffuseColor *= texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\n\n#endif\n";THREE.ShaderChunk.map_particle_pars_fragment = "#ifdef USE_MAP\n\n\tuniform vec4 offsetRepeat;\n\tuniform sampler2D map;\n\n#endif\n";THREE.ShaderChunk.morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n\n#endif\n";
	THREE.ShaderChunk.morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n\n\t#ifndef USE_MORPHNORMALS\n\n\tuniform float morphTargetInfluences[ 8 ];\n\n\t#else\n\n\tuniform float morphTargetInfluences[ 4 ];\n\n\t#endif\n\n#endif";THREE.ShaderChunk.morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\n\t#ifndef USE_MORPHNORMALS\n\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\n\t#endif\n\n#endif\n";
	THREE.ShaderChunk.normal_phong_fragment = "#ifndef FLAT_SHADED\n\n\tvec3 normal = normalize( vNormal );\n\n\t#ifdef DOUBLE_SIDED\n\n\t\tnormal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\n\n\t#endif\n\n#else\n\n\tvec3 fdx = dFdx( vViewPosition );\n\tvec3 fdy = dFdy( vViewPosition );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n\n#endif\n\n#ifdef USE_NORMALMAP\n\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n\n#elif defined( USE_BUMPMAP )\n\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n\n#endif\n\n";
	THREE.ShaderChunk.normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\n\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\n\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\n\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\n\t\tvec3 N = normalize( surf_norm );\n\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\tmapN.xy = normalScale * mapN.xy;\n\t\tmat3 tsn = mat3( S, T, N );\n\t\treturn normalize( tsn * mapN );\n\n\t}\n\n#endif\n";
	THREE.ShaderChunk.project_vertex = "#ifdef USE_SKINNING\n\n\tvec4 mvPosition = modelViewMatrix * skinned;\n\n#else\n\n\tvec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\n\n#endif\n\ngl_Position = projectionMatrix * mvPosition;\n";THREE.ShaderChunk.shadowmap_fragment = "#ifdef USE_SHADOWMAP\n\n\tfor ( int i = 0; i < MAX_SHADOWS; i ++ ) {\n\n\t\tfloat texelSizeY =  1.0 / shadowMapSize[ i ].y;\n\n\t\tfloat shadow = 0.0;\n\n#if defined( POINT_LIGHT_SHADOWS )\n\n\t\tbool isPointLight = shadowDarkness[ i ] < 0.0;\n\n\t\tif ( isPointLight ) {\n\n\t\t\tfloat realShadowDarkness = abs( shadowDarkness[ i ] );\n\n\t\t\tvec3 lightToPosition = vShadowCoord[ i ].xyz;\n\n\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n\n\t\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t\tfloat dp = length( lightToPosition );\n\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D, texelSizeY ) ), shadowBias[ i ], shadow );\n\n\n\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tconst float Dr = 1.25;\n\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tconst float Dr = 2.25;\n\t#endif\n\n\t\t\tfloat os = Dr *  2.0 * texelSizeY;\n\n\t\t\tconst vec3 Gsd = vec3( - 1, 0, 1 );\n\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zzz * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zxz * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xxz * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xzz * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zzx * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zxx * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xxx * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xzx * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zzy * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zxy * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xxy * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xzy * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zyz * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xyz * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zyx * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xyx * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.yzz * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.yxz * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.yxx * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.yzx * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\n\t\t\tshadow *= realShadowDarkness * ( 1.0 / 21.0 );\n\n\t#else \n\t\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t\tfloat dp = length( lightToPosition );\n\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D, texelSizeY ) ), shadowBias[ i ], shadow );\n\n\t\t\tshadow *= realShadowDarkness;\n\n\t#endif\n\n\t\t} else {\n\n#endif \n\t\t\tfloat texelSizeX =  1.0 / shadowMapSize[ i ].x;\n\n\t\t\tvec3 shadowCoord = vShadowCoord[ i ].xyz / vShadowCoord[ i ].w;\n\n\n\t\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\t\tbool inFrustum = all( inFrustumVec );\n\n\t\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\n\t\t\tbool frustumTest = all( frustumTestVec );\n\n\t\t\tif ( frustumTest ) {\n\n\t#if defined( SHADOWMAP_TYPE_PCF )\n\n\n\t\t\t\t/*\n\t\t\t\t\tfor ( float y = -1.25; y <= 1.25; y += 1.25 )\n\t\t\t\t\t\tfor ( float x = -1.25; x <= 1.25; x += 1.25 ) {\n\t\t\t\t\t\t\tvec4 rgbaDepth = texture2D( shadowMap[ i ], vec2( x * xPixelOffset, y * yPixelOffset ) + shadowCoord.xy );\n\t\t\t\t\t\t\tfloat fDepth = unpackDepth( rgbaDepth );\n\t\t\t\t\t\t\tif ( fDepth < shadowCoord.z )\n\t\t\t\t\t\t\t\tshadow += 1.0;\n\t\t\t\t\t}\n\t\t\t\t\tshadow /= 9.0;\n\t\t\t\t*/\n\n\t\t\t\tshadowCoord.z += shadowBias[ i ];\n\n\t\t\t\tconst float ShadowDelta = 1.0 / 9.0;\n\n\t\t\t\tfloat xPixelOffset = texelSizeX;\n\t\t\t\tfloat yPixelOffset = texelSizeY;\n\n\t\t\t\tfloat dx0 = - 1.25 * xPixelOffset;\n\t\t\t\tfloat dy0 = - 1.25 * yPixelOffset;\n\t\t\t\tfloat dx1 = 1.25 * xPixelOffset;\n\t\t\t\tfloat dy1 = 1.25 * yPixelOffset;\n\n\t\t\t\tfloat fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\n\n\t\t\t\tshadow *= shadowDarkness[ i ];\n\n\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\n\n\t\t\t\tshadowCoord.z += shadowBias[ i ];\n\n\t\t\t\tfloat xPixelOffset = texelSizeX;\n\t\t\t\tfloat yPixelOffset = texelSizeY;\n\n\t\t\t\tfloat dx0 = - 1.0 * xPixelOffset;\n\t\t\t\tfloat dy0 = - 1.0 * yPixelOffset;\n\t\t\t\tfloat dx1 = 1.0 * xPixelOffset;\n\t\t\t\tfloat dy1 = 1.0 * yPixelOffset;\n\n\t\t\t\tmat3 shadowKernel;\n\t\t\t\tmat3 depthKernel;\n\n\t\t\t\tdepthKernel[ 0 ][ 0 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\n\t\t\t\tdepthKernel[ 0 ][ 1 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\n\t\t\t\tdepthKernel[ 0 ][ 2 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\n\t\t\t\tdepthKernel[ 1 ][ 0 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\n\t\t\t\tdepthKernel[ 1 ][ 1 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\n\t\t\t\tdepthKernel[ 1 ][ 2 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\n\t\t\t\tdepthKernel[ 2 ][ 0 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\n\t\t\t\tdepthKernel[ 2 ][ 1 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\n\t\t\t\tdepthKernel[ 2 ][ 2 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\n\n\t\t\t\tvec3 shadowZ = vec3( shadowCoord.z );\n\t\t\t\tshadowKernel[ 0 ] = vec3( lessThan( depthKernel[ 0 ], shadowZ ) );\n\t\t\t\tshadowKernel[ 0 ] *= vec3( 0.25 );\n\n\t\t\t\tshadowKernel[ 1 ] = vec3( lessThan( depthKernel[ 1 ], shadowZ ) );\n\t\t\t\tshadowKernel[ 1 ] *= vec3( 0.25 );\n\n\t\t\t\tshadowKernel[ 2 ] = vec3( lessThan( depthKernel[ 2 ], shadowZ ) );\n\t\t\t\tshadowKernel[ 2 ] *= vec3( 0.25 );\n\n\t\t\t\tvec2 fractionalCoord = 1.0 - fract( shadowCoord.xy * shadowMapSize[ i ].xy );\n\n\t\t\t\tshadowKernel[ 0 ] = mix( shadowKernel[ 1 ], shadowKernel[ 0 ], fractionalCoord.x );\n\t\t\t\tshadowKernel[ 1 ] = mix( shadowKernel[ 2 ], shadowKernel[ 1 ], fractionalCoord.x );\n\n\t\t\t\tvec4 shadowValues;\n\t\t\t\tshadowValues.x = mix( shadowKernel[ 0 ][ 1 ], shadowKernel[ 0 ][ 0 ], fractionalCoord.y );\n\t\t\t\tshadowValues.y = mix( shadowKernel[ 0 ][ 2 ], shadowKernel[ 0 ][ 1 ], fractionalCoord.y );\n\t\t\t\tshadowValues.z = mix( shadowKernel[ 1 ][ 1 ], shadowKernel[ 1 ][ 0 ], fractionalCoord.y );\n\t\t\t\tshadowValues.w = mix( shadowKernel[ 1 ][ 2 ], shadowKernel[ 1 ][ 1 ], fractionalCoord.y );\n\n\t\t\t\tshadow = dot( shadowValues, vec4( 1.0 ) ) * shadowDarkness[ i ];\n\n\t#else \n\t\t\t\tshadowCoord.z += shadowBias[ i ];\n\n\t\t\t\tvec4 rgbaDepth = texture2D( shadowMap[ i ], shadowCoord.xy );\n\t\t\t\tfloat fDepth = unpackDepth( rgbaDepth );\n\n\t\t\t\tif ( fDepth < shadowCoord.z )\n\t\t\t\t\tshadow = shadowDarkness[ i ];\n\n\t#endif\n\n\t\t\t}\n\n#ifdef SHADOWMAP_DEBUG\n\n\t\t\tif ( inFrustum ) {\n\n\t\t\t\tif ( i == 0 ) {\n\n\t\t\t\t\toutgoingLight *= vec3( 1.0, 0.5, 0.0 );\n\n\t\t\t\t} else if ( i == 1 ) {\n\n\t\t\t\t\toutgoingLight *= vec3( 0.0, 1.0, 0.8 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\toutgoingLight *= vec3( 0.0, 0.5, 1.0 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n#endif\n\n#if defined( POINT_LIGHT_SHADOWS )\n\n\t\t}\n\n#endif\n\n\t\tshadowMask = shadowMask * vec3( 1.0 - shadow );\n\n\t}\n\n#endif\n";
	THREE.ShaderChunk.shadowmap_pars_fragment = "#ifdef USE_SHADOWMAP\n\n\tuniform sampler2D shadowMap[ MAX_SHADOWS ];\n\tuniform vec2 shadowMapSize[ MAX_SHADOWS ];\n\n\tuniform float shadowDarkness[ MAX_SHADOWS ];\n\tuniform float shadowBias[ MAX_SHADOWS ];\n\n\tvarying vec4 vShadowCoord[ MAX_SHADOWS ];\n\n\tfloat unpackDepth( const in vec4 rgba_depth ) {\n\n\t\tconst vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\n\t\tfloat depth = dot( rgba_depth, bit_shift );\n\t\treturn depth;\n\n\t}\n\n\t#if defined(POINT_LIGHT_SHADOWS)\n\n\n\t\tvoid adjustShadowValue1K( const float testDepth, const vec4 textureData, const float bias, inout float shadowValue ) {\n\n\t\t\tconst vec4 bitSh = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\n\t\t\tif ( testDepth >= dot( textureData, bitSh ) * 1000.0 + bias )\n\t\t\t\tshadowValue += 1.0;\n\n\t\t}\n\n\n\t\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\n\n\t\t\tvec3 absV = abs( v );\n\n\n\t\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\t\tabsV *= scaleToCube;\n\n\n\t\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\n\n\n\t\t\tvec2 planar = v.xy;\n\n\t\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\t\tfloat almostOne = 1.0 - almostATexel;\n\n\t\t\tif ( absV.z >= almostOne ) {\n\n\t\t\t\tif ( v.z > 0.0 )\n\t\t\t\t\tplanar.x = 4.0 - v.x;\n\n\t\t\t} else if ( absV.x >= almostOne ) {\n\n\t\t\t\tfloat signX = sign( v.x );\n\t\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\n\t\t\t} else if ( absV.y >= almostOne ) {\n\n\t\t\t\tfloat signY = sign( v.y );\n\t\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\t\tplanar.y = v.z * signY - 2.0;\n\n\t\t\t}\n\n\n\t\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\n\t\t}\n\n\t#endif\n\n#endif\n";
	THREE.ShaderChunk.shadowmap_pars_vertex = "#ifdef USE_SHADOWMAP\n\n\tuniform float shadowDarkness[ MAX_SHADOWS ];\n\tuniform mat4 shadowMatrix[ MAX_SHADOWS ];\n\tvarying vec4 vShadowCoord[ MAX_SHADOWS ];\n\n#endif";THREE.ShaderChunk.shadowmap_vertex = "#ifdef USE_SHADOWMAP\n\n\tfor ( int i = 0; i < MAX_SHADOWS; i ++ ) {\n\n\t\t\tvShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;\n\n\t}\n\n#endif";THREE.ShaderChunk.skinbase_vertex = "#ifdef USE_SKINNING\n\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n\n#endif";
	THREE.ShaderChunk.skinning_pars_vertex = "#ifdef USE_SKINNING\n\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\n\t#ifdef BONE_TEXTURE\n\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureWidth;\n\t\tuniform int boneTextureHeight;\n\n\t\tmat4 getBoneMatrix( const in float i ) {\n\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureWidth ) );\n\t\t\tfloat y = floor( j / float( boneTextureWidth ) );\n\n\t\t\tfloat dx = 1.0 / float( boneTextureWidth );\n\t\t\tfloat dy = 1.0 / float( boneTextureHeight );\n\n\t\t\ty = dy * ( y + 0.5 );\n\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\n\t\t\treturn bone;\n\n\t\t}\n\n\t#else\n\n\t\tuniform mat4 boneGlobalMatrices[ MAX_BONES ];\n\n\t\tmat4 getBoneMatrix( const in float i ) {\n\n\t\t\tmat4 bone = boneGlobalMatrices[ int(i) ];\n\t\t\treturn bone;\n\n\t\t}\n\n\t#endif\n\n#endif\n";
	THREE.ShaderChunk.skinning_vertex = "#ifdef USE_SKINNING\n\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\tskinned  = bindMatrixInverse * skinned;\n\n#endif\n";THREE.ShaderChunk.skinnormal_vertex = "#ifdef USE_SKINNING\n\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\n#endif\n";
	THREE.ShaderChunk.specularmap_fragment = "float specularStrength;\n\n#ifdef USE_SPECULARMAP\n\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n\n#else\n\n\tspecularStrength = 1.0;\n\n#endif";THREE.ShaderChunk.specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n\n\tuniform sampler2D specularMap;\n\n#endif";THREE.ShaderChunk.uv2_pars_fragment = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\n\tvarying vec2 vUv2;\n\n#endif";
	THREE.ShaderChunk.uv2_pars_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\n#endif";THREE.ShaderChunk.uv2_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\n\tvUv2 = uv2;\n\n#endif";THREE.ShaderChunk.uv_pars_fragment = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP )\n\n\tvarying vec2 vUv;\n\n#endif";
	THREE.ShaderChunk.uv_pars_vertex = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP )\n\n\tvarying vec2 vUv;\n\tuniform vec4 offsetRepeat;\n\n#endif\n";THREE.ShaderChunk.uv_vertex = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP )\n\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n\n#endif";
	THREE.ShaderChunk.worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\n\n\t#ifdef USE_SKINNING\n\n\t\tvec4 worldPosition = modelMatrix * skinned;\n\n\t#else\n\n\t\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n\n\t#endif\n\n#endif\n";
	THREE.UniformsUtils = { merge: function merge(a) {
	    for (var b = {}, c = 0; c < a.length; c++) {
	      var d = this.clone(a[c]),
	          e;for (e in d) {
	        b[e] = d[e];
	      }
	    }return b;
	  }, clone: function clone(a) {
	    var b = {},
	        c;for (c in a) {
	      b[c] = {};for (var d in a[c]) {
	        var e = a[c][d];e instanceof THREE.Color || e instanceof THREE.Vector2 || e instanceof THREE.Vector3 || e instanceof THREE.Vector4 || e instanceof THREE.Matrix3 || e instanceof THREE.Matrix4 || e instanceof THREE.Texture ? b[c][d] = e.clone() : Array.isArray(e) ? b[c][d] = e.slice() : b[c][d] = e;
	      }
	    }return b;
	  } };
	THREE.UniformsLib = { common: { diffuse: { type: "c", value: new THREE.Color(15658734) }, opacity: { type: "f", value: 1 }, map: { type: "t", value: null }, offsetRepeat: { type: "v4", value: new THREE.Vector4(0, 0, 1, 1) }, specularMap: { type: "t", value: null }, alphaMap: { type: "t", value: null }, envMap: { type: "t", value: null }, flipEnvMap: { type: "f", value: -1 }, reflectivity: { type: "f", value: 1 }, refractionRatio: { type: "f", value: .98 } }, aomap: { aoMap: { type: "t", value: null }, aoMapIntensity: { type: "f", value: 1 } }, lightmap: { lightMap: { type: "t", value: null }, lightMapIntensity: { type: "f",
	      value: 1 } }, emissivemap: { emissiveMap: { type: "t", value: null } }, bumpmap: { bumpMap: { type: "t", value: null }, bumpScale: { type: "f", value: 1 } }, normalmap: { normalMap: { type: "t", value: null }, normalScale: { type: "v2", value: new THREE.Vector2(1, 1) } }, displacementmap: { displacementMap: { type: "t", value: null }, displacementScale: { type: "f", value: 1 }, displacementBias: { type: "f", value: 0 } }, fog: { fogDensity: { type: "f", value: 2.5E-4 }, fogNear: { type: "f", value: 1 }, fogFar: { type: "f", value: 2E3 }, fogColor: { type: "c", value: new THREE.Color(16777215) } },
	  lights: { ambientLightColor: { type: "fv", value: [] }, directionalLightDirection: { type: "fv", value: [] }, directionalLightColor: { type: "fv", value: [] }, hemisphereLightDirection: { type: "fv", value: [] }, hemisphereLightSkyColor: { type: "fv", value: [] }, hemisphereLightGroundColor: { type: "fv", value: [] }, pointLightColor: { type: "fv", value: [] }, pointLightPosition: { type: "fv", value: [] }, pointLightDistance: { type: "fv1", value: [] }, pointLightDecay: { type: "fv1", value: [] }, spotLightColor: { type: "fv", value: [] }, spotLightPosition: { type: "fv", value: [] },
	    spotLightDirection: { type: "fv", value: [] }, spotLightDistance: { type: "fv1", value: [] }, spotLightAngleCos: { type: "fv1", value: [] }, spotLightExponent: { type: "fv1", value: [] }, spotLightDecay: { type: "fv1", value: [] } }, points: { psColor: { type: "c", value: new THREE.Color(15658734) }, opacity: { type: "f", value: 1 }, size: { type: "f", value: 1 }, scale: { type: "f", value: 1 }, map: { type: "t", value: null }, offsetRepeat: { type: "v4", value: new THREE.Vector4(0, 0, 1, 1) }, fogDensity: { type: "f", value: 2.5E-4 }, fogNear: { type: "f", value: 1 }, fogFar: { type: "f", value: 2E3 },
	    fogColor: { type: "c", value: new THREE.Color(16777215) } }, shadowmap: { shadowMap: { type: "tv", value: [] }, shadowMapSize: { type: "v2v", value: [] }, shadowBias: { type: "fv1", value: [] }, shadowDarkness: { type: "fv1", value: [] }, shadowMatrix: { type: "m4v", value: [] } } };
	THREE.ShaderLib = { basic: { uniforms: THREE.UniformsUtils.merge([THREE.UniformsLib.common, THREE.UniformsLib.aomap, THREE.UniformsLib.fog, THREE.UniformsLib.shadowmap]), vertexShader: [THREE.ShaderChunk.common, THREE.ShaderChunk.uv_pars_vertex, THREE.ShaderChunk.uv2_pars_vertex, THREE.ShaderChunk.envmap_pars_vertex, THREE.ShaderChunk.color_pars_vertex, THREE.ShaderChunk.morphtarget_pars_vertex, THREE.ShaderChunk.skinning_pars_vertex, THREE.ShaderChunk.shadowmap_pars_vertex, THREE.ShaderChunk.logdepthbuf_pars_vertex, "void main() {", THREE.ShaderChunk.uv_vertex, THREE.ShaderChunk.uv2_vertex, THREE.ShaderChunk.color_vertex, THREE.ShaderChunk.skinbase_vertex, "\t#ifdef USE_ENVMAP", THREE.ShaderChunk.beginnormal_vertex, THREE.ShaderChunk.morphnormal_vertex, THREE.ShaderChunk.skinnormal_vertex, THREE.ShaderChunk.defaultnormal_vertex, "\t#endif", THREE.ShaderChunk.begin_vertex, THREE.ShaderChunk.morphtarget_vertex, THREE.ShaderChunk.skinning_vertex, THREE.ShaderChunk.project_vertex, THREE.ShaderChunk.logdepthbuf_vertex, THREE.ShaderChunk.worldpos_vertex, THREE.ShaderChunk.envmap_vertex, THREE.ShaderChunk.shadowmap_vertex, "}"].join("\n"), fragmentShader: ["uniform vec3 diffuse;\nuniform float opacity;", THREE.ShaderChunk.common, THREE.ShaderChunk.color_pars_fragment, THREE.ShaderChunk.uv_pars_fragment, THREE.ShaderChunk.uv2_pars_fragment, THREE.ShaderChunk.map_pars_fragment, THREE.ShaderChunk.alphamap_pars_fragment, THREE.ShaderChunk.aomap_pars_fragment, THREE.ShaderChunk.envmap_pars_fragment, THREE.ShaderChunk.fog_pars_fragment, THREE.ShaderChunk.shadowmap_pars_fragment, THREE.ShaderChunk.specularmap_pars_fragment, THREE.ShaderChunk.logdepthbuf_pars_fragment, "void main() {\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tvec3 totalAmbientLight = vec3( 1.0 );\n\tvec3 shadowMask = vec3( 1.0 );", THREE.ShaderChunk.logdepthbuf_fragment, THREE.ShaderChunk.map_fragment, THREE.ShaderChunk.color_fragment, THREE.ShaderChunk.alphamap_fragment, THREE.ShaderChunk.alphatest_fragment, THREE.ShaderChunk.specularmap_fragment, THREE.ShaderChunk.aomap_fragment, THREE.ShaderChunk.shadowmap_fragment, "\toutgoingLight = diffuseColor.rgb * totalAmbientLight * shadowMask;", THREE.ShaderChunk.envmap_fragment, THREE.ShaderChunk.linear_to_gamma_fragment, THREE.ShaderChunk.fog_fragment, "\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n}"].join("\n") }, lambert: { uniforms: THREE.UniformsUtils.merge([THREE.UniformsLib.common, THREE.UniformsLib.fog, THREE.UniformsLib.lights, THREE.UniformsLib.shadowmap, { emissive: { type: "c", value: new THREE.Color(0) } }]), vertexShader: ["#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif", THREE.ShaderChunk.common, THREE.ShaderChunk.uv_pars_vertex, THREE.ShaderChunk.uv2_pars_vertex, THREE.ShaderChunk.envmap_pars_vertex, THREE.ShaderChunk.lights_lambert_pars_vertex, THREE.ShaderChunk.color_pars_vertex, THREE.ShaderChunk.morphtarget_pars_vertex, THREE.ShaderChunk.skinning_pars_vertex, THREE.ShaderChunk.shadowmap_pars_vertex, THREE.ShaderChunk.logdepthbuf_pars_vertex, "void main() {", THREE.ShaderChunk.uv_vertex, THREE.ShaderChunk.uv2_vertex, THREE.ShaderChunk.color_vertex, THREE.ShaderChunk.beginnormal_vertex, THREE.ShaderChunk.morphnormal_vertex, THREE.ShaderChunk.skinbase_vertex, THREE.ShaderChunk.skinnormal_vertex, THREE.ShaderChunk.defaultnormal_vertex, THREE.ShaderChunk.begin_vertex, THREE.ShaderChunk.morphtarget_vertex, THREE.ShaderChunk.skinning_vertex, THREE.ShaderChunk.project_vertex, THREE.ShaderChunk.logdepthbuf_vertex, THREE.ShaderChunk.worldpos_vertex, THREE.ShaderChunk.envmap_vertex, THREE.ShaderChunk.lights_lambert_vertex, THREE.ShaderChunk.shadowmap_vertex, "}"].join("\n"), fragmentShader: ["uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nuniform vec3 ambientLightColor;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif", THREE.ShaderChunk.common, THREE.ShaderChunk.color_pars_fragment, THREE.ShaderChunk.uv_pars_fragment, THREE.ShaderChunk.uv2_pars_fragment, THREE.ShaderChunk.map_pars_fragment, THREE.ShaderChunk.alphamap_pars_fragment, THREE.ShaderChunk.envmap_pars_fragment, THREE.ShaderChunk.fog_pars_fragment, THREE.ShaderChunk.shadowmap_pars_fragment, THREE.ShaderChunk.specularmap_pars_fragment, THREE.ShaderChunk.logdepthbuf_pars_fragment, "void main() {\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tvec3 totalAmbientLight = ambientLightColor;\n\tvec3 shadowMask = vec3( 1.0 );", THREE.ShaderChunk.logdepthbuf_fragment, THREE.ShaderChunk.map_fragment, THREE.ShaderChunk.color_fragment, THREE.ShaderChunk.alphamap_fragment, THREE.ShaderChunk.alphatest_fragment, THREE.ShaderChunk.specularmap_fragment, THREE.ShaderChunk.shadowmap_fragment, "\t#ifdef DOUBLE_SIDED\n\t\tif ( gl_FrontFacing )\n\t\t\toutgoingLight += diffuseColor.rgb * ( vLightFront * shadowMask + totalAmbientLight ) + emissive;\n\t\telse\n\t\t\toutgoingLight += diffuseColor.rgb * ( vLightBack * shadowMask + totalAmbientLight ) + emissive;\n\t#else\n\t\toutgoingLight += diffuseColor.rgb * ( vLightFront * shadowMask + totalAmbientLight ) + emissive;\n\t#endif", THREE.ShaderChunk.envmap_fragment, THREE.ShaderChunk.linear_to_gamma_fragment, THREE.ShaderChunk.fog_fragment, "\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n}"].join("\n") }, phong: { uniforms: THREE.UniformsUtils.merge([THREE.UniformsLib.common, THREE.UniformsLib.aomap, THREE.UniformsLib.lightmap, THREE.UniformsLib.emissivemap, THREE.UniformsLib.bumpmap, THREE.UniformsLib.normalmap, THREE.UniformsLib.displacementmap, THREE.UniformsLib.fog, THREE.UniformsLib.lights, THREE.UniformsLib.shadowmap, { emissive: { type: "c",
	        value: new THREE.Color(0) }, specular: { type: "c", value: new THREE.Color(1118481) }, shininess: { type: "f", value: 30 } }]), vertexShader: ["#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif", THREE.ShaderChunk.common, THREE.ShaderChunk.uv_pars_vertex, THREE.ShaderChunk.uv2_pars_vertex, THREE.ShaderChunk.displacementmap_pars_vertex, THREE.ShaderChunk.envmap_pars_vertex, THREE.ShaderChunk.lights_phong_pars_vertex, THREE.ShaderChunk.color_pars_vertex, THREE.ShaderChunk.morphtarget_pars_vertex, THREE.ShaderChunk.skinning_pars_vertex, THREE.ShaderChunk.shadowmap_pars_vertex, THREE.ShaderChunk.logdepthbuf_pars_vertex, "void main() {", THREE.ShaderChunk.uv_vertex, THREE.ShaderChunk.uv2_vertex, THREE.ShaderChunk.color_vertex, THREE.ShaderChunk.beginnormal_vertex, THREE.ShaderChunk.morphnormal_vertex, THREE.ShaderChunk.skinbase_vertex, THREE.ShaderChunk.skinnormal_vertex, THREE.ShaderChunk.defaultnormal_vertex, "#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif", THREE.ShaderChunk.begin_vertex, THREE.ShaderChunk.displacementmap_vertex, THREE.ShaderChunk.morphtarget_vertex, THREE.ShaderChunk.skinning_vertex, THREE.ShaderChunk.project_vertex, THREE.ShaderChunk.logdepthbuf_vertex, "\tvViewPosition = - mvPosition.xyz;", THREE.ShaderChunk.worldpos_vertex, THREE.ShaderChunk.envmap_vertex, THREE.ShaderChunk.lights_phong_vertex, THREE.ShaderChunk.shadowmap_vertex, "}"].join("\n"), fragmentShader: ["#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;", THREE.ShaderChunk.common, THREE.ShaderChunk.color_pars_fragment, THREE.ShaderChunk.uv_pars_fragment, THREE.ShaderChunk.uv2_pars_fragment, THREE.ShaderChunk.map_pars_fragment, THREE.ShaderChunk.alphamap_pars_fragment, THREE.ShaderChunk.aomap_pars_fragment, THREE.ShaderChunk.lightmap_pars_fragment, THREE.ShaderChunk.emissivemap_pars_fragment, THREE.ShaderChunk.envmap_pars_fragment, THREE.ShaderChunk.fog_pars_fragment, THREE.ShaderChunk.lights_phong_pars_fragment, THREE.ShaderChunk.shadowmap_pars_fragment, THREE.ShaderChunk.bumpmap_pars_fragment, THREE.ShaderChunk.normalmap_pars_fragment, THREE.ShaderChunk.specularmap_pars_fragment, THREE.ShaderChunk.logdepthbuf_pars_fragment, "void main() {\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tvec3 totalAmbientLight = ambientLightColor;\n\tvec3 totalEmissiveLight = emissive;\n\tvec3 shadowMask = vec3( 1.0 );", THREE.ShaderChunk.logdepthbuf_fragment, THREE.ShaderChunk.map_fragment, THREE.ShaderChunk.color_fragment, THREE.ShaderChunk.alphamap_fragment, THREE.ShaderChunk.alphatest_fragment, THREE.ShaderChunk.specularmap_fragment, THREE.ShaderChunk.normal_phong_fragment, THREE.ShaderChunk.lightmap_fragment, THREE.ShaderChunk.hemilight_fragment, THREE.ShaderChunk.aomap_fragment, THREE.ShaderChunk.emissivemap_fragment, THREE.ShaderChunk.lights_phong_fragment, THREE.ShaderChunk.shadowmap_fragment, "totalDiffuseLight *= shadowMask;\ntotalSpecularLight *= shadowMask;\n#ifdef METAL\n\toutgoingLight += diffuseColor.rgb * ( totalDiffuseLight + totalAmbientLight ) * specular + totalSpecularLight + totalEmissiveLight;\n#else\n\toutgoingLight += diffuseColor.rgb * ( totalDiffuseLight + totalAmbientLight ) + totalSpecularLight + totalEmissiveLight;\n#endif", THREE.ShaderChunk.envmap_fragment, THREE.ShaderChunk.linear_to_gamma_fragment, THREE.ShaderChunk.fog_fragment, "\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n}"].join("\n") }, points: { uniforms: THREE.UniformsUtils.merge([THREE.UniformsLib.points, THREE.UniformsLib.shadowmap]), vertexShader: ["uniform float size;\nuniform float scale;", THREE.ShaderChunk.common, THREE.ShaderChunk.color_pars_vertex, THREE.ShaderChunk.shadowmap_pars_vertex, THREE.ShaderChunk.logdepthbuf_pars_vertex, "void main() {", THREE.ShaderChunk.color_vertex, "\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\t#ifdef USE_SIZEATTENUATION\n\t\tgl_PointSize = size * ( scale / length( mvPosition.xyz ) );\n\t#else\n\t\tgl_PointSize = size;\n\t#endif\n\tgl_Position = projectionMatrix * mvPosition;", THREE.ShaderChunk.logdepthbuf_vertex, THREE.ShaderChunk.worldpos_vertex, THREE.ShaderChunk.shadowmap_vertex, "}"].join("\n"), fragmentShader: ["uniform vec3 psColor;\nuniform float opacity;", THREE.ShaderChunk.common, THREE.ShaderChunk.color_pars_fragment, THREE.ShaderChunk.map_particle_pars_fragment, THREE.ShaderChunk.fog_pars_fragment, THREE.ShaderChunk.shadowmap_pars_fragment, THREE.ShaderChunk.logdepthbuf_pars_fragment, "void main() {\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( psColor, opacity );\n\tvec3 shadowMask = vec3( 1.0 );", THREE.ShaderChunk.logdepthbuf_fragment, THREE.ShaderChunk.map_particle_fragment, THREE.ShaderChunk.color_fragment, THREE.ShaderChunk.alphatest_fragment, THREE.ShaderChunk.shadowmap_fragment, "\toutgoingLight = diffuseColor.rgb * shadowMask;", THREE.ShaderChunk.fog_fragment, "\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n}"].join("\n") }, dashed: { uniforms: THREE.UniformsUtils.merge([THREE.UniformsLib.common, THREE.UniformsLib.fog, { scale: { type: "f", value: 1 }, dashSize: { type: "f", value: 1 }, totalSize: { type: "f", value: 2 } }]), vertexShader: ["uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;", THREE.ShaderChunk.common, THREE.ShaderChunk.color_pars_vertex, THREE.ShaderChunk.logdepthbuf_pars_vertex, "void main() {", THREE.ShaderChunk.color_vertex, "\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;", THREE.ShaderChunk.logdepthbuf_vertex, "}"].join("\n"), fragmentShader: ["uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;", THREE.ShaderChunk.common, THREE.ShaderChunk.color_pars_fragment, THREE.ShaderChunk.fog_pars_fragment, THREE.ShaderChunk.logdepthbuf_pars_fragment, "void main() {\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );", THREE.ShaderChunk.logdepthbuf_fragment, THREE.ShaderChunk.color_fragment, "\toutgoingLight = diffuseColor.rgb;", THREE.ShaderChunk.fog_fragment, "\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n}"].join("\n") }, depth: { uniforms: { mNear: { type: "f", value: 1 }, mFar: { type: "f", value: 2E3 }, opacity: { type: "f", value: 1 } }, vertexShader: [THREE.ShaderChunk.common, THREE.ShaderChunk.morphtarget_pars_vertex, THREE.ShaderChunk.logdepthbuf_pars_vertex, "void main() {", THREE.ShaderChunk.begin_vertex, THREE.ShaderChunk.morphtarget_vertex, THREE.ShaderChunk.project_vertex, THREE.ShaderChunk.logdepthbuf_vertex, "}"].join("\n"), fragmentShader: ["uniform float mNear;\nuniform float mFar;\nuniform float opacity;", THREE.ShaderChunk.common, THREE.ShaderChunk.logdepthbuf_pars_fragment, "void main() {", THREE.ShaderChunk.logdepthbuf_fragment, "\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\n\t#else\n\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\n\t#endif\n\tfloat color = 1.0 - smoothstep( mNear, mFar, depth );\n\tgl_FragColor = vec4( vec3( color ), opacity );\n}"].join("\n") },
	  normal: { uniforms: { opacity: { type: "f", value: 1 } }, vertexShader: ["varying vec3 vNormal;", THREE.ShaderChunk.common, THREE.ShaderChunk.morphtarget_pars_vertex, THREE.ShaderChunk.logdepthbuf_pars_vertex, "void main() {\n\tvNormal = normalize( normalMatrix * normal );", THREE.ShaderChunk.begin_vertex, THREE.ShaderChunk.morphtarget_vertex, THREE.ShaderChunk.project_vertex, THREE.ShaderChunk.logdepthbuf_vertex, "}"].join("\n"), fragmentShader: ["uniform float opacity;\nvarying vec3 vNormal;", THREE.ShaderChunk.common, THREE.ShaderChunk.logdepthbuf_pars_fragment, "void main() {\n\tgl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );", THREE.ShaderChunk.logdepthbuf_fragment, "}"].join("\n") }, cube: { uniforms: { tCube: { type: "t", value: null }, tFlip: { type: "f", value: -1 } }, vertexShader: ["varying vec3 vWorldPosition;", THREE.ShaderChunk.common, THREE.ShaderChunk.logdepthbuf_pars_vertex, "void main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", THREE.ShaderChunk.logdepthbuf_vertex, "}"].join("\n"), fragmentShader: ["uniform samplerCube tCube;\nuniform float tFlip;\nvarying vec3 vWorldPosition;", THREE.ShaderChunk.common, THREE.ShaderChunk.logdepthbuf_pars_fragment, "void main() {\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );", THREE.ShaderChunk.logdepthbuf_fragment, "}"].join("\n") }, equirect: { uniforms: { tEquirect: { type: "t", value: null }, tFlip: { type: "f", value: -1 } }, vertexShader: ["varying vec3 vWorldPosition;", THREE.ShaderChunk.common, THREE.ShaderChunk.logdepthbuf_pars_vertex, "void main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", THREE.ShaderChunk.logdepthbuf_vertex, "}"].join("\n"), fragmentShader: ["uniform sampler2D tEquirect;\nuniform float tFlip;\nvarying vec3 vWorldPosition;", THREE.ShaderChunk.common, THREE.ShaderChunk.logdepthbuf_pars_fragment, "void main() {\nvec3 direction = normalize( vWorldPosition );\nvec2 sampleUV;\nsampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\nsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\ngl_FragColor = texture2D( tEquirect, sampleUV );", THREE.ShaderChunk.logdepthbuf_fragment, "}"].join("\n") }, depthRGBA: { uniforms: {}, vertexShader: [THREE.ShaderChunk.common, THREE.ShaderChunk.morphtarget_pars_vertex, THREE.ShaderChunk.skinning_pars_vertex, THREE.ShaderChunk.logdepthbuf_pars_vertex, "void main() {", THREE.ShaderChunk.skinbase_vertex, THREE.ShaderChunk.begin_vertex, THREE.ShaderChunk.morphtarget_vertex, THREE.ShaderChunk.skinning_vertex, THREE.ShaderChunk.project_vertex, THREE.ShaderChunk.logdepthbuf_vertex, "}"].join("\n"), fragmentShader: [THREE.ShaderChunk.common, THREE.ShaderChunk.logdepthbuf_pars_fragment, "vec4 pack_depth( const in float depth ) {\n\tconst vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );\n\tconst vec4 bit_mask = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );\n\tvec4 res = mod( depth * bit_shift * vec4( 255 ), vec4( 256 ) ) / vec4( 255 );\n\tres -= res.xxyz * bit_mask;\n\treturn res;\n}\nvoid main() {", THREE.ShaderChunk.logdepthbuf_fragment, "\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tgl_FragData[ 0 ] = pack_depth( gl_FragDepthEXT );\n\t#else\n\t\tgl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );\n\t#endif\n}"].join("\n") },
	  distanceRGBA: { uniforms: { lightPos: { type: "v3", value: new THREE.Vector3(0, 0, 0) } }, vertexShader: ["varying vec4 vWorldPosition;", THREE.ShaderChunk.common, THREE.ShaderChunk.morphtarget_pars_vertex, THREE.ShaderChunk.skinning_pars_vertex, "void main() {", THREE.ShaderChunk.skinbase_vertex, THREE.ShaderChunk.begin_vertex, THREE.ShaderChunk.morphtarget_vertex, THREE.ShaderChunk.skinning_vertex, THREE.ShaderChunk.project_vertex, THREE.ShaderChunk.worldpos_vertex, "vWorldPosition = worldPosition;\n}"].join("\n"), fragmentShader: ["uniform vec3 lightPos;\nvarying vec4 vWorldPosition;", THREE.ShaderChunk.common, "vec4 pack1K ( float depth ) {\n   depth /= 1000.0;\n   const vec4 bitSh = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );\n\tconst vec4 bitMsk = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );\n\tvec4 res = fract( depth * bitSh );\n\tres -= res.xxyz * bitMsk;\n\treturn res; \n}\nfloat unpack1K ( vec4 color ) {\n\tconst vec4 bitSh = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\n\treturn dot( color, bitSh ) * 1000.0;\n}\nvoid main () {\n\tgl_FragColor = pack1K( length( vWorldPosition.xyz - lightPos.xyz ) );\n}"].join("\n") } };
	THREE.WebGLRenderer = function (a) {
	  function b(a, b, c, d) {
	    !0 === G && (a *= d, b *= d, c *= d);r.clearColor(a, b, c, d);
	  }function c() {
	    I.init();r.viewport(na, oa, pa, qa);b(U.r, U.g, U.b, X);
	  }function d() {
	    ra = Aa = null;sa = "";ta = -1;wa = !0;I.reset();
	  }function e(a) {
	    a.preventDefault();d();c();W.clear();
	  }function g(a) {
	    a = a.target;a.removeEventListener("dispose", g);a: {
	      var b = W.get(a);if (a.image && b.__image__webglTextureCube) r.deleteTexture(b.__image__webglTextureCube);else {
	        if (void 0 === b.__webglInit) break a;r.deleteTexture(b.__webglTexture);
	      }W.delete(a);
	    }la.textures--;
	  }
	  function f(a) {
	    a = a.target;a.removeEventListener("dispose", f);var b = W.get(a),
	        c = W.get(a.texture);if (a && void 0 !== c.__webglTexture) {
	      r.deleteTexture(c.__webglTexture);if (a instanceof THREE.WebGLRenderTargetCube) for (c = 0; 6 > c; c++) {
	        r.deleteFramebuffer(b.__webglFramebuffer[c]), r.deleteRenderbuffer(b.__webglRenderbuffer[c]);
	      } else r.deleteFramebuffer(b.__webglFramebuffer), r.deleteRenderbuffer(b.__webglRenderbuffer);W.delete(a.texture);W.delete(a);
	    }la.textures--;
	  }function h(a) {
	    a = a.target;a.removeEventListener("dispose", h);l(a);W.delete(a);
	  }function l(a) {
	    var b = W.get(a).program;a.program = void 0;void 0 !== b && ua.releaseProgram(b);
	  }function k(a, b) {
	    return b[0] - a[0];
	  }function m(a, b) {
	    return a.object.renderOrder !== b.object.renderOrder ? a.object.renderOrder - b.object.renderOrder : a.material.id !== b.material.id ? a.material.id - b.material.id : a.z !== b.z ? a.z - b.z : a.id - b.id;
	  }function p(a, b) {
	    return a.object.renderOrder !== b.object.renderOrder ? a.object.renderOrder - b.object.renderOrder : a.z !== b.z ? b.z - a.z : a.id - b.id;
	  }function n(a, b, c, d, e) {
	    var f;c.transparent ? (d = Z, f = ++fa) : (d = ca, f = ++ga);f = d[f];void 0 !== f ? (f.id = a.id, f.object = a, f.geometry = b, f.material = c, f.z = V.z, f.group = e) : (f = { id: a.id, object: a, geometry: b, material: c, z: V.z, group: e }, d.push(f));
	  }function q(a, b) {
	    if (!1 !== a.visible) {
	      if (0 !== (a.channels.mask & b.channels.mask)) if (a instanceof THREE.Light) da.push(a);else if (a instanceof THREE.Sprite) ea.push(a);else if (a instanceof THREE.LensFlare) ja.push(a);else if (a instanceof THREE.ImmediateRenderObject) !0 === aa.sortObjects && (V.setFromMatrixPosition(a.matrixWorld), V.applyProjection(xa)), n(a, null, a.material, V.z, null);else if (a instanceof THREE.Mesh || a instanceof THREE.Line || a instanceof THREE.Points) if (a instanceof THREE.SkinnedMesh && a.skeleton.update(), !1 === a.frustumCulled || !0 === Ba.intersectsObject(a)) {
	        var c = a.material;if (!0 === c.visible) {
	          !0 === aa.sortObjects && (V.setFromMatrixPosition(a.matrixWorld), V.applyProjection(xa));var d = va.update(a);if (c instanceof THREE.MeshFaceMaterial) for (var e = d.groups, f = c.materials, c = 0, g = e.length; c < g; c++) {
	            var h = e[c],
	                l = f[h.materialIndex];!0 === l.visible && n(a, d, l, V.z, h);
	          } else n(a, d, c, V.z, null);
	        }
	      }d = a.children;c = 0;for (g = d.length; c < g; c++) {
	        q(d[c], b);
	      }
	    }
	  }function s(a, b, c, d, e) {
	    for (var f = 0, g = a.length; f < g; f++) {
	      var h = a[f],
	          l = h.object,
	          k = h.geometry,
	          n = void 0 === e ? h.material : e,
	          h = h.group;l.modelViewMatrix.multiplyMatrices(b.matrixWorldInverse, l.matrixWorld);l.normalMatrix.getNormalMatrix(l.modelViewMatrix);if (l instanceof THREE.ImmediateRenderObject) {
	        t(n);var m = v(b, c, d, n, l);sa = "";l.render(function (a) {
	          aa.renderBufferImmediate(a, m, n);
	        });
	      } else aa.renderBufferDirect(b, c, d, k, n, l, h);
	    }
	  }function t(a) {
	    a.side !== THREE.DoubleSide ? I.enable(r.CULL_FACE) : I.disable(r.CULL_FACE);I.setFlipSided(a.side === THREE.BackSide);!0 === a.transparent ? I.setBlending(a.blending, a.blendEquation, a.blendSrc, a.blendDst, a.blendEquationAlpha, a.blendSrcAlpha, a.blendDstAlpha) : I.setBlending(THREE.NoBlending);I.setDepthFunc(a.depthFunc);I.setDepthTest(a.depthTest);I.setDepthWrite(a.depthWrite);I.setColorWrite(a.colorWrite);I.setPolygonOffset(a.polygonOffset, a.polygonOffsetFactor, a.polygonOffsetUnits);
	  }function v(a, b, c, d, e) {
	    ya = 0;var f = W.get(d);if (d.needsUpdate || !f.program) {
	      a: {
	        var g = W.get(d),
	            k = ua.getParameters(d, b, c, e),
	            n = ua.getProgramCode(d, k),
	            m = g.program,
	            q = !0;if (void 0 === m) d.addEventListener("dispose", h);else if (m.code !== n) l(d);else if (void 0 !== k.shaderID) break a;else q = !1;q && (k.shaderID ? (m = THREE.ShaderLib[k.shaderID], g.__webglShader = { name: d.type, uniforms: THREE.UniformsUtils.clone(m.uniforms), vertexShader: m.vertexShader, fragmentShader: m.fragmentShader }) : g.__webglShader = { name: d.type, uniforms: d.uniforms, vertexShader: d.vertexShader,
	          fragmentShader: d.fragmentShader }, d.__webglShader = g.__webglShader, m = ua.acquireProgram(d, k, n), g.program = m, d.program = m);k = m.getAttributes();if (d.morphTargets) for (n = d.numSupportedMorphTargets = 0; n < aa.maxMorphTargets; n++) {
	          0 <= k["morphTarget" + n] && d.numSupportedMorphTargets++;
	        }if (d.morphNormals) for (n = d.numSupportedMorphNormals = 0; n < aa.maxMorphNormals; n++) {
	          0 <= k["morphNormal" + n] && d.numSupportedMorphNormals++;
	        }g.uniformsList = [];var k = g.program.getUniforms(),
	            p;for (p in g.__webglShader.uniforms) {
	          (n = k[p]) && g.uniformsList.push([g.__webglShader.uniforms[p], n]);
	        }
	      }d.needsUpdate = !1;
	    }n = m = q = !1;g = f.program;p = g.getUniforms();k = f.__webglShader.uniforms;g.id !== Aa && (r.useProgram(g.program), Aa = g.id, n = m = q = !0);d.id !== ta && (-1 === ta && (n = !0), ta = d.id, m = !0);if (q || a !== ra) r.uniformMatrix4fv(p.projectionMatrix, !1, a.projectionMatrix.elements), ha.logarithmicDepthBuffer && r.uniform1f(p.logDepthBufFC, 2 / (Math.log(a.far + 1) / Math.LN2)), a !== ra && (ra = a), (d instanceof THREE.ShaderMaterial || d instanceof THREE.MeshPhongMaterial || d.envMap) && void 0 !== p.cameraPosition && (V.setFromMatrixPosition(a.matrixWorld), r.uniform3f(p.cameraPosition, V.x, V.y, V.z)), (d instanceof THREE.MeshPhongMaterial || d instanceof THREE.MeshLambertMaterial || d instanceof THREE.MeshBasicMaterial || d instanceof THREE.ShaderMaterial || d.skinning) && void 0 !== p.viewMatrix && r.uniformMatrix4fv(p.viewMatrix, !1, a.matrixWorldInverse.elements);d.skinning && (e.bindMatrix && void 0 !== p.bindMatrix && r.uniformMatrix4fv(p.bindMatrix, !1, e.bindMatrix.elements), e.bindMatrixInverse && void 0 !== p.bindMatrixInverse && r.uniformMatrix4fv(p.bindMatrixInverse, !1, e.bindMatrixInverse.elements), ha.floatVertexTextures && e.skeleton && e.skeleton.useVertexTexture ? (void 0 !== p.boneTexture && (q = w(), r.uniform1i(p.boneTexture, q), aa.setTexture(e.skeleton.boneTexture, q)), void 0 !== p.boneTextureWidth && r.uniform1i(p.boneTextureWidth, e.skeleton.boneTextureWidth), void 0 !== p.boneTextureHeight && r.uniform1i(p.boneTextureHeight, e.skeleton.boneTextureHeight)) : e.skeleton && e.skeleton.boneMatrices && void 0 !== p.boneGlobalMatrices && r.uniformMatrix4fv(p.boneGlobalMatrices, !1, e.skeleton.boneMatrices));if (m) {
	      c && d.fog && (k.fogColor.value = c.color, c instanceof THREE.Fog ? (k.fogNear.value = c.near, k.fogFar.value = c.far) : c instanceof THREE.FogExp2 && (k.fogDensity.value = c.density));if (d instanceof THREE.MeshPhongMaterial || d instanceof THREE.MeshLambertMaterial || d.lights) {
	        if (wa) {
	          var n = !0,
	              s,
	              t = q = 0,
	              x = 0,
	              v,
	              F,
	              C,
	              y = Ca,
	              E = a.matrixWorldInverse,
	              B = y.directional.colors,
	              K = y.directional.positions,
	              O = y.point.colors,
	              N = y.point.positions,
	              M = y.point.distances,
	              G = y.point.decays,
	              J = y.spot.colors,
	              H = y.spot.positions,
	              Q = y.spot.distances,
	              I = y.spot.directions,
	              da = y.spot.anglesCos,
	              T = y.spot.exponents,
	              R = y.spot.decays,
	              Z = y.hemi.skyColors,
	              ga = y.hemi.groundColors,
	              S = y.hemi.positions,
	              ca = 0,
	              U = 0,
	              ea = 0,
	              fa = 0,
	              ja = 0,
	              ma = 0,
	              X = 0,
	              $ = 0,
	              ba = s = 0;c = C = ba = 0;for (m = b.length; c < m; c++) {
	            s = b[c], v = s.color, F = s.intensity, C = s.distance, s instanceof THREE.AmbientLight ? s.visible && (q += v.r, t += v.g, x += v.b) : s instanceof THREE.DirectionalLight ? (ja += 1, s.visible && (Y.setFromMatrixPosition(s.matrixWorld), V.setFromMatrixPosition(s.target.matrixWorld), Y.sub(V), Y.transformDirection(E), s = 3 * ca, K[s + 0] = Y.x, K[s + 1] = Y.y, K[s + 2] = Y.z, D(B, s, v, F), ca += 1)) : s instanceof THREE.PointLight ? (ma += 1, s.visible && (ba = 3 * U, D(O, ba, v, F), V.setFromMatrixPosition(s.matrixWorld), V.applyMatrix4(E), N[ba + 0] = V.x, N[ba + 1] = V.y, N[ba + 2] = V.z, M[U] = C, G[U] = 0 === s.distance ? 0 : s.decay, U += 1)) : s instanceof THREE.SpotLight ? (X += 1, s.visible && (ba = 3 * ea, D(J, ba, v, F), Y.setFromMatrixPosition(s.matrixWorld), V.copy(Y).applyMatrix4(E), H[ba + 0] = V.x, H[ba + 1] = V.y, H[ba + 2] = V.z, Q[ea] = C, V.setFromMatrixPosition(s.target.matrixWorld), Y.sub(V), Y.transformDirection(E), I[ba + 0] = Y.x, I[ba + 1] = Y.y, I[ba + 2] = Y.z, da[ea] = Math.cos(s.angle), T[ea] = s.exponent, R[ea] = 0 === s.distance ? 0 : s.decay, ea += 1)) : s instanceof THREE.HemisphereLight && ($ += 1, s.visible && (Y.setFromMatrixPosition(s.matrixWorld), Y.transformDirection(E), C = 3 * fa, S[C + 0] = Y.x, S[C + 1] = Y.y, S[C + 2] = Y.z, v = s.color, s = s.groundColor, D(Z, C, v, F), D(ga, C, s, F), fa += 1));
	          }c = 3 * ca;for (m = Math.max(B.length, 3 * ja); c < m; c++) {
	            B[c] = 0;
	          }c = 3 * U;for (m = Math.max(O.length, 3 * ma); c < m; c++) {
	            O[c] = 0;
	          }c = 3 * ea;for (m = Math.max(J.length, 3 * X); c < m; c++) {
	            J[c] = 0;
	          }c = 3 * fa;for (m = Math.max(Z.length, 3 * $); c < m; c++) {
	            Z[c] = 0;
	          }c = 3 * fa;for (m = Math.max(ga.length, 3 * $); c < m; c++) {
	            ga[c] = 0;
	          }y.directional.length = ca;y.point.length = U;y.spot.length = ea;y.hemi.length = fa;y.ambient[0] = q;y.ambient[1] = t;y.ambient[2] = x;wa = !1;
	        }n ? (n = Ca, k.ambientLightColor.value = n.ambient, k.directionalLightColor.value = n.directional.colors, k.directionalLightDirection.value = n.directional.positions, k.pointLightColor.value = n.point.colors, k.pointLightPosition.value = n.point.positions, k.pointLightDistance.value = n.point.distances, k.pointLightDecay.value = n.point.decays, k.spotLightColor.value = n.spot.colors, k.spotLightPosition.value = n.spot.positions, k.spotLightDistance.value = n.spot.distances, k.spotLightDirection.value = n.spot.directions, k.spotLightAngleCos.value = n.spot.anglesCos, k.spotLightExponent.value = n.spot.exponents, k.spotLightDecay.value = n.spot.decays, k.hemisphereLightSkyColor.value = n.hemi.skyColors, k.hemisphereLightGroundColor.value = n.hemi.groundColors, k.hemisphereLightDirection.value = n.hemi.positions, u(k, !0)) : u(k, !1);
	      }if (d instanceof THREE.MeshBasicMaterial || d instanceof THREE.MeshLambertMaterial || d instanceof THREE.MeshPhongMaterial) {
	        k.opacity.value = d.opacity;k.diffuse.value = d.color;d.emissive && (k.emissive.value = d.emissive);k.map.value = d.map;k.specularMap.value = d.specularMap;k.alphaMap.value = d.alphaMap;d.aoMap && (k.aoMap.value = d.aoMap, k.aoMapIntensity.value = d.aoMapIntensity);var P;d.map ? P = d.map : d.specularMap ? P = d.specularMap : d.displacementMap ? P = d.displacementMap : d.normalMap ? P = d.normalMap : d.bumpMap ? P = d.bumpMap : d.alphaMap ? P = d.alphaMap : d.emissiveMap && (P = d.emissiveMap);void 0 !== P && (P instanceof THREE.WebGLRenderTarget && (P = P.texture), n = P.offset, P = P.repeat, k.offsetRepeat.value.set(n.x, n.y, P.x, P.y));k.envMap.value = d.envMap;k.flipEnvMap.value = d.envMap instanceof THREE.WebGLRenderTargetCube ? 1 : -1;k.reflectivity.value = d.reflectivity;k.refractionRatio.value = d.refractionRatio;
	      }d instanceof THREE.LineBasicMaterial ? (k.diffuse.value = d.color, k.opacity.value = d.opacity) : d instanceof THREE.LineDashedMaterial ? (k.diffuse.value = d.color, k.opacity.value = d.opacity, k.dashSize.value = d.dashSize, k.totalSize.value = d.dashSize + d.gapSize, k.scale.value = d.scale) : d instanceof THREE.PointsMaterial ? (k.psColor.value = d.color, k.opacity.value = d.opacity, k.size.value = d.size, k.scale.value = L.height / 2, k.map.value = d.map, null !== d.map && (a = d.map.offset, P = d.map.repeat, k.offsetRepeat.value.set(a.x, a.y, P.x, P.y))) : d instanceof THREE.MeshPhongMaterial ? (k.specular.value = d.specular, k.shininess.value = Math.max(d.shininess, 1E-4), d.lightMap && (k.lightMap.value = d.lightMap, k.lightMapIntensity.value = d.lightMapIntensity), d.emissiveMap && (k.emissiveMap.value = d.emissiveMap), d.bumpMap && (k.bumpMap.value = d.bumpMap, k.bumpScale.value = d.bumpScale), d.normalMap && (k.normalMap.value = d.normalMap, k.normalScale.value.copy(d.normalScale)), d.displacementMap && (k.displacementMap.value = d.displacementMap, k.displacementScale.value = d.displacementScale, k.displacementBias.value = d.displacementBias)) : d instanceof THREE.MeshDepthMaterial ? (k.mNear.value = a.near, k.mFar.value = a.far, k.opacity.value = d.opacity) : d instanceof THREE.MeshNormalMaterial && (k.opacity.value = d.opacity);if (e.receiveShadow && !d._shadowPass && k.shadowMatrix) for (a = d = 0, P = b.length; a < P; a++) {
	        n = b[a], !0 === n.castShadow && (n instanceof THREE.PointLight || n instanceof THREE.SpotLight || n instanceof THREE.DirectionalLight) && (c = n.shadow, n instanceof THREE.PointLight ? (V.setFromMatrixPosition(n.matrixWorld).negate(), c.matrix.identity().setPosition(V), k.shadowDarkness.value[d] = -c.darkness) : k.shadowDarkness.value[d] = c.darkness, k.shadowMatrix.value[d] = c.matrix, k.shadowMap.value[d] = c.map, k.shadowMapSize.value[d] = c.mapSize, k.shadowBias.value[d] = c.bias, d++);
	      }b = f.uniformsList;f = 0;for (d = b.length; f < d; f++) {
	        if (a = b[f][0], !1 !== a.needsUpdate) switch (k = a.type, c = a.value, P = b[f][1], k) {case "1i":
	            r.uniform1i(P, c);break;case "1f":
	            r.uniform1f(P, c);break;case "2f":
	            r.uniform2f(P, c[0], c[1]);break;case "3f":
	            r.uniform3f(P, c[0], c[1], c[2]);break;case "4f":
	            r.uniform4f(P, c[0], c[1], c[2], c[3]);break;case "1iv":
	            r.uniform1iv(P, c);break;case "3iv":
	            r.uniform3iv(P, c);break;case "1fv":
	            r.uniform1fv(P, c);break;case "2fv":
	            r.uniform2fv(P, c);break;
	          case "3fv":
	            r.uniform3fv(P, c);break;case "4fv":
	            r.uniform4fv(P, c);break;case "Matrix3fv":
	            r.uniformMatrix3fv(P, !1, c);break;case "Matrix4fv":
	            r.uniformMatrix4fv(P, !1, c);break;case "i":
	            r.uniform1i(P, c);break;case "f":
	            r.uniform1f(P, c);break;case "v2":
	            r.uniform2f(P, c.x, c.y);break;case "v3":
	            r.uniform3f(P, c.x, c.y, c.z);break;case "v4":
	            r.uniform4f(P, c.x, c.y, c.z, c.w);break;case "c":
	            r.uniform3f(P, c.r, c.g, c.b);break;case "iv1":
	            r.uniform1iv(P, c);break;case "iv":
	            r.uniform3iv(P, c);break;case "fv1":
	            r.uniform1fv(P, c);
	            break;case "fv":
	            r.uniform3fv(P, c);break;case "v2v":
	            void 0 === a._array && (a._array = new Float32Array(2 * c.length));m = k = 0;for (n = c.length; k < n; k++, m += 2) {
	              a._array[m + 0] = c[k].x, a._array[m + 1] = c[k].y;
	            }r.uniform2fv(P, a._array);break;case "v3v":
	            void 0 === a._array && (a._array = new Float32Array(3 * c.length));m = k = 0;for (n = c.length; k < n; k++, m += 3) {
	              a._array[m + 0] = c[k].x, a._array[m + 1] = c[k].y, a._array[m + 2] = c[k].z;
	            }r.uniform3fv(P, a._array);break;case "v4v":
	            void 0 === a._array && (a._array = new Float32Array(4 * c.length));m = k = 0;for (n = c.length; k < n; k++, m += 4) {
	              a._array[m + 0] = c[k].x, a._array[m + 1] = c[k].y, a._array[m + 2] = c[k].z, a._array[m + 3] = c[k].w;
	            }r.uniform4fv(P, a._array);break;case "m3":
	            r.uniformMatrix3fv(P, !1, c.elements);break;case "m3v":
	            void 0 === a._array && (a._array = new Float32Array(9 * c.length));k = 0;for (n = c.length; k < n; k++) {
	              c[k].flattenToArrayOffset(a._array, 9 * k);
	            }r.uniformMatrix3fv(P, !1, a._array);break;case "m4":
	            r.uniformMatrix4fv(P, !1, c.elements);break;case "m4v":
	            void 0 === a._array && (a._array = new Float32Array(16 * c.length));k = 0;for (n = c.length; k < n; k++) {
	              c[k].flattenToArrayOffset(a._array, 16 * k);
	            }r.uniformMatrix4fv(P, !1, a._array);break;case "t":
	            m = w();r.uniform1i(P, m);if (!c) continue;c instanceof THREE.CubeTexture || Array.isArray(c.image) && 6 === c.image.length ? z(c, m) : c instanceof THREE.WebGLRenderTargetCube ? A(c.texture, m) : c instanceof THREE.WebGLRenderTarget ? aa.setTexture(c.texture, m) : aa.setTexture(c, m);break;case "tv":
	            void 0 === a._array && (a._array = []);k = 0;for (n = a.value.length; k < n; k++) {
	              a._array[k] = w();
	            }r.uniform1iv(P, a._array);k = 0;for (n = a.value.length; k < n; k++) {
	              c = a.value[k], m = a._array[k], c && (c instanceof THREE.CubeTexture || c.image instanceof Array && 6 === c.image.length ? z(c, m) : c instanceof THREE.WebGLRenderTarget ? aa.setTexture(c.texture, m) : c instanceof THREE.WebGLRenderTargetCube ? A(c.texture, m) : aa.setTexture(c, m));
	            }break;default:
	            console.warn("THREE.WebGLRenderer: Unknown uniform type: " + k);}
	      }
	    }r.uniformMatrix4fv(p.modelViewMatrix, !1, e.modelViewMatrix.elements);p.normalMatrix && r.uniformMatrix3fv(p.normalMatrix, !1, e.normalMatrix.elements);void 0 !== p.modelMatrix && r.uniformMatrix4fv(p.modelMatrix, !1, e.matrixWorld.elements);
	    return g;
	  }function u(a, b) {
	    a.ambientLightColor.needsUpdate = b;a.directionalLightColor.needsUpdate = b;a.directionalLightDirection.needsUpdate = b;a.pointLightColor.needsUpdate = b;a.pointLightPosition.needsUpdate = b;a.pointLightDistance.needsUpdate = b;a.pointLightDecay.needsUpdate = b;a.spotLightColor.needsUpdate = b;a.spotLightPosition.needsUpdate = b;a.spotLightDistance.needsUpdate = b;a.spotLightDirection.needsUpdate = b;a.spotLightAngleCos.needsUpdate = b;a.spotLightExponent.needsUpdate = b;a.spotLightDecay.needsUpdate = b;a.hemisphereLightSkyColor.needsUpdate = b;a.hemisphereLightGroundColor.needsUpdate = b;a.hemisphereLightDirection.needsUpdate = b;
	  }function w() {
	    var a = ya;a >= ha.maxTextures && console.warn("WebGLRenderer: trying to use " + a + " texture units while this GPU supports only " + ha.maxTextures);ya += 1;return a;
	  }function D(a, b, c, d) {
	    a[b + 0] = c.r * d;a[b + 1] = c.g * d;a[b + 2] = c.b * d;
	  }function x(a, b, c) {
	    c ? (r.texParameteri(a, r.TEXTURE_WRAP_S, N(b.wrapS)), r.texParameteri(a, r.TEXTURE_WRAP_T, N(b.wrapT)), r.texParameteri(a, r.TEXTURE_MAG_FILTER, N(b.magFilter)), r.texParameteri(a, r.TEXTURE_MIN_FILTER, N(b.minFilter))) : (r.texParameteri(a, r.TEXTURE_WRAP_S, r.CLAMP_TO_EDGE), r.texParameteri(a, r.TEXTURE_WRAP_T, r.CLAMP_TO_EDGE), b.wrapS === THREE.ClampToEdgeWrapping && b.wrapT === THREE.ClampToEdgeWrapping || console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.", b), r.texParameteri(a, r.TEXTURE_MAG_FILTER, C(b.magFilter)), r.texParameteri(a, r.TEXTURE_MIN_FILTER, C(b.minFilter)), b.minFilter !== THREE.NearestFilter && b.minFilter !== THREE.LinearFilter && console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.", b));!(c = S.get("EXT_texture_filter_anisotropic")) || b.type === THREE.FloatType && null === S.get("OES_texture_float_linear") || b.type === THREE.HalfFloatType && null === S.get("OES_texture_half_float_linear") || !(1 < b.anisotropy || W.get(b).__currentAnisotropy) || (r.texParameterf(a, c.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(b.anisotropy, aa.getMaxAnisotropy())), W.get(b).__currentAnisotropy = b.anisotropy);
	  }function B(a, b) {
	    if (a.width > b || a.height > b) {
	      var c = b / Math.max(a.width, a.height),
	          d = document.createElement("canvas");d.width = Math.floor(a.width * c);d.height = Math.floor(a.height * c);d.getContext("2d").drawImage(a, 0, 0, a.width, a.height, 0, 0, d.width, d.height);console.warn("THREE.WebGLRenderer: image is too big (" + a.width + "x" + a.height + "). Resized to " + d.width + "x" + d.height, a);return d;
	    }return a;
	  }function y(a) {
	    return THREE.Math.isPowerOfTwo(a.width) && THREE.Math.isPowerOfTwo(a.height);
	  }function z(a, b) {
	    var c = W.get(a);if (6 === a.image.length) if (0 < a.version && c.__version !== a.version) {
	      c.__image__webglTextureCube || (a.addEventListener("dispose", g), c.__image__webglTextureCube = r.createTexture(), la.textures++);I.activeTexture(r.TEXTURE0 + b);I.bindTexture(r.TEXTURE_CUBE_MAP, c.__image__webglTextureCube);r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL, a.flipY);for (var d = a instanceof THREE.CompressedTexture, e = a.image[0] instanceof THREE.DataTexture, f = [], h = 0; 6 > h; h++) {
	        f[h] = !aa.autoScaleCubemaps || d || e ? e ? a.image[h].image : a.image[h] : B(a.image[h], ha.maxCubemapSize);
	      }var k = y(f[0]),
	          l = N(a.format),
	          n = N(a.type);x(r.TEXTURE_CUBE_MAP, a, k);for (h = 0; 6 > h; h++) {
	        if (d) for (var m, q = f[h].mipmaps, p = 0, s = q.length; p < s; p++) {
	          m = q[p], a.format !== THREE.RGBAFormat && a.format !== THREE.RGBFormat ? -1 < I.getCompressedTextureFormats().indexOf(l) ? I.compressedTexImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + h, p, l, m.width, m.height, 0, m.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setCubeTexture()") : I.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + h, p, l, m.width, m.height, 0, l, n, m.data);
	        } else e ? I.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + h, 0, l, f[h].width, f[h].height, 0, l, n, f[h].data) : I.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + h, 0, l, l, n, f[h]);
	      }a.generateMipmaps && k && r.generateMipmap(r.TEXTURE_CUBE_MAP);c.__version = a.version;if (a.onUpdate) a.onUpdate(a);
	    } else I.activeTexture(r.TEXTURE0 + b), I.bindTexture(r.TEXTURE_CUBE_MAP, c.__image__webglTextureCube);
	  }function A(a, b) {
	    I.activeTexture(r.TEXTURE0 + b);I.bindTexture(r.TEXTURE_CUBE_MAP, W.get(a).__webglTexture);
	  }function J(a, b, c) {
	    r.bindFramebuffer(r.FRAMEBUFFER, a);r.framebufferTexture2D(r.FRAMEBUFFER, r.COLOR_ATTACHMENT0, c, W.get(b.texture).__webglTexture, 0);
	  }function F(a, b) {
	    r.bindRenderbuffer(r.RENDERBUFFER, a);b.depthBuffer && !b.stencilBuffer ? (r.renderbufferStorage(r.RENDERBUFFER, r.DEPTH_COMPONENT16, b.width, b.height), r.framebufferRenderbuffer(r.FRAMEBUFFER, r.DEPTH_ATTACHMENT, r.RENDERBUFFER, a)) : b.depthBuffer && b.stencilBuffer ? (r.renderbufferStorage(r.RENDERBUFFER, r.DEPTH_STENCIL, b.width, b.height), r.framebufferRenderbuffer(r.FRAMEBUFFER, r.DEPTH_STENCIL_ATTACHMENT, r.RENDERBUFFER, a)) : r.renderbufferStorage(r.RENDERBUFFER, r.RGBA4, b.width, b.height);
	  }function C(a) {
	    return a === THREE.NearestFilter || a === THREE.NearestMipMapNearestFilter || a === THREE.NearestMipMapLinearFilter ? r.NEAREST : r.LINEAR;
	  }function N(a) {
	    var b;if (a === THREE.RepeatWrapping) return r.REPEAT;if (a === THREE.ClampToEdgeWrapping) return r.CLAMP_TO_EDGE;if (a === THREE.MirroredRepeatWrapping) return r.MIRRORED_REPEAT;if (a === THREE.NearestFilter) return r.NEAREST;
	    if (a === THREE.NearestMipMapNearestFilter) return r.NEAREST_MIPMAP_NEAREST;if (a === THREE.NearestMipMapLinearFilter) return r.NEAREST_MIPMAP_LINEAR;if (a === THREE.LinearFilter) return r.LINEAR;if (a === THREE.LinearMipMapNearestFilter) return r.LINEAR_MIPMAP_NEAREST;if (a === THREE.LinearMipMapLinearFilter) return r.LINEAR_MIPMAP_LINEAR;if (a === THREE.UnsignedByteType) return r.UNSIGNED_BYTE;if (a === THREE.UnsignedShort4444Type) return r.UNSIGNED_SHORT_4_4_4_4;if (a === THREE.UnsignedShort5551Type) return r.UNSIGNED_SHORT_5_5_5_1;
	    if (a === THREE.UnsignedShort565Type) return r.UNSIGNED_SHORT_5_6_5;if (a === THREE.ByteType) return r.BYTE;if (a === THREE.ShortType) return r.SHORT;if (a === THREE.UnsignedShortType) return r.UNSIGNED_SHORT;if (a === THREE.IntType) return r.INT;if (a === THREE.UnsignedIntType) return r.UNSIGNED_INT;if (a === THREE.FloatType) return r.FLOAT;b = S.get("OES_texture_half_float");if (null !== b && a === THREE.HalfFloatType) return b.HALF_FLOAT_OES;if (a === THREE.AlphaFormat) return r.ALPHA;if (a === THREE.RGBFormat) return r.RGB;if (a === THREE.RGBAFormat) return r.RGBA;
	    if (a === THREE.LuminanceFormat) return r.LUMINANCE;if (a === THREE.LuminanceAlphaFormat) return r.LUMINANCE_ALPHA;if (a === THREE.AddEquation) return r.FUNC_ADD;if (a === THREE.SubtractEquation) return r.FUNC_SUBTRACT;if (a === THREE.ReverseSubtractEquation) return r.FUNC_REVERSE_SUBTRACT;if (a === THREE.ZeroFactor) return r.ZERO;if (a === THREE.OneFactor) return r.ONE;if (a === THREE.SrcColorFactor) return r.SRC_COLOR;if (a === THREE.OneMinusSrcColorFactor) return r.ONE_MINUS_SRC_COLOR;if (a === THREE.SrcAlphaFactor) return r.SRC_ALPHA;
	    if (a === THREE.OneMinusSrcAlphaFactor) return r.ONE_MINUS_SRC_ALPHA;if (a === THREE.DstAlphaFactor) return r.DST_ALPHA;if (a === THREE.OneMinusDstAlphaFactor) return r.ONE_MINUS_DST_ALPHA;if (a === THREE.DstColorFactor) return r.DST_COLOR;if (a === THREE.OneMinusDstColorFactor) return r.ONE_MINUS_DST_COLOR;if (a === THREE.SrcAlphaSaturateFactor) return r.SRC_ALPHA_SATURATE;b = S.get("WEBGL_compressed_texture_s3tc");if (null !== b) {
	      if (a === THREE.RGB_S3TC_DXT1_Format) return b.COMPRESSED_RGB_S3TC_DXT1_EXT;if (a === THREE.RGBA_S3TC_DXT1_Format) return b.COMPRESSED_RGBA_S3TC_DXT1_EXT;
	      if (a === THREE.RGBA_S3TC_DXT3_Format) return b.COMPRESSED_RGBA_S3TC_DXT3_EXT;if (a === THREE.RGBA_S3TC_DXT5_Format) return b.COMPRESSED_RGBA_S3TC_DXT5_EXT;
	    }b = S.get("WEBGL_compressed_texture_pvrtc");if (null !== b) {
	      if (a === THREE.RGB_PVRTC_4BPPV1_Format) return b.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if (a === THREE.RGB_PVRTC_2BPPV1_Format) return b.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if (a === THREE.RGBA_PVRTC_4BPPV1_Format) return b.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if (a === THREE.RGBA_PVRTC_2BPPV1_Format) return b.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
	    }b = S.get("EXT_blend_minmax");if (null !== b) {
	      if (a === THREE.MinEquation) return b.MIN_EXT;if (a === THREE.MaxEquation) return b.MAX_EXT;
	    }return 0;
	  }console.log("THREE.WebGLRenderer", THREE.REVISION);a = a || {};var L = void 0 !== a.canvas ? a.canvas : document.createElement("canvas"),
	      Q = void 0 !== a.context ? a.context : null,
	      M = L.width,
	      K = L.height,
	      E = 1,
	      O = void 0 !== a.alpha ? a.alpha : !1,
	      T = void 0 !== a.depth ? a.depth : !0,
	      H = void 0 !== a.stencil ? a.stencil : !0,
	      R = void 0 !== a.antialias ? a.antialias : !1,
	      G = void 0 !== a.premultipliedAlpha ? a.premultipliedAlpha : !0,
	      ia = void 0 !== a.preserveDrawingBuffer ? a.preserveDrawingBuffer : !1,
	      U = new THREE.Color(0),
	      X = 0,
	      da = [],
	      ca = [],
	      ga = -1,
	      Z = [],
	      fa = -1,
	      ma = new Float32Array(8),
	      ea = [],
	      ja = [];this.domElement = L;this.context = null;this.sortObjects = this.autoClearStencil = this.autoClearDepth = this.autoClearColor = this.autoClear = !0;this.gammaFactor = 2;this.gammaOutput = this.gammaInput = !1;this.maxMorphTargets = 8;this.maxMorphNormals = 4;this.autoScaleCubemaps = !0;var aa = this,
	      Aa = null,
	      za = null,
	      ta = -1,
	      sa = "",
	      ra = null,
	      ya = 0,
	      na = 0,
	      oa = 0,
	      pa = L.width,
	      qa = L.height,
	      Da = 0,
	      Ea = 0,
	      Ba = new THREE.Frustum(),
	      xa = new THREE.Matrix4(),
	      V = new THREE.Vector3(),
	      Y = new THREE.Vector3(),
	      wa = !0,
	      Ca = { ambient: [0, 0, 0], directional: { length: 0, colors: [], positions: [] }, point: { length: 0, colors: [], positions: [], distances: [], decays: [] }, spot: { length: 0, colors: [], positions: [], distances: [], directions: [], anglesCos: [], exponents: [], decays: [] }, hemi: { length: 0, skyColors: [], groundColors: [], positions: [] } },
	      la = { geometries: 0, textures: 0 },
	      ka = { calls: 0, vertices: 0, faces: 0, points: 0 };this.info = { render: ka, memory: la, programs: null };
	  var r;try {
	    O = { alpha: O, depth: T, stencil: H, antialias: R, premultipliedAlpha: G, preserveDrawingBuffer: ia };r = Q || L.getContext("webgl", O) || L.getContext("experimental-webgl", O);if (null === r) {
	      if (null !== L.getContext("webgl")) throw "Error creating WebGL context with your selected attributes.";throw "Error creating WebGL context.";
	    }L.addEventListener("webglcontextlost", e, !1);
	  } catch (Fa) {
	    console.error("THREE.WebGLRenderer: " + Fa);
	  }var S = new THREE.WebGLExtensions(r);S.get("OES_texture_float");S.get("OES_texture_float_linear");
	  S.get("OES_texture_half_float");S.get("OES_texture_half_float_linear");S.get("OES_standard_derivatives");S.get("ANGLE_instanced_arrays");S.get("OES_element_index_uint") && (THREE.BufferGeometry.MaxIndex = 4294967296);var ha = new THREE.WebGLCapabilities(r, S, a),
	      I = new THREE.WebGLState(r, S, N),
	      W = new THREE.WebGLProperties(),
	      va = new THREE.WebGLObjects(r, W, this.info),
	      ua = new THREE.WebGLPrograms(this, ha);this.info.programs = ua.programs;var Ga = new THREE.WebGLBufferRenderer(r, S, ka),
	      Ha = new THREE.WebGLIndexedBufferRenderer(r, S, ka);c();this.context = r;this.capabilities = ha;this.extensions = S;this.state = I;var $ = new THREE.WebGLShadowMap(this, da, va);this.shadowMap = $;var Ia = new THREE.SpritePlugin(this, ea),
	      Ja = new THREE.LensFlarePlugin(this, ja);this.getContext = function () {
	    return r;
	  };this.getContextAttributes = function () {
	    return r.getContextAttributes();
	  };this.forceContextLoss = function () {
	    S.get("WEBGL_lose_context").loseContext();
	  };this.getMaxAnisotropy = function () {
	    var a;return function () {
	      if (void 0 !== a) return a;var b = S.get("EXT_texture_filter_anisotropic");
	      return a = null !== b ? r.getParameter(b.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 0;
	    };
	  }();this.getPrecision = function () {
	    return ha.precision;
	  };this.getPixelRatio = function () {
	    return E;
	  };this.setPixelRatio = function (a) {
	    void 0 !== a && (E = a);
	  };this.getSize = function () {
	    return { width: M, height: K };
	  };this.setSize = function (a, b, c) {
	    M = a;K = b;L.width = a * E;L.height = b * E;!1 !== c && (L.style.width = a + "px", L.style.height = b + "px");this.setViewport(0, 0, a, b);
	  };this.setViewport = function (a, b, c, d) {
	    na = a * E;oa = b * E;pa = c * E;qa = d * E;r.viewport(na, oa, pa, qa);
	  };this.getViewport = function (a) {
	    a.x = na / E;a.y = oa / E;a.z = pa / E;a.w = qa / E;
	  };this.setScissor = function (a, b, c, d) {
	    r.scissor(a * E, b * E, c * E, d * E);
	  };this.enableScissorTest = function (a) {
	    I.setScissorTest(a);
	  };this.getClearColor = function () {
	    return U;
	  };this.setClearColor = function (a, c) {
	    U.set(a);X = void 0 !== c ? c : 1;b(U.r, U.g, U.b, X);
	  };this.getClearAlpha = function () {
	    return X;
	  };this.setClearAlpha = function (a) {
	    X = a;b(U.r, U.g, U.b, X);
	  };this.clear = function (a, b, c) {
	    var d = 0;if (void 0 === a || a) d |= r.COLOR_BUFFER_BIT;if (void 0 === b || b) d |= r.DEPTH_BUFFER_BIT;if (void 0 === c || c) d |= r.STENCIL_BUFFER_BIT;r.clear(d);
	  };this.clearColor = function () {
	    r.clear(r.COLOR_BUFFER_BIT);
	  };this.clearDepth = function () {
	    r.clear(r.DEPTH_BUFFER_BIT);
	  };this.clearStencil = function () {
	    r.clear(r.STENCIL_BUFFER_BIT);
	  };this.clearTarget = function (a, b, c, d) {
	    this.setRenderTarget(a);this.clear(b, c, d);
	  };this.resetGLState = d;this.dispose = function () {
	    L.removeEventListener("webglcontextlost", e, !1);
	  };this.renderBufferImmediate = function (a, b, c) {
	    I.initAttributes();var d = W.get(a);a.hasPositions && !d.position && (d.position = r.createBuffer());a.hasNormals && !d.normal && (d.normal = r.createBuffer());a.hasUvs && !d.uv && (d.uv = r.createBuffer());a.hasColors && !d.color && (d.color = r.createBuffer());b = b.getAttributes();a.hasPositions && (r.bindBuffer(r.ARRAY_BUFFER, d.position), r.bufferData(r.ARRAY_BUFFER, a.positionArray, r.DYNAMIC_DRAW), I.enableAttribute(b.position), r.vertexAttribPointer(b.position, 3, r.FLOAT, !1, 0, 0));if (a.hasNormals) {
	      r.bindBuffer(r.ARRAY_BUFFER, d.normal);if ("MeshPhongMaterial" !== c.type && c.shading === THREE.FlatShading) for (var e = 0, f = 3 * a.count; e < f; e += 9) {
	        var g = a.normalArray,
	            h = (g[e + 0] + g[e + 3] + g[e + 6]) / 3,
	            k = (g[e + 1] + g[e + 4] + g[e + 7]) / 3,
	            l = (g[e + 2] + g[e + 5] + g[e + 8]) / 3;g[e + 0] = h;g[e + 1] = k;g[e + 2] = l;g[e + 3] = h;g[e + 4] = k;g[e + 5] = l;g[e + 6] = h;g[e + 7] = k;g[e + 8] = l;
	      }r.bufferData(r.ARRAY_BUFFER, a.normalArray, r.DYNAMIC_DRAW);I.enableAttribute(b.normal);r.vertexAttribPointer(b.normal, 3, r.FLOAT, !1, 0, 0);
	    }a.hasUvs && c.map && (r.bindBuffer(r.ARRAY_BUFFER, d.uv), r.bufferData(r.ARRAY_BUFFER, a.uvArray, r.DYNAMIC_DRAW), I.enableAttribute(b.uv), r.vertexAttribPointer(b.uv, 2, r.FLOAT, !1, 0, 0));a.hasColors && c.vertexColors !== THREE.NoColors && (r.bindBuffer(r.ARRAY_BUFFER, d.color), r.bufferData(r.ARRAY_BUFFER, a.colorArray, r.DYNAMIC_DRAW), I.enableAttribute(b.color), r.vertexAttribPointer(b.color, 3, r.FLOAT, !1, 0, 0));I.disableUnusedAttributes();r.drawArrays(r.TRIANGLES, 0, a.count);a.count = 0;
	  };this.renderBufferDirect = function (a, b, c, d, e, f, g) {
	    t(e);var h = v(a, b, c, e, f),
	        l = !1;a = d.id + "_" + h.id + "_" + e.wireframe;a !== sa && (sa = a, l = !0);b = f.morphTargetInfluences;if (void 0 !== b) {
	      a = [];c = 0;for (l = b.length; c < l; c++) {
	        var n = b[c];a.push([n, c]);
	      }a.sort(k);8 < a.length && (a.length = 8);var m = d.morphAttributes;c = 0;for (l = a.length; c < l; c++) {
	        n = a[c], ma[c] = n[0], 0 !== n[0] ? (b = n[1], !0 === e.morphTargets && m.position && d.addAttribute("morphTarget" + c, m.position[b]), !0 === e.morphNormals && m.normal && d.addAttribute("morphNormal" + c, m.normal[b])) : (!0 === e.morphTargets && d.removeAttribute("morphTarget" + c), !0 === e.morphNormals && d.removeAttribute("morphNormal" + c));
	      }a = h.getUniforms();null !== a.morphTargetInfluences && r.uniform1fv(a.morphTargetInfluences, ma);l = !0;
	    }b = d.index;c = d.attributes.position;!0 === e.wireframe && (b = va.getWireframeAttribute(d));null !== b ? (a = Ha, a.setIndex(b)) : a = Ga;if (l) {
	      a: {
	        var l = void 0,
	            q;if (d instanceof THREE.InstancedBufferGeometry && (q = S.get("ANGLE_instanced_arrays"), null === q)) {
	          console.error("THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");break a;
	        }void 0 === l && (l = 0);I.initAttributes();var n = d.attributes,
	            h = h.getAttributes(),
	            m = e.defaultAttributeValues,
	            p;for (p in h) {
	          var s = h[p];if (0 <= s) {
	            var u = n[p];if (void 0 !== u) {
	              var w = u.itemSize,
	                  x = va.getAttributeBuffer(u);if (u instanceof THREE.InterleavedBufferAttribute) {
	                var F = u.data,
	                    D = F.stride,
	                    u = u.offset;F instanceof THREE.InstancedInterleavedBuffer ? (I.enableAttributeAndDivisor(s, F.meshPerAttribute, q), void 0 === d.maxInstancedCount && (d.maxInstancedCount = F.meshPerAttribute * F.count)) : I.enableAttribute(s);r.bindBuffer(r.ARRAY_BUFFER, x);r.vertexAttribPointer(s, w, r.FLOAT, !1, D * F.array.BYTES_PER_ELEMENT, (l * D + u) * F.array.BYTES_PER_ELEMENT);
	              } else u instanceof THREE.InstancedBufferAttribute ? (I.enableAttributeAndDivisor(s, u.meshPerAttribute, q), void 0 === d.maxInstancedCount && (d.maxInstancedCount = u.meshPerAttribute * u.count)) : I.enableAttribute(s), r.bindBuffer(r.ARRAY_BUFFER, x), r.vertexAttribPointer(s, w, r.FLOAT, !1, 0, l * w * 4);
	            } else if (void 0 !== m && (w = m[p], void 0 !== w)) switch (w.length) {case 2:
	                r.vertexAttrib2fv(s, w);break;case 3:
	                r.vertexAttrib3fv(s, w);break;case 4:
	                r.vertexAttrib4fv(s, w);break;default:
	                r.vertexAttrib1fv(s, w);}
	          }
	        }I.disableUnusedAttributes();
	      }null !== b && r.bindBuffer(r.ELEMENT_ARRAY_BUFFER, va.getAttributeBuffer(b));
	    }q = Infinity;null !== b ? q = b.count : void 0 !== c && (q = c.count);p = d.drawRange.start;b = d.drawRange.count;c = null !== g ? g.start : 0;l = null !== g ? g.count : Infinity;g = Math.max(0, p, c);q = Math.min(0 + q, p + b, c + l) - 1;q = Math.max(0, q - g + 1);f instanceof THREE.Mesh ? (!0 === e.wireframe ? (I.setLineWidth(e.wireframeLinewidth * E), a.setMode(r.LINES)) : a.setMode(r.TRIANGLES), d instanceof THREE.InstancedBufferGeometry && 0 < d.maxInstancedCount ? a.renderInstances(d) : a.render(g, q)) : f instanceof THREE.Line ? (d = e.linewidth, void 0 === d && (d = 1), I.setLineWidth(d * E), f instanceof THREE.LineSegments ? a.setMode(r.LINES) : a.setMode(r.LINE_STRIP), a.render(g, q)) : f instanceof THREE.Points && (a.setMode(r.POINTS), a.render(g, q));
	  };this.render = function (a, b, c, d) {
	    if (!1 === b instanceof THREE.Camera) console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");else {
	      var e = a.fog;sa = "";ta = -1;ra = null;wa = !0;!0 === a.autoUpdate && a.updateMatrixWorld();null === b.parent && b.updateMatrixWorld();b.matrixWorldInverse.getInverse(b.matrixWorld);
	      xa.multiplyMatrices(b.projectionMatrix, b.matrixWorldInverse);Ba.setFromMatrix(xa);da.length = 0;fa = ga = -1;ea.length = 0;ja.length = 0;q(a, b);ca.length = ga + 1;Z.length = fa + 1;!0 === aa.sortObjects && (ca.sort(m), Z.sort(p));$.render(a);ka.calls = 0;ka.vertices = 0;ka.faces = 0;ka.points = 0;this.setRenderTarget(c);(this.autoClear || d) && this.clear(this.autoClearColor, this.autoClearDepth, this.autoClearStencil);a.overrideMaterial ? (d = a.overrideMaterial, s(ca, b, da, e, d), s(Z, b, da, e, d)) : (I.setBlending(THREE.NoBlending), s(ca, b, da, e), s(Z, b, da, e));Ia.render(a, b);Ja.render(a, b, Da, Ea);c && (a = c.texture, b = y(c), a.generateMipmaps && b && a.minFilter !== THREE.NearestFilter && a.minFilter !== THREE.LinearFilter && (a = c instanceof THREE.WebGLRenderTargetCube ? r.TEXTURE_CUBE_MAP : r.TEXTURE_2D, c = W.get(c.texture).__webglTexture, I.bindTexture(a, c), r.generateMipmap(a), I.bindTexture(a, null)));I.setDepthTest(!0);I.setDepthWrite(!0);I.setColorWrite(!0);
	    }
	  };this.setFaceCulling = function (a, b) {
	    a === THREE.CullFaceNone ? I.disable(r.CULL_FACE) : (b === THREE.FrontFaceDirectionCW ? r.frontFace(r.CW) : r.frontFace(r.CCW), a === THREE.CullFaceBack ? r.cullFace(r.BACK) : a === THREE.CullFaceFront ? r.cullFace(r.FRONT) : r.cullFace(r.FRONT_AND_BACK), I.enable(r.CULL_FACE));
	  };this.setTexture = function (a, b) {
	    var c = W.get(a);if (0 < a.version && c.__version !== a.version) {
	      var d = a.image;if (void 0 === d) console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined", a);else if (!1 === d.complete) console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete", a);else {
	        void 0 === c.__webglInit && (c.__webglInit = !0, a.addEventListener("dispose", g), c.__webglTexture = r.createTexture(), la.textures++);I.activeTexture(r.TEXTURE0 + b);I.bindTexture(r.TEXTURE_2D, c.__webglTexture);r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL, a.flipY);r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL, a.premultiplyAlpha);r.pixelStorei(r.UNPACK_ALIGNMENT, a.unpackAlignment);a.image = B(a.image, ha.maxTextureSize);if ((a.wrapS !== THREE.ClampToEdgeWrapping || a.wrapT !== THREE.ClampToEdgeWrapping || a.minFilter !== THREE.NearestFilter && a.minFilter !== THREE.LinearFilter) && !1 === y(a.image)) {
	          d = a.image;if (d instanceof HTMLImageElement || d instanceof HTMLCanvasElement) {
	            var e = document.createElement("canvas");e.width = THREE.Math.nearestPowerOfTwo(d.width);e.height = THREE.Math.nearestPowerOfTwo(d.height);e.getContext("2d").drawImage(d, 0, 0, e.width, e.height);console.warn("THREE.WebGLRenderer: image is not power of two (" + d.width + "x" + d.height + "). Resized to " + e.width + "x" + e.height, d);d = e;
	          }a.image = d;
	        }var f = a.image,
	            d = y(f),
	            e = N(a.format),
	            h = N(a.type);
	        x(r.TEXTURE_2D, a, d);var k = a.mipmaps;if (a instanceof THREE.DataTexture) {
	          if (0 < k.length && d) {
	            for (var l = 0, n = k.length; l < n; l++) {
	              f = k[l], I.texImage2D(r.TEXTURE_2D, l, e, f.width, f.height, 0, e, h, f.data);
	            }a.generateMipmaps = !1;
	          } else I.texImage2D(r.TEXTURE_2D, 0, e, f.width, f.height, 0, e, h, f.data);
	        } else if (a instanceof THREE.CompressedTexture) for (l = 0, n = k.length; l < n; l++) {
	          f = k[l], a.format !== THREE.RGBAFormat && a.format !== THREE.RGBFormat ? -1 < I.getCompressedTextureFormats().indexOf(e) ? I.compressedTexImage2D(r.TEXTURE_2D, l, e, f.width, f.height, 0, f.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()") : I.texImage2D(r.TEXTURE_2D, l, e, f.width, f.height, 0, e, h, f.data);
	        } else if (0 < k.length && d) {
	          l = 0;for (n = k.length; l < n; l++) {
	            f = k[l], I.texImage2D(r.TEXTURE_2D, l, e, e, h, f);
	          }a.generateMipmaps = !1;
	        } else I.texImage2D(r.TEXTURE_2D, 0, e, e, h, a.image);a.generateMipmaps && d && r.generateMipmap(r.TEXTURE_2D);c.__version = a.version;if (a.onUpdate) a.onUpdate(a);
	      }
	    } else I.activeTexture(r.TEXTURE0 + b), I.bindTexture(r.TEXTURE_2D, c.__webglTexture);
	  };this.setRenderTarget = function (a) {
	    var b = a instanceof THREE.WebGLRenderTargetCube;if (a && void 0 === W.get(a).__webglFramebuffer) {
	      var c = W.get(a),
	          d = W.get(a.texture);void 0 === a.depthBuffer && (a.depthBuffer = !0);void 0 === a.stencilBuffer && (a.stencilBuffer = !0);a.addEventListener("dispose", f);d.__webglTexture = r.createTexture();la.textures++;var e = y(a),
	          g = N(a.texture.format),
	          h = N(a.texture.type);if (b) {
	        c.__webglFramebuffer = [];c.__webglRenderbuffer = [];I.bindTexture(r.TEXTURE_CUBE_MAP, d.__webglTexture);
	        x(r.TEXTURE_CUBE_MAP, a.texture, e);for (d = 0; 6 > d; d++) {
	          c.__webglFramebuffer[d] = r.createFramebuffer(), c.__webglRenderbuffer[d] = r.createRenderbuffer(), I.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + d, 0, g, a.width, a.height, 0, g, h, null), J(c.__webglFramebuffer[d], a, r.TEXTURE_CUBE_MAP_POSITIVE_X + d), F(c.__webglRenderbuffer[d], a);
	        }a.texture.generateMipmaps && e && r.generateMipmap(r.TEXTURE_CUBE_MAP);
	      } else c.__webglFramebuffer = r.createFramebuffer(), c.__webglRenderbuffer = a.shareDepthFrom ? a.shareDepthFrom.__webglRenderbuffer : r.createRenderbuffer(), I.bindTexture(r.TEXTURE_2D, d.__webglTexture), x(r.TEXTURE_2D, a.texture, e), I.texImage2D(r.TEXTURE_2D, 0, g, a.width, a.height, 0, g, h, null), J(c.__webglFramebuffer, a, r.TEXTURE_2D), a.shareDepthFrom ? a.depthBuffer && !a.stencilBuffer ? r.framebufferRenderbuffer(r.FRAMEBUFFER, r.DEPTH_ATTACHMENT, r.RENDERBUFFER, c.__webglRenderbuffer) : a.depthBuffer && a.stencilBuffer && r.framebufferRenderbuffer(r.FRAMEBUFFER, r.DEPTH_STENCIL_ATTACHMENT, r.RENDERBUFFER, c.__webglRenderbuffer) : F(c.__webglRenderbuffer, a), a.texture.generateMipmaps && e && r.generateMipmap(r.TEXTURE_2D);b ? I.bindTexture(r.TEXTURE_CUBE_MAP, null) : I.bindTexture(r.TEXTURE_2D, null);r.bindRenderbuffer(r.RENDERBUFFER, null);r.bindFramebuffer(r.FRAMEBUFFER, null);
	    }a ? (c = W.get(a), d = b ? c.__webglFramebuffer[a.activeCubeFace] : c.__webglFramebuffer, c = a.width, e = a.height, h = g = 0) : (d = null, c = pa, e = qa, g = na, h = oa);d !== za && (r.bindFramebuffer(r.FRAMEBUFFER, d), r.viewport(g, h, c, e), za = d);b && (d = W.get(a.texture), r.framebufferTexture2D(r.FRAMEBUFFER, r.COLOR_ATTACHMENT0, r.TEXTURE_CUBE_MAP_POSITIVE_X + a.activeCubeFace, d.__webglTexture, 0));Da = c;Ea = e;
	  };this.readRenderTargetPixels = function (a, b, c, d, e, f) {
	    if (!1 === a instanceof THREE.WebGLRenderTarget) console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");else {
	      var g = W.get(a).__webglFramebuffer;if (g) {
	        var h = !1;g !== za && (r.bindFramebuffer(r.FRAMEBUFFER, g), h = !0);try {
	          var k = a.texture;k.format !== THREE.RGBAFormat && N(k.format) !== r.getParameter(r.IMPLEMENTATION_COLOR_READ_FORMAT) ? console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.") : k.type === THREE.UnsignedByteType || N(k.type) === r.getParameter(r.IMPLEMENTATION_COLOR_READ_TYPE) || k.type === THREE.FloatType && S.get("WEBGL_color_buffer_float") || k.type === THREE.HalfFloatType && S.get("EXT_color_buffer_half_float") ? r.checkFramebufferStatus(r.FRAMEBUFFER) === r.FRAMEBUFFER_COMPLETE ? r.readPixels(b, c, d, e, N(k.format), N(k.type), f) : console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.") : console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
	        } finally {
	          h && r.bindFramebuffer(r.FRAMEBUFFER, za);
	        }
	      }
	    }
	  };this.supportsFloatTextures = function () {
	    console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' ).");return S.get("OES_texture_float");
	  };this.supportsHalfFloatTextures = function () {
	    console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' ).");return S.get("OES_texture_half_float");
	  };this.supportsStandardDerivatives = function () {
	    console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' ).");
	    return S.get("OES_standard_derivatives");
	  };this.supportsCompressedTextureS3TC = function () {
	    console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' ).");return S.get("WEBGL_compressed_texture_s3tc");
	  };this.supportsCompressedTexturePVRTC = function () {
	    console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' ).");return S.get("WEBGL_compressed_texture_pvrtc");
	  };this.supportsBlendMinMax = function () {
	    console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' ).");return S.get("EXT_blend_minmax");
	  };this.supportsVertexTextures = function () {
	    return ha.vertexTextures;
	  };this.supportsInstancedArrays = function () {
	    console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' ).");return S.get("ANGLE_instanced_arrays");
	  };this.initMaterial = function () {
	    console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.");
	  };
	  this.addPrePlugin = function () {
	    console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.");
	  };this.addPostPlugin = function () {
	    console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.");
	  };this.updateShadowMap = function () {
	    console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.");
	  };Object.defineProperties(this, { shadowMapEnabled: { get: function get() {
	        return $.enabled;
	      }, set: function set(a) {
	        console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.");$.enabled = a;
	      } },
	    shadowMapType: { get: function get() {
	        return $.type;
	      }, set: function set(a) {
	        console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.");$.type = a;
	      } }, shadowMapCullFace: { get: function get() {
	        return $.cullFace;
	      }, set: function set(a) {
	        console.warn("THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.");$.cullFace = a;
	      } }, shadowMapDebug: { get: function get() {
	        return $.debug;
	      }, set: function set(a) {
	        console.warn("THREE.WebGLRenderer: .shadowMapDebug is now .shadowMap.debug.");$.debug = a;
	      } } });
	};
	THREE.WebGLRenderTarget = function (a, b, c) {
	  this.uuid = THREE.Math.generateUUID();this.width = a;this.height = b;c = c || {};void 0 === c.minFilter && (c.minFilter = THREE.LinearFilter);this.texture = new THREE.Texture(void 0, void 0, c.wrapS, c.wrapT, c.magFilter, c.minFilter, c.format, c.type, c.anisotropy);this.depthBuffer = void 0 !== c.depthBuffer ? c.depthBuffer : !0;this.stencilBuffer = void 0 !== c.stencilBuffer ? c.stencilBuffer : !0;this.shareDepthFrom = void 0 !== c.shareDepthFrom ? c.shareDepthFrom : null;
	};
	THREE.WebGLRenderTarget.prototype = { constructor: THREE.WebGLRenderTarget, get wrapS() {
	    console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.");return this.texture.wrapS;
	  }, set wrapS(a) {
	    console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.");this.texture.wrapS = a;
	  }, get wrapT() {
	    console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.");return this.texture.wrapT;
	  }, set wrapT(a) {
	    console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.");this.texture.wrapT = a;
	  },
	  get magFilter() {
	    console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.");return this.texture.magFilter;
	  }, set magFilter(a) {
	    console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.");this.texture.magFilter = a;
	  }, get minFilter() {
	    console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.");return this.texture.minFilter;
	  }, set minFilter(a) {
	    console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.");this.texture.minFilter = a;
	  }, get anisotropy() {
	    console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.");
	    return this.texture.anisotropy;
	  }, set anisotropy(a) {
	    console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.");this.texture.anisotropy = a;
	  }, get offset() {
	    console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset.");return this.texture.offset;
	  }, set offset(a) {
	    console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset.");this.texture.offset = a;
	  }, get repeat() {
	    console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat.");return this.texture.repeat;
	  }, set repeat(a) {
	    console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat.");
	    this.texture.repeat = a;
	  }, get format() {
	    console.warn("THREE.WebGLRenderTarget: .format is now .texture.format.");return this.texture.format;
	  }, set format(a) {
	    console.warn("THREE.WebGLRenderTarget: .format is now .texture.format.");this.texture.format = a;
	  }, get type() {
	    console.warn("THREE.WebGLRenderTarget: .type is now .texture.type.");return this.texture.type;
	  }, set type(a) {
	    console.warn("THREE.WebGLRenderTarget: .type is now .texture.type.");this.texture.type = a;
	  }, get generateMipmaps() {
	    console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.");
	    return this.texture.generateMipmaps;
	  }, set generateMipmaps(a) {
	    console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.");this.texture.generateMipmaps = a;
	  }, setSize: function setSize(a, b) {
	    if (this.width !== a || this.height !== b) this.width = a, this.height = b, this.dispose();
	  }, clone: function clone() {
	    return new this.constructor().copy(this);
	  }, copy: function copy(a) {
	    this.width = a.width;this.height = a.height;this.texture = a.texture.clone();this.depthBuffer = a.depthBuffer;this.stencilBuffer = a.stencilBuffer;this.shareDepthFrom = a.shareDepthFrom;return this;
	  }, dispose: function dispose() {
	    this.dispatchEvent({ type: "dispose" });
	  } };THREE.EventDispatcher.prototype.apply(THREE.WebGLRenderTarget.prototype);THREE.WebGLRenderTargetCube = function (a, b, c) {
	  THREE.WebGLRenderTarget.call(this, a, b, c);this.activeCubeFace = 0;
	};THREE.WebGLRenderTargetCube.prototype = Object.create(THREE.WebGLRenderTarget.prototype);THREE.WebGLRenderTargetCube.prototype.constructor = THREE.WebGLRenderTargetCube;
	THREE.WebGLBufferRenderer = function (a, b, c) {
	  var d;this.setMode = function (a) {
	    d = a;
	  };this.render = function (b, g) {
	    a.drawArrays(d, b, g);c.calls++;c.vertices += g;d === a.TRIANGLES && (c.faces += g / 3);
	  };this.renderInstances = function (a) {
	    var c = b.get("ANGLE_instanced_arrays");if (null === c) console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");else {
	      var f = a.attributes.position;f instanceof THREE.InterleavedBufferAttribute ? c.drawArraysInstancedANGLE(d, 0, f.data.count, a.maxInstancedCount) : c.drawArraysInstancedANGLE(d, 0, f.count, a.maxInstancedCount);
	    }
	  };
	};
	THREE.WebGLIndexedBufferRenderer = function (a, b, c) {
	  var d, e, g;this.setMode = function (a) {
	    d = a;
	  };this.setIndex = function (c) {
	    c.array instanceof Uint32Array && b.get("OES_element_index_uint") ? (e = a.UNSIGNED_INT, g = 4) : (e = a.UNSIGNED_SHORT, g = 2);
	  };this.render = function (b, h) {
	    a.drawElements(d, h, e, b * g);c.calls++;c.vertices += h;d === a.TRIANGLES && (c.faces += h / 3);
	  };this.renderInstances = function (a) {
	    var c = b.get("ANGLE_instanced_arrays");null === c ? console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.") : c.drawElementsInstancedANGLE(d, a.index.array.length, e, 0, a.maxInstancedCount);
	  };
	};
	THREE.WebGLExtensions = function (a) {
	  var b = {};this.get = function (c) {
	    if (void 0 !== b[c]) return b[c];var d;switch (c) {case "EXT_texture_filter_anisotropic":
	        d = a.getExtension("EXT_texture_filter_anisotropic") || a.getExtension("MOZ_EXT_texture_filter_anisotropic") || a.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case "WEBGL_compressed_texture_s3tc":
	        d = a.getExtension("WEBGL_compressed_texture_s3tc") || a.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || a.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
	        break;case "WEBGL_compressed_texture_pvrtc":
	        d = a.getExtension("WEBGL_compressed_texture_pvrtc") || a.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:
	        d = a.getExtension(c);}null === d && console.warn("THREE.WebGLRenderer: " + c + " extension not supported.");return b[c] = d;
	  };
	};
	THREE.WebGLCapabilities = function (a, b, c) {
	  function d(b) {
	    if ("highp" === b) {
	      if (0 < a.getShaderPrecisionFormat(a.VERTEX_SHADER, a.HIGH_FLOAT).precision && 0 < a.getShaderPrecisionFormat(a.FRAGMENT_SHADER, a.HIGH_FLOAT).precision) return "highp";b = "mediump";
	    }return "mediump" === b && 0 < a.getShaderPrecisionFormat(a.VERTEX_SHADER, a.MEDIUM_FLOAT).precision && 0 < a.getShaderPrecisionFormat(a.FRAGMENT_SHADER, a.MEDIUM_FLOAT).precision ? "mediump" : "lowp";
	  }this.getMaxPrecision = d;this.precision = void 0 !== c.precision ? c.precision : "highp";
	  this.logarithmicDepthBuffer = void 0 !== c.logarithmicDepthBuffer ? c.logarithmicDepthBuffer : !1;this.maxTextures = a.getParameter(a.MAX_TEXTURE_IMAGE_UNITS);this.maxVertexTextures = a.getParameter(a.MAX_VERTEX_TEXTURE_IMAGE_UNITS);this.maxTextureSize = a.getParameter(a.MAX_TEXTURE_SIZE);this.maxCubemapSize = a.getParameter(a.MAX_CUBE_MAP_TEXTURE_SIZE);this.maxAttributes = a.getParameter(a.MAX_VERTEX_ATTRIBS);this.maxVertexUniforms = a.getParameter(a.MAX_VERTEX_UNIFORM_VECTORS);this.maxVaryings = a.getParameter(a.MAX_VARYING_VECTORS);
	  this.maxFragmentUniforms = a.getParameter(a.MAX_FRAGMENT_UNIFORM_VECTORS);this.vertexTextures = 0 < this.maxVertexTextures;this.floatFragmentTextures = !!b.get("OES_texture_float");this.floatVertexTextures = this.vertexTextures && this.floatFragmentTextures;c = d(this.precision);c !== this.precision && (console.warn("THREE.WebGLRenderer:", this.precision, "not supported, using", c, "instead."), this.precision = c);this.logarithmicDepthBuffer && (this.logarithmicDepthBuffer = !!b.get("EXT_frag_depth"));
	};
	THREE.WebGLGeometries = function (a, b, c) {
	  function d(a) {
	    a = a.target;var h = g[a.id].attributes,
	        l;for (l in h) {
	      e(h[l]);
	    }a.removeEventListener("dispose", d);delete g[a.id];l = b.get(a);l.wireframe && e(l.wireframe);c.memory.geometries--;
	  }function e(c) {
	    var d;d = c instanceof THREE.InterleavedBufferAttribute ? b.get(c.data).__webglBuffer : b.get(c).__webglBuffer;void 0 !== d && (a.deleteBuffer(d), c instanceof THREE.InterleavedBufferAttribute ? b.delete(c.data) : b.delete(c));
	  }var g = {};this.get = function (a) {
	    var b = a.geometry;if (void 0 !== g[b.id]) return g[b.id];b.addEventListener("dispose", d);var e;b instanceof THREE.BufferGeometry ? e = b : b instanceof THREE.Geometry && (void 0 === b._bufferGeometry && (b._bufferGeometry = new THREE.BufferGeometry().setFromObject(a)), e = b._bufferGeometry);g[b.id] = e;c.memory.geometries++;return e;
	  };
	};
	THREE.WebGLObjects = function (a, b, c) {
	  function d(c, d) {
	    var e = c instanceof THREE.InterleavedBufferAttribute ? c.data : c,
	        g = b.get(e);void 0 === g.__webglBuffer ? (g.__webglBuffer = a.createBuffer(), a.bindBuffer(d, g.__webglBuffer), a.bufferData(d, e.array, e.dynamic ? a.DYNAMIC_DRAW : a.STATIC_DRAW), g.version = e.version) : g.version !== e.version && (a.bindBuffer(d, g.__webglBuffer), !1 === e.dynamic || -1 === e.updateRange.count ? a.bufferSubData(d, 0, e.array) : 0 === e.updateRange.count ? console.error("THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.") : (a.bufferSubData(d, e.updateRange.offset * e.array.BYTES_PER_ELEMENT, e.array.subarray(e.updateRange.offset, e.updateRange.offset + e.updateRange.count)), e.updateRange.count = 0), g.version = e.version);
	  }function e(a, b, c) {
	    if (b > c) {
	      var d = b;b = c;c = d;
	    }d = a[b];return void 0 === d ? (a[b] = [c], !0) : -1 === d.indexOf(c) ? (d.push(c), !0) : !1;
	  }var g = new THREE.WebGLGeometries(a, b, c);this.getAttributeBuffer = function (a) {
	    return a instanceof THREE.InterleavedBufferAttribute ? b.get(a.data).__webglBuffer : b.get(a).__webglBuffer;
	  };this.getWireframeAttribute = function (c) {
	    var g = b.get(c);if (void 0 !== g.wireframe) return g.wireframe;var l = [],
	        k = c.index,
	        m = c.attributes;c = m.position;if (null !== k) for (var m = {}, k = k.array, p = 0, n = k.length; p < n; p += 3) {
	      var q = k[p + 0],
	          s = k[p + 1],
	          t = k[p + 2];e(m, q, s) && l.push(q, s);e(m, s, t) && l.push(s, t);e(m, t, q) && l.push(t, q);
	    } else for (k = m.position.array, p = 0, n = k.length / 3 - 1; p < n; p += 3) {
	      q = p + 0, s = p + 1, t = p + 2, l.push(q, s, s, t, t, q);
	    }l = new THREE.BufferAttribute(new (65535 < c.count ? Uint32Array : Uint16Array)(l), 1);d(l, a.ELEMENT_ARRAY_BUFFER);return g.wireframe = l;
	  };this.update = function (b) {
	    var c = g.get(b);b.geometry instanceof THREE.Geometry && c.updateFromObject(b);b = c.index;var e = c.attributes;null !== b && d(b, a.ELEMENT_ARRAY_BUFFER);for (var k in e) {
	      d(e[k], a.ARRAY_BUFFER);
	    }b = c.morphAttributes;for (k in b) {
	      for (var e = b[k], m = 0, p = e.length; m < p; m++) {
	        d(e[m], a.ARRAY_BUFFER);
	      }
	    }return c;
	  };
	};
	THREE.WebGLProgram = function () {
	  function a(a) {
	    var b = [],
	        c;for (c in a) {
	      var f = a[c];!1 !== f && b.push("#define " + c + " " + f);
	    }return b.join("\n");
	  }function b(a) {
	    return "" !== a;
	  }var c = 0;return function (d, e, g, f) {
	    var h = d.context,
	        l = g.defines,
	        k = g.__webglShader.vertexShader,
	        m = g.__webglShader.fragmentShader,
	        p = "SHADOWMAP_TYPE_BASIC";f.shadowMapType === THREE.PCFShadowMap ? p = "SHADOWMAP_TYPE_PCF" : f.shadowMapType === THREE.PCFSoftShadowMap && (p = "SHADOWMAP_TYPE_PCF_SOFT");var n = "ENVMAP_TYPE_CUBE",
	        q = "ENVMAP_MODE_REFLECTION",
	        s = "ENVMAP_BLENDING_MULTIPLY";
	    if (f.envMap) {
	      switch (g.envMap.mapping) {case THREE.CubeReflectionMapping:case THREE.CubeRefractionMapping:
	          n = "ENVMAP_TYPE_CUBE";break;case THREE.EquirectangularReflectionMapping:case THREE.EquirectangularRefractionMapping:
	          n = "ENVMAP_TYPE_EQUIREC";break;case THREE.SphericalReflectionMapping:
	          n = "ENVMAP_TYPE_SPHERE";}switch (g.envMap.mapping) {case THREE.CubeRefractionMapping:case THREE.EquirectangularRefractionMapping:
	          q = "ENVMAP_MODE_REFRACTION";}switch (g.combine) {case THREE.MultiplyOperation:
	          s = "ENVMAP_BLENDING_MULTIPLY";
	          break;case THREE.MixOperation:
	          s = "ENVMAP_BLENDING_MIX";break;case THREE.AddOperation:
	          s = "ENVMAP_BLENDING_ADD";}
	    }var t = 0 < d.gammaFactor ? d.gammaFactor : 1,
	        v = a(l),
	        u = h.createProgram();g instanceof THREE.RawShaderMaterial ? d = l = "" : (l = ["precision " + f.precision + " float;", "precision " + f.precision + " int;", "#define SHADER_NAME " + g.__webglShader.name, v, f.supportsVertexTextures ? "#define VERTEX_TEXTURES" : "", d.gammaInput ? "#define GAMMA_INPUT" : "", d.gammaOutput ? "#define GAMMA_OUTPUT" : "", "#define GAMMA_FACTOR " + t, "#define MAX_DIR_LIGHTS " + f.maxDirLights, "#define MAX_POINT_LIGHTS " + f.maxPointLights, "#define MAX_SPOT_LIGHTS " + f.maxSpotLights, "#define MAX_HEMI_LIGHTS " + f.maxHemiLights, "#define MAX_SHADOWS " + f.maxShadows, "#define MAX_BONES " + f.maxBones, f.map ? "#define USE_MAP" : "", f.envMap ? "#define USE_ENVMAP" : "", f.envMap ? "#define " + q : "", f.lightMap ? "#define USE_LIGHTMAP" : "", f.aoMap ? "#define USE_AOMAP" : "", f.emissiveMap ? "#define USE_EMISSIVEMAP" : "", f.bumpMap ? "#define USE_BUMPMAP" : "", f.normalMap ? "#define USE_NORMALMAP" : "", f.displacementMap && f.supportsVertexTextures ? "#define USE_DISPLACEMENTMAP" : "", f.specularMap ? "#define USE_SPECULARMAP" : "", f.alphaMap ? "#define USE_ALPHAMAP" : "", f.vertexColors ? "#define USE_COLOR" : "", f.flatShading ? "#define FLAT_SHADED" : "", f.skinning ? "#define USE_SKINNING" : "", f.useVertexTexture ? "#define BONE_TEXTURE" : "", f.morphTargets ? "#define USE_MORPHTARGETS" : "", f.morphNormals && !1 === f.flatShading ? "#define USE_MORPHNORMALS" : "", f.doubleSided ? "#define DOUBLE_SIDED" : "", f.flipSided ? "#define FLIP_SIDED" : "", f.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", f.shadowMapEnabled ? "#define " + p : "", f.shadowMapDebug ? "#define SHADOWMAP_DEBUG" : "", 0 < f.pointLightShadows ? "#define POINT_LIGHT_SHADOWS" : "", f.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "", f.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", f.logarithmicDepthBuffer && d.extensions.get("EXT_frag_depth") ? "#define USE_LOGDEPTHBUF_EXT" : "", "uniform mat4 modelMatrix;", "uniform mat4 modelViewMatrix;", "uniform mat4 projectionMatrix;", "uniform mat4 viewMatrix;", "uniform mat3 normalMatrix;", "uniform vec3 cameraPosition;", "attribute vec3 position;", "attribute vec3 normal;", "attribute vec2 uv;", "#ifdef USE_COLOR", "\tattribute vec3 color;", "#endif", "#ifdef USE_MORPHTARGETS", "\tattribute vec3 morphTarget0;", "\tattribute vec3 morphTarget1;", "\tattribute vec3 morphTarget2;", "\tattribute vec3 morphTarget3;", "\t#ifdef USE_MORPHNORMALS", "\t\tattribute vec3 morphNormal0;", "\t\tattribute vec3 morphNormal1;", "\t\tattribute vec3 morphNormal2;", "\t\tattribute vec3 morphNormal3;", "\t#else", "\t\tattribute vec3 morphTarget4;", "\t\tattribute vec3 morphTarget5;", "\t\tattribute vec3 morphTarget6;", "\t\tattribute vec3 morphTarget7;", "\t#endif", "#endif", "#ifdef USE_SKINNING", "\tattribute vec4 skinIndex;", "\tattribute vec4 skinWeight;", "#endif", "\n"].filter(b).join("\n"), d = [f.bumpMap || f.normalMap || f.flatShading || g.derivatives ? "#extension GL_OES_standard_derivatives : enable" : "", f.logarithmicDepthBuffer && d.extensions.get("EXT_frag_depth") ? "#extension GL_EXT_frag_depth : enable" : "", "precision " + f.precision + " float;", "precision " + f.precision + " int;", "#define SHADER_NAME " + g.__webglShader.name, v, "#define MAX_DIR_LIGHTS " + f.maxDirLights, "#define MAX_POINT_LIGHTS " + f.maxPointLights, "#define MAX_SPOT_LIGHTS " + f.maxSpotLights, "#define MAX_HEMI_LIGHTS " + f.maxHemiLights, "#define MAX_SHADOWS " + f.maxShadows, f.alphaTest ? "#define ALPHATEST " + f.alphaTest : "", d.gammaInput ? "#define GAMMA_INPUT" : "", d.gammaOutput ? "#define GAMMA_OUTPUT" : "", "#define GAMMA_FACTOR " + t, f.useFog && f.fog ? "#define USE_FOG" : "", f.useFog && f.fogExp ? "#define FOG_EXP2" : "", f.map ? "#define USE_MAP" : "", f.envMap ? "#define USE_ENVMAP" : "", f.envMap ? "#define " + n : "", f.envMap ? "#define " + q : "", f.envMap ? "#define " + s : "", f.lightMap ? "#define USE_LIGHTMAP" : "", f.aoMap ? "#define USE_AOMAP" : "", f.emissiveMap ? "#define USE_EMISSIVEMAP" : "", f.bumpMap ? "#define USE_BUMPMAP" : "", f.normalMap ? "#define USE_NORMALMAP" : "", f.specularMap ? "#define USE_SPECULARMAP" : "", f.alphaMap ? "#define USE_ALPHAMAP" : "", f.vertexColors ? "#define USE_COLOR" : "", f.flatShading ? "#define FLAT_SHADED" : "", f.metal ? "#define METAL" : "", f.doubleSided ? "#define DOUBLE_SIDED" : "", f.flipSided ? "#define FLIP_SIDED" : "", f.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", f.shadowMapEnabled ? "#define " + p : "", f.shadowMapDebug ? "#define SHADOWMAP_DEBUG" : "", 0 < f.pointLightShadows ? "#define POINT_LIGHT_SHADOWS" : "", f.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", f.logarithmicDepthBuffer && d.extensions.get("EXT_frag_depth") ? "#define USE_LOGDEPTHBUF_EXT" : "", "uniform mat4 viewMatrix;", "uniform vec3 cameraPosition;", "\n"].filter(b).join("\n"));m = d + m;
	    k = THREE.WebGLShader(h, h.VERTEX_SHADER, l + k);m = THREE.WebGLShader(h, h.FRAGMENT_SHADER, m);h.attachShader(u, k);h.attachShader(u, m);void 0 !== g.index0AttributeName ? h.bindAttribLocation(u, 0, g.index0AttributeName) : !0 === f.morphTargets && h.bindAttribLocation(u, 0, "position");h.linkProgram(u);f = h.getProgramInfoLog(u);p = h.getShaderInfoLog(k);n = h.getShaderInfoLog(m);s = q = !0;if (!1 === h.getProgramParameter(u, h.LINK_STATUS)) q = !1, console.error("THREE.WebGLProgram: shader error: ", h.getError(), "gl.VALIDATE_STATUS", h.getProgramParameter(u, h.VALIDATE_STATUS), "gl.getProgramInfoLog", f, p, n);else if ("" !== f) console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()", f);else if ("" === p || "" === n) s = !1;s && (this.diagnostics = { runnable: q, material: g, programLog: f, vertexShader: { log: p, prefix: l }, fragmentShader: { log: n, prefix: d } });h.deleteShader(k);h.deleteShader(m);var w;this.getUniforms = function () {
	      if (void 0 === w) {
	        for (var a = {}, b = h.getProgramParameter(u, h.ACTIVE_UNIFORMS), c = 0; c < b; c++) {
	          var d = h.getActiveUniform(u, c).name,
	              e = h.getUniformLocation(u, d),
	              f = d.lastIndexOf("[0]");
	          -1 !== f && f === d.length - 3 && (a[d.substr(0, f)] = e);a[d] = e;
	        }w = a;
	      }return w;
	    };var D;this.getAttributes = function () {
	      if (void 0 === D) {
	        for (var a = {}, b = h.getProgramParameter(u, h.ACTIVE_ATTRIBUTES), c = 0; c < b; c++) {
	          var d = h.getActiveAttrib(u, c).name;a[d] = h.getAttribLocation(u, d);
	        }D = a;
	      }return D;
	    };this.destroy = function () {
	      h.deleteProgram(u);this.program = void 0;
	    };Object.defineProperties(this, { uniforms: { get: function get() {
	          console.warn("THREE.WebGLProgram: .uniforms is now .getUniforms().");return this.getUniforms();
	        } }, attributes: { get: function get() {
	          console.warn("THREE.WebGLProgram: .attributes is now .getAttributes().");
	          return this.getAttributes();
	        } } });this.id = c++;this.code = e;this.usedTimes = 1;this.program = u;this.vertexShader = k;this.fragmentShader = m;return this;
	  };
	}();
	THREE.WebGLPrograms = function (a, b) {
	  var c = [],
	      d = { MeshDepthMaterial: "depth", MeshNormalMaterial: "normal", MeshBasicMaterial: "basic", MeshLambertMaterial: "lambert", MeshPhongMaterial: "phong", LineBasicMaterial: "basic", LineDashedMaterial: "dashed", PointsMaterial: "points" },
	      e = "precision supportsVertexTextures map envMap envMapMode lightMap aoMap emissiveMap bumpMap normalMap displacementMap specularMap alphaMap combine vertexColors fog useFog fogExp flatShading sizeAttenuation logarithmicDepthBuffer skinning maxBones useVertexTexture morphTargets morphNormals maxMorphTargets maxMorphNormals maxDirLights maxPointLights maxSpotLights maxHemiLights maxShadows shadowMapEnabled pointLightShadows shadowMapType shadowMapDebug alphaTest metal doubleSided flipSided".split(" ");this.getParameters = function (c, e, h, l) {
	    var k,
	        m,
	        p,
	        n,
	        q,
	        s = d[c.type];k = q = n = p = m = 0;for (var t = e.length; k < t; k++) {
	      var v = e[k];!1 !== v.visible && (v instanceof THREE.DirectionalLight && m++, v instanceof THREE.PointLight && p++, v instanceof THREE.SpotLight && n++, v instanceof THREE.HemisphereLight && q++);
	    }for (var v = k = t = 0, u = e.length; v < u; v++) {
	      var w = e[v];w.castShadow && ((w instanceof THREE.SpotLight || w instanceof THREE.DirectionalLight) && t++, w instanceof THREE.PointLight && (t++, k++));
	    }e = t;b.floatVertexTextures && l && l.skeleton && l.skeleton.useVertexTexture ? t = 1024 : (t = Math.floor((b.maxVertexUniforms - 20) / 4), void 0 !== l && l instanceof THREE.SkinnedMesh && (t = Math.min(l.skeleton.bones.length, t), t < l.skeleton.bones.length && console.warn("WebGLRenderer: too many bones - " + l.skeleton.bones.length + ", this GPU supports just " + t + " (try OpenGL instead of ANGLE)")));v = a.getPrecision();null !== c.precision && (v = b.getMaxPrecision(c.precision), v !== c.precision && console.warn("THREE.WebGLRenderer.initMaterial:", c.precision, "not supported, using", v, "instead."));return { shaderID: s,
	      precision: v, supportsVertexTextures: b.vertexTextures, map: !!c.map, envMap: !!c.envMap, envMapMode: c.envMap && c.envMap.mapping, lightMap: !!c.lightMap, aoMap: !!c.aoMap, emissiveMap: !!c.emissiveMap, bumpMap: !!c.bumpMap, normalMap: !!c.normalMap, displacementMap: !!c.displacementMap, specularMap: !!c.specularMap, alphaMap: !!c.alphaMap, combine: c.combine, vertexColors: c.vertexColors, fog: h, useFog: c.fog, fogExp: h instanceof THREE.FogExp2, flatShading: c.shading === THREE.FlatShading, sizeAttenuation: c.sizeAttenuation, logarithmicDepthBuffer: b.logarithmicDepthBuffer,
	      skinning: c.skinning, maxBones: t, useVertexTexture: b.floatVertexTextures && l && l.skeleton && l.skeleton.useVertexTexture, morphTargets: c.morphTargets, morphNormals: c.morphNormals, maxMorphTargets: a.maxMorphTargets, maxMorphNormals: a.maxMorphNormals, maxDirLights: m, maxPointLights: p, maxSpotLights: n, maxHemiLights: q, maxShadows: e, pointLightShadows: k, shadowMapEnabled: a.shadowMap.enabled && l.receiveShadow && 0 < e, shadowMapType: a.shadowMap.type, shadowMapDebug: a.shadowMap.debug, alphaTest: c.alphaTest, metal: c.metal, doubleSided: c.side === THREE.DoubleSide, flipSided: c.side === THREE.BackSide };
	  };this.getProgramCode = function (a, b) {
	    var c = [];b.shaderID ? c.push(b.shaderID) : (c.push(a.fragmentShader), c.push(a.vertexShader));if (void 0 !== a.defines) for (var d in a.defines) {
	      c.push(d), c.push(a.defines[d]);
	    }for (d = 0; d < e.length; d++) {
	      var k = e[d];c.push(k);c.push(b[k]);
	    }return c.join();
	  };this.acquireProgram = function (b, d, e) {
	    for (var l, k = 0, m = c.length; k < m; k++) {
	      var p = c[k];if (p.code === e) {
	        l = p;++l.usedTimes;break;
	      }
	    }void 0 === l && (l = new THREE.WebGLProgram(a, e, b, d), c.push(l));
	    return l;
	  };this.releaseProgram = function (a) {
	    if (0 === --a.usedTimes) {
	      var b = c.indexOf(a);c[b] = c[c.length - 1];c.pop();a.destroy();
	    }
	  };this.programs = c;
	};THREE.WebGLProperties = function () {
	  var a = {};this.get = function (b) {
	    b = b.uuid;var c = a[b];void 0 === c && (c = {}, a[b] = c);return c;
	  };this.delete = function (b) {
	    delete a[b.uuid];
	  };this.clear = function () {
	    a = {};
	  };
	};
	THREE.WebGLShader = function () {
	  function a(a) {
	    a = a.split("\n");for (var c = 0; c < a.length; c++) {
	      a[c] = c + 1 + ": " + a[c];
	    }return a.join("\n");
	  }return function (b, c, d) {
	    var e = b.createShader(c);b.shaderSource(e, d);b.compileShader(e);!1 === b.getShaderParameter(e, b.COMPILE_STATUS) && console.error("THREE.WebGLShader: Shader couldn't compile.");"" !== b.getShaderInfoLog(e) && console.warn("THREE.WebGLShader: gl.getShaderInfoLog()", c === b.VERTEX_SHADER ? "vertex" : "fragment", b.getShaderInfoLog(e), a(d));return e;
	  };
	}();
	THREE.WebGLShadowMap = function (a, b, c) {
	  function d(a, b, c, d) {
	    var e = a.geometry,
	        f = null,
	        f = n,
	        g = a.customDepthMaterial;c && (f = q, g = a.customDistanceMaterial);g ? f = g : (a = a instanceof THREE.SkinnedMesh && b.skinning, g = 0, void 0 !== e.morphTargets && 0 < e.morphTargets.length && b.morphTargets && (g |= 1), a && (g |= 2), f = f[g]);f.visible = b.visible;f.wireframe = b.wireframe;f.wireframeLinewidth = b.wireframeLinewidth;c && void 0 !== f.uniforms.lightPos && f.uniforms.lightPos.value.copy(d);return f;
	  }function e(a, b) {
	    if (!1 !== a.visible) {
	      (a instanceof THREE.Mesh || a instanceof THREE.Line || a instanceof THREE.Points) && a.castShadow && (!1 === a.frustumCulled || !0 === h.intersectsObject(a)) && !0 === a.material.visible && (a.modelViewMatrix.multiplyMatrices(b.matrixWorldInverse, a.matrixWorld), p.push(a));for (var c = a.children, d = 0, f = c.length; d < f; d++) {
	        e(c[d], b);
	      }
	    }
	  }var g = a.context,
	      f = a.state,
	      h = new THREE.Frustum(),
	      l = new THREE.Matrix4();new THREE.Vector3();new THREE.Vector3();for (var k = new THREE.Vector3(), m = new THREE.Vector3(), p = [], n = Array(4), q = Array(4), s = [new THREE.Vector3(1, 0, 0), new THREE.Vector3(-1, 0, 0), new THREE.Vector3(0, 0, 1), new THREE.Vector3(0, 0, -1), new THREE.Vector3(0, 1, 0), new THREE.Vector3(0, -1, 0)], t = [new THREE.Vector3(0, 1, 0), new THREE.Vector3(0, 1, 0), new THREE.Vector3(0, 1, 0), new THREE.Vector3(0, 1, 0), new THREE.Vector3(0, 0, 1), new THREE.Vector3(0, 0, -1)], v = [new THREE.Vector4(), new THREE.Vector4(), new THREE.Vector4(), new THREE.Vector4(), new THREE.Vector4(), new THREE.Vector4()], u = new THREE.Vector4(), w = THREE.ShaderLib.depthRGBA, D = THREE.UniformsUtils.clone(w.uniforms), x = THREE.ShaderLib.distanceRGBA, B = THREE.UniformsUtils.clone(x.uniforms), y = 0; 4 !== y; ++y) {
	    var z = 0 !== (y & 1),
	        A = 0 !== (y & 2),
	        J = new THREE.ShaderMaterial({ uniforms: D, vertexShader: w.vertexShader, fragmentShader: w.fragmentShader, morphTargets: z, skinning: A });J._shadowPass = !0;n[y] = J;z = new THREE.ShaderMaterial({ uniforms: B, vertexShader: x.vertexShader, fragmentShader: x.fragmentShader, morphTargets: z, skinning: A });z._shadowPass = !0;q[y] = z;
	  }var F = this;this.enabled = !1;this.autoUpdate = !0;this.needsUpdate = !1;this.type = THREE.PCFShadowMap;this.cullFace = THREE.CullFaceFront;this.render = function (n) {
	    var q, w;if (!1 !== F.enabled && (!1 !== F.autoUpdate || !1 !== F.needsUpdate)) {
	      g.clearColor(1, 1, 1, 1);f.disable(g.BLEND);f.enable(g.CULL_FACE);g.frontFace(g.CCW);g.cullFace(F.cullFace === THREE.CullFaceFront ? g.FRONT : g.BACK);f.setDepthTest(!0);a.getViewport(u);for (var x = 0, D = b.length; x < D; x++) {
	        var y = b[x];if (!0 === y.castShadow) {
	          var z = y.shadow,
	              B = z.camera,
	              A = z.mapSize;if (y instanceof THREE.PointLight) {
	            q = 6;w = !0;var H = A.x / 4,
	                J = A.y / 2;v[0].set(2 * H, J, H, J);v[1].set(0, J, H, J);v[2].set(3 * H, J, H, J);v[3].set(H, J, H, J);v[4].set(3 * H, 0, H, J);
	            v[5].set(H, 0, H, J);
	          } else q = 1, w = !1;null === z.map && (H = THREE.LinearFilter, F.type === THREE.PCFSoftShadowMap && (H = THREE.NearestFilter), z.map = new THREE.WebGLRenderTarget(A.x, A.y, { minFilter: H, magFilter: H, format: THREE.RGBAFormat }), z.matrix = new THREE.Matrix4(), y instanceof THREE.SpotLight && (B.aspect = A.x / A.y), B.updateProjectionMatrix());A = z.map;z = z.matrix;m.setFromMatrixPosition(y.matrixWorld);B.position.copy(m);a.setRenderTarget(A);a.clear();for (A = 0; A < q; A++) {
	            for (w ? (k.copy(B.position), k.add(s[A]), B.up.copy(t[A]), B.lookAt(k), H = v[A], a.setViewport(H.x, H.y, H.z, H.w)) : (k.setFromMatrixPosition(y.target.matrixWorld), B.lookAt(k)), B.updateMatrixWorld(), B.matrixWorldInverse.getInverse(B.matrixWorld), z.set(.5, 0, 0, .5, 0, .5, 0, .5, 0, 0, .5, .5, 0, 0, 0, 1), z.multiply(B.projectionMatrix), z.multiply(B.matrixWorldInverse), l.multiplyMatrices(B.projectionMatrix, B.matrixWorldInverse), h.setFromMatrix(l), p.length = 0, e(n, B), H = 0, J = p.length; H < J; H++) {
	              var G = p[H],
	                  ia = c.update(G),
	                  U = G.material;if (U instanceof THREE.MeshFaceMaterial) for (var X = ia.groups, U = U.materials, da = 0, ca = X.length; da < ca; da++) {
	                var ga = X[da],
	                    Z = U[ga.materialIndex];!0 === Z.visible && (Z = d(G, Z, w, m), a.renderBufferDirect(B, b, null, ia, Z, G, ga));
	              } else Z = d(G, U, w, m), a.renderBufferDirect(B, b, null, ia, Z, G, null);
	            }
	          }a.resetGLState();
	        }
	      }a.setViewport(u.x, u.y, u.z, u.w);n = a.getClearColor();q = a.getClearAlpha();a.setClearColor(n, q);f.enable(g.BLEND);F.cullFace === THREE.CullFaceFront && g.cullFace(g.BACK);a.resetGLState();F.needsUpdate = !1;
	    }
	  };
	};
	THREE.WebGLState = function (a, b, c) {
	  var d = this,
	      e = new Uint8Array(16),
	      g = new Uint8Array(16),
	      f = new Uint8Array(16),
	      h = {},
	      l = null,
	      k = null,
	      m = null,
	      p = null,
	      n = null,
	      q = null,
	      s = null,
	      t = null,
	      v = null,
	      u = null,
	      w = null,
	      D = null,
	      x = null,
	      B = null,
	      y = null,
	      z = a.getParameter(a.MAX_TEXTURE_IMAGE_UNITS),
	      A = void 0,
	      J = {};this.init = function () {
	    a.clearColor(0, 0, 0, 1);a.clearDepth(1);a.clearStencil(0);this.enable(a.DEPTH_TEST);a.depthFunc(a.LEQUAL);a.frontFace(a.CCW);a.cullFace(a.BACK);this.enable(a.CULL_FACE);this.enable(a.BLEND);a.blendEquation(a.FUNC_ADD);
	    a.blendFunc(a.SRC_ALPHA, a.ONE_MINUS_SRC_ALPHA);
	  };this.initAttributes = function () {
	    for (var a = 0, b = e.length; a < b; a++) {
	      e[a] = 0;
	    }
	  };this.enableAttribute = function (c) {
	    e[c] = 1;0 === g[c] && (a.enableVertexAttribArray(c), g[c] = 1);0 !== f[c] && (b.get("ANGLE_instanced_arrays").vertexAttribDivisorANGLE(c, 0), f[c] = 0);
	  };this.enableAttributeAndDivisor = function (b, c, d) {
	    e[b] = 1;0 === g[b] && (a.enableVertexAttribArray(b), g[b] = 1);f[b] !== c && (d.vertexAttribDivisorANGLE(b, c), f[b] = c);
	  };this.disableUnusedAttributes = function () {
	    for (var b = 0, c = g.length; b < c; b++) {
	      g[b] !== e[b] && (a.disableVertexAttribArray(b), g[b] = 0);
	    }
	  };this.enable = function (b) {
	    !0 !== h[b] && (a.enable(b), h[b] = !0);
	  };this.disable = function (b) {
	    !1 !== h[b] && (a.disable(b), h[b] = !1);
	  };this.getCompressedTextureFormats = function () {
	    if (null === l && (l = [], b.get("WEBGL_compressed_texture_pvrtc") || b.get("WEBGL_compressed_texture_s3tc"))) for (var c = a.getParameter(a.COMPRESSED_TEXTURE_FORMATS), d = 0; d < c.length; d++) {
	      l.push(c[d]);
	    }return l;
	  };this.setBlending = function (b, d, e, f, g, h, l) {
	    b !== k && (b === THREE.NoBlending ? this.disable(a.BLEND) : b === THREE.AdditiveBlending ? (this.enable(a.BLEND), a.blendEquation(a.FUNC_ADD), a.blendFunc(a.SRC_ALPHA, a.ONE)) : b === THREE.SubtractiveBlending ? (this.enable(a.BLEND), a.blendEquation(a.FUNC_ADD), a.blendFunc(a.ZERO, a.ONE_MINUS_SRC_COLOR)) : b === THREE.MultiplyBlending ? (this.enable(a.BLEND), a.blendEquation(a.FUNC_ADD), a.blendFunc(a.ZERO, a.SRC_COLOR)) : b === THREE.CustomBlending ? this.enable(a.BLEND) : (this.enable(a.BLEND), a.blendEquationSeparate(a.FUNC_ADD, a.FUNC_ADD), a.blendFuncSeparate(a.SRC_ALPHA, a.ONE_MINUS_SRC_ALPHA, a.ONE, a.ONE_MINUS_SRC_ALPHA)), k = b);if (b === THREE.CustomBlending) {
	      g = g || d;h = h || e;l = l || f;if (d !== m || g !== q) a.blendEquationSeparate(c(d), c(g)), m = d, q = g;if (e !== p || f !== n || h !== s || l !== t) a.blendFuncSeparate(c(e), c(f), c(h), c(l)), p = e, n = f, s = h, t = l;
	    } else t = s = q = n = p = m = null;
	  };this.setDepthFunc = function (b) {
	    if (v !== b) {
	      if (b) switch (b) {case THREE.NeverDepth:
	          a.depthFunc(a.NEVER);break;case THREE.AlwaysDepth:
	          a.depthFunc(a.ALWAYS);break;case THREE.LessDepth:
	          a.depthFunc(a.LESS);break;case THREE.LessEqualDepth:
	          a.depthFunc(a.LEQUAL);
	          break;case THREE.EqualDepth:
	          a.depthFunc(a.EQUAL);break;case THREE.GreaterEqualDepth:
	          a.depthFunc(a.GEQUAL);break;case THREE.GreaterDepth:
	          a.depthFunc(a.GREATER);break;case THREE.NotEqualDepth:
	          a.depthFunc(a.NOTEQUAL);break;default:
	          a.depthFunc(a.LEQUAL);} else a.depthFunc(a.LEQUAL);v = b;
	    }
	  };this.setDepthTest = function (b) {
	    b ? this.enable(a.DEPTH_TEST) : this.disable(a.DEPTH_TEST);
	  };this.setDepthWrite = function (b) {
	    u !== b && (a.depthMask(b), u = b);
	  };this.setColorWrite = function (b) {
	    w !== b && (a.colorMask(b, b, b, b), w = b);
	  };this.setFlipSided = function (b) {
	    D !== b && (b ? a.frontFace(a.CW) : a.frontFace(a.CCW), D = b);
	  };this.setLineWidth = function (b) {
	    b !== x && (a.lineWidth(b), x = b);
	  };this.setPolygonOffset = function (b, c, d) {
	    b ? this.enable(a.POLYGON_OFFSET_FILL) : this.disable(a.POLYGON_OFFSET_FILL);!b || B === c && y === d || (a.polygonOffset(c, d), B = c, y = d);
	  };this.setScissorTest = function (b) {
	    b ? this.enable(a.SCISSOR_TEST) : this.disable(a.SCISSOR_TEST);
	  };this.activeTexture = function (b) {
	    void 0 === b && (b = a.TEXTURE0 + z - 1);A !== b && (a.activeTexture(b), A = b);
	  };this.bindTexture = function (b, c) {
	    void 0 === A && d.activeTexture();var e = J[A];void 0 === e && (e = { type: void 0, texture: void 0 }, J[A] = e);if (e.type !== b || e.texture !== c) a.bindTexture(b, c), e.type = b, e.texture = c;
	  };this.compressedTexImage2D = function () {
	    try {
	      a.compressedTexImage2D.apply(a, arguments);
	    } catch (b) {
	      console.error(b);
	    }
	  };this.texImage2D = function () {
	    try {
	      a.texImage2D.apply(a, arguments);
	    } catch (b) {
	      console.error(b);
	    }
	  };this.reset = function () {
	    for (var b = 0; b < g.length; b++) {
	      1 === g[b] && (a.disableVertexAttribArray(b), g[b] = 0);
	    }h = {};D = w = u = k = l = null;
	  };
	};
	THREE.LensFlarePlugin = function (a, b) {
	  var c,
	      d,
	      e,
	      g,
	      f,
	      h,
	      l,
	      k,
	      m,
	      p,
	      n = a.context,
	      q = a.state,
	      s,
	      t,
	      v,
	      u,
	      w,
	      D;this.render = function (x, B, y, z) {
	    if (0 !== b.length) {
	      x = new THREE.Vector3();var A = z / y,
	          J = .5 * y,
	          F = .5 * z,
	          C = 16 / z,
	          N = new THREE.Vector2(C * A, C),
	          L = new THREE.Vector3(1, 1, 0),
	          Q = new THREE.Vector2(1, 1);if (void 0 === v) {
	        var C = new Float32Array([-1, -1, 0, 0, 1, -1, 1, 0, 1, 1, 1, 1, -1, 1, 0, 1]),
	            M = new Uint16Array([0, 1, 2, 0, 2, 3]);s = n.createBuffer();t = n.createBuffer();n.bindBuffer(n.ARRAY_BUFFER, s);n.bufferData(n.ARRAY_BUFFER, C, n.STATIC_DRAW);n.bindBuffer(n.ELEMENT_ARRAY_BUFFER, t);n.bufferData(n.ELEMENT_ARRAY_BUFFER, M, n.STATIC_DRAW);w = n.createTexture();D = n.createTexture();q.bindTexture(n.TEXTURE_2D, w);n.texImage2D(n.TEXTURE_2D, 0, n.RGB, 16, 16, 0, n.RGB, n.UNSIGNED_BYTE, null);n.texParameteri(n.TEXTURE_2D, n.TEXTURE_WRAP_S, n.CLAMP_TO_EDGE);n.texParameteri(n.TEXTURE_2D, n.TEXTURE_WRAP_T, n.CLAMP_TO_EDGE);n.texParameteri(n.TEXTURE_2D, n.TEXTURE_MAG_FILTER, n.NEAREST);n.texParameteri(n.TEXTURE_2D, n.TEXTURE_MIN_FILTER, n.NEAREST);q.bindTexture(n.TEXTURE_2D, D);n.texImage2D(n.TEXTURE_2D, 0, n.RGBA, 16, 16, 0, n.RGBA, n.UNSIGNED_BYTE, null);n.texParameteri(n.TEXTURE_2D, n.TEXTURE_WRAP_S, n.CLAMP_TO_EDGE);n.texParameteri(n.TEXTURE_2D, n.TEXTURE_WRAP_T, n.CLAMP_TO_EDGE);n.texParameteri(n.TEXTURE_2D, n.TEXTURE_MAG_FILTER, n.NEAREST);n.texParameteri(n.TEXTURE_2D, n.TEXTURE_MIN_FILTER, n.NEAREST);var C = (u = 0 < n.getParameter(n.MAX_VERTEX_TEXTURE_IMAGE_UNITS)) ? { vertexShader: "uniform lowp int renderType;\nuniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nuniform sampler2D occlusionMap;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nvUV = uv;\nvec2 pos = position;\nif ( renderType == 2 ) {\nvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\nvVisibility =        visibility.r / 9.0;\nvVisibility *= 1.0 - visibility.g / 9.0;\nvVisibility *=       visibility.b / 9.0;\nvVisibility *= 1.0 - visibility.a / 9.0;\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}",
	          fragmentShader: "uniform lowp int renderType;\nuniform sampler2D map;\nuniform float opacity;\nuniform vec3 color;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nif ( renderType == 0 ) {\ngl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\n} else if ( renderType == 1 ) {\ngl_FragColor = texture2D( map, vUV );\n} else {\nvec4 texture = texture2D( map, vUV );\ntexture.a *= opacity * vVisibility;\ngl_FragColor = texture;\ngl_FragColor.rgb *= color;\n}\n}" } : { vertexShader: "uniform lowp int renderType;\nuniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\nvUV = uv;\nvec2 pos = position;\nif ( renderType == 2 ) {\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}",
	          fragmentShader: "precision mediump float;\nuniform lowp int renderType;\nuniform sampler2D map;\nuniform sampler2D occlusionMap;\nuniform float opacity;\nuniform vec3 color;\nvarying vec2 vUV;\nvoid main() {\nif ( renderType == 0 ) {\ngl_FragColor = vec4( texture2D( map, vUV ).rgb, 0.0 );\n} else if ( renderType == 1 ) {\ngl_FragColor = texture2D( map, vUV );\n} else {\nfloat visibility = texture2D( occlusionMap, vec2( 0.5, 0.1 ) ).a;\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) ).a;\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) ).a;\nvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) ).a;\nvisibility = ( 1.0 - visibility / 4.0 );\nvec4 texture = texture2D( map, vUV );\ntexture.a *= opacity * visibility;\ngl_FragColor = texture;\ngl_FragColor.rgb *= color;\n}\n}" },
	            M = n.createProgram(),
	            K = n.createShader(n.FRAGMENT_SHADER),
	            E = n.createShader(n.VERTEX_SHADER),
	            O = "precision " + a.getPrecision() + " float;\n";n.shaderSource(K, O + C.fragmentShader);n.shaderSource(E, O + C.vertexShader);n.compileShader(K);n.compileShader(E);n.attachShader(M, K);n.attachShader(M, E);n.linkProgram(M);v = M;m = n.getAttribLocation(v, "position");p = n.getAttribLocation(v, "uv");c = n.getUniformLocation(v, "renderType");d = n.getUniformLocation(v, "map");e = n.getUniformLocation(v, "occlusionMap");g = n.getUniformLocation(v, "opacity");f = n.getUniformLocation(v, "color");h = n.getUniformLocation(v, "scale");l = n.getUniformLocation(v, "rotation");k = n.getUniformLocation(v, "screenPosition");
	      }n.useProgram(v);q.initAttributes();q.enableAttribute(m);q.enableAttribute(p);q.disableUnusedAttributes();n.uniform1i(e, 0);n.uniform1i(d, 1);n.bindBuffer(n.ARRAY_BUFFER, s);n.vertexAttribPointer(m, 2, n.FLOAT, !1, 16, 0);n.vertexAttribPointer(p, 2, n.FLOAT, !1, 16, 8);n.bindBuffer(n.ELEMENT_ARRAY_BUFFER, t);q.disable(n.CULL_FACE);n.depthMask(!1);M = 0;for (K = b.length; M < K; M++) {
	        if (C = 16 / z, N.set(C * A, C), E = b[M], x.set(E.matrixWorld.elements[12], E.matrixWorld.elements[13], E.matrixWorld.elements[14]), x.applyMatrix4(B.matrixWorldInverse), x.applyProjection(B.projectionMatrix), L.copy(x), Q.x = L.x * J + J, Q.y = L.y * F + F, u || 0 < Q.x && Q.x < y && 0 < Q.y && Q.y < z) {
	          q.activeTexture(n.TEXTURE0);q.bindTexture(n.TEXTURE_2D, null);q.activeTexture(n.TEXTURE1);q.bindTexture(n.TEXTURE_2D, w);n.copyTexImage2D(n.TEXTURE_2D, 0, n.RGB, Q.x - 8, Q.y - 8, 16, 16, 0);n.uniform1i(c, 0);n.uniform2f(h, N.x, N.y);n.uniform3f(k, L.x, L.y, L.z);q.disable(n.BLEND);q.enable(n.DEPTH_TEST);n.drawElements(n.TRIANGLES, 6, n.UNSIGNED_SHORT, 0);q.activeTexture(n.TEXTURE0);q.bindTexture(n.TEXTURE_2D, D);n.copyTexImage2D(n.TEXTURE_2D, 0, n.RGBA, Q.x - 8, Q.y - 8, 16, 16, 0);n.uniform1i(c, 1);q.disable(n.DEPTH_TEST);q.activeTexture(n.TEXTURE1);q.bindTexture(n.TEXTURE_2D, w);n.drawElements(n.TRIANGLES, 6, n.UNSIGNED_SHORT, 0);E.positionScreen.copy(L);E.customUpdateCallback ? E.customUpdateCallback(E) : E.updateLensFlares();n.uniform1i(c, 2);q.enable(n.BLEND);for (var O = 0, T = E.lensFlares.length; O < T; O++) {
	            var H = E.lensFlares[O];.001 < H.opacity && .001 < H.scale && (L.x = H.x, L.y = H.y, L.z = H.z, C = H.size * H.scale / z, N.x = C * A, N.y = C, n.uniform3f(k, L.x, L.y, L.z), n.uniform2f(h, N.x, N.y), n.uniform1f(l, H.rotation), n.uniform1f(g, H.opacity), n.uniform3f(f, H.color.r, H.color.g, H.color.b), q.setBlending(H.blending, H.blendEquation, H.blendSrc, H.blendDst), a.setTexture(H.texture, 1), n.drawElements(n.TRIANGLES, 6, n.UNSIGNED_SHORT, 0));
	          }
	        }
	      }q.enable(n.CULL_FACE);q.enable(n.DEPTH_TEST);n.depthMask(!0);a.resetGLState();
	    }
	  };
	};
	THREE.SpritePlugin = function (a, b) {
	  var c, d, e, g, f, h, l, k, m, p, n, q, s, t, v, u, w;function D(a, b) {
	    return a.z !== b.z ? b.z - a.z : b.id - a.id;
	  }var x = a.context,
	      B = a.state,
	      y,
	      z,
	      A,
	      J,
	      F = new THREE.Vector3(),
	      C = new THREE.Quaternion(),
	      N = new THREE.Vector3();this.render = function (L, Q) {
	    if (0 !== b.length) {
	      if (void 0 === A) {
	        var M = new Float32Array([-.5, -.5, 0, 0, .5, -.5, 1, 0, .5, .5, 1, 1, -.5, .5, 0, 1]),
	            K = new Uint16Array([0, 1, 2, 0, 2, 3]);y = x.createBuffer();z = x.createBuffer();x.bindBuffer(x.ARRAY_BUFFER, y);x.bufferData(x.ARRAY_BUFFER, M, x.STATIC_DRAW);x.bindBuffer(x.ELEMENT_ARRAY_BUFFER, z);x.bufferData(x.ELEMENT_ARRAY_BUFFER, K, x.STATIC_DRAW);var M = x.createProgram(),
	            K = x.createShader(x.VERTEX_SHADER),
	            E = x.createShader(x.FRAGMENT_SHADER);x.shaderSource(K, ["precision " + a.getPrecision() + " float;", "uniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float rotation;\nuniform vec2 scale;\nuniform vec2 uvOffset;\nuniform vec2 uvScale;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\nvUV = uvOffset + uv * uvScale;\nvec2 alignedPosition = position * scale;\nvec2 rotatedPosition;\nrotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\nrotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\nvec4 finalPosition;\nfinalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\nfinalPosition.xy += rotatedPosition;\nfinalPosition = projectionMatrix * finalPosition;\ngl_Position = finalPosition;\n}"].join("\n"));
	        x.shaderSource(E, ["precision " + a.getPrecision() + " float;", "uniform vec3 color;\nuniform sampler2D map;\nuniform float opacity;\nuniform int fogType;\nuniform vec3 fogColor;\nuniform float fogDensity;\nuniform float fogNear;\nuniform float fogFar;\nuniform float alphaTest;\nvarying vec2 vUV;\nvoid main() {\nvec4 texture = texture2D( map, vUV );\nif ( texture.a < alphaTest ) discard;\ngl_FragColor = vec4( color * texture.xyz, texture.a * opacity );\nif ( fogType > 0 ) {\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\nfloat fogFactor = 0.0;\nif ( fogType == 1 ) {\nfogFactor = smoothstep( fogNear, fogFar, depth );\n} else {\nconst float LOG2 = 1.442695;\nfogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\nfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\n}\ngl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\n}\n}"].join("\n"));
	        x.compileShader(K);x.compileShader(E);x.attachShader(M, K);x.attachShader(M, E);x.linkProgram(M);A = M;u = x.getAttribLocation(A, "position");w = x.getAttribLocation(A, "uv");c = x.getUniformLocation(A, "uvOffset");d = x.getUniformLocation(A, "uvScale");e = x.getUniformLocation(A, "rotation");g = x.getUniformLocation(A, "scale");f = x.getUniformLocation(A, "color");h = x.getUniformLocation(A, "map");l = x.getUniformLocation(A, "opacity");k = x.getUniformLocation(A, "modelViewMatrix");m = x.getUniformLocation(A, "projectionMatrix");p = x.getUniformLocation(A, "fogType");n = x.getUniformLocation(A, "fogDensity");q = x.getUniformLocation(A, "fogNear");s = x.getUniformLocation(A, "fogFar");t = x.getUniformLocation(A, "fogColor");v = x.getUniformLocation(A, "alphaTest");M = document.createElement("canvas");M.width = 8;M.height = 8;K = M.getContext("2d");K.fillStyle = "white";K.fillRect(0, 0, 8, 8);J = new THREE.Texture(M);J.needsUpdate = !0;
	      }x.useProgram(A);B.initAttributes();B.enableAttribute(u);B.enableAttribute(w);B.disableUnusedAttributes();B.disable(x.CULL_FACE);
	      B.enable(x.BLEND);x.bindBuffer(x.ARRAY_BUFFER, y);x.vertexAttribPointer(u, 2, x.FLOAT, !1, 16, 0);x.vertexAttribPointer(w, 2, x.FLOAT, !1, 16, 8);x.bindBuffer(x.ELEMENT_ARRAY_BUFFER, z);x.uniformMatrix4fv(m, !1, Q.projectionMatrix.elements);B.activeTexture(x.TEXTURE0);x.uniform1i(h, 0);K = M = 0;(E = L.fog) ? (x.uniform3f(t, E.color.r, E.color.g, E.color.b), E instanceof THREE.Fog ? (x.uniform1f(q, E.near), x.uniform1f(s, E.far), x.uniform1i(p, 1), K = M = 1) : E instanceof THREE.FogExp2 && (x.uniform1f(n, E.density), x.uniform1i(p, 2), K = M = 2)) : (x.uniform1i(p, 0), K = M = 0);for (var E = 0, O = b.length; E < O; E++) {
	        var T = b[E];T.modelViewMatrix.multiplyMatrices(Q.matrixWorldInverse, T.matrixWorld);T.z = -T.modelViewMatrix.elements[14];
	      }b.sort(D);for (var H = [], E = 0, O = b.length; E < O; E++) {
	        var T = b[E],
	            R = T.material;x.uniform1f(v, R.alphaTest);x.uniformMatrix4fv(k, !1, T.modelViewMatrix.elements);T.matrixWorld.decompose(F, C, N);H[0] = N.x;H[1] = N.y;T = 0;L.fog && R.fog && (T = K);M !== T && (x.uniform1i(p, T), M = T);null !== R.map ? (x.uniform2f(c, R.map.offset.x, R.map.offset.y), x.uniform2f(d, R.map.repeat.x, R.map.repeat.y)) : (x.uniform2f(c, 0, 0), x.uniform2f(d, 1, 1));x.uniform1f(l, R.opacity);x.uniform3f(f, R.color.r, R.color.g, R.color.b);x.uniform1f(e, R.rotation);x.uniform2fv(g, H);B.setBlending(R.blending, R.blendEquation, R.blendSrc, R.blendDst);B.setDepthTest(R.depthTest);B.setDepthWrite(R.depthWrite);R.map && R.map.image && R.map.image.width ? a.setTexture(R.map, 0) : a.setTexture(J, 0);x.drawElements(x.TRIANGLES, 6, x.UNSIGNED_SHORT, 0);
	      }B.enable(x.CULL_FACE);a.resetGLState();
	    }
	  };
	};
	THREE.CurveUtils = { tangentQuadraticBezier: function tangentQuadraticBezier(a, b, c, d) {
	    return 2 * (1 - a) * (c - b) + 2 * a * (d - c);
	  }, tangentCubicBezier: function tangentCubicBezier(a, b, c, d, e) {
	    return -3 * b * (1 - a) * (1 - a) + 3 * c * (1 - a) * (1 - a) - 6 * a * c * (1 - a) + 6 * a * d * (1 - a) - 3 * a * a * d + 3 * a * a * e;
	  }, tangentSpline: function tangentSpline(a, b, c, d, e) {
	    return 6 * a * a - 6 * a + (3 * a * a - 4 * a + 1) + (-6 * a * a + 6 * a) + (3 * a * a - 2 * a);
	  }, interpolate: function interpolate(a, b, c, d, e) {
	    a = .5 * (c - a);d = .5 * (d - b);var g = e * e;return (2 * b - 2 * c + a + d) * e * g + (-3 * b + 3 * c - 2 * a - d) * g + a * e + b;
	  } };
	THREE.GeometryUtils = { merge: function merge(a, b, c) {
	    console.warn("THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.");var d;b instanceof THREE.Mesh && (b.matrixAutoUpdate && b.updateMatrix(), d = b.matrix, b = b.geometry);a.merge(b, d, c);
	  }, center: function center(a) {
	    console.warn("THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.");return a.center();
	  } };
	THREE.ImageUtils = { crossOrigin: void 0, loadTexture: function loadTexture(a, b, c, d) {
	    console.warn("THREE.ImageUtils.loadTexture is being deprecated. Use THREE.TextureLoader() instead.");var e = new THREE.TextureLoader();e.setCrossOrigin(this.crossOrigin);a = e.load(a, c, void 0, d);b && (a.mapping = b);return a;
	  }, loadTextureCube: function loadTextureCube(a, b, c, d) {
	    console.warn("THREE.ImageUtils.loadTextureCube is being deprecated. Use THREE.CubeTextureLoader() instead.");var e = new THREE.CubeTextureLoader();e.setCrossOrigin(this.crossOrigin);a = e.load(a, c, void 0, d);b && (a.mapping = b);return a;
	  }, loadCompressedTexture: function loadCompressedTexture() {
	    console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.");
	  }, loadCompressedTextureCube: function loadCompressedTextureCube() {
	    console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.");
	  } };
	THREE.SceneUtils = { createMultiMaterialObject: function createMultiMaterialObject(a, b) {
	    for (var c = new THREE.Group(), d = 0, e = b.length; d < e; d++) {
	      c.add(new THREE.Mesh(a, b[d]));
	    }return c;
	  }, detach: function detach(a, b, c) {
	    a.applyMatrix(b.matrixWorld);b.remove(a);c.add(a);
	  }, attach: function attach(a, b, c) {
	    var d = new THREE.Matrix4();d.getInverse(c.matrixWorld);a.applyMatrix(d);b.remove(a);c.add(a);
	  } };
	THREE.ShapeUtils = { area: function area(a) {
	    for (var b = a.length, c = 0, d = b - 1, e = 0; e < b; d = e++) {
	      c += a[d].x * a[e].y - a[e].x * a[d].y;
	    }return .5 * c;
	  }, triangulate: function () {
	    return function (a, b) {
	      var c = a.length;if (3 > c) return null;var d = [],
	          e = [],
	          g = [],
	          f,
	          h,
	          l;if (0 < THREE.ShapeUtils.area(a)) for (h = 0; h < c; h++) {
	        e[h] = h;
	      } else for (h = 0; h < c; h++) {
	        e[h] = c - 1 - h;
	      }var k = 2 * c;for (h = c - 1; 2 < c;) {
	        if (0 >= k--) {
	          console.warn("THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()");break;
	        }f = h;c <= f && (f = 0);h = f + 1;c <= h && (h = 0);l = h + 1;c <= l && (l = 0);var m;a: {
	          var p = m = void 0,
	              n = void 0,
	              q = void 0,
	              s = void 0,
	              t = void 0,
	              v = void 0,
	              u = void 0,
	              w = void 0,
	              p = a[e[f]].x,
	              n = a[e[f]].y,
	              q = a[e[h]].x,
	              s = a[e[h]].y,
	              t = a[e[l]].x,
	              v = a[e[l]].y;if (Number.EPSILON > (q - p) * (v - n) - (s - n) * (t - p)) m = !1;else {
	            var D = void 0,
	                x = void 0,
	                B = void 0,
	                y = void 0,
	                z = void 0,
	                A = void 0,
	                J = void 0,
	                F = void 0,
	                C = void 0,
	                N = void 0,
	                C = F = J = w = u = void 0,
	                D = t - q,
	                x = v - s,
	                B = p - t,
	                y = n - v,
	                z = q - p,
	                A = s - n;for (m = 0; m < c; m++) {
	              if (u = a[e[m]].x, w = a[e[m]].y, !(u === p && w === n || u === q && w === s || u === t && w === v) && (J = u - p, F = w - n, C = u - q, N = w - s, u -= t, w -= v, C = D * N - x * C, J = z * F - A * J, F = B * w - y * u, C >= -Number.EPSILON && F >= -Number.EPSILON && J >= -Number.EPSILON)) {
	                m = !1;break a;
	              }
	            }m = !0;
	          }
	        }if (m) {
	          d.push([a[e[f]], a[e[h]], a[e[l]]]);g.push([e[f], e[h], e[l]]);f = h;for (l = h + 1; l < c; f++, l++) {
	            e[f] = e[l];
	          }c--;k = 2 * c;
	        }
	      }return b ? g : d;
	    };
	  }(), triangulateShape: function triangulateShape(a, b) {
	    function c(a, b, c) {
	      return a.x !== b.x ? a.x < b.x ? a.x <= c.x && c.x <= b.x : b.x <= c.x && c.x <= a.x : a.y < b.y ? a.y <= c.y && c.y <= b.y : b.y <= c.y && c.y <= a.y;
	    }function d(a, b, d, e, f) {
	      var g = b.x - a.x,
	          h = b.y - a.y,
	          k = e.x - d.x,
	          l = e.y - d.y,
	          m = a.x - d.x,
	          p = a.y - d.y,
	          z = h * k - g * l,
	          A = h * m - g * p;if (Math.abs(z) > Number.EPSILON) {
	        if (0 < z) {
	          if (0 > A || A > z) return [];k = l * m - k * p;if (0 > k || k > z) return [];
	        } else {
	          if (0 < A || A < z) return [];k = l * m - k * p;if (0 < k || k < z) return [];
	        }if (0 === k) return !f || 0 !== A && A !== z ? [a] : [];if (k === z) return !f || 0 !== A && A !== z ? [b] : [];if (0 === A) return [d];if (A === z) return [e];f = k / z;return [{ x: a.x + f * g, y: a.y + f * h }];
	      }if (0 !== A || l * m !== k * p) return [];h = 0 === g && 0 === h;k = 0 === k && 0 === l;if (h && k) return a.x !== d.x || a.y !== d.y ? [] : [a];if (h) return c(d, e, a) ? [a] : [];if (k) return c(a, b, d) ? [d] : [];0 !== g ? (a.x < b.x ? (g = a, k = a.x, h = b, a = b.x) : (g = b, k = b.x, h = a, a = a.x), d.x < e.x ? (b = d, z = d.x, l = e, d = e.x) : (b = e, z = e.x, l = d, d = d.x)) : (a.y < b.y ? (g = a, k = a.y, h = b, a = b.y) : (g = b, k = b.y, h = a, a = a.y), d.y < e.y ? (b = d, z = d.y, l = e, d = e.y) : (b = e, z = e.y, l = d, d = d.y));return k <= z ? a < z ? [] : a === z ? f ? [] : [b] : a <= d ? [b, h] : [b, l] : k > d ? [] : k === d ? f ? [] : [g] : a <= d ? [g, h] : [g, l];
	    }function e(a, b, c, d) {
	      var e = b.x - a.x,
	          f = b.y - a.y;b = c.x - a.x;c = c.y - a.y;var g = d.x - a.x;d = d.y - a.y;a = e * c - f * b;e = e * d - f * g;return Math.abs(a) > Number.EPSILON ? (b = g * c - d * b, 0 < a ? 0 <= e && 0 <= b : 0 <= e || 0 <= b) : 0 < e;
	    }var g,
	        f,
	        h,
	        l,
	        k,
	        m = {};h = a.concat();g = 0;for (f = b.length; g < f; g++) {
	      Array.prototype.push.apply(h, b[g]);
	    }g = 0;for (f = h.length; g < f; g++) {
	      k = h[g].x + ":" + h[g].y, void 0 !== m[k] && console.warn("THREE.Shape: Duplicate point", k), m[k] = g;
	    }g = function (a, b) {
	      function c(a, b) {
	        var d = h.length - 1,
	            f = a - 1;0 > f && (f = d);var g = a + 1;g > d && (g = 0);d = e(h[a], h[f], h[g], k[b]);if (!d) return !1;d = k.length - 1;f = b - 1;0 > f && (f = d);g = b + 1;g > d && (g = 0);return (d = e(k[b], k[f], k[g], h[a])) ? !0 : !1;
	      }function f(a, b) {
	        var c, e;for (c = 0; c < h.length; c++) {
	          if (e = c + 1, e %= h.length, e = d(a, b, h[c], h[e], !0), 0 < e.length) return !0;
	        }return !1;
	      }function g(a, c) {
	        var e, f, h, k;for (e = 0; e < l.length; e++) {
	          for (f = b[l[e]], h = 0; h < f.length; h++) {
	            if (k = h + 1, k %= f.length, k = d(a, c, f[h], f[k], !0), 0 < k.length) return !0;
	          }
	        }return !1;
	      }var h = a.concat(),
	          k,
	          l = [],
	          m,
	          p,
	          y,
	          z,
	          A,
	          J = [],
	          F,
	          C,
	          N,
	          L = 0;for (m = b.length; L < m; L++) {
	        l.push(L);
	      }F = 0;for (var Q = 2 * l.length; 0 < l.length;) {
	        Q--;if (0 > Q) {
	          console.log("Infinite Loop! Holes left:" + l.length + ", Probably Hole outside Shape!");break;
	        }for (p = F; p < h.length; p++) {
	          y = h[p];m = -1;for (L = 0; L < l.length; L++) {
	            if (z = l[L], A = y.x + ":" + y.y + ":" + z, void 0 === J[A]) {
	              k = b[z];for (C = 0; C < k.length; C++) {
	                if (z = k[C], c(p, C) && !f(y, z) && !g(y, z)) {
	                  m = C;l.splice(L, 1);
	                  F = h.slice(0, p + 1);z = h.slice(p);C = k.slice(m);N = k.slice(0, m + 1);h = F.concat(C).concat(N).concat(z);F = p;break;
	                }
	              }if (0 <= m) break;J[A] = !0;
	            }
	          }if (0 <= m) break;
	        }
	      }return h;
	    }(a, b);var p = THREE.ShapeUtils.triangulate(g, !1);g = 0;for (f = p.length; g < f; g++) {
	      for (l = p[g], h = 0; 3 > h; h++) {
	        k = l[h].x + ":" + l[h].y, k = m[k], void 0 !== k && (l[h] = k);
	      }
	    }return p.concat();
	  }, isClockWise: function isClockWise(a) {
	    return 0 > THREE.ShapeUtils.area(a);
	  }, b2: function () {
	    return function (a, b, c, d) {
	      var e = 1 - a;return e * e * b + 2 * (1 - a) * a * c + a * a * d;
	    };
	  }(), b3: function () {
	    return function (a, b, c, d, e) {
	      var g = 1 - a,
	          f = 1 - a;return g * g * g * b + 3 * f * f * a * c + 3 * (1 - a) * a * a * d + a * a * a * e;
	    };
	  }() };THREE.Audio = function (a) {
	  THREE.Object3D.call(this);this.type = "Audio";this.context = a.context;this.source = this.context.createBufferSource();this.source.onended = this.onEnded.bind(this);this.gain = this.context.createGain();this.gain.connect(this.context.destination);this.panner = this.context.createPanner();this.panner.connect(this.gain);this.autoplay = !1;this.startTime = 0;this.playbackRate = 1;this.isPlaying = !1;
	};THREE.Audio.prototype = Object.create(THREE.Object3D.prototype);
	THREE.Audio.prototype.constructor = THREE.Audio;THREE.Audio.prototype.load = function (a) {
	  var b = this,
	      c = new XMLHttpRequest();c.open("GET", a, !0);c.responseType = "arraybuffer";c.onload = function (a) {
	    b.context.decodeAudioData(this.response, function (a) {
	      b.source.buffer = a;b.autoplay && b.play();
	    });
	  };c.send();return this;
	};
	THREE.Audio.prototype.play = function () {
	  if (!0 === this.isPlaying) console.warn("THREE.Audio: Audio is already playing.");else {
	    var a = this.context.createBufferSource();a.buffer = this.source.buffer;a.loop = this.source.loop;a.onended = this.source.onended;a.start(0, this.startTime);a.playbackRate.value = this.playbackRate;this.isPlaying = !0;this.source = a;this.connect();
	  }
	};THREE.Audio.prototype.pause = function () {
	  this.source.stop();this.startTime = this.context.currentTime;
	};
	THREE.Audio.prototype.stop = function () {
	  this.source.stop();this.startTime = 0;
	};THREE.Audio.prototype.connect = function () {
	  void 0 !== this.filter ? (this.source.connect(this.filter), this.filter.connect(this.panner)) : this.source.connect(this.panner);
	};THREE.Audio.prototype.disconnect = function () {
	  void 0 !== this.filter ? (this.source.disconnect(this.filter), this.filter.disconnect(this.panner)) : this.source.disconnect(this.panner);
	};
	THREE.Audio.prototype.setFilter = function (a) {
	  !0 === this.isPlaying ? (this.disconnect(), this.filter = a, this.connect()) : this.filter = a;
	};THREE.Audio.prototype.getFilter = function () {
	  return this.filter;
	};THREE.Audio.prototype.setPlaybackRate = function (a) {
	  this.playbackRate = a;!0 === this.isPlaying && (this.source.playbackRate.value = this.playbackRate);
	};THREE.Audio.prototype.getPlaybackRate = function () {
	  return this.playbackRate;
	};THREE.Audio.prototype.onEnded = function () {
	  this.isPlaying = !1;
	};
	THREE.Audio.prototype.setLoop = function (a) {
	  this.source.loop = a;
	};THREE.Audio.prototype.getLoop = function () {
	  return this.source.loop;
	};THREE.Audio.prototype.setRefDistance = function (a) {
	  this.panner.refDistance = a;
	};THREE.Audio.prototype.getRefDistance = function () {
	  return this.panner.refDistance;
	};THREE.Audio.prototype.setRolloffFactor = function (a) {
	  this.panner.rolloffFactor = a;
	};THREE.Audio.prototype.getRolloffFactor = function () {
	  return this.panner.rolloffFactor;
	};
	THREE.Audio.prototype.setVolume = function (a) {
	  this.gain.gain.value = a;
	};THREE.Audio.prototype.getVolume = function () {
	  return this.gain.gain.value;
	};THREE.Audio.prototype.updateMatrixWorld = function () {
	  var a = new THREE.Vector3();return function (b) {
	    THREE.Object3D.prototype.updateMatrixWorld.call(this, b);a.setFromMatrixPosition(this.matrixWorld);this.panner.setPosition(a.x, a.y, a.z);
	  };
	}();THREE.AudioListener = function () {
	  THREE.Object3D.call(this);this.type = "AudioListener";this.context = new (window.AudioContext || window.webkitAudioContext)();
	};
	THREE.AudioListener.prototype = Object.create(THREE.Object3D.prototype);THREE.AudioListener.prototype.constructor = THREE.AudioListener;
	THREE.AudioListener.prototype.updateMatrixWorld = function () {
	  var a = new THREE.Vector3(),
	      b = new THREE.Quaternion(),
	      c = new THREE.Vector3(),
	      d = new THREE.Vector3();return function (e) {
	    THREE.Object3D.prototype.updateMatrixWorld.call(this, e);e = this.context.listener;var g = this.up;this.matrixWorld.decompose(a, b, c);d.set(0, 0, -1).applyQuaternion(b);e.setPosition(a.x, a.y, a.z);e.setOrientation(d.x, d.y, d.z, g.x, g.y, g.z);
	  };
	}();THREE.Curve = function () {};
	THREE.Curve.prototype = { constructor: THREE.Curve, getPoint: function getPoint(a) {
	    console.warn("THREE.Curve: Warning, getPoint() not implemented!");return null;
	  }, getPointAt: function getPointAt(a) {
	    a = this.getUtoTmapping(a);return this.getPoint(a);
	  }, getPoints: function getPoints(a) {
	    a || (a = 5);var b,
	        c = [];for (b = 0; b <= a; b++) {
	      c.push(this.getPoint(b / a));
	    }return c;
	  }, getSpacedPoints: function getSpacedPoints(a) {
	    a || (a = 5);var b,
	        c = [];for (b = 0; b <= a; b++) {
	      c.push(this.getPointAt(b / a));
	    }return c;
	  }, getLength: function getLength() {
	    var a = this.getLengths();return a[a.length - 1];
	  }, getLengths: function getLengths(a) {
	    a || (a = this.__arcLengthDivisions ? this.__arcLengthDivisions : 200);if (this.cacheArcLengths && this.cacheArcLengths.length === a + 1 && !this.needsUpdate) return this.cacheArcLengths;this.needsUpdate = !1;var b = [],
	        c,
	        d = this.getPoint(0),
	        e,
	        g = 0;b.push(0);for (e = 1; e <= a; e++) {
	      c = this.getPoint(e / a), g += c.distanceTo(d), b.push(g), d = c;
	    }return this.cacheArcLengths = b;
	  }, updateArcLengths: function updateArcLengths() {
	    this.needsUpdate = !0;this.getLengths();
	  }, getUtoTmapping: function getUtoTmapping(a, b) {
	    var c = this.getLengths(),
	        d = 0,
	        e = c.length,
	        g;g = b ? b : a * c[e - 1];for (var f = 0, h = e - 1, l; f <= h;) {
	      if (d = Math.floor(f + (h - f) / 2), l = c[d] - g, 0 > l) f = d + 1;else if (0 < l) h = d - 1;else {
	        h = d;break;
	      }
	    }d = h;if (c[d] === g) return d / (e - 1);f = c[d];return c = (d + (g - f) / (c[d + 1] - f)) / (e - 1);
	  }, getTangent: function getTangent(a) {
	    var b = a - 1E-4;a += 1E-4;0 > b && (b = 0);1 < a && (a = 1);b = this.getPoint(b);return this.getPoint(a).clone().sub(b).normalize();
	  }, getTangentAt: function getTangentAt(a) {
	    a = this.getUtoTmapping(a);return this.getTangent(a);
	  } };THREE.Curve.Utils = THREE.CurveUtils;
	THREE.Curve.create = function (a, b) {
	  a.prototype = Object.create(THREE.Curve.prototype);a.prototype.constructor = a;a.prototype.getPoint = b;return a;
	};THREE.CurvePath = function () {
	  this.curves = [];this.autoClose = !1;
	};THREE.CurvePath.prototype = Object.create(THREE.Curve.prototype);THREE.CurvePath.prototype.constructor = THREE.CurvePath;THREE.CurvePath.prototype.add = function (a) {
	  this.curves.push(a);
	};
	THREE.CurvePath.prototype.closePath = function () {
	  var a = this.curves[0].getPoint(0),
	      b = this.curves[this.curves.length - 1].getPoint(1);a.equals(b) || this.curves.push(new THREE.LineCurve(b, a));
	};THREE.CurvePath.prototype.getPoint = function (a) {
	  for (var b = a * this.getLength(), c = this.getCurveLengths(), d = 0; d < c.length;) {
	    if (c[d] >= b) return a = this.curves[d], b = 1 - (c[d] - b) / a.getLength(), a.getPointAt(b);d++;
	  }return null;
	};THREE.CurvePath.prototype.getLength = function () {
	  var a = this.getCurveLengths();return a[a.length - 1];
	};
	THREE.CurvePath.prototype.getCurveLengths = function () {
	  if (this.cacheLengths && this.cacheLengths.length === this.curves.length) return this.cacheLengths;for (var a = [], b = 0, c = 0, d = this.curves.length; c < d; c++) {
	    b += this.curves[c].getLength(), a.push(b);
	  }return this.cacheLengths = a;
	};THREE.CurvePath.prototype.createPointsGeometry = function (a) {
	  a = this.getPoints(a, !0);return this.createGeometry(a);
	};THREE.CurvePath.prototype.createSpacedPointsGeometry = function (a) {
	  a = this.getSpacedPoints(a, !0);return this.createGeometry(a);
	};
	THREE.CurvePath.prototype.createGeometry = function (a) {
	  for (var b = new THREE.Geometry(), c = 0, d = a.length; c < d; c++) {
	    var e = a[c];b.vertices.push(new THREE.Vector3(e.x, e.y, e.z || 0));
	  }return b;
	};THREE.Path = function (a) {
	  THREE.CurvePath.call(this);this.actions = [];a && this.fromPoints(a);
	};THREE.Path.prototype = Object.create(THREE.CurvePath.prototype);THREE.Path.prototype.constructor = THREE.Path;THREE.Path.prototype.fromPoints = function (a) {
	  this.moveTo(a[0].x, a[0].y);for (var b = 1, c = a.length; b < c; b++) {
	    this.lineTo(a[b].x, a[b].y);
	  }
	};
	THREE.Path.prototype.moveTo = function (a, b) {
	  this.actions.push({ action: "moveTo", args: [a, b] });
	};THREE.Path.prototype.lineTo = function (a, b) {
	  var c = this.actions[this.actions.length - 1].args,
	      c = new THREE.LineCurve(new THREE.Vector2(c[c.length - 2], c[c.length - 1]), new THREE.Vector2(a, b));this.curves.push(c);this.actions.push({ action: "lineTo", args: [a, b] });
	};
	THREE.Path.prototype.quadraticCurveTo = function (a, b, c, d) {
	  var e = this.actions[this.actions.length - 1].args,
	      e = new THREE.QuadraticBezierCurve(new THREE.Vector2(e[e.length - 2], e[e.length - 1]), new THREE.Vector2(a, b), new THREE.Vector2(c, d));this.curves.push(e);this.actions.push({ action: "quadraticCurveTo", args: [a, b, c, d] });
	};
	THREE.Path.prototype.bezierCurveTo = function (a, b, c, d, e, g) {
	  var f = this.actions[this.actions.length - 1].args,
	      f = new THREE.CubicBezierCurve(new THREE.Vector2(f[f.length - 2], f[f.length - 1]), new THREE.Vector2(a, b), new THREE.Vector2(c, d), new THREE.Vector2(e, g));this.curves.push(f);this.actions.push({ action: "bezierCurveTo", args: [a, b, c, d, e, g] });
	};
	THREE.Path.prototype.splineThru = function (a) {
	  var b = Array.prototype.slice.call(arguments),
	      c = this.actions[this.actions.length - 1].args,
	      c = [new THREE.Vector2(c[c.length - 2], c[c.length - 1])];Array.prototype.push.apply(c, a);c = new THREE.SplineCurve(c);this.curves.push(c);this.actions.push({ action: "splineThru", args: b });
	};THREE.Path.prototype.arc = function (a, b, c, d, e, g) {
	  var f = this.actions[this.actions.length - 1].args;this.absarc(a + f[f.length - 2], b + f[f.length - 1], c, d, e, g);
	};
	THREE.Path.prototype.absarc = function (a, b, c, d, e, g) {
	  this.absellipse(a, b, c, c, d, e, g);
	};THREE.Path.prototype.ellipse = function (a, b, c, d, e, g, f, h) {
	  var l = this.actions[this.actions.length - 1].args;this.absellipse(a + l[l.length - 2], b + l[l.length - 1], c, d, e, g, f, h);
	};THREE.Path.prototype.absellipse = function (a, b, c, d, e, g, f, h) {
	  var l = [a, b, c, d, e, g, f, h || 0];a = new THREE.EllipseCurve(a, b, c, d, e, g, f, h);this.curves.push(a);a = a.getPoint(1);l.push(a.x);l.push(a.y);this.actions.push({ action: "ellipse", args: l });
	};
	THREE.Path.prototype.getSpacedPoints = function (a, b) {
	  a || (a = 40);for (var c = [], d = 0; d < a; d++) {
	    c.push(this.getPoint(d / a));
	  }return c;
	};
	THREE.Path.prototype.getPoints = function (a, b) {
	  a = a || 12;for (var c = THREE.ShapeUtils.b2, d = THREE.ShapeUtils.b3, e = [], g, f, h, l, k, m, p, n, q, s, t = 0, v = this.actions.length; t < v; t++) {
	    q = this.actions[t];var u = q.args;switch (q.action) {case "moveTo":
	        e.push(new THREE.Vector2(u[0], u[1]));break;case "lineTo":
	        e.push(new THREE.Vector2(u[0], u[1]));break;case "quadraticCurveTo":
	        g = u[2];f = u[3];k = u[0];m = u[1];0 < e.length ? (q = e[e.length - 1], p = q.x, n = q.y) : (q = this.actions[t - 1].args, p = q[q.length - 2], n = q[q.length - 1]);for (u = 1; u <= a; u++) {
	          s = u / a, q = c(s, p, k, g), s = c(s, n, m, f), e.push(new THREE.Vector2(q, s));
	        }break;case "bezierCurveTo":
	        g = u[4];f = u[5];k = u[0];m = u[1];h = u[2];l = u[3];0 < e.length ? (q = e[e.length - 1], p = q.x, n = q.y) : (q = this.actions[t - 1].args, p = q[q.length - 2], n = q[q.length - 1]);for (u = 1; u <= a; u++) {
	          s = u / a, q = d(s, p, k, h, g), s = d(s, n, m, l, f), e.push(new THREE.Vector2(q, s));
	        }break;case "splineThru":
	        q = this.actions[t - 1].args;s = [new THREE.Vector2(q[q.length - 2], q[q.length - 1])];q = a * u[0].length;s = s.concat(u[0]);s = new THREE.SplineCurve(s);for (u = 1; u <= q; u++) {
	          e.push(s.getPointAt(u / q));
	        }break;case "arc":
	        g = u[0];f = u[1];m = u[2];h = u[3];q = u[4];k = !!u[5];p = q - h;n = 2 * a;for (u = 1; u <= n; u++) {
	          s = u / n, k || (s = 1 - s), s = h + s * p, q = g + m * Math.cos(s), s = f + m * Math.sin(s), e.push(new THREE.Vector2(q, s));
	        }break;case "ellipse":
	        g = u[0];f = u[1];m = u[2];l = u[3];h = u[4];q = u[5];k = !!u[6];var w = u[7];p = q - h;n = 2 * a;var D, x;0 !== w && (D = Math.cos(w), x = Math.sin(w));for (u = 1; u <= n; u++) {
	          s = u / n;k || (s = 1 - s);s = h + s * p;q = g + m * Math.cos(s);s = f + l * Math.sin(s);if (0 !== w) {
	            var B = q;q = (B - g) * D - (s - f) * x + g;s = (B - g) * x + (s - f) * D + f;
	          }e.push(new THREE.Vector2(q, s));
	        }}
	  }c = e[e.length - 1];Math.abs(c.x - e[0].x) < Number.EPSILON && Math.abs(c.y - e[0].y) < Number.EPSILON && e.splice(e.length - 1, 1);b && e.push(e[0]);return e;
	};
	THREE.Path.prototype.toShapes = function (a, b) {
	  function c(a) {
	    for (var b = [], c = 0, d = a.length; c < d; c++) {
	      var e = a[c],
	          f = new THREE.Shape();f.actions = e.actions;f.curves = e.curves;b.push(f);
	    }return b;
	  }function d(a, b) {
	    for (var c = b.length, d = !1, e = c - 1, f = 0; f < c; e = f++) {
	      var g = b[e],
	          h = b[f],
	          k = h.x - g.x,
	          l = h.y - g.y;if (Math.abs(l) > Number.EPSILON) {
	        if (0 > l && (g = b[f], k = -k, h = b[e], l = -l), !(a.y < g.y || a.y > h.y)) if (a.y === g.y) {
	          if (a.x === g.x) return !0;
	        } else {
	          e = l * (a.x - g.x) - k * (a.y - g.y);if (0 === e) return !0;0 > e || (d = !d);
	        }
	      } else if (a.y === g.y && (h.x <= a.x && a.x <= g.x || g.x <= a.x && a.x <= h.x)) return !0;
	    }return d;
	  }var e = THREE.ShapeUtils.isClockWise,
	      g = function (a) {
	    for (var b = [], c = new THREE.Path(), d = 0, e = a.length; d < e; d++) {
	      var f = a[d],
	          g = f.args,
	          f = f.action;"moveTo" === f && 0 !== c.actions.length && (b.push(c), c = new THREE.Path());c[f].apply(c, g);
	    }0 !== c.actions.length && b.push(c);return b;
	  }(this.actions);if (0 === g.length) return [];if (!0 === b) return c(g);var f,
	      h,
	      l,
	      k = [];if (1 === g.length) return h = g[0], l = new THREE.Shape(), l.actions = h.actions, l.curves = h.curves, k.push(l), k;var m = !e(g[0].getPoints()),
	      m = a ? !m : m;l = [];var p = [],
	      n = [],
	      q = 0,
	      s;p[q] = void 0;n[q] = [];for (var t = 0, v = g.length; t < v; t++) {
	    h = g[t], s = h.getPoints(), f = e(s), (f = a ? !f : f) ? (!m && p[q] && q++, p[q] = { s: new THREE.Shape(), p: s }, p[q].s.actions = h.actions, p[q].s.curves = h.curves, m && q++, n[q] = []) : n[q].push({ h: h, p: s[0] });
	  }if (!p[0]) return c(g);if (1 < p.length) {
	    t = !1;h = [];e = 0;for (g = p.length; e < g; e++) {
	      l[e] = [];
	    }e = 0;for (g = p.length; e < g; e++) {
	      for (f = n[e], m = 0; m < f.length; m++) {
	        q = f[m];s = !0;for (v = 0; v < p.length; v++) {
	          d(q.p, p[v].p) && (e !== v && h.push({ froms: e, tos: v, hole: m }), s ? (s = !1, l[v].push(q)) : t = !0);
	        }s && l[e].push(q);
	      }
	    }0 < h.length && (t || (n = l));
	  }t = 0;for (e = p.length; t < e; t++) {
	    for (l = p[t].s, k.push(l), h = n[t], g = 0, f = h.length; g < f; g++) {
	      l.holes.push(h[g].h);
	    }
	  }return k;
	};THREE.Shape = function () {
	  THREE.Path.apply(this, arguments);this.holes = [];
	};THREE.Shape.prototype = Object.create(THREE.Path.prototype);THREE.Shape.prototype.constructor = THREE.Shape;THREE.Shape.prototype.extrude = function (a) {
	  return new THREE.ExtrudeGeometry(this, a);
	};THREE.Shape.prototype.makeGeometry = function (a) {
	  return new THREE.ShapeGeometry(this, a);
	};
	THREE.Shape.prototype.getPointsHoles = function (a) {
	  for (var b = [], c = 0, d = this.holes.length; c < d; c++) {
	    b[c] = this.holes[c].getPoints(a);
	  }return b;
	};THREE.Shape.prototype.extractAllPoints = function (a) {
	  return { shape: this.getPoints(a), holes: this.getPointsHoles(a) };
	};THREE.Shape.prototype.extractPoints = function (a) {
	  return this.extractAllPoints(a);
	};THREE.Shape.Utils = THREE.ShapeUtils;THREE.LineCurve = function (a, b) {
	  this.v1 = a;this.v2 = b;
	};THREE.LineCurve.prototype = Object.create(THREE.Curve.prototype);
	THREE.LineCurve.prototype.constructor = THREE.LineCurve;THREE.LineCurve.prototype.getPoint = function (a) {
	  var b = this.v2.clone().sub(this.v1);b.multiplyScalar(a).add(this.v1);return b;
	};THREE.LineCurve.prototype.getPointAt = function (a) {
	  return this.getPoint(a);
	};THREE.LineCurve.prototype.getTangent = function (a) {
	  return this.v2.clone().sub(this.v1).normalize();
	};THREE.QuadraticBezierCurve = function (a, b, c) {
	  this.v0 = a;this.v1 = b;this.v2 = c;
	};THREE.QuadraticBezierCurve.prototype = Object.create(THREE.Curve.prototype);
	THREE.QuadraticBezierCurve.prototype.constructor = THREE.QuadraticBezierCurve;THREE.QuadraticBezierCurve.prototype.getPoint = function (a) {
	  var b = THREE.ShapeUtils.b2;return new THREE.Vector2(b(a, this.v0.x, this.v1.x, this.v2.x), b(a, this.v0.y, this.v1.y, this.v2.y));
	};THREE.QuadraticBezierCurve.prototype.getTangent = function (a) {
	  var b = THREE.CurveUtils.tangentQuadraticBezier;return new THREE.Vector2(b(a, this.v0.x, this.v1.x, this.v2.x), b(a, this.v0.y, this.v1.y, this.v2.y)).normalize();
	};
	THREE.CubicBezierCurve = function (a, b, c, d) {
	  this.v0 = a;this.v1 = b;this.v2 = c;this.v3 = d;
	};THREE.CubicBezierCurve.prototype = Object.create(THREE.Curve.prototype);THREE.CubicBezierCurve.prototype.constructor = THREE.CubicBezierCurve;THREE.CubicBezierCurve.prototype.getPoint = function (a) {
	  var b = THREE.ShapeUtils.b3;return new THREE.Vector2(b(a, this.v0.x, this.v1.x, this.v2.x, this.v3.x), b(a, this.v0.y, this.v1.y, this.v2.y, this.v3.y));
	};
	THREE.CubicBezierCurve.prototype.getTangent = function (a) {
	  var b = THREE.CurveUtils.tangentCubicBezier;return new THREE.Vector2(b(a, this.v0.x, this.v1.x, this.v2.x, this.v3.x), b(a, this.v0.y, this.v1.y, this.v2.y, this.v3.y)).normalize();
	};THREE.SplineCurve = function (a) {
	  this.points = void 0 == a ? [] : a;
	};THREE.SplineCurve.prototype = Object.create(THREE.Curve.prototype);THREE.SplineCurve.prototype.constructor = THREE.SplineCurve;
	THREE.SplineCurve.prototype.getPoint = function (a) {
	  var b = this.points;a *= b.length - 1;var c = Math.floor(a);a -= c;var d = b[0 === c ? c : c - 1],
	      e = b[c],
	      g = b[c > b.length - 2 ? b.length - 1 : c + 1],
	      b = b[c > b.length - 3 ? b.length - 1 : c + 2],
	      c = THREE.CurveUtils.interpolate;return new THREE.Vector2(c(d.x, e.x, g.x, b.x, a), c(d.y, e.y, g.y, b.y, a));
	};THREE.EllipseCurve = function (a, b, c, d, e, g, f, h) {
	  this.aX = a;this.aY = b;this.xRadius = c;this.yRadius = d;this.aStartAngle = e;this.aEndAngle = g;this.aClockwise = f;this.aRotation = h || 0;
	};THREE.EllipseCurve.prototype = Object.create(THREE.Curve.prototype);
	THREE.EllipseCurve.prototype.constructor = THREE.EllipseCurve;
	THREE.EllipseCurve.prototype.getPoint = function (a) {
	  var b = this.aEndAngle - this.aStartAngle;0 > b && (b += 2 * Math.PI);b > 2 * Math.PI && (b -= 2 * Math.PI);b = !0 === this.aClockwise ? this.aEndAngle + (1 - a) * (2 * Math.PI - b) : this.aStartAngle + a * b;a = this.aX + this.xRadius * Math.cos(b);var c = this.aY + this.yRadius * Math.sin(b);if (0 !== this.aRotation) {
	    var b = Math.cos(this.aRotation),
	        d = Math.sin(this.aRotation),
	        e = a;a = (e - this.aX) * b - (c - this.aY) * d + this.aX;c = (e - this.aX) * d + (c - this.aY) * b + this.aY;
	  }return new THREE.Vector2(a, c);
	};
	THREE.ArcCurve = function (a, b, c, d, e, g) {
	  THREE.EllipseCurve.call(this, a, b, c, c, d, e, g);
	};THREE.ArcCurve.prototype = Object.create(THREE.EllipseCurve.prototype);THREE.ArcCurve.prototype.constructor = THREE.ArcCurve;THREE.LineCurve3 = THREE.Curve.create(function (a, b) {
	  this.v1 = a;this.v2 = b;
	}, function (a) {
	  var b = new THREE.Vector3();b.subVectors(this.v2, this.v1);b.multiplyScalar(a);b.add(this.v1);return b;
	});
	THREE.QuadraticBezierCurve3 = THREE.Curve.create(function (a, b, c) {
	  this.v0 = a;this.v1 = b;this.v2 = c;
	}, function (a) {
	  var b = THREE.ShapeUtils.b2;return new THREE.Vector3(b(a, this.v0.x, this.v1.x, this.v2.x), b(a, this.v0.y, this.v1.y, this.v2.y), b(a, this.v0.z, this.v1.z, this.v2.z));
	});
	THREE.CubicBezierCurve3 = THREE.Curve.create(function (a, b, c, d) {
	  this.v0 = a;this.v1 = b;this.v2 = c;this.v3 = d;
	}, function (a) {
	  var b = THREE.ShapeUtils.b3;return new THREE.Vector3(b(a, this.v0.x, this.v1.x, this.v2.x, this.v3.x), b(a, this.v0.y, this.v1.y, this.v2.y, this.v3.y), b(a, this.v0.z, this.v1.z, this.v2.z, this.v3.z));
	});
	THREE.SplineCurve3 = THREE.Curve.create(function (a) {
	  console.warn("THREE.SplineCurve3 will be deprecated. Please use THREE.CatmullRomCurve3");this.points = void 0 == a ? [] : a;
	}, function (a) {
	  var b = this.points;a *= b.length - 1;var c = Math.floor(a);a -= c;var d = b[0 == c ? c : c - 1],
	      e = b[c],
	      g = b[c > b.length - 2 ? b.length - 1 : c + 1],
	      b = b[c > b.length - 3 ? b.length - 1 : c + 2],
	      c = THREE.CurveUtils.interpolate;return new THREE.Vector3(c(d.x, e.x, g.x, b.x, a), c(d.y, e.y, g.y, b.y, a), c(d.z, e.z, g.z, b.z, a));
	});
	THREE.CatmullRomCurve3 = function () {
	  function a() {}var b = new THREE.Vector3(),
	      c = new a(),
	      d = new a(),
	      e = new a();a.prototype.init = function (a, b, c, d) {
	    this.c0 = a;this.c1 = c;this.c2 = -3 * a + 3 * b - 2 * c - d;this.c3 = 2 * a - 2 * b + c + d;
	  };a.prototype.initNonuniformCatmullRom = function (a, b, c, d, e, m, p) {
	    a = ((b - a) / e - (c - a) / (e + m) + (c - b) / m) * m;d = ((c - b) / m - (d - b) / (m + p) + (d - c) / p) * m;this.init(b, c, a, d);
	  };a.prototype.initCatmullRom = function (a, b, c, d, e) {
	    this.init(b, c, e * (c - a), e * (d - b));
	  };a.prototype.calc = function (a) {
	    var b = a * a;return this.c0 + this.c1 * a + this.c2 * b + this.c3 * b * a;
	  };return THREE.Curve.create(function (a) {
	    this.points = a || [];
	  }, function (a) {
	    var f = this.points,
	        h,
	        l;l = f.length;2 > l && console.log("duh, you need at least 2 points");a *= l - 1;h = Math.floor(a);a -= h;0 === a && h === l - 1 && (h = l - 2, a = 1);var k, m, p;0 === h ? (b.subVectors(f[0], f[1]).add(f[0]), k = b) : k = f[h - 1];m = f[h];p = f[h + 1];h + 2 < l ? f = f[h + 2] : (b.subVectors(f[l - 1], f[l - 2]).add(f[l - 2]), f = b);if (void 0 === this.type || "centripetal" === this.type || "chordal" === this.type) {
	      var n = "chordal" === this.type ? .5 : .25;l = Math.pow(k.distanceToSquared(m), n);
	      h = Math.pow(m.distanceToSquared(p), n);n = Math.pow(p.distanceToSquared(f), n);1E-4 > h && (h = 1);1E-4 > l && (l = h);1E-4 > n && (n = h);c.initNonuniformCatmullRom(k.x, m.x, p.x, f.x, l, h, n);d.initNonuniformCatmullRom(k.y, m.y, p.y, f.y, l, h, n);e.initNonuniformCatmullRom(k.z, m.z, p.z, f.z, l, h, n);
	    } else "catmullrom" === this.type && (l = void 0 !== this.tension ? this.tension : .5, c.initCatmullRom(k.x, m.x, p.x, f.x, l), d.initCatmullRom(k.y, m.y, p.y, f.y, l), e.initCatmullRom(k.z, m.z, p.z, f.z, l));return new THREE.Vector3(c.calc(a), d.calc(a), e.calc(a));
	  });
	}();
	THREE.ClosedSplineCurve3 = THREE.Curve.create(function (a) {
	  this.points = void 0 == a ? [] : a;
	}, function (a) {
	  var b = this.points;a *= b.length - 0;var c = Math.floor(a);a -= c;var c = c + (0 < c ? 0 : (Math.floor(Math.abs(c) / b.length) + 1) * b.length),
	      d = b[(c - 1) % b.length],
	      e = b[c % b.length],
	      g = b[(c + 1) % b.length],
	      b = b[(c + 2) % b.length],
	      c = THREE.CurveUtils.interpolate;return new THREE.Vector3(c(d.x, e.x, g.x, b.x, a), c(d.y, e.y, g.y, b.y, a), c(d.z, e.z, g.z, b.z, a));
	});
	THREE.BoxGeometry = function (a, b, c, d, e, g) {
	  function f(a, b, c, d, e, f, g, t) {
	    var v,
	        u = h.widthSegments,
	        w = h.heightSegments,
	        D = e / 2,
	        x = f / 2,
	        B = h.vertices.length;if ("x" === a && "y" === b || "y" === a && "x" === b) v = "z";else if ("x" === a && "z" === b || "z" === a && "x" === b) v = "y", w = h.depthSegments;else if ("z" === a && "y" === b || "y" === a && "z" === b) v = "x", u = h.depthSegments;var y = u + 1,
	        z = w + 1,
	        A = e / u,
	        J = f / w,
	        F = new THREE.Vector3();F[v] = 0 < g ? 1 : -1;for (e = 0; e < z; e++) {
	      for (f = 0; f < y; f++) {
	        var C = new THREE.Vector3();C[a] = (f * A - D) * c;C[b] = (e * J - x) * d;C[v] = g;h.vertices.push(C);
	      }
	    }for (e = 0; e < w; e++) {
	      for (f = 0; f < u; f++) {
	        x = f + y * e, a = f + y * (e + 1), b = f + 1 + y * (e + 1), c = f + 1 + y * e, d = new THREE.Vector2(f / u, 1 - e / w), g = new THREE.Vector2(f / u, 1 - (e + 1) / w), v = new THREE.Vector2((f + 1) / u, 1 - (e + 1) / w), D = new THREE.Vector2((f + 1) / u, 1 - e / w), x = new THREE.Face3(x + B, a + B, c + B), x.normal.copy(F), x.vertexNormals.push(F.clone(), F.clone(), F.clone()), x.materialIndex = t, h.faces.push(x), h.faceVertexUvs[0].push([d, g, D]), x = new THREE.Face3(a + B, b + B, c + B), x.normal.copy(F), x.vertexNormals.push(F.clone(), F.clone(), F.clone()), x.materialIndex = t, h.faces.push(x), h.faceVertexUvs[0].push([g.clone(), v, D.clone()]);
	      }
	    }
	  }THREE.Geometry.call(this);this.type = "BoxGeometry";this.parameters = { width: a, height: b, depth: c, widthSegments: d, heightSegments: e, depthSegments: g };this.widthSegments = d || 1;this.heightSegments = e || 1;this.depthSegments = g || 1;var h = this;d = a / 2;e = b / 2;g = c / 2;f("z", "y", -1, -1, c, b, d, 0);f("z", "y", 1, -1, c, b, -d, 1);f("x", "z", 1, 1, a, c, e, 2);f("x", "z", 1, -1, a, c, -e, 3);f("x", "y", 1, -1, a, b, g, 4);f("x", "y", -1, -1, a, b, -g, 5);this.mergeVertices();
	};THREE.BoxGeometry.prototype = Object.create(THREE.Geometry.prototype);
	THREE.BoxGeometry.prototype.constructor = THREE.BoxGeometry;THREE.BoxGeometry.prototype.clone = function () {
	  var a = this.parameters;return new THREE.BoxGeometry(a.width, a.height, a.depth, a.widthSegments, a.heightSegments, a.depthSegments);
	};THREE.CubeGeometry = THREE.BoxGeometry;THREE.CircleGeometry = function (a, b, c, d) {
	  THREE.Geometry.call(this);this.type = "CircleGeometry";this.parameters = { radius: a, segments: b, thetaStart: c, thetaLength: d };this.fromBufferGeometry(new THREE.CircleBufferGeometry(a, b, c, d));
	};
	THREE.CircleGeometry.prototype = Object.create(THREE.Geometry.prototype);THREE.CircleGeometry.prototype.constructor = THREE.CircleGeometry;THREE.CircleGeometry.prototype.clone = function () {
	  var a = this.parameters;return new THREE.CircleGeometry(a.radius, a.segments, a.thetaStart, a.thetaLength);
	};
	THREE.CircleBufferGeometry = function (a, b, c, d) {
	  THREE.BufferGeometry.call(this);this.type = "CircleBufferGeometry";this.parameters = { radius: a, segments: b, thetaStart: c, thetaLength: d };a = a || 50;b = void 0 !== b ? Math.max(3, b) : 8;c = void 0 !== c ? c : 0;d = void 0 !== d ? d : 2 * Math.PI;var e = b + 2,
	      g = new Float32Array(3 * e),
	      f = new Float32Array(3 * e),
	      e = new Float32Array(2 * e);f[2] = 1;e[0] = .5;e[1] = .5;for (var h = 0, l = 3, k = 2; h <= b; h++, l += 3, k += 2) {
	    var m = c + h / b * d;g[l] = a * Math.cos(m);g[l + 1] = a * Math.sin(m);f[l + 2] = 1;e[k] = (g[l] / a + 1) / 2;e[k + 1] = (g[l + 1] / a + 1) / 2;
	  }c = [];for (l = 1; l <= b; l++) {
	    c.push(l, l + 1, 0);
	  }this.setIndex(new THREE.BufferAttribute(new Uint16Array(c), 1));this.addAttribute("position", new THREE.BufferAttribute(g, 3));this.addAttribute("normal", new THREE.BufferAttribute(f, 3));this.addAttribute("uv", new THREE.BufferAttribute(e, 2));this.boundingSphere = new THREE.Sphere(new THREE.Vector3(), a);
	};THREE.CircleBufferGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);THREE.CircleBufferGeometry.prototype.constructor = THREE.CircleBufferGeometry;
	THREE.CircleBufferGeometry.prototype.clone = function () {
	  var a = this.parameters;return new THREE.CircleBufferGeometry(a.radius, a.segments, a.thetaStart, a.thetaLength);
	};
	THREE.CylinderGeometry = function (a, b, c, d, e, g, f, h) {
	  THREE.Geometry.call(this);this.type = "CylinderGeometry";this.parameters = { radiusTop: a, radiusBottom: b, height: c, radialSegments: d, heightSegments: e, openEnded: g, thetaStart: f, thetaLength: h };a = void 0 !== a ? a : 20;b = void 0 !== b ? b : 20;c = void 0 !== c ? c : 100;d = d || 8;e = e || 1;g = void 0 !== g ? g : !1;f = void 0 !== f ? f : 0;h = void 0 !== h ? h : 2 * Math.PI;var l = c / 2,
	      k,
	      m,
	      p = [],
	      n = [];for (m = 0; m <= e; m++) {
	    var q = [],
	        s = [],
	        t = m / e,
	        v = t * (b - a) + a;for (k = 0; k <= d; k++) {
	      var u = k / d,
	          w = new THREE.Vector3();w.x = v * Math.sin(u * h + f);w.y = -t * c + l;w.z = v * Math.cos(u * h + f);this.vertices.push(w);q.push(this.vertices.length - 1);s.push(new THREE.Vector2(u, 1 - t));
	    }p.push(q);n.push(s);
	  }c = (b - a) / c;for (k = 0; k < d; k++) {
	    for (0 !== a ? (f = this.vertices[p[0][k]].clone(), h = this.vertices[p[0][k + 1]].clone()) : (f = this.vertices[p[1][k]].clone(), h = this.vertices[p[1][k + 1]].clone()), f.setY(Math.sqrt(f.x * f.x + f.z * f.z) * c).normalize(), h.setY(Math.sqrt(h.x * h.x + h.z * h.z) * c).normalize(), m = 0; m < e; m++) {
	      var q = p[m][k],
	          s = p[m + 1][k],
	          t = p[m + 1][k + 1],
	          v = p[m][k + 1],
	          u = f.clone(),
	          w = f.clone(),
	          D = h.clone(),
	          x = h.clone(),
	          B = n[m][k].clone(),
	          y = n[m + 1][k].clone(),
	          z = n[m + 1][k + 1].clone(),
	          A = n[m][k + 1].clone();this.faces.push(new THREE.Face3(q, s, v, [u, w, x]));this.faceVertexUvs[0].push([B, y, A]);this.faces.push(new THREE.Face3(s, t, v, [w.clone(), D, x.clone()]));this.faceVertexUvs[0].push([y.clone(), z, A.clone()]);
	    }
	  }if (!1 === g && 0 < a) for (this.vertices.push(new THREE.Vector3(0, l, 0)), k = 0; k < d; k++) {
	    q = p[0][k], s = p[0][k + 1], t = this.vertices.length - 1, u = new THREE.Vector3(0, 1, 0), w = new THREE.Vector3(0, 1, 0), D = new THREE.Vector3(0, 1, 0), B = n[0][k].clone(), y = n[0][k + 1].clone(), z = new THREE.Vector2(y.x, 0), this.faces.push(new THREE.Face3(q, s, t, [u, w, D], void 0, 1)), this.faceVertexUvs[0].push([B, y, z]);
	  }if (!1 === g && 0 < b) for (this.vertices.push(new THREE.Vector3(0, -l, 0)), k = 0; k < d; k++) {
	    q = p[e][k + 1], s = p[e][k], t = this.vertices.length - 1, u = new THREE.Vector3(0, -1, 0), w = new THREE.Vector3(0, -1, 0), D = new THREE.Vector3(0, -1, 0), B = n[e][k + 1].clone(), y = n[e][k].clone(), z = new THREE.Vector2(y.x, 1), this.faces.push(new THREE.Face3(q, s, t, [u, w, D], void 0, 2)), this.faceVertexUvs[0].push([B, y, z]);
	  }this.computeFaceNormals();
	};THREE.CylinderGeometry.prototype = Object.create(THREE.Geometry.prototype);THREE.CylinderGeometry.prototype.constructor = THREE.CylinderGeometry;THREE.CylinderGeometry.prototype.clone = function () {
	  var a = this.parameters;return new THREE.CylinderGeometry(a.radiusTop, a.radiusBottom, a.height, a.radialSegments, a.heightSegments, a.openEnded, a.thetaStart, a.thetaLength);
	};
	THREE.EdgesGeometry = function (a, b) {
	  function c(a, b) {
	    return a - b;
	  }THREE.BufferGeometry.call(this);var d = Math.cos(THREE.Math.degToRad(void 0 !== b ? b : 1)),
	      e = [0, 0],
	      g = {},
	      f = ["a", "b", "c"],
	      h;a instanceof THREE.BufferGeometry ? (h = new THREE.Geometry(), h.fromBufferGeometry(a)) : h = a.clone();h.mergeVertices();h.computeFaceNormals();var l = h.vertices;h = h.faces;for (var k = 0, m = h.length; k < m; k++) {
	    for (var p = h[k], n = 0; 3 > n; n++) {
	      e[0] = p[f[n]];e[1] = p[f[(n + 1) % 3]];e.sort(c);var q = e.toString();void 0 === g[q] ? g[q] = { vert1: e[0], vert2: e[1], face1: k,
	        face2: void 0 } : g[q].face2 = k;
	    }
	  }e = [];for (q in g) {
	    if (f = g[q], void 0 === f.face2 || h[f.face1].normal.dot(h[f.face2].normal) <= d) k = l[f.vert1], e.push(k.x), e.push(k.y), e.push(k.z), k = l[f.vert2], e.push(k.x), e.push(k.y), e.push(k.z);
	  }this.addAttribute("position", new THREE.BufferAttribute(new Float32Array(e), 3));
	};THREE.EdgesGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);THREE.EdgesGeometry.prototype.constructor = THREE.EdgesGeometry;
	THREE.ExtrudeGeometry = function (a, b) {
	  "undefined" !== typeof a && (THREE.Geometry.call(this), this.type = "ExtrudeGeometry", a = Array.isArray(a) ? a : [a], this.addShapeList(a, b), this.computeFaceNormals());
	};THREE.ExtrudeGeometry.prototype = Object.create(THREE.Geometry.prototype);THREE.ExtrudeGeometry.prototype.constructor = THREE.ExtrudeGeometry;THREE.ExtrudeGeometry.prototype.addShapeList = function (a, b) {
	  for (var c = a.length, d = 0; d < c; d++) {
	    this.addShape(a[d], b);
	  }
	};
	THREE.ExtrudeGeometry.prototype.addShape = function (a, b) {
	  function c(a, b, c) {
	    b || console.error("THREE.ExtrudeGeometry: vec does not exist");return b.clone().multiplyScalar(c).add(a);
	  }function d(a, b, c) {
	    var d = 1,
	        d = a.x - b.x,
	        e = a.y - b.y,
	        f = c.x - a.x,
	        g = c.y - a.y,
	        h = d * d + e * e;if (Math.abs(d * g - e * f) > Number.EPSILON) {
	      var k = Math.sqrt(h),
	          l = Math.sqrt(f * f + g * g),
	          h = b.x - e / k;b = b.y + d / k;f = ((c.x - g / l - h) * g - (c.y + f / l - b) * f) / (d * g - e * f);c = h + d * f - a.x;a = b + e * f - a.y;d = c * c + a * a;if (2 >= d) return new THREE.Vector2(c, a);d = Math.sqrt(d / 2);
	    } else a = !1, d > Number.EPSILON ? f > Number.EPSILON && (a = !0) : d < -Number.EPSILON ? f < -Number.EPSILON && (a = !0) : Math.sign(e) === Math.sign(g) && (a = !0), a ? (c = -e, a = d, d = Math.sqrt(h)) : (c = d, a = e, d = Math.sqrt(h / 2));return new THREE.Vector2(c / d, a / d);
	  }function e(a, b) {
	    var c, d;for (G = a.length; 0 <= --G;) {
	      c = G;d = G - 1;0 > d && (d = a.length - 1);for (var e = 0, f = q + 2 * m, e = 0; e < f; e++) {
	        var g = T * e,
	            h = T * (e + 1),
	            k = b + c + g,
	            g = b + d + g,
	            l = b + d + h,
	            h = b + c + h,
	            k = k + F,
	            g = g + F,
	            l = l + F,
	            h = h + F;J.faces.push(new THREE.Face3(k, g, h, null, null, 1));J.faces.push(new THREE.Face3(g, l, h, null, null, 1));k = u.generateSideWallUV(J, k, g, l, h);J.faceVertexUvs[0].push([k[0], k[1], k[3]]);J.faceVertexUvs[0].push([k[1], k[2], k[3]]);
	      }
	    }
	  }function g(a, b, c) {
	    J.vertices.push(new THREE.Vector3(a, b, c));
	  }function f(a, b, c) {
	    a += F;b += F;c += F;J.faces.push(new THREE.Face3(a, b, c, null, null, 0));a = u.generateTopUV(J, a, b, c);J.faceVertexUvs[0].push(a);
	  }var h = void 0 !== b.amount ? b.amount : 100,
	      l = void 0 !== b.bevelThickness ? b.bevelThickness : 6,
	      k = void 0 !== b.bevelSize ? b.bevelSize : l - 2,
	      m = void 0 !== b.bevelSegments ? b.bevelSegments : 3,
	      p = void 0 !== b.bevelEnabled ? b.bevelEnabled : !0,
	      n = void 0 !== b.curveSegments ? b.curveSegments : 12,
	      q = void 0 !== b.steps ? b.steps : 1,
	      s = b.extrudePath,
	      t,
	      v = !1,
	      u = void 0 !== b.UVGenerator ? b.UVGenerator : THREE.ExtrudeGeometry.WorldUVGenerator,
	      w,
	      D,
	      x,
	      B;s && (t = s.getSpacedPoints(q), v = !0, p = !1, w = void 0 !== b.frames ? b.frames : new THREE.TubeGeometry.FrenetFrames(s, q, !1), D = new THREE.Vector3(), x = new THREE.Vector3(), B = new THREE.Vector3());p || (k = l = m = 0);var y,
	      z,
	      A,
	      J = this,
	      F = this.vertices.length,
	      s = a.extractPoints(n),
	      n = s.shape,
	      C = s.holes;if (s = !THREE.ShapeUtils.isClockWise(n)) {
	    n = n.reverse();
	    z = 0;for (A = C.length; z < A; z++) {
	      y = C[z], THREE.ShapeUtils.isClockWise(y) && (C[z] = y.reverse());
	    }s = !1;
	  }var N = THREE.ShapeUtils.triangulateShape(n, C),
	      L = n;z = 0;for (A = C.length; z < A; z++) {
	    y = C[z], n = n.concat(y);
	  }var Q,
	      M,
	      K,
	      E,
	      O,
	      T = n.length,
	      H,
	      R = N.length,
	      s = [],
	      G = 0;K = L.length;Q = K - 1;for (M = G + 1; G < K; G++, Q++, M++) {
	    Q === K && (Q = 0), M === K && (M = 0), s[G] = d(L[G], L[Q], L[M]);
	  }var ia = [],
	      U,
	      X = s.concat();z = 0;for (A = C.length; z < A; z++) {
	    y = C[z];U = [];G = 0;K = y.length;Q = K - 1;for (M = G + 1; G < K; G++, Q++, M++) {
	      Q === K && (Q = 0), M === K && (M = 0), U[G] = d(y[G], y[Q], y[M]);
	    }ia.push(U);X = X.concat(U);
	  }for (Q = 0; Q < m; Q++) {
	    K = Q / m;E = l * (1 - K);M = k * Math.sin(K * Math.PI / 2);G = 0;for (K = L.length; G < K; G++) {
	      O = c(L[G], s[G], M), g(O.x, O.y, -E);
	    }z = 0;for (A = C.length; z < A; z++) {
	      for (y = C[z], U = ia[z], G = 0, K = y.length; G < K; G++) {
	        O = c(y[G], U[G], M), g(O.x, O.y, -E);
	      }
	    }
	  }M = k;for (G = 0; G < T; G++) {
	    O = p ? c(n[G], X[G], M) : n[G], v ? (x.copy(w.normals[0]).multiplyScalar(O.x), D.copy(w.binormals[0]).multiplyScalar(O.y), B.copy(t[0]).add(x).add(D), g(B.x, B.y, B.z)) : g(O.x, O.y, 0);
	  }for (K = 1; K <= q; K++) {
	    for (G = 0; G < T; G++) {
	      O = p ? c(n[G], X[G], M) : n[G], v ? (x.copy(w.normals[K]).multiplyScalar(O.x), D.copy(w.binormals[K]).multiplyScalar(O.y), B.copy(t[K]).add(x).add(D), g(B.x, B.y, B.z)) : g(O.x, O.y, h / q * K);
	    }
	  }for (Q = m - 1; 0 <= Q; Q--) {
	    K = Q / m;E = l * (1 - K);M = k * Math.sin(K * Math.PI / 2);G = 0;for (K = L.length; G < K; G++) {
	      O = c(L[G], s[G], M), g(O.x, O.y, h + E);
	    }z = 0;for (A = C.length; z < A; z++) {
	      for (y = C[z], U = ia[z], G = 0, K = y.length; G < K; G++) {
	        O = c(y[G], U[G], M), v ? g(O.x, O.y + t[q - 1].y, t[q - 1].x + E) : g(O.x, O.y, h + E);
	      }
	    }
	  }(function () {
	    if (p) {
	      var a;a = 0 * T;for (G = 0; G < R; G++) {
	        H = N[G], f(H[2] + a, H[1] + a, H[0] + a);
	      }a = q + 2 * m;a *= T;for (G = 0; G < R; G++) {
	        H = N[G], f(H[0] + a, H[1] + a, H[2] + a);
	      }
	    } else {
	      for (G = 0; G < R; G++) {
	        H = N[G], f(H[2], H[1], H[0]);
	      }for (G = 0; G < R; G++) {
	        H = N[G], f(H[0] + T * q, H[1] + T * q, H[2] + T * q);
	      }
	    }
	  })();(function () {
	    var a = 0;e(L, a);a += L.length;z = 0;for (A = C.length; z < A; z++) {
	      y = C[z], e(y, a), a += y.length;
	    }
	  })();
	};
	THREE.ExtrudeGeometry.WorldUVGenerator = { generateTopUV: function generateTopUV(a, b, c, d) {
	    a = a.vertices;b = a[b];c = a[c];d = a[d];return [new THREE.Vector2(b.x, b.y), new THREE.Vector2(c.x, c.y), new THREE.Vector2(d.x, d.y)];
	  }, generateSideWallUV: function generateSideWallUV(a, b, c, d, e) {
	    a = a.vertices;b = a[b];c = a[c];d = a[d];e = a[e];return .01 > Math.abs(b.y - c.y) ? [new THREE.Vector2(b.x, 1 - b.z), new THREE.Vector2(c.x, 1 - c.z), new THREE.Vector2(d.x, 1 - d.z), new THREE.Vector2(e.x, 1 - e.z)] : [new THREE.Vector2(b.y, 1 - b.z), new THREE.Vector2(c.y, 1 - c.z), new THREE.Vector2(d.y, 1 - d.z), new THREE.Vector2(e.y, 1 - e.z)];
	  } };THREE.ShapeGeometry = function (a, b) {
	  THREE.Geometry.call(this);this.type = "ShapeGeometry";!1 === Array.isArray(a) && (a = [a]);this.addShapeList(a, b);this.computeFaceNormals();
	};THREE.ShapeGeometry.prototype = Object.create(THREE.Geometry.prototype);THREE.ShapeGeometry.prototype.constructor = THREE.ShapeGeometry;THREE.ShapeGeometry.prototype.addShapeList = function (a, b) {
	  for (var c = 0, d = a.length; c < d; c++) {
	    this.addShape(a[c], b);
	  }return this;
	};
	THREE.ShapeGeometry.prototype.addShape = function (a, b) {
	  void 0 === b && (b = {});var c = b.material,
	      d = void 0 === b.UVGenerator ? THREE.ExtrudeGeometry.WorldUVGenerator : b.UVGenerator,
	      e,
	      g,
	      f,
	      h = this.vertices.length;e = a.extractPoints(void 0 !== b.curveSegments ? b.curveSegments : 12);var l = e.shape,
	      k = e.holes;if (!THREE.ShapeUtils.isClockWise(l)) for (l = l.reverse(), e = 0, g = k.length; e < g; e++) {
	    f = k[e], THREE.ShapeUtils.isClockWise(f) && (k[e] = f.reverse());
	  }var m = THREE.ShapeUtils.triangulateShape(l, k);e = 0;for (g = k.length; e < g; e++) {
	    f = k[e], l = l.concat(f);
	  }k = l.length;g = m.length;for (e = 0; e < k; e++) {
	    f = l[e], this.vertices.push(new THREE.Vector3(f.x, f.y, 0));
	  }for (e = 0; e < g; e++) {
	    k = m[e], l = k[0] + h, f = k[1] + h, k = k[2] + h, this.faces.push(new THREE.Face3(l, f, k, null, null, c)), this.faceVertexUvs[0].push(d.generateTopUV(this, l, f, k));
	  }
	};
	THREE.LatheGeometry = function (a, b, c, d) {
	  THREE.Geometry.call(this);this.type = "LatheGeometry";this.parameters = { points: a, segments: b, phiStart: c, phiLength: d };b = b || 12;c = c || 0;d = d || 2 * Math.PI;for (var e = 1 / (a.length - 1), g = 1 / b, f = 0, h = b; f <= h; f++) {
	    for (var l = c + f * g * d, k = Math.cos(l), m = Math.sin(l), l = 0, p = a.length; l < p; l++) {
	      var n = a[l],
	          q = new THREE.Vector3();q.x = k * n.x - m * n.y;q.y = m * n.x + k * n.y;q.z = n.z;this.vertices.push(q);
	    }
	  }c = a.length;f = 0;for (h = b; f < h; f++) {
	    for (l = 0, p = a.length - 1; l < p; l++) {
	      b = m = l + c * f;d = m + c;var k = m + 1 + c,
	          m = m + 1,
	          n = f * g,
	          q = l * e,
	          s = n + g,
	          t = q + e;this.faces.push(new THREE.Face3(b, d, m));this.faceVertexUvs[0].push([new THREE.Vector2(n, q), new THREE.Vector2(s, q), new THREE.Vector2(n, t)]);this.faces.push(new THREE.Face3(d, k, m));this.faceVertexUvs[0].push([new THREE.Vector2(s, q), new THREE.Vector2(s, t), new THREE.Vector2(n, t)]);
	    }
	  }this.mergeVertices();this.computeFaceNormals();this.computeVertexNormals();
	};THREE.LatheGeometry.prototype = Object.create(THREE.Geometry.prototype);THREE.LatheGeometry.prototype.constructor = THREE.LatheGeometry;
	THREE.PlaneGeometry = function (a, b, c, d) {
	  THREE.Geometry.call(this);this.type = "PlaneGeometry";this.parameters = { width: a, height: b, widthSegments: c, heightSegments: d };this.fromBufferGeometry(new THREE.PlaneBufferGeometry(a, b, c, d));
	};THREE.PlaneGeometry.prototype = Object.create(THREE.Geometry.prototype);THREE.PlaneGeometry.prototype.constructor = THREE.PlaneGeometry;THREE.PlaneGeometry.prototype.clone = function () {
	  var a = this.parameters;return new THREE.PlaneGeometry(a.width, a.height, a.widthSegments, a.heightSegments);
	};
	THREE.PlaneBufferGeometry = function (a, b, c, d) {
	  THREE.BufferGeometry.call(this);this.type = "PlaneBufferGeometry";this.parameters = { width: a, height: b, widthSegments: c, heightSegments: d };var e = a / 2,
	      g = b / 2;c = Math.floor(c) || 1;d = Math.floor(d) || 1;var f = c + 1,
	      h = d + 1,
	      l = a / c,
	      k = b / d;b = new Float32Array(f * h * 3);a = new Float32Array(f * h * 3);for (var m = new Float32Array(f * h * 2), p = 0, n = 0, q = 0; q < h; q++) {
	    for (var s = q * k - g, t = 0; t < f; t++) {
	      b[p] = t * l - e, b[p + 1] = -s, a[p + 2] = 1, m[n] = t / c, m[n + 1] = 1 - q / d, p += 3, n += 2;
	    }
	  }p = 0;e = new (65535 < b.length / 3 ? Uint32Array : Uint16Array)(c * d * 6);for (q = 0; q < d; q++) {
	    for (t = 0; t < c; t++) {
	      g = t + f * (q + 1), h = t + 1 + f * (q + 1), l = t + 1 + f * q, e[p] = t + f * q, e[p + 1] = g, e[p + 2] = l, e[p + 3] = g, e[p + 4] = h, e[p + 5] = l, p += 6;
	    }
	  }this.setIndex(new THREE.BufferAttribute(e, 1));this.addAttribute("position", new THREE.BufferAttribute(b, 3));this.addAttribute("normal", new THREE.BufferAttribute(a, 3));this.addAttribute("uv", new THREE.BufferAttribute(m, 2));
	};THREE.PlaneBufferGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);THREE.PlaneBufferGeometry.prototype.constructor = THREE.PlaneBufferGeometry;
	THREE.PlaneBufferGeometry.prototype.clone = function () {
	  var a = this.parameters;return new THREE.PlaneBufferGeometry(a.width, a.height, a.widthSegments, a.heightSegments);
	};
	THREE.RingGeometry = function (a, b, c, d, e, g) {
	  THREE.Geometry.call(this);this.type = "RingGeometry";this.parameters = { innerRadius: a, outerRadius: b, thetaSegments: c, phiSegments: d, thetaStart: e, thetaLength: g };a = a || 0;b = b || 50;e = void 0 !== e ? e : 0;g = void 0 !== g ? g : 2 * Math.PI;c = void 0 !== c ? Math.max(3, c) : 8;d = void 0 !== d ? Math.max(1, d) : 8;var f,
	      h = [],
	      l = a,
	      k = (b - a) / d;for (a = 0; a < d + 1; a++) {
	    for (f = 0; f < c + 1; f++) {
	      var m = new THREE.Vector3(),
	          p = e + f / c * g;m.x = l * Math.cos(p);m.y = l * Math.sin(p);this.vertices.push(m);h.push(new THREE.Vector2((m.x / b + 1) / 2, (m.y / b + 1) / 2));
	    }l += k;
	  }b = new THREE.Vector3(0, 0, 1);for (a = 0; a < d; a++) {
	    for (e = a * (c + 1), f = 0; f < c; f++) {
	      g = p = f + e, k = p + c + 1, m = p + c + 2, this.faces.push(new THREE.Face3(g, k, m, [b.clone(), b.clone(), b.clone()])), this.faceVertexUvs[0].push([h[g].clone(), h[k].clone(), h[m].clone()]), g = p, k = p + c + 2, m = p + 1, this.faces.push(new THREE.Face3(g, k, m, [b.clone(), b.clone(), b.clone()])), this.faceVertexUvs[0].push([h[g].clone(), h[k].clone(), h[m].clone()]);
	    }
	  }this.computeFaceNormals();this.boundingSphere = new THREE.Sphere(new THREE.Vector3(), l);
	};
	THREE.RingGeometry.prototype = Object.create(THREE.Geometry.prototype);THREE.RingGeometry.prototype.constructor = THREE.RingGeometry;THREE.RingGeometry.prototype.clone = function () {
	  var a = this.parameters;return new THREE.RingGeometry(a.innerRadius, a.outerRadius, a.thetaSegments, a.phiSegments, a.thetaStart, a.thetaLength);
	};
	THREE.SphereGeometry = function (a, b, c, d, e, g, f) {
	  THREE.Geometry.call(this);this.type = "SphereGeometry";this.parameters = { radius: a, widthSegments: b, heightSegments: c, phiStart: d, phiLength: e, thetaStart: g, thetaLength: f };this.fromBufferGeometry(new THREE.SphereBufferGeometry(a, b, c, d, e, g, f));
	};THREE.SphereGeometry.prototype = Object.create(THREE.Geometry.prototype);THREE.SphereGeometry.prototype.constructor = THREE.SphereGeometry;
	THREE.SphereGeometry.prototype.clone = function () {
	  var a = this.parameters;return new THREE.SphereGeometry(a.radius, a.widthSegments, a.heightSegments, a.phiStart, a.phiLength, a.thetaStart, a.thetaLength);
	};
	THREE.SphereBufferGeometry = function (a, b, c, d, e, g, f) {
	  THREE.BufferGeometry.call(this);this.type = "SphereBufferGeometry";this.parameters = { radius: a, widthSegments: b, heightSegments: c, phiStart: d, phiLength: e, thetaStart: g, thetaLength: f };a = a || 50;b = Math.max(3, Math.floor(b) || 8);c = Math.max(2, Math.floor(c) || 6);d = void 0 !== d ? d : 0;e = void 0 !== e ? e : 2 * Math.PI;g = void 0 !== g ? g : 0;f = void 0 !== f ? f : Math.PI;for (var h = g + f, l = (b + 1) * (c + 1), k = new THREE.BufferAttribute(new Float32Array(3 * l), 3), m = new THREE.BufferAttribute(new Float32Array(3 * l), 3), l = new THREE.BufferAttribute(new Float32Array(2 * l), 2), p = 0, n = [], q = new THREE.Vector3(), s = 0; s <= c; s++) {
	    for (var t = [], v = s / c, u = 0; u <= b; u++) {
	      var w = u / b,
	          D = -a * Math.cos(d + w * e) * Math.sin(g + v * f),
	          x = a * Math.cos(g + v * f),
	          B = a * Math.sin(d + w * e) * Math.sin(g + v * f);q.set(D, x, B).normalize();k.setXYZ(p, D, x, B);m.setXYZ(p, q.x, q.y, q.z);l.setXY(p, w, 1 - v);t.push(p);p++;
	    }n.push(t);
	  }d = [];for (s = 0; s < c; s++) {
	    for (u = 0; u < b; u++) {
	      e = n[s][u + 1], f = n[s][u], p = n[s + 1][u], q = n[s + 1][u + 1], (0 !== s || 0 < g) && d.push(e, f, q), (s !== c - 1 || h < Math.PI) && d.push(f, p, q);
	    }
	  }this.setIndex(new (65535 < k.count ? THREE.Uint32Attribute : THREE.Uint16Attribute)(d, 1));this.addAttribute("position", k);this.addAttribute("normal", m);this.addAttribute("uv", l);this.boundingSphere = new THREE.Sphere(new THREE.Vector3(), a);
	};THREE.SphereBufferGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);THREE.SphereBufferGeometry.prototype.constructor = THREE.SphereBufferGeometry;
	THREE.SphereBufferGeometry.prototype.clone = function () {
	  var a = this.parameters;return new THREE.SphereBufferGeometry(a.radius, a.widthSegments, a.heightSegments, a.phiStart, a.phiLength, a.thetaStart, a.thetaLength);
	};
	THREE.TorusGeometry = function (a, b, c, d, e) {
	  THREE.Geometry.call(this);this.type = "TorusGeometry";this.parameters = { radius: a, tube: b, radialSegments: c, tubularSegments: d, arc: e };a = a || 100;b = b || 40;c = c || 8;d = d || 6;e = e || 2 * Math.PI;for (var g = new THREE.Vector3(), f = [], h = [], l = 0; l <= c; l++) {
	    for (var k = 0; k <= d; k++) {
	      var m = k / d * e,
	          p = l / c * Math.PI * 2;g.x = a * Math.cos(m);g.y = a * Math.sin(m);var n = new THREE.Vector3();n.x = (a + b * Math.cos(p)) * Math.cos(m);n.y = (a + b * Math.cos(p)) * Math.sin(m);n.z = b * Math.sin(p);this.vertices.push(n);f.push(new THREE.Vector2(k / d, l / c));h.push(n.clone().sub(g).normalize());
	    }
	  }for (l = 1; l <= c; l++) {
	    for (k = 1; k <= d; k++) {
	      a = (d + 1) * l + k - 1, b = (d + 1) * (l - 1) + k - 1, e = (d + 1) * (l - 1) + k, g = (d + 1) * l + k, m = new THREE.Face3(a, b, g, [h[a].clone(), h[b].clone(), h[g].clone()]), this.faces.push(m), this.faceVertexUvs[0].push([f[a].clone(), f[b].clone(), f[g].clone()]), m = new THREE.Face3(b, e, g, [h[b].clone(), h[e].clone(), h[g].clone()]), this.faces.push(m), this.faceVertexUvs[0].push([f[b].clone(), f[e].clone(), f[g].clone()]);
	    }
	  }this.computeFaceNormals();
	};
	THREE.TorusGeometry.prototype = Object.create(THREE.Geometry.prototype);THREE.TorusGeometry.prototype.constructor = THREE.TorusGeometry;THREE.TorusGeometry.prototype.clone = function () {
	  var a = this.parameters;return new THREE.TorusGeometry(a.radius, a.tube, a.radialSegments, a.tubularSegments, a.arc);
	};
	THREE.TorusKnotGeometry = function (a, b, c, d, e, g, f) {
	  function h(a, b, c, d, e) {
	    var f = Math.cos(a),
	        g = Math.sin(a);a *= b / c;b = Math.cos(a);f *= d * (2 + b) * .5;g = d * (2 + b) * g * .5;d = e * d * Math.sin(a) * .5;return new THREE.Vector3(f, g, d);
	  }THREE.Geometry.call(this);this.type = "TorusKnotGeometry";this.parameters = { radius: a, tube: b, radialSegments: c, tubularSegments: d, p: e, q: g, heightScale: f };a = a || 100;b = b || 40;c = c || 64;d = d || 8;e = e || 2;g = g || 3;f = f || 1;for (var l = Array(c), k = new THREE.Vector3(), m = new THREE.Vector3(), p = new THREE.Vector3(), n = 0; n < c; ++n) {
	    l[n] = Array(d);var q = n / c * 2 * e * Math.PI,
	        s = h(q, g, e, a, f),
	        q = h(q + .01, g, e, a, f);k.subVectors(q, s);m.addVectors(q, s);p.crossVectors(k, m);m.crossVectors(p, k);p.normalize();m.normalize();for (q = 0; q < d; ++q) {
	      var t = q / d * 2 * Math.PI,
	          v = -b * Math.cos(t),
	          t = b * Math.sin(t),
	          u = new THREE.Vector3();u.x = s.x + v * m.x + t * p.x;u.y = s.y + v * m.y + t * p.y;u.z = s.z + v * m.z + t * p.z;l[n][q] = this.vertices.push(u) - 1;
	    }
	  }for (n = 0; n < c; ++n) {
	    for (q = 0; q < d; ++q) {
	      e = (n + 1) % c, g = (q + 1) % d, a = l[n][q], b = l[e][q], e = l[e][g], g = l[n][g], f = new THREE.Vector2(n / c, q / d), k = new THREE.Vector2((n + 1) / c, q / d), m = new THREE.Vector2((n + 1) / c, (q + 1) / d), p = new THREE.Vector2(n / c, (q + 1) / d), this.faces.push(new THREE.Face3(a, b, g)), this.faceVertexUvs[0].push([f, k, p]), this.faces.push(new THREE.Face3(b, e, g)), this.faceVertexUvs[0].push([k.clone(), m, p.clone()]);
	    }
	  }this.computeFaceNormals();this.computeVertexNormals();
	};THREE.TorusKnotGeometry.prototype = Object.create(THREE.Geometry.prototype);THREE.TorusKnotGeometry.prototype.constructor = THREE.TorusKnotGeometry;
	THREE.TorusKnotGeometry.prototype.clone = function () {
	  var a = this.parameters;return new THREE.TorusKnotGeometry(a.radius, a.tube, a.radialSegments, a.tubularSegments, a.p, a.q, a.heightScale);
	};
	THREE.TubeGeometry = function (a, b, c, d, e, g) {
	  THREE.Geometry.call(this);this.type = "TubeGeometry";this.parameters = { path: a, segments: b, radius: c, radialSegments: d, closed: e, taper: g };b = b || 64;c = c || 1;d = d || 8;e = e || !1;g = g || THREE.TubeGeometry.NoTaper;var f = [],
	      h,
	      l,
	      k = b + 1,
	      m,
	      p,
	      n,
	      q,
	      s,
	      t = new THREE.Vector3(),
	      v,
	      u,
	      w;v = new THREE.TubeGeometry.FrenetFrames(a, b, e);u = v.normals;w = v.binormals;this.tangents = v.tangents;this.normals = u;this.binormals = w;for (v = 0; v < k; v++) {
	    for (f[v] = [], m = v / (k - 1), s = a.getPointAt(m), h = u[v], l = w[v], n = c * g(m), m = 0; m < d; m++) {
	      p = m / d * 2 * Math.PI, q = -n * Math.cos(p), p = n * Math.sin(p), t.copy(s), t.x += q * h.x + p * l.x, t.y += q * h.y + p * l.y, t.z += q * h.z + p * l.z, f[v][m] = this.vertices.push(new THREE.Vector3(t.x, t.y, t.z)) - 1;
	    }
	  }for (v = 0; v < b; v++) {
	    for (m = 0; m < d; m++) {
	      g = e ? (v + 1) % b : v + 1, k = (m + 1) % d, a = f[v][m], c = f[g][m], g = f[g][k], k = f[v][k], t = new THREE.Vector2(v / b, m / d), u = new THREE.Vector2((v + 1) / b, m / d), w = new THREE.Vector2((v + 1) / b, (m + 1) / d), h = new THREE.Vector2(v / b, (m + 1) / d), this.faces.push(new THREE.Face3(a, c, k)), this.faceVertexUvs[0].push([t, u, h]), this.faces.push(new THREE.Face3(c, g, k)), this.faceVertexUvs[0].push([u.clone(), w, h.clone()]);
	    }
	  }this.computeFaceNormals();this.computeVertexNormals();
	};THREE.TubeGeometry.prototype = Object.create(THREE.Geometry.prototype);THREE.TubeGeometry.prototype.constructor = THREE.TubeGeometry;THREE.TubeGeometry.prototype.clone = function () {
	  return new this.constructor(this.parameters.path, this.parameters.segments, this.parameters.radius, this.parameters.radialSegments, this.parameters.closed, this.parameters.taper);
	};THREE.TubeGeometry.NoTaper = function (a) {
	  return 1;
	};
	THREE.TubeGeometry.SinusoidalTaper = function (a) {
	  return Math.sin(Math.PI * a);
	};
	THREE.TubeGeometry.FrenetFrames = function (a, b, c) {
	  var d = new THREE.Vector3(),
	      e = [],
	      g = [],
	      f = [],
	      h = new THREE.Vector3(),
	      l = new THREE.Matrix4();b += 1;var k, m, p;this.tangents = e;this.normals = g;this.binormals = f;for (k = 0; k < b; k++) {
	    m = k / (b - 1), e[k] = a.getTangentAt(m), e[k].normalize();
	  }g[0] = new THREE.Vector3();f[0] = new THREE.Vector3();a = Number.MAX_VALUE;k = Math.abs(e[0].x);m = Math.abs(e[0].y);p = Math.abs(e[0].z);k <= a && (a = k, d.set(1, 0, 0));m <= a && (a = m, d.set(0, 1, 0));p <= a && d.set(0, 0, 1);h.crossVectors(e[0], d).normalize();g[0].crossVectors(e[0], h);f[0].crossVectors(e[0], g[0]);for (k = 1; k < b; k++) {
	    g[k] = g[k - 1].clone(), f[k] = f[k - 1].clone(), h.crossVectors(e[k - 1], e[k]), h.length() > Number.EPSILON && (h.normalize(), d = Math.acos(THREE.Math.clamp(e[k - 1].dot(e[k]), -1, 1)), g[k].applyMatrix4(l.makeRotationAxis(h, d))), f[k].crossVectors(e[k], g[k]);
	  }if (c) for (d = Math.acos(THREE.Math.clamp(g[0].dot(g[b - 1]), -1, 1)), d /= b - 1, 0 < e[0].dot(h.crossVectors(g[0], g[b - 1])) && (d = -d), k = 1; k < b; k++) {
	    g[k].applyMatrix4(l.makeRotationAxis(e[k], d * k)), f[k].crossVectors(e[k], g[k]);
	  }
	};
	THREE.PolyhedronGeometry = function (a, b, c, d) {
	  function e(a) {
	    var b = a.normalize().clone();b.index = l.vertices.push(b) - 1;var c = Math.atan2(a.z, -a.x) / 2 / Math.PI + .5;a = Math.atan2(-a.y, Math.sqrt(a.x * a.x + a.z * a.z)) / Math.PI + .5;b.uv = new THREE.Vector2(c, 1 - a);return b;
	  }function g(a, b, c, d) {
	    d = new THREE.Face3(a.index, b.index, c.index, [a.clone(), b.clone(), c.clone()], void 0, d);l.faces.push(d);v.copy(a).add(b).add(c).divideScalar(3);d = Math.atan2(v.z, -v.x);l.faceVertexUvs[0].push([h(a.uv, a, d), h(b.uv, b, d), h(c.uv, c, d)]);
	  }function f(a, b) {
	    for (var c = Math.pow(2, b), d = e(l.vertices[a.a]), f = e(l.vertices[a.b]), h = e(l.vertices[a.c]), k = [], n = a.materialIndex, m = 0; m <= c; m++) {
	      k[m] = [];for (var p = e(d.clone().lerp(h, m / c)), q = e(f.clone().lerp(h, m / c)), s = c - m, t = 0; t <= s; t++) {
	        k[m][t] = 0 === t && m === c ? p : e(p.clone().lerp(q, t / s));
	      }
	    }for (m = 0; m < c; m++) {
	      for (t = 0; t < 2 * (c - m) - 1; t++) {
	        d = Math.floor(t / 2), 0 === t % 2 ? g(k[m][d + 1], k[m + 1][d], k[m][d], n) : g(k[m][d + 1], k[m + 1][d + 1], k[m + 1][d], n);
	      }
	    }
	  }function h(a, b, c) {
	    0 > c && 1 === a.x && (a = new THREE.Vector2(a.x - 1, a.y));0 === b.x && 0 === b.z && (a = new THREE.Vector2(c / 2 / Math.PI + .5, a.y));return a.clone();
	  }THREE.Geometry.call(this);this.type = "PolyhedronGeometry";this.parameters = { vertices: a, indices: b, radius: c, detail: d };c = c || 1;d = d || 0;for (var l = this, k = 0, m = a.length; k < m; k += 3) {
	    e(new THREE.Vector3(a[k], a[k + 1], a[k + 2]));
	  }a = this.vertices;for (var p = [], n = k = 0, m = b.length; k < m; k += 3, n++) {
	    var q = a[b[k]],
	        s = a[b[k + 1]],
	        t = a[b[k + 2]];p[n] = new THREE.Face3(q.index, s.index, t.index, [q.clone(), s.clone(), t.clone()], void 0, n);
	  }for (var v = new THREE.Vector3(), k = 0, m = p.length; k < m; k++) {
	    f(p[k], d);
	  }k = 0;for (m = this.faceVertexUvs[0].length; k < m; k++) {
	    b = this.faceVertexUvs[0][k], d = b[0].x, a = b[1].x, p = b[2].x, n = Math.max(d, a, p), q = Math.min(d, a, p), .9 < n && .1 > q && (.2 > d && (b[0].x += 1), .2 > a && (b[1].x += 1), .2 > p && (b[2].x += 1));
	  }k = 0;for (m = this.vertices.length; k < m; k++) {
	    this.vertices[k].multiplyScalar(c);
	  }this.mergeVertices();this.computeFaceNormals();this.boundingSphere = new THREE.Sphere(new THREE.Vector3(), c);
	};THREE.PolyhedronGeometry.prototype = Object.create(THREE.Geometry.prototype);THREE.PolyhedronGeometry.prototype.constructor = THREE.PolyhedronGeometry;
	THREE.PolyhedronGeometry.prototype.clone = function () {
	  var a = this.parameters;return new THREE.PolyhedronGeometry(a.vertices, a.indices, a.radius, a.detail);
	};
	THREE.DodecahedronGeometry = function (a, b) {
	  var c = (1 + Math.sqrt(5)) / 2,
	      d = 1 / c;THREE.PolyhedronGeometry.call(this, [-1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, 0, -d, -c, 0, -d, c, 0, d, -c, 0, d, c, -d, -c, 0, -d, c, 0, d, -c, 0, d, c, 0, -c, 0, -d, c, 0, -d, -c, 0, d, c, 0, d], [3, 11, 7, 3, 7, 15, 3, 15, 13, 7, 19, 17, 7, 17, 6, 7, 6, 15, 17, 4, 8, 17, 8, 10, 17, 10, 6, 8, 0, 16, 8, 16, 2, 8, 2, 10, 0, 12, 1, 0, 1, 18, 0, 18, 16, 6, 10, 2, 6, 2, 13, 6, 13, 15, 2, 16, 18, 2, 18, 3, 2, 3, 13, 18, 1, 9, 18, 9, 11, 18, 11, 3, 4, 14, 12, 4, 12, 0, 4, 0, 8, 11, 9, 5, 11, 5, 19, 11, 19, 7, 19, 5, 14, 19, 14, 4, 19, 4, 17, 1, 12, 14, 1, 14, 5, 1, 5, 9], a, b);this.type = "DodecahedronGeometry";this.parameters = { radius: a, detail: b };
	};THREE.DodecahedronGeometry.prototype = Object.create(THREE.PolyhedronGeometry.prototype);THREE.DodecahedronGeometry.prototype.constructor = THREE.DodecahedronGeometry;THREE.DodecahedronGeometry.prototype.clone = function () {
	  var a = this.parameters;return new THREE.DodecahedronGeometry(a.radius, a.detail);
	};
	THREE.IcosahedronGeometry = function (a, b) {
	  var c = (1 + Math.sqrt(5)) / 2;THREE.PolyhedronGeometry.call(this, [-1, c, 0, 1, c, 0, -1, -c, 0, 1, -c, 0, 0, -1, c, 0, 1, c, 0, -1, -c, 0, 1, -c, c, 0, -1, c, 0, 1, -c, 0, -1, -c, 0, 1], [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1], a, b);this.type = "IcosahedronGeometry";this.parameters = { radius: a, detail: b };
	};THREE.IcosahedronGeometry.prototype = Object.create(THREE.PolyhedronGeometry.prototype);
	THREE.IcosahedronGeometry.prototype.constructor = THREE.IcosahedronGeometry;THREE.IcosahedronGeometry.prototype.clone = function () {
	  var a = this.parameters;return new THREE.IcosahedronGeometry(a.radius, a.detail);
	};THREE.OctahedronGeometry = function (a, b) {
	  THREE.PolyhedronGeometry.call(this, [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1], [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2], a, b);this.type = "OctahedronGeometry";this.parameters = { radius: a, detail: b };
	};THREE.OctahedronGeometry.prototype = Object.create(THREE.PolyhedronGeometry.prototype);
	THREE.OctahedronGeometry.prototype.constructor = THREE.OctahedronGeometry;THREE.OctahedronGeometry.prototype.clone = function () {
	  var a = this.parameters;return new THREE.OctahedronGeometry(a.radius, a.detail);
	};THREE.TetrahedronGeometry = function (a, b) {
	  THREE.PolyhedronGeometry.call(this, [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1], [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1], a, b);this.type = "TetrahedronGeometry";this.parameters = { radius: a, detail: b };
	};THREE.TetrahedronGeometry.prototype = Object.create(THREE.PolyhedronGeometry.prototype);
	THREE.TetrahedronGeometry.prototype.constructor = THREE.TetrahedronGeometry;THREE.TetrahedronGeometry.prototype.clone = function () {
	  var a = this.parameters;return new THREE.TetrahedronGeometry(a.radius, a.detail);
	};
	THREE.ParametricGeometry = function (a, b, c) {
	  THREE.Geometry.call(this);this.type = "ParametricGeometry";this.parameters = { func: a, slices: b, stacks: c };var d = this.vertices,
	      e = this.faces,
	      g = this.faceVertexUvs[0],
	      f,
	      h,
	      l,
	      k,
	      m = b + 1;for (f = 0; f <= c; f++) {
	    for (k = f / c, h = 0; h <= b; h++) {
	      l = h / b, l = a(l, k), d.push(l);
	    }
	  }var p, n, q, s;for (f = 0; f < c; f++) {
	    for (h = 0; h < b; h++) {
	      a = f * m + h, d = f * m + h + 1, k = (f + 1) * m + h + 1, l = (f + 1) * m + h, p = new THREE.Vector2(h / b, f / c), n = new THREE.Vector2((h + 1) / b, f / c), q = new THREE.Vector2((h + 1) / b, (f + 1) / c), s = new THREE.Vector2(h / b, (f + 1) / c), e.push(new THREE.Face3(a, d, l)), g.push([p, n, s]), e.push(new THREE.Face3(d, k, l)), g.push([n.clone(), q, s.clone()]);
	    }
	  }this.computeFaceNormals();this.computeVertexNormals();
	};THREE.ParametricGeometry.prototype = Object.create(THREE.Geometry.prototype);THREE.ParametricGeometry.prototype.constructor = THREE.ParametricGeometry;
	THREE.WireframeGeometry = function (a) {
	  function b(a, b) {
	    return a - b;
	  }THREE.BufferGeometry.call(this);var c = [0, 0],
	      d = {},
	      e = ["a", "b", "c"];if (a instanceof THREE.Geometry) {
	    var g = a.vertices,
	        f = a.faces,
	        h = 0,
	        l = new Uint32Array(6 * f.length);a = 0;for (var k = f.length; a < k; a++) {
	      for (var m = f[a], p = 0; 3 > p; p++) {
	        c[0] = m[e[p]];c[1] = m[e[(p + 1) % 3]];c.sort(b);var n = c.toString();void 0 === d[n] && (l[2 * h] = c[0], l[2 * h + 1] = c[1], d[n] = !0, h++);
	      }
	    }c = new Float32Array(6 * h);a = 0;for (k = h; a < k; a++) {
	      for (p = 0; 2 > p; p++) {
	        d = g[l[2 * a + p]], h = 6 * a + 3 * p, c[h + 0] = d.x, c[h + 1] = d.y, c[h + 2] = d.z;
	      }
	    }this.addAttribute("position", new THREE.BufferAttribute(c, 3));
	  } else if (a instanceof THREE.BufferGeometry) {
	    if (null !== a.index) {
	      k = a.index.array;g = a.attributes.position;e = a.drawcalls;h = 0;0 === e.length && a.addGroup(0, k.length);l = new Uint32Array(2 * k.length);f = 0;for (m = e.length; f < m; ++f) {
	        a = e[f];p = a.start;n = a.count;a = p;for (var q = p + n; a < q; a += 3) {
	          for (p = 0; 3 > p; p++) {
	            c[0] = k[a + p], c[1] = k[a + (p + 1) % 3], c.sort(b), n = c.toString(), void 0 === d[n] && (l[2 * h] = c[0], l[2 * h + 1] = c[1], d[n] = !0, h++);
	          }
	        }
	      }c = new Float32Array(6 * h);a = 0;for (k = h; a < k; a++) {
	        for (p = 0; 2 > p; p++) {
	          h = 6 * a + 3 * p, d = l[2 * a + p], c[h + 0] = g.getX(d), c[h + 1] = g.getY(d), c[h + 2] = g.getZ(d);
	        }
	      }
	    } else for (g = a.attributes.position.array, h = g.length / 3, l = h / 3, c = new Float32Array(6 * h), a = 0, k = l; a < k; a++) {
	      for (p = 0; 3 > p; p++) {
	        h = 18 * a + 6 * p, l = 9 * a + 3 * p, c[h + 0] = g[l], c[h + 1] = g[l + 1], c[h + 2] = g[l + 2], d = 9 * a + (p + 1) % 3 * 3, c[h + 3] = g[d], c[h + 4] = g[d + 1], c[h + 5] = g[d + 2];
	      }
	    }this.addAttribute("position", new THREE.BufferAttribute(c, 3));
	  }
	};THREE.WireframeGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);
	THREE.WireframeGeometry.prototype.constructor = THREE.WireframeGeometry;THREE.AxisHelper = function (a) {
	  a = a || 1;var b = new Float32Array([0, 0, 0, a, 0, 0, 0, 0, 0, 0, a, 0, 0, 0, 0, 0, 0, a]),
	      c = new Float32Array([1, 0, 0, 1, .6, 0, 0, 1, 0, .6, 1, 0, 0, 0, 1, 0, .6, 1]);a = new THREE.BufferGeometry();a.addAttribute("position", new THREE.BufferAttribute(b, 3));a.addAttribute("color", new THREE.BufferAttribute(c, 3));b = new THREE.LineBasicMaterial({ vertexColors: THREE.VertexColors });THREE.LineSegments.call(this, a, b);
	};THREE.AxisHelper.prototype = Object.create(THREE.LineSegments.prototype);
	THREE.AxisHelper.prototype.constructor = THREE.AxisHelper;
	THREE.ArrowHelper = function () {
	  var a = new THREE.Geometry();a.vertices.push(new THREE.Vector3(0, 0, 0), new THREE.Vector3(0, 1, 0));var b = new THREE.CylinderGeometry(0, .5, 1, 5, 1);b.translate(0, -.5, 0);return function (c, d, e, g, f, h) {
	    THREE.Object3D.call(this);void 0 === g && (g = 16776960);void 0 === e && (e = 1);void 0 === f && (f = .2 * e);void 0 === h && (h = .2 * f);this.position.copy(d);f < e && (this.line = new THREE.Line(a, new THREE.LineBasicMaterial({ color: g })), this.line.matrixAutoUpdate = !1, this.add(this.line));this.cone = new THREE.Mesh(b, new THREE.MeshBasicMaterial({ color: g }));
	    this.cone.matrixAutoUpdate = !1;this.add(this.cone);this.setDirection(c);this.setLength(e, f, h);
	  };
	}();THREE.ArrowHelper.prototype = Object.create(THREE.Object3D.prototype);THREE.ArrowHelper.prototype.constructor = THREE.ArrowHelper;THREE.ArrowHelper.prototype.setDirection = function () {
	  var a = new THREE.Vector3(),
	      b;return function (c) {
	    .99999 < c.y ? this.quaternion.set(0, 0, 0, 1) : -.99999 > c.y ? this.quaternion.set(1, 0, 0, 0) : (a.set(c.z, 0, -c.x).normalize(), b = Math.acos(c.y), this.quaternion.setFromAxisAngle(a, b));
	  };
	}();
	THREE.ArrowHelper.prototype.setLength = function (a, b, c) {
	  void 0 === b && (b = .2 * a);void 0 === c && (c = .2 * b);b < a && (this.line.scale.set(1, a - b, 1), this.line.updateMatrix());this.cone.scale.set(c, b, c);this.cone.position.y = a;this.cone.updateMatrix();
	};THREE.ArrowHelper.prototype.setColor = function (a) {
	  void 0 !== this.line && this.line.material.color.set(a);this.cone.material.color.set(a);
	};
	THREE.BoxHelper = function (a) {
	  var b = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]),
	      c = new Float32Array(24),
	      d = new THREE.BufferGeometry();d.setIndex(new THREE.BufferAttribute(b, 1));d.addAttribute("position", new THREE.BufferAttribute(c, 3));THREE.LineSegments.call(this, d, new THREE.LineBasicMaterial({ color: 16776960 }));void 0 !== a && this.update(a);
	};THREE.BoxHelper.prototype = Object.create(THREE.LineSegments.prototype);THREE.BoxHelper.prototype.constructor = THREE.BoxHelper;
	THREE.BoxHelper.prototype.update = function () {
	  var a = new THREE.Box3();return function (b) {
	    a.setFromObject(b);if (!a.empty()) {
	      b = a.min;var c = a.max,
	          d = this.geometry.attributes.position,
	          e = d.array;e[0] = c.x;e[1] = c.y;e[2] = c.z;e[3] = b.x;e[4] = c.y;e[5] = c.z;e[6] = b.x;e[7] = b.y;e[8] = c.z;e[9] = c.x;e[10] = b.y;e[11] = c.z;e[12] = c.x;e[13] = c.y;e[14] = b.z;e[15] = b.x;e[16] = c.y;e[17] = b.z;e[18] = b.x;e[19] = b.y;e[20] = b.z;e[21] = c.x;e[22] = b.y;e[23] = b.z;d.needsUpdate = !0;this.geometry.computeBoundingSphere();
	    }
	  };
	}();
	THREE.BoundingBoxHelper = function (a, b) {
	  var c = void 0 !== b ? b : 8947848;this.object = a;this.box = new THREE.Box3();THREE.Mesh.call(this, new THREE.BoxGeometry(1, 1, 1), new THREE.MeshBasicMaterial({ color: c, wireframe: !0 }));
	};THREE.BoundingBoxHelper.prototype = Object.create(THREE.Mesh.prototype);THREE.BoundingBoxHelper.prototype.constructor = THREE.BoundingBoxHelper;THREE.BoundingBoxHelper.prototype.update = function () {
	  this.box.setFromObject(this.object);this.box.size(this.scale);this.box.center(this.position);
	};
	THREE.CameraHelper = function (a) {
	  function b(a, b, d) {
	    c(a, d);c(b, d);
	  }function c(a, b) {
	    d.vertices.push(new THREE.Vector3());d.colors.push(new THREE.Color(b));void 0 === g[a] && (g[a] = []);g[a].push(d.vertices.length - 1);
	  }var d = new THREE.Geometry(),
	      e = new THREE.LineBasicMaterial({ color: 16777215, vertexColors: THREE.FaceColors }),
	      g = {};b("n1", "n2", 16755200);b("n2", "n4", 16755200);b("n4", "n3", 16755200);b("n3", "n1", 16755200);b("f1", "f2", 16755200);b("f2", "f4", 16755200);b("f4", "f3", 16755200);b("f3", "f1", 16755200);b("n1", "f1", 16755200);
	  b("n2", "f2", 16755200);b("n3", "f3", 16755200);b("n4", "f4", 16755200);b("p", "n1", 16711680);b("p", "n2", 16711680);b("p", "n3", 16711680);b("p", "n4", 16711680);b("u1", "u2", 43775);b("u2", "u3", 43775);b("u3", "u1", 43775);b("c", "t", 16777215);b("p", "c", 3355443);b("cn1", "cn2", 3355443);b("cn3", "cn4", 3355443);b("cf1", "cf2", 3355443);b("cf3", "cf4", 3355443);THREE.LineSegments.call(this, d, e);this.camera = a;this.camera.updateProjectionMatrix();this.matrix = a.matrixWorld;this.matrixAutoUpdate = !1;this.pointMap = g;this.update();
	};
	THREE.CameraHelper.prototype = Object.create(THREE.LineSegments.prototype);THREE.CameraHelper.prototype.constructor = THREE.CameraHelper;
	THREE.CameraHelper.prototype.update = function () {
	  function a(a, f, h, l) {
	    d.set(f, h, l).unproject(e);a = c[a];if (void 0 !== a) for (f = 0, h = a.length; f < h; f++) {
	      b.vertices[a[f]].copy(d);
	    }
	  }var b,
	      c,
	      d = new THREE.Vector3(),
	      e = new THREE.Camera();return function () {
	    b = this.geometry;c = this.pointMap;e.projectionMatrix.copy(this.camera.projectionMatrix);a("c", 0, 0, -1);a("t", 0, 0, 1);a("n1", -1, -1, -1);a("n2", 1, -1, -1);a("n3", -1, 1, -1);a("n4", 1, 1, -1);a("f1", -1, -1, 1);a("f2", 1, -1, 1);a("f3", -1, 1, 1);a("f4", 1, 1, 1);a("u1", .7, 1.1, -1);a("u2", -.7, 1.1, -1);a("u3", 0, 2, -1);a("cf1", -1, 0, 1);a("cf2", 1, 0, 1);a("cf3", 0, -1, 1);a("cf4", 0, 1, 1);a("cn1", -1, 0, -1);a("cn2", 1, 0, -1);a("cn3", 0, -1, -1);a("cn4", 0, 1, -1);b.verticesNeedUpdate = !0;
	  };
	}();
	THREE.DirectionalLightHelper = function (a, b) {
	  THREE.Object3D.call(this);this.light = a;this.light.updateMatrixWorld();this.matrix = a.matrixWorld;this.matrixAutoUpdate = !1;b = b || 1;var c = new THREE.Geometry();c.vertices.push(new THREE.Vector3(-b, b, 0), new THREE.Vector3(b, b, 0), new THREE.Vector3(b, -b, 0), new THREE.Vector3(-b, -b, 0), new THREE.Vector3(-b, b, 0));var d = new THREE.LineBasicMaterial({ fog: !1 });d.color.copy(this.light.color).multiplyScalar(this.light.intensity);this.lightPlane = new THREE.Line(c, d);this.add(this.lightPlane);
	  c = new THREE.Geometry();c.vertices.push(new THREE.Vector3(), new THREE.Vector3());d = new THREE.LineBasicMaterial({ fog: !1 });d.color.copy(this.light.color).multiplyScalar(this.light.intensity);this.targetLine = new THREE.Line(c, d);this.add(this.targetLine);this.update();
	};THREE.DirectionalLightHelper.prototype = Object.create(THREE.Object3D.prototype);THREE.DirectionalLightHelper.prototype.constructor = THREE.DirectionalLightHelper;
	THREE.DirectionalLightHelper.prototype.dispose = function () {
	  this.lightPlane.geometry.dispose();this.lightPlane.material.dispose();this.targetLine.geometry.dispose();this.targetLine.material.dispose();
	};
	THREE.DirectionalLightHelper.prototype.update = function () {
	  var a = new THREE.Vector3(),
	      b = new THREE.Vector3(),
	      c = new THREE.Vector3();return function () {
	    a.setFromMatrixPosition(this.light.matrixWorld);b.setFromMatrixPosition(this.light.target.matrixWorld);c.subVectors(b, a);this.lightPlane.lookAt(c);this.lightPlane.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);this.targetLine.geometry.vertices[1].copy(c);this.targetLine.geometry.verticesNeedUpdate = !0;this.targetLine.material.color.copy(this.lightPlane.material.color);
	  };
	}();
	THREE.EdgesHelper = function (a, b, c) {
	  b = void 0 !== b ? b : 16777215;THREE.LineSegments.call(this, new THREE.EdgesGeometry(a.geometry, c), new THREE.LineBasicMaterial({ color: b }));this.matrix = a.matrixWorld;this.matrixAutoUpdate = !1;
	};THREE.EdgesHelper.prototype = Object.create(THREE.LineSegments.prototype);THREE.EdgesHelper.prototype.constructor = THREE.EdgesHelper;
	THREE.FaceNormalsHelper = function (a, b, c, d) {
	  this.object = a;this.size = void 0 !== b ? b : 1;a = void 0 !== c ? c : 16776960;d = void 0 !== d ? d : 1;b = 0;c = this.object.geometry;c instanceof THREE.Geometry ? b = c.faces.length : console.warn("THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.");c = new THREE.BufferGeometry();b = new THREE.Float32Attribute(6 * b, 3);c.addAttribute("position", b);THREE.LineSegments.call(this, c, new THREE.LineBasicMaterial({ color: a, linewidth: d }));this.matrixAutoUpdate = !1;this.update();
	};THREE.FaceNormalsHelper.prototype = Object.create(THREE.LineSegments.prototype);THREE.FaceNormalsHelper.prototype.constructor = THREE.FaceNormalsHelper;
	THREE.FaceNormalsHelper.prototype.update = function () {
	  var a = new THREE.Vector3(),
	      b = new THREE.Vector3(),
	      c = new THREE.Matrix3();return function () {
	    this.object.updateMatrixWorld(!0);c.getNormalMatrix(this.object.matrixWorld);for (var d = this.object.matrixWorld, e = this.geometry.attributes.position, g = this.object.geometry, f = g.vertices, g = g.faces, h = 0, l = 0, k = g.length; l < k; l++) {
	      var m = g[l],
	          p = m.normal;a.copy(f[m.a]).add(f[m.b]).add(f[m.c]).divideScalar(3).applyMatrix4(d);b.copy(p).applyMatrix3(c).normalize().multiplyScalar(this.size).add(a);
	      e.setXYZ(h, a.x, a.y, a.z);h += 1;e.setXYZ(h, b.x, b.y, b.z);h += 1;
	    }e.needsUpdate = !0;return this;
	  };
	}();
	THREE.GridHelper = function (a, b) {
	  var c = new THREE.Geometry(),
	      d = new THREE.LineBasicMaterial({ vertexColors: THREE.VertexColors });this.color1 = new THREE.Color(4473924);this.color2 = new THREE.Color(8947848);for (var e = -a; e <= a; e += b) {
	    c.vertices.push(new THREE.Vector3(-a, 0, e), new THREE.Vector3(a, 0, e), new THREE.Vector3(e, 0, -a), new THREE.Vector3(e, 0, a));var g = 0 === e ? this.color1 : this.color2;c.colors.push(g, g, g, g);
	  }THREE.LineSegments.call(this, c, d);
	};THREE.GridHelper.prototype = Object.create(THREE.LineSegments.prototype);
	THREE.GridHelper.prototype.constructor = THREE.GridHelper;THREE.GridHelper.prototype.setColors = function (a, b) {
	  this.color1.set(a);this.color2.set(b);this.geometry.colorsNeedUpdate = !0;
	};
	THREE.HemisphereLightHelper = function (a, b) {
	  THREE.Object3D.call(this);this.light = a;this.light.updateMatrixWorld();this.matrix = a.matrixWorld;this.matrixAutoUpdate = !1;this.colors = [new THREE.Color(), new THREE.Color()];var c = new THREE.SphereGeometry(b, 4, 2);c.rotateX(-Math.PI / 2);for (var d = 0; 8 > d; d++) {
	    c.faces[d].color = this.colors[4 > d ? 0 : 1];
	  }d = new THREE.MeshBasicMaterial({ vertexColors: THREE.FaceColors, wireframe: !0 });this.lightSphere = new THREE.Mesh(c, d);this.add(this.lightSphere);this.update();
	};
	THREE.HemisphereLightHelper.prototype = Object.create(THREE.Object3D.prototype);THREE.HemisphereLightHelper.prototype.constructor = THREE.HemisphereLightHelper;THREE.HemisphereLightHelper.prototype.dispose = function () {
	  this.lightSphere.geometry.dispose();this.lightSphere.material.dispose();
	};
	THREE.HemisphereLightHelper.prototype.update = function () {
	  var a = new THREE.Vector3();return function () {
	    this.colors[0].copy(this.light.color).multiplyScalar(this.light.intensity);this.colors[1].copy(this.light.groundColor).multiplyScalar(this.light.intensity);this.lightSphere.lookAt(a.setFromMatrixPosition(this.light.matrixWorld).negate());this.lightSphere.geometry.colorsNeedUpdate = !0;
	  };
	}();
	THREE.PointLightHelper = function (a, b) {
	  this.light = a;this.light.updateMatrixWorld();var c = new THREE.SphereGeometry(b, 4, 2),
	      d = new THREE.MeshBasicMaterial({ wireframe: !0, fog: !1 });d.color.copy(this.light.color).multiplyScalar(this.light.intensity);THREE.Mesh.call(this, c, d);this.matrix = this.light.matrixWorld;this.matrixAutoUpdate = !1;
	};THREE.PointLightHelper.prototype = Object.create(THREE.Mesh.prototype);THREE.PointLightHelper.prototype.constructor = THREE.PointLightHelper;
	THREE.PointLightHelper.prototype.dispose = function () {
	  this.geometry.dispose();this.material.dispose();
	};THREE.PointLightHelper.prototype.update = function () {
	  this.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);
	};
	THREE.SkeletonHelper = function (a) {
	  this.bones = this.getBoneList(a);for (var b = new THREE.Geometry(), c = 0; c < this.bones.length; c++) {
	    this.bones[c].parent instanceof THREE.Bone && (b.vertices.push(new THREE.Vector3()), b.vertices.push(new THREE.Vector3()), b.colors.push(new THREE.Color(0, 0, 1)), b.colors.push(new THREE.Color(0, 1, 0)));
	  }b.dynamic = !0;c = new THREE.LineBasicMaterial({ vertexColors: THREE.VertexColors, depthTest: !1, depthWrite: !1, transparent: !0 });THREE.LineSegments.call(this, b, c);this.root = a;this.matrix = a.matrixWorld;
	  this.matrixAutoUpdate = !1;this.update();
	};THREE.SkeletonHelper.prototype = Object.create(THREE.LineSegments.prototype);THREE.SkeletonHelper.prototype.constructor = THREE.SkeletonHelper;THREE.SkeletonHelper.prototype.getBoneList = function (a) {
	  var b = [];a instanceof THREE.Bone && b.push(a);for (var c = 0; c < a.children.length; c++) {
	    b.push.apply(b, this.getBoneList(a.children[c]));
	  }return b;
	};
	THREE.SkeletonHelper.prototype.update = function () {
	  for (var a = this.geometry, b = new THREE.Matrix4().getInverse(this.root.matrixWorld), c = new THREE.Matrix4(), d = 0, e = 0; e < this.bones.length; e++) {
	    var g = this.bones[e];g.parent instanceof THREE.Bone && (c.multiplyMatrices(b, g.matrixWorld), a.vertices[d].setFromMatrixPosition(c), c.multiplyMatrices(b, g.parent.matrixWorld), a.vertices[d + 1].setFromMatrixPosition(c), d += 2);
	  }a.verticesNeedUpdate = !0;a.computeBoundingSphere();
	};
	THREE.SpotLightHelper = function (a) {
	  THREE.Object3D.call(this);this.light = a;this.light.updateMatrixWorld();this.matrix = a.matrixWorld;this.matrixAutoUpdate = !1;a = new THREE.CylinderGeometry(0, 1, 1, 8, 1, !0);a.translate(0, -.5, 0);a.rotateX(-Math.PI / 2);var b = new THREE.MeshBasicMaterial({ wireframe: !0, fog: !1 });this.cone = new THREE.Mesh(a, b);this.add(this.cone);this.update();
	};THREE.SpotLightHelper.prototype = Object.create(THREE.Object3D.prototype);THREE.SpotLightHelper.prototype.constructor = THREE.SpotLightHelper;
	THREE.SpotLightHelper.prototype.dispose = function () {
	  this.cone.geometry.dispose();this.cone.material.dispose();
	};THREE.SpotLightHelper.prototype.update = function () {
	  var a = new THREE.Vector3(),
	      b = new THREE.Vector3();return function () {
	    var c = this.light.distance ? this.light.distance : 1E4,
	        d = c * Math.tan(this.light.angle);this.cone.scale.set(d, d, c);a.setFromMatrixPosition(this.light.matrixWorld);b.setFromMatrixPosition(this.light.target.matrixWorld);this.cone.lookAt(b.sub(a));this.cone.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);
	  };
	}();
	THREE.VertexNormalsHelper = function (a, b, c, d) {
	  this.object = a;this.size = void 0 !== b ? b : 1;a = void 0 !== c ? c : 16711680;d = void 0 !== d ? d : 1;b = 0;c = this.object.geometry;c instanceof THREE.Geometry ? b = 3 * c.faces.length : c instanceof THREE.BufferGeometry && (b = c.attributes.normal.count);c = new THREE.BufferGeometry();b = new THREE.Float32Attribute(6 * b, 3);c.addAttribute("position", b);THREE.LineSegments.call(this, c, new THREE.LineBasicMaterial({ color: a, linewidth: d }));this.matrixAutoUpdate = !1;this.update();
	};
	THREE.VertexNormalsHelper.prototype = Object.create(THREE.LineSegments.prototype);THREE.VertexNormalsHelper.prototype.constructor = THREE.VertexNormalsHelper;
	THREE.VertexNormalsHelper.prototype.update = function () {
	  var a = new THREE.Vector3(),
	      b = new THREE.Vector3(),
	      c = new THREE.Matrix3();return function () {
	    var d = ["a", "b", "c"];this.object.updateMatrixWorld(!0);c.getNormalMatrix(this.object.matrixWorld);var e = this.object.matrixWorld,
	        g = this.geometry.attributes.position,
	        f = this.object.geometry;if (f instanceof THREE.Geometry) for (var h = f.vertices, l = f.faces, k = f = 0, m = l.length; k < m; k++) {
	      for (var p = l[k], n = 0, q = p.vertexNormals.length; n < q; n++) {
	        var s = p.vertexNormals[n];a.copy(h[p[d[n]]]).applyMatrix4(e);
	        b.copy(s).applyMatrix3(c).normalize().multiplyScalar(this.size).add(a);g.setXYZ(f, a.x, a.y, a.z);f += 1;g.setXYZ(f, b.x, b.y, b.z);f += 1;
	      }
	    } else if (f instanceof THREE.BufferGeometry) for (d = f.attributes.position, h = f.attributes.normal, n = f = 0, q = d.count; n < q; n++) {
	      a.set(d.getX(n), d.getY(n), d.getZ(n)).applyMatrix4(e), b.set(h.getX(n), h.getY(n), h.getZ(n)), b.applyMatrix3(c).normalize().multiplyScalar(this.size).add(a), g.setXYZ(f, a.x, a.y, a.z), f += 1, g.setXYZ(f, b.x, b.y, b.z), f += 1;
	    }g.needsUpdate = !0;return this;
	  };
	}();
	THREE.WireframeHelper = function (a, b) {
	  var c = void 0 !== b ? b : 16777215;THREE.LineSegments.call(this, new THREE.WireframeGeometry(a.geometry), new THREE.LineBasicMaterial({ color: c }));this.matrix = a.matrixWorld;this.matrixAutoUpdate = !1;
	};THREE.WireframeHelper.prototype = Object.create(THREE.LineSegments.prototype);THREE.WireframeHelper.prototype.constructor = THREE.WireframeHelper;THREE.ImmediateRenderObject = function (a) {
	  THREE.Object3D.call(this);this.material = a;this.render = function (a) {};
	};
	THREE.ImmediateRenderObject.prototype = Object.create(THREE.Object3D.prototype);THREE.ImmediateRenderObject.prototype.constructor = THREE.ImmediateRenderObject;THREE.MorphBlendMesh = function (a, b) {
	  THREE.Mesh.call(this, a, b);this.animationsMap = {};this.animationsList = [];var c = this.geometry.morphTargets.length;this.createAnimation("__default", 0, c - 1, c / 1);this.setAnimationWeight("__default", 1);
	};THREE.MorphBlendMesh.prototype = Object.create(THREE.Mesh.prototype);THREE.MorphBlendMesh.prototype.constructor = THREE.MorphBlendMesh;
	THREE.MorphBlendMesh.prototype.createAnimation = function (a, b, c, d) {
	  b = { start: b, end: c, length: c - b + 1, fps: d, duration: (c - b) / d, lastFrame: 0, currentFrame: 0, active: !1, time: 0, direction: 1, weight: 1, directionBackwards: !1, mirroredLoop: !1 };this.animationsMap[a] = b;this.animationsList.push(b);
	};
	THREE.MorphBlendMesh.prototype.autoCreateAnimations = function (a) {
	  for (var b = /([a-z]+)_?(\d+)/, c, d = {}, e = this.geometry, g = 0, f = e.morphTargets.length; g < f; g++) {
	    var h = e.morphTargets[g].name.match(b);if (h && 1 < h.length) {
	      var l = h[1];d[l] || (d[l] = { start: Infinity, end: -Infinity });h = d[l];g < h.start && (h.start = g);g > h.end && (h.end = g);c || (c = l);
	    }
	  }for (l in d) {
	    h = d[l], this.createAnimation(l, h.start, h.end, a);
	  }this.firstAnimation = c;
	};
	THREE.MorphBlendMesh.prototype.setAnimationDirectionForward = function (a) {
	  if (a = this.animationsMap[a]) a.direction = 1, a.directionBackwards = !1;
	};THREE.MorphBlendMesh.prototype.setAnimationDirectionBackward = function (a) {
	  if (a = this.animationsMap[a]) a.direction = -1, a.directionBackwards = !0;
	};THREE.MorphBlendMesh.prototype.setAnimationFPS = function (a, b) {
	  var c = this.animationsMap[a];c && (c.fps = b, c.duration = (c.end - c.start) / c.fps);
	};
	THREE.MorphBlendMesh.prototype.setAnimationDuration = function (a, b) {
	  var c = this.animationsMap[a];c && (c.duration = b, c.fps = (c.end - c.start) / c.duration);
	};THREE.MorphBlendMesh.prototype.setAnimationWeight = function (a, b) {
	  var c = this.animationsMap[a];c && (c.weight = b);
	};THREE.MorphBlendMesh.prototype.setAnimationTime = function (a, b) {
	  var c = this.animationsMap[a];c && (c.time = b);
	};THREE.MorphBlendMesh.prototype.getAnimationTime = function (a) {
	  var b = 0;if (a = this.animationsMap[a]) b = a.time;return b;
	};
	THREE.MorphBlendMesh.prototype.getAnimationDuration = function (a) {
	  var b = -1;if (a = this.animationsMap[a]) b = a.duration;return b;
	};THREE.MorphBlendMesh.prototype.playAnimation = function (a) {
	  var b = this.animationsMap[a];b ? (b.time = 0, b.active = !0) : console.warn("THREE.MorphBlendMesh: animation[" + a + "] undefined in .playAnimation()");
	};THREE.MorphBlendMesh.prototype.stopAnimation = function (a) {
	  if (a = this.animationsMap[a]) a.active = !1;
	};
	THREE.MorphBlendMesh.prototype.update = function (a) {
	  for (var b = 0, c = this.animationsList.length; b < c; b++) {
	    var d = this.animationsList[b];if (d.active) {
	      var e = d.duration / d.length;d.time += d.direction * a;if (d.mirroredLoop) {
	        if (d.time > d.duration || 0 > d.time) d.direction *= -1, d.time > d.duration && (d.time = d.duration, d.directionBackwards = !0), 0 > d.time && (d.time = 0, d.directionBackwards = !1);
	      } else d.time %= d.duration, 0 > d.time && (d.time += d.duration);var g = d.start + THREE.Math.clamp(Math.floor(d.time / e), 0, d.length - 1),
	          f = d.weight;g !== d.currentFrame && (this.morphTargetInfluences[d.lastFrame] = 0, this.morphTargetInfluences[d.currentFrame] = 1 * f, this.morphTargetInfluences[g] = 0, d.lastFrame = d.currentFrame, d.currentFrame = g);e = d.time % e / e;d.directionBackwards && (e = 1 - e);d.currentFrame !== d.lastFrame ? (this.morphTargetInfluences[d.currentFrame] = e * f, this.morphTargetInfluences[d.lastFrame] = (1 - e) * f) : this.morphTargetInfluences[d.currentFrame] = f;
	    }
	  }
	};

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,